
pin_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08006b18  08006b18  00016b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fdc  08006fdc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe4  08006fe4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001dc  080071c8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080071c8  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2b5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc1  00000000  00000000  0002c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e66  00000000  00000000  0002f690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c85f  00000000  00000000  000504f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c06c2  00000000  00000000  0005cd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d417  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  0011d468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b00 	.word	0x08006b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006b00 	.word	0x08006b00

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 f9b3 	bl	800123a <HAL_Init>
  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  user_SystemClock_Config();
 8000ed4:	f002 fe52 	bl	8003b7c <user_SystemClock_Config>
  user_USART1_UART_Init();
 8000ed8:	f002 feb2 	bl	8003c40 <user_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Configurator();
 8000edc:	f002 fbd6 	bl	800368c <Configurator>
 8000ee0:	e7fc      	b.n	8000edc <main+0x10>

08000ee2 <Error_Handler>:
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
void Error_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee6:	b672      	cpsid	i
}
 8000ee8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report  the HAL error return state */
  __disable_irq();
  while (1)
 8000eea:	e7fe      	b.n	8000eea <Error_Handler+0x8>

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	; 0x60
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	; 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09e      	sub	sp, #120	; 0x78
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	2254      	movs	r2, #84	; 0x54
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 ffb9 	bl	8003ecc <memset>
  if(huart->Instance==USART1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_UART_MspInit+0xa8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d137      	bne.n	8000fd4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fb03 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f7c:	f7ff ffb1 	bl	8000ee2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_UART_MspInit+0xac>)
 8000f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f84:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <HAL_UART_MspInit+0xac>)
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0xac>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_UART_MspInit+0xac>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_UART_MspInit+0xac>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_UART_MspInit+0xac>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f000 fa8e 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3778      	adds	r7, #120	; 0x78
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f958 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return 1;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_kill>:

int _kill(int pid, int sig)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001052:	f002 ff11 	bl	8003e78 <__errno>
 8001056:	4603      	mov	r3, r0
 8001058:	2216      	movs	r2, #22
 800105a:	601a      	str	r2, [r3, #0]
  return -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_exit>:

void _exit (int status)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffe7 	bl	8001048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800107a:	e7fe      	b.n	800107a <_exit+0x12>

0800107c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e00a      	b.n	80010a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800108e:	f3af 8000 	nop.w
 8001092:	4601      	mov	r1, r0
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbf0      	blt.n	800108e <_read+0x12>
  }

  return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e009      	b.n	80010dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf1      	blt.n	80010c8 <_write+0x12>
  }
  return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_close>:

int _close(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001116:	605a      	str	r2, [r3, #4]
  return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_isatty>:

int _isatty(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <_sbrk+0x5c>)
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <_sbrk+0x60>)
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <_sbrk+0x64>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <_sbrk+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d207      	bcs.n	8001198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001188:	f002 fe76 	bl	8003e78 <__errno>
 800118c:	4603      	mov	r3, r0
 800118e:	220c      	movs	r2, #12
 8001190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	e009      	b.n	80011ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <_sbrk+0x64>)
 80011a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20010000 	.word	0x20010000
 80011b8:	00000400 	.word	0x00000400
 80011bc:	200001f8 	.word	0x200001f8
 80011c0:	200002f8 	.word	0x200002f8

080011c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff ffea 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopForever+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f002 fe35 	bl	8003e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff fe57 	bl	8000ecc <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001220:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800122c:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 8001230:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001234:	200002f4 	.word	0x200002f4

08001238 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_IRQHandler>

0800123a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f91f 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f80e 	bl	800126c <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	e001      	b.n	8001260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125c:	f7ff fe46 	bl	8000eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001260:	79fb      	ldrb	r3, [r7, #7]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_InitTick+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d023      	beq.n	80012c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_InitTick+0x70>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_InitTick+0x6c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f91d 	bl	80014d6 <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10f      	bne.n	80012c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d809      	bhi.n	80012bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 f8f5 	bl	800149e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <HAL_InitTick+0x74>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e007      	b.n	80012cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e004      	b.n	80012cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e001      	b.n	80012cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008
 8001308:	200001fc 	.word	0x200001fc

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200001fc 	.word	0x200001fc

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff47 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff5c 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb0 	bl	8001444 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fe:	e148      	b.n	8001792 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 813a 	beq.w	800178c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d005      	beq.n	8001530 <HAL_GPIO_Init+0x40>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d130      	bne.n	8001592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001566:	2201      	movs	r2, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 0201 	and.w	r2, r3, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b03      	cmp	r3, #3
 800159c:	d017      	beq.n	80015ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d123      	bne.n	8001622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0203 	and.w	r2, r3, #3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8094 	beq.w	800178c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001664:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <HAL_GPIO_Init+0x2c0>)
 8001666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001668:	4a51      	ldr	r2, [pc, #324]	; (80017b0 <HAL_GPIO_Init+0x2c0>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6613      	str	r3, [r2, #96]	; 0x60
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <HAL_GPIO_Init+0x2c0>)
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800167c:	4a4d      	ldr	r2, [pc, #308]	; (80017b4 <HAL_GPIO_Init+0x2c4>)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016a6:	d00d      	beq.n	80016c4 <HAL_GPIO_Init+0x1d4>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a43      	ldr	r2, [pc, #268]	; (80017b8 <HAL_GPIO_Init+0x2c8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0x1d0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a42      	ldr	r2, [pc, #264]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d101      	bne.n	80016bc <HAL_GPIO_Init+0x1cc>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1d6>
 80016bc:	2307      	movs	r3, #7
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1d6>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1d6>
 80016c4:	2300      	movs	r3, #0
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d6:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_GPIO_Init+0x2c4>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e4:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001708:	4a2d      	ldr	r2, [pc, #180]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f aeaf 	bne.w	8001500 <HAL_GPIO_Init+0x10>
  }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e001      	b.n	80017e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001810:	e002      	b.n	8001818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <HAL_PWREx_GetVoltageRange+0x18>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186e:	d130      	bne.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d038      	beq.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2232      	movs	r2, #50	; 0x32
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9b      	lsrs	r3, r3, #18
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a4:	e002      	b.n	80018ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d102      	bne.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f2      	bne.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018cc:	d110      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e00f      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018de:	d007      	beq.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e8:	4a05      	ldr	r2, [pc, #20]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40007000 	.word	0x40007000
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f000 bc02 	b.w	8002124 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001920:	4b96      	ldr	r3, [pc, #600]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192a:	4b94      	ldr	r3, [pc, #592]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80e4 	beq.w	8001b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_RCC_OscConfig+0x4c>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	f040 808b 	bne.w	8001a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b01      	cmp	r3, #1
 8001954:	f040 8087 	bne.w	8001a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001958:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_OscConfig+0x64>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e3d9      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1a      	ldr	r2, [r3, #32]
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <HAL_RCC_OscConfig+0x7e>
 8001980:	4b7e      	ldr	r3, [pc, #504]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	e005      	b.n	8001996 <HAL_RCC_OscConfig+0x8a>
 800198a:	4b7c      	ldr	r3, [pc, #496]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001996:	4293      	cmp	r3, r2
 8001998:	d223      	bcs.n	80019e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fd8c 	bl	80024bc <RCC_SetFlashLatencyFromMSIRange>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e3ba      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ae:	4b73      	ldr	r3, [pc, #460]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a72      	ldr	r2, [pc, #456]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	496d      	ldr	r1, [pc, #436]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	4968      	ldr	r1, [pc, #416]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
 80019e0:	e025      	b.n	8001a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4960      	ldr	r1, [pc, #384]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	495b      	ldr	r1, [pc, #364]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fd4c 	bl	80024bc <RCC_SetFlashLatencyFromMSIRange>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e37a      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a2e:	f000 fc81 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	4950      	ldr	r1, [pc, #320]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_RCC_OscConfig+0x278>)
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_RCC_OscConfig+0x27c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fc0a 	bl	800126c <HAL_InitTick>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d052      	beq.n	8001b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	e35e      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d032      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a42      	ldr	r2, [pc, #264]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fc47 	bl	800130c <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a82:	f7ff fc43 	bl	800130c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e347      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a35      	ldr	r2, [pc, #212]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4930      	ldr	r1, [pc, #192]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	492b      	ldr	r1, [pc, #172]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e01a      	b.n	8001b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc14 	bl	800130c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fc10 	bl	800130c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e314      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1dc>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d073      	beq.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x21c>
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d10e      	bne.n	8001b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d063      	beq.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d15f      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e2f1      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x24c>
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e025      	b.n	8001ba4 <HAL_RCC_OscConfig+0x298>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d114      	bne.n	8001b8c <HAL_RCC_OscConfig+0x280>
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a02      	ldr	r2, [pc, #8]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e013      	b.n	8001ba4 <HAL_RCC_OscConfig+0x298>
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08006b54 	.word	0x08006b54
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	4ba0      	ldr	r3, [pc, #640]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a9f      	ldr	r2, [pc, #636]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b9d      	ldr	r3, [pc, #628]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a9c      	ldr	r2, [pc, #624]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fbae 	bl	800130c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fbaa 	bl	800130c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e2ae      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	4b92      	ldr	r3, [pc, #584]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2a8>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fb9a 	bl	800130c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fb96 	bl	800130c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e29a      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	4b88      	ldr	r3, [pc, #544]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2d0>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d060      	beq.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_OscConfig+0x310>
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d119      	bne.n	8001c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d116      	bne.n	8001c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1c:	4b7c      	ldr	r3, [pc, #496]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x328>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e277      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	4973      	ldr	r1, [pc, #460]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c48:	e040      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d023      	beq.n	8001c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c52:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fb55 	bl	800130c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fb51 	bl	800130c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e255      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	4b65      	ldr	r3, [pc, #404]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b62      	ldr	r3, [pc, #392]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	495f      	ldr	r1, [pc, #380]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	e018      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a5c      	ldr	r2, [pc, #368]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb31 	bl	800130c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff fb2d 	bl	800130c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e231      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d03c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fb0c 	bl	800130c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fb08 	bl	800130c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e20c      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ef      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x3ec>
 8001d18:	e01b      	b.n	8001d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d20:	4a3b      	ldr	r2, [pc, #236]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff faef 	bl	800130c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff faeb 	bl	800130c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1ef      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ef      	bne.n	8001d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80a6 	beq.w	8001eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x508>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d118      	bne.n	8001dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_RCC_OscConfig+0x508>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_RCC_OscConfig+0x508>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da4:	f7ff fab2 	bl	800130c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dac:	f7ff faae 	bl	800130c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1b2      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_RCC_OscConfig+0x508>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_OscConfig+0x4d8>
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de2:	e029      	b.n	8001e38 <HAL_RCC_OscConfig+0x52c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d115      	bne.n	8001e18 <HAL_RCC_OscConfig+0x50c>
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCC_OscConfig+0x504>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x52c>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40007000 	.word	0x40007000
 8001e18:	4b9a      	ldr	r3, [pc, #616]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	4a99      	ldr	r2, [pc, #612]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e28:	4b96      	ldr	r3, [pc, #600]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	4a95      	ldr	r2, [pc, #596]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d016      	beq.n	8001e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fa64 	bl	800130c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7ff fa60 	bl	800130c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e162      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5e:	4b89      	ldr	r3, [pc, #548]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0ed      	beq.n	8001e48 <HAL_RCC_OscConfig+0x53c>
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fa4d 	bl	800130c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff fa49 	bl	800130c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e14b      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e8c:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ed      	bne.n	8001e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea0:	4b78      	ldr	r3, [pc, #480]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	4a77      	ldr	r2, [pc, #476]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d03c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01c      	beq.n	8001efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec0:	4b70      	ldr	r3, [pc, #448]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec6:	4a6f      	ldr	r2, [pc, #444]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fa1c 	bl	800130c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed8:	f7ff fa18 	bl	800130c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e11c      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eea:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ef      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x5cc>
 8001ef8:	e01b      	b.n	8001f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001efa:	4b62      	ldr	r3, [pc, #392]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f00:	4a60      	ldr	r2, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7ff f9ff 	bl	800130c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f12:	f7ff f9fb 	bl	800130c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0ff      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f24:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ef      	bne.n	8001f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80f3 	beq.w	8002122 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	f040 80c9 	bne.w	80020d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f46:	4b4f      	ldr	r3, [pc, #316]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0203 	and.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d12c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	3b01      	subs	r3, #1
 8001f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d123      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d113      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d109      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	3b01      	subs	r3, #1
 8001fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d06b      	beq.n	800208c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d062      	beq.n	8002080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0ac      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fca:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2d      	ldr	r2, [pc, #180]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fd6:	f7ff f999 	bl	800130c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff f995 	bl	800130c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e099      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCC_OscConfig+0x77c>)
 8002002:	4013      	ands	r3, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800200c:	3a01      	subs	r2, #1
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002016:	0212      	lsls	r2, r2, #8
 8002018:	4311      	orrs	r1, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800201e:	0852      	lsrs	r2, r2, #1
 8002020:	3a01      	subs	r2, #1
 8002022:	0552      	lsls	r2, r2, #21
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800202a:	0852      	lsrs	r2, r2, #1
 800202c:	3a01      	subs	r2, #1
 800202e:	0652      	lsls	r2, r2, #25
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002036:	06d2      	lsls	r2, r2, #27
 8002038:	430a      	orrs	r2, r1
 800203a:	4912      	ldr	r1, [pc, #72]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 800203c:	4313      	orrs	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002058:	f7ff f958 	bl	800130c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff f954 	bl	800130c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e058      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCC_OscConfig+0x778>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207e:	e050      	b.n	8002122 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e04f      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
 8002084:	40021000 	.word	0x40021000
 8002088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_OscConfig+0x820>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d144      	bne.n	8002122 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x820>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a23      	ldr	r2, [pc, #140]	; (800212c <HAL_RCC_OscConfig+0x820>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCC_OscConfig+0x820>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_RCC_OscConfig+0x820>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b0:	f7ff f92c 	bl	800130c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff f928 	bl	800130c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e02c      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_RCC_OscConfig+0x820>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x7ac>
 80020d6:	e024      	b.n	8002122 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d01f      	beq.n	800211e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_OscConfig+0x820>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_RCC_OscConfig+0x820>)
 80020e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff f90f 	bl	800130c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff f90b 	bl	800130c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e00f      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_OscConfig+0x820>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_OscConfig+0x820>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4905      	ldr	r1, [pc, #20]	; (800212c <HAL_RCC_OscConfig+0x820>)
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_OscConfig+0x824>)
 8002118:	4013      	ands	r3, r2
 800211a:	60cb      	str	r3, [r1, #12]
 800211c:	e001      	b.n	8002122 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	feeefffc 	.word	0xfeeefffc

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0e7      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d910      	bls.n	8002178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4970      	ldr	r1, [pc, #448]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b6e      	ldr	r3, [pc, #440]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0cf      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	4b66      	ldr	r3, [pc, #408]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	429a      	cmp	r2, r3
 8002192:	d908      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4960      	ldr	r1, [pc, #384]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04c      	beq.n	800224c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d121      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0a6      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	4b54      	ldr	r3, [pc, #336]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e09a      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ea:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e08e      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e086      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4943      	ldr	r1, [pc, #268]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7ff f876 	bl	800130c <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7ff f872 	bl	800130c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e06e      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002264:	429a      	cmp	r2, r3
 8002266:	d208      	bcs.n	800227a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	492b      	ldr	r1, [pc, #172]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d210      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 0207 	bic.w	r2, r3, #7
 8002290:	4923      	ldr	r1, [pc, #140]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e036      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4918      	ldr	r1, [pc, #96]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4910      	ldr	r1, [pc, #64]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e8:	f000 f824 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	490b      	ldr	r1, [pc, #44]	; (8002328 <HAL_RCC_ClockConfig+0x1f4>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 8002306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_ClockConfig+0x1fc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe ffad 	bl	800126c <HAL_InitTick>
 8002312:	4603      	mov	r3, r0
 8002314:	72fb      	strb	r3, [r7, #11]

  return status;
 8002316:	7afb      	ldrb	r3, [r7, #11]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40022000 	.word	0x40022000
 8002324:	40021000 	.word	0x40021000
 8002328:	08006b54 	.word	0x08006b54
 800232c:	20000000 	.word	0x20000000
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x34>
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d121      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d11e      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002368:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e005      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002390:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	e004      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b8:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d134      	bne.n	800242c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d003      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0xa6>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d003      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0xac>
 80023d8:	e005      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCC_GetSysClockFreq+0x110>)
 80023dc:	617b      	str	r3, [r7, #20]
      break;
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_GetSysClockFreq+0x114>)
 80023e2:	617b      	str	r3, [r7, #20]
      break;
 80023e4:	e002      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	617b      	str	r3, [r7, #20]
      break;
 80023ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	3301      	adds	r3, #1
 80023f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	fb03 f202 	mul.w	r2, r3, r2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	0e5b      	lsrs	r3, r3, #25
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	3301      	adds	r3, #1
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800242c:	69bb      	ldr	r3, [r7, #24]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	08006b6c 	.word	0x08006b6c
 8002444:	00f42400 	.word	0x00f42400
 8002448:	007a1200 	.word	0x007a1200

0800244c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_RCC_GetPCLK1Freq+0x28>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	08006b64 	.word	0x08006b64

08002490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002494:	f7ff ffda 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0adb      	lsrs	r3, r3, #11
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4904      	ldr	r1, [pc, #16]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08006b64 	.word	0x08006b64

080024bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024d4:	f7ff f9b6 	bl	8001844 <HAL_PWREx_GetVoltageRange>
 80024d8:	6178      	str	r0, [r7, #20]
 80024da:	e014      	b.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024f4:	f7ff f9a6 	bl	8001844 <HAL_PWREx_GetVoltageRange>
 80024f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250c:	d10b      	bne.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d919      	bls.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2ba0      	cmp	r3, #160	; 0xa0
 8002518:	d902      	bls.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800251a:	2302      	movs	r3, #2
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e013      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e010      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d902      	bls.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800252c:	2303      	movs	r3, #3
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	e00a      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d102      	bne.n	800253e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002538:	2302      	movs	r3, #2
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	e004      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d101      	bne.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002544:	2301      	movs	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 0207 	bic.w	r2, r3, #7
 8002550:	4909      	ldr	r1, [pc, #36]	; (8002578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	40022000 	.word	0x40022000

0800257c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002584:	2300      	movs	r3, #0
 8002586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002588:	2300      	movs	r3, #0
 800258a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002594:	2b00      	cmp	r3, #0
 8002596:	d031      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025a0:	d01a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025a6:	d814      	bhi.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025b2:	4b5d      	ldr	r3, [pc, #372]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4a5c      	ldr	r2, [pc, #368]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025be:	e00c      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f9de 	bl	8002988 <RCCEx_PLLSAI1_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d0:	e003      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	74fb      	strb	r3, [r7, #19]
      break;
 80025d6:	e000      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10b      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e0:	4b51      	ldr	r3, [pc, #324]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	494e      	ldr	r1, [pc, #312]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025f6:	e001      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 809e 	beq.w	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800260e:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	4b40      	ldr	r3, [pc, #256]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	4a3f      	ldr	r2, [pc, #252]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800262a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262e:	6593      	str	r3, [r2, #88]	; 0x58
 8002630:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263c:	2301      	movs	r3, #1
 800263e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800264c:	f7fe fe5e 	bl	800130c <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002652:	e009      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7fe fe5a 	bl	800130c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d902      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	74fb      	strb	r3, [r7, #19]
        break;
 8002666:	e005      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d15a      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800267a:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01e      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	429a      	cmp	r2, r3
 8002694:	d019      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026c2:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d016      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe1a 	bl	800130c <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	e00b      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fe16 	bl	800130c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d902      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	74fb      	strb	r3, [r7, #19]
            break;
 80026f2:	e006      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ec      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10b      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002716:	4904      	ldr	r1, [pc, #16]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800271e:	e009      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	74bb      	strb	r3, [r7, #18]
 8002724:	e006      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002734:	7c7b      	ldrb	r3, [r7, #17]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d105      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273a:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	4a89      	ldr	r2, [pc, #548]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002744:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002752:	4b84      	ldr	r3, [pc, #528]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	f023 0203 	bic.w	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4980      	ldr	r1, [pc, #512]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002774:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f023 020c 	bic.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4978      	ldr	r1, [pc, #480]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002796:	4b73      	ldr	r3, [pc, #460]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	496f      	ldr	r1, [pc, #444]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b8:	4b6a      	ldr	r3, [pc, #424]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	4967      	ldr	r1, [pc, #412]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027da:	4b62      	ldr	r3, [pc, #392]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	495e      	ldr	r1, [pc, #376]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	4956      	ldr	r1, [pc, #344]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800281e:	4b51      	ldr	r3, [pc, #324]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	494d      	ldr	r1, [pc, #308]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d028      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002840:	4b48      	ldr	r3, [pc, #288]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4945      	ldr	r1, [pc, #276]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285e:	d106      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002860:	4b40      	ldr	r3, [pc, #256]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a3f      	ldr	r2, [pc, #252]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286a:	60d3      	str	r3, [r2, #12]
 800286c:	e011      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002876:	d10c      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3304      	adds	r3, #4
 800287c:	2101      	movs	r1, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f882 	bl	8002988 <RCCEx_PLLSAI1_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d028      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	492d      	ldr	r1, [pc, #180]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028bc:	d106      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4a28      	ldr	r2, [pc, #160]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c8:	60d3      	str	r3, [r2, #12]
 80028ca:	e011      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f853 	bl	8002988 <RCCEx_PLLSAI1_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01c      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	4916      	ldr	r1, [pc, #88]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291a:	d10c      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f830 	bl	8002988 <RCCEx_PLLSAI1_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002932:	7cfb      	ldrb	r3, [r7, #19]
 8002934:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	4904      	ldr	r1, [pc, #16]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002958:	7cbb      	ldrb	r3, [r7, #18]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000

08002988 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002996:	4b74      	ldr	r3, [pc, #464]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029a2:	4b71      	ldr	r3, [pc, #452]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0203 	and.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d10d      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
       ||
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ba:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
       ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d047      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e044      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d018      	beq.n	8002a0e <RCCEx_PLLSAI1_Config+0x86>
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d825      	bhi.n	8002a2c <RCCEx_PLLSAI1_Config+0xa4>
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d002      	beq.n	80029ea <RCCEx_PLLSAI1_Config+0x62>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d009      	beq.n	80029fc <RCCEx_PLLSAI1_Config+0x74>
 80029e8:	e020      	b.n	8002a2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11d      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fa:	e01a      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029fc:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d116      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0c:	e013      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a1a:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a2a:	e006      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	e004      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a32:	bf00      	nop
 8002a34:	e002      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10d      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	430b      	orrs	r3, r1
 8002a58:	4943      	ldr	r1, [pc, #268]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d17c      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a70:	f7fe fc4c 	bl	800130c <HAL_GetTick>
 8002a74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a76:	e009      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a78:	f7fe fc48 	bl	800130c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	73fb      	strb	r3, [r7, #15]
        break;
 8002a8a:	e005      	b.n	8002a98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ef      	bne.n	8002a78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d15f      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d110      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002aac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6892      	ldr	r2, [r2, #8]
 8002ab4:	0211      	lsls	r1, r2, #8
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	06d2      	lsls	r2, r2, #27
 8002abc:	430a      	orrs	r2, r1
 8002abe:	492a      	ldr	r1, [pc, #168]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	610b      	str	r3, [r1, #16]
 8002ac4:	e027      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d112      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ad4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6892      	ldr	r2, [r2, #8]
 8002adc:	0211      	lsls	r1, r2, #8
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6912      	ldr	r2, [r2, #16]
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0552      	lsls	r2, r2, #21
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	491f      	ldr	r1, [pc, #124]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	610b      	str	r3, [r1, #16]
 8002af0:	e011      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af2:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002afa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	0211      	lsls	r1, r2, #8
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6952      	ldr	r2, [r2, #20]
 8002b08:	0852      	lsrs	r2, r2, #1
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0652      	lsls	r2, r2, #25
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	4915      	ldr	r1, [pc, #84]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe fbf3 	bl	800130c <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b28:	e009      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b2a:	f7fe fbef 	bl	800130c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d902      	bls.n	8002b3e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b3c:	e005      	b.n	8002b4a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ef      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4903      	ldr	r1, [pc, #12]	; (8002b68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e040      	b.n	8002c00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe f9d0 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f992 	bl	8002ed4 <UART_SetConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e022      	b.n	8002c00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fbb2 	bl	800332c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fc39 	bl	8003470 <UART_CheckIdleState>
 8002bfe:	4603      	mov	r3, r0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	f040 8082 	bne.w	8002d26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_UART_Transmit+0x26>
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e07a      	b.n	8002d28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x38>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e073      	b.n	8002d28 <HAL_UART_Transmit+0x120>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2221      	movs	r2, #33	; 0x21
 8002c54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c56:	f7fe fb59 	bl	800130c <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c74:	d108      	bne.n	8002c88 <HAL_UART_Transmit+0x80>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e003      	b.n	8002c90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c98:	e02d      	b.n	8002cf6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fc2c 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e039      	b.n	8002d28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	881a      	ldrh	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	3302      	adds	r3, #2
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	e008      	b.n	8002ce4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1cb      	bne.n	8002c9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fbf8 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e005      	b.n	8002d28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	f040 80bf 	bne.w	8002ec8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Receive+0x26>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0b7      	b.n	8002eca <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Receive+0x38>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e0b0      	b.n	8002eca <HAL_UART_Receive+0x19a>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2222      	movs	r2, #34	; 0x22
 8002d7c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d84:	f7fe fac2 	bl	800130c <HAL_GetTick>
 8002d88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	88fa      	ldrh	r2, [r7, #6]
 8002d96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da2:	d10e      	bne.n	8002dc2 <HAL_UART_Receive+0x92>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_UART_Receive+0x88>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002db2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002db6:	e02d      	b.n	8002e14 <HAL_UART_Receive+0xe4>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	22ff      	movs	r2, #255	; 0xff
 8002dbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dc0:	e028      	b.n	8002e14 <HAL_UART_Receive+0xe4>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <HAL_UART_Receive+0xb6>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d104      	bne.n	8002ddc <HAL_UART_Receive+0xac>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	22ff      	movs	r2, #255	; 0xff
 8002dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dda:	e01b      	b.n	8002e14 <HAL_UART_Receive+0xe4>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	227f      	movs	r2, #127	; 0x7f
 8002de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002de4:	e016      	b.n	8002e14 <HAL_UART_Receive+0xe4>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dee:	d10d      	bne.n	8002e0c <HAL_UART_Receive+0xdc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <HAL_UART_Receive+0xd2>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	227f      	movs	r2, #127	; 0x7f
 8002dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e00:	e008      	b.n	8002e14 <HAL_UART_Receive+0xe4>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	223f      	movs	r2, #63	; 0x3f
 8002e06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e0a:	e003      	b.n	8002e14 <HAL_UART_Receive+0xe4>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e1a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d108      	bne.n	8002e38 <HAL_UART_Receive+0x108>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e003      	b.n	8002e40 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e48:	e033      	b.n	8002eb2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2120      	movs	r1, #32
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fb54 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e032      	b.n	8002eca <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	8a7b      	ldrh	r3, [r7, #18]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	3302      	adds	r3, #2
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e00d      	b.n	8002ea0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	8a7b      	ldrh	r3, [r7, #18]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4013      	ands	r3, r2
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1c5      	bne.n	8002e4a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed8:	b08a      	sub	sp, #40	; 0x28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4bb4      	ldr	r3, [pc, #720]	; (80031d4 <UART_SetConfig+0x300>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4aa9      	ldr	r2, [pc, #676]	; (80031d8 <UART_SetConfig+0x304>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4aa0      	ldr	r2, [pc, #640]	; (80031dc <UART_SetConfig+0x308>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d126      	bne.n	8002fac <UART_SetConfig+0xd8>
 8002f5e:	4ba0      	ldr	r3, [pc, #640]	; (80031e0 <UART_SetConfig+0x30c>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d81b      	bhi.n	8002fa4 <UART_SetConfig+0xd0>
 8002f6c:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <UART_SetConfig+0xa0>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f95 	.word	0x08002f95
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f9d 	.word	0x08002f9d
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8a:	e080      	b.n	800308e <UART_SetConfig+0x1ba>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f92:	e07c      	b.n	800308e <UART_SetConfig+0x1ba>
 8002f94:	2304      	movs	r3, #4
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9a:	e078      	b.n	800308e <UART_SetConfig+0x1ba>
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa2:	e074      	b.n	800308e <UART_SetConfig+0x1ba>
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002faa:	e070      	b.n	800308e <UART_SetConfig+0x1ba>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a8c      	ldr	r2, [pc, #560]	; (80031e4 <UART_SetConfig+0x310>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d138      	bne.n	8003028 <UART_SetConfig+0x154>
 8002fb6:	4b8a      	ldr	r3, [pc, #552]	; (80031e0 <UART_SetConfig+0x30c>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d82d      	bhi.n	8003020 <UART_SetConfig+0x14c>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0xf8>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003021 	.word	0x08003021
 8002fd4:	08003021 	.word	0x08003021
 8002fd8:	08003021 	.word	0x08003021
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003021 	.word	0x08003021
 8002fe4:	08003021 	.word	0x08003021
 8002fe8:	08003021 	.word	0x08003021
 8002fec:	08003009 	.word	0x08003009
 8002ff0:	08003021 	.word	0x08003021
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	08003021 	.word	0x08003021
 8002ffc:	08003019 	.word	0x08003019
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003006:	e042      	b.n	800308e <UART_SetConfig+0x1ba>
 8003008:	2302      	movs	r3, #2
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300e:	e03e      	b.n	800308e <UART_SetConfig+0x1ba>
 8003010:	2304      	movs	r3, #4
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003016:	e03a      	b.n	800308e <UART_SetConfig+0x1ba>
 8003018:	2308      	movs	r3, #8
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301e:	e036      	b.n	800308e <UART_SetConfig+0x1ba>
 8003020:	2310      	movs	r3, #16
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003026:	e032      	b.n	800308e <UART_SetConfig+0x1ba>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6a      	ldr	r2, [pc, #424]	; (80031d8 <UART_SetConfig+0x304>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d12a      	bne.n	8003088 <UART_SetConfig+0x1b4>
 8003032:	4b6b      	ldr	r3, [pc, #428]	; (80031e0 <UART_SetConfig+0x30c>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800303c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003040:	d01a      	beq.n	8003078 <UART_SetConfig+0x1a4>
 8003042:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003046:	d81b      	bhi.n	8003080 <UART_SetConfig+0x1ac>
 8003048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304c:	d00c      	beq.n	8003068 <UART_SetConfig+0x194>
 800304e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003052:	d815      	bhi.n	8003080 <UART_SetConfig+0x1ac>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <UART_SetConfig+0x18c>
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305c:	d008      	beq.n	8003070 <UART_SetConfig+0x19c>
 800305e:	e00f      	b.n	8003080 <UART_SetConfig+0x1ac>
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e012      	b.n	800308e <UART_SetConfig+0x1ba>
 8003068:	2302      	movs	r3, #2
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e00e      	b.n	800308e <UART_SetConfig+0x1ba>
 8003070:	2304      	movs	r3, #4
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e00a      	b.n	800308e <UART_SetConfig+0x1ba>
 8003078:	2308      	movs	r3, #8
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307e:	e006      	b.n	800308e <UART_SetConfig+0x1ba>
 8003080:	2310      	movs	r3, #16
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003086:	e002      	b.n	800308e <UART_SetConfig+0x1ba>
 8003088:	2310      	movs	r3, #16
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <UART_SetConfig+0x304>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d17a      	bne.n	800318e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800309c:	2b08      	cmp	r3, #8
 800309e:	d824      	bhi.n	80030ea <UART_SetConfig+0x216>
 80030a0:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <UART_SetConfig+0x1d4>)
 80030a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a6:	bf00      	nop
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030eb 	.word	0x080030eb
 80030b0:	080030d5 	.word	0x080030d5
 80030b4:	080030eb 	.word	0x080030eb
 80030b8:	080030db 	.word	0x080030db
 80030bc:	080030eb 	.word	0x080030eb
 80030c0:	080030eb 	.word	0x080030eb
 80030c4:	080030eb 	.word	0x080030eb
 80030c8:	080030e3 	.word	0x080030e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030cc:	f7ff f9ca 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 80030d0:	61f8      	str	r0, [r7, #28]
        break;
 80030d2:	e010      	b.n	80030f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d4:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <UART_SetConfig+0x314>)
 80030d6:	61fb      	str	r3, [r7, #28]
        break;
 80030d8:	e00d      	b.n	80030f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030da:	f7ff f92b 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80030de:	61f8      	str	r0, [r7, #28]
        break;
 80030e0:	e009      	b.n	80030f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e6:	61fb      	str	r3, [r7, #28]
        break;
 80030e8:	e005      	b.n	80030f6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8107 	beq.w	800330c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	429a      	cmp	r2, r3
 800310c:	d305      	bcc.n	800311a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	429a      	cmp	r2, r3
 8003118:	d903      	bls.n	8003122 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003120:	e0f4      	b.n	800330c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2200      	movs	r2, #0
 8003126:	461c      	mov	r4, r3
 8003128:	4615      	mov	r5, r2
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	022b      	lsls	r3, r5, #8
 8003134:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003138:	0222      	lsls	r2, r4, #8
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	6849      	ldr	r1, [r1, #4]
 800313e:	0849      	lsrs	r1, r1, #1
 8003140:	2000      	movs	r0, #0
 8003142:	4688      	mov	r8, r1
 8003144:	4681      	mov	r9, r0
 8003146:	eb12 0a08 	adds.w	sl, r2, r8
 800314a:	eb43 0b09 	adc.w	fp, r3, r9
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800315c:	4650      	mov	r0, sl
 800315e:	4659      	mov	r1, fp
 8003160:	f7fd fd32 	bl	8000bc8 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003172:	d308      	bcc.n	8003186 <UART_SetConfig+0x2b2>
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317a:	d204      	bcs.n	8003186 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	e0c2      	b.n	800330c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800318c:	e0be      	b.n	800330c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d16a      	bne.n	800326e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800319c:	2b08      	cmp	r3, #8
 800319e:	d834      	bhi.n	800320a <UART_SetConfig+0x336>
 80031a0:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0x2d4>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031ed 	.word	0x080031ed
 80031b0:	080031f5 	.word	0x080031f5
 80031b4:	0800320b 	.word	0x0800320b
 80031b8:	080031fb 	.word	0x080031fb
 80031bc:	0800320b 	.word	0x0800320b
 80031c0:	0800320b 	.word	0x0800320b
 80031c4:	0800320b 	.word	0x0800320b
 80031c8:	08003203 	.word	0x08003203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031cc:	f7ff f94a 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 80031d0:	61f8      	str	r0, [r7, #28]
        break;
 80031d2:	e020      	b.n	8003216 <UART_SetConfig+0x342>
 80031d4:	efff69f3 	.word	0xefff69f3
 80031d8:	40008000 	.word	0x40008000
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40004400 	.word	0x40004400
 80031e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ec:	f7ff f950 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 80031f0:	61f8      	str	r0, [r7, #28]
        break;
 80031f2:	e010      	b.n	8003216 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <UART_SetConfig+0x454>)
 80031f6:	61fb      	str	r3, [r7, #28]
        break;
 80031f8:	e00d      	b.n	8003216 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fa:	f7ff f89b 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80031fe:	61f8      	str	r0, [r7, #28]
        break;
 8003200:	e009      	b.n	8003216 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	61fb      	str	r3, [r7, #28]
        break;
 8003208:	e005      	b.n	8003216 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003214:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d077      	beq.n	800330c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005a      	lsls	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d916      	bls.n	8003266 <UART_SetConfig+0x392>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323e:	d212      	bcs.n	8003266 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f023 030f 	bic.w	r3, r3, #15
 8003248:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	b29a      	uxth	r2, r3
 8003256:	8afb      	ldrh	r3, [r7, #22]
 8003258:	4313      	orrs	r3, r2
 800325a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	8afa      	ldrh	r2, [r7, #22]
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	e052      	b.n	800330c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800326c:	e04e      	b.n	800330c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800326e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003272:	2b08      	cmp	r3, #8
 8003274:	d827      	bhi.n	80032c6 <UART_SetConfig+0x3f2>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <UART_SetConfig+0x3a8>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032a9 	.word	0x080032a9
 8003284:	080032b1 	.word	0x080032b1
 8003288:	080032c7 	.word	0x080032c7
 800328c:	080032b7 	.word	0x080032b7
 8003290:	080032c7 	.word	0x080032c7
 8003294:	080032c7 	.word	0x080032c7
 8003298:	080032c7 	.word	0x080032c7
 800329c:	080032bf 	.word	0x080032bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a0:	f7ff f8e0 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 80032a4:	61f8      	str	r0, [r7, #28]
        break;
 80032a6:	e014      	b.n	80032d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a8:	f7ff f8f2 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 80032ac:	61f8      	str	r0, [r7, #28]
        break;
 80032ae:	e010      	b.n	80032d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <UART_SetConfig+0x454>)
 80032b2:	61fb      	str	r3, [r7, #28]
        break;
 80032b4:	e00d      	b.n	80032d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b6:	f7ff f83d 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80032ba:	61f8      	str	r0, [r7, #28]
        break;
 80032bc:	e009      	b.n	80032d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c2:	61fb      	str	r3, [r7, #28]
        break;
 80032c4:	e005      	b.n	80032d2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032d0:	bf00      	nop
    }

    if (pclk != 0U)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d019      	beq.n	800330c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	085a      	lsrs	r2, r3, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	441a      	add	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	d909      	bls.n	8003306 <UART_SetConfig+0x432>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d205      	bcs.n	8003306 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e002      	b.n	800330c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003318:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop
 8003328:	00f42400 	.word	0x00f42400

0800332c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01a      	beq.n	8003442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342a:	d10a      	bne.n	8003442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af02      	add	r7, sp, #8
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003480:	f7fd ff44 	bl	800130c <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b08      	cmp	r3, #8
 8003492:	d10e      	bne.n	80034b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f82d 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e023      	b.n	80034fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d10e      	bne.n	80034de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f817 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e00d      	b.n	80034fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b09c      	sub	sp, #112	; 0x70
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e0a5      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	f000 80a1 	beq.w	8003660 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7fd fef5 	bl	800130c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <UART_WaitOnFlagUntilTimeout+0x32>
 800352e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003530:	2b00      	cmp	r3, #0
 8003532:	d13e      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003548:	667b      	str	r3, [r7, #100]	; 0x64
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003554:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e6      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3308      	adds	r3, #8
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	663b      	str	r3, [r7, #96]	; 0x60
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3308      	adds	r3, #8
 8003584:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003586:	64ba      	str	r2, [r7, #72]	; 0x48
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800358c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1e5      	bne.n	8003566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e067      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d04f      	beq.n	8003660 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ce:	d147      	bne.n	8003660 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
 80035fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e6      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	613b      	str	r3, [r7, #16]
   return(result);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	66bb      	str	r3, [r7, #104]	; 0x68
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800362c:	623a      	str	r2, [r7, #32]
 800362e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	69f9      	ldr	r1, [r7, #28]
 8003632:	6a3a      	ldr	r2, [r7, #32]
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	61bb      	str	r3, [r7, #24]
   return(result);
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e010      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	429a      	cmp	r2, r3
 800367c:	f43f af4a 	beq.w	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3770      	adds	r7, #112	; 0x70
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <Configurator>:
char config[4];
uint8_t s[4];
struct status d;

 void Configurator()
 {
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
	 data_receive();
 8003690:	f000 fba2 	bl	8003dd8 <data_receive>

		  if (tx_data[0] != '\0')
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <Configurator+0x58>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <Configurator+0x18>
		   {
		     flag = 1; // Set flag to indicate data has been received
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <Configurator+0x5c>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e002      	b.n	80036aa <Configurator+0x1e>
		   }
		   else
		   {
			   flag=0;
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <Configurator+0x5c>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
		   }

           if (flag)
 80036aa:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <Configurator+0x5c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <Configurator+0x32>
           {
	        extract_data();
 80036b2:	f000 f8e3 	bl	800387c <extract_data>
	        pin_config();
 80036b6:	f000 f947 	bl	8003948 <pin_config>
	        clear_buffer();
 80036ba:	f000 f81b 	bl	80036f4 <clear_buffer>
           }
            reset_output();
 80036be:	f000 f863 	bl	8003788 <reset_output>
           	set_output();
 80036c2:	f000 f823 	bl	800370c <set_output>
            pin_status = read_pinstatus();
 80036c6:	f000 f89d 	bl	8003804 <read_pinstatus>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <Configurator+0x60>)
 80036ce:	6013      	str	r3, [r2, #0]
            status_transmit();
 80036d0:	f000 fb96 	bl	8003e00 <status_transmit>
            DataTOgsm(d);
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <Configurator+0x64>)
 80036d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036da:	f000 f907 	bl	80038ec <DataTOgsm>


 }
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000204 	.word	0x20000204
 80036e8:	200002b4 	.word	0x200002b4
 80036ec:	200002b8 	.word	0x200002b8
 80036f0:	200002c4 	.word	0x200002c4

080036f4 <clear_buffer>:

 void clear_buffer()
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 80036f8:	220f      	movs	r2, #15
 80036fa:	2100      	movs	r1, #0
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <clear_buffer+0x14>)
 80036fe:	f000 fbe5 	bl	8003ecc <memset>
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000204 	.word	0x20000204

0800370c <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

 void set_output()
 {
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
	 if(config[0] == 0)
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <set_output+0x70>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <set_output+0x1e>
	{
		 d.gpio[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_SET);
 8003718:	2201      	movs	r2, #1
 800371a:	2101      	movs	r1, #1
 800371c:	4818      	ldr	r0, [pc, #96]	; (8003780 <set_output+0x74>)
 800371e:	f000 fb93 	bl	8003e48 <write_gpio>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	4b17      	ldr	r3, [pc, #92]	; (8003784 <set_output+0x78>)
 8003728:	701a      	strb	r2, [r3, #0]
	}

	if(config[1] == 0)
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <set_output+0x70>)
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <set_output+0x38>
	{
		d.gpio[1] = write_gpio(GPIOB,GPIO_PIN_1, PIN_SET);
 8003732:	2201      	movs	r2, #1
 8003734:	2102      	movs	r1, #2
 8003736:	4812      	ldr	r0, [pc, #72]	; (8003780 <set_output+0x74>)
 8003738:	f000 fb86 	bl	8003e48 <write_gpio>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <set_output+0x78>)
 8003742:	705a      	strb	r2, [r3, #1]
	}

	if(config[2] == 0)
 8003744:	4b0d      	ldr	r3, [pc, #52]	; (800377c <set_output+0x70>)
 8003746:	789b      	ldrb	r3, [r3, #2]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d108      	bne.n	800375e <set_output+0x52>
	{
		d.gpio[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 800374c:	2201      	movs	r2, #1
 800374e:	2110      	movs	r1, #16
 8003750:	480b      	ldr	r0, [pc, #44]	; (8003780 <set_output+0x74>)
 8003752:	f000 fb79 	bl	8003e48 <write_gpio>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <set_output+0x78>)
 800375c:	709a      	strb	r2, [r3, #2]
	}

	if(config[3] == 0)
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <set_output+0x70>)
 8003760:	78db      	ldrb	r3, [r3, #3]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <set_output+0x6c>
	{
		d.gpio[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8003766:	2201      	movs	r2, #1
 8003768:	2120      	movs	r1, #32
 800376a:	4805      	ldr	r0, [pc, #20]	; (8003780 <set_output+0x74>)
 800376c:	f000 fb6c 	bl	8003e48 <write_gpio>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <set_output+0x78>)
 8003776:	70da      	strb	r2, [r3, #3]
	}
 }
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200002bc 	.word	0x200002bc
 8003780:	48000400 	.word	0x48000400
 8003784:	200002c4 	.word	0x200002c4

08003788 <reset_output>:

 void reset_output()
  {
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
 	 if(config[0] == 0)
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <reset_output+0x70>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d108      	bne.n	80037a6 <reset_output+0x1e>
 	{
 		d.gpio[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_RESET);
 8003794:	2200      	movs	r2, #0
 8003796:	2101      	movs	r1, #1
 8003798:	4818      	ldr	r0, [pc, #96]	; (80037fc <reset_output+0x74>)
 800379a:	f000 fb55 	bl	8003e48 <write_gpio>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <reset_output+0x78>)
 80037a4:	701a      	strb	r2, [r3, #0]
 	}

 	if(config[1] == 0)
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <reset_output+0x70>)
 80037a8:	785b      	ldrb	r3, [r3, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <reset_output+0x38>
 	{
 		d.gpio[1]=write_gpio(GPIOB,GPIO_PIN_1, PIN_RESET);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2102      	movs	r1, #2
 80037b2:	4812      	ldr	r0, [pc, #72]	; (80037fc <reset_output+0x74>)
 80037b4:	f000 fb48 	bl	8003e48 <write_gpio>
 80037b8:	4603      	mov	r3, r0
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <reset_output+0x78>)
 80037be:	705a      	strb	r2, [r3, #1]
 	}

 	if(config[2] == 0)
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <reset_output+0x70>)
 80037c2:	789b      	ldrb	r3, [r3, #2]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <reset_output+0x52>
 	{
 		d.gpio[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2110      	movs	r1, #16
 80037cc:	480b      	ldr	r0, [pc, #44]	; (80037fc <reset_output+0x74>)
 80037ce:	f000 fb3b 	bl	8003e48 <write_gpio>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <reset_output+0x78>)
 80037d8:	709a      	strb	r2, [r3, #2]
 	}

 	if(config[3] == 0)
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <reset_output+0x70>)
 80037dc:	78db      	ldrb	r3, [r3, #3]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <reset_output+0x6c>
 	{
 		d.gpio[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2120      	movs	r1, #32
 80037e6:	4805      	ldr	r0, [pc, #20]	; (80037fc <reset_output+0x74>)
 80037e8:	f000 fb2e 	bl	8003e48 <write_gpio>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <reset_output+0x78>)
 80037f2:	70da      	strb	r2, [r3, #3]
 	}
  }
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200002bc 	.word	0x200002bc
 80037fc:	48000400 	.word	0x48000400
 8003800:	200002c4 	.word	0x200002c4

08003804 <read_pinstatus>:

 uint8_t* read_pinstatus()
 {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	 if(config[0]==1)
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <read_pinstatus+0x6c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <read_pinstatus+0x1c>
	 {
	     d.gpio[0]=read_gpio( GPIOB,GPIO_PIN_0);
 8003810:	2101      	movs	r1, #1
 8003812:	4818      	ldr	r0, [pc, #96]	; (8003874 <read_pinstatus+0x70>)
 8003814:	f000 fb08 	bl	8003e28 <read_gpio>
 8003818:	4603      	mov	r3, r0
 800381a:	461a      	mov	r2, r3
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <read_pinstatus+0x74>)
 800381e:	701a      	strb	r2, [r3, #0]
	 }
	 if(config[1]==1)
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <read_pinstatus+0x6c>)
 8003822:	785b      	ldrb	r3, [r3, #1]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <read_pinstatus+0x34>
	 {
		 d.gpio[1]=read_gpio( GPIOB,GPIO_PIN_1);
 8003828:	2102      	movs	r1, #2
 800382a:	4812      	ldr	r0, [pc, #72]	; (8003874 <read_pinstatus+0x70>)
 800382c:	f000 fafc 	bl	8003e28 <read_gpio>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <read_pinstatus+0x74>)
 8003836:	705a      	strb	r2, [r3, #1]
	 }
	 if(config[2]==1)
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <read_pinstatus+0x6c>)
 800383a:	789b      	ldrb	r3, [r3, #2]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d107      	bne.n	8003850 <read_pinstatus+0x4c>
	 {
	    d.gpio[2]=read_gpio( GPIOB,GPIO_PIN_4);
 8003840:	2110      	movs	r1, #16
 8003842:	480c      	ldr	r0, [pc, #48]	; (8003874 <read_pinstatus+0x70>)
 8003844:	f000 faf0 	bl	8003e28 <read_gpio>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <read_pinstatus+0x74>)
 800384e:	709a      	strb	r2, [r3, #2]
	 }
	if(config[3]==1)
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <read_pinstatus+0x6c>)
 8003852:	78db      	ldrb	r3, [r3, #3]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <read_pinstatus+0x64>
	{
	   d.gpio[3]=read_gpio( GPIOB,GPIO_PIN_5);
 8003858:	2120      	movs	r1, #32
 800385a:	4806      	ldr	r0, [pc, #24]	; (8003874 <read_pinstatus+0x70>)
 800385c:	f000 fae4 	bl	8003e28 <read_gpio>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <read_pinstatus+0x74>)
 8003866:	70da      	strb	r2, [r3, #3]
    }
	 return d.gpio;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <read_pinstatus+0x74>)
 }
 800386a:	4618      	mov	r0, r3
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200002bc 	.word	0x200002bc
 8003874:	48000400 	.word	0x48000400
 8003878:	200002c4 	.word	0x200002c4

0800387c <extract_data>:


void extract_data()
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 8003880:	4915      	ldr	r1, [pc, #84]	; (80038d8 <extract_data+0x5c>)
 8003882:	4816      	ldr	r0, [pc, #88]	; (80038dc <extract_data+0x60>)
 8003884:	f000 ffa8 	bl	80047d8 <strtok>
 8003888:	4603      	mov	r3, r0
 800388a:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <extract_data+0x64>)
 800388c:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <extract_data+0x64>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <extract_data+0x64>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2209      	movs	r2, #9
 800389c:	4619      	mov	r1, r3
 800389e:	4811      	ldr	r0, [pc, #68]	; (80038e4 <extract_data+0x68>)
 80038a0:	f000 ff86 	bl	80047b0 <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <extract_data+0x68>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	725a      	strb	r2, [r3, #9]
		         token = strtok(NULL, ",");
 80038aa:	490b      	ldr	r1, [pc, #44]	; (80038d8 <extract_data+0x5c>)
 80038ac:	2000      	movs	r0, #0
 80038ae:	f000 ff93 	bl	80047d8 <strtok>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <extract_data+0x64>)
 80038b6:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <extract_data+0x64>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <extract_data+0x64>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2209      	movs	r2, #9
 80038c6:	4619      	mov	r1, r3
 80038c8:	4807      	ldr	r0, [pc, #28]	; (80038e8 <extract_data+0x6c>)
 80038ca:	f000 ff71 	bl	80047b0 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <extract_data+0x6c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	725a      	strb	r2, [r3, #9]
		         //token = strtok(NULL, ",");
		     }


}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	08006b18 	.word	0x08006b18
 80038dc:	20000204 	.word	0x20000204
 80038e0:	200002b0 	.word	0x200002b0
 80038e4:	20000298 	.word	0x20000298
 80038e8:	200002a4 	.word	0x200002a4

080038ec <DataTOgsm>:

void DataTOgsm(struct status d)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	463b      	mov	r3, r7
 80038f4:	e883 0003 	stmia.w	r3, {r0, r1}
	gpiostatus(d);
 80038f8:	463b      	mov	r3, r7
 80038fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038fe:	f000 f805 	bl	800390c <gpiostatus>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <gpiostatus>:

void gpiostatus(struct status d)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	463b      	mov	r3, r7
 8003914:	e883 0003 	stmia.w	r3, {r0, r1}
	 s[0]=d.gpio[0];
 8003918:	783a      	ldrb	r2, [r7, #0]
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <gpiostatus+0x38>)
 800391c:	701a      	strb	r2, [r3, #0]
	 s[1]=d.gpio[1];
 800391e:	787a      	ldrb	r2, [r7, #1]
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <gpiostatus+0x38>)
 8003922:	705a      	strb	r2, [r3, #1]
	 s[2]=d.gpio[2];
 8003924:	78ba      	ldrb	r2, [r7, #2]
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <gpiostatus+0x38>)
 8003928:	709a      	strb	r2, [r3, #2]
	 s[3]=d.gpio[3];
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <gpiostatus+0x38>)
 800392e:	70da      	strb	r2, [r3, #3]
	 s[4]=d.SCANTIME;
 8003930:	793a      	ldrb	r2, [r7, #4]
 8003932:	4b04      	ldr	r3, [pc, #16]	; (8003944 <gpiostatus+0x38>)
 8003934:	711a      	strb	r2, [r3, #4]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	200002c0 	.word	0x200002c0

08003948 <pin_config>:

void pin_config()
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"B0")==0)
 800394c:	497c      	ldr	r1, [pc, #496]	; (8003b40 <pin_config+0x1f8>)
 800394e:	487d      	ldr	r0, [pc, #500]	; (8003b44 <pin_config+0x1fc>)
 8003950:	f7fc fc3e 	bl	80001d0 <strcmp>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <pin_config+0x1a>
			     {
			       switch_val=1;
 800395a:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <pin_config+0x200>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e040      	b.n	80039e4 <pin_config+0x9c>
			     }

	            else if(strcmp(arr1,"B1")==0)
 8003962:	497a      	ldr	r1, [pc, #488]	; (8003b4c <pin_config+0x204>)
 8003964:	4877      	ldr	r0, [pc, #476]	; (8003b44 <pin_config+0x1fc>)
 8003966:	f7fc fc33 	bl	80001d0 <strcmp>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <pin_config+0x30>
				 {
				   switch_val=2;
 8003970:	4b75      	ldr	r3, [pc, #468]	; (8003b48 <pin_config+0x200>)
 8003972:	2202      	movs	r2, #2
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e035      	b.n	80039e4 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"B4")==0)
 8003978:	4975      	ldr	r1, [pc, #468]	; (8003b50 <pin_config+0x208>)
 800397a:	4872      	ldr	r0, [pc, #456]	; (8003b44 <pin_config+0x1fc>)
 800397c:	f7fc fc28 	bl	80001d0 <strcmp>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <pin_config+0x46>
	           	 {
	           		switch_val=3;
 8003986:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <pin_config+0x200>)
 8003988:	2203      	movs	r2, #3
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e02a      	b.n	80039e4 <pin_config+0x9c>
	           	 }

	            else if(strcmp(arr1,"B5")==0)
 800398e:	4971      	ldr	r1, [pc, #452]	; (8003b54 <pin_config+0x20c>)
 8003990:	486c      	ldr	r0, [pc, #432]	; (8003b44 <pin_config+0x1fc>)
 8003992:	f7fc fc1d 	bl	80001d0 <strcmp>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <pin_config+0x5c>
                 {
				    switch_val=4;
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <pin_config+0x200>)
 800399e:	2204      	movs	r2, #4
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e01f      	b.n	80039e4 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"ADC1")==0)
 80039a4:	496c      	ldr	r1, [pc, #432]	; (8003b58 <pin_config+0x210>)
 80039a6:	4867      	ldr	r0, [pc, #412]	; (8003b44 <pin_config+0x1fc>)
 80039a8:	f7fc fc12 	bl	80001d0 <strcmp>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <pin_config+0x72>
				 {
					switch_val=5;
 80039b2:	4b65      	ldr	r3, [pc, #404]	; (8003b48 <pin_config+0x200>)
 80039b4:	2205      	movs	r2, #5
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e014      	b.n	80039e4 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"RTC")==0)
 80039ba:	4968      	ldr	r1, [pc, #416]	; (8003b5c <pin_config+0x214>)
 80039bc:	4861      	ldr	r0, [pc, #388]	; (8003b44 <pin_config+0x1fc>)
 80039be:	f7fc fc07 	bl	80001d0 <strcmp>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <pin_config+0x88>
	             {
	            	switch_val=6;
 80039c8:	4b5f      	ldr	r3, [pc, #380]	; (8003b48 <pin_config+0x200>)
 80039ca:	2206      	movs	r2, #6
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e009      	b.n	80039e4 <pin_config+0x9c>
	             }

	            else if(strcmp(arr1,"SCANTIME")==0)
 80039d0:	4963      	ldr	r1, [pc, #396]	; (8003b60 <pin_config+0x218>)
 80039d2:	485c      	ldr	r0, [pc, #368]	; (8003b44 <pin_config+0x1fc>)
 80039d4:	f7fc fbfc 	bl	80001d0 <strcmp>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <pin_config+0x9c>
				 {
					switch_val=7;
 80039de:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <pin_config+0x200>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
				 }


			     switch(switch_val)
 80039e4:	4b58      	ldr	r3, [pc, #352]	; (8003b48 <pin_config+0x200>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	f200 80a6 	bhi.w	8003b3c <pin_config+0x1f4>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <pin_config+0xb0>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a95 	.word	0x08003a95
 8003a04:	08003ad5 	.word	0x08003ad5
 8003a08:	08003b3d 	.word	0x08003b3d
 8003a0c:	08003b3d 	.word	0x08003b3d
 8003a10:	08003b15 	.word	0x08003b15
			     {

			     case 1:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8003a14:	4953      	ldr	r1, [pc, #332]	; (8003b64 <pin_config+0x21c>)
 8003a16:	4854      	ldr	r0, [pc, #336]	; (8003b68 <pin_config+0x220>)
 8003a18:	f7fc fbda 	bl	80001d0 <strcmp>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <pin_config+0xec>
						{
			              user_GPIO_Init(GPIOB,GPIO_PIN_0,OUTPUT);
 8003a22:	2200      	movs	r2, #0
 8003a24:	2101      	movs	r1, #1
 8003a26:	4851      	ldr	r0, [pc, #324]	; (8003b6c <pin_config+0x224>)
 8003a28:	f000 f93a 	bl	8003ca0 <user_GPIO_Init>
					      config[0] = 0;
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <pin_config+0x228>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
			              else if(strcmp(arr2,"INPUT")==0)
					    {
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
						   config[0] = 1;
					    }
			     break;
 8003a32:	e07c      	b.n	8003b2e <pin_config+0x1e6>
			              else if(strcmp(arr2,"INPUT")==0)
 8003a34:	494f      	ldr	r1, [pc, #316]	; (8003b74 <pin_config+0x22c>)
 8003a36:	484c      	ldr	r0, [pc, #304]	; (8003b68 <pin_config+0x220>)
 8003a38:	f7fc fbca 	bl	80001d0 <strcmp>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d175      	bne.n	8003b2e <pin_config+0x1e6>
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
 8003a42:	2201      	movs	r2, #1
 8003a44:	2101      	movs	r1, #1
 8003a46:	4849      	ldr	r0, [pc, #292]	; (8003b6c <pin_config+0x224>)
 8003a48:	f000 f92a 	bl	8003ca0 <user_GPIO_Init>
						   config[0] = 1;
 8003a4c:	4b48      	ldr	r3, [pc, #288]	; (8003b70 <pin_config+0x228>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
			     break;
 8003a52:	e06c      	b.n	8003b2e <pin_config+0x1e6>

			   case 2:
				    	if(strcmp(arr2,"OUTPUT")==0)
 8003a54:	4943      	ldr	r1, [pc, #268]	; (8003b64 <pin_config+0x21c>)
 8003a56:	4844      	ldr	r0, [pc, #272]	; (8003b68 <pin_config+0x220>)
 8003a58:	f7fc fbba 	bl	80001d0 <strcmp>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <pin_config+0x12c>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_1,OUTPUT);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2102      	movs	r1, #2
 8003a66:	4841      	ldr	r0, [pc, #260]	; (8003b6c <pin_config+0x224>)
 8003a68:	f000 f91a 	bl	8003ca0 <user_GPIO_Init>
			    	      config[1]=0;
 8003a6c:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <pin_config+0x228>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	705a      	strb	r2, [r3, #1]
			    	     else if(strcmp(arr2,"INPUT")==0)
			    		{
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
			    		  config[1]=1;
			    		}
	    	    break;
 8003a72:	e05e      	b.n	8003b32 <pin_config+0x1ea>
			    	     else if(strcmp(arr2,"INPUT")==0)
 8003a74:	493f      	ldr	r1, [pc, #252]	; (8003b74 <pin_config+0x22c>)
 8003a76:	483c      	ldr	r0, [pc, #240]	; (8003b68 <pin_config+0x220>)
 8003a78:	f7fc fbaa 	bl	80001d0 <strcmp>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d157      	bne.n	8003b32 <pin_config+0x1ea>
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
 8003a82:	2201      	movs	r2, #1
 8003a84:	2102      	movs	r1, #2
 8003a86:	4839      	ldr	r0, [pc, #228]	; (8003b6c <pin_config+0x224>)
 8003a88:	f000 f90a 	bl	8003ca0 <user_GPIO_Init>
			    		  config[1]=1;
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <pin_config+0x228>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	705a      	strb	r2, [r3, #1]
	    	    break;
 8003a92:	e04e      	b.n	8003b32 <pin_config+0x1ea>

			     case 3:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8003a94:	4933      	ldr	r1, [pc, #204]	; (8003b64 <pin_config+0x21c>)
 8003a96:	4834      	ldr	r0, [pc, #208]	; (8003b68 <pin_config+0x220>)
 8003a98:	f7fc fb9a 	bl	80001d0 <strcmp>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d108      	bne.n	8003ab4 <pin_config+0x16c>
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2110      	movs	r1, #16
 8003aa6:	4831      	ldr	r0, [pc, #196]	; (8003b6c <pin_config+0x224>)
 8003aa8:	f000 f8fa 	bl	8003ca0 <user_GPIO_Init>
			     		  config[2]=0;
 8003aac:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <pin_config+0x228>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	709a      	strb	r2, [r3, #2]
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			     		  config[2]=1;
			     		}

			     break;
 8003ab2:	e040      	b.n	8003b36 <pin_config+0x1ee>
			     		 else if(strcmp(arr2,"INPUT")==0)
 8003ab4:	492f      	ldr	r1, [pc, #188]	; (8003b74 <pin_config+0x22c>)
 8003ab6:	482c      	ldr	r0, [pc, #176]	; (8003b68 <pin_config+0x220>)
 8003ab8:	f7fc fb8a 	bl	80001d0 <strcmp>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d139      	bne.n	8003b36 <pin_config+0x1ee>
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2110      	movs	r1, #16
 8003ac6:	4829      	ldr	r0, [pc, #164]	; (8003b6c <pin_config+0x224>)
 8003ac8:	f000 f8ea 	bl	8003ca0 <user_GPIO_Init>
			     		  config[2]=1;
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <pin_config+0x228>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	709a      	strb	r2, [r3, #2]
			     break;
 8003ad2:	e030      	b.n	8003b36 <pin_config+0x1ee>

			     case 4:
			    	 	 if(strcmp(arr2,"OUTPUT")==0)
 8003ad4:	4923      	ldr	r1, [pc, #140]	; (8003b64 <pin_config+0x21c>)
 8003ad6:	4824      	ldr	r0, [pc, #144]	; (8003b68 <pin_config+0x220>)
 8003ad8:	f7fc fb7a 	bl	80001d0 <strcmp>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <pin_config+0x1ac>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	4821      	ldr	r0, [pc, #132]	; (8003b6c <pin_config+0x224>)
 8003ae8:	f000 f8da 	bl	8003ca0 <user_GPIO_Init>
			    		  config[3]=0;
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <pin_config+0x228>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	70da      	strb	r2, [r3, #3]
			    		  else if(strcmp(arr2,"INPUT")==0)
			    	    {
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			              config[3]=1;
			    	    }
			     break;
 8003af2:	e022      	b.n	8003b3a <pin_config+0x1f2>
			    		  else if(strcmp(arr2,"INPUT")==0)
 8003af4:	491f      	ldr	r1, [pc, #124]	; (8003b74 <pin_config+0x22c>)
 8003af6:	481c      	ldr	r0, [pc, #112]	; (8003b68 <pin_config+0x220>)
 8003af8:	f7fc fb6a 	bl	80001d0 <strcmp>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11b      	bne.n	8003b3a <pin_config+0x1f2>
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8003b02:	2201      	movs	r2, #1
 8003b04:	2120      	movs	r1, #32
 8003b06:	4819      	ldr	r0, [pc, #100]	; (8003b6c <pin_config+0x224>)
 8003b08:	f000 f8ca 	bl	8003ca0 <user_GPIO_Init>
			              config[3]=1;
 8003b0c:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <pin_config+0x228>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	70da      	strb	r2, [r3, #3]
			     break;
 8003b12:	e012      	b.n	8003b3a <pin_config+0x1f2>
//				 }
//				 Set_Time(time);
//
//			 break;
			     case 7:
			    	 d.SCANTIME = (uint8_t)atoi(arr2);
 8003b14:	4814      	ldr	r0, [pc, #80]	; (8003b68 <pin_config+0x220>)
 8003b16:	f000 f9aa 	bl	8003e6e <atoi>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <pin_config+0x230>)
 8003b20:	711a      	strb	r2, [r3, #4]
			    	 DataTOgsm(d);
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <pin_config+0x230>)
 8003b24:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b28:	f7ff fee0 	bl	80038ec <DataTOgsm>
			     }
}
 8003b2c:	e006      	b.n	8003b3c <pin_config+0x1f4>
			     break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <pin_config+0x1f4>
	    	    break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <pin_config+0x1f4>
			     break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <pin_config+0x1f4>
			     break;
 8003b3a:	bf00      	nop
}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	08006b1c 	.word	0x08006b1c
 8003b44:	20000298 	.word	0x20000298
 8003b48:	20000200 	.word	0x20000200
 8003b4c:	08006b20 	.word	0x08006b20
 8003b50:	08006b24 	.word	0x08006b24
 8003b54:	08006b28 	.word	0x08006b28
 8003b58:	08006b2c 	.word	0x08006b2c
 8003b5c:	08006b34 	.word	0x08006b34
 8003b60:	08006b38 	.word	0x08006b38
 8003b64:	08006b44 	.word	0x08006b44
 8003b68:	200002a4 	.word	0x200002a4
 8003b6c:	48000400 	.word	0x48000400
 8003b70:	200002bc 	.word	0x200002bc
 8003b74:	08006b4c 	.word	0x08006b4c
 8003b78:	200002c4 	.word	0x200002c4

08003b7c <user_SystemClock_Config>:
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t gpio[4];

void user_SystemClock_Config(void)

{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b096      	sub	sp, #88	; 0x58
 8003b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	2244      	movs	r2, #68	; 0x44
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f99e 	bl	8003ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b90:	463b      	mov	r3, r7
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003b9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ba2:	f7fd fe5d 	bl	8001860 <HAL_PWREx_ControlVoltageScaling>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <user_SystemClock_Config+0x34>
  {
    Error_Handler();
 8003bac:	f7fd f999 	bl	8000ee2 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003bb0:	f7fd fe38 	bl	8001824 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <user_SystemClock_Config+0xc0>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <user_SystemClock_Config+0xc0>)
 8003bbc:	f023 0318 	bic.w	r3, r3, #24
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003bc4:	2314      	movs	r3, #20
 8003bc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003bd4:	2360      	movs	r3, #96	; 0x60
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003be0:	2301      	movs	r3, #1
 8003be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003be4:	2310      	movs	r3, #16
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003be8:	2307      	movs	r3, #7
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bec:	2302      	movs	r3, #2
 8003bee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd fe87 	bl	800190c <HAL_RCC_OscConfig>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <user_SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003c04:	f7fd f96d 	bl	8000ee2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c08:	230f      	movs	r3, #15
 8003c0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fa87 	bl	8002134 <HAL_RCC_ClockConfig>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <user_SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003c2c:	f7fd f959 	bl	8000ee2 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003c30:	f7fe fe9a 	bl	8002968 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003c34:	bf00      	nop
 8003c36:	3758      	adds	r7, #88	; 0x58
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000

08003c40 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
 ////////////////////
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c46:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <user_USART1_UART_Init+0x5c>)
 8003c48:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c50:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c66:	220c      	movs	r2, #12
 8003c68:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c82:	4805      	ldr	r0, [pc, #20]	; (8003c98 <user_USART1_UART_Init+0x58>)
 8003c84:	f7fe ff72 	bl	8002b6c <HAL_UART_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <user_USART1_UART_Init+0x52>
   {
     Error_Handler();
 8003c8e:	f7fd f928 	bl	8000ee2 <Error_Handler>
   }

 }
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000214 	.word	0x20000214
 8003c9c:	40013800 	.word	0x40013800

08003ca0 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb0:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <user_GPIO_Init+0xac>)
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb4:	4a25      	ldr	r2, [pc, #148]	; (8003d4c <user_GPIO_Init+0xac>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cbc:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <user_GPIO_Init+0xac>)
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc8:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <user_GPIO_Init+0xac>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ccc:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <user_GPIO_Init+0xac>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <user_GPIO_Init+0xac>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <user_GPIO_Init+0xac>)
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	4a19      	ldr	r2, [pc, #100]	; (8003d4c <user_GPIO_Init+0xac>)
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <user_GPIO_Init+0xac>)
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8003cf8:	787a      	ldrb	r2, [r7, #1]
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fd78 	bl	80017f4 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8003d04:	787b      	ldrb	r3, [r7, #1]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <user_GPIO_Init+0x78>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8003d0a:	787a      	ldrb	r2, [r7, #1]
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f81f 	bl	8003d54 <gpio_output>
 8003d16:	e008      	b.n	8003d2a <user_GPIO_Init+0x8a>
     }
     else if(PIN_mode == INPUT)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d105      	bne.n	8003d2a <user_GPIO_Init+0x8a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 8003d1e:	787a      	ldrb	r2, [r7, #1]
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f837 	bl	8003d98 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <user_GPIO_Init+0xb0>)
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <user_GPIO_Init+0xb0>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <user_GPIO_Init+0xb0>)
 8003d38:	2203      	movs	r2, #3
 8003d3a:	60da      	str	r2, [r3, #12]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <user_GPIO_Init+0xb0>)
 8003d3e:	2203      	movs	r2, #3
 8003d40:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	200002cc 	.word	0x200002cc

08003d54 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	f107 030c 	add.w	r3, r7, #12
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fbb0 	bl	80014f0 <HAL_GPIO_Init>
 }
 8003d90:	bf00      	nop
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
 8003da4:	4613      	mov	r3, r2
 8003da6:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 030c 	add.w	r3, r7, #12
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fb90 	bl	80014f0 <HAL_GPIO_Init>
 }
 8003dd0:	bf00      	nop
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <data_receive>:




void data_receive()
 {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 8003ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003de0:	2214      	movs	r2, #20
 8003de2:	4905      	ldr	r1, [pc, #20]	; (8003df8 <data_receive+0x20>)
 8003de4:	4805      	ldr	r0, [pc, #20]	; (8003dfc <data_receive+0x24>)
 8003de6:	f7fe ffa3 	bl	8002d30 <HAL_UART_Receive>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <data_receive+0x1c>
	 {
			 Error_Handler();
 8003df0:	f7fd f877 	bl	8000ee2 <Error_Handler>
	 }
 }
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000204 	.word	0x20000204
 8003dfc:	20000214 	.word	0x20000214

08003e00 <status_transmit>:


void status_transmit()
 {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	if ((HAL_UART_Transmit(&huart1, (uint8_t *)gpio, 4,1000)) == HAL_ERROR)
 8003e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e08:	2204      	movs	r2, #4
 8003e0a:	4905      	ldr	r1, [pc, #20]	; (8003e20 <status_transmit+0x20>)
 8003e0c:	4805      	ldr	r0, [pc, #20]	; (8003e24 <status_transmit+0x24>)
 8003e0e:	f7fe fefb 	bl	8002c08 <HAL_UART_Transmit>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <status_transmit+0x1c>
	 {
		 Error_Handler();
 8003e18:	f7fd f863 	bl	8000ee2 <Error_Handler>
	 }
 }
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200002e0 	.word	0x200002e0
 8003e24:	20000214 	.word	0x20000214

08003e28 <read_gpio>:

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8003e34:	887b      	ldrh	r3, [r7, #2]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fd fcc3 	bl	80017c4 <HAL_GPIO_ReadPin>
 8003e3e:	4603      	mov	r3, r0

 }
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	4613      	mov	r3, r2
 8003e56:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8003e58:	787a      	ldrb	r2, [r7, #1]
 8003e5a:	887b      	ldrh	r3, [r7, #2]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd fcc8 	bl	80017f4 <HAL_GPIO_WritePin>
    return PinState;
 8003e64:	787b      	ldrb	r3, [r7, #1]
 }
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <atoi>:
 8003e6e:	220a      	movs	r2, #10
 8003e70:	2100      	movs	r1, #0
 8003e72:	f000 bd8f 	b.w	8004994 <strtol>
	...

08003e78 <__errno>:
 8003e78:	4b01      	ldr	r3, [pc, #4]	; (8003e80 <__errno+0x8>)
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	2000000c 	.word	0x2000000c

08003e84 <__libc_init_array>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	4d0d      	ldr	r5, [pc, #52]	; (8003ebc <__libc_init_array+0x38>)
 8003e88:	4c0d      	ldr	r4, [pc, #52]	; (8003ec0 <__libc_init_array+0x3c>)
 8003e8a:	1b64      	subs	r4, r4, r5
 8003e8c:	10a4      	asrs	r4, r4, #2
 8003e8e:	2600      	movs	r6, #0
 8003e90:	42a6      	cmp	r6, r4
 8003e92:	d109      	bne.n	8003ea8 <__libc_init_array+0x24>
 8003e94:	4d0b      	ldr	r5, [pc, #44]	; (8003ec4 <__libc_init_array+0x40>)
 8003e96:	4c0c      	ldr	r4, [pc, #48]	; (8003ec8 <__libc_init_array+0x44>)
 8003e98:	f002 fe32 	bl	8006b00 <_init>
 8003e9c:	1b64      	subs	r4, r4, r5
 8003e9e:	10a4      	asrs	r4, r4, #2
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	42a6      	cmp	r6, r4
 8003ea4:	d105      	bne.n	8003eb2 <__libc_init_array+0x2e>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eac:	4798      	blx	r3
 8003eae:	3601      	adds	r6, #1
 8003eb0:	e7ee      	b.n	8003e90 <__libc_init_array+0xc>
 8003eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb6:	4798      	blx	r3
 8003eb8:	3601      	adds	r6, #1
 8003eba:	e7f2      	b.n	8003ea2 <__libc_init_array+0x1e>
 8003ebc:	08006fe4 	.word	0x08006fe4
 8003ec0:	08006fe4 	.word	0x08006fe4
 8003ec4:	08006fe4 	.word	0x08006fe4
 8003ec8:	08006fe8 	.word	0x08006fe8

08003ecc <memset>:
 8003ecc:	4402      	add	r2, r0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <memset+0xa>
 8003ed4:	4770      	bx	lr
 8003ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eda:	e7f9      	b.n	8003ed0 <memset+0x4>

08003edc <__cvt>:
 8003edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	ec55 4b10 	vmov	r4, r5, d0
 8003ee4:	2d00      	cmp	r5, #0
 8003ee6:	460e      	mov	r6, r1
 8003ee8:	4619      	mov	r1, r3
 8003eea:	462b      	mov	r3, r5
 8003eec:	bfbb      	ittet	lt
 8003eee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ef2:	461d      	movlt	r5, r3
 8003ef4:	2300      	movge	r3, #0
 8003ef6:	232d      	movlt	r3, #45	; 0x2d
 8003ef8:	700b      	strb	r3, [r1, #0]
 8003efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003efc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f00:	4691      	mov	r9, r2
 8003f02:	f023 0820 	bic.w	r8, r3, #32
 8003f06:	bfbc      	itt	lt
 8003f08:	4622      	movlt	r2, r4
 8003f0a:	4614      	movlt	r4, r2
 8003f0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f10:	d005      	beq.n	8003f1e <__cvt+0x42>
 8003f12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f16:	d100      	bne.n	8003f1a <__cvt+0x3e>
 8003f18:	3601      	adds	r6, #1
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	e000      	b.n	8003f20 <__cvt+0x44>
 8003f1e:	2103      	movs	r1, #3
 8003f20:	ab03      	add	r3, sp, #12
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	ab02      	add	r3, sp, #8
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	ec45 4b10 	vmov	d0, r4, r5
 8003f2c:	4653      	mov	r3, sl
 8003f2e:	4632      	mov	r2, r6
 8003f30:	f000 fde6 	bl	8004b00 <_dtoa_r>
 8003f34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f38:	4607      	mov	r7, r0
 8003f3a:	d102      	bne.n	8003f42 <__cvt+0x66>
 8003f3c:	f019 0f01 	tst.w	r9, #1
 8003f40:	d022      	beq.n	8003f88 <__cvt+0xac>
 8003f42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f46:	eb07 0906 	add.w	r9, r7, r6
 8003f4a:	d110      	bne.n	8003f6e <__cvt+0x92>
 8003f4c:	783b      	ldrb	r3, [r7, #0]
 8003f4e:	2b30      	cmp	r3, #48	; 0x30
 8003f50:	d10a      	bne.n	8003f68 <__cvt+0x8c>
 8003f52:	2200      	movs	r2, #0
 8003f54:	2300      	movs	r3, #0
 8003f56:	4620      	mov	r0, r4
 8003f58:	4629      	mov	r1, r5
 8003f5a:	f7fc fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f5e:	b918      	cbnz	r0, 8003f68 <__cvt+0x8c>
 8003f60:	f1c6 0601 	rsb	r6, r6, #1
 8003f64:	f8ca 6000 	str.w	r6, [sl]
 8003f68:	f8da 3000 	ldr.w	r3, [sl]
 8003f6c:	4499      	add	r9, r3
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2300      	movs	r3, #0
 8003f72:	4620      	mov	r0, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	f7fc fdb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f7a:	b108      	cbz	r0, 8003f80 <__cvt+0xa4>
 8003f7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f80:	2230      	movs	r2, #48	; 0x30
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	454b      	cmp	r3, r9
 8003f86:	d307      	bcc.n	8003f98 <__cvt+0xbc>
 8003f88:	9b03      	ldr	r3, [sp, #12]
 8003f8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f8c:	1bdb      	subs	r3, r3, r7
 8003f8e:	4638      	mov	r0, r7
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	b004      	add	sp, #16
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	1c59      	adds	r1, r3, #1
 8003f9a:	9103      	str	r1, [sp, #12]
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e7f0      	b.n	8003f82 <__cvt+0xa6>

08003fa0 <__exponent>:
 8003fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	bfb8      	it	lt
 8003fa8:	4249      	neglt	r1, r1
 8003faa:	f803 2b02 	strb.w	r2, [r3], #2
 8003fae:	bfb4      	ite	lt
 8003fb0:	222d      	movlt	r2, #45	; 0x2d
 8003fb2:	222b      	movge	r2, #43	; 0x2b
 8003fb4:	2909      	cmp	r1, #9
 8003fb6:	7042      	strb	r2, [r0, #1]
 8003fb8:	dd2a      	ble.n	8004010 <__exponent+0x70>
 8003fba:	f10d 0407 	add.w	r4, sp, #7
 8003fbe:	46a4      	mov	ip, r4
 8003fc0:	270a      	movs	r7, #10
 8003fc2:	46a6      	mov	lr, r4
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8003fca:	fb07 1516 	mls	r5, r7, r6, r1
 8003fce:	3530      	adds	r5, #48	; 0x30
 8003fd0:	2a63      	cmp	r2, #99	; 0x63
 8003fd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8003fd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003fda:	4631      	mov	r1, r6
 8003fdc:	dcf1      	bgt.n	8003fc2 <__exponent+0x22>
 8003fde:	3130      	adds	r1, #48	; 0x30
 8003fe0:	f1ae 0502 	sub.w	r5, lr, #2
 8003fe4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003fe8:	1c44      	adds	r4, r0, #1
 8003fea:	4629      	mov	r1, r5
 8003fec:	4561      	cmp	r1, ip
 8003fee:	d30a      	bcc.n	8004006 <__exponent+0x66>
 8003ff0:	f10d 0209 	add.w	r2, sp, #9
 8003ff4:	eba2 020e 	sub.w	r2, r2, lr
 8003ff8:	4565      	cmp	r5, ip
 8003ffa:	bf88      	it	hi
 8003ffc:	2200      	movhi	r2, #0
 8003ffe:	4413      	add	r3, r2
 8004000:	1a18      	subs	r0, r3, r0
 8004002:	b003      	add	sp, #12
 8004004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800400a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800400e:	e7ed      	b.n	8003fec <__exponent+0x4c>
 8004010:	2330      	movs	r3, #48	; 0x30
 8004012:	3130      	adds	r1, #48	; 0x30
 8004014:	7083      	strb	r3, [r0, #2]
 8004016:	70c1      	strb	r1, [r0, #3]
 8004018:	1d03      	adds	r3, r0, #4
 800401a:	e7f1      	b.n	8004000 <__exponent+0x60>

0800401c <_printf_float>:
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	ed2d 8b02 	vpush	{d8}
 8004024:	b08d      	sub	sp, #52	; 0x34
 8004026:	460c      	mov	r4, r1
 8004028:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800402c:	4616      	mov	r6, r2
 800402e:	461f      	mov	r7, r3
 8004030:	4605      	mov	r5, r0
 8004032:	f001 fb65 	bl	8005700 <_localeconv_r>
 8004036:	f8d0 a000 	ldr.w	sl, [r0]
 800403a:	4650      	mov	r0, sl
 800403c:	f7fc f8d2 	bl	80001e4 <strlen>
 8004040:	2300      	movs	r3, #0
 8004042:	930a      	str	r3, [sp, #40]	; 0x28
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	9305      	str	r3, [sp, #20]
 8004048:	f8d8 3000 	ldr.w	r3, [r8]
 800404c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004050:	3307      	adds	r3, #7
 8004052:	f023 0307 	bic.w	r3, r3, #7
 8004056:	f103 0208 	add.w	r2, r3, #8
 800405a:	f8c8 2000 	str.w	r2, [r8]
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004066:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800406a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800406e:	9307      	str	r3, [sp, #28]
 8004070:	f8cd 8018 	str.w	r8, [sp, #24]
 8004074:	ee08 0a10 	vmov	s16, r0
 8004078:	4b9f      	ldr	r3, [pc, #636]	; (80042f8 <_printf_float+0x2dc>)
 800407a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	f7fc fd63 	bl	8000b4c <__aeabi_dcmpun>
 8004086:	bb88      	cbnz	r0, 80040ec <_printf_float+0xd0>
 8004088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800408c:	4b9a      	ldr	r3, [pc, #616]	; (80042f8 <_printf_float+0x2dc>)
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	f7fc fd3d 	bl	8000b10 <__aeabi_dcmple>
 8004096:	bb48      	cbnz	r0, 80040ec <_printf_float+0xd0>
 8004098:	2200      	movs	r2, #0
 800409a:	2300      	movs	r3, #0
 800409c:	4640      	mov	r0, r8
 800409e:	4649      	mov	r1, r9
 80040a0:	f7fc fd2c 	bl	8000afc <__aeabi_dcmplt>
 80040a4:	b110      	cbz	r0, 80040ac <_printf_float+0x90>
 80040a6:	232d      	movs	r3, #45	; 0x2d
 80040a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ac:	4b93      	ldr	r3, [pc, #588]	; (80042fc <_printf_float+0x2e0>)
 80040ae:	4894      	ldr	r0, [pc, #592]	; (8004300 <_printf_float+0x2e4>)
 80040b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80040b4:	bf94      	ite	ls
 80040b6:	4698      	movls	r8, r3
 80040b8:	4680      	movhi	r8, r0
 80040ba:	2303      	movs	r3, #3
 80040bc:	6123      	str	r3, [r4, #16]
 80040be:	9b05      	ldr	r3, [sp, #20]
 80040c0:	f023 0204 	bic.w	r2, r3, #4
 80040c4:	6022      	str	r2, [r4, #0]
 80040c6:	f04f 0900 	mov.w	r9, #0
 80040ca:	9700      	str	r7, [sp, #0]
 80040cc:	4633      	mov	r3, r6
 80040ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80040d0:	4621      	mov	r1, r4
 80040d2:	4628      	mov	r0, r5
 80040d4:	f000 f9d8 	bl	8004488 <_printf_common>
 80040d8:	3001      	adds	r0, #1
 80040da:	f040 8090 	bne.w	80041fe <_printf_float+0x1e2>
 80040de:	f04f 30ff 	mov.w	r0, #4294967295
 80040e2:	b00d      	add	sp, #52	; 0x34
 80040e4:	ecbd 8b02 	vpop	{d8}
 80040e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	4640      	mov	r0, r8
 80040f2:	4649      	mov	r1, r9
 80040f4:	f7fc fd2a 	bl	8000b4c <__aeabi_dcmpun>
 80040f8:	b140      	cbz	r0, 800410c <_printf_float+0xf0>
 80040fa:	464b      	mov	r3, r9
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bfbc      	itt	lt
 8004100:	232d      	movlt	r3, #45	; 0x2d
 8004102:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004106:	487f      	ldr	r0, [pc, #508]	; (8004304 <_printf_float+0x2e8>)
 8004108:	4b7f      	ldr	r3, [pc, #508]	; (8004308 <_printf_float+0x2ec>)
 800410a:	e7d1      	b.n	80040b0 <_printf_float+0x94>
 800410c:	6863      	ldr	r3, [r4, #4]
 800410e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004112:	9206      	str	r2, [sp, #24]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	d13f      	bne.n	8004198 <_printf_float+0x17c>
 8004118:	2306      	movs	r3, #6
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	9b05      	ldr	r3, [sp, #20]
 800411e:	6861      	ldr	r1, [r4, #4]
 8004120:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004124:	2300      	movs	r3, #0
 8004126:	9303      	str	r3, [sp, #12]
 8004128:	ab0a      	add	r3, sp, #40	; 0x28
 800412a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800412e:	ab09      	add	r3, sp, #36	; 0x24
 8004130:	ec49 8b10 	vmov	d0, r8, r9
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	6022      	str	r2, [r4, #0]
 8004138:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800413c:	4628      	mov	r0, r5
 800413e:	f7ff fecd 	bl	8003edc <__cvt>
 8004142:	9b06      	ldr	r3, [sp, #24]
 8004144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004146:	2b47      	cmp	r3, #71	; 0x47
 8004148:	4680      	mov	r8, r0
 800414a:	d108      	bne.n	800415e <_printf_float+0x142>
 800414c:	1cc8      	adds	r0, r1, #3
 800414e:	db02      	blt.n	8004156 <_printf_float+0x13a>
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	4299      	cmp	r1, r3
 8004154:	dd41      	ble.n	80041da <_printf_float+0x1be>
 8004156:	f1ab 0b02 	sub.w	fp, fp, #2
 800415a:	fa5f fb8b 	uxtb.w	fp, fp
 800415e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004162:	d820      	bhi.n	80041a6 <_printf_float+0x18a>
 8004164:	3901      	subs	r1, #1
 8004166:	465a      	mov	r2, fp
 8004168:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800416c:	9109      	str	r1, [sp, #36]	; 0x24
 800416e:	f7ff ff17 	bl	8003fa0 <__exponent>
 8004172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004174:	1813      	adds	r3, r2, r0
 8004176:	2a01      	cmp	r2, #1
 8004178:	4681      	mov	r9, r0
 800417a:	6123      	str	r3, [r4, #16]
 800417c:	dc02      	bgt.n	8004184 <_printf_float+0x168>
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	07d2      	lsls	r2, r2, #31
 8004182:	d501      	bpl.n	8004188 <_printf_float+0x16c>
 8004184:	3301      	adds	r3, #1
 8004186:	6123      	str	r3, [r4, #16]
 8004188:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800418c:	2b00      	cmp	r3, #0
 800418e:	d09c      	beq.n	80040ca <_printf_float+0xae>
 8004190:	232d      	movs	r3, #45	; 0x2d
 8004192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004196:	e798      	b.n	80040ca <_printf_float+0xae>
 8004198:	9a06      	ldr	r2, [sp, #24]
 800419a:	2a47      	cmp	r2, #71	; 0x47
 800419c:	d1be      	bne.n	800411c <_printf_float+0x100>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1bc      	bne.n	800411c <_printf_float+0x100>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e7b9      	b.n	800411a <_printf_float+0xfe>
 80041a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80041aa:	d118      	bne.n	80041de <_printf_float+0x1c2>
 80041ac:	2900      	cmp	r1, #0
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	dd0b      	ble.n	80041ca <_printf_float+0x1ae>
 80041b2:	6121      	str	r1, [r4, #16]
 80041b4:	b913      	cbnz	r3, 80041bc <_printf_float+0x1a0>
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	07d0      	lsls	r0, r2, #31
 80041ba:	d502      	bpl.n	80041c2 <_printf_float+0x1a6>
 80041bc:	3301      	adds	r3, #1
 80041be:	440b      	add	r3, r1
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80041c4:	f04f 0900 	mov.w	r9, #0
 80041c8:	e7de      	b.n	8004188 <_printf_float+0x16c>
 80041ca:	b913      	cbnz	r3, 80041d2 <_printf_float+0x1b6>
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	07d2      	lsls	r2, r2, #31
 80041d0:	d501      	bpl.n	80041d6 <_printf_float+0x1ba>
 80041d2:	3302      	adds	r3, #2
 80041d4:	e7f4      	b.n	80041c0 <_printf_float+0x1a4>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e7f2      	b.n	80041c0 <_printf_float+0x1a4>
 80041da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80041de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041e0:	4299      	cmp	r1, r3
 80041e2:	db05      	blt.n	80041f0 <_printf_float+0x1d4>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	6121      	str	r1, [r4, #16]
 80041e8:	07d8      	lsls	r0, r3, #31
 80041ea:	d5ea      	bpl.n	80041c2 <_printf_float+0x1a6>
 80041ec:	1c4b      	adds	r3, r1, #1
 80041ee:	e7e7      	b.n	80041c0 <_printf_float+0x1a4>
 80041f0:	2900      	cmp	r1, #0
 80041f2:	bfd4      	ite	le
 80041f4:	f1c1 0202 	rsble	r2, r1, #2
 80041f8:	2201      	movgt	r2, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	e7e0      	b.n	80041c0 <_printf_float+0x1a4>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	055a      	lsls	r2, r3, #21
 8004202:	d407      	bmi.n	8004214 <_printf_float+0x1f8>
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	4642      	mov	r2, r8
 8004208:	4631      	mov	r1, r6
 800420a:	4628      	mov	r0, r5
 800420c:	47b8      	blx	r7
 800420e:	3001      	adds	r0, #1
 8004210:	d12c      	bne.n	800426c <_printf_float+0x250>
 8004212:	e764      	b.n	80040de <_printf_float+0xc2>
 8004214:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004218:	f240 80e0 	bls.w	80043dc <_printf_float+0x3c0>
 800421c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004220:	2200      	movs	r2, #0
 8004222:	2300      	movs	r3, #0
 8004224:	f7fc fc60 	bl	8000ae8 <__aeabi_dcmpeq>
 8004228:	2800      	cmp	r0, #0
 800422a:	d034      	beq.n	8004296 <_printf_float+0x27a>
 800422c:	4a37      	ldr	r2, [pc, #220]	; (800430c <_printf_float+0x2f0>)
 800422e:	2301      	movs	r3, #1
 8004230:	4631      	mov	r1, r6
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	f43f af51 	beq.w	80040de <_printf_float+0xc2>
 800423c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004240:	429a      	cmp	r2, r3
 8004242:	db02      	blt.n	800424a <_printf_float+0x22e>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	07d8      	lsls	r0, r3, #31
 8004248:	d510      	bpl.n	800426c <_printf_float+0x250>
 800424a:	ee18 3a10 	vmov	r3, s16
 800424e:	4652      	mov	r2, sl
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f43f af41 	beq.w	80040de <_printf_float+0xc2>
 800425c:	f04f 0800 	mov.w	r8, #0
 8004260:	f104 091a 	add.w	r9, r4, #26
 8004264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004266:	3b01      	subs	r3, #1
 8004268:	4543      	cmp	r3, r8
 800426a:	dc09      	bgt.n	8004280 <_printf_float+0x264>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	079b      	lsls	r3, r3, #30
 8004270:	f100 8105 	bmi.w	800447e <_printf_float+0x462>
 8004274:	68e0      	ldr	r0, [r4, #12]
 8004276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004278:	4298      	cmp	r0, r3
 800427a:	bfb8      	it	lt
 800427c:	4618      	movlt	r0, r3
 800427e:	e730      	b.n	80040e2 <_printf_float+0xc6>
 8004280:	2301      	movs	r3, #1
 8004282:	464a      	mov	r2, r9
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f af27 	beq.w	80040de <_printf_float+0xc2>
 8004290:	f108 0801 	add.w	r8, r8, #1
 8004294:	e7e6      	b.n	8004264 <_printf_float+0x248>
 8004296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	dc39      	bgt.n	8004310 <_printf_float+0x2f4>
 800429c:	4a1b      	ldr	r2, [pc, #108]	; (800430c <_printf_float+0x2f0>)
 800429e:	2301      	movs	r3, #1
 80042a0:	4631      	mov	r1, r6
 80042a2:	4628      	mov	r0, r5
 80042a4:	47b8      	blx	r7
 80042a6:	3001      	adds	r0, #1
 80042a8:	f43f af19 	beq.w	80040de <_printf_float+0xc2>
 80042ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d102      	bne.n	80042ba <_printf_float+0x29e>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	07d9      	lsls	r1, r3, #31
 80042b8:	d5d8      	bpl.n	800426c <_printf_float+0x250>
 80042ba:	ee18 3a10 	vmov	r3, s16
 80042be:	4652      	mov	r2, sl
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f af09 	beq.w	80040de <_printf_float+0xc2>
 80042cc:	f04f 0900 	mov.w	r9, #0
 80042d0:	f104 0a1a 	add.w	sl, r4, #26
 80042d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d6:	425b      	negs	r3, r3
 80042d8:	454b      	cmp	r3, r9
 80042da:	dc01      	bgt.n	80042e0 <_printf_float+0x2c4>
 80042dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042de:	e792      	b.n	8004206 <_printf_float+0x1ea>
 80042e0:	2301      	movs	r3, #1
 80042e2:	4652      	mov	r2, sl
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f aef7 	beq.w	80040de <_printf_float+0xc2>
 80042f0:	f109 0901 	add.w	r9, r9, #1
 80042f4:	e7ee      	b.n	80042d4 <_printf_float+0x2b8>
 80042f6:	bf00      	nop
 80042f8:	7fefffff 	.word	0x7fefffff
 80042fc:	08006ba0 	.word	0x08006ba0
 8004300:	08006ba4 	.word	0x08006ba4
 8004304:	08006bac 	.word	0x08006bac
 8004308:	08006ba8 	.word	0x08006ba8
 800430c:	08006bb0 	.word	0x08006bb0
 8004310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004312:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004314:	429a      	cmp	r2, r3
 8004316:	bfa8      	it	ge
 8004318:	461a      	movge	r2, r3
 800431a:	2a00      	cmp	r2, #0
 800431c:	4691      	mov	r9, r2
 800431e:	dc37      	bgt.n	8004390 <_printf_float+0x374>
 8004320:	f04f 0b00 	mov.w	fp, #0
 8004324:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004328:	f104 021a 	add.w	r2, r4, #26
 800432c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	eba3 0309 	sub.w	r3, r3, r9
 8004334:	455b      	cmp	r3, fp
 8004336:	dc33      	bgt.n	80043a0 <_printf_float+0x384>
 8004338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800433c:	429a      	cmp	r2, r3
 800433e:	db3b      	blt.n	80043b8 <_printf_float+0x39c>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	07da      	lsls	r2, r3, #31
 8004344:	d438      	bmi.n	80043b8 <_printf_float+0x39c>
 8004346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004348:	9a05      	ldr	r2, [sp, #20]
 800434a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800434c:	1a9a      	subs	r2, r3, r2
 800434e:	eba3 0901 	sub.w	r9, r3, r1
 8004352:	4591      	cmp	r9, r2
 8004354:	bfa8      	it	ge
 8004356:	4691      	movge	r9, r2
 8004358:	f1b9 0f00 	cmp.w	r9, #0
 800435c:	dc35      	bgt.n	80043ca <_printf_float+0x3ae>
 800435e:	f04f 0800 	mov.w	r8, #0
 8004362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004366:	f104 0a1a 	add.w	sl, r4, #26
 800436a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	eba3 0309 	sub.w	r3, r3, r9
 8004374:	4543      	cmp	r3, r8
 8004376:	f77f af79 	ble.w	800426c <_printf_float+0x250>
 800437a:	2301      	movs	r3, #1
 800437c:	4652      	mov	r2, sl
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	f43f aeaa 	beq.w	80040de <_printf_float+0xc2>
 800438a:	f108 0801 	add.w	r8, r8, #1
 800438e:	e7ec      	b.n	800436a <_printf_float+0x34e>
 8004390:	4613      	mov	r3, r2
 8004392:	4631      	mov	r1, r6
 8004394:	4642      	mov	r2, r8
 8004396:	4628      	mov	r0, r5
 8004398:	47b8      	blx	r7
 800439a:	3001      	adds	r0, #1
 800439c:	d1c0      	bne.n	8004320 <_printf_float+0x304>
 800439e:	e69e      	b.n	80040de <_printf_float+0xc2>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	9205      	str	r2, [sp, #20]
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f ae97 	beq.w	80040de <_printf_float+0xc2>
 80043b0:	9a05      	ldr	r2, [sp, #20]
 80043b2:	f10b 0b01 	add.w	fp, fp, #1
 80043b6:	e7b9      	b.n	800432c <_printf_float+0x310>
 80043b8:	ee18 3a10 	vmov	r3, s16
 80043bc:	4652      	mov	r2, sl
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	d1be      	bne.n	8004346 <_printf_float+0x32a>
 80043c8:	e689      	b.n	80040de <_printf_float+0xc2>
 80043ca:	9a05      	ldr	r2, [sp, #20]
 80043cc:	464b      	mov	r3, r9
 80043ce:	4442      	add	r2, r8
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	d1c1      	bne.n	800435e <_printf_float+0x342>
 80043da:	e680      	b.n	80040de <_printf_float+0xc2>
 80043dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043de:	2a01      	cmp	r2, #1
 80043e0:	dc01      	bgt.n	80043e6 <_printf_float+0x3ca>
 80043e2:	07db      	lsls	r3, r3, #31
 80043e4:	d538      	bpl.n	8004458 <_printf_float+0x43c>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4642      	mov	r2, r8
 80043ea:	4631      	mov	r1, r6
 80043ec:	4628      	mov	r0, r5
 80043ee:	47b8      	blx	r7
 80043f0:	3001      	adds	r0, #1
 80043f2:	f43f ae74 	beq.w	80040de <_printf_float+0xc2>
 80043f6:	ee18 3a10 	vmov	r3, s16
 80043fa:	4652      	mov	r2, sl
 80043fc:	4631      	mov	r1, r6
 80043fe:	4628      	mov	r0, r5
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	f43f ae6b 	beq.w	80040de <_printf_float+0xc2>
 8004408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800440c:	2200      	movs	r2, #0
 800440e:	2300      	movs	r3, #0
 8004410:	f7fc fb6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004414:	b9d8      	cbnz	r0, 800444e <_printf_float+0x432>
 8004416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004418:	f108 0201 	add.w	r2, r8, #1
 800441c:	3b01      	subs	r3, #1
 800441e:	4631      	mov	r1, r6
 8004420:	4628      	mov	r0, r5
 8004422:	47b8      	blx	r7
 8004424:	3001      	adds	r0, #1
 8004426:	d10e      	bne.n	8004446 <_printf_float+0x42a>
 8004428:	e659      	b.n	80040de <_printf_float+0xc2>
 800442a:	2301      	movs	r3, #1
 800442c:	4652      	mov	r2, sl
 800442e:	4631      	mov	r1, r6
 8004430:	4628      	mov	r0, r5
 8004432:	47b8      	blx	r7
 8004434:	3001      	adds	r0, #1
 8004436:	f43f ae52 	beq.w	80040de <_printf_float+0xc2>
 800443a:	f108 0801 	add.w	r8, r8, #1
 800443e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004440:	3b01      	subs	r3, #1
 8004442:	4543      	cmp	r3, r8
 8004444:	dcf1      	bgt.n	800442a <_printf_float+0x40e>
 8004446:	464b      	mov	r3, r9
 8004448:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800444c:	e6dc      	b.n	8004208 <_printf_float+0x1ec>
 800444e:	f04f 0800 	mov.w	r8, #0
 8004452:	f104 0a1a 	add.w	sl, r4, #26
 8004456:	e7f2      	b.n	800443e <_printf_float+0x422>
 8004458:	2301      	movs	r3, #1
 800445a:	4642      	mov	r2, r8
 800445c:	e7df      	b.n	800441e <_printf_float+0x402>
 800445e:	2301      	movs	r3, #1
 8004460:	464a      	mov	r2, r9
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	f43f ae38 	beq.w	80040de <_printf_float+0xc2>
 800446e:	f108 0801 	add.w	r8, r8, #1
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	4543      	cmp	r3, r8
 800447a:	dcf0      	bgt.n	800445e <_printf_float+0x442>
 800447c:	e6fa      	b.n	8004274 <_printf_float+0x258>
 800447e:	f04f 0800 	mov.w	r8, #0
 8004482:	f104 0919 	add.w	r9, r4, #25
 8004486:	e7f4      	b.n	8004472 <_printf_float+0x456>

08004488 <_printf_common>:
 8004488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	4616      	mov	r6, r2
 800448e:	4699      	mov	r9, r3
 8004490:	688a      	ldr	r2, [r1, #8]
 8004492:	690b      	ldr	r3, [r1, #16]
 8004494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004498:	4293      	cmp	r3, r2
 800449a:	bfb8      	it	lt
 800449c:	4613      	movlt	r3, r2
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044a4:	4607      	mov	r7, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	b10a      	cbz	r2, 80044ae <_printf_common+0x26>
 80044aa:	3301      	adds	r3, #1
 80044ac:	6033      	str	r3, [r6, #0]
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	0699      	lsls	r1, r3, #26
 80044b2:	bf42      	ittt	mi
 80044b4:	6833      	ldrmi	r3, [r6, #0]
 80044b6:	3302      	addmi	r3, #2
 80044b8:	6033      	strmi	r3, [r6, #0]
 80044ba:	6825      	ldr	r5, [r4, #0]
 80044bc:	f015 0506 	ands.w	r5, r5, #6
 80044c0:	d106      	bne.n	80044d0 <_printf_common+0x48>
 80044c2:	f104 0a19 	add.w	sl, r4, #25
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	6832      	ldr	r2, [r6, #0]
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dc26      	bgt.n	800451e <_printf_common+0x96>
 80044d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044d4:	1e13      	subs	r3, r2, #0
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	bf18      	it	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	0692      	lsls	r2, r2, #26
 80044de:	d42b      	bmi.n	8004538 <_printf_common+0xb0>
 80044e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044e4:	4649      	mov	r1, r9
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c0      	blx	r8
 80044ea:	3001      	adds	r0, #1
 80044ec:	d01e      	beq.n	800452c <_printf_common+0xa4>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	68e5      	ldr	r5, [r4, #12]
 80044f2:	6832      	ldr	r2, [r6, #0]
 80044f4:	f003 0306 	and.w	r3, r3, #6
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	bf08      	it	eq
 80044fc:	1aad      	subeq	r5, r5, r2
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	6922      	ldr	r2, [r4, #16]
 8004502:	bf0c      	ite	eq
 8004504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004508:	2500      	movne	r5, #0
 800450a:	4293      	cmp	r3, r2
 800450c:	bfc4      	itt	gt
 800450e:	1a9b      	subgt	r3, r3, r2
 8004510:	18ed      	addgt	r5, r5, r3
 8004512:	2600      	movs	r6, #0
 8004514:	341a      	adds	r4, #26
 8004516:	42b5      	cmp	r5, r6
 8004518:	d11a      	bne.n	8004550 <_printf_common+0xc8>
 800451a:	2000      	movs	r0, #0
 800451c:	e008      	b.n	8004530 <_printf_common+0xa8>
 800451e:	2301      	movs	r3, #1
 8004520:	4652      	mov	r2, sl
 8004522:	4649      	mov	r1, r9
 8004524:	4638      	mov	r0, r7
 8004526:	47c0      	blx	r8
 8004528:	3001      	adds	r0, #1
 800452a:	d103      	bne.n	8004534 <_printf_common+0xac>
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	3501      	adds	r5, #1
 8004536:	e7c6      	b.n	80044c6 <_printf_common+0x3e>
 8004538:	18e1      	adds	r1, r4, r3
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	2030      	movs	r0, #48	; 0x30
 800453e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004542:	4422      	add	r2, r4
 8004544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800454c:	3302      	adds	r3, #2
 800454e:	e7c7      	b.n	80044e0 <_printf_common+0x58>
 8004550:	2301      	movs	r3, #1
 8004552:	4622      	mov	r2, r4
 8004554:	4649      	mov	r1, r9
 8004556:	4638      	mov	r0, r7
 8004558:	47c0      	blx	r8
 800455a:	3001      	adds	r0, #1
 800455c:	d0e6      	beq.n	800452c <_printf_common+0xa4>
 800455e:	3601      	adds	r6, #1
 8004560:	e7d9      	b.n	8004516 <_printf_common+0x8e>
	...

08004564 <_printf_i>:
 8004564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	7e0f      	ldrb	r7, [r1, #24]
 800456a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800456c:	2f78      	cmp	r7, #120	; 0x78
 800456e:	4691      	mov	r9, r2
 8004570:	4680      	mov	r8, r0
 8004572:	460c      	mov	r4, r1
 8004574:	469a      	mov	sl, r3
 8004576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800457a:	d807      	bhi.n	800458c <_printf_i+0x28>
 800457c:	2f62      	cmp	r7, #98	; 0x62
 800457e:	d80a      	bhi.n	8004596 <_printf_i+0x32>
 8004580:	2f00      	cmp	r7, #0
 8004582:	f000 80d8 	beq.w	8004736 <_printf_i+0x1d2>
 8004586:	2f58      	cmp	r7, #88	; 0x58
 8004588:	f000 80a3 	beq.w	80046d2 <_printf_i+0x16e>
 800458c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004594:	e03a      	b.n	800460c <_printf_i+0xa8>
 8004596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800459a:	2b15      	cmp	r3, #21
 800459c:	d8f6      	bhi.n	800458c <_printf_i+0x28>
 800459e:	a101      	add	r1, pc, #4	; (adr r1, 80045a4 <_printf_i+0x40>)
 80045a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	08004611 	.word	0x08004611
 80045ac:	0800458d 	.word	0x0800458d
 80045b0:	0800458d 	.word	0x0800458d
 80045b4:	0800458d 	.word	0x0800458d
 80045b8:	0800458d 	.word	0x0800458d
 80045bc:	08004611 	.word	0x08004611
 80045c0:	0800458d 	.word	0x0800458d
 80045c4:	0800458d 	.word	0x0800458d
 80045c8:	0800458d 	.word	0x0800458d
 80045cc:	0800458d 	.word	0x0800458d
 80045d0:	0800471d 	.word	0x0800471d
 80045d4:	08004641 	.word	0x08004641
 80045d8:	080046ff 	.word	0x080046ff
 80045dc:	0800458d 	.word	0x0800458d
 80045e0:	0800458d 	.word	0x0800458d
 80045e4:	0800473f 	.word	0x0800473f
 80045e8:	0800458d 	.word	0x0800458d
 80045ec:	08004641 	.word	0x08004641
 80045f0:	0800458d 	.word	0x0800458d
 80045f4:	0800458d 	.word	0x0800458d
 80045f8:	08004707 	.word	0x08004707
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	602a      	str	r2, [r5, #0]
 8004604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800460c:	2301      	movs	r3, #1
 800460e:	e0a3      	b.n	8004758 <_printf_i+0x1f4>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	6829      	ldr	r1, [r5, #0]
 8004614:	0606      	lsls	r6, r0, #24
 8004616:	f101 0304 	add.w	r3, r1, #4
 800461a:	d50a      	bpl.n	8004632 <_printf_i+0xce>
 800461c:	680e      	ldr	r6, [r1, #0]
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	2e00      	cmp	r6, #0
 8004622:	da03      	bge.n	800462c <_printf_i+0xc8>
 8004624:	232d      	movs	r3, #45	; 0x2d
 8004626:	4276      	negs	r6, r6
 8004628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462c:	485e      	ldr	r0, [pc, #376]	; (80047a8 <_printf_i+0x244>)
 800462e:	230a      	movs	r3, #10
 8004630:	e019      	b.n	8004666 <_printf_i+0x102>
 8004632:	680e      	ldr	r6, [r1, #0]
 8004634:	602b      	str	r3, [r5, #0]
 8004636:	f010 0f40 	tst.w	r0, #64	; 0x40
 800463a:	bf18      	it	ne
 800463c:	b236      	sxthne	r6, r6
 800463e:	e7ef      	b.n	8004620 <_printf_i+0xbc>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	1d19      	adds	r1, r3, #4
 8004646:	6029      	str	r1, [r5, #0]
 8004648:	0601      	lsls	r1, r0, #24
 800464a:	d501      	bpl.n	8004650 <_printf_i+0xec>
 800464c:	681e      	ldr	r6, [r3, #0]
 800464e:	e002      	b.n	8004656 <_printf_i+0xf2>
 8004650:	0646      	lsls	r6, r0, #25
 8004652:	d5fb      	bpl.n	800464c <_printf_i+0xe8>
 8004654:	881e      	ldrh	r6, [r3, #0]
 8004656:	4854      	ldr	r0, [pc, #336]	; (80047a8 <_printf_i+0x244>)
 8004658:	2f6f      	cmp	r7, #111	; 0x6f
 800465a:	bf0c      	ite	eq
 800465c:	2308      	moveq	r3, #8
 800465e:	230a      	movne	r3, #10
 8004660:	2100      	movs	r1, #0
 8004662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004666:	6865      	ldr	r5, [r4, #4]
 8004668:	60a5      	str	r5, [r4, #8]
 800466a:	2d00      	cmp	r5, #0
 800466c:	bfa2      	ittt	ge
 800466e:	6821      	ldrge	r1, [r4, #0]
 8004670:	f021 0104 	bicge.w	r1, r1, #4
 8004674:	6021      	strge	r1, [r4, #0]
 8004676:	b90e      	cbnz	r6, 800467c <_printf_i+0x118>
 8004678:	2d00      	cmp	r5, #0
 800467a:	d04d      	beq.n	8004718 <_printf_i+0x1b4>
 800467c:	4615      	mov	r5, r2
 800467e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004682:	fb03 6711 	mls	r7, r3, r1, r6
 8004686:	5dc7      	ldrb	r7, [r0, r7]
 8004688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800468c:	4637      	mov	r7, r6
 800468e:	42bb      	cmp	r3, r7
 8004690:	460e      	mov	r6, r1
 8004692:	d9f4      	bls.n	800467e <_printf_i+0x11a>
 8004694:	2b08      	cmp	r3, #8
 8004696:	d10b      	bne.n	80046b0 <_printf_i+0x14c>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	07de      	lsls	r6, r3, #31
 800469c:	d508      	bpl.n	80046b0 <_printf_i+0x14c>
 800469e:	6923      	ldr	r3, [r4, #16]
 80046a0:	6861      	ldr	r1, [r4, #4]
 80046a2:	4299      	cmp	r1, r3
 80046a4:	bfde      	ittt	le
 80046a6:	2330      	movle	r3, #48	; 0x30
 80046a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046b0:	1b52      	subs	r2, r2, r5
 80046b2:	6122      	str	r2, [r4, #16]
 80046b4:	f8cd a000 	str.w	sl, [sp]
 80046b8:	464b      	mov	r3, r9
 80046ba:	aa03      	add	r2, sp, #12
 80046bc:	4621      	mov	r1, r4
 80046be:	4640      	mov	r0, r8
 80046c0:	f7ff fee2 	bl	8004488 <_printf_common>
 80046c4:	3001      	adds	r0, #1
 80046c6:	d14c      	bne.n	8004762 <_printf_i+0x1fe>
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	b004      	add	sp, #16
 80046ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d2:	4835      	ldr	r0, [pc, #212]	; (80047a8 <_printf_i+0x244>)
 80046d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046d8:	6829      	ldr	r1, [r5, #0]
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80046e0:	6029      	str	r1, [r5, #0]
 80046e2:	061d      	lsls	r5, r3, #24
 80046e4:	d514      	bpl.n	8004710 <_printf_i+0x1ac>
 80046e6:	07df      	lsls	r7, r3, #31
 80046e8:	bf44      	itt	mi
 80046ea:	f043 0320 	orrmi.w	r3, r3, #32
 80046ee:	6023      	strmi	r3, [r4, #0]
 80046f0:	b91e      	cbnz	r6, 80046fa <_printf_i+0x196>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	f023 0320 	bic.w	r3, r3, #32
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	2310      	movs	r3, #16
 80046fc:	e7b0      	b.n	8004660 <_printf_i+0xfc>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	f043 0320 	orr.w	r3, r3, #32
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	2378      	movs	r3, #120	; 0x78
 8004708:	4828      	ldr	r0, [pc, #160]	; (80047ac <_printf_i+0x248>)
 800470a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800470e:	e7e3      	b.n	80046d8 <_printf_i+0x174>
 8004710:	0659      	lsls	r1, r3, #25
 8004712:	bf48      	it	mi
 8004714:	b2b6      	uxthmi	r6, r6
 8004716:	e7e6      	b.n	80046e6 <_printf_i+0x182>
 8004718:	4615      	mov	r5, r2
 800471a:	e7bb      	b.n	8004694 <_printf_i+0x130>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	6826      	ldr	r6, [r4, #0]
 8004720:	6961      	ldr	r1, [r4, #20]
 8004722:	1d18      	adds	r0, r3, #4
 8004724:	6028      	str	r0, [r5, #0]
 8004726:	0635      	lsls	r5, r6, #24
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	d501      	bpl.n	8004730 <_printf_i+0x1cc>
 800472c:	6019      	str	r1, [r3, #0]
 800472e:	e002      	b.n	8004736 <_printf_i+0x1d2>
 8004730:	0670      	lsls	r0, r6, #25
 8004732:	d5fb      	bpl.n	800472c <_printf_i+0x1c8>
 8004734:	8019      	strh	r1, [r3, #0]
 8004736:	2300      	movs	r3, #0
 8004738:	6123      	str	r3, [r4, #16]
 800473a:	4615      	mov	r5, r2
 800473c:	e7ba      	b.n	80046b4 <_printf_i+0x150>
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	1d1a      	adds	r2, r3, #4
 8004742:	602a      	str	r2, [r5, #0]
 8004744:	681d      	ldr	r5, [r3, #0]
 8004746:	6862      	ldr	r2, [r4, #4]
 8004748:	2100      	movs	r1, #0
 800474a:	4628      	mov	r0, r5
 800474c:	f7fb fd58 	bl	8000200 <memchr>
 8004750:	b108      	cbz	r0, 8004756 <_printf_i+0x1f2>
 8004752:	1b40      	subs	r0, r0, r5
 8004754:	6060      	str	r0, [r4, #4]
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	2300      	movs	r3, #0
 800475c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004760:	e7a8      	b.n	80046b4 <_printf_i+0x150>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	462a      	mov	r2, r5
 8004766:	4649      	mov	r1, r9
 8004768:	4640      	mov	r0, r8
 800476a:	47d0      	blx	sl
 800476c:	3001      	adds	r0, #1
 800476e:	d0ab      	beq.n	80046c8 <_printf_i+0x164>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	079b      	lsls	r3, r3, #30
 8004774:	d413      	bmi.n	800479e <_printf_i+0x23a>
 8004776:	68e0      	ldr	r0, [r4, #12]
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	4298      	cmp	r0, r3
 800477c:	bfb8      	it	lt
 800477e:	4618      	movlt	r0, r3
 8004780:	e7a4      	b.n	80046cc <_printf_i+0x168>
 8004782:	2301      	movs	r3, #1
 8004784:	4632      	mov	r2, r6
 8004786:	4649      	mov	r1, r9
 8004788:	4640      	mov	r0, r8
 800478a:	47d0      	blx	sl
 800478c:	3001      	adds	r0, #1
 800478e:	d09b      	beq.n	80046c8 <_printf_i+0x164>
 8004790:	3501      	adds	r5, #1
 8004792:	68e3      	ldr	r3, [r4, #12]
 8004794:	9903      	ldr	r1, [sp, #12]
 8004796:	1a5b      	subs	r3, r3, r1
 8004798:	42ab      	cmp	r3, r5
 800479a:	dcf2      	bgt.n	8004782 <_printf_i+0x21e>
 800479c:	e7eb      	b.n	8004776 <_printf_i+0x212>
 800479e:	2500      	movs	r5, #0
 80047a0:	f104 0619 	add.w	r6, r4, #25
 80047a4:	e7f5      	b.n	8004792 <_printf_i+0x22e>
 80047a6:	bf00      	nop
 80047a8:	08006bb2 	.word	0x08006bb2
 80047ac:	08006bc3 	.word	0x08006bc3

080047b0 <strncpy>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	3901      	subs	r1, #1
 80047b4:	4603      	mov	r3, r0
 80047b6:	b132      	cbz	r2, 80047c6 <strncpy+0x16>
 80047b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80047bc:	f803 4b01 	strb.w	r4, [r3], #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	2c00      	cmp	r4, #0
 80047c4:	d1f7      	bne.n	80047b6 <strncpy+0x6>
 80047c6:	441a      	add	r2, r3
 80047c8:	2100      	movs	r1, #0
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d100      	bne.n	80047d0 <strncpy+0x20>
 80047ce:	bd10      	pop	{r4, pc}
 80047d0:	f803 1b01 	strb.w	r1, [r3], #1
 80047d4:	e7f9      	b.n	80047ca <strncpy+0x1a>
	...

080047d8 <strtok>:
 80047d8:	4b16      	ldr	r3, [pc, #88]	; (8004834 <strtok+0x5c>)
 80047da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047dc:	681e      	ldr	r6, [r3, #0]
 80047de:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80047e0:	4605      	mov	r5, r0
 80047e2:	b9fc      	cbnz	r4, 8004824 <strtok+0x4c>
 80047e4:	2050      	movs	r0, #80	; 0x50
 80047e6:	9101      	str	r1, [sp, #4]
 80047e8:	f000 ff8e 	bl	8005708 <malloc>
 80047ec:	9901      	ldr	r1, [sp, #4]
 80047ee:	65b0      	str	r0, [r6, #88]	; 0x58
 80047f0:	4602      	mov	r2, r0
 80047f2:	b920      	cbnz	r0, 80047fe <strtok+0x26>
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <strtok+0x60>)
 80047f6:	4811      	ldr	r0, [pc, #68]	; (800483c <strtok+0x64>)
 80047f8:	2157      	movs	r1, #87	; 0x57
 80047fa:	f000 f8d5 	bl	80049a8 <__assert_func>
 80047fe:	e9c0 4400 	strd	r4, r4, [r0]
 8004802:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004806:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800480a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800480e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004812:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004816:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800481a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800481e:	6184      	str	r4, [r0, #24]
 8004820:	7704      	strb	r4, [r0, #28]
 8004822:	6244      	str	r4, [r0, #36]	; 0x24
 8004824:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004826:	2301      	movs	r3, #1
 8004828:	4628      	mov	r0, r5
 800482a:	b002      	add	sp, #8
 800482c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004830:	f000 b806 	b.w	8004840 <__strtok_r>
 8004834:	2000000c 	.word	0x2000000c
 8004838:	08006bd4 	.word	0x08006bd4
 800483c:	08006beb 	.word	0x08006beb

08004840 <__strtok_r>:
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	b908      	cbnz	r0, 8004848 <__strtok_r+0x8>
 8004844:	6810      	ldr	r0, [r2, #0]
 8004846:	b188      	cbz	r0, 800486c <__strtok_r+0x2c>
 8004848:	4604      	mov	r4, r0
 800484a:	4620      	mov	r0, r4
 800484c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004850:	460f      	mov	r7, r1
 8004852:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004856:	b91e      	cbnz	r6, 8004860 <__strtok_r+0x20>
 8004858:	b965      	cbnz	r5, 8004874 <__strtok_r+0x34>
 800485a:	6015      	str	r5, [r2, #0]
 800485c:	4628      	mov	r0, r5
 800485e:	e005      	b.n	800486c <__strtok_r+0x2c>
 8004860:	42b5      	cmp	r5, r6
 8004862:	d1f6      	bne.n	8004852 <__strtok_r+0x12>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f0      	bne.n	800484a <__strtok_r+0xa>
 8004868:	6014      	str	r4, [r2, #0]
 800486a:	7003      	strb	r3, [r0, #0]
 800486c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800486e:	461c      	mov	r4, r3
 8004870:	e00c      	b.n	800488c <__strtok_r+0x4c>
 8004872:	b915      	cbnz	r5, 800487a <__strtok_r+0x3a>
 8004874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004878:	460e      	mov	r6, r1
 800487a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800487e:	42ab      	cmp	r3, r5
 8004880:	d1f7      	bne.n	8004872 <__strtok_r+0x32>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f3      	beq.n	800486e <__strtok_r+0x2e>
 8004886:	2300      	movs	r3, #0
 8004888:	f804 3c01 	strb.w	r3, [r4, #-1]
 800488c:	6014      	str	r4, [r2, #0]
 800488e:	e7ed      	b.n	800486c <__strtok_r+0x2c>

08004890 <_strtol_l.constprop.0>:
 8004890:	2b01      	cmp	r3, #1
 8004892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004896:	d001      	beq.n	800489c <_strtol_l.constprop.0+0xc>
 8004898:	2b24      	cmp	r3, #36	; 0x24
 800489a:	d906      	bls.n	80048aa <_strtol_l.constprop.0+0x1a>
 800489c:	f7ff faec 	bl	8003e78 <__errno>
 80048a0:	2316      	movs	r3, #22
 80048a2:	6003      	str	r3, [r0, #0]
 80048a4:	2000      	movs	r0, #0
 80048a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004990 <_strtol_l.constprop.0+0x100>
 80048ae:	460d      	mov	r5, r1
 80048b0:	462e      	mov	r6, r5
 80048b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80048ba:	f017 0708 	ands.w	r7, r7, #8
 80048be:	d1f7      	bne.n	80048b0 <_strtol_l.constprop.0+0x20>
 80048c0:	2c2d      	cmp	r4, #45	; 0x2d
 80048c2:	d132      	bne.n	800492a <_strtol_l.constprop.0+0x9a>
 80048c4:	782c      	ldrb	r4, [r5, #0]
 80048c6:	2701      	movs	r7, #1
 80048c8:	1cb5      	adds	r5, r6, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d05b      	beq.n	8004986 <_strtol_l.constprop.0+0xf6>
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d109      	bne.n	80048e6 <_strtol_l.constprop.0+0x56>
 80048d2:	2c30      	cmp	r4, #48	; 0x30
 80048d4:	d107      	bne.n	80048e6 <_strtol_l.constprop.0+0x56>
 80048d6:	782c      	ldrb	r4, [r5, #0]
 80048d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80048dc:	2c58      	cmp	r4, #88	; 0x58
 80048de:	d14d      	bne.n	800497c <_strtol_l.constprop.0+0xec>
 80048e0:	786c      	ldrb	r4, [r5, #1]
 80048e2:	2310      	movs	r3, #16
 80048e4:	3502      	adds	r5, #2
 80048e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80048ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80048ee:	f04f 0c00 	mov.w	ip, #0
 80048f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80048f6:	4666      	mov	r6, ip
 80048f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80048fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004900:	f1be 0f09 	cmp.w	lr, #9
 8004904:	d816      	bhi.n	8004934 <_strtol_l.constprop.0+0xa4>
 8004906:	4674      	mov	r4, lr
 8004908:	42a3      	cmp	r3, r4
 800490a:	dd24      	ble.n	8004956 <_strtol_l.constprop.0+0xc6>
 800490c:	f1bc 0f00 	cmp.w	ip, #0
 8004910:	db1e      	blt.n	8004950 <_strtol_l.constprop.0+0xc0>
 8004912:	45b1      	cmp	r9, r6
 8004914:	d31c      	bcc.n	8004950 <_strtol_l.constprop.0+0xc0>
 8004916:	d101      	bne.n	800491c <_strtol_l.constprop.0+0x8c>
 8004918:	45a2      	cmp	sl, r4
 800491a:	db19      	blt.n	8004950 <_strtol_l.constprop.0+0xc0>
 800491c:	fb06 4603 	mla	r6, r6, r3, r4
 8004920:	f04f 0c01 	mov.w	ip, #1
 8004924:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004928:	e7e8      	b.n	80048fc <_strtol_l.constprop.0+0x6c>
 800492a:	2c2b      	cmp	r4, #43	; 0x2b
 800492c:	bf04      	itt	eq
 800492e:	782c      	ldrbeq	r4, [r5, #0]
 8004930:	1cb5      	addeq	r5, r6, #2
 8004932:	e7ca      	b.n	80048ca <_strtol_l.constprop.0+0x3a>
 8004934:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004938:	f1be 0f19 	cmp.w	lr, #25
 800493c:	d801      	bhi.n	8004942 <_strtol_l.constprop.0+0xb2>
 800493e:	3c37      	subs	r4, #55	; 0x37
 8004940:	e7e2      	b.n	8004908 <_strtol_l.constprop.0+0x78>
 8004942:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004946:	f1be 0f19 	cmp.w	lr, #25
 800494a:	d804      	bhi.n	8004956 <_strtol_l.constprop.0+0xc6>
 800494c:	3c57      	subs	r4, #87	; 0x57
 800494e:	e7db      	b.n	8004908 <_strtol_l.constprop.0+0x78>
 8004950:	f04f 3cff 	mov.w	ip, #4294967295
 8004954:	e7e6      	b.n	8004924 <_strtol_l.constprop.0+0x94>
 8004956:	f1bc 0f00 	cmp.w	ip, #0
 800495a:	da05      	bge.n	8004968 <_strtol_l.constprop.0+0xd8>
 800495c:	2322      	movs	r3, #34	; 0x22
 800495e:	6003      	str	r3, [r0, #0]
 8004960:	4646      	mov	r6, r8
 8004962:	b942      	cbnz	r2, 8004976 <_strtol_l.constprop.0+0xe6>
 8004964:	4630      	mov	r0, r6
 8004966:	e79e      	b.n	80048a6 <_strtol_l.constprop.0+0x16>
 8004968:	b107      	cbz	r7, 800496c <_strtol_l.constprop.0+0xdc>
 800496a:	4276      	negs	r6, r6
 800496c:	2a00      	cmp	r2, #0
 800496e:	d0f9      	beq.n	8004964 <_strtol_l.constprop.0+0xd4>
 8004970:	f1bc 0f00 	cmp.w	ip, #0
 8004974:	d000      	beq.n	8004978 <_strtol_l.constprop.0+0xe8>
 8004976:	1e69      	subs	r1, r5, #1
 8004978:	6011      	str	r1, [r2, #0]
 800497a:	e7f3      	b.n	8004964 <_strtol_l.constprop.0+0xd4>
 800497c:	2430      	movs	r4, #48	; 0x30
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1b1      	bne.n	80048e6 <_strtol_l.constprop.0+0x56>
 8004982:	2308      	movs	r3, #8
 8004984:	e7af      	b.n	80048e6 <_strtol_l.constprop.0+0x56>
 8004986:	2c30      	cmp	r4, #48	; 0x30
 8004988:	d0a5      	beq.n	80048d6 <_strtol_l.constprop.0+0x46>
 800498a:	230a      	movs	r3, #10
 800498c:	e7ab      	b.n	80048e6 <_strtol_l.constprop.0+0x56>
 800498e:	bf00      	nop
 8004990:	08006c85 	.word	0x08006c85

08004994 <strtol>:
 8004994:	4613      	mov	r3, r2
 8004996:	460a      	mov	r2, r1
 8004998:	4601      	mov	r1, r0
 800499a:	4802      	ldr	r0, [pc, #8]	; (80049a4 <strtol+0x10>)
 800499c:	6800      	ldr	r0, [r0, #0]
 800499e:	f7ff bf77 	b.w	8004890 <_strtol_l.constprop.0>
 80049a2:	bf00      	nop
 80049a4:	2000000c 	.word	0x2000000c

080049a8 <__assert_func>:
 80049a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049aa:	4614      	mov	r4, r2
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <__assert_func+0x2c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4605      	mov	r5, r0
 80049b4:	68d8      	ldr	r0, [r3, #12]
 80049b6:	b14c      	cbz	r4, 80049cc <__assert_func+0x24>
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <__assert_func+0x30>)
 80049ba:	9100      	str	r1, [sp, #0]
 80049bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049c0:	4906      	ldr	r1, [pc, #24]	; (80049dc <__assert_func+0x34>)
 80049c2:	462b      	mov	r3, r5
 80049c4:	f000 fe8a 	bl	80056dc <fiprintf>
 80049c8:	f001 fd58 	bl	800647c <abort>
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__assert_func+0x38>)
 80049ce:	461c      	mov	r4, r3
 80049d0:	e7f3      	b.n	80049ba <__assert_func+0x12>
 80049d2:	bf00      	nop
 80049d4:	2000000c 	.word	0x2000000c
 80049d8:	08006c48 	.word	0x08006c48
 80049dc:	08006c55 	.word	0x08006c55
 80049e0:	08006c83 	.word	0x08006c83

080049e4 <quorem>:
 80049e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	6903      	ldr	r3, [r0, #16]
 80049ea:	690c      	ldr	r4, [r1, #16]
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	4607      	mov	r7, r0
 80049f0:	f2c0 8081 	blt.w	8004af6 <quorem+0x112>
 80049f4:	3c01      	subs	r4, #1
 80049f6:	f101 0814 	add.w	r8, r1, #20
 80049fa:	f100 0514 	add.w	r5, r0, #20
 80049fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a18:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a1c:	d331      	bcc.n	8004a82 <quorem+0x9e>
 8004a1e:	f04f 0e00 	mov.w	lr, #0
 8004a22:	4640      	mov	r0, r8
 8004a24:	46ac      	mov	ip, r5
 8004a26:	46f2      	mov	sl, lr
 8004a28:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a2c:	b293      	uxth	r3, r2
 8004a2e:	fb06 e303 	mla	r3, r6, r3, lr
 8004a32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	ebaa 0303 	sub.w	r3, sl, r3
 8004a3c:	f8dc a000 	ldr.w	sl, [ip]
 8004a40:	0c12      	lsrs	r2, r2, #16
 8004a42:	fa13 f38a 	uxtah	r3, r3, sl
 8004a46:	fb06 e202 	mla	r2, r6, r2, lr
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	9b00      	ldr	r3, [sp, #0]
 8004a4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a52:	b292      	uxth	r2, r2
 8004a54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004a60:	4581      	cmp	r9, r0
 8004a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a66:	f84c 3b04 	str.w	r3, [ip], #4
 8004a6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a6e:	d2db      	bcs.n	8004a28 <quorem+0x44>
 8004a70:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a74:	b92b      	cbnz	r3, 8004a82 <quorem+0x9e>
 8004a76:	9b01      	ldr	r3, [sp, #4]
 8004a78:	3b04      	subs	r3, #4
 8004a7a:	429d      	cmp	r5, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	d32e      	bcc.n	8004ade <quorem+0xfa>
 8004a80:	613c      	str	r4, [r7, #16]
 8004a82:	4638      	mov	r0, r7
 8004a84:	f001 f8d8 	bl	8005c38 <__mcmp>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	db24      	blt.n	8004ad6 <quorem+0xf2>
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f04f 0c00 	mov.w	ip, #0
 8004a94:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a98:	f8d0 e000 	ldr.w	lr, [r0]
 8004a9c:	b293      	uxth	r3, r2
 8004a9e:	ebac 0303 	sub.w	r3, ip, r3
 8004aa2:	0c12      	lsrs	r2, r2, #16
 8004aa4:	fa13 f38e 	uxtah	r3, r3, lr
 8004aa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ab6:	45c1      	cmp	r9, r8
 8004ab8:	f840 3b04 	str.w	r3, [r0], #4
 8004abc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ac0:	d2e8      	bcs.n	8004a94 <quorem+0xb0>
 8004ac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004aca:	b922      	cbnz	r2, 8004ad6 <quorem+0xf2>
 8004acc:	3b04      	subs	r3, #4
 8004ace:	429d      	cmp	r5, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	d30a      	bcc.n	8004aea <quorem+0x106>
 8004ad4:	613c      	str	r4, [r7, #16]
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	b003      	add	sp, #12
 8004ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	d1cc      	bne.n	8004a80 <quorem+0x9c>
 8004ae6:	3c01      	subs	r4, #1
 8004ae8:	e7c7      	b.n	8004a7a <quorem+0x96>
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	3b04      	subs	r3, #4
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	d1f0      	bne.n	8004ad4 <quorem+0xf0>
 8004af2:	3c01      	subs	r4, #1
 8004af4:	e7eb      	b.n	8004ace <quorem+0xea>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e7ee      	b.n	8004ad8 <quorem+0xf4>
 8004afa:	0000      	movs	r0, r0
 8004afc:	0000      	movs	r0, r0
	...

08004b00 <_dtoa_r>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	ed2d 8b04 	vpush	{d8-d9}
 8004b08:	ec57 6b10 	vmov	r6, r7, d0
 8004b0c:	b093      	sub	sp, #76	; 0x4c
 8004b0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b14:	9106      	str	r1, [sp, #24]
 8004b16:	ee10 aa10 	vmov	sl, s0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8004b20:	46bb      	mov	fp, r7
 8004b22:	b975      	cbnz	r5, 8004b42 <_dtoa_r+0x42>
 8004b24:	2010      	movs	r0, #16
 8004b26:	f000 fdef 	bl	8005708 <malloc>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6260      	str	r0, [r4, #36]	; 0x24
 8004b2e:	b920      	cbnz	r0, 8004b3a <_dtoa_r+0x3a>
 8004b30:	4ba7      	ldr	r3, [pc, #668]	; (8004dd0 <_dtoa_r+0x2d0>)
 8004b32:	21ea      	movs	r1, #234	; 0xea
 8004b34:	48a7      	ldr	r0, [pc, #668]	; (8004dd4 <_dtoa_r+0x2d4>)
 8004b36:	f7ff ff37 	bl	80049a8 <__assert_func>
 8004b3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b3e:	6005      	str	r5, [r0, #0]
 8004b40:	60c5      	str	r5, [r0, #12]
 8004b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b44:	6819      	ldr	r1, [r3, #0]
 8004b46:	b151      	cbz	r1, 8004b5e <_dtoa_r+0x5e>
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	604a      	str	r2, [r1, #4]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4093      	lsls	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 fe2e 	bl	80057b4 <_Bfree>
 8004b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	1e3b      	subs	r3, r7, #0
 8004b60:	bfaa      	itet	ge
 8004b62:	2300      	movge	r3, #0
 8004b64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004b68:	f8c8 3000 	strge.w	r3, [r8]
 8004b6c:	4b9a      	ldr	r3, [pc, #616]	; (8004dd8 <_dtoa_r+0x2d8>)
 8004b6e:	bfbc      	itt	lt
 8004b70:	2201      	movlt	r2, #1
 8004b72:	f8c8 2000 	strlt.w	r2, [r8]
 8004b76:	ea33 030b 	bics.w	r3, r3, fp
 8004b7a:	d11b      	bne.n	8004bb4 <_dtoa_r+0xb4>
 8004b7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b88:	4333      	orrs	r3, r6
 8004b8a:	f000 8592 	beq.w	80056b2 <_dtoa_r+0xbb2>
 8004b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b90:	b963      	cbnz	r3, 8004bac <_dtoa_r+0xac>
 8004b92:	4b92      	ldr	r3, [pc, #584]	; (8004ddc <_dtoa_r+0x2dc>)
 8004b94:	e022      	b.n	8004bdc <_dtoa_r+0xdc>
 8004b96:	4b92      	ldr	r3, [pc, #584]	; (8004de0 <_dtoa_r+0x2e0>)
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	9801      	ldr	r0, [sp, #4]
 8004ba2:	b013      	add	sp, #76	; 0x4c
 8004ba4:	ecbd 8b04 	vpop	{d8-d9}
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	4b8b      	ldr	r3, [pc, #556]	; (8004ddc <_dtoa_r+0x2dc>)
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	3303      	adds	r3, #3
 8004bb2:	e7f3      	b.n	8004b9c <_dtoa_r+0x9c>
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4650      	mov	r0, sl
 8004bba:	4659      	mov	r1, fp
 8004bbc:	f7fb ff94 	bl	8000ae8 <__aeabi_dcmpeq>
 8004bc0:	ec4b ab19 	vmov	d9, sl, fp
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	b158      	cbz	r0, 8004be0 <_dtoa_r+0xe0>
 8004bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bca:	2301      	movs	r3, #1
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 856b 	beq.w	80056ac <_dtoa_r+0xbac>
 8004bd6:	4883      	ldr	r0, [pc, #524]	; (8004de4 <_dtoa_r+0x2e4>)
 8004bd8:	6018      	str	r0, [r3, #0]
 8004bda:	1e43      	subs	r3, r0, #1
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	e7df      	b.n	8004ba0 <_dtoa_r+0xa0>
 8004be0:	ec4b ab10 	vmov	d0, sl, fp
 8004be4:	aa10      	add	r2, sp, #64	; 0x40
 8004be6:	a911      	add	r1, sp, #68	; 0x44
 8004be8:	4620      	mov	r0, r4
 8004bea:	f001 f8cb 	bl	8005d84 <__d2b>
 8004bee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004bf2:	ee08 0a10 	vmov	s16, r0
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	f000 8084 	beq.w	8004d04 <_dtoa_r+0x204>
 8004bfc:	ee19 3a90 	vmov	r3, s19
 8004c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004c08:	4656      	mov	r6, sl
 8004c0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004c16:	4b74      	ldr	r3, [pc, #464]	; (8004de8 <_dtoa_r+0x2e8>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	4639      	mov	r1, r7
 8004c1e:	f7fb fb43 	bl	80002a8 <__aeabi_dsub>
 8004c22:	a365      	add	r3, pc, #404	; (adr r3, 8004db8 <_dtoa_r+0x2b8>)
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f7fb fcf6 	bl	8000618 <__aeabi_dmul>
 8004c2c:	a364      	add	r3, pc, #400	; (adr r3, 8004dc0 <_dtoa_r+0x2c0>)
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fb3b 	bl	80002ac <__adddf3>
 8004c36:	4606      	mov	r6, r0
 8004c38:	4628      	mov	r0, r5
 8004c3a:	460f      	mov	r7, r1
 8004c3c:	f7fb fc82 	bl	8000544 <__aeabi_i2d>
 8004c40:	a361      	add	r3, pc, #388	; (adr r3, 8004dc8 <_dtoa_r+0x2c8>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f7fb fce7 	bl	8000618 <__aeabi_dmul>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4630      	mov	r0, r6
 8004c50:	4639      	mov	r1, r7
 8004c52:	f7fb fb2b 	bl	80002ac <__adddf3>
 8004c56:	4606      	mov	r6, r0
 8004c58:	460f      	mov	r7, r1
 8004c5a:	f7fb ff8d 	bl	8000b78 <__aeabi_d2iz>
 8004c5e:	2200      	movs	r2, #0
 8004c60:	9000      	str	r0, [sp, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	4630      	mov	r0, r6
 8004c66:	4639      	mov	r1, r7
 8004c68:	f7fb ff48 	bl	8000afc <__aeabi_dcmplt>
 8004c6c:	b150      	cbz	r0, 8004c84 <_dtoa_r+0x184>
 8004c6e:	9800      	ldr	r0, [sp, #0]
 8004c70:	f7fb fc68 	bl	8000544 <__aeabi_i2d>
 8004c74:	4632      	mov	r2, r6
 8004c76:	463b      	mov	r3, r7
 8004c78:	f7fb ff36 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c7c:	b910      	cbnz	r0, 8004c84 <_dtoa_r+0x184>
 8004c7e:	9b00      	ldr	r3, [sp, #0]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	9b00      	ldr	r3, [sp, #0]
 8004c86:	2b16      	cmp	r3, #22
 8004c88:	d85a      	bhi.n	8004d40 <_dtoa_r+0x240>
 8004c8a:	9a00      	ldr	r2, [sp, #0]
 8004c8c:	4b57      	ldr	r3, [pc, #348]	; (8004dec <_dtoa_r+0x2ec>)
 8004c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	ec51 0b19 	vmov	r0, r1, d9
 8004c9a:	f7fb ff2f 	bl	8000afc <__aeabi_dcmplt>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d050      	beq.n	8004d44 <_dtoa_r+0x244>
 8004ca2:	9b00      	ldr	r3, [sp, #0]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cae:	1b5d      	subs	r5, r3, r5
 8004cb0:	1e6b      	subs	r3, r5, #1
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	bf45      	ittet	mi
 8004cb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8004cba:	9304      	strmi	r3, [sp, #16]
 8004cbc:	2300      	movpl	r3, #0
 8004cbe:	2300      	movmi	r3, #0
 8004cc0:	bf4c      	ite	mi
 8004cc2:	9305      	strmi	r3, [sp, #20]
 8004cc4:	9304      	strpl	r3, [sp, #16]
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db3d      	blt.n	8004d48 <_dtoa_r+0x248>
 8004ccc:	9b05      	ldr	r3, [sp, #20]
 8004cce:	9a00      	ldr	r2, [sp, #0]
 8004cd0:	920a      	str	r2, [sp, #40]	; 0x28
 8004cd2:	4413      	add	r3, r2
 8004cd4:	9305      	str	r3, [sp, #20]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9307      	str	r3, [sp, #28]
 8004cda:	9b06      	ldr	r3, [sp, #24]
 8004cdc:	2b09      	cmp	r3, #9
 8004cde:	f200 8089 	bhi.w	8004df4 <_dtoa_r+0x2f4>
 8004ce2:	2b05      	cmp	r3, #5
 8004ce4:	bfc4      	itt	gt
 8004ce6:	3b04      	subgt	r3, #4
 8004ce8:	9306      	strgt	r3, [sp, #24]
 8004cea:	9b06      	ldr	r3, [sp, #24]
 8004cec:	f1a3 0302 	sub.w	r3, r3, #2
 8004cf0:	bfcc      	ite	gt
 8004cf2:	2500      	movgt	r5, #0
 8004cf4:	2501      	movle	r5, #1
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	f200 8087 	bhi.w	8004e0a <_dtoa_r+0x30a>
 8004cfc:	e8df f003 	tbb	[pc, r3]
 8004d00:	59383a2d 	.word	0x59383a2d
 8004d04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d08:	441d      	add	r5, r3
 8004d0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	bfc1      	itttt	gt
 8004d12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004d1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004d1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d22:	bfda      	itte	le
 8004d24:	f1c3 0320 	rsble	r3, r3, #32
 8004d28:	fa06 f003 	lslle.w	r0, r6, r3
 8004d2c:	4318      	orrgt	r0, r3
 8004d2e:	f7fb fbf9 	bl	8000524 <__aeabi_ui2d>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4606      	mov	r6, r0
 8004d36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004d3a:	3d01      	subs	r5, #1
 8004d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8004d3e:	e76a      	b.n	8004c16 <_dtoa_r+0x116>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7b2      	b.n	8004caa <_dtoa_r+0x1aa>
 8004d44:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d46:	e7b1      	b.n	8004cac <_dtoa_r+0x1ac>
 8004d48:	9b04      	ldr	r3, [sp, #16]
 8004d4a:	9a00      	ldr	r2, [sp, #0]
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	9304      	str	r3, [sp, #16]
 8004d50:	4253      	negs	r3, r2
 8004d52:	9307      	str	r3, [sp, #28]
 8004d54:	2300      	movs	r3, #0
 8004d56:	930a      	str	r3, [sp, #40]	; 0x28
 8004d58:	e7bf      	b.n	8004cda <_dtoa_r+0x1da>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9308      	str	r3, [sp, #32]
 8004d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dc55      	bgt.n	8004e10 <_dtoa_r+0x310>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d6e:	e00c      	b.n	8004d8a <_dtoa_r+0x28a>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e7f3      	b.n	8004d5c <_dtoa_r+0x25c>
 8004d74:	2300      	movs	r3, #0
 8004d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d78:	9308      	str	r3, [sp, #32]
 8004d7a:	9b00      	ldr	r3, [sp, #0]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	9302      	str	r3, [sp, #8]
 8004d80:	3301      	adds	r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	9303      	str	r3, [sp, #12]
 8004d86:	bfb8      	it	lt
 8004d88:	2301      	movlt	r3, #1
 8004d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	6042      	str	r2, [r0, #4]
 8004d90:	2204      	movs	r2, #4
 8004d92:	f102 0614 	add.w	r6, r2, #20
 8004d96:	429e      	cmp	r6, r3
 8004d98:	6841      	ldr	r1, [r0, #4]
 8004d9a:	d93d      	bls.n	8004e18 <_dtoa_r+0x318>
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f000 fcc9 	bl	8005734 <_Balloc>
 8004da2:	9001      	str	r0, [sp, #4]
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d13b      	bne.n	8004e20 <_dtoa_r+0x320>
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <_dtoa_r+0x2f0>)
 8004daa:	4602      	mov	r2, r0
 8004dac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004db0:	e6c0      	b.n	8004b34 <_dtoa_r+0x34>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e7df      	b.n	8004d76 <_dtoa_r+0x276>
 8004db6:	bf00      	nop
 8004db8:	636f4361 	.word	0x636f4361
 8004dbc:	3fd287a7 	.word	0x3fd287a7
 8004dc0:	8b60c8b3 	.word	0x8b60c8b3
 8004dc4:	3fc68a28 	.word	0x3fc68a28
 8004dc8:	509f79fb 	.word	0x509f79fb
 8004dcc:	3fd34413 	.word	0x3fd34413
 8004dd0:	08006bd4 	.word	0x08006bd4
 8004dd4:	08006d92 	.word	0x08006d92
 8004dd8:	7ff00000 	.word	0x7ff00000
 8004ddc:	08006d8e 	.word	0x08006d8e
 8004de0:	08006d85 	.word	0x08006d85
 8004de4:	08006bb1 	.word	0x08006bb1
 8004de8:	3ff80000 	.word	0x3ff80000
 8004dec:	08006e88 	.word	0x08006e88
 8004df0:	08006ded 	.word	0x08006ded
 8004df4:	2501      	movs	r5, #1
 8004df6:	2300      	movs	r3, #0
 8004df8:	9306      	str	r3, [sp, #24]
 8004dfa:	9508      	str	r5, [sp, #32]
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004e00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2312      	movs	r3, #18
 8004e08:	e7b0      	b.n	8004d6c <_dtoa_r+0x26c>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	9308      	str	r3, [sp, #32]
 8004e0e:	e7f5      	b.n	8004dfc <_dtoa_r+0x2fc>
 8004e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e16:	e7b8      	b.n	8004d8a <_dtoa_r+0x28a>
 8004e18:	3101      	adds	r1, #1
 8004e1a:	6041      	str	r1, [r0, #4]
 8004e1c:	0052      	lsls	r2, r2, #1
 8004e1e:	e7b8      	b.n	8004d92 <_dtoa_r+0x292>
 8004e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e22:	9a01      	ldr	r2, [sp, #4]
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	2b0e      	cmp	r3, #14
 8004e2a:	f200 809d 	bhi.w	8004f68 <_dtoa_r+0x468>
 8004e2e:	2d00      	cmp	r5, #0
 8004e30:	f000 809a 	beq.w	8004f68 <_dtoa_r+0x468>
 8004e34:	9b00      	ldr	r3, [sp, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	dd32      	ble.n	8004ea0 <_dtoa_r+0x3a0>
 8004e3a:	4ab7      	ldr	r2, [pc, #732]	; (8005118 <_dtoa_r+0x618>)
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e48:	9b00      	ldr	r3, [sp, #0]
 8004e4a:	05d8      	lsls	r0, r3, #23
 8004e4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004e50:	d516      	bpl.n	8004e80 <_dtoa_r+0x380>
 8004e52:	4bb2      	ldr	r3, [pc, #712]	; (800511c <_dtoa_r+0x61c>)
 8004e54:	ec51 0b19 	vmov	r0, r1, d9
 8004e58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e5c:	f7fb fd06 	bl	800086c <__aeabi_ddiv>
 8004e60:	f007 070f 	and.w	r7, r7, #15
 8004e64:	4682      	mov	sl, r0
 8004e66:	468b      	mov	fp, r1
 8004e68:	2503      	movs	r5, #3
 8004e6a:	4eac      	ldr	r6, [pc, #688]	; (800511c <_dtoa_r+0x61c>)
 8004e6c:	b957      	cbnz	r7, 8004e84 <_dtoa_r+0x384>
 8004e6e:	4642      	mov	r2, r8
 8004e70:	464b      	mov	r3, r9
 8004e72:	4650      	mov	r0, sl
 8004e74:	4659      	mov	r1, fp
 8004e76:	f7fb fcf9 	bl	800086c <__aeabi_ddiv>
 8004e7a:	4682      	mov	sl, r0
 8004e7c:	468b      	mov	fp, r1
 8004e7e:	e028      	b.n	8004ed2 <_dtoa_r+0x3d2>
 8004e80:	2502      	movs	r5, #2
 8004e82:	e7f2      	b.n	8004e6a <_dtoa_r+0x36a>
 8004e84:	07f9      	lsls	r1, r7, #31
 8004e86:	d508      	bpl.n	8004e9a <_dtoa_r+0x39a>
 8004e88:	4640      	mov	r0, r8
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e90:	f7fb fbc2 	bl	8000618 <__aeabi_dmul>
 8004e94:	3501      	adds	r5, #1
 8004e96:	4680      	mov	r8, r0
 8004e98:	4689      	mov	r9, r1
 8004e9a:	107f      	asrs	r7, r7, #1
 8004e9c:	3608      	adds	r6, #8
 8004e9e:	e7e5      	b.n	8004e6c <_dtoa_r+0x36c>
 8004ea0:	f000 809b 	beq.w	8004fda <_dtoa_r+0x4da>
 8004ea4:	9b00      	ldr	r3, [sp, #0]
 8004ea6:	4f9d      	ldr	r7, [pc, #628]	; (800511c <_dtoa_r+0x61c>)
 8004ea8:	425e      	negs	r6, r3
 8004eaa:	4b9b      	ldr	r3, [pc, #620]	; (8005118 <_dtoa_r+0x618>)
 8004eac:	f006 020f 	and.w	r2, r6, #15
 8004eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	ec51 0b19 	vmov	r0, r1, d9
 8004ebc:	f7fb fbac 	bl	8000618 <__aeabi_dmul>
 8004ec0:	1136      	asrs	r6, r6, #4
 8004ec2:	4682      	mov	sl, r0
 8004ec4:	468b      	mov	fp, r1
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2502      	movs	r5, #2
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	d17a      	bne.n	8004fc4 <_dtoa_r+0x4c4>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1d3      	bne.n	8004e7a <_dtoa_r+0x37a>
 8004ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8082 	beq.w	8004fde <_dtoa_r+0x4de>
 8004eda:	4b91      	ldr	r3, [pc, #580]	; (8005120 <_dtoa_r+0x620>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	4650      	mov	r0, sl
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	f7fb fe0b 	bl	8000afc <__aeabi_dcmplt>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d079      	beq.n	8004fde <_dtoa_r+0x4de>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d076      	beq.n	8004fde <_dtoa_r+0x4de>
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dd36      	ble.n	8004f64 <_dtoa_r+0x464>
 8004ef6:	9b00      	ldr	r3, [sp, #0]
 8004ef8:	4650      	mov	r0, sl
 8004efa:	4659      	mov	r1, fp
 8004efc:	1e5f      	subs	r7, r3, #1
 8004efe:	2200      	movs	r2, #0
 8004f00:	4b88      	ldr	r3, [pc, #544]	; (8005124 <_dtoa_r+0x624>)
 8004f02:	f7fb fb89 	bl	8000618 <__aeabi_dmul>
 8004f06:	9e02      	ldr	r6, [sp, #8]
 8004f08:	4682      	mov	sl, r0
 8004f0a:	468b      	mov	fp, r1
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f7fb fb18 	bl	8000544 <__aeabi_i2d>
 8004f14:	4652      	mov	r2, sl
 8004f16:	465b      	mov	r3, fp
 8004f18:	f7fb fb7e 	bl	8000618 <__aeabi_dmul>
 8004f1c:	4b82      	ldr	r3, [pc, #520]	; (8005128 <_dtoa_r+0x628>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f7fb f9c4 	bl	80002ac <__adddf3>
 8004f24:	46d0      	mov	r8, sl
 8004f26:	46d9      	mov	r9, fp
 8004f28:	4682      	mov	sl, r0
 8004f2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004f2e:	2e00      	cmp	r6, #0
 8004f30:	d158      	bne.n	8004fe4 <_dtoa_r+0x4e4>
 8004f32:	4b7e      	ldr	r3, [pc, #504]	; (800512c <_dtoa_r+0x62c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f7fb f9b5 	bl	80002a8 <__aeabi_dsub>
 8004f3e:	4652      	mov	r2, sl
 8004f40:	465b      	mov	r3, fp
 8004f42:	4680      	mov	r8, r0
 8004f44:	4689      	mov	r9, r1
 8004f46:	f7fb fdf7 	bl	8000b38 <__aeabi_dcmpgt>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	f040 8295 	bne.w	800547a <_dtoa_r+0x97a>
 8004f50:	4652      	mov	r2, sl
 8004f52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb fdcf 	bl	8000afc <__aeabi_dcmplt>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	f040 8289 	bne.w	8005476 <_dtoa_r+0x976>
 8004f64:	ec5b ab19 	vmov	sl, fp, d9
 8004f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f2c0 8148 	blt.w	8005200 <_dtoa_r+0x700>
 8004f70:	9a00      	ldr	r2, [sp, #0]
 8004f72:	2a0e      	cmp	r2, #14
 8004f74:	f300 8144 	bgt.w	8005200 <_dtoa_r+0x700>
 8004f78:	4b67      	ldr	r3, [pc, #412]	; (8005118 <_dtoa_r+0x618>)
 8004f7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f280 80d5 	bge.w	8005134 <_dtoa_r+0x634>
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f300 80d1 	bgt.w	8005134 <_dtoa_r+0x634>
 8004f92:	f040 826f 	bne.w	8005474 <_dtoa_r+0x974>
 8004f96:	4b65      	ldr	r3, [pc, #404]	; (800512c <_dtoa_r+0x62c>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb fb3b 	bl	8000618 <__aeabi_dmul>
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	465b      	mov	r3, fp
 8004fa6:	f7fb fdbd 	bl	8000b24 <__aeabi_dcmpge>
 8004faa:	9e03      	ldr	r6, [sp, #12]
 8004fac:	4637      	mov	r7, r6
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	f040 8245 	bne.w	800543e <_dtoa_r+0x93e>
 8004fb4:	9d01      	ldr	r5, [sp, #4]
 8004fb6:	2331      	movs	r3, #49	; 0x31
 8004fb8:	f805 3b01 	strb.w	r3, [r5], #1
 8004fbc:	9b00      	ldr	r3, [sp, #0]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	e240      	b.n	8005446 <_dtoa_r+0x946>
 8004fc4:	07f2      	lsls	r2, r6, #31
 8004fc6:	d505      	bpl.n	8004fd4 <_dtoa_r+0x4d4>
 8004fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fcc:	f7fb fb24 	bl	8000618 <__aeabi_dmul>
 8004fd0:	3501      	adds	r5, #1
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	1076      	asrs	r6, r6, #1
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	e777      	b.n	8004eca <_dtoa_r+0x3ca>
 8004fda:	2502      	movs	r5, #2
 8004fdc:	e779      	b.n	8004ed2 <_dtoa_r+0x3d2>
 8004fde:	9f00      	ldr	r7, [sp, #0]
 8004fe0:	9e03      	ldr	r6, [sp, #12]
 8004fe2:	e794      	b.n	8004f0e <_dtoa_r+0x40e>
 8004fe4:	9901      	ldr	r1, [sp, #4]
 8004fe6:	4b4c      	ldr	r3, [pc, #304]	; (8005118 <_dtoa_r+0x618>)
 8004fe8:	4431      	add	r1, r6
 8004fea:	910d      	str	r1, [sp, #52]	; 0x34
 8004fec:	9908      	ldr	r1, [sp, #32]
 8004fee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ff2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ff6:	2900      	cmp	r1, #0
 8004ff8:	d043      	beq.n	8005082 <_dtoa_r+0x582>
 8004ffa:	494d      	ldr	r1, [pc, #308]	; (8005130 <_dtoa_r+0x630>)
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7fb fc35 	bl	800086c <__aeabi_ddiv>
 8005002:	4652      	mov	r2, sl
 8005004:	465b      	mov	r3, fp
 8005006:	f7fb f94f 	bl	80002a8 <__aeabi_dsub>
 800500a:	9d01      	ldr	r5, [sp, #4]
 800500c:	4682      	mov	sl, r0
 800500e:	468b      	mov	fp, r1
 8005010:	4649      	mov	r1, r9
 8005012:	4640      	mov	r0, r8
 8005014:	f7fb fdb0 	bl	8000b78 <__aeabi_d2iz>
 8005018:	4606      	mov	r6, r0
 800501a:	f7fb fa93 	bl	8000544 <__aeabi_i2d>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4640      	mov	r0, r8
 8005024:	4649      	mov	r1, r9
 8005026:	f7fb f93f 	bl	80002a8 <__aeabi_dsub>
 800502a:	3630      	adds	r6, #48	; 0x30
 800502c:	f805 6b01 	strb.w	r6, [r5], #1
 8005030:	4652      	mov	r2, sl
 8005032:	465b      	mov	r3, fp
 8005034:	4680      	mov	r8, r0
 8005036:	4689      	mov	r9, r1
 8005038:	f7fb fd60 	bl	8000afc <__aeabi_dcmplt>
 800503c:	2800      	cmp	r0, #0
 800503e:	d163      	bne.n	8005108 <_dtoa_r+0x608>
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	4936      	ldr	r1, [pc, #216]	; (8005120 <_dtoa_r+0x620>)
 8005046:	2000      	movs	r0, #0
 8005048:	f7fb f92e 	bl	80002a8 <__aeabi_dsub>
 800504c:	4652      	mov	r2, sl
 800504e:	465b      	mov	r3, fp
 8005050:	f7fb fd54 	bl	8000afc <__aeabi_dcmplt>
 8005054:	2800      	cmp	r0, #0
 8005056:	f040 80b5 	bne.w	80051c4 <_dtoa_r+0x6c4>
 800505a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800505c:	429d      	cmp	r5, r3
 800505e:	d081      	beq.n	8004f64 <_dtoa_r+0x464>
 8005060:	4b30      	ldr	r3, [pc, #192]	; (8005124 <_dtoa_r+0x624>)
 8005062:	2200      	movs	r2, #0
 8005064:	4650      	mov	r0, sl
 8005066:	4659      	mov	r1, fp
 8005068:	f7fb fad6 	bl	8000618 <__aeabi_dmul>
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <_dtoa_r+0x624>)
 800506e:	4682      	mov	sl, r0
 8005070:	468b      	mov	fp, r1
 8005072:	4640      	mov	r0, r8
 8005074:	4649      	mov	r1, r9
 8005076:	2200      	movs	r2, #0
 8005078:	f7fb face 	bl	8000618 <__aeabi_dmul>
 800507c:	4680      	mov	r8, r0
 800507e:	4689      	mov	r9, r1
 8005080:	e7c6      	b.n	8005010 <_dtoa_r+0x510>
 8005082:	4650      	mov	r0, sl
 8005084:	4659      	mov	r1, fp
 8005086:	f7fb fac7 	bl	8000618 <__aeabi_dmul>
 800508a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800508c:	9d01      	ldr	r5, [sp, #4]
 800508e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005090:	4682      	mov	sl, r0
 8005092:	468b      	mov	fp, r1
 8005094:	4649      	mov	r1, r9
 8005096:	4640      	mov	r0, r8
 8005098:	f7fb fd6e 	bl	8000b78 <__aeabi_d2iz>
 800509c:	4606      	mov	r6, r0
 800509e:	f7fb fa51 	bl	8000544 <__aeabi_i2d>
 80050a2:	3630      	adds	r6, #48	; 0x30
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	f7fb f8fc 	bl	80002a8 <__aeabi_dsub>
 80050b0:	f805 6b01 	strb.w	r6, [r5], #1
 80050b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050b6:	429d      	cmp	r5, r3
 80050b8:	4680      	mov	r8, r0
 80050ba:	4689      	mov	r9, r1
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	d124      	bne.n	800510c <_dtoa_r+0x60c>
 80050c2:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <_dtoa_r+0x630>)
 80050c4:	4650      	mov	r0, sl
 80050c6:	4659      	mov	r1, fp
 80050c8:	f7fb f8f0 	bl	80002ac <__adddf3>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4640      	mov	r0, r8
 80050d2:	4649      	mov	r1, r9
 80050d4:	f7fb fd30 	bl	8000b38 <__aeabi_dcmpgt>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d173      	bne.n	80051c4 <_dtoa_r+0x6c4>
 80050dc:	4652      	mov	r2, sl
 80050de:	465b      	mov	r3, fp
 80050e0:	4913      	ldr	r1, [pc, #76]	; (8005130 <_dtoa_r+0x630>)
 80050e2:	2000      	movs	r0, #0
 80050e4:	f7fb f8e0 	bl	80002a8 <__aeabi_dsub>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4640      	mov	r0, r8
 80050ee:	4649      	mov	r1, r9
 80050f0:	f7fb fd04 	bl	8000afc <__aeabi_dcmplt>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f43f af35 	beq.w	8004f64 <_dtoa_r+0x464>
 80050fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050fc:	1e6b      	subs	r3, r5, #1
 80050fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005100:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d0f8      	beq.n	80050fa <_dtoa_r+0x5fa>
 8005108:	9700      	str	r7, [sp, #0]
 800510a:	e049      	b.n	80051a0 <_dtoa_r+0x6a0>
 800510c:	4b05      	ldr	r3, [pc, #20]	; (8005124 <_dtoa_r+0x624>)
 800510e:	f7fb fa83 	bl	8000618 <__aeabi_dmul>
 8005112:	4680      	mov	r8, r0
 8005114:	4689      	mov	r9, r1
 8005116:	e7bd      	b.n	8005094 <_dtoa_r+0x594>
 8005118:	08006e88 	.word	0x08006e88
 800511c:	08006e60 	.word	0x08006e60
 8005120:	3ff00000 	.word	0x3ff00000
 8005124:	40240000 	.word	0x40240000
 8005128:	401c0000 	.word	0x401c0000
 800512c:	40140000 	.word	0x40140000
 8005130:	3fe00000 	.word	0x3fe00000
 8005134:	9d01      	ldr	r5, [sp, #4]
 8005136:	4656      	mov	r6, sl
 8005138:	465f      	mov	r7, fp
 800513a:	4642      	mov	r2, r8
 800513c:	464b      	mov	r3, r9
 800513e:	4630      	mov	r0, r6
 8005140:	4639      	mov	r1, r7
 8005142:	f7fb fb93 	bl	800086c <__aeabi_ddiv>
 8005146:	f7fb fd17 	bl	8000b78 <__aeabi_d2iz>
 800514a:	4682      	mov	sl, r0
 800514c:	f7fb f9fa 	bl	8000544 <__aeabi_i2d>
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	f7fb fa60 	bl	8000618 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4630      	mov	r0, r6
 800515e:	4639      	mov	r1, r7
 8005160:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005164:	f7fb f8a0 	bl	80002a8 <__aeabi_dsub>
 8005168:	f805 6b01 	strb.w	r6, [r5], #1
 800516c:	9e01      	ldr	r6, [sp, #4]
 800516e:	9f03      	ldr	r7, [sp, #12]
 8005170:	1bae      	subs	r6, r5, r6
 8005172:	42b7      	cmp	r7, r6
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	d135      	bne.n	80051e6 <_dtoa_r+0x6e6>
 800517a:	f7fb f897 	bl	80002ac <__adddf3>
 800517e:	4642      	mov	r2, r8
 8005180:	464b      	mov	r3, r9
 8005182:	4606      	mov	r6, r0
 8005184:	460f      	mov	r7, r1
 8005186:	f7fb fcd7 	bl	8000b38 <__aeabi_dcmpgt>
 800518a:	b9d0      	cbnz	r0, 80051c2 <_dtoa_r+0x6c2>
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	4630      	mov	r0, r6
 8005192:	4639      	mov	r1, r7
 8005194:	f7fb fca8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005198:	b110      	cbz	r0, 80051a0 <_dtoa_r+0x6a0>
 800519a:	f01a 0f01 	tst.w	sl, #1
 800519e:	d110      	bne.n	80051c2 <_dtoa_r+0x6c2>
 80051a0:	4620      	mov	r0, r4
 80051a2:	ee18 1a10 	vmov	r1, s16
 80051a6:	f000 fb05 	bl	80057b4 <_Bfree>
 80051aa:	2300      	movs	r3, #0
 80051ac:	9800      	ldr	r0, [sp, #0]
 80051ae:	702b      	strb	r3, [r5, #0]
 80051b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051b2:	3001      	adds	r0, #1
 80051b4:	6018      	str	r0, [r3, #0]
 80051b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f43f acf1 	beq.w	8004ba0 <_dtoa_r+0xa0>
 80051be:	601d      	str	r5, [r3, #0]
 80051c0:	e4ee      	b.n	8004ba0 <_dtoa_r+0xa0>
 80051c2:	9f00      	ldr	r7, [sp, #0]
 80051c4:	462b      	mov	r3, r5
 80051c6:	461d      	mov	r5, r3
 80051c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051cc:	2a39      	cmp	r2, #57	; 0x39
 80051ce:	d106      	bne.n	80051de <_dtoa_r+0x6de>
 80051d0:	9a01      	ldr	r2, [sp, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d1f7      	bne.n	80051c6 <_dtoa_r+0x6c6>
 80051d6:	9901      	ldr	r1, [sp, #4]
 80051d8:	2230      	movs	r2, #48	; 0x30
 80051da:	3701      	adds	r7, #1
 80051dc:	700a      	strb	r2, [r1, #0]
 80051de:	781a      	ldrb	r2, [r3, #0]
 80051e0:	3201      	adds	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e790      	b.n	8005108 <_dtoa_r+0x608>
 80051e6:	4ba6      	ldr	r3, [pc, #664]	; (8005480 <_dtoa_r+0x980>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	f7fb fa15 	bl	8000618 <__aeabi_dmul>
 80051ee:	2200      	movs	r2, #0
 80051f0:	2300      	movs	r3, #0
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	f7fb fc77 	bl	8000ae8 <__aeabi_dcmpeq>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d09d      	beq.n	800513a <_dtoa_r+0x63a>
 80051fe:	e7cf      	b.n	80051a0 <_dtoa_r+0x6a0>
 8005200:	9a08      	ldr	r2, [sp, #32]
 8005202:	2a00      	cmp	r2, #0
 8005204:	f000 80d7 	beq.w	80053b6 <_dtoa_r+0x8b6>
 8005208:	9a06      	ldr	r2, [sp, #24]
 800520a:	2a01      	cmp	r2, #1
 800520c:	f300 80ba 	bgt.w	8005384 <_dtoa_r+0x884>
 8005210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005212:	2a00      	cmp	r2, #0
 8005214:	f000 80b2 	beq.w	800537c <_dtoa_r+0x87c>
 8005218:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800521c:	9e07      	ldr	r6, [sp, #28]
 800521e:	9d04      	ldr	r5, [sp, #16]
 8005220:	9a04      	ldr	r2, [sp, #16]
 8005222:	441a      	add	r2, r3
 8005224:	9204      	str	r2, [sp, #16]
 8005226:	9a05      	ldr	r2, [sp, #20]
 8005228:	2101      	movs	r1, #1
 800522a:	441a      	add	r2, r3
 800522c:	4620      	mov	r0, r4
 800522e:	9205      	str	r2, [sp, #20]
 8005230:	f000 fb78 	bl	8005924 <__i2b>
 8005234:	4607      	mov	r7, r0
 8005236:	2d00      	cmp	r5, #0
 8005238:	dd0c      	ble.n	8005254 <_dtoa_r+0x754>
 800523a:	9b05      	ldr	r3, [sp, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	dd09      	ble.n	8005254 <_dtoa_r+0x754>
 8005240:	42ab      	cmp	r3, r5
 8005242:	9a04      	ldr	r2, [sp, #16]
 8005244:	bfa8      	it	ge
 8005246:	462b      	movge	r3, r5
 8005248:	1ad2      	subs	r2, r2, r3
 800524a:	9204      	str	r2, [sp, #16]
 800524c:	9a05      	ldr	r2, [sp, #20]
 800524e:	1aed      	subs	r5, r5, r3
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	9b07      	ldr	r3, [sp, #28]
 8005256:	b31b      	cbz	r3, 80052a0 <_dtoa_r+0x7a0>
 8005258:	9b08      	ldr	r3, [sp, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 80af 	beq.w	80053be <_dtoa_r+0x8be>
 8005260:	2e00      	cmp	r6, #0
 8005262:	dd13      	ble.n	800528c <_dtoa_r+0x78c>
 8005264:	4639      	mov	r1, r7
 8005266:	4632      	mov	r2, r6
 8005268:	4620      	mov	r0, r4
 800526a:	f000 fc1b 	bl	8005aa4 <__pow5mult>
 800526e:	ee18 2a10 	vmov	r2, s16
 8005272:	4601      	mov	r1, r0
 8005274:	4607      	mov	r7, r0
 8005276:	4620      	mov	r0, r4
 8005278:	f000 fb6a 	bl	8005950 <__multiply>
 800527c:	ee18 1a10 	vmov	r1, s16
 8005280:	4680      	mov	r8, r0
 8005282:	4620      	mov	r0, r4
 8005284:	f000 fa96 	bl	80057b4 <_Bfree>
 8005288:	ee08 8a10 	vmov	s16, r8
 800528c:	9b07      	ldr	r3, [sp, #28]
 800528e:	1b9a      	subs	r2, r3, r6
 8005290:	d006      	beq.n	80052a0 <_dtoa_r+0x7a0>
 8005292:	ee18 1a10 	vmov	r1, s16
 8005296:	4620      	mov	r0, r4
 8005298:	f000 fc04 	bl	8005aa4 <__pow5mult>
 800529c:	ee08 0a10 	vmov	s16, r0
 80052a0:	2101      	movs	r1, #1
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 fb3e 	bl	8005924 <__i2b>
 80052a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	4606      	mov	r6, r0
 80052ae:	f340 8088 	ble.w	80053c2 <_dtoa_r+0x8c2>
 80052b2:	461a      	mov	r2, r3
 80052b4:	4601      	mov	r1, r0
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 fbf4 	bl	8005aa4 <__pow5mult>
 80052bc:	9b06      	ldr	r3, [sp, #24]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	4606      	mov	r6, r0
 80052c2:	f340 8081 	ble.w	80053c8 <_dtoa_r+0x8c8>
 80052c6:	f04f 0800 	mov.w	r8, #0
 80052ca:	6933      	ldr	r3, [r6, #16]
 80052cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052d0:	6918      	ldr	r0, [r3, #16]
 80052d2:	f000 fad7 	bl	8005884 <__hi0bits>
 80052d6:	f1c0 0020 	rsb	r0, r0, #32
 80052da:	9b05      	ldr	r3, [sp, #20]
 80052dc:	4418      	add	r0, r3
 80052de:	f010 001f 	ands.w	r0, r0, #31
 80052e2:	f000 8092 	beq.w	800540a <_dtoa_r+0x90a>
 80052e6:	f1c0 0320 	rsb	r3, r0, #32
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	f340 808a 	ble.w	8005404 <_dtoa_r+0x904>
 80052f0:	f1c0 001c 	rsb	r0, r0, #28
 80052f4:	9b04      	ldr	r3, [sp, #16]
 80052f6:	4403      	add	r3, r0
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	9b05      	ldr	r3, [sp, #20]
 80052fc:	4403      	add	r3, r0
 80052fe:	4405      	add	r5, r0
 8005300:	9305      	str	r3, [sp, #20]
 8005302:	9b04      	ldr	r3, [sp, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	dd07      	ble.n	8005318 <_dtoa_r+0x818>
 8005308:	ee18 1a10 	vmov	r1, s16
 800530c:	461a      	mov	r2, r3
 800530e:	4620      	mov	r0, r4
 8005310:	f000 fc22 	bl	8005b58 <__lshift>
 8005314:	ee08 0a10 	vmov	s16, r0
 8005318:	9b05      	ldr	r3, [sp, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	dd05      	ble.n	800532a <_dtoa_r+0x82a>
 800531e:	4631      	mov	r1, r6
 8005320:	461a      	mov	r2, r3
 8005322:	4620      	mov	r0, r4
 8005324:	f000 fc18 	bl	8005b58 <__lshift>
 8005328:	4606      	mov	r6, r0
 800532a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d06e      	beq.n	800540e <_dtoa_r+0x90e>
 8005330:	ee18 0a10 	vmov	r0, s16
 8005334:	4631      	mov	r1, r6
 8005336:	f000 fc7f 	bl	8005c38 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	da67      	bge.n	800540e <_dtoa_r+0x90e>
 800533e:	9b00      	ldr	r3, [sp, #0]
 8005340:	3b01      	subs	r3, #1
 8005342:	ee18 1a10 	vmov	r1, s16
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	220a      	movs	r2, #10
 800534a:	2300      	movs	r3, #0
 800534c:	4620      	mov	r0, r4
 800534e:	f000 fa53 	bl	80057f8 <__multadd>
 8005352:	9b08      	ldr	r3, [sp, #32]
 8005354:	ee08 0a10 	vmov	s16, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 81b1 	beq.w	80056c0 <_dtoa_r+0xbc0>
 800535e:	2300      	movs	r3, #0
 8005360:	4639      	mov	r1, r7
 8005362:	220a      	movs	r2, #10
 8005364:	4620      	mov	r0, r4
 8005366:	f000 fa47 	bl	80057f8 <__multadd>
 800536a:	9b02      	ldr	r3, [sp, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	4607      	mov	r7, r0
 8005370:	f300 808e 	bgt.w	8005490 <_dtoa_r+0x990>
 8005374:	9b06      	ldr	r3, [sp, #24]
 8005376:	2b02      	cmp	r3, #2
 8005378:	dc51      	bgt.n	800541e <_dtoa_r+0x91e>
 800537a:	e089      	b.n	8005490 <_dtoa_r+0x990>
 800537c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800537e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005382:	e74b      	b.n	800521c <_dtoa_r+0x71c>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	1e5e      	subs	r6, r3, #1
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	42b3      	cmp	r3, r6
 800538c:	bfbf      	itttt	lt
 800538e:	9b07      	ldrlt	r3, [sp, #28]
 8005390:	9607      	strlt	r6, [sp, #28]
 8005392:	1af2      	sublt	r2, r6, r3
 8005394:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005396:	bfb6      	itet	lt
 8005398:	189b      	addlt	r3, r3, r2
 800539a:	1b9e      	subge	r6, r3, r6
 800539c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	bfb8      	it	lt
 80053a2:	2600      	movlt	r6, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bfb7      	itett	lt
 80053a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80053ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80053b0:	1a9d      	sublt	r5, r3, r2
 80053b2:	2300      	movlt	r3, #0
 80053b4:	e734      	b.n	8005220 <_dtoa_r+0x720>
 80053b6:	9e07      	ldr	r6, [sp, #28]
 80053b8:	9d04      	ldr	r5, [sp, #16]
 80053ba:	9f08      	ldr	r7, [sp, #32]
 80053bc:	e73b      	b.n	8005236 <_dtoa_r+0x736>
 80053be:	9a07      	ldr	r2, [sp, #28]
 80053c0:	e767      	b.n	8005292 <_dtoa_r+0x792>
 80053c2:	9b06      	ldr	r3, [sp, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	dc18      	bgt.n	80053fa <_dtoa_r+0x8fa>
 80053c8:	f1ba 0f00 	cmp.w	sl, #0
 80053cc:	d115      	bne.n	80053fa <_dtoa_r+0x8fa>
 80053ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053d2:	b993      	cbnz	r3, 80053fa <_dtoa_r+0x8fa>
 80053d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053d8:	0d1b      	lsrs	r3, r3, #20
 80053da:	051b      	lsls	r3, r3, #20
 80053dc:	b183      	cbz	r3, 8005400 <_dtoa_r+0x900>
 80053de:	9b04      	ldr	r3, [sp, #16]
 80053e0:	3301      	adds	r3, #1
 80053e2:	9304      	str	r3, [sp, #16]
 80053e4:	9b05      	ldr	r3, [sp, #20]
 80053e6:	3301      	adds	r3, #1
 80053e8:	9305      	str	r3, [sp, #20]
 80053ea:	f04f 0801 	mov.w	r8, #1
 80053ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f47f af6a 	bne.w	80052ca <_dtoa_r+0x7ca>
 80053f6:	2001      	movs	r0, #1
 80053f8:	e76f      	b.n	80052da <_dtoa_r+0x7da>
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	e7f6      	b.n	80053ee <_dtoa_r+0x8ee>
 8005400:	4698      	mov	r8, r3
 8005402:	e7f4      	b.n	80053ee <_dtoa_r+0x8ee>
 8005404:	f43f af7d 	beq.w	8005302 <_dtoa_r+0x802>
 8005408:	4618      	mov	r0, r3
 800540a:	301c      	adds	r0, #28
 800540c:	e772      	b.n	80052f4 <_dtoa_r+0x7f4>
 800540e:	9b03      	ldr	r3, [sp, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	dc37      	bgt.n	8005484 <_dtoa_r+0x984>
 8005414:	9b06      	ldr	r3, [sp, #24]
 8005416:	2b02      	cmp	r3, #2
 8005418:	dd34      	ble.n	8005484 <_dtoa_r+0x984>
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	9302      	str	r3, [sp, #8]
 800541e:	9b02      	ldr	r3, [sp, #8]
 8005420:	b96b      	cbnz	r3, 800543e <_dtoa_r+0x93e>
 8005422:	4631      	mov	r1, r6
 8005424:	2205      	movs	r2, #5
 8005426:	4620      	mov	r0, r4
 8005428:	f000 f9e6 	bl	80057f8 <__multadd>
 800542c:	4601      	mov	r1, r0
 800542e:	4606      	mov	r6, r0
 8005430:	ee18 0a10 	vmov	r0, s16
 8005434:	f000 fc00 	bl	8005c38 <__mcmp>
 8005438:	2800      	cmp	r0, #0
 800543a:	f73f adbb 	bgt.w	8004fb4 <_dtoa_r+0x4b4>
 800543e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005440:	9d01      	ldr	r5, [sp, #4]
 8005442:	43db      	mvns	r3, r3
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	f04f 0800 	mov.w	r8, #0
 800544a:	4631      	mov	r1, r6
 800544c:	4620      	mov	r0, r4
 800544e:	f000 f9b1 	bl	80057b4 <_Bfree>
 8005452:	2f00      	cmp	r7, #0
 8005454:	f43f aea4 	beq.w	80051a0 <_dtoa_r+0x6a0>
 8005458:	f1b8 0f00 	cmp.w	r8, #0
 800545c:	d005      	beq.n	800546a <_dtoa_r+0x96a>
 800545e:	45b8      	cmp	r8, r7
 8005460:	d003      	beq.n	800546a <_dtoa_r+0x96a>
 8005462:	4641      	mov	r1, r8
 8005464:	4620      	mov	r0, r4
 8005466:	f000 f9a5 	bl	80057b4 <_Bfree>
 800546a:	4639      	mov	r1, r7
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f9a1 	bl	80057b4 <_Bfree>
 8005472:	e695      	b.n	80051a0 <_dtoa_r+0x6a0>
 8005474:	2600      	movs	r6, #0
 8005476:	4637      	mov	r7, r6
 8005478:	e7e1      	b.n	800543e <_dtoa_r+0x93e>
 800547a:	9700      	str	r7, [sp, #0]
 800547c:	4637      	mov	r7, r6
 800547e:	e599      	b.n	8004fb4 <_dtoa_r+0x4b4>
 8005480:	40240000 	.word	0x40240000
 8005484:	9b08      	ldr	r3, [sp, #32]
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 80ca 	beq.w	8005620 <_dtoa_r+0xb20>
 800548c:	9b03      	ldr	r3, [sp, #12]
 800548e:	9302      	str	r3, [sp, #8]
 8005490:	2d00      	cmp	r5, #0
 8005492:	dd05      	ble.n	80054a0 <_dtoa_r+0x9a0>
 8005494:	4639      	mov	r1, r7
 8005496:	462a      	mov	r2, r5
 8005498:	4620      	mov	r0, r4
 800549a:	f000 fb5d 	bl	8005b58 <__lshift>
 800549e:	4607      	mov	r7, r0
 80054a0:	f1b8 0f00 	cmp.w	r8, #0
 80054a4:	d05b      	beq.n	800555e <_dtoa_r+0xa5e>
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f943 	bl	8005734 <_Balloc>
 80054ae:	4605      	mov	r5, r0
 80054b0:	b928      	cbnz	r0, 80054be <_dtoa_r+0x9be>
 80054b2:	4b87      	ldr	r3, [pc, #540]	; (80056d0 <_dtoa_r+0xbd0>)
 80054b4:	4602      	mov	r2, r0
 80054b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80054ba:	f7ff bb3b 	b.w	8004b34 <_dtoa_r+0x34>
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	3202      	adds	r2, #2
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	f107 010c 	add.w	r1, r7, #12
 80054c8:	300c      	adds	r0, #12
 80054ca:	f000 f925 	bl	8005718 <memcpy>
 80054ce:	2201      	movs	r2, #1
 80054d0:	4629      	mov	r1, r5
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fb40 	bl	8005b58 <__lshift>
 80054d8:	9b01      	ldr	r3, [sp, #4]
 80054da:	f103 0901 	add.w	r9, r3, #1
 80054de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	f00a 0301 	and.w	r3, sl, #1
 80054ea:	46b8      	mov	r8, r7
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	4607      	mov	r7, r0
 80054f0:	4631      	mov	r1, r6
 80054f2:	ee18 0a10 	vmov	r0, s16
 80054f6:	f7ff fa75 	bl	80049e4 <quorem>
 80054fa:	4641      	mov	r1, r8
 80054fc:	9002      	str	r0, [sp, #8]
 80054fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005502:	ee18 0a10 	vmov	r0, s16
 8005506:	f000 fb97 	bl	8005c38 <__mcmp>
 800550a:	463a      	mov	r2, r7
 800550c:	9003      	str	r0, [sp, #12]
 800550e:	4631      	mov	r1, r6
 8005510:	4620      	mov	r0, r4
 8005512:	f000 fbad 	bl	8005c70 <__mdiff>
 8005516:	68c2      	ldr	r2, [r0, #12]
 8005518:	f109 3bff 	add.w	fp, r9, #4294967295
 800551c:	4605      	mov	r5, r0
 800551e:	bb02      	cbnz	r2, 8005562 <_dtoa_r+0xa62>
 8005520:	4601      	mov	r1, r0
 8005522:	ee18 0a10 	vmov	r0, s16
 8005526:	f000 fb87 	bl	8005c38 <__mcmp>
 800552a:	4602      	mov	r2, r0
 800552c:	4629      	mov	r1, r5
 800552e:	4620      	mov	r0, r4
 8005530:	9207      	str	r2, [sp, #28]
 8005532:	f000 f93f 	bl	80057b4 <_Bfree>
 8005536:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800553a:	ea43 0102 	orr.w	r1, r3, r2
 800553e:	9b04      	ldr	r3, [sp, #16]
 8005540:	430b      	orrs	r3, r1
 8005542:	464d      	mov	r5, r9
 8005544:	d10f      	bne.n	8005566 <_dtoa_r+0xa66>
 8005546:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800554a:	d02a      	beq.n	80055a2 <_dtoa_r+0xaa2>
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	dd02      	ble.n	8005558 <_dtoa_r+0xa58>
 8005552:	9b02      	ldr	r3, [sp, #8]
 8005554:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005558:	f88b a000 	strb.w	sl, [fp]
 800555c:	e775      	b.n	800544a <_dtoa_r+0x94a>
 800555e:	4638      	mov	r0, r7
 8005560:	e7ba      	b.n	80054d8 <_dtoa_r+0x9d8>
 8005562:	2201      	movs	r2, #1
 8005564:	e7e2      	b.n	800552c <_dtoa_r+0xa2c>
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	db04      	blt.n	8005576 <_dtoa_r+0xa76>
 800556c:	9906      	ldr	r1, [sp, #24]
 800556e:	430b      	orrs	r3, r1
 8005570:	9904      	ldr	r1, [sp, #16]
 8005572:	430b      	orrs	r3, r1
 8005574:	d122      	bne.n	80055bc <_dtoa_r+0xabc>
 8005576:	2a00      	cmp	r2, #0
 8005578:	ddee      	ble.n	8005558 <_dtoa_r+0xa58>
 800557a:	ee18 1a10 	vmov	r1, s16
 800557e:	2201      	movs	r2, #1
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fae9 	bl	8005b58 <__lshift>
 8005586:	4631      	mov	r1, r6
 8005588:	ee08 0a10 	vmov	s16, r0
 800558c:	f000 fb54 	bl	8005c38 <__mcmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	dc03      	bgt.n	800559c <_dtoa_r+0xa9c>
 8005594:	d1e0      	bne.n	8005558 <_dtoa_r+0xa58>
 8005596:	f01a 0f01 	tst.w	sl, #1
 800559a:	d0dd      	beq.n	8005558 <_dtoa_r+0xa58>
 800559c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80055a0:	d1d7      	bne.n	8005552 <_dtoa_r+0xa52>
 80055a2:	2339      	movs	r3, #57	; 0x39
 80055a4:	f88b 3000 	strb.w	r3, [fp]
 80055a8:	462b      	mov	r3, r5
 80055aa:	461d      	mov	r5, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055b2:	2a39      	cmp	r2, #57	; 0x39
 80055b4:	d071      	beq.n	800569a <_dtoa_r+0xb9a>
 80055b6:	3201      	adds	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e746      	b.n	800544a <_dtoa_r+0x94a>
 80055bc:	2a00      	cmp	r2, #0
 80055be:	dd07      	ble.n	80055d0 <_dtoa_r+0xad0>
 80055c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80055c4:	d0ed      	beq.n	80055a2 <_dtoa_r+0xaa2>
 80055c6:	f10a 0301 	add.w	r3, sl, #1
 80055ca:	f88b 3000 	strb.w	r3, [fp]
 80055ce:	e73c      	b.n	800544a <_dtoa_r+0x94a>
 80055d0:	9b05      	ldr	r3, [sp, #20]
 80055d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80055d6:	4599      	cmp	r9, r3
 80055d8:	d047      	beq.n	800566a <_dtoa_r+0xb6a>
 80055da:	ee18 1a10 	vmov	r1, s16
 80055de:	2300      	movs	r3, #0
 80055e0:	220a      	movs	r2, #10
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 f908 	bl	80057f8 <__multadd>
 80055e8:	45b8      	cmp	r8, r7
 80055ea:	ee08 0a10 	vmov	s16, r0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	f04f 020a 	mov.w	r2, #10
 80055f6:	4641      	mov	r1, r8
 80055f8:	4620      	mov	r0, r4
 80055fa:	d106      	bne.n	800560a <_dtoa_r+0xb0a>
 80055fc:	f000 f8fc 	bl	80057f8 <__multadd>
 8005600:	4680      	mov	r8, r0
 8005602:	4607      	mov	r7, r0
 8005604:	f109 0901 	add.w	r9, r9, #1
 8005608:	e772      	b.n	80054f0 <_dtoa_r+0x9f0>
 800560a:	f000 f8f5 	bl	80057f8 <__multadd>
 800560e:	4639      	mov	r1, r7
 8005610:	4680      	mov	r8, r0
 8005612:	2300      	movs	r3, #0
 8005614:	220a      	movs	r2, #10
 8005616:	4620      	mov	r0, r4
 8005618:	f000 f8ee 	bl	80057f8 <__multadd>
 800561c:	4607      	mov	r7, r0
 800561e:	e7f1      	b.n	8005604 <_dtoa_r+0xb04>
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	9302      	str	r3, [sp, #8]
 8005624:	9d01      	ldr	r5, [sp, #4]
 8005626:	ee18 0a10 	vmov	r0, s16
 800562a:	4631      	mov	r1, r6
 800562c:	f7ff f9da 	bl	80049e4 <quorem>
 8005630:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005634:	9b01      	ldr	r3, [sp, #4]
 8005636:	f805 ab01 	strb.w	sl, [r5], #1
 800563a:	1aea      	subs	r2, r5, r3
 800563c:	9b02      	ldr	r3, [sp, #8]
 800563e:	4293      	cmp	r3, r2
 8005640:	dd09      	ble.n	8005656 <_dtoa_r+0xb56>
 8005642:	ee18 1a10 	vmov	r1, s16
 8005646:	2300      	movs	r3, #0
 8005648:	220a      	movs	r2, #10
 800564a:	4620      	mov	r0, r4
 800564c:	f000 f8d4 	bl	80057f8 <__multadd>
 8005650:	ee08 0a10 	vmov	s16, r0
 8005654:	e7e7      	b.n	8005626 <_dtoa_r+0xb26>
 8005656:	9b02      	ldr	r3, [sp, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	bfc8      	it	gt
 800565c:	461d      	movgt	r5, r3
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	bfd8      	it	le
 8005662:	2501      	movle	r5, #1
 8005664:	441d      	add	r5, r3
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	ee18 1a10 	vmov	r1, s16
 800566e:	2201      	movs	r2, #1
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fa71 	bl	8005b58 <__lshift>
 8005676:	4631      	mov	r1, r6
 8005678:	ee08 0a10 	vmov	s16, r0
 800567c:	f000 fadc 	bl	8005c38 <__mcmp>
 8005680:	2800      	cmp	r0, #0
 8005682:	dc91      	bgt.n	80055a8 <_dtoa_r+0xaa8>
 8005684:	d102      	bne.n	800568c <_dtoa_r+0xb8c>
 8005686:	f01a 0f01 	tst.w	sl, #1
 800568a:	d18d      	bne.n	80055a8 <_dtoa_r+0xaa8>
 800568c:	462b      	mov	r3, r5
 800568e:	461d      	mov	r5, r3
 8005690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005694:	2a30      	cmp	r2, #48	; 0x30
 8005696:	d0fa      	beq.n	800568e <_dtoa_r+0xb8e>
 8005698:	e6d7      	b.n	800544a <_dtoa_r+0x94a>
 800569a:	9a01      	ldr	r2, [sp, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d184      	bne.n	80055aa <_dtoa_r+0xaaa>
 80056a0:	9b00      	ldr	r3, [sp, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	2331      	movs	r3, #49	; 0x31
 80056a8:	7013      	strb	r3, [r2, #0]
 80056aa:	e6ce      	b.n	800544a <_dtoa_r+0x94a>
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <_dtoa_r+0xbd4>)
 80056ae:	f7ff ba95 	b.w	8004bdc <_dtoa_r+0xdc>
 80056b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f47f aa6e 	bne.w	8004b96 <_dtoa_r+0x96>
 80056ba:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <_dtoa_r+0xbd8>)
 80056bc:	f7ff ba8e 	b.w	8004bdc <_dtoa_r+0xdc>
 80056c0:	9b02      	ldr	r3, [sp, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	dcae      	bgt.n	8005624 <_dtoa_r+0xb24>
 80056c6:	9b06      	ldr	r3, [sp, #24]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	f73f aea8 	bgt.w	800541e <_dtoa_r+0x91e>
 80056ce:	e7a9      	b.n	8005624 <_dtoa_r+0xb24>
 80056d0:	08006ded 	.word	0x08006ded
 80056d4:	08006bb0 	.word	0x08006bb0
 80056d8:	08006d85 	.word	0x08006d85

080056dc <fiprintf>:
 80056dc:	b40e      	push	{r1, r2, r3}
 80056de:	b503      	push	{r0, r1, lr}
 80056e0:	4601      	mov	r1, r0
 80056e2:	ab03      	add	r3, sp, #12
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <fiprintf+0x20>)
 80056e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ea:	6800      	ldr	r0, [r0, #0]
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	f000 fcc5 	bl	800607c <_vfiprintf_r>
 80056f2:	b002      	add	sp, #8
 80056f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056f8:	b003      	add	sp, #12
 80056fa:	4770      	bx	lr
 80056fc:	2000000c 	.word	0x2000000c

08005700 <_localeconv_r>:
 8005700:	4800      	ldr	r0, [pc, #0]	; (8005704 <_localeconv_r+0x4>)
 8005702:	4770      	bx	lr
 8005704:	20000160 	.word	0x20000160

08005708 <malloc>:
 8005708:	4b02      	ldr	r3, [pc, #8]	; (8005714 <malloc+0xc>)
 800570a:	4601      	mov	r1, r0
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	f000 bc17 	b.w	8005f40 <_malloc_r>
 8005712:	bf00      	nop
 8005714:	2000000c 	.word	0x2000000c

08005718 <memcpy>:
 8005718:	440a      	add	r2, r1
 800571a:	4291      	cmp	r1, r2
 800571c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005720:	d100      	bne.n	8005724 <memcpy+0xc>
 8005722:	4770      	bx	lr
 8005724:	b510      	push	{r4, lr}
 8005726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800572a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800572e:	4291      	cmp	r1, r2
 8005730:	d1f9      	bne.n	8005726 <memcpy+0xe>
 8005732:	bd10      	pop	{r4, pc}

08005734 <_Balloc>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005738:	4604      	mov	r4, r0
 800573a:	460d      	mov	r5, r1
 800573c:	b976      	cbnz	r6, 800575c <_Balloc+0x28>
 800573e:	2010      	movs	r0, #16
 8005740:	f7ff ffe2 	bl	8005708 <malloc>
 8005744:	4602      	mov	r2, r0
 8005746:	6260      	str	r0, [r4, #36]	; 0x24
 8005748:	b920      	cbnz	r0, 8005754 <_Balloc+0x20>
 800574a:	4b18      	ldr	r3, [pc, #96]	; (80057ac <_Balloc+0x78>)
 800574c:	4818      	ldr	r0, [pc, #96]	; (80057b0 <_Balloc+0x7c>)
 800574e:	2166      	movs	r1, #102	; 0x66
 8005750:	f7ff f92a 	bl	80049a8 <__assert_func>
 8005754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005758:	6006      	str	r6, [r0, #0]
 800575a:	60c6      	str	r6, [r0, #12]
 800575c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800575e:	68f3      	ldr	r3, [r6, #12]
 8005760:	b183      	cbz	r3, 8005784 <_Balloc+0x50>
 8005762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800576a:	b9b8      	cbnz	r0, 800579c <_Balloc+0x68>
 800576c:	2101      	movs	r1, #1
 800576e:	fa01 f605 	lsl.w	r6, r1, r5
 8005772:	1d72      	adds	r2, r6, #5
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	4620      	mov	r0, r4
 8005778:	f000 fb60 	bl	8005e3c <_calloc_r>
 800577c:	b160      	cbz	r0, 8005798 <_Balloc+0x64>
 800577e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005782:	e00e      	b.n	80057a2 <_Balloc+0x6e>
 8005784:	2221      	movs	r2, #33	; 0x21
 8005786:	2104      	movs	r1, #4
 8005788:	4620      	mov	r0, r4
 800578a:	f000 fb57 	bl	8005e3c <_calloc_r>
 800578e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005790:	60f0      	str	r0, [r6, #12]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e4      	bne.n	8005762 <_Balloc+0x2e>
 8005798:	2000      	movs	r0, #0
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	6802      	ldr	r2, [r0, #0]
 800579e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057a2:	2300      	movs	r3, #0
 80057a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057a8:	e7f7      	b.n	800579a <_Balloc+0x66>
 80057aa:	bf00      	nop
 80057ac:	08006bd4 	.word	0x08006bd4
 80057b0:	08006dfe 	.word	0x08006dfe

080057b4 <_Bfree>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057b8:	4605      	mov	r5, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	b976      	cbnz	r6, 80057dc <_Bfree+0x28>
 80057be:	2010      	movs	r0, #16
 80057c0:	f7ff ffa2 	bl	8005708 <malloc>
 80057c4:	4602      	mov	r2, r0
 80057c6:	6268      	str	r0, [r5, #36]	; 0x24
 80057c8:	b920      	cbnz	r0, 80057d4 <_Bfree+0x20>
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <_Bfree+0x3c>)
 80057cc:	4809      	ldr	r0, [pc, #36]	; (80057f4 <_Bfree+0x40>)
 80057ce:	218a      	movs	r1, #138	; 0x8a
 80057d0:	f7ff f8ea 	bl	80049a8 <__assert_func>
 80057d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057d8:	6006      	str	r6, [r0, #0]
 80057da:	60c6      	str	r6, [r0, #12]
 80057dc:	b13c      	cbz	r4, 80057ee <_Bfree+0x3a>
 80057de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057e0:	6862      	ldr	r2, [r4, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057e8:	6021      	str	r1, [r4, #0]
 80057ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	08006bd4 	.word	0x08006bd4
 80057f4:	08006dfe 	.word	0x08006dfe

080057f8 <__multadd>:
 80057f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fc:	690d      	ldr	r5, [r1, #16]
 80057fe:	4607      	mov	r7, r0
 8005800:	460c      	mov	r4, r1
 8005802:	461e      	mov	r6, r3
 8005804:	f101 0c14 	add.w	ip, r1, #20
 8005808:	2000      	movs	r0, #0
 800580a:	f8dc 3000 	ldr.w	r3, [ip]
 800580e:	b299      	uxth	r1, r3
 8005810:	fb02 6101 	mla	r1, r2, r1, r6
 8005814:	0c1e      	lsrs	r6, r3, #16
 8005816:	0c0b      	lsrs	r3, r1, #16
 8005818:	fb02 3306 	mla	r3, r2, r6, r3
 800581c:	b289      	uxth	r1, r1
 800581e:	3001      	adds	r0, #1
 8005820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005824:	4285      	cmp	r5, r0
 8005826:	f84c 1b04 	str.w	r1, [ip], #4
 800582a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800582e:	dcec      	bgt.n	800580a <__multadd+0x12>
 8005830:	b30e      	cbz	r6, 8005876 <__multadd+0x7e>
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	42ab      	cmp	r3, r5
 8005836:	dc19      	bgt.n	800586c <__multadd+0x74>
 8005838:	6861      	ldr	r1, [r4, #4]
 800583a:	4638      	mov	r0, r7
 800583c:	3101      	adds	r1, #1
 800583e:	f7ff ff79 	bl	8005734 <_Balloc>
 8005842:	4680      	mov	r8, r0
 8005844:	b928      	cbnz	r0, 8005852 <__multadd+0x5a>
 8005846:	4602      	mov	r2, r0
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <__multadd+0x84>)
 800584a:	480d      	ldr	r0, [pc, #52]	; (8005880 <__multadd+0x88>)
 800584c:	21b5      	movs	r1, #181	; 0xb5
 800584e:	f7ff f8ab 	bl	80049a8 <__assert_func>
 8005852:	6922      	ldr	r2, [r4, #16]
 8005854:	3202      	adds	r2, #2
 8005856:	f104 010c 	add.w	r1, r4, #12
 800585a:	0092      	lsls	r2, r2, #2
 800585c:	300c      	adds	r0, #12
 800585e:	f7ff ff5b 	bl	8005718 <memcpy>
 8005862:	4621      	mov	r1, r4
 8005864:	4638      	mov	r0, r7
 8005866:	f7ff ffa5 	bl	80057b4 <_Bfree>
 800586a:	4644      	mov	r4, r8
 800586c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005870:	3501      	adds	r5, #1
 8005872:	615e      	str	r6, [r3, #20]
 8005874:	6125      	str	r5, [r4, #16]
 8005876:	4620      	mov	r0, r4
 8005878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800587c:	08006ded 	.word	0x08006ded
 8005880:	08006dfe 	.word	0x08006dfe

08005884 <__hi0bits>:
 8005884:	0c03      	lsrs	r3, r0, #16
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	b9d3      	cbnz	r3, 80058c0 <__hi0bits+0x3c>
 800588a:	0400      	lsls	r0, r0, #16
 800588c:	2310      	movs	r3, #16
 800588e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005892:	bf04      	itt	eq
 8005894:	0200      	lsleq	r0, r0, #8
 8005896:	3308      	addeq	r3, #8
 8005898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800589c:	bf04      	itt	eq
 800589e:	0100      	lsleq	r0, r0, #4
 80058a0:	3304      	addeq	r3, #4
 80058a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80058a6:	bf04      	itt	eq
 80058a8:	0080      	lsleq	r0, r0, #2
 80058aa:	3302      	addeq	r3, #2
 80058ac:	2800      	cmp	r0, #0
 80058ae:	db05      	blt.n	80058bc <__hi0bits+0x38>
 80058b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80058b4:	f103 0301 	add.w	r3, r3, #1
 80058b8:	bf08      	it	eq
 80058ba:	2320      	moveq	r3, #32
 80058bc:	4618      	mov	r0, r3
 80058be:	4770      	bx	lr
 80058c0:	2300      	movs	r3, #0
 80058c2:	e7e4      	b.n	800588e <__hi0bits+0xa>

080058c4 <__lo0bits>:
 80058c4:	6803      	ldr	r3, [r0, #0]
 80058c6:	f013 0207 	ands.w	r2, r3, #7
 80058ca:	4601      	mov	r1, r0
 80058cc:	d00b      	beq.n	80058e6 <__lo0bits+0x22>
 80058ce:	07da      	lsls	r2, r3, #31
 80058d0:	d423      	bmi.n	800591a <__lo0bits+0x56>
 80058d2:	0798      	lsls	r0, r3, #30
 80058d4:	bf49      	itett	mi
 80058d6:	085b      	lsrmi	r3, r3, #1
 80058d8:	089b      	lsrpl	r3, r3, #2
 80058da:	2001      	movmi	r0, #1
 80058dc:	600b      	strmi	r3, [r1, #0]
 80058de:	bf5c      	itt	pl
 80058e0:	600b      	strpl	r3, [r1, #0]
 80058e2:	2002      	movpl	r0, #2
 80058e4:	4770      	bx	lr
 80058e6:	b298      	uxth	r0, r3
 80058e8:	b9a8      	cbnz	r0, 8005916 <__lo0bits+0x52>
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	2010      	movs	r0, #16
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	b90a      	cbnz	r2, 80058f6 <__lo0bits+0x32>
 80058f2:	3008      	adds	r0, #8
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	071a      	lsls	r2, r3, #28
 80058f8:	bf04      	itt	eq
 80058fa:	091b      	lsreq	r3, r3, #4
 80058fc:	3004      	addeq	r0, #4
 80058fe:	079a      	lsls	r2, r3, #30
 8005900:	bf04      	itt	eq
 8005902:	089b      	lsreq	r3, r3, #2
 8005904:	3002      	addeq	r0, #2
 8005906:	07da      	lsls	r2, r3, #31
 8005908:	d403      	bmi.n	8005912 <__lo0bits+0x4e>
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	f100 0001 	add.w	r0, r0, #1
 8005910:	d005      	beq.n	800591e <__lo0bits+0x5a>
 8005912:	600b      	str	r3, [r1, #0]
 8005914:	4770      	bx	lr
 8005916:	4610      	mov	r0, r2
 8005918:	e7e9      	b.n	80058ee <__lo0bits+0x2a>
 800591a:	2000      	movs	r0, #0
 800591c:	4770      	bx	lr
 800591e:	2020      	movs	r0, #32
 8005920:	4770      	bx	lr
	...

08005924 <__i2b>:
 8005924:	b510      	push	{r4, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	2101      	movs	r1, #1
 800592a:	f7ff ff03 	bl	8005734 <_Balloc>
 800592e:	4602      	mov	r2, r0
 8005930:	b928      	cbnz	r0, 800593e <__i2b+0x1a>
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <__i2b+0x24>)
 8005934:	4805      	ldr	r0, [pc, #20]	; (800594c <__i2b+0x28>)
 8005936:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800593a:	f7ff f835 	bl	80049a8 <__assert_func>
 800593e:	2301      	movs	r3, #1
 8005940:	6144      	str	r4, [r0, #20]
 8005942:	6103      	str	r3, [r0, #16]
 8005944:	bd10      	pop	{r4, pc}
 8005946:	bf00      	nop
 8005948:	08006ded 	.word	0x08006ded
 800594c:	08006dfe 	.word	0x08006dfe

08005950 <__multiply>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	4691      	mov	r9, r2
 8005956:	690a      	ldr	r2, [r1, #16]
 8005958:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800595c:	429a      	cmp	r2, r3
 800595e:	bfb8      	it	lt
 8005960:	460b      	movlt	r3, r1
 8005962:	460c      	mov	r4, r1
 8005964:	bfbc      	itt	lt
 8005966:	464c      	movlt	r4, r9
 8005968:	4699      	movlt	r9, r3
 800596a:	6927      	ldr	r7, [r4, #16]
 800596c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005970:	68a3      	ldr	r3, [r4, #8]
 8005972:	6861      	ldr	r1, [r4, #4]
 8005974:	eb07 060a 	add.w	r6, r7, sl
 8005978:	42b3      	cmp	r3, r6
 800597a:	b085      	sub	sp, #20
 800597c:	bfb8      	it	lt
 800597e:	3101      	addlt	r1, #1
 8005980:	f7ff fed8 	bl	8005734 <_Balloc>
 8005984:	b930      	cbnz	r0, 8005994 <__multiply+0x44>
 8005986:	4602      	mov	r2, r0
 8005988:	4b44      	ldr	r3, [pc, #272]	; (8005a9c <__multiply+0x14c>)
 800598a:	4845      	ldr	r0, [pc, #276]	; (8005aa0 <__multiply+0x150>)
 800598c:	f240 115d 	movw	r1, #349	; 0x15d
 8005990:	f7ff f80a 	bl	80049a8 <__assert_func>
 8005994:	f100 0514 	add.w	r5, r0, #20
 8005998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800599c:	462b      	mov	r3, r5
 800599e:	2200      	movs	r2, #0
 80059a0:	4543      	cmp	r3, r8
 80059a2:	d321      	bcc.n	80059e8 <__multiply+0x98>
 80059a4:	f104 0314 	add.w	r3, r4, #20
 80059a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80059ac:	f109 0314 	add.w	r3, r9, #20
 80059b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80059b4:	9202      	str	r2, [sp, #8]
 80059b6:	1b3a      	subs	r2, r7, r4
 80059b8:	3a15      	subs	r2, #21
 80059ba:	f022 0203 	bic.w	r2, r2, #3
 80059be:	3204      	adds	r2, #4
 80059c0:	f104 0115 	add.w	r1, r4, #21
 80059c4:	428f      	cmp	r7, r1
 80059c6:	bf38      	it	cc
 80059c8:	2204      	movcc	r2, #4
 80059ca:	9201      	str	r2, [sp, #4]
 80059cc:	9a02      	ldr	r2, [sp, #8]
 80059ce:	9303      	str	r3, [sp, #12]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d80c      	bhi.n	80059ee <__multiply+0x9e>
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	dd03      	ble.n	80059e0 <__multiply+0x90>
 80059d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d05a      	beq.n	8005a96 <__multiply+0x146>
 80059e0:	6106      	str	r6, [r0, #16]
 80059e2:	b005      	add	sp, #20
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e8:	f843 2b04 	str.w	r2, [r3], #4
 80059ec:	e7d8      	b.n	80059a0 <__multiply+0x50>
 80059ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80059f2:	f1ba 0f00 	cmp.w	sl, #0
 80059f6:	d024      	beq.n	8005a42 <__multiply+0xf2>
 80059f8:	f104 0e14 	add.w	lr, r4, #20
 80059fc:	46a9      	mov	r9, r5
 80059fe:	f04f 0c00 	mov.w	ip, #0
 8005a02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005a06:	f8d9 1000 	ldr.w	r1, [r9]
 8005a0a:	fa1f fb82 	uxth.w	fp, r2
 8005a0e:	b289      	uxth	r1, r1
 8005a10:	fb0a 110b 	mla	r1, sl, fp, r1
 8005a14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005a18:	f8d9 2000 	ldr.w	r2, [r9]
 8005a1c:	4461      	add	r1, ip
 8005a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a22:	fb0a c20b 	mla	r2, sl, fp, ip
 8005a26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005a2a:	b289      	uxth	r1, r1
 8005a2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a30:	4577      	cmp	r7, lr
 8005a32:	f849 1b04 	str.w	r1, [r9], #4
 8005a36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a3a:	d8e2      	bhi.n	8005a02 <__multiply+0xb2>
 8005a3c:	9a01      	ldr	r2, [sp, #4]
 8005a3e:	f845 c002 	str.w	ip, [r5, r2]
 8005a42:	9a03      	ldr	r2, [sp, #12]
 8005a44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	f1b9 0f00 	cmp.w	r9, #0
 8005a4e:	d020      	beq.n	8005a92 <__multiply+0x142>
 8005a50:	6829      	ldr	r1, [r5, #0]
 8005a52:	f104 0c14 	add.w	ip, r4, #20
 8005a56:	46ae      	mov	lr, r5
 8005a58:	f04f 0a00 	mov.w	sl, #0
 8005a5c:	f8bc b000 	ldrh.w	fp, [ip]
 8005a60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005a64:	fb09 220b 	mla	r2, r9, fp, r2
 8005a68:	4492      	add	sl, r2
 8005a6a:	b289      	uxth	r1, r1
 8005a6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005a70:	f84e 1b04 	str.w	r1, [lr], #4
 8005a74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005a78:	f8be 1000 	ldrh.w	r1, [lr]
 8005a7c:	0c12      	lsrs	r2, r2, #16
 8005a7e:	fb09 1102 	mla	r1, r9, r2, r1
 8005a82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005a86:	4567      	cmp	r7, ip
 8005a88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a8c:	d8e6      	bhi.n	8005a5c <__multiply+0x10c>
 8005a8e:	9a01      	ldr	r2, [sp, #4]
 8005a90:	50a9      	str	r1, [r5, r2]
 8005a92:	3504      	adds	r5, #4
 8005a94:	e79a      	b.n	80059cc <__multiply+0x7c>
 8005a96:	3e01      	subs	r6, #1
 8005a98:	e79c      	b.n	80059d4 <__multiply+0x84>
 8005a9a:	bf00      	nop
 8005a9c:	08006ded 	.word	0x08006ded
 8005aa0:	08006dfe 	.word	0x08006dfe

08005aa4 <__pow5mult>:
 8005aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa8:	4615      	mov	r5, r2
 8005aaa:	f012 0203 	ands.w	r2, r2, #3
 8005aae:	4606      	mov	r6, r0
 8005ab0:	460f      	mov	r7, r1
 8005ab2:	d007      	beq.n	8005ac4 <__pow5mult+0x20>
 8005ab4:	4c25      	ldr	r4, [pc, #148]	; (8005b4c <__pow5mult+0xa8>)
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005abe:	f7ff fe9b 	bl	80057f8 <__multadd>
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	10ad      	asrs	r5, r5, #2
 8005ac6:	d03d      	beq.n	8005b44 <__pow5mult+0xa0>
 8005ac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005aca:	b97c      	cbnz	r4, 8005aec <__pow5mult+0x48>
 8005acc:	2010      	movs	r0, #16
 8005ace:	f7ff fe1b 	bl	8005708 <malloc>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6270      	str	r0, [r6, #36]	; 0x24
 8005ad6:	b928      	cbnz	r0, 8005ae4 <__pow5mult+0x40>
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <__pow5mult+0xac>)
 8005ada:	481e      	ldr	r0, [pc, #120]	; (8005b54 <__pow5mult+0xb0>)
 8005adc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ae0:	f7fe ff62 	bl	80049a8 <__assert_func>
 8005ae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ae8:	6004      	str	r4, [r0, #0]
 8005aea:	60c4      	str	r4, [r0, #12]
 8005aec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005af0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005af4:	b94c      	cbnz	r4, 8005b0a <__pow5mult+0x66>
 8005af6:	f240 2171 	movw	r1, #625	; 0x271
 8005afa:	4630      	mov	r0, r6
 8005afc:	f7ff ff12 	bl	8005924 <__i2b>
 8005b00:	2300      	movs	r3, #0
 8005b02:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b06:	4604      	mov	r4, r0
 8005b08:	6003      	str	r3, [r0, #0]
 8005b0a:	f04f 0900 	mov.w	r9, #0
 8005b0e:	07eb      	lsls	r3, r5, #31
 8005b10:	d50a      	bpl.n	8005b28 <__pow5mult+0x84>
 8005b12:	4639      	mov	r1, r7
 8005b14:	4622      	mov	r2, r4
 8005b16:	4630      	mov	r0, r6
 8005b18:	f7ff ff1a 	bl	8005950 <__multiply>
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4680      	mov	r8, r0
 8005b20:	4630      	mov	r0, r6
 8005b22:	f7ff fe47 	bl	80057b4 <_Bfree>
 8005b26:	4647      	mov	r7, r8
 8005b28:	106d      	asrs	r5, r5, #1
 8005b2a:	d00b      	beq.n	8005b44 <__pow5mult+0xa0>
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	b938      	cbnz	r0, 8005b40 <__pow5mult+0x9c>
 8005b30:	4622      	mov	r2, r4
 8005b32:	4621      	mov	r1, r4
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff ff0b 	bl	8005950 <__multiply>
 8005b3a:	6020      	str	r0, [r4, #0]
 8005b3c:	f8c0 9000 	str.w	r9, [r0]
 8005b40:	4604      	mov	r4, r0
 8005b42:	e7e4      	b.n	8005b0e <__pow5mult+0x6a>
 8005b44:	4638      	mov	r0, r7
 8005b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08006f50 	.word	0x08006f50
 8005b50:	08006bd4 	.word	0x08006bd4
 8005b54:	08006dfe 	.word	0x08006dfe

08005b58 <__lshift>:
 8005b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	6849      	ldr	r1, [r1, #4]
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b66:	68a3      	ldr	r3, [r4, #8]
 8005b68:	4607      	mov	r7, r0
 8005b6a:	4691      	mov	r9, r2
 8005b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b70:	f108 0601 	add.w	r6, r8, #1
 8005b74:	42b3      	cmp	r3, r6
 8005b76:	db0b      	blt.n	8005b90 <__lshift+0x38>
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff fddb 	bl	8005734 <_Balloc>
 8005b7e:	4605      	mov	r5, r0
 8005b80:	b948      	cbnz	r0, 8005b96 <__lshift+0x3e>
 8005b82:	4602      	mov	r2, r0
 8005b84:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <__lshift+0xd8>)
 8005b86:	482b      	ldr	r0, [pc, #172]	; (8005c34 <__lshift+0xdc>)
 8005b88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b8c:	f7fe ff0c 	bl	80049a8 <__assert_func>
 8005b90:	3101      	adds	r1, #1
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	e7ee      	b.n	8005b74 <__lshift+0x1c>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f100 0114 	add.w	r1, r0, #20
 8005b9c:	f100 0210 	add.w	r2, r0, #16
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	4553      	cmp	r3, sl
 8005ba4:	db37      	blt.n	8005c16 <__lshift+0xbe>
 8005ba6:	6920      	ldr	r0, [r4, #16]
 8005ba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bac:	f104 0314 	add.w	r3, r4, #20
 8005bb0:	f019 091f 	ands.w	r9, r9, #31
 8005bb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005bbc:	d02f      	beq.n	8005c1e <__lshift+0xc6>
 8005bbe:	f1c9 0e20 	rsb	lr, r9, #32
 8005bc2:	468a      	mov	sl, r1
 8005bc4:	f04f 0c00 	mov.w	ip, #0
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	fa02 f209 	lsl.w	r2, r2, r9
 8005bce:	ea42 020c 	orr.w	r2, r2, ip
 8005bd2:	f84a 2b04 	str.w	r2, [sl], #4
 8005bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bda:	4298      	cmp	r0, r3
 8005bdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005be0:	d8f2      	bhi.n	8005bc8 <__lshift+0x70>
 8005be2:	1b03      	subs	r3, r0, r4
 8005be4:	3b15      	subs	r3, #21
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	3304      	adds	r3, #4
 8005bec:	f104 0215 	add.w	r2, r4, #21
 8005bf0:	4290      	cmp	r0, r2
 8005bf2:	bf38      	it	cc
 8005bf4:	2304      	movcc	r3, #4
 8005bf6:	f841 c003 	str.w	ip, [r1, r3]
 8005bfa:	f1bc 0f00 	cmp.w	ip, #0
 8005bfe:	d001      	beq.n	8005c04 <__lshift+0xac>
 8005c00:	f108 0602 	add.w	r6, r8, #2
 8005c04:	3e01      	subs	r6, #1
 8005c06:	4638      	mov	r0, r7
 8005c08:	612e      	str	r6, [r5, #16]
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	f7ff fdd2 	bl	80057b4 <_Bfree>
 8005c10:	4628      	mov	r0, r5
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	e7c1      	b.n	8005ba2 <__lshift+0x4a>
 8005c1e:	3904      	subs	r1, #4
 8005c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c28:	4298      	cmp	r0, r3
 8005c2a:	d8f9      	bhi.n	8005c20 <__lshift+0xc8>
 8005c2c:	e7ea      	b.n	8005c04 <__lshift+0xac>
 8005c2e:	bf00      	nop
 8005c30:	08006ded 	.word	0x08006ded
 8005c34:	08006dfe 	.word	0x08006dfe

08005c38 <__mcmp>:
 8005c38:	b530      	push	{r4, r5, lr}
 8005c3a:	6902      	ldr	r2, [r0, #16]
 8005c3c:	690c      	ldr	r4, [r1, #16]
 8005c3e:	1b12      	subs	r2, r2, r4
 8005c40:	d10e      	bne.n	8005c60 <__mcmp+0x28>
 8005c42:	f100 0314 	add.w	r3, r0, #20
 8005c46:	3114      	adds	r1, #20
 8005c48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005c4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005c50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005c54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	d003      	beq.n	8005c64 <__mcmp+0x2c>
 8005c5c:	d305      	bcc.n	8005c6a <__mcmp+0x32>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4610      	mov	r0, r2
 8005c62:	bd30      	pop	{r4, r5, pc}
 8005c64:	4283      	cmp	r3, r0
 8005c66:	d3f3      	bcc.n	8005c50 <__mcmp+0x18>
 8005c68:	e7fa      	b.n	8005c60 <__mcmp+0x28>
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6e:	e7f7      	b.n	8005c60 <__mcmp+0x28>

08005c70 <__mdiff>:
 8005c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	460c      	mov	r4, r1
 8005c76:	4606      	mov	r6, r0
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4690      	mov	r8, r2
 8005c7e:	f7ff ffdb 	bl	8005c38 <__mcmp>
 8005c82:	1e05      	subs	r5, r0, #0
 8005c84:	d110      	bne.n	8005ca8 <__mdiff+0x38>
 8005c86:	4629      	mov	r1, r5
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff fd53 	bl	8005734 <_Balloc>
 8005c8e:	b930      	cbnz	r0, 8005c9e <__mdiff+0x2e>
 8005c90:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <__mdiff+0x10c>)
 8005c92:	4602      	mov	r2, r0
 8005c94:	f240 2132 	movw	r1, #562	; 0x232
 8005c98:	4839      	ldr	r0, [pc, #228]	; (8005d80 <__mdiff+0x110>)
 8005c9a:	f7fe fe85 	bl	80049a8 <__assert_func>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	bfa4      	itt	ge
 8005caa:	4643      	movge	r3, r8
 8005cac:	46a0      	movge	r8, r4
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005cb4:	bfa6      	itte	ge
 8005cb6:	461c      	movge	r4, r3
 8005cb8:	2500      	movge	r5, #0
 8005cba:	2501      	movlt	r5, #1
 8005cbc:	f7ff fd3a 	bl	8005734 <_Balloc>
 8005cc0:	b920      	cbnz	r0, 8005ccc <__mdiff+0x5c>
 8005cc2:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <__mdiff+0x10c>)
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005cca:	e7e5      	b.n	8005c98 <__mdiff+0x28>
 8005ccc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005cd0:	6926      	ldr	r6, [r4, #16]
 8005cd2:	60c5      	str	r5, [r0, #12]
 8005cd4:	f104 0914 	add.w	r9, r4, #20
 8005cd8:	f108 0514 	add.w	r5, r8, #20
 8005cdc:	f100 0e14 	add.w	lr, r0, #20
 8005ce0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ce4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ce8:	f108 0210 	add.w	r2, r8, #16
 8005cec:	46f2      	mov	sl, lr
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005cf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005cf8:	fa1f f883 	uxth.w	r8, r3
 8005cfc:	fa11 f18b 	uxtah	r1, r1, fp
 8005d00:	0c1b      	lsrs	r3, r3, #16
 8005d02:	eba1 0808 	sub.w	r8, r1, r8
 8005d06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d0e:	fa1f f888 	uxth.w	r8, r8
 8005d12:	1419      	asrs	r1, r3, #16
 8005d14:	454e      	cmp	r6, r9
 8005d16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d1a:	f84a 3b04 	str.w	r3, [sl], #4
 8005d1e:	d8e7      	bhi.n	8005cf0 <__mdiff+0x80>
 8005d20:	1b33      	subs	r3, r6, r4
 8005d22:	3b15      	subs	r3, #21
 8005d24:	f023 0303 	bic.w	r3, r3, #3
 8005d28:	3304      	adds	r3, #4
 8005d2a:	3415      	adds	r4, #21
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	bf38      	it	cc
 8005d30:	2304      	movcc	r3, #4
 8005d32:	441d      	add	r5, r3
 8005d34:	4473      	add	r3, lr
 8005d36:	469e      	mov	lr, r3
 8005d38:	462e      	mov	r6, r5
 8005d3a:	4566      	cmp	r6, ip
 8005d3c:	d30e      	bcc.n	8005d5c <__mdiff+0xec>
 8005d3e:	f10c 0203 	add.w	r2, ip, #3
 8005d42:	1b52      	subs	r2, r2, r5
 8005d44:	f022 0203 	bic.w	r2, r2, #3
 8005d48:	3d03      	subs	r5, #3
 8005d4a:	45ac      	cmp	ip, r5
 8005d4c:	bf38      	it	cc
 8005d4e:	2200      	movcc	r2, #0
 8005d50:	441a      	add	r2, r3
 8005d52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005d56:	b17b      	cbz	r3, 8005d78 <__mdiff+0x108>
 8005d58:	6107      	str	r7, [r0, #16]
 8005d5a:	e7a3      	b.n	8005ca4 <__mdiff+0x34>
 8005d5c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005d60:	fa11 f288 	uxtah	r2, r1, r8
 8005d64:	1414      	asrs	r4, r2, #16
 8005d66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005d6a:	b292      	uxth	r2, r2
 8005d6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005d70:	f84e 2b04 	str.w	r2, [lr], #4
 8005d74:	1421      	asrs	r1, r4, #16
 8005d76:	e7e0      	b.n	8005d3a <__mdiff+0xca>
 8005d78:	3f01      	subs	r7, #1
 8005d7a:	e7ea      	b.n	8005d52 <__mdiff+0xe2>
 8005d7c:	08006ded 	.word	0x08006ded
 8005d80:	08006dfe 	.word	0x08006dfe

08005d84 <__d2b>:
 8005d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d88:	4689      	mov	r9, r1
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	ec57 6b10 	vmov	r6, r7, d0
 8005d90:	4690      	mov	r8, r2
 8005d92:	f7ff fccf 	bl	8005734 <_Balloc>
 8005d96:	4604      	mov	r4, r0
 8005d98:	b930      	cbnz	r0, 8005da8 <__d2b+0x24>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <__d2b+0xb0>)
 8005d9e:	4826      	ldr	r0, [pc, #152]	; (8005e38 <__d2b+0xb4>)
 8005da0:	f240 310a 	movw	r1, #778	; 0x30a
 8005da4:	f7fe fe00 	bl	80049a8 <__assert_func>
 8005da8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005dac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005db0:	bb35      	cbnz	r5, 8005e00 <__d2b+0x7c>
 8005db2:	2e00      	cmp	r6, #0
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	d028      	beq.n	8005e0a <__d2b+0x86>
 8005db8:	4668      	mov	r0, sp
 8005dba:	9600      	str	r6, [sp, #0]
 8005dbc:	f7ff fd82 	bl	80058c4 <__lo0bits>
 8005dc0:	9900      	ldr	r1, [sp, #0]
 8005dc2:	b300      	cbz	r0, 8005e06 <__d2b+0x82>
 8005dc4:	9a01      	ldr	r2, [sp, #4]
 8005dc6:	f1c0 0320 	rsb	r3, r0, #32
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	40c2      	lsrs	r2, r0
 8005dd2:	6163      	str	r3, [r4, #20]
 8005dd4:	9201      	str	r2, [sp, #4]
 8005dd6:	9b01      	ldr	r3, [sp, #4]
 8005dd8:	61a3      	str	r3, [r4, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bf14      	ite	ne
 8005dde:	2202      	movne	r2, #2
 8005de0:	2201      	moveq	r2, #1
 8005de2:	6122      	str	r2, [r4, #16]
 8005de4:	b1d5      	cbz	r5, 8005e1c <__d2b+0x98>
 8005de6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005dea:	4405      	add	r5, r0
 8005dec:	f8c9 5000 	str.w	r5, [r9]
 8005df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005df4:	f8c8 0000 	str.w	r0, [r8]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	b003      	add	sp, #12
 8005dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e04:	e7d5      	b.n	8005db2 <__d2b+0x2e>
 8005e06:	6161      	str	r1, [r4, #20]
 8005e08:	e7e5      	b.n	8005dd6 <__d2b+0x52>
 8005e0a:	a801      	add	r0, sp, #4
 8005e0c:	f7ff fd5a 	bl	80058c4 <__lo0bits>
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	6163      	str	r3, [r4, #20]
 8005e14:	2201      	movs	r2, #1
 8005e16:	6122      	str	r2, [r4, #16]
 8005e18:	3020      	adds	r0, #32
 8005e1a:	e7e3      	b.n	8005de4 <__d2b+0x60>
 8005e1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e24:	f8c9 0000 	str.w	r0, [r9]
 8005e28:	6918      	ldr	r0, [r3, #16]
 8005e2a:	f7ff fd2b 	bl	8005884 <__hi0bits>
 8005e2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e32:	e7df      	b.n	8005df4 <__d2b+0x70>
 8005e34:	08006ded 	.word	0x08006ded
 8005e38:	08006dfe 	.word	0x08006dfe

08005e3c <_calloc_r>:
 8005e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e3e:	fba1 2402 	umull	r2, r4, r1, r2
 8005e42:	b94c      	cbnz	r4, 8005e58 <_calloc_r+0x1c>
 8005e44:	4611      	mov	r1, r2
 8005e46:	9201      	str	r2, [sp, #4]
 8005e48:	f000 f87a 	bl	8005f40 <_malloc_r>
 8005e4c:	9a01      	ldr	r2, [sp, #4]
 8005e4e:	4605      	mov	r5, r0
 8005e50:	b930      	cbnz	r0, 8005e60 <_calloc_r+0x24>
 8005e52:	4628      	mov	r0, r5
 8005e54:	b003      	add	sp, #12
 8005e56:	bd30      	pop	{r4, r5, pc}
 8005e58:	220c      	movs	r2, #12
 8005e5a:	6002      	str	r2, [r0, #0]
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	e7f8      	b.n	8005e52 <_calloc_r+0x16>
 8005e60:	4621      	mov	r1, r4
 8005e62:	f7fe f833 	bl	8003ecc <memset>
 8005e66:	e7f4      	b.n	8005e52 <_calloc_r+0x16>

08005e68 <_free_r>:
 8005e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	d044      	beq.n	8005ef8 <_free_r+0x90>
 8005e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e72:	9001      	str	r0, [sp, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f1a1 0404 	sub.w	r4, r1, #4
 8005e7a:	bfb8      	it	lt
 8005e7c:	18e4      	addlt	r4, r4, r3
 8005e7e:	f000 fd37 	bl	80068f0 <__malloc_lock>
 8005e82:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <_free_r+0x94>)
 8005e84:	9801      	ldr	r0, [sp, #4]
 8005e86:	6813      	ldr	r3, [r2, #0]
 8005e88:	b933      	cbnz	r3, 8005e98 <_free_r+0x30>
 8005e8a:	6063      	str	r3, [r4, #4]
 8005e8c:	6014      	str	r4, [r2, #0]
 8005e8e:	b003      	add	sp, #12
 8005e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e94:	f000 bd32 	b.w	80068fc <__malloc_unlock>
 8005e98:	42a3      	cmp	r3, r4
 8005e9a:	d908      	bls.n	8005eae <_free_r+0x46>
 8005e9c:	6825      	ldr	r5, [r4, #0]
 8005e9e:	1961      	adds	r1, r4, r5
 8005ea0:	428b      	cmp	r3, r1
 8005ea2:	bf01      	itttt	eq
 8005ea4:	6819      	ldreq	r1, [r3, #0]
 8005ea6:	685b      	ldreq	r3, [r3, #4]
 8005ea8:	1949      	addeq	r1, r1, r5
 8005eaa:	6021      	streq	r1, [r4, #0]
 8005eac:	e7ed      	b.n	8005e8a <_free_r+0x22>
 8005eae:	461a      	mov	r2, r3
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b10b      	cbz	r3, 8005eb8 <_free_r+0x50>
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	d9fa      	bls.n	8005eae <_free_r+0x46>
 8005eb8:	6811      	ldr	r1, [r2, #0]
 8005eba:	1855      	adds	r5, r2, r1
 8005ebc:	42a5      	cmp	r5, r4
 8005ebe:	d10b      	bne.n	8005ed8 <_free_r+0x70>
 8005ec0:	6824      	ldr	r4, [r4, #0]
 8005ec2:	4421      	add	r1, r4
 8005ec4:	1854      	adds	r4, r2, r1
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	6011      	str	r1, [r2, #0]
 8005eca:	d1e0      	bne.n	8005e8e <_free_r+0x26>
 8005ecc:	681c      	ldr	r4, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	6053      	str	r3, [r2, #4]
 8005ed2:	4421      	add	r1, r4
 8005ed4:	6011      	str	r1, [r2, #0]
 8005ed6:	e7da      	b.n	8005e8e <_free_r+0x26>
 8005ed8:	d902      	bls.n	8005ee0 <_free_r+0x78>
 8005eda:	230c      	movs	r3, #12
 8005edc:	6003      	str	r3, [r0, #0]
 8005ede:	e7d6      	b.n	8005e8e <_free_r+0x26>
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	1961      	adds	r1, r4, r5
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	bf04      	itt	eq
 8005ee8:	6819      	ldreq	r1, [r3, #0]
 8005eea:	685b      	ldreq	r3, [r3, #4]
 8005eec:	6063      	str	r3, [r4, #4]
 8005eee:	bf04      	itt	eq
 8005ef0:	1949      	addeq	r1, r1, r5
 8005ef2:	6021      	streq	r1, [r4, #0]
 8005ef4:	6054      	str	r4, [r2, #4]
 8005ef6:	e7ca      	b.n	8005e8e <_free_r+0x26>
 8005ef8:	b003      	add	sp, #12
 8005efa:	bd30      	pop	{r4, r5, pc}
 8005efc:	200002e4 	.word	0x200002e4

08005f00 <sbrk_aligned>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4e0e      	ldr	r6, [pc, #56]	; (8005f3c <sbrk_aligned+0x3c>)
 8005f04:	460c      	mov	r4, r1
 8005f06:	6831      	ldr	r1, [r6, #0]
 8005f08:	4605      	mov	r5, r0
 8005f0a:	b911      	cbnz	r1, 8005f12 <sbrk_aligned+0x12>
 8005f0c:	f000 f9e6 	bl	80062dc <_sbrk_r>
 8005f10:	6030      	str	r0, [r6, #0]
 8005f12:	4621      	mov	r1, r4
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 f9e1 	bl	80062dc <_sbrk_r>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	d00a      	beq.n	8005f34 <sbrk_aligned+0x34>
 8005f1e:	1cc4      	adds	r4, r0, #3
 8005f20:	f024 0403 	bic.w	r4, r4, #3
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d007      	beq.n	8005f38 <sbrk_aligned+0x38>
 8005f28:	1a21      	subs	r1, r4, r0
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 f9d6 	bl	80062dc <_sbrk_r>
 8005f30:	3001      	adds	r0, #1
 8005f32:	d101      	bne.n	8005f38 <sbrk_aligned+0x38>
 8005f34:	f04f 34ff 	mov.w	r4, #4294967295
 8005f38:	4620      	mov	r0, r4
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	200002e8 	.word	0x200002e8

08005f40 <_malloc_r>:
 8005f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f44:	1ccd      	adds	r5, r1, #3
 8005f46:	f025 0503 	bic.w	r5, r5, #3
 8005f4a:	3508      	adds	r5, #8
 8005f4c:	2d0c      	cmp	r5, #12
 8005f4e:	bf38      	it	cc
 8005f50:	250c      	movcc	r5, #12
 8005f52:	2d00      	cmp	r5, #0
 8005f54:	4607      	mov	r7, r0
 8005f56:	db01      	blt.n	8005f5c <_malloc_r+0x1c>
 8005f58:	42a9      	cmp	r1, r5
 8005f5a:	d905      	bls.n	8005f68 <_malloc_r+0x28>
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	2600      	movs	r6, #0
 8005f62:	4630      	mov	r0, r6
 8005f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f68:	4e2e      	ldr	r6, [pc, #184]	; (8006024 <_malloc_r+0xe4>)
 8005f6a:	f000 fcc1 	bl	80068f0 <__malloc_lock>
 8005f6e:	6833      	ldr	r3, [r6, #0]
 8005f70:	461c      	mov	r4, r3
 8005f72:	bb34      	cbnz	r4, 8005fc2 <_malloc_r+0x82>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7ff ffc2 	bl	8005f00 <sbrk_aligned>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	4604      	mov	r4, r0
 8005f80:	d14d      	bne.n	800601e <_malloc_r+0xde>
 8005f82:	6834      	ldr	r4, [r6, #0]
 8005f84:	4626      	mov	r6, r4
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	d140      	bne.n	800600c <_malloc_r+0xcc>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4638      	mov	r0, r7
 8005f90:	eb04 0803 	add.w	r8, r4, r3
 8005f94:	f000 f9a2 	bl	80062dc <_sbrk_r>
 8005f98:	4580      	cmp	r8, r0
 8005f9a:	d13a      	bne.n	8006012 <_malloc_r+0xd2>
 8005f9c:	6821      	ldr	r1, [r4, #0]
 8005f9e:	3503      	adds	r5, #3
 8005fa0:	1a6d      	subs	r5, r5, r1
 8005fa2:	f025 0503 	bic.w	r5, r5, #3
 8005fa6:	3508      	adds	r5, #8
 8005fa8:	2d0c      	cmp	r5, #12
 8005faa:	bf38      	it	cc
 8005fac:	250c      	movcc	r5, #12
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f7ff ffa5 	bl	8005f00 <sbrk_aligned>
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d02b      	beq.n	8006012 <_malloc_r+0xd2>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	442b      	add	r3, r5
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	e00e      	b.n	8005fe0 <_malloc_r+0xa0>
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	1b52      	subs	r2, r2, r5
 8005fc6:	d41e      	bmi.n	8006006 <_malloc_r+0xc6>
 8005fc8:	2a0b      	cmp	r2, #11
 8005fca:	d916      	bls.n	8005ffa <_malloc_r+0xba>
 8005fcc:	1961      	adds	r1, r4, r5
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	6025      	str	r5, [r4, #0]
 8005fd2:	bf18      	it	ne
 8005fd4:	6059      	strne	r1, [r3, #4]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	bf08      	it	eq
 8005fda:	6031      	streq	r1, [r6, #0]
 8005fdc:	5162      	str	r2, [r4, r5]
 8005fde:	604b      	str	r3, [r1, #4]
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f104 060b 	add.w	r6, r4, #11
 8005fe6:	f000 fc89 	bl	80068fc <__malloc_unlock>
 8005fea:	f026 0607 	bic.w	r6, r6, #7
 8005fee:	1d23      	adds	r3, r4, #4
 8005ff0:	1af2      	subs	r2, r6, r3
 8005ff2:	d0b6      	beq.n	8005f62 <_malloc_r+0x22>
 8005ff4:	1b9b      	subs	r3, r3, r6
 8005ff6:	50a3      	str	r3, [r4, r2]
 8005ff8:	e7b3      	b.n	8005f62 <_malloc_r+0x22>
 8005ffa:	6862      	ldr	r2, [r4, #4]
 8005ffc:	42a3      	cmp	r3, r4
 8005ffe:	bf0c      	ite	eq
 8006000:	6032      	streq	r2, [r6, #0]
 8006002:	605a      	strne	r2, [r3, #4]
 8006004:	e7ec      	b.n	8005fe0 <_malloc_r+0xa0>
 8006006:	4623      	mov	r3, r4
 8006008:	6864      	ldr	r4, [r4, #4]
 800600a:	e7b2      	b.n	8005f72 <_malloc_r+0x32>
 800600c:	4634      	mov	r4, r6
 800600e:	6876      	ldr	r6, [r6, #4]
 8006010:	e7b9      	b.n	8005f86 <_malloc_r+0x46>
 8006012:	230c      	movs	r3, #12
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	4638      	mov	r0, r7
 8006018:	f000 fc70 	bl	80068fc <__malloc_unlock>
 800601c:	e7a1      	b.n	8005f62 <_malloc_r+0x22>
 800601e:	6025      	str	r5, [r4, #0]
 8006020:	e7de      	b.n	8005fe0 <_malloc_r+0xa0>
 8006022:	bf00      	nop
 8006024:	200002e4 	.word	0x200002e4

08006028 <__sfputc_r>:
 8006028:	6893      	ldr	r3, [r2, #8]
 800602a:	3b01      	subs	r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	b410      	push	{r4}
 8006030:	6093      	str	r3, [r2, #8]
 8006032:	da08      	bge.n	8006046 <__sfputc_r+0x1e>
 8006034:	6994      	ldr	r4, [r2, #24]
 8006036:	42a3      	cmp	r3, r4
 8006038:	db01      	blt.n	800603e <__sfputc_r+0x16>
 800603a:	290a      	cmp	r1, #10
 800603c:	d103      	bne.n	8006046 <__sfputc_r+0x1e>
 800603e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006042:	f000 b95b 	b.w	80062fc <__swbuf_r>
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	1c58      	adds	r0, r3, #1
 800604a:	6010      	str	r0, [r2, #0]
 800604c:	7019      	strb	r1, [r3, #0]
 800604e:	4608      	mov	r0, r1
 8006050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006054:	4770      	bx	lr

08006056 <__sfputs_r>:
 8006056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006058:	4606      	mov	r6, r0
 800605a:	460f      	mov	r7, r1
 800605c:	4614      	mov	r4, r2
 800605e:	18d5      	adds	r5, r2, r3
 8006060:	42ac      	cmp	r4, r5
 8006062:	d101      	bne.n	8006068 <__sfputs_r+0x12>
 8006064:	2000      	movs	r0, #0
 8006066:	e007      	b.n	8006078 <__sfputs_r+0x22>
 8006068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606c:	463a      	mov	r2, r7
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff ffda 	bl	8006028 <__sfputc_r>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d1f3      	bne.n	8006060 <__sfputs_r+0xa>
 8006078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800607c <_vfiprintf_r>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	460d      	mov	r5, r1
 8006082:	b09d      	sub	sp, #116	; 0x74
 8006084:	4614      	mov	r4, r2
 8006086:	4698      	mov	r8, r3
 8006088:	4606      	mov	r6, r0
 800608a:	b118      	cbz	r0, 8006094 <_vfiprintf_r+0x18>
 800608c:	6983      	ldr	r3, [r0, #24]
 800608e:	b90b      	cbnz	r3, 8006094 <_vfiprintf_r+0x18>
 8006090:	f000 fb16 	bl	80066c0 <__sinit>
 8006094:	4b89      	ldr	r3, [pc, #548]	; (80062bc <_vfiprintf_r+0x240>)
 8006096:	429d      	cmp	r5, r3
 8006098:	d11b      	bne.n	80060d2 <_vfiprintf_r+0x56>
 800609a:	6875      	ldr	r5, [r6, #4]
 800609c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800609e:	07d9      	lsls	r1, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_vfiprintf_r+0x32>
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_vfiprintf_r+0x32>
 80060a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060aa:	f000 fba7 	bl	80067fc <__retarget_lock_acquire_recursive>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	d501      	bpl.n	80060b8 <_vfiprintf_r+0x3c>
 80060b4:	692b      	ldr	r3, [r5, #16]
 80060b6:	b9eb      	cbnz	r3, 80060f4 <_vfiprintf_r+0x78>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4630      	mov	r0, r6
 80060bc:	f000 f970 	bl	80063a0 <__swsetup_r>
 80060c0:	b1c0      	cbz	r0, 80060f4 <_vfiprintf_r+0x78>
 80060c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060c4:	07dc      	lsls	r4, r3, #31
 80060c6:	d50e      	bpl.n	80060e6 <_vfiprintf_r+0x6a>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	b01d      	add	sp, #116	; 0x74
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	4b7b      	ldr	r3, [pc, #492]	; (80062c0 <_vfiprintf_r+0x244>)
 80060d4:	429d      	cmp	r5, r3
 80060d6:	d101      	bne.n	80060dc <_vfiprintf_r+0x60>
 80060d8:	68b5      	ldr	r5, [r6, #8]
 80060da:	e7df      	b.n	800609c <_vfiprintf_r+0x20>
 80060dc:	4b79      	ldr	r3, [pc, #484]	; (80062c4 <_vfiprintf_r+0x248>)
 80060de:	429d      	cmp	r5, r3
 80060e0:	bf08      	it	eq
 80060e2:	68f5      	ldreq	r5, [r6, #12]
 80060e4:	e7da      	b.n	800609c <_vfiprintf_r+0x20>
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	0598      	lsls	r0, r3, #22
 80060ea:	d4ed      	bmi.n	80060c8 <_vfiprintf_r+0x4c>
 80060ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ee:	f000 fb86 	bl	80067fe <__retarget_lock_release_recursive>
 80060f2:	e7e9      	b.n	80060c8 <_vfiprintf_r+0x4c>
 80060f4:	2300      	movs	r3, #0
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	2320      	movs	r3, #32
 80060fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006102:	2330      	movs	r3, #48	; 0x30
 8006104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062c8 <_vfiprintf_r+0x24c>
 8006108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800610c:	f04f 0901 	mov.w	r9, #1
 8006110:	4623      	mov	r3, r4
 8006112:	469a      	mov	sl, r3
 8006114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006118:	b10a      	cbz	r2, 800611e <_vfiprintf_r+0xa2>
 800611a:	2a25      	cmp	r2, #37	; 0x25
 800611c:	d1f9      	bne.n	8006112 <_vfiprintf_r+0x96>
 800611e:	ebba 0b04 	subs.w	fp, sl, r4
 8006122:	d00b      	beq.n	800613c <_vfiprintf_r+0xc0>
 8006124:	465b      	mov	r3, fp
 8006126:	4622      	mov	r2, r4
 8006128:	4629      	mov	r1, r5
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff ff93 	bl	8006056 <__sfputs_r>
 8006130:	3001      	adds	r0, #1
 8006132:	f000 80aa 	beq.w	800628a <_vfiprintf_r+0x20e>
 8006136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006138:	445a      	add	r2, fp
 800613a:	9209      	str	r2, [sp, #36]	; 0x24
 800613c:	f89a 3000 	ldrb.w	r3, [sl]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a2 	beq.w	800628a <_vfiprintf_r+0x20e>
 8006146:	2300      	movs	r3, #0
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006150:	f10a 0a01 	add.w	sl, sl, #1
 8006154:	9304      	str	r3, [sp, #16]
 8006156:	9307      	str	r3, [sp, #28]
 8006158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800615c:	931a      	str	r3, [sp, #104]	; 0x68
 800615e:	4654      	mov	r4, sl
 8006160:	2205      	movs	r2, #5
 8006162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006166:	4858      	ldr	r0, [pc, #352]	; (80062c8 <_vfiprintf_r+0x24c>)
 8006168:	f7fa f84a 	bl	8000200 <memchr>
 800616c:	9a04      	ldr	r2, [sp, #16]
 800616e:	b9d8      	cbnz	r0, 80061a8 <_vfiprintf_r+0x12c>
 8006170:	06d1      	lsls	r1, r2, #27
 8006172:	bf44      	itt	mi
 8006174:	2320      	movmi	r3, #32
 8006176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800617a:	0713      	lsls	r3, r2, #28
 800617c:	bf44      	itt	mi
 800617e:	232b      	movmi	r3, #43	; 0x2b
 8006180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006184:	f89a 3000 	ldrb.w	r3, [sl]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d015      	beq.n	80061b8 <_vfiprintf_r+0x13c>
 800618c:	9a07      	ldr	r2, [sp, #28]
 800618e:	4654      	mov	r4, sl
 8006190:	2000      	movs	r0, #0
 8006192:	f04f 0c0a 	mov.w	ip, #10
 8006196:	4621      	mov	r1, r4
 8006198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800619c:	3b30      	subs	r3, #48	; 0x30
 800619e:	2b09      	cmp	r3, #9
 80061a0:	d94e      	bls.n	8006240 <_vfiprintf_r+0x1c4>
 80061a2:	b1b0      	cbz	r0, 80061d2 <_vfiprintf_r+0x156>
 80061a4:	9207      	str	r2, [sp, #28]
 80061a6:	e014      	b.n	80061d2 <_vfiprintf_r+0x156>
 80061a8:	eba0 0308 	sub.w	r3, r0, r8
 80061ac:	fa09 f303 	lsl.w	r3, r9, r3
 80061b0:	4313      	orrs	r3, r2
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	46a2      	mov	sl, r4
 80061b6:	e7d2      	b.n	800615e <_vfiprintf_r+0xe2>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	1d19      	adds	r1, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9103      	str	r1, [sp, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bfbb      	ittet	lt
 80061c4:	425b      	neglt	r3, r3
 80061c6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ca:	9307      	strge	r3, [sp, #28]
 80061cc:	9307      	strlt	r3, [sp, #28]
 80061ce:	bfb8      	it	lt
 80061d0:	9204      	strlt	r2, [sp, #16]
 80061d2:	7823      	ldrb	r3, [r4, #0]
 80061d4:	2b2e      	cmp	r3, #46	; 0x2e
 80061d6:	d10c      	bne.n	80061f2 <_vfiprintf_r+0x176>
 80061d8:	7863      	ldrb	r3, [r4, #1]
 80061da:	2b2a      	cmp	r3, #42	; 0x2a
 80061dc:	d135      	bne.n	800624a <_vfiprintf_r+0x1ce>
 80061de:	9b03      	ldr	r3, [sp, #12]
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	9203      	str	r2, [sp, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bfb8      	it	lt
 80061ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ee:	3402      	adds	r4, #2
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062d8 <_vfiprintf_r+0x25c>
 80061f6:	7821      	ldrb	r1, [r4, #0]
 80061f8:	2203      	movs	r2, #3
 80061fa:	4650      	mov	r0, sl
 80061fc:	f7fa f800 	bl	8000200 <memchr>
 8006200:	b140      	cbz	r0, 8006214 <_vfiprintf_r+0x198>
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	eba0 000a 	sub.w	r0, r0, sl
 8006208:	fa03 f000 	lsl.w	r0, r3, r0
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	4303      	orrs	r3, r0
 8006210:	3401      	adds	r4, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	482c      	ldr	r0, [pc, #176]	; (80062cc <_vfiprintf_r+0x250>)
 800621a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800621e:	2206      	movs	r2, #6
 8006220:	f7f9 ffee 	bl	8000200 <memchr>
 8006224:	2800      	cmp	r0, #0
 8006226:	d03f      	beq.n	80062a8 <_vfiprintf_r+0x22c>
 8006228:	4b29      	ldr	r3, [pc, #164]	; (80062d0 <_vfiprintf_r+0x254>)
 800622a:	bb1b      	cbnz	r3, 8006274 <_vfiprintf_r+0x1f8>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	3307      	adds	r3, #7
 8006230:	f023 0307 	bic.w	r3, r3, #7
 8006234:	3308      	adds	r3, #8
 8006236:	9303      	str	r3, [sp, #12]
 8006238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623a:	443b      	add	r3, r7
 800623c:	9309      	str	r3, [sp, #36]	; 0x24
 800623e:	e767      	b.n	8006110 <_vfiprintf_r+0x94>
 8006240:	fb0c 3202 	mla	r2, ip, r2, r3
 8006244:	460c      	mov	r4, r1
 8006246:	2001      	movs	r0, #1
 8006248:	e7a5      	b.n	8006196 <_vfiprintf_r+0x11a>
 800624a:	2300      	movs	r3, #0
 800624c:	3401      	adds	r4, #1
 800624e:	9305      	str	r3, [sp, #20]
 8006250:	4619      	mov	r1, r3
 8006252:	f04f 0c0a 	mov.w	ip, #10
 8006256:	4620      	mov	r0, r4
 8006258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625c:	3a30      	subs	r2, #48	; 0x30
 800625e:	2a09      	cmp	r2, #9
 8006260:	d903      	bls.n	800626a <_vfiprintf_r+0x1ee>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c5      	beq.n	80061f2 <_vfiprintf_r+0x176>
 8006266:	9105      	str	r1, [sp, #20]
 8006268:	e7c3      	b.n	80061f2 <_vfiprintf_r+0x176>
 800626a:	fb0c 2101 	mla	r1, ip, r1, r2
 800626e:	4604      	mov	r4, r0
 8006270:	2301      	movs	r3, #1
 8006272:	e7f0      	b.n	8006256 <_vfiprintf_r+0x1da>
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <_vfiprintf_r+0x258>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	4630      	mov	r0, r6
 8006280:	f7fd fecc 	bl	800401c <_printf_float>
 8006284:	4607      	mov	r7, r0
 8006286:	1c78      	adds	r0, r7, #1
 8006288:	d1d6      	bne.n	8006238 <_vfiprintf_r+0x1bc>
 800628a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800628c:	07d9      	lsls	r1, r3, #31
 800628e:	d405      	bmi.n	800629c <_vfiprintf_r+0x220>
 8006290:	89ab      	ldrh	r3, [r5, #12]
 8006292:	059a      	lsls	r2, r3, #22
 8006294:	d402      	bmi.n	800629c <_vfiprintf_r+0x220>
 8006296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006298:	f000 fab1 	bl	80067fe <__retarget_lock_release_recursive>
 800629c:	89ab      	ldrh	r3, [r5, #12]
 800629e:	065b      	lsls	r3, r3, #25
 80062a0:	f53f af12 	bmi.w	80060c8 <_vfiprintf_r+0x4c>
 80062a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a6:	e711      	b.n	80060cc <_vfiprintf_r+0x50>
 80062a8:	ab03      	add	r3, sp, #12
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	462a      	mov	r2, r5
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <_vfiprintf_r+0x258>)
 80062b0:	a904      	add	r1, sp, #16
 80062b2:	4630      	mov	r0, r6
 80062b4:	f7fe f956 	bl	8004564 <_printf_i>
 80062b8:	e7e4      	b.n	8006284 <_vfiprintf_r+0x208>
 80062ba:	bf00      	nop
 80062bc:	08006f90 	.word	0x08006f90
 80062c0:	08006fb0 	.word	0x08006fb0
 80062c4:	08006f70 	.word	0x08006f70
 80062c8:	08006f5c 	.word	0x08006f5c
 80062cc:	08006f66 	.word	0x08006f66
 80062d0:	0800401d 	.word	0x0800401d
 80062d4:	08006057 	.word	0x08006057
 80062d8:	08006f62 	.word	0x08006f62

080062dc <_sbrk_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_sbrk_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fa ff36 	bl	8001158 <_sbrk>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_sbrk_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_sbrk_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	200002f0 	.word	0x200002f0

080062fc <__swbuf_r>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	460e      	mov	r6, r1
 8006300:	4614      	mov	r4, r2
 8006302:	4605      	mov	r5, r0
 8006304:	b118      	cbz	r0, 800630e <__swbuf_r+0x12>
 8006306:	6983      	ldr	r3, [r0, #24]
 8006308:	b90b      	cbnz	r3, 800630e <__swbuf_r+0x12>
 800630a:	f000 f9d9 	bl	80066c0 <__sinit>
 800630e:	4b21      	ldr	r3, [pc, #132]	; (8006394 <__swbuf_r+0x98>)
 8006310:	429c      	cmp	r4, r3
 8006312:	d12b      	bne.n	800636c <__swbuf_r+0x70>
 8006314:	686c      	ldr	r4, [r5, #4]
 8006316:	69a3      	ldr	r3, [r4, #24]
 8006318:	60a3      	str	r3, [r4, #8]
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	071a      	lsls	r2, r3, #28
 800631e:	d52f      	bpl.n	8006380 <__swbuf_r+0x84>
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	b36b      	cbz	r3, 8006380 <__swbuf_r+0x84>
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	6820      	ldr	r0, [r4, #0]
 8006328:	1ac0      	subs	r0, r0, r3
 800632a:	6963      	ldr	r3, [r4, #20]
 800632c:	b2f6      	uxtb	r6, r6
 800632e:	4283      	cmp	r3, r0
 8006330:	4637      	mov	r7, r6
 8006332:	dc04      	bgt.n	800633e <__swbuf_r+0x42>
 8006334:	4621      	mov	r1, r4
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f92e 	bl	8006598 <_fflush_r>
 800633c:	bb30      	cbnz	r0, 800638c <__swbuf_r+0x90>
 800633e:	68a3      	ldr	r3, [r4, #8]
 8006340:	3b01      	subs	r3, #1
 8006342:	60a3      	str	r3, [r4, #8]
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	6022      	str	r2, [r4, #0]
 800634a:	701e      	strb	r6, [r3, #0]
 800634c:	6963      	ldr	r3, [r4, #20]
 800634e:	3001      	adds	r0, #1
 8006350:	4283      	cmp	r3, r0
 8006352:	d004      	beq.n	800635e <__swbuf_r+0x62>
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	07db      	lsls	r3, r3, #31
 8006358:	d506      	bpl.n	8006368 <__swbuf_r+0x6c>
 800635a:	2e0a      	cmp	r6, #10
 800635c:	d104      	bne.n	8006368 <__swbuf_r+0x6c>
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 f919 	bl	8006598 <_fflush_r>
 8006366:	b988      	cbnz	r0, 800638c <__swbuf_r+0x90>
 8006368:	4638      	mov	r0, r7
 800636a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <__swbuf_r+0x9c>)
 800636e:	429c      	cmp	r4, r3
 8006370:	d101      	bne.n	8006376 <__swbuf_r+0x7a>
 8006372:	68ac      	ldr	r4, [r5, #8]
 8006374:	e7cf      	b.n	8006316 <__swbuf_r+0x1a>
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <__swbuf_r+0xa0>)
 8006378:	429c      	cmp	r4, r3
 800637a:	bf08      	it	eq
 800637c:	68ec      	ldreq	r4, [r5, #12]
 800637e:	e7ca      	b.n	8006316 <__swbuf_r+0x1a>
 8006380:	4621      	mov	r1, r4
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f80c 	bl	80063a0 <__swsetup_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	d0cb      	beq.n	8006324 <__swbuf_r+0x28>
 800638c:	f04f 37ff 	mov.w	r7, #4294967295
 8006390:	e7ea      	b.n	8006368 <__swbuf_r+0x6c>
 8006392:	bf00      	nop
 8006394:	08006f90 	.word	0x08006f90
 8006398:	08006fb0 	.word	0x08006fb0
 800639c:	08006f70 	.word	0x08006f70

080063a0 <__swsetup_r>:
 80063a0:	4b32      	ldr	r3, [pc, #200]	; (800646c <__swsetup_r+0xcc>)
 80063a2:	b570      	push	{r4, r5, r6, lr}
 80063a4:	681d      	ldr	r5, [r3, #0]
 80063a6:	4606      	mov	r6, r0
 80063a8:	460c      	mov	r4, r1
 80063aa:	b125      	cbz	r5, 80063b6 <__swsetup_r+0x16>
 80063ac:	69ab      	ldr	r3, [r5, #24]
 80063ae:	b913      	cbnz	r3, 80063b6 <__swsetup_r+0x16>
 80063b0:	4628      	mov	r0, r5
 80063b2:	f000 f985 	bl	80066c0 <__sinit>
 80063b6:	4b2e      	ldr	r3, [pc, #184]	; (8006470 <__swsetup_r+0xd0>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	d10f      	bne.n	80063dc <__swsetup_r+0x3c>
 80063bc:	686c      	ldr	r4, [r5, #4]
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063c4:	0719      	lsls	r1, r3, #28
 80063c6:	d42c      	bmi.n	8006422 <__swsetup_r+0x82>
 80063c8:	06dd      	lsls	r5, r3, #27
 80063ca:	d411      	bmi.n	80063f0 <__swsetup_r+0x50>
 80063cc:	2309      	movs	r3, #9
 80063ce:	6033      	str	r3, [r6, #0]
 80063d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	f04f 30ff 	mov.w	r0, #4294967295
 80063da:	e03e      	b.n	800645a <__swsetup_r+0xba>
 80063dc:	4b25      	ldr	r3, [pc, #148]	; (8006474 <__swsetup_r+0xd4>)
 80063de:	429c      	cmp	r4, r3
 80063e0:	d101      	bne.n	80063e6 <__swsetup_r+0x46>
 80063e2:	68ac      	ldr	r4, [r5, #8]
 80063e4:	e7eb      	b.n	80063be <__swsetup_r+0x1e>
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <__swsetup_r+0xd8>)
 80063e8:	429c      	cmp	r4, r3
 80063ea:	bf08      	it	eq
 80063ec:	68ec      	ldreq	r4, [r5, #12]
 80063ee:	e7e6      	b.n	80063be <__swsetup_r+0x1e>
 80063f0:	0758      	lsls	r0, r3, #29
 80063f2:	d512      	bpl.n	800641a <__swsetup_r+0x7a>
 80063f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063f6:	b141      	cbz	r1, 800640a <__swsetup_r+0x6a>
 80063f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d002      	beq.n	8006406 <__swsetup_r+0x66>
 8006400:	4630      	mov	r0, r6
 8006402:	f7ff fd31 	bl	8005e68 <_free_r>
 8006406:	2300      	movs	r3, #0
 8006408:	6363      	str	r3, [r4, #52]	; 0x34
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	2300      	movs	r3, #0
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f043 0308 	orr.w	r3, r3, #8
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	b94b      	cbnz	r3, 800643a <__swsetup_r+0x9a>
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800642c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006430:	d003      	beq.n	800643a <__swsetup_r+0x9a>
 8006432:	4621      	mov	r1, r4
 8006434:	4630      	mov	r0, r6
 8006436:	f000 fa09 	bl	800684c <__smakebuf_r>
 800643a:	89a0      	ldrh	r0, [r4, #12]
 800643c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006440:	f010 0301 	ands.w	r3, r0, #1
 8006444:	d00a      	beq.n	800645c <__swsetup_r+0xbc>
 8006446:	2300      	movs	r3, #0
 8006448:	60a3      	str	r3, [r4, #8]
 800644a:	6963      	ldr	r3, [r4, #20]
 800644c:	425b      	negs	r3, r3
 800644e:	61a3      	str	r3, [r4, #24]
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	b943      	cbnz	r3, 8006466 <__swsetup_r+0xc6>
 8006454:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006458:	d1ba      	bne.n	80063d0 <__swsetup_r+0x30>
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	0781      	lsls	r1, r0, #30
 800645e:	bf58      	it	pl
 8006460:	6963      	ldrpl	r3, [r4, #20]
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	e7f4      	b.n	8006450 <__swsetup_r+0xb0>
 8006466:	2000      	movs	r0, #0
 8006468:	e7f7      	b.n	800645a <__swsetup_r+0xba>
 800646a:	bf00      	nop
 800646c:	2000000c 	.word	0x2000000c
 8006470:	08006f90 	.word	0x08006f90
 8006474:	08006fb0 	.word	0x08006fb0
 8006478:	08006f70 	.word	0x08006f70

0800647c <abort>:
 800647c:	b508      	push	{r3, lr}
 800647e:	2006      	movs	r0, #6
 8006480:	f000 fa6a 	bl	8006958 <raise>
 8006484:	2001      	movs	r0, #1
 8006486:	f7fa fdef 	bl	8001068 <_exit>
	...

0800648c <__sflush_r>:
 800648c:	898a      	ldrh	r2, [r1, #12]
 800648e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006492:	4605      	mov	r5, r0
 8006494:	0710      	lsls	r0, r2, #28
 8006496:	460c      	mov	r4, r1
 8006498:	d458      	bmi.n	800654c <__sflush_r+0xc0>
 800649a:	684b      	ldr	r3, [r1, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	dc05      	bgt.n	80064ac <__sflush_r+0x20>
 80064a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	dc02      	bgt.n	80064ac <__sflush_r+0x20>
 80064a6:	2000      	movs	r0, #0
 80064a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	d0f9      	beq.n	80064a6 <__sflush_r+0x1a>
 80064b2:	2300      	movs	r3, #0
 80064b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064b8:	682f      	ldr	r7, [r5, #0]
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	d032      	beq.n	8006524 <__sflush_r+0x98>
 80064be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	075a      	lsls	r2, r3, #29
 80064c4:	d505      	bpl.n	80064d2 <__sflush_r+0x46>
 80064c6:	6863      	ldr	r3, [r4, #4]
 80064c8:	1ac0      	subs	r0, r0, r3
 80064ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064cc:	b10b      	cbz	r3, 80064d2 <__sflush_r+0x46>
 80064ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064d0:	1ac0      	subs	r0, r0, r3
 80064d2:	2300      	movs	r3, #0
 80064d4:	4602      	mov	r2, r0
 80064d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d8:	6a21      	ldr	r1, [r4, #32]
 80064da:	4628      	mov	r0, r5
 80064dc:	47b0      	blx	r6
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	d106      	bne.n	80064f2 <__sflush_r+0x66>
 80064e4:	6829      	ldr	r1, [r5, #0]
 80064e6:	291d      	cmp	r1, #29
 80064e8:	d82c      	bhi.n	8006544 <__sflush_r+0xb8>
 80064ea:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <__sflush_r+0x108>)
 80064ec:	40ca      	lsrs	r2, r1
 80064ee:	07d6      	lsls	r6, r2, #31
 80064f0:	d528      	bpl.n	8006544 <__sflush_r+0xb8>
 80064f2:	2200      	movs	r2, #0
 80064f4:	6062      	str	r2, [r4, #4]
 80064f6:	04d9      	lsls	r1, r3, #19
 80064f8:	6922      	ldr	r2, [r4, #16]
 80064fa:	6022      	str	r2, [r4, #0]
 80064fc:	d504      	bpl.n	8006508 <__sflush_r+0x7c>
 80064fe:	1c42      	adds	r2, r0, #1
 8006500:	d101      	bne.n	8006506 <__sflush_r+0x7a>
 8006502:	682b      	ldr	r3, [r5, #0]
 8006504:	b903      	cbnz	r3, 8006508 <__sflush_r+0x7c>
 8006506:	6560      	str	r0, [r4, #84]	; 0x54
 8006508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800650a:	602f      	str	r7, [r5, #0]
 800650c:	2900      	cmp	r1, #0
 800650e:	d0ca      	beq.n	80064a6 <__sflush_r+0x1a>
 8006510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006514:	4299      	cmp	r1, r3
 8006516:	d002      	beq.n	800651e <__sflush_r+0x92>
 8006518:	4628      	mov	r0, r5
 800651a:	f7ff fca5 	bl	8005e68 <_free_r>
 800651e:	2000      	movs	r0, #0
 8006520:	6360      	str	r0, [r4, #52]	; 0x34
 8006522:	e7c1      	b.n	80064a8 <__sflush_r+0x1c>
 8006524:	6a21      	ldr	r1, [r4, #32]
 8006526:	2301      	movs	r3, #1
 8006528:	4628      	mov	r0, r5
 800652a:	47b0      	blx	r6
 800652c:	1c41      	adds	r1, r0, #1
 800652e:	d1c7      	bne.n	80064c0 <__sflush_r+0x34>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0c4      	beq.n	80064c0 <__sflush_r+0x34>
 8006536:	2b1d      	cmp	r3, #29
 8006538:	d001      	beq.n	800653e <__sflush_r+0xb2>
 800653a:	2b16      	cmp	r3, #22
 800653c:	d101      	bne.n	8006542 <__sflush_r+0xb6>
 800653e:	602f      	str	r7, [r5, #0]
 8006540:	e7b1      	b.n	80064a6 <__sflush_r+0x1a>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006548:	81a3      	strh	r3, [r4, #12]
 800654a:	e7ad      	b.n	80064a8 <__sflush_r+0x1c>
 800654c:	690f      	ldr	r7, [r1, #16]
 800654e:	2f00      	cmp	r7, #0
 8006550:	d0a9      	beq.n	80064a6 <__sflush_r+0x1a>
 8006552:	0793      	lsls	r3, r2, #30
 8006554:	680e      	ldr	r6, [r1, #0]
 8006556:	bf08      	it	eq
 8006558:	694b      	ldreq	r3, [r1, #20]
 800655a:	600f      	str	r7, [r1, #0]
 800655c:	bf18      	it	ne
 800655e:	2300      	movne	r3, #0
 8006560:	eba6 0807 	sub.w	r8, r6, r7
 8006564:	608b      	str	r3, [r1, #8]
 8006566:	f1b8 0f00 	cmp.w	r8, #0
 800656a:	dd9c      	ble.n	80064a6 <__sflush_r+0x1a>
 800656c:	6a21      	ldr	r1, [r4, #32]
 800656e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006570:	4643      	mov	r3, r8
 8006572:	463a      	mov	r2, r7
 8006574:	4628      	mov	r0, r5
 8006576:	47b0      	blx	r6
 8006578:	2800      	cmp	r0, #0
 800657a:	dc06      	bgt.n	800658a <__sflush_r+0xfe>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	e78e      	b.n	80064a8 <__sflush_r+0x1c>
 800658a:	4407      	add	r7, r0
 800658c:	eba8 0800 	sub.w	r8, r8, r0
 8006590:	e7e9      	b.n	8006566 <__sflush_r+0xda>
 8006592:	bf00      	nop
 8006594:	20400001 	.word	0x20400001

08006598 <_fflush_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	690b      	ldr	r3, [r1, #16]
 800659c:	4605      	mov	r5, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	b913      	cbnz	r3, 80065a8 <_fflush_r+0x10>
 80065a2:	2500      	movs	r5, #0
 80065a4:	4628      	mov	r0, r5
 80065a6:	bd38      	pop	{r3, r4, r5, pc}
 80065a8:	b118      	cbz	r0, 80065b2 <_fflush_r+0x1a>
 80065aa:	6983      	ldr	r3, [r0, #24]
 80065ac:	b90b      	cbnz	r3, 80065b2 <_fflush_r+0x1a>
 80065ae:	f000 f887 	bl	80066c0 <__sinit>
 80065b2:	4b14      	ldr	r3, [pc, #80]	; (8006604 <_fflush_r+0x6c>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	d11b      	bne.n	80065f0 <_fflush_r+0x58>
 80065b8:	686c      	ldr	r4, [r5, #4]
 80065ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0ef      	beq.n	80065a2 <_fflush_r+0xa>
 80065c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065c4:	07d0      	lsls	r0, r2, #31
 80065c6:	d404      	bmi.n	80065d2 <_fflush_r+0x3a>
 80065c8:	0599      	lsls	r1, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_fflush_r+0x3a>
 80065cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ce:	f000 f915 	bl	80067fc <__retarget_lock_acquire_recursive>
 80065d2:	4628      	mov	r0, r5
 80065d4:	4621      	mov	r1, r4
 80065d6:	f7ff ff59 	bl	800648c <__sflush_r>
 80065da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065dc:	07da      	lsls	r2, r3, #31
 80065de:	4605      	mov	r5, r0
 80065e0:	d4e0      	bmi.n	80065a4 <_fflush_r+0xc>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	059b      	lsls	r3, r3, #22
 80065e6:	d4dd      	bmi.n	80065a4 <_fflush_r+0xc>
 80065e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ea:	f000 f908 	bl	80067fe <__retarget_lock_release_recursive>
 80065ee:	e7d9      	b.n	80065a4 <_fflush_r+0xc>
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <_fflush_r+0x70>)
 80065f2:	429c      	cmp	r4, r3
 80065f4:	d101      	bne.n	80065fa <_fflush_r+0x62>
 80065f6:	68ac      	ldr	r4, [r5, #8]
 80065f8:	e7df      	b.n	80065ba <_fflush_r+0x22>
 80065fa:	4b04      	ldr	r3, [pc, #16]	; (800660c <_fflush_r+0x74>)
 80065fc:	429c      	cmp	r4, r3
 80065fe:	bf08      	it	eq
 8006600:	68ec      	ldreq	r4, [r5, #12]
 8006602:	e7da      	b.n	80065ba <_fflush_r+0x22>
 8006604:	08006f90 	.word	0x08006f90
 8006608:	08006fb0 	.word	0x08006fb0
 800660c:	08006f70 	.word	0x08006f70

08006610 <std>:
 8006610:	2300      	movs	r3, #0
 8006612:	b510      	push	{r4, lr}
 8006614:	4604      	mov	r4, r0
 8006616:	e9c0 3300 	strd	r3, r3, [r0]
 800661a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800661e:	6083      	str	r3, [r0, #8]
 8006620:	8181      	strh	r1, [r0, #12]
 8006622:	6643      	str	r3, [r0, #100]	; 0x64
 8006624:	81c2      	strh	r2, [r0, #14]
 8006626:	6183      	str	r3, [r0, #24]
 8006628:	4619      	mov	r1, r3
 800662a:	2208      	movs	r2, #8
 800662c:	305c      	adds	r0, #92	; 0x5c
 800662e:	f7fd fc4d 	bl	8003ecc <memset>
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <std+0x38>)
 8006634:	6263      	str	r3, [r4, #36]	; 0x24
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <std+0x3c>)
 8006638:	62a3      	str	r3, [r4, #40]	; 0x28
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <std+0x40>)
 800663c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <std+0x44>)
 8006640:	6224      	str	r4, [r4, #32]
 8006642:	6323      	str	r3, [r4, #48]	; 0x30
 8006644:	bd10      	pop	{r4, pc}
 8006646:	bf00      	nop
 8006648:	08006991 	.word	0x08006991
 800664c:	080069b3 	.word	0x080069b3
 8006650:	080069eb 	.word	0x080069eb
 8006654:	08006a0f 	.word	0x08006a0f

08006658 <_cleanup_r>:
 8006658:	4901      	ldr	r1, [pc, #4]	; (8006660 <_cleanup_r+0x8>)
 800665a:	f000 b8af 	b.w	80067bc <_fwalk_reent>
 800665e:	bf00      	nop
 8006660:	08006599 	.word	0x08006599

08006664 <__sfmoreglue>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	2268      	movs	r2, #104	; 0x68
 8006668:	1e4d      	subs	r5, r1, #1
 800666a:	4355      	muls	r5, r2
 800666c:	460e      	mov	r6, r1
 800666e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006672:	f7ff fc65 	bl	8005f40 <_malloc_r>
 8006676:	4604      	mov	r4, r0
 8006678:	b140      	cbz	r0, 800668c <__sfmoreglue+0x28>
 800667a:	2100      	movs	r1, #0
 800667c:	e9c0 1600 	strd	r1, r6, [r0]
 8006680:	300c      	adds	r0, #12
 8006682:	60a0      	str	r0, [r4, #8]
 8006684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006688:	f7fd fc20 	bl	8003ecc <memset>
 800668c:	4620      	mov	r0, r4
 800668e:	bd70      	pop	{r4, r5, r6, pc}

08006690 <__sfp_lock_acquire>:
 8006690:	4801      	ldr	r0, [pc, #4]	; (8006698 <__sfp_lock_acquire+0x8>)
 8006692:	f000 b8b3 	b.w	80067fc <__retarget_lock_acquire_recursive>
 8006696:	bf00      	nop
 8006698:	200002ed 	.word	0x200002ed

0800669c <__sfp_lock_release>:
 800669c:	4801      	ldr	r0, [pc, #4]	; (80066a4 <__sfp_lock_release+0x8>)
 800669e:	f000 b8ae 	b.w	80067fe <__retarget_lock_release_recursive>
 80066a2:	bf00      	nop
 80066a4:	200002ed 	.word	0x200002ed

080066a8 <__sinit_lock_acquire>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__sinit_lock_acquire+0x8>)
 80066aa:	f000 b8a7 	b.w	80067fc <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	200002ee 	.word	0x200002ee

080066b4 <__sinit_lock_release>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__sinit_lock_release+0x8>)
 80066b6:	f000 b8a2 	b.w	80067fe <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	200002ee 	.word	0x200002ee

080066c0 <__sinit>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	f7ff fff0 	bl	80066a8 <__sinit_lock_acquire>
 80066c8:	69a3      	ldr	r3, [r4, #24]
 80066ca:	b11b      	cbz	r3, 80066d4 <__sinit+0x14>
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f7ff bff0 	b.w	80066b4 <__sinit_lock_release>
 80066d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066d8:	6523      	str	r3, [r4, #80]	; 0x50
 80066da:	4b13      	ldr	r3, [pc, #76]	; (8006728 <__sinit+0x68>)
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <__sinit+0x6c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80066e2:	42a3      	cmp	r3, r4
 80066e4:	bf04      	itt	eq
 80066e6:	2301      	moveq	r3, #1
 80066e8:	61a3      	streq	r3, [r4, #24]
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 f820 	bl	8006730 <__sfp>
 80066f0:	6060      	str	r0, [r4, #4]
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 f81c 	bl	8006730 <__sfp>
 80066f8:	60a0      	str	r0, [r4, #8]
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 f818 	bl	8006730 <__sfp>
 8006700:	2200      	movs	r2, #0
 8006702:	60e0      	str	r0, [r4, #12]
 8006704:	2104      	movs	r1, #4
 8006706:	6860      	ldr	r0, [r4, #4]
 8006708:	f7ff ff82 	bl	8006610 <std>
 800670c:	68a0      	ldr	r0, [r4, #8]
 800670e:	2201      	movs	r2, #1
 8006710:	2109      	movs	r1, #9
 8006712:	f7ff ff7d 	bl	8006610 <std>
 8006716:	68e0      	ldr	r0, [r4, #12]
 8006718:	2202      	movs	r2, #2
 800671a:	2112      	movs	r1, #18
 800671c:	f7ff ff78 	bl	8006610 <std>
 8006720:	2301      	movs	r3, #1
 8006722:	61a3      	str	r3, [r4, #24]
 8006724:	e7d2      	b.n	80066cc <__sinit+0xc>
 8006726:	bf00      	nop
 8006728:	08006b9c 	.word	0x08006b9c
 800672c:	08006659 	.word	0x08006659

08006730 <__sfp>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	4607      	mov	r7, r0
 8006734:	f7ff ffac 	bl	8006690 <__sfp_lock_acquire>
 8006738:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <__sfp+0x84>)
 800673a:	681e      	ldr	r6, [r3, #0]
 800673c:	69b3      	ldr	r3, [r6, #24]
 800673e:	b913      	cbnz	r3, 8006746 <__sfp+0x16>
 8006740:	4630      	mov	r0, r6
 8006742:	f7ff ffbd 	bl	80066c0 <__sinit>
 8006746:	3648      	adds	r6, #72	; 0x48
 8006748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800674c:	3b01      	subs	r3, #1
 800674e:	d503      	bpl.n	8006758 <__sfp+0x28>
 8006750:	6833      	ldr	r3, [r6, #0]
 8006752:	b30b      	cbz	r3, 8006798 <__sfp+0x68>
 8006754:	6836      	ldr	r6, [r6, #0]
 8006756:	e7f7      	b.n	8006748 <__sfp+0x18>
 8006758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800675c:	b9d5      	cbnz	r5, 8006794 <__sfp+0x64>
 800675e:	4b16      	ldr	r3, [pc, #88]	; (80067b8 <__sfp+0x88>)
 8006760:	60e3      	str	r3, [r4, #12]
 8006762:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006766:	6665      	str	r5, [r4, #100]	; 0x64
 8006768:	f000 f847 	bl	80067fa <__retarget_lock_init_recursive>
 800676c:	f7ff ff96 	bl	800669c <__sfp_lock_release>
 8006770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006778:	6025      	str	r5, [r4, #0]
 800677a:	61a5      	str	r5, [r4, #24]
 800677c:	2208      	movs	r2, #8
 800677e:	4629      	mov	r1, r5
 8006780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006784:	f7fd fba2 	bl	8003ecc <memset>
 8006788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800678c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006790:	4620      	mov	r0, r4
 8006792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006794:	3468      	adds	r4, #104	; 0x68
 8006796:	e7d9      	b.n	800674c <__sfp+0x1c>
 8006798:	2104      	movs	r1, #4
 800679a:	4638      	mov	r0, r7
 800679c:	f7ff ff62 	bl	8006664 <__sfmoreglue>
 80067a0:	4604      	mov	r4, r0
 80067a2:	6030      	str	r0, [r6, #0]
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d1d5      	bne.n	8006754 <__sfp+0x24>
 80067a8:	f7ff ff78 	bl	800669c <__sfp_lock_release>
 80067ac:	230c      	movs	r3, #12
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	e7ee      	b.n	8006790 <__sfp+0x60>
 80067b2:	bf00      	nop
 80067b4:	08006b9c 	.word	0x08006b9c
 80067b8:	ffff0001 	.word	0xffff0001

080067bc <_fwalk_reent>:
 80067bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c0:	4606      	mov	r6, r0
 80067c2:	4688      	mov	r8, r1
 80067c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067c8:	2700      	movs	r7, #0
 80067ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ce:	f1b9 0901 	subs.w	r9, r9, #1
 80067d2:	d505      	bpl.n	80067e0 <_fwalk_reent+0x24>
 80067d4:	6824      	ldr	r4, [r4, #0]
 80067d6:	2c00      	cmp	r4, #0
 80067d8:	d1f7      	bne.n	80067ca <_fwalk_reent+0xe>
 80067da:	4638      	mov	r0, r7
 80067dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067e0:	89ab      	ldrh	r3, [r5, #12]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d907      	bls.n	80067f6 <_fwalk_reent+0x3a>
 80067e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ea:	3301      	adds	r3, #1
 80067ec:	d003      	beq.n	80067f6 <_fwalk_reent+0x3a>
 80067ee:	4629      	mov	r1, r5
 80067f0:	4630      	mov	r0, r6
 80067f2:	47c0      	blx	r8
 80067f4:	4307      	orrs	r7, r0
 80067f6:	3568      	adds	r5, #104	; 0x68
 80067f8:	e7e9      	b.n	80067ce <_fwalk_reent+0x12>

080067fa <__retarget_lock_init_recursive>:
 80067fa:	4770      	bx	lr

080067fc <__retarget_lock_acquire_recursive>:
 80067fc:	4770      	bx	lr

080067fe <__retarget_lock_release_recursive>:
 80067fe:	4770      	bx	lr

08006800 <__swhatbuf_r>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	460e      	mov	r6, r1
 8006804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006808:	2900      	cmp	r1, #0
 800680a:	b096      	sub	sp, #88	; 0x58
 800680c:	4614      	mov	r4, r2
 800680e:	461d      	mov	r5, r3
 8006810:	da08      	bge.n	8006824 <__swhatbuf_r+0x24>
 8006812:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	061a      	lsls	r2, r3, #24
 800681c:	d410      	bmi.n	8006840 <__swhatbuf_r+0x40>
 800681e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006822:	e00e      	b.n	8006842 <__swhatbuf_r+0x42>
 8006824:	466a      	mov	r2, sp
 8006826:	f000 f925 	bl	8006a74 <_fstat_r>
 800682a:	2800      	cmp	r0, #0
 800682c:	dbf1      	blt.n	8006812 <__swhatbuf_r+0x12>
 800682e:	9a01      	ldr	r2, [sp, #4]
 8006830:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006834:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006838:	425a      	negs	r2, r3
 800683a:	415a      	adcs	r2, r3
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	e7ee      	b.n	800681e <__swhatbuf_r+0x1e>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	2000      	movs	r0, #0
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	b016      	add	sp, #88	; 0x58
 8006848:	bd70      	pop	{r4, r5, r6, pc}
	...

0800684c <__smakebuf_r>:
 800684c:	898b      	ldrh	r3, [r1, #12]
 800684e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006850:	079d      	lsls	r5, r3, #30
 8006852:	4606      	mov	r6, r0
 8006854:	460c      	mov	r4, r1
 8006856:	d507      	bpl.n	8006868 <__smakebuf_r+0x1c>
 8006858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	2301      	movs	r3, #1
 8006862:	6163      	str	r3, [r4, #20]
 8006864:	b002      	add	sp, #8
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	ab01      	add	r3, sp, #4
 800686a:	466a      	mov	r2, sp
 800686c:	f7ff ffc8 	bl	8006800 <__swhatbuf_r>
 8006870:	9900      	ldr	r1, [sp, #0]
 8006872:	4605      	mov	r5, r0
 8006874:	4630      	mov	r0, r6
 8006876:	f7ff fb63 	bl	8005f40 <_malloc_r>
 800687a:	b948      	cbnz	r0, 8006890 <__smakebuf_r+0x44>
 800687c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006880:	059a      	lsls	r2, r3, #22
 8006882:	d4ef      	bmi.n	8006864 <__smakebuf_r+0x18>
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	f043 0302 	orr.w	r3, r3, #2
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	e7e3      	b.n	8006858 <__smakebuf_r+0xc>
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <__smakebuf_r+0x7c>)
 8006892:	62b3      	str	r3, [r6, #40]	; 0x28
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	6020      	str	r0, [r4, #0]
 8006898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	6163      	str	r3, [r4, #20]
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	6120      	str	r0, [r4, #16]
 80068a6:	b15b      	cbz	r3, 80068c0 <__smakebuf_r+0x74>
 80068a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 f8f3 	bl	8006a98 <_isatty_r>
 80068b2:	b128      	cbz	r0, 80068c0 <__smakebuf_r+0x74>
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	89a0      	ldrh	r0, [r4, #12]
 80068c2:	4305      	orrs	r5, r0
 80068c4:	81a5      	strh	r5, [r4, #12]
 80068c6:	e7cd      	b.n	8006864 <__smakebuf_r+0x18>
 80068c8:	08006659 	.word	0x08006659

080068cc <__ascii_mbtowc>:
 80068cc:	b082      	sub	sp, #8
 80068ce:	b901      	cbnz	r1, 80068d2 <__ascii_mbtowc+0x6>
 80068d0:	a901      	add	r1, sp, #4
 80068d2:	b142      	cbz	r2, 80068e6 <__ascii_mbtowc+0x1a>
 80068d4:	b14b      	cbz	r3, 80068ea <__ascii_mbtowc+0x1e>
 80068d6:	7813      	ldrb	r3, [r2, #0]
 80068d8:	600b      	str	r3, [r1, #0]
 80068da:	7812      	ldrb	r2, [r2, #0]
 80068dc:	1e10      	subs	r0, r2, #0
 80068de:	bf18      	it	ne
 80068e0:	2001      	movne	r0, #1
 80068e2:	b002      	add	sp, #8
 80068e4:	4770      	bx	lr
 80068e6:	4610      	mov	r0, r2
 80068e8:	e7fb      	b.n	80068e2 <__ascii_mbtowc+0x16>
 80068ea:	f06f 0001 	mvn.w	r0, #1
 80068ee:	e7f8      	b.n	80068e2 <__ascii_mbtowc+0x16>

080068f0 <__malloc_lock>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__malloc_lock+0x8>)
 80068f2:	f7ff bf83 	b.w	80067fc <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	200002ec 	.word	0x200002ec

080068fc <__malloc_unlock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__malloc_unlock+0x8>)
 80068fe:	f7ff bf7e 	b.w	80067fe <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	200002ec 	.word	0x200002ec

08006908 <_raise_r>:
 8006908:	291f      	cmp	r1, #31
 800690a:	b538      	push	{r3, r4, r5, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	460d      	mov	r5, r1
 8006910:	d904      	bls.n	800691c <_raise_r+0x14>
 8006912:	2316      	movs	r3, #22
 8006914:	6003      	str	r3, [r0, #0]
 8006916:	f04f 30ff 	mov.w	r0, #4294967295
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800691e:	b112      	cbz	r2, 8006926 <_raise_r+0x1e>
 8006920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006924:	b94b      	cbnz	r3, 800693a <_raise_r+0x32>
 8006926:	4620      	mov	r0, r4
 8006928:	f000 f830 	bl	800698c <_getpid_r>
 800692c:	462a      	mov	r2, r5
 800692e:	4601      	mov	r1, r0
 8006930:	4620      	mov	r0, r4
 8006932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006936:	f000 b817 	b.w	8006968 <_kill_r>
 800693a:	2b01      	cmp	r3, #1
 800693c:	d00a      	beq.n	8006954 <_raise_r+0x4c>
 800693e:	1c59      	adds	r1, r3, #1
 8006940:	d103      	bne.n	800694a <_raise_r+0x42>
 8006942:	2316      	movs	r3, #22
 8006944:	6003      	str	r3, [r0, #0]
 8006946:	2001      	movs	r0, #1
 8006948:	e7e7      	b.n	800691a <_raise_r+0x12>
 800694a:	2400      	movs	r4, #0
 800694c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006950:	4628      	mov	r0, r5
 8006952:	4798      	blx	r3
 8006954:	2000      	movs	r0, #0
 8006956:	e7e0      	b.n	800691a <_raise_r+0x12>

08006958 <raise>:
 8006958:	4b02      	ldr	r3, [pc, #8]	; (8006964 <raise+0xc>)
 800695a:	4601      	mov	r1, r0
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f7ff bfd3 	b.w	8006908 <_raise_r>
 8006962:	bf00      	nop
 8006964:	2000000c 	.word	0x2000000c

08006968 <_kill_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4d07      	ldr	r5, [pc, #28]	; (8006988 <_kill_r+0x20>)
 800696c:	2300      	movs	r3, #0
 800696e:	4604      	mov	r4, r0
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	f7fa fb67 	bl	8001048 <_kill>
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	d102      	bne.n	8006984 <_kill_r+0x1c>
 800697e:	682b      	ldr	r3, [r5, #0]
 8006980:	b103      	cbz	r3, 8006984 <_kill_r+0x1c>
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	bd38      	pop	{r3, r4, r5, pc}
 8006986:	bf00      	nop
 8006988:	200002f0 	.word	0x200002f0

0800698c <_getpid_r>:
 800698c:	f7fa bb54 	b.w	8001038 <_getpid>

08006990 <__sread>:
 8006990:	b510      	push	{r4, lr}
 8006992:	460c      	mov	r4, r1
 8006994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006998:	f000 f8a0 	bl	8006adc <_read_r>
 800699c:	2800      	cmp	r0, #0
 800699e:	bfab      	itete	ge
 80069a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069a2:	89a3      	ldrhlt	r3, [r4, #12]
 80069a4:	181b      	addge	r3, r3, r0
 80069a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069aa:	bfac      	ite	ge
 80069ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80069ae:	81a3      	strhlt	r3, [r4, #12]
 80069b0:	bd10      	pop	{r4, pc}

080069b2 <__swrite>:
 80069b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b6:	461f      	mov	r7, r3
 80069b8:	898b      	ldrh	r3, [r1, #12]
 80069ba:	05db      	lsls	r3, r3, #23
 80069bc:	4605      	mov	r5, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	4616      	mov	r6, r2
 80069c2:	d505      	bpl.n	80069d0 <__swrite+0x1e>
 80069c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c8:	2302      	movs	r3, #2
 80069ca:	2200      	movs	r2, #0
 80069cc:	f000 f874 	bl	8006ab8 <_lseek_r>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	4632      	mov	r2, r6
 80069de:	463b      	mov	r3, r7
 80069e0:	4628      	mov	r0, r5
 80069e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	f000 b823 	b.w	8006a30 <_write_r>

080069ea <__sseek>:
 80069ea:	b510      	push	{r4, lr}
 80069ec:	460c      	mov	r4, r1
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 f861 	bl	8006ab8 <_lseek_r>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	bf15      	itete	ne
 80069fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a06:	81a3      	strheq	r3, [r4, #12]
 8006a08:	bf18      	it	ne
 8006a0a:	81a3      	strhne	r3, [r4, #12]
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <__sclose>:
 8006a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a12:	f000 b81f 	b.w	8006a54 <_close_r>

08006a16 <__ascii_wctomb>:
 8006a16:	b149      	cbz	r1, 8006a2c <__ascii_wctomb+0x16>
 8006a18:	2aff      	cmp	r2, #255	; 0xff
 8006a1a:	bf85      	ittet	hi
 8006a1c:	238a      	movhi	r3, #138	; 0x8a
 8006a1e:	6003      	strhi	r3, [r0, #0]
 8006a20:	700a      	strbls	r2, [r1, #0]
 8006a22:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a26:	bf98      	it	ls
 8006a28:	2001      	movls	r0, #1
 8006a2a:	4770      	bx	lr
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	4770      	bx	lr

08006a30 <_write_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	; (8006a50 <_write_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fa fb39 	bl	80010b6 <_write>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_write_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_write_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	200002f0 	.word	0x200002f0

08006a54 <_close_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d06      	ldr	r5, [pc, #24]	; (8006a70 <_close_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	f7fa fb45 	bl	80010ee <_close>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_close_r+0x1a>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_close_r+0x1a>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	200002f0 	.word	0x200002f0

08006a74 <_fstat_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d07      	ldr	r5, [pc, #28]	; (8006a94 <_fstat_r+0x20>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	f7fa fb40 	bl	8001106 <_fstat>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d102      	bne.n	8006a90 <_fstat_r+0x1c>
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	b103      	cbz	r3, 8006a90 <_fstat_r+0x1c>
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop
 8006a94:	200002f0 	.word	0x200002f0

08006a98 <_isatty_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d06      	ldr	r5, [pc, #24]	; (8006ab4 <_isatty_r+0x1c>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	f7fa fb3f 	bl	8001126 <_isatty>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_isatty_r+0x1a>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_isatty_r+0x1a>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	200002f0 	.word	0x200002f0

08006ab8 <_lseek_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d07      	ldr	r5, [pc, #28]	; (8006ad8 <_lseek_r+0x20>)
 8006abc:	4604      	mov	r4, r0
 8006abe:	4608      	mov	r0, r1
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	602a      	str	r2, [r5, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f7fa fb38 	bl	800113c <_lseek>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_lseek_r+0x1e>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_lseek_r+0x1e>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	200002f0 	.word	0x200002f0

08006adc <_read_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d07      	ldr	r5, [pc, #28]	; (8006afc <_read_r+0x20>)
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	4608      	mov	r0, r1
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	602a      	str	r2, [r5, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f7fa fac6 	bl	800107c <_read>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_read_r+0x1e>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_read_r+0x1e>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	200002f0 	.word	0x200002f0

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr

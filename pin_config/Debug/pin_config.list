
pin_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d78  08004d78  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d80  08004d80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000074  08004dfc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004dfc  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ed  00000000  00000000  0002e64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00030a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00031570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f85  00000000  00000000  00031fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de16  00000000  00000000  00052f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1851  00000000  00000000  00060d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012259c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035dc  00000000  00000000  001225ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ba0 	.word	0x08004ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004ba0 	.word	0x08004ba0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 f9e5 	bl	8000966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f003 f8b8 	bl	8003710 <SystemClock_Config>
  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

 user_USART1_UART_Init();
 80005a0:	f003 f918 	bl	80037d4 <user_USART1_UART_Init>
//HAL_UART_Receive_IT(&huart1,(uint8_t *)buffer,20);
 HAL_UART_Receive(&huart1,(uint8_t *)buffer,20,1000);
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	2214      	movs	r2, #20
 80005aa:	490b      	ldr	r1, [pc, #44]	; (80005d8 <main+0x44>)
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <main+0x48>)
 80005ae:	f001 ff8f 	bl	80024d0 <HAL_UART_Receive>
 if(strcmp(buffer,"A5,OUTPUT")==0)
 80005b2:	490b      	ldr	r1, [pc, #44]	; (80005e0 <main+0x4c>)
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <main+0x44>)
 80005b6:	f7ff fe0b 	bl	80001d0 <strcmp>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d106      	bne.n	80005ce <main+0x3a>
	 HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f000 fa44 	bl	8000a50 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  while(flag==1)
 80005c8:	e001      	b.n	80005ce <main+0x3a>
	  {
	   Configurator();
 80005ca:	f002 ffdd 	bl	8003588 <Configurator>
	  while(flag==1)
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <main+0x50>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d0f9      	beq.n	80005ca <main+0x36>
 80005d6:	e7fa      	b.n	80005ce <main+0x3a>
 80005d8:	200000a0 	.word	0x200000a0
 80005dc:	200000b4 	.word	0x200000b4
 80005e0:	08004bb8 	.word	0x08004bb8
 80005e4:	20000000 	.word	0x20000000

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report  the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x44>)
 80005fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <HAL_MspInit+0x44>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6613      	str	r3, [r2, #96]	; 0x60
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_MspInit+0x44>)
 8000608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_MspInit+0x44>)
 8000614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <HAL_MspInit+0x44>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	6593      	str	r3, [r2, #88]	; 0x58
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_MspInit+0x44>)
 8000620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09e      	sub	sp, #120	; 0x78
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2254      	movs	r2, #84	; 0x54
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fa2d 	bl	8003abc <memset>
  if(huart->Instance==USART1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <HAL_UART_MspInit+0xb8>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d13f      	bne.n	80006ec <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000670:	2300      	movs	r3, #0
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fbe3 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000684:	f7ff ffb0 	bl	80005e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <HAL_UART_MspInit+0xbc>)
 800068a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068c:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <HAL_UART_MspInit+0xbc>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6613      	str	r3, [r2, #96]	; 0x60
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_UART_MspInit+0xbc>)
 8000696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_UART_MspInit+0xbc>)
 80006a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <HAL_UART_MspInit+0xbc>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_UART_MspInit+0xbc>)
 80006ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006ca:	2307      	movs	r3, #7
 80006cc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f000 fb6e 	bl	8000db8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2025      	movs	r0, #37	; 0x25
 80006e2:	f000 fab4 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006e6:	2025      	movs	r0, #37	; 0x25
 80006e8:	f000 facd 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ec:	bf00      	nop
 80006ee:	3778      	adds	r7, #120	; 0x78
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013800 	.word	0x40013800
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f962 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <USART1_IRQHandler+0x10>)
 8000756:	f001 ff8d 	bl	8002674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000b4 	.word	0x200000b4

08000764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return 1;
 8000768:	2301      	movs	r3, #1
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <_kill>:

int _kill(int pid, int sig)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800077e:	f003 f973 	bl	8003a68 <__errno>
 8000782:	4603      	mov	r3, r0
 8000784:	2216      	movs	r2, #22
 8000786:	601a      	str	r2, [r3, #0]
  return -1;
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <_exit>:

void _exit (int status)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffe7 	bl	8000774 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007a6:	e7fe      	b.n	80007a6 <_exit+0x12>

080007a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e00a      	b.n	80007d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ba:	f3af 8000 	nop.w
 80007be:	4601      	mov	r1, r0
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60ba      	str	r2, [r7, #8]
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dbf0      	blt.n	80007ba <_read+0x12>
  }

  return len;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e009      	b.n	8000808 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf1      	blt.n	80007f4 <_write+0x12>
  }
  return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_close>:

int _close(int file)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000842:	605a      	str	r2, [r3, #4]
  return 0;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <_isatty>:

int _isatty(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f003 f8d8 	bl	8003a68 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20010000 	.word	0x20010000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	20000090 	.word	0x20000090
 80008ec:	20000170 	.word	0x20000170

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	; (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f003 f897 	bl	8003a74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff fe25 	bl	8000594 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000958:	08004d88 	.word	0x08004d88
  ldr r2, =_sbss
 800095c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000960:	2000016c 	.word	0x2000016c

08000964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_IRQHandler>

08000966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f961 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f80e 	bl	8000998 <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e001      	b.n	800098c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000988:	f7ff fe34 	bl	80005f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d023      	beq.n	80009f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_InitTick+0x70>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f96d 	bl	8000ca2 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10f      	bne.n	80009ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d809      	bhi.n	80009e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f937 	bl	8000c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_InitTick+0x74>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e001      	b.n	80009f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000000c 	.word	0x2000000c
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	20000008 	.word	0x20000008

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	20000094 	.word	0x20000094

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000094 	.word	0x20000094

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000000c 	.word	0x2000000c

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d008      	beq.n	8000ce4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e022      	b.n	8000d2a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 020e 	bic.w	r2, r2, #14
 8000cf2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0201 	bic.w	r2, r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	f003 021c 	and.w	r2, r3, #28
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f202 	lsl.w	r2, r1, r2
 8000d16:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d005      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2204      	movs	r2, #4
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e029      	b.n	8000dae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 020e 	bic.w	r2, r2, #14
 8000d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0201 	bic.w	r2, r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f003 021c 	and.w	r2, r3, #28
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	4798      	blx	r3
    }
  }
  return status;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e148      	b.n	800105a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 813a 	beq.w	8001054 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x40>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d017      	beq.n	8000e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	6939      	ldr	r1, [r7, #16]
 8000ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0203 	and.w	r2, r3, #3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8094 	beq.w	8001054 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b52      	ldr	r3, [pc, #328]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f30:	4a51      	ldr	r2, [pc, #324]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6613      	str	r3, [r2, #96]	; 0x60
 8000f38:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <HAL_GPIO_Init+0x2c0>)
 8000f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x2c4>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f6e:	d00d      	beq.n	8000f8c <HAL_GPIO_Init+0x1d4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a43      	ldr	r2, [pc, #268]	; (8001080 <HAL_GPIO_Init+0x2c8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d007      	beq.n	8000f88 <HAL_GPIO_Init+0x1d0>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a42      	ldr	r2, [pc, #264]	; (8001084 <HAL_GPIO_Init+0x2cc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d101      	bne.n	8000f84 <HAL_GPIO_Init+0x1cc>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e004      	b.n	8000f8e <HAL_GPIO_Init+0x1d6>
 8000f84:	2307      	movs	r3, #7
 8000f86:	e002      	b.n	8000f8e <HAL_GPIO_Init+0x1d6>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_GPIO_Init+0x1d6>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f002 0203 	and.w	r2, r2, #3
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	4093      	lsls	r3, r2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9e:	4937      	ldr	r1, [pc, #220]	; (800107c <HAL_GPIO_Init+0x2c4>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_GPIO_Init+0x2d0>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	f47f aeaf 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40007000 	.word	0x40007000

0800110c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_PWREx_GetVoltageRange+0x18>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40007000 	.word	0x40007000

08001128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001136:	d130      	bne.n	800119a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001144:	d038      	beq.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001150:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001154:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2232      	movs	r2, #50	; 0x32
 800115c:	fb02 f303 	mul.w	r3, r2, r3
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9b      	lsrs	r3, r3, #18
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800116c:	e002      	b.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3b01      	subs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001180:	d102      	bne.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f2      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001194:	d110      	bne.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e00f      	b.n	80011ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a6:	d007      	beq.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b0:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40007000 	.word	0x40007000
 80011cc:	20000004 	.word	0x20000004
 80011d0:	431bde83 	.word	0x431bde83

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f000 bc02 	b.w	80019ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e8:	4b96      	ldr	r3, [pc, #600]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f2:	4b94      	ldr	r3, [pc, #592]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80e4 	beq.w	80013d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <HAL_RCC_OscConfig+0x4c>
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	f040 808b 	bne.w	800132e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2b01      	cmp	r3, #1
 800121c:	f040 8087 	bne.w	800132e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001220:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_OscConfig+0x64>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e3d9      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <HAL_RCC_OscConfig+0x7e>
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001250:	e005      	b.n	800125e <HAL_RCC_OscConfig+0x8a>
 8001252:	4b7c      	ldr	r3, [pc, #496]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800125e:	4293      	cmp	r3, r2
 8001260:	d223      	bcs.n	80012aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fd8c 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e3ba      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a72      	ldr	r2, [pc, #456]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	496d      	ldr	r1, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001290:	4313      	orrs	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001294:	4b6b      	ldr	r3, [pc, #428]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	4968      	ldr	r1, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]
 80012a8:	e025      	b.n	80012f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012aa:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a65      	ldr	r2, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b63      	ldr	r3, [pc, #396]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4960      	ldr	r1, [pc, #384]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c8:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	495b      	ldr	r1, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fd4c 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e37a      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f6:	f000 fc81 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	4950      	ldr	r1, [pc, #320]	; (8001448 <HAL_RCC_OscConfig+0x274>)
 8001308:	5ccb      	ldrb	r3, [r1, r3]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_RCC_OscConfig+0x278>)
 8001314:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001316:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <HAL_RCC_OscConfig+0x27c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fb3c 	bl	8000998 <HAL_InitTick>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d052      	beq.n	80013d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	e35e      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d032      	beq.n	800139c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a42      	ldr	r2, [pc, #264]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001342:	f7ff fb79 	bl	8000a38 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134a:	f7ff fb75 	bl	8000a38 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e347      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a35      	ldr	r2, [pc, #212]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4930      	ldr	r1, [pc, #192]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	492b      	ldr	r1, [pc, #172]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
 800139a:	e01a      	b.n	80013d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a28      	ldr	r2, [pc, #160]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb46 	bl	8000a38 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b0:	f7ff fb42 	bl	8000a38 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e314      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1dc>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d073      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x21c>
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d10e      	bne.n	8001408 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d10b      	bne.n	8001408 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d063      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d15f      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e2f1      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x24c>
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e025      	b.n	800146c <HAL_RCC_OscConfig+0x298>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001428:	d114      	bne.n	8001454 <HAL_RCC_OscConfig+0x280>
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a02      	ldr	r2, [pc, #8]	; (8001444 <HAL_RCC_OscConfig+0x270>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e013      	b.n	800146c <HAL_RCC_OscConfig+0x298>
 8001444:	40021000 	.word	0x40021000
 8001448:	08004be8 	.word	0x08004be8
 800144c:	20000004 	.word	0x20000004
 8001450:	20000008 	.word	0x20000008
 8001454:	4ba0      	ldr	r3, [pc, #640]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a9f      	ldr	r2, [pc, #636]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b9d      	ldr	r3, [pc, #628]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a9c      	ldr	r2, [pc, #624]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fae0 	bl	8000a38 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fadc 	bl	8000a38 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e2ae      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148e:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x2a8>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff facc 	bl	8000a38 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fac8 	bl	8000a38 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e29a      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b6:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d0>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d060      	beq.n	8001594 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x310>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d119      	bne.n	8001512 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d116      	bne.n	8001512 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e4:	4b7c      	ldr	r3, [pc, #496]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x328>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e277      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	4973      	ldr	r1, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001510:	e040      	b.n	8001594 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d023      	beq.n	8001562 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151a:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fa87 	bl	8000a38 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fa83 	bl	8000a38 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e255      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001540:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	495f      	ldr	r1, [pc, #380]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	e018      	b.n	8001594 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001562:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5c      	ldr	r2, [pc, #368]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fa63 	bl	8000a38 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fa5f 	bl	8000a38 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e231      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d03c      	beq.n	800161a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	4a4a      	ldr	r2, [pc, #296]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fa3e 	bl	8000a38 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fa3a 	bl	8000a38 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e20c      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ef      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3ec>
 80015e0:	e01b      	b.n	800161a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e8:	4a3b      	ldr	r2, [pc, #236]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa21 	bl	8000a38 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fa:	f7ff fa1d 	bl	8000a38 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1ef      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ef      	bne.n	80015fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80a6 	beq.w	8001774 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10d      	bne.n	8001654 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001642:	6593      	str	r3, [r2, #88]	; 0x58
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001650:	2301      	movs	r3, #1
 8001652:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d118      	bne.n	8001692 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166c:	f7ff f9e4 	bl	8000a38 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001674:	f7ff f9e0 	bl	8000a38 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1b2      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_RCC_OscConfig+0x508>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_RCC_OscConfig+0x4d8>
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016aa:	e029      	b.n	8001700 <HAL_RCC_OscConfig+0x52c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d115      	bne.n	80016e0 <HAL_RCC_OscConfig+0x50c>
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ca:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x52c>
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40007000 	.word	0x40007000
 80016e0:	4b9a      	ldr	r3, [pc, #616]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e6:	4a99      	ldr	r2, [pc, #612]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f0:	4b96      	ldr	r3, [pc, #600]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	4a95      	ldr	r2, [pc, #596]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d016      	beq.n	8001736 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff f996 	bl	8000a38 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff f992 	bl	8000a38 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e162      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	4b89      	ldr	r3, [pc, #548]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ed      	beq.n	8001710 <HAL_RCC_OscConfig+0x53c>
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff f97f 	bl	8000a38 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff f97b 	bl	8000a38 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e14b      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	4b7d      	ldr	r3, [pc, #500]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ed      	bne.n	800173e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001762:	7ffb      	ldrb	r3, [r7, #31]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b78      	ldr	r3, [pc, #480]	; (800194c <HAL_RCC_OscConfig+0x778>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	4a77      	ldr	r2, [pc, #476]	; (800194c <HAL_RCC_OscConfig+0x778>)
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001772:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03c      	beq.n	80017fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001788:	4b70      	ldr	r3, [pc, #448]	; (800194c <HAL_RCC_OscConfig+0x778>)
 800178a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800178e:	4a6f      	ldr	r2, [pc, #444]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff f94e 	bl	8000a38 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017a0:	f7ff f94a 	bl	8000a38 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e11c      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017b2:	4b66      	ldr	r3, [pc, #408]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80017b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ef      	beq.n	80017a0 <HAL_RCC_OscConfig+0x5cc>
 80017c0:	e01b      	b.n	80017fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017c2:	4b62      	ldr	r3, [pc, #392]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80017c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c8:	4a60      	ldr	r2, [pc, #384]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff f931 	bl	8000a38 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017da:	f7ff f92d 	bl	8000a38 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0ff      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017ec:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80017ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80f3 	beq.w	80019ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	2b02      	cmp	r3, #2
 800180a:	f040 80c9 	bne.w	80019a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	429a      	cmp	r2, r3
 8001820:	d12c      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	3b01      	subs	r3, #1
 800182e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d123      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d11b      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d113      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d109      	bne.n	800187c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	3b01      	subs	r3, #1
 8001876:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d06b      	beq.n	8001954 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d062      	beq.n	8001948 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0ac      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2d      	ldr	r2, [pc, #180]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800189c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800189e:	f7ff f8cb 	bl	8000a38 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f8c7 	bl	8000a38 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e099      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_RCC_OscConfig+0x778>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_RCC_OscConfig+0x77c>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018de:	0212      	lsls	r2, r2, #8
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018e6:	0852      	lsrs	r2, r2, #1
 80018e8:	3a01      	subs	r2, #1
 80018ea:	0552      	lsls	r2, r2, #21
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018f2:	0852      	lsrs	r2, r2, #1
 80018f4:	3a01      	subs	r2, #1
 80018f6:	0652      	lsls	r2, r2, #25
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018fe:	06d2      	lsls	r2, r2, #27
 8001900:	430a      	orrs	r2, r1
 8001902:	4912      	ldr	r1, [pc, #72]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_OscConfig+0x778>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_RCC_OscConfig+0x778>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_OscConfig+0x778>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x778>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001920:	f7ff f88a 	bl	8000a38 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f886 	bl	8000a38 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e058      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_RCC_OscConfig+0x778>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001946:	e050      	b.n	80019ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e04f      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
 800194c:	40021000 	.word	0x40021000
 8001950:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d144      	bne.n	80019ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001978:	f7ff f85e 	bl	8000a38 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f85a 	bl	8000a38 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e02c      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x7ac>
 800199e:	e024      	b.n	80019ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d01f      	beq.n	80019e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 80019ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff f841 	bl	8000a38 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f83d 	bl	8000a38 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e00f      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4905      	ldr	r1, [pc, #20]	; (80019f4 <HAL_RCC_OscConfig+0x820>)
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x824>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e001      	b.n	80019ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	feeefffc 	.word	0xfeeefffc

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0e7      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b75      	ldr	r3, [pc, #468]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4970      	ldr	r1, [pc, #448]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b6e      	ldr	r3, [pc, #440]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cf      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d908      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4960      	ldr	r1, [pc, #384]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d04c      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d121      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0a6      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9a:	4b54      	ldr	r3, [pc, #336]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e09a      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e08e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e086      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4943      	ldr	r1, [pc, #268]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae4:	f7fe ffa8 	bl	8000a38 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7fe ffa4 	bl	8000a38 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e06e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d208      	bcs.n	8001b42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	492b      	ldr	r1, [pc, #172]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d210      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 0207 	bic.w	r2, r3, #7
 8001b58:	4923      	ldr	r1, [pc, #140]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e036      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4918      	ldr	r1, [pc, #96]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4910      	ldr	r1, [pc, #64]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb0:	f000 f824 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	490b      	ldr	r1, [pc, #44]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fedf 	bl	8000998 <HAL_InitTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08004be8 	.word	0x08004be8
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	20000008 	.word	0x20000008

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x34>
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d121      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d11e      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e005      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c58:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10d      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	e004      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d134      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ca0:	e005      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca4:	617b      	str	r3, [r7, #20]
      break;
 8001ca6:	e005      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001caa:	617b      	str	r3, [r7, #20]
      break;
 8001cac:	e002      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	617b      	str	r3, [r7, #20]
      break;
 8001cb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	fb03 f202 	mul.w	r2, r3, r2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	0e5b      	lsrs	r3, r3, #25
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08004c00 	.word	0x08004c00
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08004bf8 	.word	0x08004bf8

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d5c:	f7ff ffda 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4904      	ldr	r1, [pc, #16]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08004bf8 	.word	0x08004bf8

08001d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d9c:	f7ff f9b6 	bl	800110c <HAL_PWREx_GetVoltageRange>
 8001da0:	6178      	str	r0, [r7, #20]
 8001da2:	e014      	b.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dbc:	f7ff f9a6 	bl	800110c <HAL_PWREx_GetVoltageRange>
 8001dc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d10b      	bne.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d919      	bls.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2ba0      	cmp	r3, #160	; 0xa0
 8001de0:	d902      	bls.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de2:	2302      	movs	r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e013      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de8:	2301      	movs	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e010      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d902      	bls.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e00a      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d102      	bne.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e004      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b70      	cmp	r3, #112	; 0x70
 8001e0a:	d101      	bne.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0207 	bic.w	r2, r3, #7
 8001e18:	4909      	ldr	r1, [pc, #36]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e50:	2300      	movs	r3, #0
 8001e52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d031      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e68:	d01a      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e6e:	d814      	bhi.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e78:	d10f      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e86:	e00c      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f9de 	bl	8002250 <RCCEx_PLLSAI1_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e98:	e003      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ea8:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	494e      	ldr	r1, [pc, #312]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ebe:	e001      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 809e 	beq.w	800200e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fd90 	bl	8000a38 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fd8c 	bl	8000a38 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d902      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d15a      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01e      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f8a:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d016      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fd4c 	bl	8000a38 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fd48 	bl	8000a38 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d902      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	74fb      	strb	r3, [r7, #19]
            break;
 8001fba:	e006      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ec      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	74bb      	strb	r3, [r7, #18]
 8001fec:	e006      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b8a      	ldr	r3, [pc, #552]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	4a89      	ldr	r2, [pc, #548]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800201a:	4b84      	ldr	r3, [pc, #528]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002020:	f023 0203 	bic.w	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4980      	ldr	r1, [pc, #512]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800203c:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f023 020c 	bic.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	4978      	ldr	r1, [pc, #480]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205e:	4b73      	ldr	r3, [pc, #460]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002064:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	496f      	ldr	r1, [pc, #444]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	4967      	ldr	r1, [pc, #412]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	495e      	ldr	r1, [pc, #376]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	4956      	ldr	r1, [pc, #344]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d028      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4945      	ldr	r1, [pc, #276]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002126:	d106      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a3f      	ldr	r2, [pc, #252]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002132:	60d3      	str	r3, [r2, #12]
 8002134:	e011      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800213e:	d10c      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f882 	bl	8002250 <RCCEx_PLLSAI1_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d028      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002166:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	492d      	ldr	r1, [pc, #180]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002184:	d106      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002190:	60d3      	str	r3, [r2, #12]
 8002192:	e011      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2101      	movs	r1, #1
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f853 	bl	8002250 <RCCEx_PLLSAI1_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e2:	d10c      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	2102      	movs	r1, #2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f830 	bl	8002250 <RCCEx_PLLSAI1_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002220:	7cbb      	ldrb	r3, [r7, #18]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6013      	str	r3, [r2, #0]
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000

08002250 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d018      	beq.n	800229c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800226a:	4b71      	ldr	r3, [pc, #452]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0203 	and.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d10d      	bne.n	8002296 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
       ||
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002282:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
       ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d047      	beq.n	8002326 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e044      	b.n	8002326 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d018      	beq.n	80022d6 <RCCEx_PLLSAI1_Config+0x86>
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d825      	bhi.n	80022f4 <RCCEx_PLLSAI1_Config+0xa4>
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d002      	beq.n	80022b2 <RCCEx_PLLSAI1_Config+0x62>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d009      	beq.n	80022c4 <RCCEx_PLLSAI1_Config+0x74>
 80022b0:	e020      	b.n	80022f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11d      	bne.n	80022fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c2:	e01a      	b.n	80022fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c4:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d116      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d4:	e013      	b.n	80022fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022d6:	4b56      	ldr	r3, [pc, #344]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10f      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022e2:	4b53      	ldr	r3, [pc, #332]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022f2:	e006      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      break;
 80022f8:	e004      	b.n	8002304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022fa:	bf00      	nop
 80022fc:	e002      	b.n	8002304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002302:	bf00      	nop
    }

    if(status == HAL_OK)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800230a:	4b49      	ldr	r3, [pc, #292]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	430b      	orrs	r3, r1
 8002320:	4943      	ldr	r1, [pc, #268]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002322:	4313      	orrs	r3, r2
 8002324:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d17c      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002338:	f7fe fb7e 	bl	8000a38 <HAL_GetTick>
 800233c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800233e:	e009      	b.n	8002354 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002340:	f7fe fb7a 	bl	8000a38 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d902      	bls.n	8002354 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	73fb      	strb	r3, [r7, #15]
        break;
 8002352:	e005      	b.n	8002360 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002354:	4b36      	ldr	r3, [pc, #216]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ef      	bne.n	8002340 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d15f      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d110      	bne.n	800238e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800236c:	4b30      	ldr	r3, [pc, #192]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002374:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6892      	ldr	r2, [r2, #8]
 800237c:	0211      	lsls	r1, r2, #8
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68d2      	ldr	r2, [r2, #12]
 8002382:	06d2      	lsls	r2, r2, #27
 8002384:	430a      	orrs	r2, r1
 8002386:	492a      	ldr	r1, [pc, #168]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	610b      	str	r3, [r1, #16]
 800238c:	e027      	b.n	80023de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d112      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800239c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6892      	ldr	r2, [r2, #8]
 80023a4:	0211      	lsls	r1, r2, #8
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	0852      	lsrs	r2, r2, #1
 80023ac:	3a01      	subs	r2, #1
 80023ae:	0552      	lsls	r2, r2, #21
 80023b0:	430a      	orrs	r2, r1
 80023b2:	491f      	ldr	r1, [pc, #124]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	610b      	str	r3, [r1, #16]
 80023b8:	e011      	b.n	80023de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	0211      	lsls	r1, r2, #8
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6952      	ldr	r2, [r2, #20]
 80023d0:	0852      	lsrs	r2, r2, #1
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0652      	lsls	r2, r2, #25
 80023d6:	430a      	orrs	r2, r1
 80023d8:	4915      	ldr	r1, [pc, #84]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fb25 	bl	8000a38 <HAL_GetTick>
 80023ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023f0:	e009      	b.n	8002406 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f2:	f7fe fb21 	bl	8000a38 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d902      	bls.n	8002406 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	73fb      	strb	r3, [r7, #15]
          break;
 8002404:	e005      	b.n	8002412 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ef      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e040      	b.n	80024c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe f8f0 	bl	800063c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fc00 	bl	8002c78 <UART_SetConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e022      	b.n	80024c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fe20 	bl	80030d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800249e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fea7 	bl	8003214 <UART_CheckIdleState>
 80024c6:	4603      	mov	r3, r0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	f040 80bf 	bne.w	8002668 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_UART_Receive+0x26>
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0b7      	b.n	800266a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_UART_Receive+0x38>
 8002504:	2302      	movs	r3, #2
 8002506:	e0b0      	b.n	800266a <HAL_UART_Receive+0x19a>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2222      	movs	r2, #34	; 0x22
 800251c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002524:	f7fe fa88 	bl	8000a38 <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	d10e      	bne.n	8002562 <HAL_UART_Receive+0x92>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_UART_Receive+0x88>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002556:	e02d      	b.n	80025b4 <HAL_UART_Receive+0xe4>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002560:	e028      	b.n	80025b4 <HAL_UART_Receive+0xe4>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <HAL_UART_Receive+0xb6>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_UART_Receive+0xac>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800257a:	e01b      	b.n	80025b4 <HAL_UART_Receive+0xe4>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	227f      	movs	r2, #127	; 0x7f
 8002580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002584:	e016      	b.n	80025b4 <HAL_UART_Receive+0xe4>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800258e:	d10d      	bne.n	80025ac <HAL_UART_Receive+0xdc>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <HAL_UART_Receive+0xd2>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	227f      	movs	r2, #127	; 0x7f
 800259c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025a0:	e008      	b.n	80025b4 <HAL_UART_Receive+0xe4>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	223f      	movs	r2, #63	; 0x3f
 80025a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025aa:	e003      	b.n	80025b4 <HAL_UART_Receive+0xe4>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80025ba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c4:	d108      	bne.n	80025d8 <HAL_UART_Receive+0x108>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e003      	b.n	80025e0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80025e8:	e033      	b.n	8002652 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2120      	movs	r1, #32
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fe56 	bl	80032a6 <UART_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e032      	b.n	800266a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10c      	bne.n	8002624 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002610:	b29a      	uxth	r2, r3
 8002612:	8a7b      	ldrh	r3, [r7, #18]
 8002614:	4013      	ands	r3, r2
 8002616:	b29a      	uxth	r2, r3
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	3302      	adds	r3, #2
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e00d      	b.n	8002640 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800262a:	b29b      	uxth	r3, r3
 800262c:	b2da      	uxtb	r2, r3
 800262e:	8a7b      	ldrh	r3, [r7, #18]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4013      	ands	r3, r2
 8002634:	b2da      	uxtb	r2, r3
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1c5      	bne.n	80025ea <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ba      	sub	sp, #232	; 0xe8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800269a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800269e:	f640 030f 	movw	r3, #2063	; 0x80f
 80026a2:	4013      	ands	r3, r2
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d115      	bne.n	80026dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00f      	beq.n	80026dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 82a6 	beq.w	8002c1e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
      }
      return;
 80026da:	e2a0      	b.n	8002c1e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80026dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8117 	beq.w	8002914 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <HAL_UART_IRQHandler+0x298>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 810a 	beq.w	8002914 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d011      	beq.n	8002730 <HAL_UART_IRQHandler+0xbc>
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d011      	beq.n	8002760 <HAL_UART_IRQHandler+0xec>
 800273c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2202      	movs	r2, #2
 800274e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d011      	beq.n	8002790 <HAL_UART_IRQHandler+0x11c>
 800276c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d017      	beq.n	80027cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800279c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2208      	movs	r2, #8
 80027ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c2:	f043 0208 	orr.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <HAL_UART_IRQHandler+0x18a>
 80027d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f4:	f043 0220 	orr.w	r2, r3, #32
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 820c 	beq.w	8002c22 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d005      	beq.n	8002856 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800284a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800284e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002852:	2b00      	cmp	r3, #0
 8002854:	d04f      	beq.n	80028f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fde9 	bl	800342e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d141      	bne.n	80028ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3308      	adds	r3, #8
 8002870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3308      	adds	r3, #8
 8002892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800289a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028a6:	e841 2300 	strex	r3, r2, [r1]
 80028aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1d9      	bne.n	800286a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d013      	beq.n	80028e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a13      	ldr	r2, [pc, #76]	; (8002910 <HAL_UART_IRQHandler+0x29c>)
 80028c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fa33 	bl	8000d36 <HAL_DMA_Abort_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80028e0:	4610      	mov	r0, r2
 80028e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	e00f      	b.n	8002906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f9b0 	bl	8002c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	e00b      	b.n	8002906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9ac 	bl	8002c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f4:	e007      	b.n	8002906 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9a8 	bl	8002c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002904:	e18d      	b.n	8002c22 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002906:	bf00      	nop
    return;
 8002908:	e18b      	b.n	8002c22 <HAL_UART_IRQHandler+0x5ae>
 800290a:	bf00      	nop
 800290c:	04000120 	.word	0x04000120
 8002910:	080034f5 	.word	0x080034f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 8146 	bne.w	8002baa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 813f 	beq.w	8002baa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800292c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8138 	beq.w	8002baa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	f040 80b4 	bne.w	8002aba <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800295e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 815f 	beq.w	8002c26 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800296e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002972:	429a      	cmp	r2, r3
 8002974:	f080 8157 	bcs.w	8002c26 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800297e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 8085 	bne.w	8002a9e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1da      	bne.n	8002994 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3308      	adds	r3, #8
 80029e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3308      	adds	r3, #8
 80029fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a0e:	e841 2300 	strex	r3, r2, [r1]
 8002a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e1      	bne.n	80029de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3308      	adds	r3, #8
 8002a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a46:	e841 2300 	strex	r3, r2, [r1]
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e3      	bne.n	8002a1a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a66:	e853 3f00 	ldrex	r3, [r3]
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6e:	f023 0310 	bic.w	r3, r3, #16
 8002a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a88:	e841 2300 	strex	r3, r2, [r1]
 8002a8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e4      	bne.n	8002a5e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f90e 	bl	8000cba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8d4 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ab8:	e0b5      	b.n	8002c26 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80a7 	beq.w	8002c2a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a2 	beq.w	8002c2a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	e853 3f00 	ldrex	r3, [r3]
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b10:	e841 2300 	strex	r3, r2, [r1]
 8002b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e4      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3308      	adds	r3, #8
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b40:	633a      	str	r2, [r7, #48]	; 0x30
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e3      	bne.n	8002b1c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0310 	bic.w	r3, r3, #16
 8002b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	69b9      	ldr	r1, [r7, #24]
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	617b      	str	r3, [r7, #20]
   return(result);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e4      	bne.n	8002b66 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f85c 	bl	8002c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ba8:	e03f      	b.n	8002c2a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x560>
 8002bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fcd1 	bl	8003574 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bd2:	e02d      	b.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01c      	beq.n	8002c2e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
    }
    return;
 8002bfc:	e017      	b.n	8002c2e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
 8002c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00c      	beq.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fc82 	bl	8003520 <UART_EndTransmit_IT>
    return;
 8002c1c:	e008      	b.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002c1e:	bf00      	nop
 8002c20:	e006      	b.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002c22:	bf00      	nop
 8002c24:	e004      	b.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002c26:	bf00      	nop
 8002c28:	e002      	b.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002c2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002c30:	37e8      	adds	r7, #232	; 0xe8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop

08002c38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c7c:	b08a      	sub	sp, #40	; 0x28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4bb4      	ldr	r3, [pc, #720]	; (8002f78 <UART_SetConfig+0x300>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4aa9      	ldr	r2, [pc, #676]	; (8002f7c <UART_SetConfig+0x304>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4aa0      	ldr	r2, [pc, #640]	; (8002f80 <UART_SetConfig+0x308>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d126      	bne.n	8002d50 <UART_SetConfig+0xd8>
 8002d02:	4ba0      	ldr	r3, [pc, #640]	; (8002f84 <UART_SetConfig+0x30c>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d81b      	bhi.n	8002d48 <UART_SetConfig+0xd0>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <UART_SetConfig+0xa0>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d39 	.word	0x08002d39
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d41 	.word	0x08002d41
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2e:	e080      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002d30:	2302      	movs	r3, #2
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d36:	e07c      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d3e:	e078      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002d40:	2308      	movs	r3, #8
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d46:	e074      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d4e:	e070      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a8c      	ldr	r2, [pc, #560]	; (8002f88 <UART_SetConfig+0x310>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d138      	bne.n	8002dcc <UART_SetConfig+0x154>
 8002d5a:	4b8a      	ldr	r3, [pc, #552]	; (8002f84 <UART_SetConfig+0x30c>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d82d      	bhi.n	8002dc4 <UART_SetConfig+0x14c>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <UART_SetConfig+0xf8>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08002dc5 	.word	0x08002dc5
 8002d78:	08002dc5 	.word	0x08002dc5
 8002d7c:	08002dc5 	.word	0x08002dc5
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08002dc5 	.word	0x08002dc5
 8002d88:	08002dc5 	.word	0x08002dc5
 8002d8c:	08002dc5 	.word	0x08002dc5
 8002d90:	08002dad 	.word	0x08002dad
 8002d94:	08002dc5 	.word	0x08002dc5
 8002d98:	08002dc5 	.word	0x08002dc5
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002dbd 	.word	0x08002dbd
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002daa:	e042      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db2:	e03e      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002db4:	2304      	movs	r3, #4
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dba:	e03a      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc2:	e036      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dca:	e032      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <UART_SetConfig+0x304>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d12a      	bne.n	8002e2c <UART_SetConfig+0x1b4>
 8002dd6:	4b6b      	ldr	r3, [pc, #428]	; (8002f84 <UART_SetConfig+0x30c>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002de4:	d01a      	beq.n	8002e1c <UART_SetConfig+0x1a4>
 8002de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dea:	d81b      	bhi.n	8002e24 <UART_SetConfig+0x1ac>
 8002dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df0:	d00c      	beq.n	8002e0c <UART_SetConfig+0x194>
 8002df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df6:	d815      	bhi.n	8002e24 <UART_SetConfig+0x1ac>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <UART_SetConfig+0x18c>
 8002dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e00:	d008      	beq.n	8002e14 <UART_SetConfig+0x19c>
 8002e02:	e00f      	b.n	8002e24 <UART_SetConfig+0x1ac>
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0a:	e012      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e12:	e00e      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002e14:	2304      	movs	r3, #4
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1a:	e00a      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e22:	e006      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002e24:	2310      	movs	r3, #16
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2a:	e002      	b.n	8002e32 <UART_SetConfig+0x1ba>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a51      	ldr	r2, [pc, #324]	; (8002f7c <UART_SetConfig+0x304>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d17a      	bne.n	8002f32 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d824      	bhi.n	8002e8e <UART_SetConfig+0x216>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0x1d4>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e8f 	.word	0x08002e8f
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08002e8f 	.word	0x08002e8f
 8002e5c:	08002e7f 	.word	0x08002e7f
 8002e60:	08002e8f 	.word	0x08002e8f
 8002e64:	08002e8f 	.word	0x08002e8f
 8002e68:	08002e8f 	.word	0x08002e8f
 8002e6c:	08002e87 	.word	0x08002e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7fe ff5c 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002e74:	61f8      	str	r0, [r7, #28]
        break;
 8002e76:	e010      	b.n	8002e9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e78:	4b44      	ldr	r3, [pc, #272]	; (8002f8c <UART_SetConfig+0x314>)
 8002e7a:	61fb      	str	r3, [r7, #28]
        break;
 8002e7c:	e00d      	b.n	8002e9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e7e:	f7fe febd 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8002e82:	61f8      	str	r0, [r7, #28]
        break;
 8002e84:	e009      	b.n	8002e9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8a:	61fb      	str	r3, [r7, #28]
        break;
 8002e8c:	e005      	b.n	8002e9a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8107 	beq.w	80030b0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d305      	bcc.n	8002ebe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d903      	bls.n	8002ec6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ec4:	e0f4      	b.n	80030b0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	461c      	mov	r4, r3
 8002ecc:	4615      	mov	r5, r2
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	022b      	lsls	r3, r5, #8
 8002ed8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002edc:	0222      	lsls	r2, r4, #8
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	6849      	ldr	r1, [r1, #4]
 8002ee2:	0849      	lsrs	r1, r1, #1
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	4688      	mov	r8, r1
 8002ee8:	4681      	mov	r9, r0
 8002eea:	eb12 0a08 	adds.w	sl, r2, r8
 8002eee:	eb43 0b09 	adc.w	fp, r3, r9
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f00:	4650      	mov	r0, sl
 8002f02:	4659      	mov	r1, fp
 8002f04:	f7fd f9c4 	bl	8000290 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f16:	d308      	bcc.n	8002f2a <UART_SetConfig+0x2b2>
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1e:	d204      	bcs.n	8002f2a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e0c2      	b.n	80030b0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f30:	e0be      	b.n	80030b0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3a:	d16a      	bne.n	8003012 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d834      	bhi.n	8002fae <UART_SetConfig+0x336>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <UART_SetConfig+0x2d4>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f91 	.word	0x08002f91
 8002f54:	08002f99 	.word	0x08002f99
 8002f58:	08002faf 	.word	0x08002faf
 8002f5c:	08002f9f 	.word	0x08002f9f
 8002f60:	08002faf 	.word	0x08002faf
 8002f64:	08002faf 	.word	0x08002faf
 8002f68:	08002faf 	.word	0x08002faf
 8002f6c:	08002fa7 	.word	0x08002fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7fe fedc 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002f74:	61f8      	str	r0, [r7, #28]
        break;
 8002f76:	e020      	b.n	8002fba <UART_SetConfig+0x342>
 8002f78:	efff69f3 	.word	0xefff69f3
 8002f7c:	40008000 	.word	0x40008000
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40004400 	.word	0x40004400
 8002f8c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f90:	f7fe fee2 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8002f94:	61f8      	str	r0, [r7, #28]
        break;
 8002f96:	e010      	b.n	8002fba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <UART_SetConfig+0x454>)
 8002f9a:	61fb      	str	r3, [r7, #28]
        break;
 8002f9c:	e00d      	b.n	8002fba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9e:	f7fe fe2d 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8002fa2:	61f8      	str	r0, [r7, #28]
        break;
 8002fa4:	e009      	b.n	8002fba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002faa:	61fb      	str	r3, [r7, #28]
        break;
 8002fac:	e005      	b.n	8002fba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d077      	beq.n	80030b0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005a      	lsls	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	441a      	add	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d916      	bls.n	800300a <UART_SetConfig+0x392>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe2:	d212      	bcs.n	800300a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f023 030f 	bic.w	r3, r3, #15
 8002fec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	8afb      	ldrh	r3, [r7, #22]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	8afa      	ldrh	r2, [r7, #22]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	e052      	b.n	80030b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003010:	e04e      	b.n	80030b0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003016:	2b08      	cmp	r3, #8
 8003018:	d827      	bhi.n	800306a <UART_SetConfig+0x3f2>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <UART_SetConfig+0x3a8>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003045 	.word	0x08003045
 8003024:	0800304d 	.word	0x0800304d
 8003028:	08003055 	.word	0x08003055
 800302c:	0800306b 	.word	0x0800306b
 8003030:	0800305b 	.word	0x0800305b
 8003034:	0800306b 	.word	0x0800306b
 8003038:	0800306b 	.word	0x0800306b
 800303c:	0800306b 	.word	0x0800306b
 8003040:	08003063 	.word	0x08003063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003044:	f7fe fe72 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8003048:	61f8      	str	r0, [r7, #28]
        break;
 800304a:	e014      	b.n	8003076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800304c:	f7fe fe84 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8003050:	61f8      	str	r0, [r7, #28]
        break;
 8003052:	e010      	b.n	8003076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <UART_SetConfig+0x454>)
 8003056:	61fb      	str	r3, [r7, #28]
        break;
 8003058:	e00d      	b.n	8003076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305a:	f7fe fdcf 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 800305e:	61f8      	str	r0, [r7, #28]
        break;
 8003060:	e009      	b.n	8003076 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003066:	61fb      	str	r3, [r7, #28]
        break;
 8003068:	e005      	b.n	8003076 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003074:	bf00      	nop
    }

    if (pclk != 0U)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d019      	beq.n	80030b0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	085a      	lsrs	r2, r3, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	441a      	add	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	d909      	bls.n	80030aa <UART_SetConfig+0x432>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d205      	bcs.n	80030aa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60da      	str	r2, [r3, #12]
 80030a8:	e002      	b.n	80030b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80030bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ca:	bf00      	nop
 80030cc:	00f42400 	.word	0x00f42400

080030d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01a      	beq.n	80031e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ce:	d10a      	bne.n	80031e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af02      	add	r7, sp, #8
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003224:	f7fd fc08 	bl	8000a38 <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d10e      	bne.n	8003256 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f82d 	bl	80032a6 <UART_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e023      	b.n	800329e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d10e      	bne.n	8003282 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f817 	bl	80032a6 <UART_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e00d      	b.n	800329e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b09c      	sub	sp, #112	; 0x70
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b6:	e0a5      	b.n	8003404 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	f000 80a1 	beq.w	8003404 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fd fbb9 	bl	8000a38 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80032d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d13e      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032ec:	667b      	str	r3, [r7, #100]	; 0x64
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e6      	bne.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3308      	adds	r3, #8
 8003310:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	663b      	str	r3, [r7, #96]	; 0x60
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3308      	adds	r3, #8
 8003328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800332a:	64ba      	str	r2, [r7, #72]	; 0x48
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1e5      	bne.n	800330a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e067      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d04f      	beq.n	8003404 <UART_WaitOnFlagUntilTimeout+0x15e>
      {

    	  if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003372:	d147      	bne.n	8003404 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800337c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	e853 3f00 	ldrex	r3, [r3]
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
 800339e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a4:	e841 2300 	strex	r3, r2, [r1]
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e6      	bne.n	800337e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	613b      	str	r3, [r7, #16]
   return(result);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3308      	adds	r3, #8
 80033ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033d0:	623a      	str	r2, [r7, #32]
 80033d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	69f9      	ldr	r1, [r7, #28]
 80033d6:	6a3a      	ldr	r2, [r7, #32]
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e5      	bne.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e010      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	f43f af4a 	beq.w	80032b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3770      	adds	r7, #112	; 0x70
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800342e:	b480      	push	{r7}
 8003430:	b095      	sub	sp, #84	; 0x54
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003454:	643b      	str	r3, [r7, #64]	; 0x40
 8003456:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800345a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e6      	bne.n	8003436 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	61fb      	str	r3, [r7, #28]
   return(result);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3308      	adds	r3, #8
 8003486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800348e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d118      	bne.n	80034d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f023 0310 	bic.w	r3, r3, #16
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	613b      	str	r3, [r7, #16]
   return(result);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e6      	bne.n	80034a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80034e8:	bf00      	nop
 80034ea:	3754      	adds	r7, #84	; 0x54
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff fb9a 	bl	8002c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	60bb      	str	r3, [r7, #8]
   return(result);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6979      	ldr	r1, [r7, #20]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	613b      	str	r3, [r7, #16]
   return(result);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e6      	bne.n	8003528 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fb66 	bl	8002c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356c:	bf00      	nop
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <Configurator>:




 void Configurator()
 {
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
	 //HAL_Delay(1000);
     //data_receive();

     extract_data();
 800358c:	f000 f804 	bl	8003598 <extract_data>
     pin_config();
 8003590:	f000 f83a 	bl	8003608 <pin_config>


//     	 clear_buffer();

 }
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}

08003598 <extract_data>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

void extract_data()
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	token = strtok(buffer, ",");
 800359c:	4915      	ldr	r1, [pc, #84]	; (80035f4 <extract_data+0x5c>)
 800359e:	4816      	ldr	r0, [pc, #88]	; (80035f8 <extract_data+0x60>)
 80035a0:	f000 faa8 	bl	8003af4 <strtok>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4a15      	ldr	r2, [pc, #84]	; (80035fc <extract_data+0x64>)
 80035a8:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <extract_data+0x64>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <extract_data+0x64>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2213      	movs	r2, #19
 80035b8:	4619      	mov	r1, r3
 80035ba:	4811      	ldr	r0, [pc, #68]	; (8003600 <extract_data+0x68>)
 80035bc:	f000 fa86 	bl	8003acc <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <extract_data+0x68>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	74da      	strb	r2, [r3, #19]
		         token = strtok(NULL, ",");
 80035c6:	490b      	ldr	r1, [pc, #44]	; (80035f4 <extract_data+0x5c>)
 80035c8:	2000      	movs	r0, #0
 80035ca:	f000 fa93 	bl	8003af4 <strtok>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <extract_data+0x64>)
 80035d2:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <extract_data+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <extract_data+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2209      	movs	r2, #9
 80035e2:	4619      	mov	r1, r3
 80035e4:	4807      	ldr	r0, [pc, #28]	; (8003604 <extract_data+0x6c>)
 80035e6:	f000 fa71 	bl	8003acc <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <extract_data+0x6c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	725a      	strb	r2, [r3, #9]
//		     if (token != NULL)
//		     {
//		         strncpy(arr3, token, sizeof(arr3) - 1);
//		         arr3[sizeof(arr3) - 1] = '\0'; // Ensure null-termination
//		     }
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	08004bc4 	.word	0x08004bc4
 80035f8:	200000a0 	.word	0x200000a0
 80035fc:	20000158 	.word	0x20000158
 8003600:	20000138 	.word	0x20000138
 8003604:	2000014c 	.word	0x2000014c

08003608 <pin_config>:


void pin_config()
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"A5")==0)
 800360c:	4936      	ldr	r1, [pc, #216]	; (80036e8 <pin_config+0xe0>)
 800360e:	4837      	ldr	r0, [pc, #220]	; (80036ec <pin_config+0xe4>)
 8003610:	f7fc fdde 	bl	80001d0 <strcmp>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <pin_config+0x1a>
			     {
			       switch_val=1;
 800361a:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <pin_config+0xe8>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e01f      	b.n	8003662 <pin_config+0x5a>
			     }
	            else if(strcmp(arr1,"A6")==0)
 8003622:	4934      	ldr	r1, [pc, #208]	; (80036f4 <pin_config+0xec>)
 8003624:	4831      	ldr	r0, [pc, #196]	; (80036ec <pin_config+0xe4>)
 8003626:	f7fc fdd3 	bl	80001d0 <strcmp>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <pin_config+0x30>
				 {
				   switch_val=2;
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <pin_config+0xe8>)
 8003632:	2202      	movs	r2, #2
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e014      	b.n	8003662 <pin_config+0x5a>
				 }
	            else if(strcmp(arr1,"B0")==0)
 8003638:	492f      	ldr	r1, [pc, #188]	; (80036f8 <pin_config+0xf0>)
 800363a:	482c      	ldr	r0, [pc, #176]	; (80036ec <pin_config+0xe4>)
 800363c:	f7fc fdc8 	bl	80001d0 <strcmp>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <pin_config+0x46>
	           	 {
	           		switch_val=3;
 8003646:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <pin_config+0xe8>)
 8003648:	2203      	movs	r2, #3
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e009      	b.n	8003662 <pin_config+0x5a>
	           	 }
	            else if(strcmp(arr1,"B1")==0)
 800364e:	492b      	ldr	r1, [pc, #172]	; (80036fc <pin_config+0xf4>)
 8003650:	4826      	ldr	r0, [pc, #152]	; (80036ec <pin_config+0xe4>)
 8003652:	f7fc fdbd 	bl	80001d0 <strcmp>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <pin_config+0x5a>
	             {
	            	switch_val=4;
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <pin_config+0xe8>)
 800365e:	2204      	movs	r2, #4
 8003660:	601a      	str	r2, [r3, #0]
	             }


			     switch(switch_val)
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <pin_config+0xe8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d13c      	bne.n	80036e4 <pin_config+0xdc>
			     {

			     case 1: if(strcmp(arr2,"OUTPUT")==0)
 800366a:	4925      	ldr	r1, [pc, #148]	; (8003700 <pin_config+0xf8>)
 800366c:	4825      	ldr	r0, [pc, #148]	; (8003704 <pin_config+0xfc>)
 800366e:	f7fc fdaf 	bl	80001d0 <strcmp>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10c      	bne.n	8003692 <pin_config+0x8a>
						{
			              user_GPIO_Init(GPIOA,GPIO_PIN_5,OUTPUT);
 8003678:	2200      	movs	r2, #0
 800367a:	2120      	movs	r1, #32
 800367c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003680:	f000 f8d8 	bl	8003834 <user_GPIO_Init>
						  write_gpio(GPIOA,GPIO_PIN_5, PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	2120      	movs	r1, #32
 8003688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800368c:	f000 f9da 	bl	8003a44 <write_gpio>
								}
							}
					    }

			     }
}
 8003690:	e028      	b.n	80036e4 <pin_config+0xdc>
			              else if(strcmp(arr2,"INPUT")==0)
 8003692:	491d      	ldr	r1, [pc, #116]	; (8003708 <pin_config+0x100>)
 8003694:	481b      	ldr	r0, [pc, #108]	; (8003704 <pin_config+0xfc>)
 8003696:	f7fc fd9b 	bl	80001d0 <strcmp>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d121      	bne.n	80036e4 <pin_config+0xdc>
						   user_GPIO_Init(GPIOA,GPIO_PIN_5,INPUT);
 80036a0:	2201      	movs	r2, #1
 80036a2:	2120      	movs	r1, #32
 80036a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a8:	f000 f8c4 	bl	8003834 <user_GPIO_Init>
						   A=read_gpio( GPIOA,GPIO_PIN_5);
 80036ac:	2120      	movs	r1, #32
 80036ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b2:	f000 f9b7 	bl	8003a24 <read_gpio>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <pin_config+0x104>)
 80036bc:	601a      	str	r2, [r3, #0]
							   if(A == 1)
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <pin_config+0x104>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d108      	bne.n	80036d8 <pin_config+0xd0>
								   user_output_GPIO_Init();
 80036c6:	f000 f95d 	bl	8003984 <user_output_GPIO_Init>
								   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,PIN_SET);//
 80036ca:	2201      	movs	r2, #1
 80036cc:	2108      	movs	r1, #8
 80036ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d2:	f7fd fcf3 	bl	80010bc <HAL_GPIO_WritePin>
}
 80036d6:	e005      	b.n	80036e4 <pin_config+0xdc>
									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,PIN_RESET);
 80036d8:	2200      	movs	r2, #0
 80036da:	2108      	movs	r1, #8
 80036dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036e0:	f7fd fcec 	bl	80010bc <HAL_GPIO_WritePin>
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	08004bc8 	.word	0x08004bc8
 80036ec:	20000138 	.word	0x20000138
 80036f0:	2000009c 	.word	0x2000009c
 80036f4:	08004bcc 	.word	0x08004bcc
 80036f8:	08004bd0 	.word	0x08004bd0
 80036fc:	08004bd4 	.word	0x08004bd4
 8003700:	08004bd8 	.word	0x08004bd8
 8003704:	2000014c 	.word	0x2000014c
 8003708:	08004be0 	.word	0x08004be0
 800370c:	20000098 	.word	0x20000098

08003710 <SystemClock_Config>:
GPIO_InitTypeDef GPIO_InitStruct = {0};


void SystemClock_Config(void)

{
 8003710:	b580      	push	{r7, lr}
 8003712:	b096      	sub	sp, #88	; 0x58
 8003714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	2244      	movs	r2, #68	; 0x44
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f9cc 	bl	8003abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003724:	463b      	mov	r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003732:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003736:	f7fd fcf7 	bl	8001128 <HAL_PWREx_ControlVoltageScaling>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003740:	f7fc ff52 	bl	80005e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003744:	f7fd fcd2 	bl	80010ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <SystemClock_Config+0xc0>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <SystemClock_Config+0xc0>)
 8003750:	f023 0318 	bic.w	r3, r3, #24
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003758:	2314      	movs	r3, #20
 800375a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800375c:	2301      	movs	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003760:	2301      	movs	r3, #1
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003768:	2360      	movs	r3, #96	; 0x60
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800376c:	2302      	movs	r3, #2
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003770:	2301      	movs	r3, #1
 8003772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003774:	2301      	movs	r3, #1
 8003776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003778:	2310      	movs	r3, #16
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800377c:	2307      	movs	r3, #7
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003780:	2302      	movs	r3, #2
 8003782:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003784:	2302      	movs	r3, #2
 8003786:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003788:	f107 0314 	add.w	r3, r7, #20
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd fd21 	bl	80011d4 <HAL_RCC_OscConfig>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003798:	f7fc ff26 	bl	80005e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800379c:	230f      	movs	r3, #15
 800379e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037a0:	2303      	movs	r3, #3
 80037a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037b0:	463b      	mov	r3, r7
 80037b2:	2101      	movs	r1, #1
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe f921 	bl	80019fc <HAL_RCC_ClockConfig>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80037c0:	f7fc ff12 	bl	80005e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80037c4:	f7fe fd34 	bl	8002230 <HAL_RCCEx_EnableMSIPLLMode>
}
 80037c8:	bf00      	nop
 80037ca:	3758      	adds	r7, #88	; 0x58
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <user_USART1_UART_Init+0x58>)
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <user_USART1_UART_Init+0x5c>)
 80037dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <user_USART1_UART_Init+0x58>)
 80037e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <user_USART1_UART_Init+0x58>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <user_USART1_UART_Init+0x58>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <user_USART1_UART_Init+0x58>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <user_USART1_UART_Init+0x58>)
 80037fa:	220c      	movs	r2, #12
 80037fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <user_USART1_UART_Init+0x58>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <user_USART1_UART_Init+0x58>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <user_USART1_UART_Init+0x58>)
 800380c:	2200      	movs	r2, #0
 800380e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <user_USART1_UART_Init+0x58>)
 8003812:	2200      	movs	r2, #0
 8003814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003816:	4805      	ldr	r0, [pc, #20]	; (800382c <user_USART1_UART_Init+0x58>)
 8003818:	f7fe fe0c 	bl	8002434 <HAL_UART_Init>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <user_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003822:	f7fc fee1 	bl	80005e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200000b4 	.word	0x200000b4
 8003830:	40013800 	.word	0x40013800

08003834 <user_GPIO_Init>:


 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
 8003840:	4613      	mov	r3, r2
 8003842:	707b      	strb	r3, [r7, #1]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <user_GPIO_Init+0xc8>)
 8003856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <user_GPIO_Init+0xc8>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <user_GPIO_Init+0xc8>)
 8003862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800386c:	4b23      	ldr	r3, [pc, #140]	; (80038fc <user_GPIO_Init+0xc8>)
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	4a22      	ldr	r2, [pc, #136]	; (80038fc <user_GPIO_Init+0xc8>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <user_GPIO_Init+0xc8>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <user_GPIO_Init+0xc8>)
 8003886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003888:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <user_GPIO_Init+0xc8>)
 800388a:	f043 0302 	orr.w	r3, r3, #2
 800388e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003890:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <user_GPIO_Init+0xc8>)
 8003892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 800389c:	787a      	ldrb	r2, [r7, #1]
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fc0a 	bl	80010bc <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <user_GPIO_Init+0x88>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 80038ae:	787a      	ldrb	r2, [r7, #1]
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f823 	bl	8003900 <gpio_output>
 80038ba:	e008      	b.n	80038ce <user_GPIO_Init+0x9a>
     }
     else if(PIN_mode == INPUT)
 80038bc:	787b      	ldrb	r3, [r7, #1]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <user_GPIO_Init+0x9a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 80038c2:	787a      	ldrb	r2, [r7, #1]
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f83b 	bl	8003944 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
   GPIO_InitStruct.Pin = VCP_RX_Pin;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80038e0:	2303      	movs	r3, #3
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4619      	mov	r1, r3
 80038ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ee:	f7fd fa63 	bl	8000db8 <HAL_GPIO_Init>

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 80038f2:	bf00      	nop
 80038f4:	3728      	adds	r7, #40	; 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
 800390c:	4613      	mov	r3, r2
 800390e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003924:	2301      	movs	r3, #1
 8003926:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fa3e 	bl	8000db8 <HAL_GPIO_Init>
 }
 800393c:	bf00      	nop
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	807b      	strh	r3, [r7, #2]
 8003950:	4613      	mov	r3, r2
 8003952:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	f107 030c 	add.w	r3, r7, #12
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd fa1e 	bl	8000db8 <HAL_GPIO_Init>
 }
 800397c:	bf00      	nop
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <user_output_GPIO_Init>:

 void user_output_GPIO_Init(void)
  {
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398a:	f107 030c 	add.w	r3, r7, #12
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <user_output_GPIO_Init+0x9c>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <user_output_GPIO_Init+0x9c>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <user_output_GPIO_Init+0x9c>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <user_output_GPIO_Init+0x9c>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <user_output_GPIO_Init+0x9c>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039be:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <user_output_GPIO_Init+0x9c>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80039ca:	2200      	movs	r2, #0
 80039cc:	21f8      	movs	r1, #248	; 0xf8
 80039ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039d2:	f7fd fb73 	bl	80010bc <HAL_GPIO_WritePin>
                                 |GPIO_PIN_7, GPIO_PIN_RESET);


         /*Configure GPIO pins : PA3 PA4 PA5 PA6
                                  PA7 */
         GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80039d6:	23f8      	movs	r3, #248	; 0xf8
 80039d8:	60fb      	str	r3, [r7, #12]
                                 |GPIO_PIN_7;
         GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039da:	2301      	movs	r3, #1
 80039dc:	613b      	str	r3, [r7, #16]
         GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	4619      	mov	r1, r3
 80039ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f0:	f7fd f9e2 	bl	8000db8 <HAL_GPIO_Init>



    /*Configure GPIO pin : VCP_RX_Pin */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80039f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a02:	2303      	movs	r3, #3
 8003a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003a06:	2303      	movs	r3, #3
 8003a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a14:	f7fd f9d0 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
  }
 8003a18:	bf00      	nop
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000

08003a24 <read_gpio>:
// }



 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	4619      	mov	r1, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fd fb29 	bl	800108c <HAL_GPIO_ReadPin>
 8003a3a:	4603      	mov	r3, r0

 }
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <write_gpio>:

 void write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
 8003a50:	4613      	mov	r3, r2
 8003a52:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8003a54:	787a      	ldrb	r2, [r7, #1]
 8003a56:	887b      	ldrh	r3, [r7, #2]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd fb2e 	bl	80010bc <HAL_GPIO_WritePin>

 }
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <__errno>:
 8003a68:	4b01      	ldr	r3, [pc, #4]	; (8003a70 <__errno+0x8>)
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000010 	.word	0x20000010

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4d0d      	ldr	r5, [pc, #52]	; (8003aac <__libc_init_array+0x38>)
 8003a78:	4c0d      	ldr	r4, [pc, #52]	; (8003ab0 <__libc_init_array+0x3c>)
 8003a7a:	1b64      	subs	r4, r4, r5
 8003a7c:	10a4      	asrs	r4, r4, #2
 8003a7e:	2600      	movs	r6, #0
 8003a80:	42a6      	cmp	r6, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	4d0b      	ldr	r5, [pc, #44]	; (8003ab4 <__libc_init_array+0x40>)
 8003a86:	4c0c      	ldr	r4, [pc, #48]	; (8003ab8 <__libc_init_array+0x44>)
 8003a88:	f001 f88a 	bl	8004ba0 <_init>
 8003a8c:	1b64      	subs	r4, r4, r5
 8003a8e:	10a4      	asrs	r4, r4, #2
 8003a90:	2600      	movs	r6, #0
 8003a92:	42a6      	cmp	r6, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9c:	4798      	blx	r3
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa6:	4798      	blx	r3
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	08004d80 	.word	0x08004d80
 8003ab0:	08004d80 	.word	0x08004d80
 8003ab4:	08004d80 	.word	0x08004d80
 8003ab8:	08004d84 	.word	0x08004d84

08003abc <memset>:
 8003abc:	4402      	add	r2, r0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <strncpy>:
 8003acc:	b510      	push	{r4, lr}
 8003ace:	3901      	subs	r1, #1
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	b132      	cbz	r2, 8003ae2 <strncpy+0x16>
 8003ad4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003ad8:	f803 4b01 	strb.w	r4, [r3], #1
 8003adc:	3a01      	subs	r2, #1
 8003ade:	2c00      	cmp	r4, #0
 8003ae0:	d1f7      	bne.n	8003ad2 <strncpy+0x6>
 8003ae2:	441a      	add	r2, r3
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d100      	bne.n	8003aec <strncpy+0x20>
 8003aea:	bd10      	pop	{r4, pc}
 8003aec:	f803 1b01 	strb.w	r1, [r3], #1
 8003af0:	e7f9      	b.n	8003ae6 <strncpy+0x1a>
	...

08003af4 <strtok>:
 8003af4:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <strtok+0x5c>)
 8003af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003af8:	681e      	ldr	r6, [r3, #0]
 8003afa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003afc:	4605      	mov	r5, r0
 8003afe:	b9fc      	cbnz	r4, 8003b40 <strtok+0x4c>
 8003b00:	2050      	movs	r0, #80	; 0x50
 8003b02:	9101      	str	r1, [sp, #4]
 8003b04:	f000 f882 	bl	8003c0c <malloc>
 8003b08:	9901      	ldr	r1, [sp, #4]
 8003b0a:	65b0      	str	r0, [r6, #88]	; 0x58
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	b920      	cbnz	r0, 8003b1a <strtok+0x26>
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <strtok+0x60>)
 8003b12:	4811      	ldr	r0, [pc, #68]	; (8003b58 <strtok+0x64>)
 8003b14:	2157      	movs	r1, #87	; 0x57
 8003b16:	f000 f849 	bl	8003bac <__assert_func>
 8003b1a:	e9c0 4400 	strd	r4, r4, [r0]
 8003b1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003b22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003b26:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003b2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003b2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003b32:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003b36:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003b3a:	6184      	str	r4, [r0, #24]
 8003b3c:	7704      	strb	r4, [r0, #28]
 8003b3e:	6244      	str	r4, [r0, #36]	; 0x24
 8003b40:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003b42:	2301      	movs	r3, #1
 8003b44:	4628      	mov	r0, r5
 8003b46:	b002      	add	sp, #8
 8003b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b4c:	f000 b806 	b.w	8003b5c <__strtok_r>
 8003b50:	20000010 	.word	0x20000010
 8003b54:	08004c34 	.word	0x08004c34
 8003b58:	08004c4b 	.word	0x08004c4b

08003b5c <__strtok_r>:
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	b908      	cbnz	r0, 8003b64 <__strtok_r+0x8>
 8003b60:	6810      	ldr	r0, [r2, #0]
 8003b62:	b188      	cbz	r0, 8003b88 <__strtok_r+0x2c>
 8003b64:	4604      	mov	r4, r0
 8003b66:	4620      	mov	r0, r4
 8003b68:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003b6c:	460f      	mov	r7, r1
 8003b6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003b72:	b91e      	cbnz	r6, 8003b7c <__strtok_r+0x20>
 8003b74:	b965      	cbnz	r5, 8003b90 <__strtok_r+0x34>
 8003b76:	6015      	str	r5, [r2, #0]
 8003b78:	4628      	mov	r0, r5
 8003b7a:	e005      	b.n	8003b88 <__strtok_r+0x2c>
 8003b7c:	42b5      	cmp	r5, r6
 8003b7e:	d1f6      	bne.n	8003b6e <__strtok_r+0x12>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <__strtok_r+0xa>
 8003b84:	6014      	str	r4, [r2, #0]
 8003b86:	7003      	strb	r3, [r0, #0]
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	461c      	mov	r4, r3
 8003b8c:	e00c      	b.n	8003ba8 <__strtok_r+0x4c>
 8003b8e:	b915      	cbnz	r5, 8003b96 <__strtok_r+0x3a>
 8003b90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b94:	460e      	mov	r6, r1
 8003b96:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003b9a:	42ab      	cmp	r3, r5
 8003b9c:	d1f7      	bne.n	8003b8e <__strtok_r+0x32>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f3      	beq.n	8003b8a <__strtok_r+0x2e>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003ba8:	6014      	str	r4, [r2, #0]
 8003baa:	e7ed      	b.n	8003b88 <__strtok_r+0x2c>

08003bac <__assert_func>:
 8003bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bae:	4614      	mov	r4, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <__assert_func+0x2c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	68d8      	ldr	r0, [r3, #12]
 8003bba:	b14c      	cbz	r4, 8003bd0 <__assert_func+0x24>
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <__assert_func+0x30>)
 8003bbe:	9100      	str	r1, [sp, #0]
 8003bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bc4:	4906      	ldr	r1, [pc, #24]	; (8003be0 <__assert_func+0x34>)
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	f000 f80e 	bl	8003be8 <fiprintf>
 8003bcc:	f000 fcc4 	bl	8004558 <abort>
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <__assert_func+0x38>)
 8003bd2:	461c      	mov	r4, r3
 8003bd4:	e7f3      	b.n	8003bbe <__assert_func+0x12>
 8003bd6:	bf00      	nop
 8003bd8:	20000010 	.word	0x20000010
 8003bdc:	08004ca8 	.word	0x08004ca8
 8003be0:	08004cb5 	.word	0x08004cb5
 8003be4:	08004ce3 	.word	0x08004ce3

08003be8 <fiprintf>:
 8003be8:	b40e      	push	{r1, r2, r3}
 8003bea:	b503      	push	{r0, r1, lr}
 8003bec:	4601      	mov	r1, r0
 8003bee:	ab03      	add	r3, sp, #12
 8003bf0:	4805      	ldr	r0, [pc, #20]	; (8003c08 <fiprintf+0x20>)
 8003bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bf6:	6800      	ldr	r0, [r0, #0]
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	f000 f919 	bl	8003e30 <_vfiprintf_r>
 8003bfe:	b002      	add	sp, #8
 8003c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c04:	b003      	add	sp, #12
 8003c06:	4770      	bx	lr
 8003c08:	20000010 	.word	0x20000010

08003c0c <malloc>:
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <malloc+0xc>)
 8003c0e:	4601      	mov	r1, r0
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f000 b86f 	b.w	8003cf4 <_malloc_r>
 8003c16:	bf00      	nop
 8003c18:	20000010 	.word	0x20000010

08003c1c <_free_r>:
 8003c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d044      	beq.n	8003cac <_free_r+0x90>
 8003c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c26:	9001      	str	r0, [sp, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003c2e:	bfb8      	it	lt
 8003c30:	18e4      	addlt	r4, r4, r3
 8003c32:	f000 feb9 	bl	80049a8 <__malloc_lock>
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <_free_r+0x94>)
 8003c38:	9801      	ldr	r0, [sp, #4]
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	b933      	cbnz	r3, 8003c4c <_free_r+0x30>
 8003c3e:	6063      	str	r3, [r4, #4]
 8003c40:	6014      	str	r4, [r2, #0]
 8003c42:	b003      	add	sp, #12
 8003c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c48:	f000 beb4 	b.w	80049b4 <__malloc_unlock>
 8003c4c:	42a3      	cmp	r3, r4
 8003c4e:	d908      	bls.n	8003c62 <_free_r+0x46>
 8003c50:	6825      	ldr	r5, [r4, #0]
 8003c52:	1961      	adds	r1, r4, r5
 8003c54:	428b      	cmp	r3, r1
 8003c56:	bf01      	itttt	eq
 8003c58:	6819      	ldreq	r1, [r3, #0]
 8003c5a:	685b      	ldreq	r3, [r3, #4]
 8003c5c:	1949      	addeq	r1, r1, r5
 8003c5e:	6021      	streq	r1, [r4, #0]
 8003c60:	e7ed      	b.n	8003c3e <_free_r+0x22>
 8003c62:	461a      	mov	r2, r3
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b10b      	cbz	r3, 8003c6c <_free_r+0x50>
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	d9fa      	bls.n	8003c62 <_free_r+0x46>
 8003c6c:	6811      	ldr	r1, [r2, #0]
 8003c6e:	1855      	adds	r5, r2, r1
 8003c70:	42a5      	cmp	r5, r4
 8003c72:	d10b      	bne.n	8003c8c <_free_r+0x70>
 8003c74:	6824      	ldr	r4, [r4, #0]
 8003c76:	4421      	add	r1, r4
 8003c78:	1854      	adds	r4, r2, r1
 8003c7a:	42a3      	cmp	r3, r4
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	d1e0      	bne.n	8003c42 <_free_r+0x26>
 8003c80:	681c      	ldr	r4, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	6053      	str	r3, [r2, #4]
 8003c86:	4421      	add	r1, r4
 8003c88:	6011      	str	r1, [r2, #0]
 8003c8a:	e7da      	b.n	8003c42 <_free_r+0x26>
 8003c8c:	d902      	bls.n	8003c94 <_free_r+0x78>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	6003      	str	r3, [r0, #0]
 8003c92:	e7d6      	b.n	8003c42 <_free_r+0x26>
 8003c94:	6825      	ldr	r5, [r4, #0]
 8003c96:	1961      	adds	r1, r4, r5
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	bf04      	itt	eq
 8003c9c:	6819      	ldreq	r1, [r3, #0]
 8003c9e:	685b      	ldreq	r3, [r3, #4]
 8003ca0:	6063      	str	r3, [r4, #4]
 8003ca2:	bf04      	itt	eq
 8003ca4:	1949      	addeq	r1, r1, r5
 8003ca6:	6021      	streq	r1, [r4, #0]
 8003ca8:	6054      	str	r4, [r2, #4]
 8003caa:	e7ca      	b.n	8003c42 <_free_r+0x26>
 8003cac:	b003      	add	sp, #12
 8003cae:	bd30      	pop	{r4, r5, pc}
 8003cb0:	2000015c 	.word	0x2000015c

08003cb4 <sbrk_aligned>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4e0e      	ldr	r6, [pc, #56]	; (8003cf0 <sbrk_aligned+0x3c>)
 8003cb8:	460c      	mov	r4, r1
 8003cba:	6831      	ldr	r1, [r6, #0]
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	b911      	cbnz	r1, 8003cc6 <sbrk_aligned+0x12>
 8003cc0:	f000 fb7a 	bl	80043b8 <_sbrk_r>
 8003cc4:	6030      	str	r0, [r6, #0]
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 fb75 	bl	80043b8 <_sbrk_r>
 8003cce:	1c43      	adds	r3, r0, #1
 8003cd0:	d00a      	beq.n	8003ce8 <sbrk_aligned+0x34>
 8003cd2:	1cc4      	adds	r4, r0, #3
 8003cd4:	f024 0403 	bic.w	r4, r4, #3
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d007      	beq.n	8003cec <sbrk_aligned+0x38>
 8003cdc:	1a21      	subs	r1, r4, r0
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 fb6a 	bl	80043b8 <_sbrk_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d101      	bne.n	8003cec <sbrk_aligned+0x38>
 8003ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8003cec:	4620      	mov	r0, r4
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	20000160 	.word	0x20000160

08003cf4 <_malloc_r>:
 8003cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf8:	1ccd      	adds	r5, r1, #3
 8003cfa:	f025 0503 	bic.w	r5, r5, #3
 8003cfe:	3508      	adds	r5, #8
 8003d00:	2d0c      	cmp	r5, #12
 8003d02:	bf38      	it	cc
 8003d04:	250c      	movcc	r5, #12
 8003d06:	2d00      	cmp	r5, #0
 8003d08:	4607      	mov	r7, r0
 8003d0a:	db01      	blt.n	8003d10 <_malloc_r+0x1c>
 8003d0c:	42a9      	cmp	r1, r5
 8003d0e:	d905      	bls.n	8003d1c <_malloc_r+0x28>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	2600      	movs	r6, #0
 8003d16:	4630      	mov	r0, r6
 8003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d1c:	4e2e      	ldr	r6, [pc, #184]	; (8003dd8 <_malloc_r+0xe4>)
 8003d1e:	f000 fe43 	bl	80049a8 <__malloc_lock>
 8003d22:	6833      	ldr	r3, [r6, #0]
 8003d24:	461c      	mov	r4, r3
 8003d26:	bb34      	cbnz	r4, 8003d76 <_malloc_r+0x82>
 8003d28:	4629      	mov	r1, r5
 8003d2a:	4638      	mov	r0, r7
 8003d2c:	f7ff ffc2 	bl	8003cb4 <sbrk_aligned>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	4604      	mov	r4, r0
 8003d34:	d14d      	bne.n	8003dd2 <_malloc_r+0xde>
 8003d36:	6834      	ldr	r4, [r6, #0]
 8003d38:	4626      	mov	r6, r4
 8003d3a:	2e00      	cmp	r6, #0
 8003d3c:	d140      	bne.n	8003dc0 <_malloc_r+0xcc>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	4631      	mov	r1, r6
 8003d42:	4638      	mov	r0, r7
 8003d44:	eb04 0803 	add.w	r8, r4, r3
 8003d48:	f000 fb36 	bl	80043b8 <_sbrk_r>
 8003d4c:	4580      	cmp	r8, r0
 8003d4e:	d13a      	bne.n	8003dc6 <_malloc_r+0xd2>
 8003d50:	6821      	ldr	r1, [r4, #0]
 8003d52:	3503      	adds	r5, #3
 8003d54:	1a6d      	subs	r5, r5, r1
 8003d56:	f025 0503 	bic.w	r5, r5, #3
 8003d5a:	3508      	adds	r5, #8
 8003d5c:	2d0c      	cmp	r5, #12
 8003d5e:	bf38      	it	cc
 8003d60:	250c      	movcc	r5, #12
 8003d62:	4629      	mov	r1, r5
 8003d64:	4638      	mov	r0, r7
 8003d66:	f7ff ffa5 	bl	8003cb4 <sbrk_aligned>
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d02b      	beq.n	8003dc6 <_malloc_r+0xd2>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	442b      	add	r3, r5
 8003d72:	6023      	str	r3, [r4, #0]
 8003d74:	e00e      	b.n	8003d94 <_malloc_r+0xa0>
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	1b52      	subs	r2, r2, r5
 8003d7a:	d41e      	bmi.n	8003dba <_malloc_r+0xc6>
 8003d7c:	2a0b      	cmp	r2, #11
 8003d7e:	d916      	bls.n	8003dae <_malloc_r+0xba>
 8003d80:	1961      	adds	r1, r4, r5
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	6025      	str	r5, [r4, #0]
 8003d86:	bf18      	it	ne
 8003d88:	6059      	strne	r1, [r3, #4]
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	bf08      	it	eq
 8003d8e:	6031      	streq	r1, [r6, #0]
 8003d90:	5162      	str	r2, [r4, r5]
 8003d92:	604b      	str	r3, [r1, #4]
 8003d94:	4638      	mov	r0, r7
 8003d96:	f104 060b 	add.w	r6, r4, #11
 8003d9a:	f000 fe0b 	bl	80049b4 <__malloc_unlock>
 8003d9e:	f026 0607 	bic.w	r6, r6, #7
 8003da2:	1d23      	adds	r3, r4, #4
 8003da4:	1af2      	subs	r2, r6, r3
 8003da6:	d0b6      	beq.n	8003d16 <_malloc_r+0x22>
 8003da8:	1b9b      	subs	r3, r3, r6
 8003daa:	50a3      	str	r3, [r4, r2]
 8003dac:	e7b3      	b.n	8003d16 <_malloc_r+0x22>
 8003dae:	6862      	ldr	r2, [r4, #4]
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	bf0c      	ite	eq
 8003db4:	6032      	streq	r2, [r6, #0]
 8003db6:	605a      	strne	r2, [r3, #4]
 8003db8:	e7ec      	b.n	8003d94 <_malloc_r+0xa0>
 8003dba:	4623      	mov	r3, r4
 8003dbc:	6864      	ldr	r4, [r4, #4]
 8003dbe:	e7b2      	b.n	8003d26 <_malloc_r+0x32>
 8003dc0:	4634      	mov	r4, r6
 8003dc2:	6876      	ldr	r6, [r6, #4]
 8003dc4:	e7b9      	b.n	8003d3a <_malloc_r+0x46>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	4638      	mov	r0, r7
 8003dcc:	f000 fdf2 	bl	80049b4 <__malloc_unlock>
 8003dd0:	e7a1      	b.n	8003d16 <_malloc_r+0x22>
 8003dd2:	6025      	str	r5, [r4, #0]
 8003dd4:	e7de      	b.n	8003d94 <_malloc_r+0xa0>
 8003dd6:	bf00      	nop
 8003dd8:	2000015c 	.word	0x2000015c

08003ddc <__sfputc_r>:
 8003ddc:	6893      	ldr	r3, [r2, #8]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	b410      	push	{r4}
 8003de4:	6093      	str	r3, [r2, #8]
 8003de6:	da08      	bge.n	8003dfa <__sfputc_r+0x1e>
 8003de8:	6994      	ldr	r4, [r2, #24]
 8003dea:	42a3      	cmp	r3, r4
 8003dec:	db01      	blt.n	8003df2 <__sfputc_r+0x16>
 8003dee:	290a      	cmp	r1, #10
 8003df0:	d103      	bne.n	8003dfa <__sfputc_r+0x1e>
 8003df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003df6:	f000 baef 	b.w	80043d8 <__swbuf_r>
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	1c58      	adds	r0, r3, #1
 8003dfe:	6010      	str	r0, [r2, #0]
 8003e00:	7019      	strb	r1, [r3, #0]
 8003e02:	4608      	mov	r0, r1
 8003e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <__sfputs_r>:
 8003e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	460f      	mov	r7, r1
 8003e10:	4614      	mov	r4, r2
 8003e12:	18d5      	adds	r5, r2, r3
 8003e14:	42ac      	cmp	r4, r5
 8003e16:	d101      	bne.n	8003e1c <__sfputs_r+0x12>
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e007      	b.n	8003e2c <__sfputs_r+0x22>
 8003e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e20:	463a      	mov	r2, r7
 8003e22:	4630      	mov	r0, r6
 8003e24:	f7ff ffda 	bl	8003ddc <__sfputc_r>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d1f3      	bne.n	8003e14 <__sfputs_r+0xa>
 8003e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e30 <_vfiprintf_r>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	460d      	mov	r5, r1
 8003e36:	b09d      	sub	sp, #116	; 0x74
 8003e38:	4614      	mov	r4, r2
 8003e3a:	4698      	mov	r8, r3
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	b118      	cbz	r0, 8003e48 <_vfiprintf_r+0x18>
 8003e40:	6983      	ldr	r3, [r0, #24]
 8003e42:	b90b      	cbnz	r3, 8003e48 <_vfiprintf_r+0x18>
 8003e44:	f000 fcaa 	bl	800479c <__sinit>
 8003e48:	4b89      	ldr	r3, [pc, #548]	; (8004070 <_vfiprintf_r+0x240>)
 8003e4a:	429d      	cmp	r5, r3
 8003e4c:	d11b      	bne.n	8003e86 <_vfiprintf_r+0x56>
 8003e4e:	6875      	ldr	r5, [r6, #4]
 8003e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e52:	07d9      	lsls	r1, r3, #31
 8003e54:	d405      	bmi.n	8003e62 <_vfiprintf_r+0x32>
 8003e56:	89ab      	ldrh	r3, [r5, #12]
 8003e58:	059a      	lsls	r2, r3, #22
 8003e5a:	d402      	bmi.n	8003e62 <_vfiprintf_r+0x32>
 8003e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e5e:	f000 fd3b 	bl	80048d8 <__retarget_lock_acquire_recursive>
 8003e62:	89ab      	ldrh	r3, [r5, #12]
 8003e64:	071b      	lsls	r3, r3, #28
 8003e66:	d501      	bpl.n	8003e6c <_vfiprintf_r+0x3c>
 8003e68:	692b      	ldr	r3, [r5, #16]
 8003e6a:	b9eb      	cbnz	r3, 8003ea8 <_vfiprintf_r+0x78>
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f000 fb04 	bl	800447c <__swsetup_r>
 8003e74:	b1c0      	cbz	r0, 8003ea8 <_vfiprintf_r+0x78>
 8003e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e78:	07dc      	lsls	r4, r3, #31
 8003e7a:	d50e      	bpl.n	8003e9a <_vfiprintf_r+0x6a>
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	b01d      	add	sp, #116	; 0x74
 8003e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e86:	4b7b      	ldr	r3, [pc, #492]	; (8004074 <_vfiprintf_r+0x244>)
 8003e88:	429d      	cmp	r5, r3
 8003e8a:	d101      	bne.n	8003e90 <_vfiprintf_r+0x60>
 8003e8c:	68b5      	ldr	r5, [r6, #8]
 8003e8e:	e7df      	b.n	8003e50 <_vfiprintf_r+0x20>
 8003e90:	4b79      	ldr	r3, [pc, #484]	; (8004078 <_vfiprintf_r+0x248>)
 8003e92:	429d      	cmp	r5, r3
 8003e94:	bf08      	it	eq
 8003e96:	68f5      	ldreq	r5, [r6, #12]
 8003e98:	e7da      	b.n	8003e50 <_vfiprintf_r+0x20>
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	0598      	lsls	r0, r3, #22
 8003e9e:	d4ed      	bmi.n	8003e7c <_vfiprintf_r+0x4c>
 8003ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea2:	f000 fd1a 	bl	80048da <__retarget_lock_release_recursive>
 8003ea6:	e7e9      	b.n	8003e7c <_vfiprintf_r+0x4c>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8003eac:	2320      	movs	r3, #32
 8003eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eb6:	2330      	movs	r3, #48	; 0x30
 8003eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800407c <_vfiprintf_r+0x24c>
 8003ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ec0:	f04f 0901 	mov.w	r9, #1
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	469a      	mov	sl, r3
 8003ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ecc:	b10a      	cbz	r2, 8003ed2 <_vfiprintf_r+0xa2>
 8003ece:	2a25      	cmp	r2, #37	; 0x25
 8003ed0:	d1f9      	bne.n	8003ec6 <_vfiprintf_r+0x96>
 8003ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed6:	d00b      	beq.n	8003ef0 <_vfiprintf_r+0xc0>
 8003ed8:	465b      	mov	r3, fp
 8003eda:	4622      	mov	r2, r4
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff ff93 	bl	8003e0a <__sfputs_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f000 80aa 	beq.w	800403e <_vfiprintf_r+0x20e>
 8003eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eec:	445a      	add	r2, fp
 8003eee:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a2 	beq.w	800403e <_vfiprintf_r+0x20e>
 8003efa:	2300      	movs	r3, #0
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f04:	f10a 0a01 	add.w	sl, sl, #1
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	9307      	str	r3, [sp, #28]
 8003f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f10:	931a      	str	r3, [sp, #104]	; 0x68
 8003f12:	4654      	mov	r4, sl
 8003f14:	2205      	movs	r2, #5
 8003f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1a:	4858      	ldr	r0, [pc, #352]	; (800407c <_vfiprintf_r+0x24c>)
 8003f1c:	f7fc f968 	bl	80001f0 <memchr>
 8003f20:	9a04      	ldr	r2, [sp, #16]
 8003f22:	b9d8      	cbnz	r0, 8003f5c <_vfiprintf_r+0x12c>
 8003f24:	06d1      	lsls	r1, r2, #27
 8003f26:	bf44      	itt	mi
 8003f28:	2320      	movmi	r3, #32
 8003f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f2e:	0713      	lsls	r3, r2, #28
 8003f30:	bf44      	itt	mi
 8003f32:	232b      	movmi	r3, #43	; 0x2b
 8003f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f38:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3e:	d015      	beq.n	8003f6c <_vfiprintf_r+0x13c>
 8003f40:	9a07      	ldr	r2, [sp, #28]
 8003f42:	4654      	mov	r4, sl
 8003f44:	2000      	movs	r0, #0
 8003f46:	f04f 0c0a 	mov.w	ip, #10
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f50:	3b30      	subs	r3, #48	; 0x30
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	d94e      	bls.n	8003ff4 <_vfiprintf_r+0x1c4>
 8003f56:	b1b0      	cbz	r0, 8003f86 <_vfiprintf_r+0x156>
 8003f58:	9207      	str	r2, [sp, #28]
 8003f5a:	e014      	b.n	8003f86 <_vfiprintf_r+0x156>
 8003f5c:	eba0 0308 	sub.w	r3, r0, r8
 8003f60:	fa09 f303 	lsl.w	r3, r9, r3
 8003f64:	4313      	orrs	r3, r2
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	46a2      	mov	sl, r4
 8003f6a:	e7d2      	b.n	8003f12 <_vfiprintf_r+0xe2>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	1d19      	adds	r1, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	9103      	str	r1, [sp, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bfbb      	ittet	lt
 8003f78:	425b      	neglt	r3, r3
 8003f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f7e:	9307      	strge	r3, [sp, #28]
 8003f80:	9307      	strlt	r3, [sp, #28]
 8003f82:	bfb8      	it	lt
 8003f84:	9204      	strlt	r2, [sp, #16]
 8003f86:	7823      	ldrb	r3, [r4, #0]
 8003f88:	2b2e      	cmp	r3, #46	; 0x2e
 8003f8a:	d10c      	bne.n	8003fa6 <_vfiprintf_r+0x176>
 8003f8c:	7863      	ldrb	r3, [r4, #1]
 8003f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f90:	d135      	bne.n	8003ffe <_vfiprintf_r+0x1ce>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	9203      	str	r2, [sp, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bfb8      	it	lt
 8003f9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fa2:	3402      	adds	r4, #2
 8003fa4:	9305      	str	r3, [sp, #20]
 8003fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800408c <_vfiprintf_r+0x25c>
 8003faa:	7821      	ldrb	r1, [r4, #0]
 8003fac:	2203      	movs	r2, #3
 8003fae:	4650      	mov	r0, sl
 8003fb0:	f7fc f91e 	bl	80001f0 <memchr>
 8003fb4:	b140      	cbz	r0, 8003fc8 <_vfiprintf_r+0x198>
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	eba0 000a 	sub.w	r0, r0, sl
 8003fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc0:	9b04      	ldr	r3, [sp, #16]
 8003fc2:	4303      	orrs	r3, r0
 8003fc4:	3401      	adds	r4, #1
 8003fc6:	9304      	str	r3, [sp, #16]
 8003fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fcc:	482c      	ldr	r0, [pc, #176]	; (8004080 <_vfiprintf_r+0x250>)
 8003fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd2:	2206      	movs	r2, #6
 8003fd4:	f7fc f90c 	bl	80001f0 <memchr>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d03f      	beq.n	800405c <_vfiprintf_r+0x22c>
 8003fdc:	4b29      	ldr	r3, [pc, #164]	; (8004084 <_vfiprintf_r+0x254>)
 8003fde:	bb1b      	cbnz	r3, 8004028 <_vfiprintf_r+0x1f8>
 8003fe0:	9b03      	ldr	r3, [sp, #12]
 8003fe2:	3307      	adds	r3, #7
 8003fe4:	f023 0307 	bic.w	r3, r3, #7
 8003fe8:	3308      	adds	r3, #8
 8003fea:	9303      	str	r3, [sp, #12]
 8003fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fee:	443b      	add	r3, r7
 8003ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff2:	e767      	b.n	8003ec4 <_vfiprintf_r+0x94>
 8003ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	e7a5      	b.n	8003f4a <_vfiprintf_r+0x11a>
 8003ffe:	2300      	movs	r3, #0
 8004000:	3401      	adds	r4, #1
 8004002:	9305      	str	r3, [sp, #20]
 8004004:	4619      	mov	r1, r3
 8004006:	f04f 0c0a 	mov.w	ip, #10
 800400a:	4620      	mov	r0, r4
 800400c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004010:	3a30      	subs	r2, #48	; 0x30
 8004012:	2a09      	cmp	r2, #9
 8004014:	d903      	bls.n	800401e <_vfiprintf_r+0x1ee>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0c5      	beq.n	8003fa6 <_vfiprintf_r+0x176>
 800401a:	9105      	str	r1, [sp, #20]
 800401c:	e7c3      	b.n	8003fa6 <_vfiprintf_r+0x176>
 800401e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004022:	4604      	mov	r4, r0
 8004024:	2301      	movs	r3, #1
 8004026:	e7f0      	b.n	800400a <_vfiprintf_r+0x1da>
 8004028:	ab03      	add	r3, sp, #12
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	462a      	mov	r2, r5
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <_vfiprintf_r+0x258>)
 8004030:	a904      	add	r1, sp, #16
 8004032:	4630      	mov	r0, r6
 8004034:	f3af 8000 	nop.w
 8004038:	4607      	mov	r7, r0
 800403a:	1c78      	adds	r0, r7, #1
 800403c:	d1d6      	bne.n	8003fec <_vfiprintf_r+0x1bc>
 800403e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004040:	07d9      	lsls	r1, r3, #31
 8004042:	d405      	bmi.n	8004050 <_vfiprintf_r+0x220>
 8004044:	89ab      	ldrh	r3, [r5, #12]
 8004046:	059a      	lsls	r2, r3, #22
 8004048:	d402      	bmi.n	8004050 <_vfiprintf_r+0x220>
 800404a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800404c:	f000 fc45 	bl	80048da <__retarget_lock_release_recursive>
 8004050:	89ab      	ldrh	r3, [r5, #12]
 8004052:	065b      	lsls	r3, r3, #25
 8004054:	f53f af12 	bmi.w	8003e7c <_vfiprintf_r+0x4c>
 8004058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800405a:	e711      	b.n	8003e80 <_vfiprintf_r+0x50>
 800405c:	ab03      	add	r3, sp, #12
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	462a      	mov	r2, r5
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <_vfiprintf_r+0x258>)
 8004064:	a904      	add	r1, sp, #16
 8004066:	4630      	mov	r0, r6
 8004068:	f000 f880 	bl	800416c <_printf_i>
 800406c:	e7e4      	b.n	8004038 <_vfiprintf_r+0x208>
 800406e:	bf00      	nop
 8004070:	08004d38 	.word	0x08004d38
 8004074:	08004d58 	.word	0x08004d58
 8004078:	08004d18 	.word	0x08004d18
 800407c:	08004ce4 	.word	0x08004ce4
 8004080:	08004cee 	.word	0x08004cee
 8004084:	00000000 	.word	0x00000000
 8004088:	08003e0b 	.word	0x08003e0b
 800408c:	08004cea 	.word	0x08004cea

08004090 <_printf_common>:
 8004090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	4616      	mov	r6, r2
 8004096:	4699      	mov	r9, r3
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	690b      	ldr	r3, [r1, #16]
 800409c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bfb8      	it	lt
 80040a4:	4613      	movlt	r3, r2
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ac:	4607      	mov	r7, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	b10a      	cbz	r2, 80040b6 <_printf_common+0x26>
 80040b2:	3301      	adds	r3, #1
 80040b4:	6033      	str	r3, [r6, #0]
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	0699      	lsls	r1, r3, #26
 80040ba:	bf42      	ittt	mi
 80040bc:	6833      	ldrmi	r3, [r6, #0]
 80040be:	3302      	addmi	r3, #2
 80040c0:	6033      	strmi	r3, [r6, #0]
 80040c2:	6825      	ldr	r5, [r4, #0]
 80040c4:	f015 0506 	ands.w	r5, r5, #6
 80040c8:	d106      	bne.n	80040d8 <_printf_common+0x48>
 80040ca:	f104 0a19 	add.w	sl, r4, #25
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	6832      	ldr	r2, [r6, #0]
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	dc26      	bgt.n	8004126 <_printf_common+0x96>
 80040d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040dc:	1e13      	subs	r3, r2, #0
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	bf18      	it	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	0692      	lsls	r2, r2, #26
 80040e6:	d42b      	bmi.n	8004140 <_printf_common+0xb0>
 80040e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ec:	4649      	mov	r1, r9
 80040ee:	4638      	mov	r0, r7
 80040f0:	47c0      	blx	r8
 80040f2:	3001      	adds	r0, #1
 80040f4:	d01e      	beq.n	8004134 <_printf_common+0xa4>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	68e5      	ldr	r5, [r4, #12]
 80040fa:	6832      	ldr	r2, [r6, #0]
 80040fc:	f003 0306 	and.w	r3, r3, #6
 8004100:	2b04      	cmp	r3, #4
 8004102:	bf08      	it	eq
 8004104:	1aad      	subeq	r5, r5, r2
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	6922      	ldr	r2, [r4, #16]
 800410a:	bf0c      	ite	eq
 800410c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004110:	2500      	movne	r5, #0
 8004112:	4293      	cmp	r3, r2
 8004114:	bfc4      	itt	gt
 8004116:	1a9b      	subgt	r3, r3, r2
 8004118:	18ed      	addgt	r5, r5, r3
 800411a:	2600      	movs	r6, #0
 800411c:	341a      	adds	r4, #26
 800411e:	42b5      	cmp	r5, r6
 8004120:	d11a      	bne.n	8004158 <_printf_common+0xc8>
 8004122:	2000      	movs	r0, #0
 8004124:	e008      	b.n	8004138 <_printf_common+0xa8>
 8004126:	2301      	movs	r3, #1
 8004128:	4652      	mov	r2, sl
 800412a:	4649      	mov	r1, r9
 800412c:	4638      	mov	r0, r7
 800412e:	47c0      	blx	r8
 8004130:	3001      	adds	r0, #1
 8004132:	d103      	bne.n	800413c <_printf_common+0xac>
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413c:	3501      	adds	r5, #1
 800413e:	e7c6      	b.n	80040ce <_printf_common+0x3e>
 8004140:	18e1      	adds	r1, r4, r3
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	2030      	movs	r0, #48	; 0x30
 8004146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800414a:	4422      	add	r2, r4
 800414c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004154:	3302      	adds	r3, #2
 8004156:	e7c7      	b.n	80040e8 <_printf_common+0x58>
 8004158:	2301      	movs	r3, #1
 800415a:	4622      	mov	r2, r4
 800415c:	4649      	mov	r1, r9
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d0e6      	beq.n	8004134 <_printf_common+0xa4>
 8004166:	3601      	adds	r6, #1
 8004168:	e7d9      	b.n	800411e <_printf_common+0x8e>
	...

0800416c <_printf_i>:
 800416c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	7e0f      	ldrb	r7, [r1, #24]
 8004172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004174:	2f78      	cmp	r7, #120	; 0x78
 8004176:	4691      	mov	r9, r2
 8004178:	4680      	mov	r8, r0
 800417a:	460c      	mov	r4, r1
 800417c:	469a      	mov	sl, r3
 800417e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004182:	d807      	bhi.n	8004194 <_printf_i+0x28>
 8004184:	2f62      	cmp	r7, #98	; 0x62
 8004186:	d80a      	bhi.n	800419e <_printf_i+0x32>
 8004188:	2f00      	cmp	r7, #0
 800418a:	f000 80d8 	beq.w	800433e <_printf_i+0x1d2>
 800418e:	2f58      	cmp	r7, #88	; 0x58
 8004190:	f000 80a3 	beq.w	80042da <_printf_i+0x16e>
 8004194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800419c:	e03a      	b.n	8004214 <_printf_i+0xa8>
 800419e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041a2:	2b15      	cmp	r3, #21
 80041a4:	d8f6      	bhi.n	8004194 <_printf_i+0x28>
 80041a6:	a101      	add	r1, pc, #4	; (adr r1, 80041ac <_printf_i+0x40>)
 80041a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041ac:	08004205 	.word	0x08004205
 80041b0:	08004219 	.word	0x08004219
 80041b4:	08004195 	.word	0x08004195
 80041b8:	08004195 	.word	0x08004195
 80041bc:	08004195 	.word	0x08004195
 80041c0:	08004195 	.word	0x08004195
 80041c4:	08004219 	.word	0x08004219
 80041c8:	08004195 	.word	0x08004195
 80041cc:	08004195 	.word	0x08004195
 80041d0:	08004195 	.word	0x08004195
 80041d4:	08004195 	.word	0x08004195
 80041d8:	08004325 	.word	0x08004325
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004307 	.word	0x08004307
 80041e4:	08004195 	.word	0x08004195
 80041e8:	08004195 	.word	0x08004195
 80041ec:	08004347 	.word	0x08004347
 80041f0:	08004195 	.word	0x08004195
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004195 	.word	0x08004195
 80041fc:	08004195 	.word	0x08004195
 8004200:	0800430f 	.word	0x0800430f
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	602a      	str	r2, [r5, #0]
 800420c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004214:	2301      	movs	r3, #1
 8004216:	e0a3      	b.n	8004360 <_printf_i+0x1f4>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	6829      	ldr	r1, [r5, #0]
 800421c:	0606      	lsls	r6, r0, #24
 800421e:	f101 0304 	add.w	r3, r1, #4
 8004222:	d50a      	bpl.n	800423a <_printf_i+0xce>
 8004224:	680e      	ldr	r6, [r1, #0]
 8004226:	602b      	str	r3, [r5, #0]
 8004228:	2e00      	cmp	r6, #0
 800422a:	da03      	bge.n	8004234 <_printf_i+0xc8>
 800422c:	232d      	movs	r3, #45	; 0x2d
 800422e:	4276      	negs	r6, r6
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	485e      	ldr	r0, [pc, #376]	; (80043b0 <_printf_i+0x244>)
 8004236:	230a      	movs	r3, #10
 8004238:	e019      	b.n	800426e <_printf_i+0x102>
 800423a:	680e      	ldr	r6, [r1, #0]
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004242:	bf18      	it	ne
 8004244:	b236      	sxthne	r6, r6
 8004246:	e7ef      	b.n	8004228 <_printf_i+0xbc>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1d19      	adds	r1, r3, #4
 800424e:	6029      	str	r1, [r5, #0]
 8004250:	0601      	lsls	r1, r0, #24
 8004252:	d501      	bpl.n	8004258 <_printf_i+0xec>
 8004254:	681e      	ldr	r6, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0xf2>
 8004258:	0646      	lsls	r6, r0, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0xe8>
 800425c:	881e      	ldrh	r6, [r3, #0]
 800425e:	4854      	ldr	r0, [pc, #336]	; (80043b0 <_printf_i+0x244>)
 8004260:	2f6f      	cmp	r7, #111	; 0x6f
 8004262:	bf0c      	ite	eq
 8004264:	2308      	moveq	r3, #8
 8004266:	230a      	movne	r3, #10
 8004268:	2100      	movs	r1, #0
 800426a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800426e:	6865      	ldr	r5, [r4, #4]
 8004270:	60a5      	str	r5, [r4, #8]
 8004272:	2d00      	cmp	r5, #0
 8004274:	bfa2      	ittt	ge
 8004276:	6821      	ldrge	r1, [r4, #0]
 8004278:	f021 0104 	bicge.w	r1, r1, #4
 800427c:	6021      	strge	r1, [r4, #0]
 800427e:	b90e      	cbnz	r6, 8004284 <_printf_i+0x118>
 8004280:	2d00      	cmp	r5, #0
 8004282:	d04d      	beq.n	8004320 <_printf_i+0x1b4>
 8004284:	4615      	mov	r5, r2
 8004286:	fbb6 f1f3 	udiv	r1, r6, r3
 800428a:	fb03 6711 	mls	r7, r3, r1, r6
 800428e:	5dc7      	ldrb	r7, [r0, r7]
 8004290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004294:	4637      	mov	r7, r6
 8004296:	42bb      	cmp	r3, r7
 8004298:	460e      	mov	r6, r1
 800429a:	d9f4      	bls.n	8004286 <_printf_i+0x11a>
 800429c:	2b08      	cmp	r3, #8
 800429e:	d10b      	bne.n	80042b8 <_printf_i+0x14c>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	07de      	lsls	r6, r3, #31
 80042a4:	d508      	bpl.n	80042b8 <_printf_i+0x14c>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	6861      	ldr	r1, [r4, #4]
 80042aa:	4299      	cmp	r1, r3
 80042ac:	bfde      	ittt	le
 80042ae:	2330      	movle	r3, #48	; 0x30
 80042b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042b8:	1b52      	subs	r2, r2, r5
 80042ba:	6122      	str	r2, [r4, #16]
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	464b      	mov	r3, r9
 80042c2:	aa03      	add	r2, sp, #12
 80042c4:	4621      	mov	r1, r4
 80042c6:	4640      	mov	r0, r8
 80042c8:	f7ff fee2 	bl	8004090 <_printf_common>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d14c      	bne.n	800436a <_printf_i+0x1fe>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	b004      	add	sp, #16
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	4835      	ldr	r0, [pc, #212]	; (80043b0 <_printf_i+0x244>)
 80042dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042e0:	6829      	ldr	r1, [r5, #0]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e8:	6029      	str	r1, [r5, #0]
 80042ea:	061d      	lsls	r5, r3, #24
 80042ec:	d514      	bpl.n	8004318 <_printf_i+0x1ac>
 80042ee:	07df      	lsls	r7, r3, #31
 80042f0:	bf44      	itt	mi
 80042f2:	f043 0320 	orrmi.w	r3, r3, #32
 80042f6:	6023      	strmi	r3, [r4, #0]
 80042f8:	b91e      	cbnz	r6, 8004302 <_printf_i+0x196>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	f023 0320 	bic.w	r3, r3, #32
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	2310      	movs	r3, #16
 8004304:	e7b0      	b.n	8004268 <_printf_i+0xfc>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	2378      	movs	r3, #120	; 0x78
 8004310:	4828      	ldr	r0, [pc, #160]	; (80043b4 <_printf_i+0x248>)
 8004312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004316:	e7e3      	b.n	80042e0 <_printf_i+0x174>
 8004318:	0659      	lsls	r1, r3, #25
 800431a:	bf48      	it	mi
 800431c:	b2b6      	uxthmi	r6, r6
 800431e:	e7e6      	b.n	80042ee <_printf_i+0x182>
 8004320:	4615      	mov	r5, r2
 8004322:	e7bb      	b.n	800429c <_printf_i+0x130>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	6826      	ldr	r6, [r4, #0]
 8004328:	6961      	ldr	r1, [r4, #20]
 800432a:	1d18      	adds	r0, r3, #4
 800432c:	6028      	str	r0, [r5, #0]
 800432e:	0635      	lsls	r5, r6, #24
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	d501      	bpl.n	8004338 <_printf_i+0x1cc>
 8004334:	6019      	str	r1, [r3, #0]
 8004336:	e002      	b.n	800433e <_printf_i+0x1d2>
 8004338:	0670      	lsls	r0, r6, #25
 800433a:	d5fb      	bpl.n	8004334 <_printf_i+0x1c8>
 800433c:	8019      	strh	r1, [r3, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	4615      	mov	r5, r2
 8004344:	e7ba      	b.n	80042bc <_printf_i+0x150>
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	1d1a      	adds	r2, r3, #4
 800434a:	602a      	str	r2, [r5, #0]
 800434c:	681d      	ldr	r5, [r3, #0]
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	2100      	movs	r1, #0
 8004352:	4628      	mov	r0, r5
 8004354:	f7fb ff4c 	bl	80001f0 <memchr>
 8004358:	b108      	cbz	r0, 800435e <_printf_i+0x1f2>
 800435a:	1b40      	subs	r0, r0, r5
 800435c:	6060      	str	r0, [r4, #4]
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	2300      	movs	r3, #0
 8004364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004368:	e7a8      	b.n	80042bc <_printf_i+0x150>
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	462a      	mov	r2, r5
 800436e:	4649      	mov	r1, r9
 8004370:	4640      	mov	r0, r8
 8004372:	47d0      	blx	sl
 8004374:	3001      	adds	r0, #1
 8004376:	d0ab      	beq.n	80042d0 <_printf_i+0x164>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	079b      	lsls	r3, r3, #30
 800437c:	d413      	bmi.n	80043a6 <_printf_i+0x23a>
 800437e:	68e0      	ldr	r0, [r4, #12]
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	4298      	cmp	r0, r3
 8004384:	bfb8      	it	lt
 8004386:	4618      	movlt	r0, r3
 8004388:	e7a4      	b.n	80042d4 <_printf_i+0x168>
 800438a:	2301      	movs	r3, #1
 800438c:	4632      	mov	r2, r6
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	47d0      	blx	sl
 8004394:	3001      	adds	r0, #1
 8004396:	d09b      	beq.n	80042d0 <_printf_i+0x164>
 8004398:	3501      	adds	r5, #1
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	9903      	ldr	r1, [sp, #12]
 800439e:	1a5b      	subs	r3, r3, r1
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dcf2      	bgt.n	800438a <_printf_i+0x21e>
 80043a4:	e7eb      	b.n	800437e <_printf_i+0x212>
 80043a6:	2500      	movs	r5, #0
 80043a8:	f104 0619 	add.w	r6, r4, #25
 80043ac:	e7f5      	b.n	800439a <_printf_i+0x22e>
 80043ae:	bf00      	nop
 80043b0:	08004cf5 	.word	0x08004cf5
 80043b4:	08004d06 	.word	0x08004d06

080043b8 <_sbrk_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4d06      	ldr	r5, [pc, #24]	; (80043d4 <_sbrk_r+0x1c>)
 80043bc:	2300      	movs	r3, #0
 80043be:	4604      	mov	r4, r0
 80043c0:	4608      	mov	r0, r1
 80043c2:	602b      	str	r3, [r5, #0]
 80043c4:	f7fc fa5e 	bl	8000884 <_sbrk>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	d102      	bne.n	80043d2 <_sbrk_r+0x1a>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b103      	cbz	r3, 80043d2 <_sbrk_r+0x1a>
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	20000168 	.word	0x20000168

080043d8 <__swbuf_r>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	460e      	mov	r6, r1
 80043dc:	4614      	mov	r4, r2
 80043de:	4605      	mov	r5, r0
 80043e0:	b118      	cbz	r0, 80043ea <__swbuf_r+0x12>
 80043e2:	6983      	ldr	r3, [r0, #24]
 80043e4:	b90b      	cbnz	r3, 80043ea <__swbuf_r+0x12>
 80043e6:	f000 f9d9 	bl	800479c <__sinit>
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <__swbuf_r+0x98>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	d12b      	bne.n	8004448 <__swbuf_r+0x70>
 80043f0:	686c      	ldr	r4, [r5, #4]
 80043f2:	69a3      	ldr	r3, [r4, #24]
 80043f4:	60a3      	str	r3, [r4, #8]
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	071a      	lsls	r2, r3, #28
 80043fa:	d52f      	bpl.n	800445c <__swbuf_r+0x84>
 80043fc:	6923      	ldr	r3, [r4, #16]
 80043fe:	b36b      	cbz	r3, 800445c <__swbuf_r+0x84>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	1ac0      	subs	r0, r0, r3
 8004406:	6963      	ldr	r3, [r4, #20]
 8004408:	b2f6      	uxtb	r6, r6
 800440a:	4283      	cmp	r3, r0
 800440c:	4637      	mov	r7, r6
 800440e:	dc04      	bgt.n	800441a <__swbuf_r+0x42>
 8004410:	4621      	mov	r1, r4
 8004412:	4628      	mov	r0, r5
 8004414:	f000 f92e 	bl	8004674 <_fflush_r>
 8004418:	bb30      	cbnz	r0, 8004468 <__swbuf_r+0x90>
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	3b01      	subs	r3, #1
 800441e:	60a3      	str	r3, [r4, #8]
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	6022      	str	r2, [r4, #0]
 8004426:	701e      	strb	r6, [r3, #0]
 8004428:	6963      	ldr	r3, [r4, #20]
 800442a:	3001      	adds	r0, #1
 800442c:	4283      	cmp	r3, r0
 800442e:	d004      	beq.n	800443a <__swbuf_r+0x62>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	07db      	lsls	r3, r3, #31
 8004434:	d506      	bpl.n	8004444 <__swbuf_r+0x6c>
 8004436:	2e0a      	cmp	r6, #10
 8004438:	d104      	bne.n	8004444 <__swbuf_r+0x6c>
 800443a:	4621      	mov	r1, r4
 800443c:	4628      	mov	r0, r5
 800443e:	f000 f919 	bl	8004674 <_fflush_r>
 8004442:	b988      	cbnz	r0, 8004468 <__swbuf_r+0x90>
 8004444:	4638      	mov	r0, r7
 8004446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <__swbuf_r+0x9c>)
 800444a:	429c      	cmp	r4, r3
 800444c:	d101      	bne.n	8004452 <__swbuf_r+0x7a>
 800444e:	68ac      	ldr	r4, [r5, #8]
 8004450:	e7cf      	b.n	80043f2 <__swbuf_r+0x1a>
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <__swbuf_r+0xa0>)
 8004454:	429c      	cmp	r4, r3
 8004456:	bf08      	it	eq
 8004458:	68ec      	ldreq	r4, [r5, #12]
 800445a:	e7ca      	b.n	80043f2 <__swbuf_r+0x1a>
 800445c:	4621      	mov	r1, r4
 800445e:	4628      	mov	r0, r5
 8004460:	f000 f80c 	bl	800447c <__swsetup_r>
 8004464:	2800      	cmp	r0, #0
 8004466:	d0cb      	beq.n	8004400 <__swbuf_r+0x28>
 8004468:	f04f 37ff 	mov.w	r7, #4294967295
 800446c:	e7ea      	b.n	8004444 <__swbuf_r+0x6c>
 800446e:	bf00      	nop
 8004470:	08004d38 	.word	0x08004d38
 8004474:	08004d58 	.word	0x08004d58
 8004478:	08004d18 	.word	0x08004d18

0800447c <__swsetup_r>:
 800447c:	4b32      	ldr	r3, [pc, #200]	; (8004548 <__swsetup_r+0xcc>)
 800447e:	b570      	push	{r4, r5, r6, lr}
 8004480:	681d      	ldr	r5, [r3, #0]
 8004482:	4606      	mov	r6, r0
 8004484:	460c      	mov	r4, r1
 8004486:	b125      	cbz	r5, 8004492 <__swsetup_r+0x16>
 8004488:	69ab      	ldr	r3, [r5, #24]
 800448a:	b913      	cbnz	r3, 8004492 <__swsetup_r+0x16>
 800448c:	4628      	mov	r0, r5
 800448e:	f000 f985 	bl	800479c <__sinit>
 8004492:	4b2e      	ldr	r3, [pc, #184]	; (800454c <__swsetup_r+0xd0>)
 8004494:	429c      	cmp	r4, r3
 8004496:	d10f      	bne.n	80044b8 <__swsetup_r+0x3c>
 8004498:	686c      	ldr	r4, [r5, #4]
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044a0:	0719      	lsls	r1, r3, #28
 80044a2:	d42c      	bmi.n	80044fe <__swsetup_r+0x82>
 80044a4:	06dd      	lsls	r5, r3, #27
 80044a6:	d411      	bmi.n	80044cc <__swsetup_r+0x50>
 80044a8:	2309      	movs	r3, #9
 80044aa:	6033      	str	r3, [r6, #0]
 80044ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044b0:	81a3      	strh	r3, [r4, #12]
 80044b2:	f04f 30ff 	mov.w	r0, #4294967295
 80044b6:	e03e      	b.n	8004536 <__swsetup_r+0xba>
 80044b8:	4b25      	ldr	r3, [pc, #148]	; (8004550 <__swsetup_r+0xd4>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d101      	bne.n	80044c2 <__swsetup_r+0x46>
 80044be:	68ac      	ldr	r4, [r5, #8]
 80044c0:	e7eb      	b.n	800449a <__swsetup_r+0x1e>
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <__swsetup_r+0xd8>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	bf08      	it	eq
 80044c8:	68ec      	ldreq	r4, [r5, #12]
 80044ca:	e7e6      	b.n	800449a <__swsetup_r+0x1e>
 80044cc:	0758      	lsls	r0, r3, #29
 80044ce:	d512      	bpl.n	80044f6 <__swsetup_r+0x7a>
 80044d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044d2:	b141      	cbz	r1, 80044e6 <__swsetup_r+0x6a>
 80044d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044d8:	4299      	cmp	r1, r3
 80044da:	d002      	beq.n	80044e2 <__swsetup_r+0x66>
 80044dc:	4630      	mov	r0, r6
 80044de:	f7ff fb9d 	bl	8003c1c <_free_r>
 80044e2:	2300      	movs	r3, #0
 80044e4:	6363      	str	r3, [r4, #52]	; 0x34
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	2300      	movs	r3, #0
 80044f0:	6063      	str	r3, [r4, #4]
 80044f2:	6923      	ldr	r3, [r4, #16]
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	f043 0308 	orr.w	r3, r3, #8
 80044fc:	81a3      	strh	r3, [r4, #12]
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	b94b      	cbnz	r3, 8004516 <__swsetup_r+0x9a>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450c:	d003      	beq.n	8004516 <__swsetup_r+0x9a>
 800450e:	4621      	mov	r1, r4
 8004510:	4630      	mov	r0, r6
 8004512:	f000 fa09 	bl	8004928 <__smakebuf_r>
 8004516:	89a0      	ldrh	r0, [r4, #12]
 8004518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800451c:	f010 0301 	ands.w	r3, r0, #1
 8004520:	d00a      	beq.n	8004538 <__swsetup_r+0xbc>
 8004522:	2300      	movs	r3, #0
 8004524:	60a3      	str	r3, [r4, #8]
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	425b      	negs	r3, r3
 800452a:	61a3      	str	r3, [r4, #24]
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	b943      	cbnz	r3, 8004542 <__swsetup_r+0xc6>
 8004530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004534:	d1ba      	bne.n	80044ac <__swsetup_r+0x30>
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	0781      	lsls	r1, r0, #30
 800453a:	bf58      	it	pl
 800453c:	6963      	ldrpl	r3, [r4, #20]
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	e7f4      	b.n	800452c <__swsetup_r+0xb0>
 8004542:	2000      	movs	r0, #0
 8004544:	e7f7      	b.n	8004536 <__swsetup_r+0xba>
 8004546:	bf00      	nop
 8004548:	20000010 	.word	0x20000010
 800454c:	08004d38 	.word	0x08004d38
 8004550:	08004d58 	.word	0x08004d58
 8004554:	08004d18 	.word	0x08004d18

08004558 <abort>:
 8004558:	b508      	push	{r3, lr}
 800455a:	2006      	movs	r0, #6
 800455c:	f000 fa58 	bl	8004a10 <raise>
 8004560:	2001      	movs	r0, #1
 8004562:	f7fc f917 	bl	8000794 <_exit>
	...

08004568 <__sflush_r>:
 8004568:	898a      	ldrh	r2, [r1, #12]
 800456a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	4605      	mov	r5, r0
 8004570:	0710      	lsls	r0, r2, #28
 8004572:	460c      	mov	r4, r1
 8004574:	d458      	bmi.n	8004628 <__sflush_r+0xc0>
 8004576:	684b      	ldr	r3, [r1, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	dc05      	bgt.n	8004588 <__sflush_r+0x20>
 800457c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	dc02      	bgt.n	8004588 <__sflush_r+0x20>
 8004582:	2000      	movs	r0, #0
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800458a:	2e00      	cmp	r6, #0
 800458c:	d0f9      	beq.n	8004582 <__sflush_r+0x1a>
 800458e:	2300      	movs	r3, #0
 8004590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004594:	682f      	ldr	r7, [r5, #0]
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	d032      	beq.n	8004600 <__sflush_r+0x98>
 800459a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	075a      	lsls	r2, r3, #29
 80045a0:	d505      	bpl.n	80045ae <__sflush_r+0x46>
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	1ac0      	subs	r0, r0, r3
 80045a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a8:	b10b      	cbz	r3, 80045ae <__sflush_r+0x46>
 80045aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ac:	1ac0      	subs	r0, r0, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	4602      	mov	r2, r0
 80045b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045b4:	6a21      	ldr	r1, [r4, #32]
 80045b6:	4628      	mov	r0, r5
 80045b8:	47b0      	blx	r6
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	d106      	bne.n	80045ce <__sflush_r+0x66>
 80045c0:	6829      	ldr	r1, [r5, #0]
 80045c2:	291d      	cmp	r1, #29
 80045c4:	d82c      	bhi.n	8004620 <__sflush_r+0xb8>
 80045c6:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <__sflush_r+0x108>)
 80045c8:	40ca      	lsrs	r2, r1
 80045ca:	07d6      	lsls	r6, r2, #31
 80045cc:	d528      	bpl.n	8004620 <__sflush_r+0xb8>
 80045ce:	2200      	movs	r2, #0
 80045d0:	6062      	str	r2, [r4, #4]
 80045d2:	04d9      	lsls	r1, r3, #19
 80045d4:	6922      	ldr	r2, [r4, #16]
 80045d6:	6022      	str	r2, [r4, #0]
 80045d8:	d504      	bpl.n	80045e4 <__sflush_r+0x7c>
 80045da:	1c42      	adds	r2, r0, #1
 80045dc:	d101      	bne.n	80045e2 <__sflush_r+0x7a>
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	b903      	cbnz	r3, 80045e4 <__sflush_r+0x7c>
 80045e2:	6560      	str	r0, [r4, #84]	; 0x54
 80045e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e6:	602f      	str	r7, [r5, #0]
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d0ca      	beq.n	8004582 <__sflush_r+0x1a>
 80045ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045f0:	4299      	cmp	r1, r3
 80045f2:	d002      	beq.n	80045fa <__sflush_r+0x92>
 80045f4:	4628      	mov	r0, r5
 80045f6:	f7ff fb11 	bl	8003c1c <_free_r>
 80045fa:	2000      	movs	r0, #0
 80045fc:	6360      	str	r0, [r4, #52]	; 0x34
 80045fe:	e7c1      	b.n	8004584 <__sflush_r+0x1c>
 8004600:	6a21      	ldr	r1, [r4, #32]
 8004602:	2301      	movs	r3, #1
 8004604:	4628      	mov	r0, r5
 8004606:	47b0      	blx	r6
 8004608:	1c41      	adds	r1, r0, #1
 800460a:	d1c7      	bne.n	800459c <__sflush_r+0x34>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0c4      	beq.n	800459c <__sflush_r+0x34>
 8004612:	2b1d      	cmp	r3, #29
 8004614:	d001      	beq.n	800461a <__sflush_r+0xb2>
 8004616:	2b16      	cmp	r3, #22
 8004618:	d101      	bne.n	800461e <__sflush_r+0xb6>
 800461a:	602f      	str	r7, [r5, #0]
 800461c:	e7b1      	b.n	8004582 <__sflush_r+0x1a>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	e7ad      	b.n	8004584 <__sflush_r+0x1c>
 8004628:	690f      	ldr	r7, [r1, #16]
 800462a:	2f00      	cmp	r7, #0
 800462c:	d0a9      	beq.n	8004582 <__sflush_r+0x1a>
 800462e:	0793      	lsls	r3, r2, #30
 8004630:	680e      	ldr	r6, [r1, #0]
 8004632:	bf08      	it	eq
 8004634:	694b      	ldreq	r3, [r1, #20]
 8004636:	600f      	str	r7, [r1, #0]
 8004638:	bf18      	it	ne
 800463a:	2300      	movne	r3, #0
 800463c:	eba6 0807 	sub.w	r8, r6, r7
 8004640:	608b      	str	r3, [r1, #8]
 8004642:	f1b8 0f00 	cmp.w	r8, #0
 8004646:	dd9c      	ble.n	8004582 <__sflush_r+0x1a>
 8004648:	6a21      	ldr	r1, [r4, #32]
 800464a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800464c:	4643      	mov	r3, r8
 800464e:	463a      	mov	r2, r7
 8004650:	4628      	mov	r0, r5
 8004652:	47b0      	blx	r6
 8004654:	2800      	cmp	r0, #0
 8004656:	dc06      	bgt.n	8004666 <__sflush_r+0xfe>
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e78e      	b.n	8004584 <__sflush_r+0x1c>
 8004666:	4407      	add	r7, r0
 8004668:	eba8 0800 	sub.w	r8, r8, r0
 800466c:	e7e9      	b.n	8004642 <__sflush_r+0xda>
 800466e:	bf00      	nop
 8004670:	20400001 	.word	0x20400001

08004674 <_fflush_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	690b      	ldr	r3, [r1, #16]
 8004678:	4605      	mov	r5, r0
 800467a:	460c      	mov	r4, r1
 800467c:	b913      	cbnz	r3, 8004684 <_fflush_r+0x10>
 800467e:	2500      	movs	r5, #0
 8004680:	4628      	mov	r0, r5
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	b118      	cbz	r0, 800468e <_fflush_r+0x1a>
 8004686:	6983      	ldr	r3, [r0, #24]
 8004688:	b90b      	cbnz	r3, 800468e <_fflush_r+0x1a>
 800468a:	f000 f887 	bl	800479c <__sinit>
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <_fflush_r+0x6c>)
 8004690:	429c      	cmp	r4, r3
 8004692:	d11b      	bne.n	80046cc <_fflush_r+0x58>
 8004694:	686c      	ldr	r4, [r5, #4]
 8004696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ef      	beq.n	800467e <_fflush_r+0xa>
 800469e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046a0:	07d0      	lsls	r0, r2, #31
 80046a2:	d404      	bmi.n	80046ae <_fflush_r+0x3a>
 80046a4:	0599      	lsls	r1, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_fflush_r+0x3a>
 80046a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046aa:	f000 f915 	bl	80048d8 <__retarget_lock_acquire_recursive>
 80046ae:	4628      	mov	r0, r5
 80046b0:	4621      	mov	r1, r4
 80046b2:	f7ff ff59 	bl	8004568 <__sflush_r>
 80046b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046b8:	07da      	lsls	r2, r3, #31
 80046ba:	4605      	mov	r5, r0
 80046bc:	d4e0      	bmi.n	8004680 <_fflush_r+0xc>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	059b      	lsls	r3, r3, #22
 80046c2:	d4dd      	bmi.n	8004680 <_fflush_r+0xc>
 80046c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046c6:	f000 f908 	bl	80048da <__retarget_lock_release_recursive>
 80046ca:	e7d9      	b.n	8004680 <_fflush_r+0xc>
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <_fflush_r+0x70>)
 80046ce:	429c      	cmp	r4, r3
 80046d0:	d101      	bne.n	80046d6 <_fflush_r+0x62>
 80046d2:	68ac      	ldr	r4, [r5, #8]
 80046d4:	e7df      	b.n	8004696 <_fflush_r+0x22>
 80046d6:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <_fflush_r+0x74>)
 80046d8:	429c      	cmp	r4, r3
 80046da:	bf08      	it	eq
 80046dc:	68ec      	ldreq	r4, [r5, #12]
 80046de:	e7da      	b.n	8004696 <_fflush_r+0x22>
 80046e0:	08004d38 	.word	0x08004d38
 80046e4:	08004d58 	.word	0x08004d58
 80046e8:	08004d18 	.word	0x08004d18

080046ec <std>:
 80046ec:	2300      	movs	r3, #0
 80046ee:	b510      	push	{r4, lr}
 80046f0:	4604      	mov	r4, r0
 80046f2:	e9c0 3300 	strd	r3, r3, [r0]
 80046f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046fa:	6083      	str	r3, [r0, #8]
 80046fc:	8181      	strh	r1, [r0, #12]
 80046fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004700:	81c2      	strh	r2, [r0, #14]
 8004702:	6183      	str	r3, [r0, #24]
 8004704:	4619      	mov	r1, r3
 8004706:	2208      	movs	r2, #8
 8004708:	305c      	adds	r0, #92	; 0x5c
 800470a:	f7ff f9d7 	bl	8003abc <memset>
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <std+0x38>)
 8004710:	6263      	str	r3, [r4, #36]	; 0x24
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <std+0x3c>)
 8004714:	62a3      	str	r3, [r4, #40]	; 0x28
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <std+0x40>)
 8004718:	62e3      	str	r3, [r4, #44]	; 0x2c
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <std+0x44>)
 800471c:	6224      	str	r4, [r4, #32]
 800471e:	6323      	str	r3, [r4, #48]	; 0x30
 8004720:	bd10      	pop	{r4, pc}
 8004722:	bf00      	nop
 8004724:	08004a49 	.word	0x08004a49
 8004728:	08004a6b 	.word	0x08004a6b
 800472c:	08004aa3 	.word	0x08004aa3
 8004730:	08004ac7 	.word	0x08004ac7

08004734 <_cleanup_r>:
 8004734:	4901      	ldr	r1, [pc, #4]	; (800473c <_cleanup_r+0x8>)
 8004736:	f000 b8af 	b.w	8004898 <_fwalk_reent>
 800473a:	bf00      	nop
 800473c:	08004675 	.word	0x08004675

08004740 <__sfmoreglue>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	2268      	movs	r2, #104	; 0x68
 8004744:	1e4d      	subs	r5, r1, #1
 8004746:	4355      	muls	r5, r2
 8004748:	460e      	mov	r6, r1
 800474a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800474e:	f7ff fad1 	bl	8003cf4 <_malloc_r>
 8004752:	4604      	mov	r4, r0
 8004754:	b140      	cbz	r0, 8004768 <__sfmoreglue+0x28>
 8004756:	2100      	movs	r1, #0
 8004758:	e9c0 1600 	strd	r1, r6, [r0]
 800475c:	300c      	adds	r0, #12
 800475e:	60a0      	str	r0, [r4, #8]
 8004760:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004764:	f7ff f9aa 	bl	8003abc <memset>
 8004768:	4620      	mov	r0, r4
 800476a:	bd70      	pop	{r4, r5, r6, pc}

0800476c <__sfp_lock_acquire>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__sfp_lock_acquire+0x8>)
 800476e:	f000 b8b3 	b.w	80048d8 <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	20000165 	.word	0x20000165

08004778 <__sfp_lock_release>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__sfp_lock_release+0x8>)
 800477a:	f000 b8ae 	b.w	80048da <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	20000165 	.word	0x20000165

08004784 <__sinit_lock_acquire>:
 8004784:	4801      	ldr	r0, [pc, #4]	; (800478c <__sinit_lock_acquire+0x8>)
 8004786:	f000 b8a7 	b.w	80048d8 <__retarget_lock_acquire_recursive>
 800478a:	bf00      	nop
 800478c:	20000166 	.word	0x20000166

08004790 <__sinit_lock_release>:
 8004790:	4801      	ldr	r0, [pc, #4]	; (8004798 <__sinit_lock_release+0x8>)
 8004792:	f000 b8a2 	b.w	80048da <__retarget_lock_release_recursive>
 8004796:	bf00      	nop
 8004798:	20000166 	.word	0x20000166

0800479c <__sinit>:
 800479c:	b510      	push	{r4, lr}
 800479e:	4604      	mov	r4, r0
 80047a0:	f7ff fff0 	bl	8004784 <__sinit_lock_acquire>
 80047a4:	69a3      	ldr	r3, [r4, #24]
 80047a6:	b11b      	cbz	r3, 80047b0 <__sinit+0x14>
 80047a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ac:	f7ff bff0 	b.w	8004790 <__sinit_lock_release>
 80047b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047b4:	6523      	str	r3, [r4, #80]	; 0x50
 80047b6:	4b13      	ldr	r3, [pc, #76]	; (8004804 <__sinit+0x68>)
 80047b8:	4a13      	ldr	r2, [pc, #76]	; (8004808 <__sinit+0x6c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80047be:	42a3      	cmp	r3, r4
 80047c0:	bf04      	itt	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	61a3      	streq	r3, [r4, #24]
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 f820 	bl	800480c <__sfp>
 80047cc:	6060      	str	r0, [r4, #4]
 80047ce:	4620      	mov	r0, r4
 80047d0:	f000 f81c 	bl	800480c <__sfp>
 80047d4:	60a0      	str	r0, [r4, #8]
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 f818 	bl	800480c <__sfp>
 80047dc:	2200      	movs	r2, #0
 80047de:	60e0      	str	r0, [r4, #12]
 80047e0:	2104      	movs	r1, #4
 80047e2:	6860      	ldr	r0, [r4, #4]
 80047e4:	f7ff ff82 	bl	80046ec <std>
 80047e8:	68a0      	ldr	r0, [r4, #8]
 80047ea:	2201      	movs	r2, #1
 80047ec:	2109      	movs	r1, #9
 80047ee:	f7ff ff7d 	bl	80046ec <std>
 80047f2:	68e0      	ldr	r0, [r4, #12]
 80047f4:	2202      	movs	r2, #2
 80047f6:	2112      	movs	r1, #18
 80047f8:	f7ff ff78 	bl	80046ec <std>
 80047fc:	2301      	movs	r3, #1
 80047fe:	61a3      	str	r3, [r4, #24]
 8004800:	e7d2      	b.n	80047a8 <__sinit+0xc>
 8004802:	bf00      	nop
 8004804:	08004c30 	.word	0x08004c30
 8004808:	08004735 	.word	0x08004735

0800480c <__sfp>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	4607      	mov	r7, r0
 8004810:	f7ff ffac 	bl	800476c <__sfp_lock_acquire>
 8004814:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <__sfp+0x84>)
 8004816:	681e      	ldr	r6, [r3, #0]
 8004818:	69b3      	ldr	r3, [r6, #24]
 800481a:	b913      	cbnz	r3, 8004822 <__sfp+0x16>
 800481c:	4630      	mov	r0, r6
 800481e:	f7ff ffbd 	bl	800479c <__sinit>
 8004822:	3648      	adds	r6, #72	; 0x48
 8004824:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004828:	3b01      	subs	r3, #1
 800482a:	d503      	bpl.n	8004834 <__sfp+0x28>
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	b30b      	cbz	r3, 8004874 <__sfp+0x68>
 8004830:	6836      	ldr	r6, [r6, #0]
 8004832:	e7f7      	b.n	8004824 <__sfp+0x18>
 8004834:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004838:	b9d5      	cbnz	r5, 8004870 <__sfp+0x64>
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <__sfp+0x88>)
 800483c:	60e3      	str	r3, [r4, #12]
 800483e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004842:	6665      	str	r5, [r4, #100]	; 0x64
 8004844:	f000 f847 	bl	80048d6 <__retarget_lock_init_recursive>
 8004848:	f7ff ff96 	bl	8004778 <__sfp_lock_release>
 800484c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004850:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004854:	6025      	str	r5, [r4, #0]
 8004856:	61a5      	str	r5, [r4, #24]
 8004858:	2208      	movs	r2, #8
 800485a:	4629      	mov	r1, r5
 800485c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004860:	f7ff f92c 	bl	8003abc <memset>
 8004864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800486c:	4620      	mov	r0, r4
 800486e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004870:	3468      	adds	r4, #104	; 0x68
 8004872:	e7d9      	b.n	8004828 <__sfp+0x1c>
 8004874:	2104      	movs	r1, #4
 8004876:	4638      	mov	r0, r7
 8004878:	f7ff ff62 	bl	8004740 <__sfmoreglue>
 800487c:	4604      	mov	r4, r0
 800487e:	6030      	str	r0, [r6, #0]
 8004880:	2800      	cmp	r0, #0
 8004882:	d1d5      	bne.n	8004830 <__sfp+0x24>
 8004884:	f7ff ff78 	bl	8004778 <__sfp_lock_release>
 8004888:	230c      	movs	r3, #12
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	e7ee      	b.n	800486c <__sfp+0x60>
 800488e:	bf00      	nop
 8004890:	08004c30 	.word	0x08004c30
 8004894:	ffff0001 	.word	0xffff0001

08004898 <_fwalk_reent>:
 8004898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800489c:	4606      	mov	r6, r0
 800489e:	4688      	mov	r8, r1
 80048a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048a4:	2700      	movs	r7, #0
 80048a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048aa:	f1b9 0901 	subs.w	r9, r9, #1
 80048ae:	d505      	bpl.n	80048bc <_fwalk_reent+0x24>
 80048b0:	6824      	ldr	r4, [r4, #0]
 80048b2:	2c00      	cmp	r4, #0
 80048b4:	d1f7      	bne.n	80048a6 <_fwalk_reent+0xe>
 80048b6:	4638      	mov	r0, r7
 80048b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048bc:	89ab      	ldrh	r3, [r5, #12]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d907      	bls.n	80048d2 <_fwalk_reent+0x3a>
 80048c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c6:	3301      	adds	r3, #1
 80048c8:	d003      	beq.n	80048d2 <_fwalk_reent+0x3a>
 80048ca:	4629      	mov	r1, r5
 80048cc:	4630      	mov	r0, r6
 80048ce:	47c0      	blx	r8
 80048d0:	4307      	orrs	r7, r0
 80048d2:	3568      	adds	r5, #104	; 0x68
 80048d4:	e7e9      	b.n	80048aa <_fwalk_reent+0x12>

080048d6 <__retarget_lock_init_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <__retarget_lock_acquire_recursive>:
 80048d8:	4770      	bx	lr

080048da <__retarget_lock_release_recursive>:
 80048da:	4770      	bx	lr

080048dc <__swhatbuf_r>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	460e      	mov	r6, r1
 80048e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e4:	2900      	cmp	r1, #0
 80048e6:	b096      	sub	sp, #88	; 0x58
 80048e8:	4614      	mov	r4, r2
 80048ea:	461d      	mov	r5, r3
 80048ec:	da08      	bge.n	8004900 <__swhatbuf_r+0x24>
 80048ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	602a      	str	r2, [r5, #0]
 80048f6:	061a      	lsls	r2, r3, #24
 80048f8:	d410      	bmi.n	800491c <__swhatbuf_r+0x40>
 80048fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fe:	e00e      	b.n	800491e <__swhatbuf_r+0x42>
 8004900:	466a      	mov	r2, sp
 8004902:	f000 f907 	bl	8004b14 <_fstat_r>
 8004906:	2800      	cmp	r0, #0
 8004908:	dbf1      	blt.n	80048ee <__swhatbuf_r+0x12>
 800490a:	9a01      	ldr	r2, [sp, #4]
 800490c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004910:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004914:	425a      	negs	r2, r3
 8004916:	415a      	adcs	r2, r3
 8004918:	602a      	str	r2, [r5, #0]
 800491a:	e7ee      	b.n	80048fa <__swhatbuf_r+0x1e>
 800491c:	2340      	movs	r3, #64	; 0x40
 800491e:	2000      	movs	r0, #0
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	b016      	add	sp, #88	; 0x58
 8004924:	bd70      	pop	{r4, r5, r6, pc}
	...

08004928 <__smakebuf_r>:
 8004928:	898b      	ldrh	r3, [r1, #12]
 800492a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800492c:	079d      	lsls	r5, r3, #30
 800492e:	4606      	mov	r6, r0
 8004930:	460c      	mov	r4, r1
 8004932:	d507      	bpl.n	8004944 <__smakebuf_r+0x1c>
 8004934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	2301      	movs	r3, #1
 800493e:	6163      	str	r3, [r4, #20]
 8004940:	b002      	add	sp, #8
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	ab01      	add	r3, sp, #4
 8004946:	466a      	mov	r2, sp
 8004948:	f7ff ffc8 	bl	80048dc <__swhatbuf_r>
 800494c:	9900      	ldr	r1, [sp, #0]
 800494e:	4605      	mov	r5, r0
 8004950:	4630      	mov	r0, r6
 8004952:	f7ff f9cf 	bl	8003cf4 <_malloc_r>
 8004956:	b948      	cbnz	r0, 800496c <__smakebuf_r+0x44>
 8004958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495c:	059a      	lsls	r2, r3, #22
 800495e:	d4ef      	bmi.n	8004940 <__smakebuf_r+0x18>
 8004960:	f023 0303 	bic.w	r3, r3, #3
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	e7e3      	b.n	8004934 <__smakebuf_r+0xc>
 800496c:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <__smakebuf_r+0x7c>)
 800496e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	6020      	str	r0, [r4, #0]
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	9b00      	ldr	r3, [sp, #0]
 800497c:	6163      	str	r3, [r4, #20]
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	6120      	str	r0, [r4, #16]
 8004982:	b15b      	cbz	r3, 800499c <__smakebuf_r+0x74>
 8004984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f8d5 	bl	8004b38 <_isatty_r>
 800498e:	b128      	cbz	r0, 800499c <__smakebuf_r+0x74>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	89a0      	ldrh	r0, [r4, #12]
 800499e:	4305      	orrs	r5, r0
 80049a0:	81a5      	strh	r5, [r4, #12]
 80049a2:	e7cd      	b.n	8004940 <__smakebuf_r+0x18>
 80049a4:	08004735 	.word	0x08004735

080049a8 <__malloc_lock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__malloc_lock+0x8>)
 80049aa:	f7ff bf95 	b.w	80048d8 <__retarget_lock_acquire_recursive>
 80049ae:	bf00      	nop
 80049b0:	20000164 	.word	0x20000164

080049b4 <__malloc_unlock>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__malloc_unlock+0x8>)
 80049b6:	f7ff bf90 	b.w	80048da <__retarget_lock_release_recursive>
 80049ba:	bf00      	nop
 80049bc:	20000164 	.word	0x20000164

080049c0 <_raise_r>:
 80049c0:	291f      	cmp	r1, #31
 80049c2:	b538      	push	{r3, r4, r5, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	460d      	mov	r5, r1
 80049c8:	d904      	bls.n	80049d4 <_raise_r+0x14>
 80049ca:	2316      	movs	r3, #22
 80049cc:	6003      	str	r3, [r0, #0]
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80049d6:	b112      	cbz	r2, 80049de <_raise_r+0x1e>
 80049d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049dc:	b94b      	cbnz	r3, 80049f2 <_raise_r+0x32>
 80049de:	4620      	mov	r0, r4
 80049e0:	f000 f830 	bl	8004a44 <_getpid_r>
 80049e4:	462a      	mov	r2, r5
 80049e6:	4601      	mov	r1, r0
 80049e8:	4620      	mov	r0, r4
 80049ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ee:	f000 b817 	b.w	8004a20 <_kill_r>
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d00a      	beq.n	8004a0c <_raise_r+0x4c>
 80049f6:	1c59      	adds	r1, r3, #1
 80049f8:	d103      	bne.n	8004a02 <_raise_r+0x42>
 80049fa:	2316      	movs	r3, #22
 80049fc:	6003      	str	r3, [r0, #0]
 80049fe:	2001      	movs	r0, #1
 8004a00:	e7e7      	b.n	80049d2 <_raise_r+0x12>
 8004a02:	2400      	movs	r4, #0
 8004a04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a08:	4628      	mov	r0, r5
 8004a0a:	4798      	blx	r3
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e7e0      	b.n	80049d2 <_raise_r+0x12>

08004a10 <raise>:
 8004a10:	4b02      	ldr	r3, [pc, #8]	; (8004a1c <raise+0xc>)
 8004a12:	4601      	mov	r1, r0
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	f7ff bfd3 	b.w	80049c0 <_raise_r>
 8004a1a:	bf00      	nop
 8004a1c:	20000010 	.word	0x20000010

08004a20 <_kill_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4d07      	ldr	r5, [pc, #28]	; (8004a40 <_kill_r+0x20>)
 8004a24:	2300      	movs	r3, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	602b      	str	r3, [r5, #0]
 8004a2e:	f7fb fea1 	bl	8000774 <_kill>
 8004a32:	1c43      	adds	r3, r0, #1
 8004a34:	d102      	bne.n	8004a3c <_kill_r+0x1c>
 8004a36:	682b      	ldr	r3, [r5, #0]
 8004a38:	b103      	cbz	r3, 8004a3c <_kill_r+0x1c>
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	bd38      	pop	{r3, r4, r5, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000168 	.word	0x20000168

08004a44 <_getpid_r>:
 8004a44:	f7fb be8e 	b.w	8000764 <_getpid>

08004a48 <__sread>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a50:	f000 f894 	bl	8004b7c <_read_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	bfab      	itete	ge
 8004a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a5c:	181b      	addge	r3, r3, r0
 8004a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a62:	bfac      	ite	ge
 8004a64:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a66:	81a3      	strhlt	r3, [r4, #12]
 8004a68:	bd10      	pop	{r4, pc}

08004a6a <__swrite>:
 8004a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6e:	461f      	mov	r7, r3
 8004a70:	898b      	ldrh	r3, [r1, #12]
 8004a72:	05db      	lsls	r3, r3, #23
 8004a74:	4605      	mov	r5, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	4616      	mov	r6, r2
 8004a7a:	d505      	bpl.n	8004a88 <__swrite+0x1e>
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	2302      	movs	r3, #2
 8004a82:	2200      	movs	r2, #0
 8004a84:	f000 f868 	bl	8004b58 <_lseek_r>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	4628      	mov	r0, r5
 8004a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9e:	f000 b817 	b.w	8004ad0 <_write_r>

08004aa2 <__sseek>:
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aaa:	f000 f855 	bl	8004b58 <_lseek_r>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	bf15      	itete	ne
 8004ab4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004abe:	81a3      	strheq	r3, [r4, #12]
 8004ac0:	bf18      	it	ne
 8004ac2:	81a3      	strhne	r3, [r4, #12]
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <__sclose>:
 8004ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aca:	f000 b813 	b.w	8004af4 <_close_r>
	...

08004ad0 <_write_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d07      	ldr	r5, [pc, #28]	; (8004af0 <_write_r+0x20>)
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4611      	mov	r1, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	602a      	str	r2, [r5, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7fb fe7f 	bl	80007e2 <_write>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_write_r+0x1e>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_write_r+0x1e>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	20000168 	.word	0x20000168

08004af4 <_close_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d06      	ldr	r5, [pc, #24]	; (8004b10 <_close_r+0x1c>)
 8004af8:	2300      	movs	r3, #0
 8004afa:	4604      	mov	r4, r0
 8004afc:	4608      	mov	r0, r1
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	f7fb fe8b 	bl	800081a <_close>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_close_r+0x1a>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_close_r+0x1a>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000168 	.word	0x20000168

08004b14 <_fstat_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d07      	ldr	r5, [pc, #28]	; (8004b34 <_fstat_r+0x20>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	f7fb fe86 	bl	8000832 <_fstat>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	d102      	bne.n	8004b30 <_fstat_r+0x1c>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b103      	cbz	r3, 8004b30 <_fstat_r+0x1c>
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	20000168 	.word	0x20000168

08004b38 <_isatty_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d06      	ldr	r5, [pc, #24]	; (8004b54 <_isatty_r+0x1c>)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fb fe85 	bl	8000852 <_isatty>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_isatty_r+0x1a>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_isatty_r+0x1a>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	20000168 	.word	0x20000168

08004b58 <_lseek_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	; (8004b78 <_lseek_r+0x20>)
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4608      	mov	r0, r1
 8004b60:	4611      	mov	r1, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fb fe7e 	bl	8000868 <_lseek>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_lseek_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_lseek_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20000168 	.word	0x20000168

08004b7c <_read_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	; (8004b9c <_read_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fb fe0c 	bl	80007a8 <_read>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_read_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_read_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000168 	.word	0x20000168

08004ba0 <_init>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	bf00      	nop
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr

08004bac <_fini>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	bf00      	nop
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr

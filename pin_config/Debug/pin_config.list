
pin_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ddc  08004ddc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de4  08004de4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000074  08004e60  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004e60  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e610  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002411  00000000  00000000  0002e6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00030ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00031610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021256  00000000  00000000  00032060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df4c  00000000  00000000  000532b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1882  00000000  00000000  00061202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  00122ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c10 	.word	0x08004c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004c10 	.word	0x08004c10

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 f9df 	bl	800095a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f003 f8f0 	bl	8003780 <SystemClock_Config>
  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

 user_USART1_UART_Init();
 80005a0:	f003 f950 	bl	8003844 <user_USART1_UART_Init>

 HAL_UART_Receive(&huart1,(uint8_t *)buffer,20,1000);
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	2214      	movs	r2, #20
 80005aa:	4909      	ldr	r1, [pc, #36]	; (80005d0 <main+0x3c>)
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x40>)
 80005ae:	f001 ff65 	bl	800247c <HAL_UART_Receive>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (buffer[0] != '\0')
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <main+0x3c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <main+0x2e>
	   {
	     flag = 1; // Set flag to indicate data has been received
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <main+0x44>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e002      	b.n	80005c8 <main+0x34>
	   }
	   else
	   {
	  	 flag=0;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <main+0x44>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
	   }

	  Configurator();
 80005c8:	f002 ffb4 	bl	8003534 <Configurator>
	  if (buffer[0] != '\0')
 80005cc:	e7f1      	b.n	80005b2 <main+0x1e>
 80005ce:	bf00      	nop
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	200000a8 	.word	0x200000a8
 80005d8:	2000000c 	.word	0x2000000c

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report  the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <Error_Handler+0x8>
	...

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x44>)
 80005f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x44>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6613      	str	r3, [r2, #96]	; 0x60
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x44>)
 80005fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_MspInit+0x44>)
 8000608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <HAL_MspInit+0x44>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	6593      	str	r3, [r2, #88]	; 0x58
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_MspInit+0x44>)
 8000614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09e      	sub	sp, #120	; 0x78
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2254      	movs	r2, #84	; 0x54
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fa6b 	bl	8003b2c <memset>
  if(huart->Instance==USART1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <HAL_UART_MspInit+0xb8>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d13f      	bne.n	80006e0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fbbf 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000678:	f7ff ffb0 	bl	80005dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_UART_MspInit+0xbc>)
 800067e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <HAL_UART_MspInit+0xbc>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6613      	str	r3, [r2, #96]	; 0x60
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_UART_MspInit+0xbc>)
 800068a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_UART_MspInit+0xbc>)
 8000696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_UART_MspInit+0xbc>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_UART_MspInit+0xbc>)
 80006a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006be:	2307      	movs	r3, #7
 80006c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006c6:	4619      	mov	r1, r3
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006cc:	f000 fb4a 	bl	8000d64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	2025      	movs	r0, #37	; 0x25
 80006d6:	f000 fa90 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006da:	2025      	movs	r0, #37	; 0x25
 80006dc:	f000 faa9 	bl	8000c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3778      	adds	r7, #120	; 0x78
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40013800 	.word	0x40013800
 80006ec:	40021000 	.word	0x40021000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f962 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <USART1_IRQHandler+0x10>)
 800074a:	f001 ff69 	bl	8002620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000a8 	.word	0x200000a8

08000758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return 1;
 800075c:	2301      	movs	r3, #1
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <_kill>:

int _kill(int pid, int sig)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000772:	f003 f9b1 	bl	8003ad8 <__errno>
 8000776:	4603      	mov	r3, r0
 8000778:	2216      	movs	r2, #22
 800077a:	601a      	str	r2, [r3, #0]
  return -1;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <_exit>:

void _exit (int status)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000790:	f04f 31ff 	mov.w	r1, #4294967295
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ffe7 	bl	8000768 <_kill>
  while (1) {}    /* Make sure we hang here */
 800079a:	e7fe      	b.n	800079a <_exit+0x12>

0800079c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ae:	f3af 8000 	nop.w
 80007b2:	4601      	mov	r1, r0
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf0      	blt.n	80007ae <_read+0x12>
  }

  return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e009      	b.n	80007fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf1      	blt.n	80007e8 <_write+0x12>
  }
  return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_close>:

int _close(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	605a      	str	r2, [r3, #4]
  return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_isatty>:

int _isatty(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f003 f916 	bl	8003ad8 <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20010000 	.word	0x20010000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	20000090 	.word	0x20000090
 80008e0:	20000178 	.word	0x20000178

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000940 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	; (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f003 f8d5 	bl	8003ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093a:	f7ff fe2b 	bl	8000594 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000940:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800094c:	08004dec 	.word	0x08004dec
  ldr r2, =_sbss
 8000950:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000954:	20000174 	.word	0x20000174

08000958 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_IRQHandler>

0800095a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f93d 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f80e 	bl	800098c <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097c:	f7ff fe34 	bl	80005e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	79fb      	ldrb	r3, [r7, #7]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d023      	beq.n	80009e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_InitTick+0x70>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f949 	bl	8000c4e <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d809      	bhi.n	80009dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f913 	bl	8000bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_InitTick+0x74>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e007      	b.n	80009ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e001      	b.n	80009ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000094 	.word	0x20000094

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000094 	.word	0x20000094

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	; (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff29 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff3e 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff31 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d008      	beq.n	8000c90 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2204      	movs	r2, #4
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e022      	b.n	8000cd6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 020e 	bic.w	r2, r2, #14
 8000c9e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0201 	bic.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb4:	f003 021c 	and.w	r2, r3, #28
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d005      	beq.n	8000d06 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e029      	b.n	8000d5a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 020e 	bic.w	r2, r2, #14
 8000d14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f003 021c 	and.w	r2, r3, #28
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4798      	blx	r3
    }
  }
  return status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e148      	b.n	8001006 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 813a 	beq.w	8001000 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 0201 	and.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d017      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d123      	bne.n	8000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	6939      	ldr	r1, [r7, #16]
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0203 	and.w	r2, r3, #3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8094 	beq.w	8001000 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	4b52      	ldr	r3, [pc, #328]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000edc:	4a51      	ldr	r2, [pc, #324]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee4:	4b4f      	ldr	r3, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x2c4>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1d4>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a43      	ldr	r2, [pc, #268]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1d0>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a42      	ldr	r2, [pc, #264]	; (8001030 <HAL_GPIO_Init+0x2cc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1cc>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f30:	2307      	movs	r3, #7
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x1d6>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4a:	4937      	ldr	r1, [pc, #220]	; (8001028 <HAL_GPIO_Init+0x2c4>)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7c:	4a2d      	ldr	r2, [pc, #180]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	f47f aeaf 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e001      	b.n	800105a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001084:	e002      	b.n	800108c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40007000 	.word	0x40007000

080010b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40007000 	.word	0x40007000

080010d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e2:	d130      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f0:	d038      	beq.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001100:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2232      	movs	r2, #50	; 0x32
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a1b      	ldr	r2, [pc, #108]	; (800117c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9b      	lsrs	r3, r3, #18
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001118:	e002      	b.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112c:	d102      	bne.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x60>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f2      	bne.n	800111a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001140:	d110      	bne.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e00f      	b.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800114e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001152:	d007      	beq.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40007000 	.word	0x40007000
 8001178:	20000000 	.word	0x20000000
 800117c:	431bde83 	.word	0x431bde83

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	f000 bc02 	b.w	8001998 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001194:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119e:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80e4 	beq.w	800137e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <HAL_RCC_OscConfig+0x4c>
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	f040 808b 	bne.w	80012da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	f040 8087 	bne.w	80012da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011cc:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_OscConfig+0x64>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e3d9      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1a      	ldr	r2, [r3, #32]
 80011e8:	4b81      	ldr	r3, [pc, #516]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_RCC_OscConfig+0x7e>
 80011f4:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011fc:	e005      	b.n	800120a <HAL_RCC_OscConfig+0x8a>
 80011fe:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120a:	4293      	cmp	r3, r2
 800120c:	d223      	bcs.n	8001256 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fd8c 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e3ba      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001222:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	496d      	ldr	r1, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001240:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	4968      	ldr	r1, [pc, #416]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
 8001254:	e025      	b.n	80012a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001256:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4960      	ldr	r1, [pc, #384]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001274:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	495b      	ldr	r1, [pc, #364]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fd4c 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e37a      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012a2:	f000 fc81 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	4950      	ldr	r1, [pc, #320]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 80012b4:	5ccb      	ldrb	r3, [r1, r3]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <HAL_RCC_OscConfig+0x278>)
 80012c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <HAL_RCC_OscConfig+0x27c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb60 	bl	800098c <HAL_InitTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d052      	beq.n	800137c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	e35e      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d032      	beq.n	8001348 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012e2:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb9d 	bl	8000a2c <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f6:	f7ff fb99 	bl	8000a2c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e347      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a35      	ldr	r2, [pc, #212]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4930      	ldr	r1, [pc, #192]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	492b      	ldr	r1, [pc, #172]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
 8001346:	e01a      	b.n	800137e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001354:	f7ff fb6a 	bl	8000a2c <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800135c:	f7ff fb66 	bl	8000a2c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e314      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x1dc>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d073      	beq.n	8001472 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b08      	cmp	r3, #8
 800138e:	d005      	beq.n	800139c <HAL_RCC_OscConfig+0x21c>
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d10e      	bne.n	80013b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d10b      	bne.n	80013b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d063      	beq.n	8001470 <HAL_RCC_OscConfig+0x2f0>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d15f      	bne.n	8001470 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e2f1      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x24c>
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e025      	b.n	8001418 <HAL_RCC_OscConfig+0x298>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d114      	bne.n	8001400 <HAL_RCC_OscConfig+0x280>
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a02      	ldr	r2, [pc, #8]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e013      	b.n	8001418 <HAL_RCC_OscConfig+0x298>
 80013f0:	40021000 	.word	0x40021000
 80013f4:	08004c4c 	.word	0x08004c4c
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000004 	.word	0x20000004
 8001400:	4ba0      	ldr	r3, [pc, #640]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a9f      	ldr	r2, [pc, #636]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b9d      	ldr	r3, [pc, #628]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9c      	ldr	r2, [pc, #624]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fb04 	bl	8000a2c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fb00 	bl	8000a2c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e2ae      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x2a8>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff faf0 	bl	8000a2c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff faec 	bl	8000a2c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e29a      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	4b88      	ldr	r3, [pc, #544]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x2d0>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d060      	beq.n	8001540 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x310>
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d119      	bne.n	80014be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d116      	bne.n	80014be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001490:	4b7c      	ldr	r3, [pc, #496]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_OscConfig+0x328>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e277      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	061b      	lsls	r3, r3, #24
 80014b6:	4973      	ldr	r1, [pc, #460]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014bc:	e040      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d023      	beq.n	800150e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff faab 	bl	8000a2c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff faa7 	bl	8000a2c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e255      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ec:	4b65      	ldr	r3, [pc, #404]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b62      	ldr	r3, [pc, #392]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	495f      	ldr	r1, [pc, #380]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
 800150c:	e018      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fa87 	bl	8000a2c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fa83 	bl	8000a2c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e231      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d03c      	beq.n	80015c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01c      	beq.n	800158e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001554:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155a:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fa62 	bl	8000a2c <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fa5e 	bl	8000a2c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e20c      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ef      	beq.n	800156c <HAL_RCC_OscConfig+0x3ec>
 800158c:	e01b      	b.n	80015c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001594:	4a3b      	ldr	r2, [pc, #236]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159e:	f7ff fa45 	bl	8000a2c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fa41 	bl	8000a2c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1ef      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ef      	bne.n	80015a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80a6 	beq.w	8001720 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10d      	bne.n	8001600 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	6593      	str	r3, [r2, #88]	; 0x58
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d118      	bne.n	800163e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001616:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001618:	f7ff fa08 	bl	8000a2c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001620:	f7ff fa04 	bl	8000a2c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1b2      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x508>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x4d8>
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001656:	e029      	b.n	80016ac <HAL_RCC_OscConfig+0x52c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d115      	bne.n	800168c <HAL_RCC_OscConfig+0x50c>
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a03      	ldr	r2, [pc, #12]	; (8001684 <HAL_RCC_OscConfig+0x504>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x52c>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
 800168c:	4b9a      	ldr	r3, [pc, #616]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	4a99      	ldr	r2, [pc, #612]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169c:	4b96      	ldr	r3, [pc, #600]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	4a95      	ldr	r2, [pc, #596]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d016      	beq.n	80016e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff f9ba 	bl	8000a2c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff f9b6 	bl	8000a2c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e162      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ed      	beq.n	80016bc <HAL_RCC_OscConfig+0x53c>
 80016e0:	e015      	b.n	800170e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e2:	f7ff f9a3 	bl	8000a2c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e8:	e00a      	b.n	8001700 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7ff f99f 	bl	8000a2c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e14b      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001700:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ed      	bne.n	80016ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	4a77      	ldr	r2, [pc, #476]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 800171a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	2b00      	cmp	r3, #0
 800172a:	d03c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01c      	beq.n	800176e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800173a:	4a6f      	ldr	r2, [pc, #444]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff f972 	bl	8000a2c <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800174c:	f7ff f96e 	bl	8000a2c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e11c      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800175e:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ef      	beq.n	800174c <HAL_RCC_OscConfig+0x5cc>
 800176c:	e01b      	b.n	80017a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001774:	4a60      	ldr	r2, [pc, #384]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff f955 	bl	8000a2c <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001786:	f7ff f951 	bl	8000a2c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0ff      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001798:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 800179a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ef      	bne.n	8001786 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80f3 	beq.w	8001996 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f040 80c9 	bne.w	800194c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017ba:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d12c      	bne.n	8001828 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d8:	3b01      	subs	r3, #1
 80017da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d123      	bne.n	8001828 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d11b      	bne.n	8001828 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d113      	bne.n	8001828 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	085b      	lsrs	r3, r3, #1
 800180c:	3b01      	subs	r3, #1
 800180e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d109      	bne.n	8001828 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	3b01      	subs	r3, #1
 8001822:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d06b      	beq.n	8001900 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d062      	beq.n	80018f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0ac      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800183e:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001848:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800184a:	f7ff f8ef 	bl	8000a2c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff f8eb 	bl	8000a2c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e099      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x77c>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001880:	3a01      	subs	r2, #1
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	4311      	orrs	r1, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800188a:	0212      	lsls	r2, r2, #8
 800188c:	4311      	orrs	r1, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001892:	0852      	lsrs	r2, r2, #1
 8001894:	3a01      	subs	r2, #1
 8001896:	0552      	lsls	r2, r2, #21
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800189e:	0852      	lsrs	r2, r2, #1
 80018a0:	3a01      	subs	r2, #1
 80018a2:	0652      	lsls	r2, r2, #25
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018aa:	06d2      	lsls	r2, r2, #27
 80018ac:	430a      	orrs	r2, r1
 80018ae:	4912      	ldr	r1, [pc, #72]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018cc:	f7ff f8ae 	bl	8000a2c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f8aa 	bl	8000a2c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e058      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f2:	e050      	b.n	8001996 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e04f      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d144      	bne.n	8001996 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001924:	f7ff f882 	bl	8000a2c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f87e 	bl	8000a2c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e02c      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x7ac>
 800194a:	e024      	b.n	8001996 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d01f      	beq.n	8001992 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 8001958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff f865 	bl	8000a2c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff f861 	bl	8000a2c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e00f      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4905      	ldr	r1, [pc, #20]	; (80019a0 <HAL_RCC_OscConfig+0x820>)
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_RCC_OscConfig+0x824>)
 800198c:	4013      	ands	r3, r2
 800198e:	60cb      	str	r3, [r1, #12]
 8001990:	e001      	b.n	8001996 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	feeefffc 	.word	0xfeeefffc

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0e7      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0207 	bic.w	r2, r3, #7
 80019d2:	4970      	ldr	r1, [pc, #448]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b6e      	ldr	r3, [pc, #440]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0cf      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d908      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4960      	ldr	r1, [pc, #384]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d04c      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d121      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0a6      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d115      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e09a      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e08e      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e086      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 0203 	bic.w	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4943      	ldr	r1, [pc, #268]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a90:	f7fe ffcc 	bl	8000a2c <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7fe ffc8 	bl	8000a2c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e06e      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 020c 	and.w	r2, r3, #12
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1eb      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d208      	bcs.n	8001aee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	492b      	ldr	r1, [pc, #172]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d210      	bcs.n	8001b1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4923      	ldr	r1, [pc, #140]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e036      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d008      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4918      	ldr	r1, [pc, #96]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4910      	ldr	r1, [pc, #64]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5c:	f000 f824 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	490b      	ldr	r1, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x1f4>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe ff03 	bl	800098c <HAL_InitTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08004c4c 	.word	0x08004c4c
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x34>
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d121      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d11e      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e005      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c04:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	e004      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d134      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d003      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0xac>
 8001c4c:	e005      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c50:	617b      	str	r3, [r7, #20]
      break;
 8001c52:	e005      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c56:	617b      	str	r3, [r7, #20]
      break;
 8001c58:	e002      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	617b      	str	r3, [r7, #20]
      break;
 8001c5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	fb03 f202 	mul.w	r2, r3, r2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0e5b      	lsrs	r3, r3, #25
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	3301      	adds	r3, #1
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08004c64 	.word	0x08004c64
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4904      	ldr	r1, [pc, #16]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08004c5c 	.word	0x08004c5c

08001d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d08:	f7ff ffda 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0adb      	lsrs	r3, r3, #11
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4904      	ldr	r1, [pc, #16]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08004c5c 	.word	0x08004c5c

08001d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d48:	f7ff f9b6 	bl	80010b8 <HAL_PWREx_GetVoltageRange>
 8001d4c:	6178      	str	r0, [r7, #20]
 8001d4e:	e014      	b.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff f9a6 	bl	80010b8 <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d10b      	bne.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d919      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d8c:	d902      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8e:	2302      	movs	r3, #2
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e013      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e010      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d902      	bls.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e00a      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d102      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e004      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d101      	bne.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 0207 	bic.w	r2, r3, #7
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d031      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e14:	d01a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e1a:	d814      	bhi.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e24:	d10f      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e32:	e00c      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f9de 	bl	80021fc <RCCEx_PLLSAI1_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e44:	e003      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	74fb      	strb	r3, [r7, #19]
      break;
 8001e4a:	e000      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e54:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e62:	494e      	ldr	r1, [pc, #312]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e6a:	e001      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 809e 	beq.w	8001fba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00d      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a3f      	ldr	r2, [pc, #252]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a39      	ldr	r2, [pc, #228]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ec0:	f7fe fdb4 	bl	8000a2c <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ec6:	e009      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7fe fdb0 	bl	8000a2c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d902      	bls.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8001eda:	e005      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ef      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d15a      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01e      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d019      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f36:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d016      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fd70 	bl	8000a2c <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7fe fd6c 	bl	8000a2c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d902      	bls.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	74fb      	strb	r3, [r7, #19]
            break;
 8001f66:	e006      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ec      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	4904      	ldr	r1, [pc, #16]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f92:	e009      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
 8001f98:	e006      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa8:	7c7b      	ldrb	r3, [r7, #17]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b8a      	ldr	r3, [pc, #552]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a89      	ldr	r2, [pc, #548]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc6:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fcc:	f023 0203 	bic.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4980      	ldr	r1, [pc, #512]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 020c 	bic.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	4978      	ldr	r1, [pc, #480]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	496f      	ldr	r1, [pc, #444]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	4967      	ldr	r1, [pc, #412]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	495e      	ldr	r1, [pc, #376]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	4956      	ldr	r1, [pc, #344]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d028      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4945      	ldr	r1, [pc, #276]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a3f      	ldr	r2, [pc, #252]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020de:	60d3      	str	r3, [r2, #12]
 80020e0:	e011      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ea:	d10c      	bne.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3304      	adds	r3, #4
 80020f0:	2101      	movs	r1, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f882 	bl	80021fc <RCCEx_PLLSAI1_Config>
 80020f8:	4603      	mov	r3, r0
 80020fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d028      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002112:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	492d      	ldr	r1, [pc, #180]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002130:	d106      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213c:	60d3      	str	r3, [r2, #12]
 800213e:	e011      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002148:	d10c      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	2101      	movs	r1, #1
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f853 	bl	80021fc <RCCEx_PLLSAI1_Config>
 8002156:	4603      	mov	r3, r0
 8002158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217e:	4916      	ldr	r1, [pc, #88]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800218e:	d10c      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f830 	bl	80021fc <RCCEx_PLLSAI1_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	4904      	ldr	r1, [pc, #16]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d018      	beq.n	8002248 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002216:	4b71      	ldr	r3, [pc, #452]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d10d      	bne.n	8002242 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
       ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
       ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d047      	beq.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e044      	b.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d018      	beq.n	8002282 <RCCEx_PLLSAI1_Config+0x86>
 8002250:	2b03      	cmp	r3, #3
 8002252:	d825      	bhi.n	80022a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d002      	beq.n	800225e <RCCEx_PLLSAI1_Config+0x62>
 8002258:	2b02      	cmp	r3, #2
 800225a:	d009      	beq.n	8002270 <RCCEx_PLLSAI1_Config+0x74>
 800225c:	e020      	b.n	80022a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d11d      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226e:	e01a      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002270:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	2b00      	cmp	r3, #0
 800227a:	d116      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002280:	e013      	b.n	80022aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002282:	4b56      	ldr	r3, [pc, #344]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800228e:	4b53      	ldr	r3, [pc, #332]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800229e:	e006      	b.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      break;
 80022a4:	e004      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022b6:	4b49      	ldr	r3, [pc, #292]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	430b      	orrs	r3, r1
 80022cc:	4943      	ldr	r1, [pc, #268]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d17c      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022d8:	4b40      	ldr	r3, [pc, #256]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e4:	f7fe fba2 	bl	8000a2c <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ea:	e009      	b.n	8002300 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ec:	f7fe fb9e 	bl	8000a2c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d902      	bls.n	8002300 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	73fb      	strb	r3, [r7, #15]
        break;
 80022fe:	e005      	b.n	800230c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002300:	4b36      	ldr	r3, [pc, #216]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ef      	bne.n	80022ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d15f      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d110      	bne.n	800233a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002320:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6892      	ldr	r2, [r2, #8]
 8002328:	0211      	lsls	r1, r2, #8
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68d2      	ldr	r2, [r2, #12]
 800232e:	06d2      	lsls	r2, r2, #27
 8002330:	430a      	orrs	r2, r1
 8002332:	492a      	ldr	r1, [pc, #168]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	610b      	str	r3, [r1, #16]
 8002338:	e027      	b.n	800238a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d112      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002348:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6892      	ldr	r2, [r2, #8]
 8002350:	0211      	lsls	r1, r2, #8
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6912      	ldr	r2, [r2, #16]
 8002356:	0852      	lsrs	r2, r2, #1
 8002358:	3a01      	subs	r2, #1
 800235a:	0552      	lsls	r2, r2, #21
 800235c:	430a      	orrs	r2, r1
 800235e:	491f      	ldr	r1, [pc, #124]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	610b      	str	r3, [r1, #16]
 8002364:	e011      	b.n	800238a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800236e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	0211      	lsls	r1, r2, #8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6952      	ldr	r2, [r2, #20]
 800237c:	0852      	lsrs	r2, r2, #1
 800237e:	3a01      	subs	r2, #1
 8002380:	0652      	lsls	r2, r2, #25
 8002382:	430a      	orrs	r2, r1
 8002384:	4915      	ldr	r1, [pc, #84]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a13      	ldr	r2, [pc, #76]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002394:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe fb49 	bl	8000a2c <HAL_GetTick>
 800239a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800239c:	e009      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800239e:	f7fe fb45 	bl	8000a2c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d902      	bls.n	80023b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	73fb      	strb	r3, [r7, #15]
          break;
 80023b0:	e005      	b.n	80023be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ef      	beq.n	800239e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e040      	b.n	8002474 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe f914 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2224      	movs	r2, #36	; 0x24
 800240c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fc00 	bl	8002c24 <UART_SetConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fe20 	bl	800307c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800244a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800245a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fea7 	bl	80031c0 <UART_CheckIdleState>
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 80bf 	bne.w	8002614 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_UART_Receive+0x26>
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0b7      	b.n	8002616 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_UART_Receive+0x38>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0b0      	b.n	8002616 <HAL_UART_Receive+0x19a>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2222      	movs	r2, #34	; 0x22
 80024c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024d0:	f7fe faac 	bl	8000a2c <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	88fa      	ldrh	r2, [r7, #6]
 80024da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d10e      	bne.n	800250e <HAL_UART_Receive+0x92>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_UART_Receive+0x88>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002502:	e02d      	b.n	8002560 <HAL_UART_Receive+0xe4>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	22ff      	movs	r2, #255	; 0xff
 8002508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800250c:	e028      	b.n	8002560 <HAL_UART_Receive+0xe4>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_UART_Receive+0xb6>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d104      	bne.n	8002528 <HAL_UART_Receive+0xac>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	22ff      	movs	r2, #255	; 0xff
 8002522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002526:	e01b      	b.n	8002560 <HAL_UART_Receive+0xe4>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	227f      	movs	r2, #127	; 0x7f
 800252c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002530:	e016      	b.n	8002560 <HAL_UART_Receive+0xe4>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800253a:	d10d      	bne.n	8002558 <HAL_UART_Receive+0xdc>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <HAL_UART_Receive+0xd2>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	227f      	movs	r2, #127	; 0x7f
 8002548:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800254c:	e008      	b.n	8002560 <HAL_UART_Receive+0xe4>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	223f      	movs	r2, #63	; 0x3f
 8002552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002556:	e003      	b.n	8002560 <HAL_UART_Receive+0xe4>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002566:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002570:	d108      	bne.n	8002584 <HAL_UART_Receive+0x108>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	e003      	b.n	800258c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002594:	e033      	b.n	80025fe <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	2120      	movs	r1, #32
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fe56 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e032      	b.n	8002616 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025bc:	b29a      	uxth	r2, r3
 80025be:	8a7b      	ldrh	r3, [r7, #18]
 80025c0:	4013      	ands	r3, r2
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	3302      	adds	r3, #2
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	e00d      	b.n	80025ec <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	8a7b      	ldrh	r3, [r7, #18]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4013      	ands	r3, r2
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1c5      	bne.n	8002596 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0ba      	sub	sp, #232	; 0xe8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800264a:	f640 030f 	movw	r3, #2063	; 0x80f
 800264e:	4013      	ands	r3, r2
 8002650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d115      	bne.n	8002688 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800265c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00f      	beq.n	8002688 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 82a6 	beq.w	8002bca <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
      }
      return;
 8002686:	e2a0      	b.n	8002bca <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8117 	beq.w	80028c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800269e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_UART_IRQHandler+0x298>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 810a 	beq.w	80028c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d011      	beq.n	80026dc <HAL_UART_IRQHandler+0xbc>
 80026b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d011      	beq.n	800270c <HAL_UART_IRQHandler+0xec>
 80026e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2202      	movs	r2, #2
 80026fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800270c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d011      	beq.n	800273c <HAL_UART_IRQHandler+0x11c>
 8002718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2204      	movs	r2, #4
 800272a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800273c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d017      	beq.n	8002778 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002758:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00b      	beq.n	8002778 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2208      	movs	r2, #8
 8002766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276e:	f043 0208 	orr.w	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002780:	2b00      	cmp	r3, #0
 8002782:	d012      	beq.n	80027aa <HAL_UART_IRQHandler+0x18a>
 8002784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00c      	beq.n	80027aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 820c 	beq.w	8002bce <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d005      	beq.n	8002802 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04f      	beq.n	80028a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fde9 	bl	80033da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d141      	bne.n	800289a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3308      	adds	r3, #8
 800281c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800282c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3308      	adds	r3, #8
 800283e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002842:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800284e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800285a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1d9      	bne.n	8002816 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_UART_IRQHandler+0x29c>)
 8002870:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fa33 	bl	8000ce2 <HAL_DMA_Abort_IT>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d017      	beq.n	80028b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800288c:	4610      	mov	r0, r2
 800288e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	e00f      	b.n	80028b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f9b0 	bl	8002bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	e00b      	b.n	80028b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9ac 	bl	8002bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e007      	b.n	80028b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9a8 	bl	8002bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80028b0:	e18d      	b.n	8002bce <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b2:	bf00      	nop
    return;
 80028b4:	e18b      	b.n	8002bce <HAL_UART_IRQHandler+0x5ae>
 80028b6:	bf00      	nop
 80028b8:	04000120 	.word	0x04000120
 80028bc:	080034a1 	.word	0x080034a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f040 8146 	bne.w	8002b56 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 813f 	beq.w	8002b56 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8138 	beq.w	8002b56 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2210      	movs	r2, #16
 80028ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	f040 80b4 	bne.w	8002a66 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800290a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 815f 	beq.w	8002bd2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800291a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800291e:	429a      	cmp	r2, r3
 8002920:	f080 8157 	bcs.w	8002bd2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800292a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8085 	bne.w	8002a4a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800295c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800296a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800296e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002976:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800297a:	e841 2300 	strex	r3, r2, [r1]
 800297e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1da      	bne.n	8002940 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3308      	adds	r3, #8
 8002990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800299a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3308      	adds	r3, #8
 80029aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e1      	bne.n	800298a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3308      	adds	r3, #8
 80029cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3308      	adds	r3, #8
 80029e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e3      	bne.n	80029c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e4      	bne.n	8002a0a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe f90e 	bl	8000c66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8d4 	bl	8002c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a64:	e0b5      	b.n	8002bd2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80a7 	beq.w	8002bd6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a2 	beq.w	8002bd6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	e853 3f00 	ldrex	r3, [r3]
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ab4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002aba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e4      	bne.n	8002a92 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3308      	adds	r3, #8
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002aec:	633a      	str	r2, [r7, #48]	; 0x30
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af4:	e841 2300 	strex	r3, r2, [r1]
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e3      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2220      	movs	r2, #32
 8002b04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	e853 3f00 	ldrex	r3, [r3]
 8002b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0310 	bic.w	r3, r3, #16
 8002b26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	e841 2300 	strex	r3, r2, [r1]
 8002b40:	617b      	str	r3, [r7, #20]
   return(result);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e4      	bne.n	8002b12 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f85c 	bl	8002c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b54:	e03f      	b.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <HAL_UART_IRQHandler+0x560>
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fcd1 	bl	8003520 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b7e:	e02d      	b.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01c      	beq.n	8002bda <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
    }
    return;
 8002ba8:	e017      	b.n	8002bda <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d012      	beq.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
 8002bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fc82 	bl	80034cc <UART_EndTransmit_IT>
    return;
 8002bc8:	e008      	b.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
      return;
 8002bca:	bf00      	nop
 8002bcc:	e006      	b.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
    return;
 8002bce:	bf00      	nop
 8002bd0:	e004      	b.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
      return;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
      return;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <HAL_UART_IRQHandler+0x5bc>
    return;
 8002bda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002bdc:	37e8      	adds	r7, #232	; 0xe8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop

08002be4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b08a      	sub	sp, #40	; 0x28
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4bb4      	ldr	r3, [pc, #720]	; (8002f24 <UART_SetConfig+0x300>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4aa9      	ldr	r2, [pc, #676]	; (8002f28 <UART_SetConfig+0x304>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4aa0      	ldr	r2, [pc, #640]	; (8002f2c <UART_SetConfig+0x308>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d126      	bne.n	8002cfc <UART_SetConfig+0xd8>
 8002cae:	4ba0      	ldr	r3, [pc, #640]	; (8002f30 <UART_SetConfig+0x30c>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d81b      	bhi.n	8002cf4 <UART_SetConfig+0xd0>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <UART_SetConfig+0xa0>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce5 	.word	0x08002ce5
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002ced 	.word	0x08002ced
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cda:	e080      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce2:	e07c      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cea:	e078      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cec:	2308      	movs	r3, #8
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf2:	e074      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfa:	e070      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a8c      	ldr	r2, [pc, #560]	; (8002f34 <UART_SetConfig+0x310>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d138      	bne.n	8002d78 <UART_SetConfig+0x154>
 8002d06:	4b8a      	ldr	r3, [pc, #552]	; (8002f30 <UART_SetConfig+0x30c>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d82d      	bhi.n	8002d70 <UART_SetConfig+0x14c>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <UART_SetConfig+0xf8>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002d71 	.word	0x08002d71
 8002d28:	08002d71 	.word	0x08002d71
 8002d2c:	08002d61 	.word	0x08002d61
 8002d30:	08002d71 	.word	0x08002d71
 8002d34:	08002d71 	.word	0x08002d71
 8002d38:	08002d71 	.word	0x08002d71
 8002d3c:	08002d59 	.word	0x08002d59
 8002d40:	08002d71 	.word	0x08002d71
 8002d44:	08002d71 	.word	0x08002d71
 8002d48:	08002d71 	.word	0x08002d71
 8002d4c:	08002d69 	.word	0x08002d69
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d56:	e042      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5e:	e03e      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d60:	2304      	movs	r3, #4
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d66:	e03a      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d68:	2308      	movs	r3, #8
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6e:	e036      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d70:	2310      	movs	r3, #16
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e032      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <UART_SetConfig+0x304>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12a      	bne.n	8002dd8 <UART_SetConfig+0x1b4>
 8002d82:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <UART_SetConfig+0x30c>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d90:	d01a      	beq.n	8002dc8 <UART_SetConfig+0x1a4>
 8002d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d96:	d81b      	bhi.n	8002dd0 <UART_SetConfig+0x1ac>
 8002d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9c:	d00c      	beq.n	8002db8 <UART_SetConfig+0x194>
 8002d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da2:	d815      	bhi.n	8002dd0 <UART_SetConfig+0x1ac>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <UART_SetConfig+0x18c>
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d008      	beq.n	8002dc0 <UART_SetConfig+0x19c>
 8002dae:	e00f      	b.n	8002dd0 <UART_SetConfig+0x1ac>
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e012      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002db8:	2302      	movs	r3, #2
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbe:	e00e      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc6:	e00a      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dce:	e006      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e002      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <UART_SetConfig+0x304>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d17a      	bne.n	8002ede <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d824      	bhi.n	8002e3a <UART_SetConfig+0x216>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <UART_SetConfig+0x1d4>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e1d 	.word	0x08002e1d
 8002dfc:	08002e3b 	.word	0x08002e3b
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e3b 	.word	0x08002e3b
 8002e08:	08002e2b 	.word	0x08002e2b
 8002e0c:	08002e3b 	.word	0x08002e3b
 8002e10:	08002e3b 	.word	0x08002e3b
 8002e14:	08002e3b 	.word	0x08002e3b
 8002e18:	08002e33 	.word	0x08002e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f7fe ff5c 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8002e20:	61f8      	str	r0, [r7, #28]
        break;
 8002e22:	e010      	b.n	8002e46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <UART_SetConfig+0x314>)
 8002e26:	61fb      	str	r3, [r7, #28]
        break;
 8002e28:	e00d      	b.n	8002e46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2a:	f7fe febd 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8002e2e:	61f8      	str	r0, [r7, #28]
        break;
 8002e30:	e009      	b.n	8002e46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e36:	61fb      	str	r3, [r7, #28]
        break;
 8002e38:	e005      	b.n	8002e46 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8107 	beq.w	800305c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d305      	bcc.n	8002e6a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d903      	bls.n	8002e72 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e70:	e0f4      	b.n	800305c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2200      	movs	r2, #0
 8002e76:	461c      	mov	r4, r3
 8002e78:	4615      	mov	r5, r2
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	022b      	lsls	r3, r5, #8
 8002e84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e88:	0222      	lsls	r2, r4, #8
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	6849      	ldr	r1, [r1, #4]
 8002e8e:	0849      	lsrs	r1, r1, #1
 8002e90:	2000      	movs	r0, #0
 8002e92:	4688      	mov	r8, r1
 8002e94:	4681      	mov	r9, r0
 8002e96:	eb12 0a08 	adds.w	sl, r2, r8
 8002e9a:	eb43 0b09 	adc.w	fp, r3, r9
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eac:	4650      	mov	r0, sl
 8002eae:	4659      	mov	r1, fp
 8002eb0:	f7fd f9ee 	bl	8000290 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec2:	d308      	bcc.n	8002ed6 <UART_SetConfig+0x2b2>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eca:	d204      	bcs.n	8002ed6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	e0c2      	b.n	800305c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002edc:	e0be      	b.n	800305c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee6:	d16a      	bne.n	8002fbe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d834      	bhi.n	8002f5a <UART_SetConfig+0x336>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <UART_SetConfig+0x2d4>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f1d 	.word	0x08002f1d
 8002efc:	08002f3d 	.word	0x08002f3d
 8002f00:	08002f45 	.word	0x08002f45
 8002f04:	08002f5b 	.word	0x08002f5b
 8002f08:	08002f4b 	.word	0x08002f4b
 8002f0c:	08002f5b 	.word	0x08002f5b
 8002f10:	08002f5b 	.word	0x08002f5b
 8002f14:	08002f5b 	.word	0x08002f5b
 8002f18:	08002f53 	.word	0x08002f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7fe fedc 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8002f20:	61f8      	str	r0, [r7, #28]
        break;
 8002f22:	e020      	b.n	8002f66 <UART_SetConfig+0x342>
 8002f24:	efff69f3 	.word	0xefff69f3
 8002f28:	40008000 	.word	0x40008000
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40004400 	.word	0x40004400
 8002f38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f3c:	f7fe fee2 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 8002f40:	61f8      	str	r0, [r7, #28]
        break;
 8002f42:	e010      	b.n	8002f66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <UART_SetConfig+0x454>)
 8002f46:	61fb      	str	r3, [r7, #28]
        break;
 8002f48:	e00d      	b.n	8002f66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4a:	f7fe fe2d 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8002f4e:	61f8      	str	r0, [r7, #28]
        break;
 8002f50:	e009      	b.n	8002f66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f56:	61fb      	str	r3, [r7, #28]
        break;
 8002f58:	e005      	b.n	8002f66 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d077      	beq.n	800305c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005a      	lsls	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	441a      	add	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b0f      	cmp	r3, #15
 8002f86:	d916      	bls.n	8002fb6 <UART_SetConfig+0x392>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8e:	d212      	bcs.n	8002fb6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f023 030f 	bic.w	r3, r3, #15
 8002f98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	8afb      	ldrh	r3, [r7, #22]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	8afa      	ldrh	r2, [r7, #22]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	e052      	b.n	800305c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fbc:	e04e      	b.n	800305c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d827      	bhi.n	8003016 <UART_SetConfig+0x3f2>
 8002fc6:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0x3a8>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	08003017 	.word	0x08003017
 8002fdc:	08003007 	.word	0x08003007
 8002fe0:	08003017 	.word	0x08003017
 8002fe4:	08003017 	.word	0x08003017
 8002fe8:	08003017 	.word	0x08003017
 8002fec:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f7fe fe72 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	61f8      	str	r0, [r7, #28]
        break;
 8002ff6:	e014      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7fe fe84 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	61f8      	str	r0, [r7, #28]
        break;
 8002ffe:	e010      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <UART_SetConfig+0x454>)
 8003002:	61fb      	str	r3, [r7, #28]
        break;
 8003004:	e00d      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7fe fdcf 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 800300a:	61f8      	str	r0, [r7, #28]
        break;
 800300c:	e009      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	61fb      	str	r3, [r7, #28]
        break;
 8003014:	e005      	b.n	8003022 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003020:	bf00      	nop
    }

    if (pclk != 0U)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d019      	beq.n	800305c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	085a      	lsrs	r2, r3, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	441a      	add	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d909      	bls.n	8003056 <UART_SetConfig+0x432>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d205      	bcs.n	8003056 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e002      	b.n	800305c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003068:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800306c:	4618      	mov	r0, r3
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	00f42400 	.word	0x00f42400

0800307c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01a      	beq.n	8003192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317a:	d10a      	bne.n	8003192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d0:	f7fd fc2c 	bl	8000a2c <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d10e      	bne.n	8003202 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f82d 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e023      	b.n	800324a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d10e      	bne.n	800322e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f817 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e00d      	b.n	800324a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b09c      	sub	sp, #112	; 0x70
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003262:	e0a5      	b.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	f000 80a1 	beq.w	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fd fbdd 	bl	8000a2c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <UART_WaitOnFlagUntilTimeout+0x32>
 800327e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003280:	2b00      	cmp	r3, #0
 8003282:	d13e      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003298:	667b      	str	r3, [r7, #100]	; 0x64
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e6      	bne.n	8003284 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	663b      	str	r3, [r7, #96]	; 0x60
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3308      	adds	r3, #8
 80032d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e067      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d04f      	beq.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {

    	  if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331e:	d147      	bne.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003328:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800333e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
 800334a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800334e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e6      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3308      	adds	r3, #8
 8003362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	613b      	str	r3, [r7, #16]
   return(result);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	66bb      	str	r3, [r7, #104]	; 0x68
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3308      	adds	r3, #8
 800337a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800337c:	623a      	str	r2, [r7, #32]
 800337e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	69f9      	ldr	r1, [r7, #28]
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	61bb      	str	r3, [r7, #24]
   return(result);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e010      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	f43f af4a 	beq.w	8003264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3770      	adds	r7, #112	; 0x70
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033da:	b480      	push	{r7}
 80033dc:	b095      	sub	sp, #84	; 0x54
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
 8003402:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e6      	bne.n	80033e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3308      	adds	r3, #8
 800341a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	61fb      	str	r3, [r7, #28]
   return(result);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3308      	adds	r3, #8
 8003432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003434:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800343a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e5      	bne.n	8003414 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344c:	2b01      	cmp	r3, #1
 800344e:	d118      	bne.n	8003482 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	60bb      	str	r3, [r7, #8]
   return(result);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f023 0310 	bic.w	r3, r3, #16
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6979      	ldr	r1, [r7, #20]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	613b      	str	r3, [r7, #16]
   return(result);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e6      	bne.n	8003450 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003494:	bf00      	nop
 8003496:	3754      	adds	r7, #84	; 0x54
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fb9a 	bl	8002bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6979      	ldr	r1, [r7, #20]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e6      	bne.n	80034d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fb66 	bl	8002be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003518:	bf00      	nop
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <Configurator>:
 int flag=1;
int B;


 void Configurator()
 {
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0

 while (1)
 {
  if (flag && isBufferNullTerminated(buffer, 11))
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <Configurator+0x34>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <Configurator+0x24>
 8003540:	210b      	movs	r1, #11
 8003542:	480a      	ldr	r0, [pc, #40]	; (800356c <Configurator+0x38>)
 8003544:	f000 f842 	bl	80035cc <isBufferNullTerminated>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <Configurator+0x24>
  {
	  extract_data();
 800354e:	f000 f85b 	bl	8003608 <extract_data>
	  pin_config();
 8003552:	f000 f891 	bl	8003678 <pin_config>
	  break;
 8003556:	e005      	b.n	8003564 <Configurator+0x30>
  }
    B=readpin_status();
 8003558:	f000 f80c 	bl	8003574 <readpin_status>
 800355c:	4603      	mov	r3, r0
 800355e:	4a04      	ldr	r2, [pc, #16]	; (8003570 <Configurator+0x3c>)
 8003560:	6013      	str	r3, [r2, #0]
  if (flag && isBufferNullTerminated(buffer, 11))
 8003562:	e7e9      	b.n	8003538 <Configurator+0x4>
 }
 }
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000000c 	.word	0x2000000c
 800356c:	2000009c 	.word	0x2000009c
 8003570:	20000160 	.word	0x20000160

08003574 <readpin_status>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

 int readpin_status()
 {
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
	 A[0]=read_gpio( GPIOA,GPIO_PIN_5);
 8003578:	2120      	movs	r1, #32
 800357a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800357e:	f000 fa89 	bl	8003a94 <read_gpio>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <readpin_status+0x50>)
 8003588:	601a      	str	r2, [r3, #0]
	 A[1]=read_gpio( GPIOA,GPIO_PIN_6);
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003590:	f000 fa80 	bl	8003a94 <read_gpio>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <readpin_status+0x50>)
 800359a:	605a      	str	r2, [r3, #4]
	 A[2]=read_gpio( GPIOB,GPIO_PIN_0);
 800359c:	2101      	movs	r1, #1
 800359e:	480a      	ldr	r0, [pc, #40]	; (80035c8 <readpin_status+0x54>)
 80035a0:	f000 fa78 	bl	8003a94 <read_gpio>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <readpin_status+0x50>)
 80035aa:	609a      	str	r2, [r3, #8]
	 A[3]=read_gpio( GPIOB,GPIO_PIN_1);
 80035ac:	2102      	movs	r1, #2
 80035ae:	4806      	ldr	r0, [pc, #24]	; (80035c8 <readpin_status+0x54>)
 80035b0:	f000 fa70 	bl	8003a94 <read_gpio>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b02      	ldr	r3, [pc, #8]	; (80035c4 <readpin_status+0x50>)
 80035ba:	60da      	str	r2, [r3, #12]
	 return A[4];
 80035bc:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <readpin_status+0x50>)
 80035be:	691b      	ldr	r3, [r3, #16]
 }
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	2000014c 	.word	0x2000014c
 80035c8:	48000400 	.word	0x48000400

080035cc <isBufferNullTerminated>:

int isBufferNullTerminated(char *buffer, int bufferSize)
 {
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
   for (int i = 8; i < bufferSize; i++)
 80035d6:	2308      	movs	r3, #8
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	e00a      	b.n	80035f2 <isBufferNullTerminated+0x26>
   {
      if (buffer[i] == '\0')
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <isBufferNullTerminated+0x20>
      {
        return 1;  // Return 1 if null terminator is found
 80035e8:	2301      	movs	r3, #1
 80035ea:	e007      	b.n	80035fc <isBufferNullTerminated+0x30>
   for (int i = 8; i < bufferSize; i++)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	dbf0      	blt.n	80035dc <isBufferNullTerminated+0x10>
      }
   }
        return 0;  // Return 0 if no null terminator is found
 80035fa:	2300      	movs	r3, #0
 }
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <extract_data>:
void extract_data()
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
	token = strtok(buffer, ",");
 800360c:	4915      	ldr	r1, [pc, #84]	; (8003664 <extract_data+0x5c>)
 800360e:	4816      	ldr	r0, [pc, #88]	; (8003668 <extract_data+0x60>)
 8003610:	f000 faa8 	bl	8003b64 <strtok>
 8003614:	4603      	mov	r3, r0
 8003616:	4a15      	ldr	r2, [pc, #84]	; (800366c <extract_data+0x64>)
 8003618:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <extract_data+0x64>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <extract_data+0x64>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2213      	movs	r2, #19
 8003628:	4619      	mov	r1, r3
 800362a:	4811      	ldr	r0, [pc, #68]	; (8003670 <extract_data+0x68>)
 800362c:	f000 fa86 	bl	8003b3c <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <extract_data+0x68>)
 8003632:	2200      	movs	r2, #0
 8003634:	74da      	strb	r2, [r3, #19]
		         token = strtok(NULL, ",");
 8003636:	490b      	ldr	r1, [pc, #44]	; (8003664 <extract_data+0x5c>)
 8003638:	2000      	movs	r0, #0
 800363a:	f000 fa93 	bl	8003b64 <strtok>
 800363e:	4603      	mov	r3, r0
 8003640:	4a0a      	ldr	r2, [pc, #40]	; (800366c <extract_data+0x64>)
 8003642:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <extract_data+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <extract_data+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2209      	movs	r2, #9
 8003652:	4619      	mov	r1, r3
 8003654:	4807      	ldr	r0, [pc, #28]	; (8003674 <extract_data+0x6c>)
 8003656:	f000 fa71 	bl	8003b3c <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <extract_data+0x6c>)
 800365c:	2200      	movs	r2, #0
 800365e:	725a      	strb	r2, [r3, #9]
//		     if (token != NULL)
//		     {
//		         strncpy(arr3, token, sizeof(arr3) - 1);
//		         arr3[sizeof(arr3) - 1] = '\0'; // Ensure null-termination
//		     }
}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	08004c28 	.word	0x08004c28
 8003668:	2000009c 	.word	0x2000009c
 800366c:	2000015c 	.word	0x2000015c
 8003670:	2000012c 	.word	0x2000012c
 8003674:	20000140 	.word	0x20000140

08003678 <pin_config>:


void pin_config()
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"A5")==0)
 800367c:	4936      	ldr	r1, [pc, #216]	; (8003758 <pin_config+0xe0>)
 800367e:	4837      	ldr	r0, [pc, #220]	; (800375c <pin_config+0xe4>)
 8003680:	f7fc fda6 	bl	80001d0 <strcmp>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <pin_config+0x1a>
			     {
			       switch_val=1;
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <pin_config+0xe8>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e01f      	b.n	80036d2 <pin_config+0x5a>
			     }
	            else if(strcmp(arr1,"A6")==0)
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <pin_config+0xec>)
 8003694:	4831      	ldr	r0, [pc, #196]	; (800375c <pin_config+0xe4>)
 8003696:	f7fc fd9b 	bl	80001d0 <strcmp>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <pin_config+0x30>
				 {
				   switch_val=2;
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <pin_config+0xe8>)
 80036a2:	2202      	movs	r2, #2
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e014      	b.n	80036d2 <pin_config+0x5a>
				 }
	            else if(strcmp(arr1,"B0")==0)
 80036a8:	492f      	ldr	r1, [pc, #188]	; (8003768 <pin_config+0xf0>)
 80036aa:	482c      	ldr	r0, [pc, #176]	; (800375c <pin_config+0xe4>)
 80036ac:	f7fc fd90 	bl	80001d0 <strcmp>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <pin_config+0x46>
	           	 {
	           		switch_val=3;
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <pin_config+0xe8>)
 80036b8:	2203      	movs	r2, #3
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e009      	b.n	80036d2 <pin_config+0x5a>
	           	 }
	            else if(strcmp(arr1,"B1")==0)
 80036be:	492b      	ldr	r1, [pc, #172]	; (800376c <pin_config+0xf4>)
 80036c0:	4826      	ldr	r0, [pc, #152]	; (800375c <pin_config+0xe4>)
 80036c2:	f7fc fd85 	bl	80001d0 <strcmp>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <pin_config+0x5a>
	             {
	            	switch_val=4;
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <pin_config+0xe8>)
 80036ce:	2204      	movs	r2, #4
 80036d0:	601a      	str	r2, [r3, #0]
	             }


			     switch(switch_val)
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <pin_config+0xe8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d13c      	bne.n	8003754 <pin_config+0xdc>
			     {

			     case 1: if(strcmp(arr2,"OUTPUT")==0)
 80036da:	4925      	ldr	r1, [pc, #148]	; (8003770 <pin_config+0xf8>)
 80036dc:	4825      	ldr	r0, [pc, #148]	; (8003774 <pin_config+0xfc>)
 80036de:	f7fc fd77 	bl	80001d0 <strcmp>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10c      	bne.n	8003702 <pin_config+0x8a>
						{
			              user_GPIO_Init(GPIOA,GPIO_PIN_5,OUTPUT);
 80036e8:	2200      	movs	r2, #0
 80036ea:	2120      	movs	r1, #32
 80036ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f0:	f000 f8d8 	bl	80038a4 <user_GPIO_Init>
						  write_gpio(GPIOA,GPIO_PIN_5, PIN_SET);
 80036f4:	2201      	movs	r2, #1
 80036f6:	2120      	movs	r1, #32
 80036f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036fc:	f000 f9da 	bl	8003ab4 <write_gpio>
								}
							}
					    }

			     }
}
 8003700:	e028      	b.n	8003754 <pin_config+0xdc>
			              else if(strcmp(arr2,"INPUT")==0)
 8003702:	491d      	ldr	r1, [pc, #116]	; (8003778 <pin_config+0x100>)
 8003704:	481b      	ldr	r0, [pc, #108]	; (8003774 <pin_config+0xfc>)
 8003706:	f7fc fd63 	bl	80001d0 <strcmp>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d121      	bne.n	8003754 <pin_config+0xdc>
						   user_GPIO_Init(GPIOA,GPIO_PIN_5,INPUT);
 8003710:	2201      	movs	r2, #1
 8003712:	2120      	movs	r1, #32
 8003714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003718:	f000 f8c4 	bl	80038a4 <user_GPIO_Init>
						   A[0]=read_gpio( GPIOA,GPIO_PIN_5);
 800371c:	2120      	movs	r1, #32
 800371e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003722:	f000 f9b7 	bl	8003a94 <read_gpio>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <pin_config+0x104>)
 800372c:	601a      	str	r2, [r3, #0]
							   if(A[0] == 1)
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <pin_config+0x104>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <pin_config+0xd0>
								   user_output_GPIO_Init();
 8003736:	f000 f95d 	bl	80039f4 <user_output_GPIO_Init>
								   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,PIN_SET);//
 800373a:	2201      	movs	r2, #1
 800373c:	2108      	movs	r1, #8
 800373e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003742:	f7fd fc91 	bl	8001068 <HAL_GPIO_WritePin>
}
 8003746:	e005      	b.n	8003754 <pin_config+0xdc>
									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,PIN_RESET);
 8003748:	2200      	movs	r2, #0
 800374a:	2108      	movs	r1, #8
 800374c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003750:	f7fd fc8a 	bl	8001068 <HAL_GPIO_WritePin>
}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}
 8003758:	08004c2c 	.word	0x08004c2c
 800375c:	2000012c 	.word	0x2000012c
 8003760:	20000098 	.word	0x20000098
 8003764:	08004c30 	.word	0x08004c30
 8003768:	08004c34 	.word	0x08004c34
 800376c:	08004c38 	.word	0x08004c38
 8003770:	08004c3c 	.word	0x08004c3c
 8003774:	20000140 	.word	0x20000140
 8003778:	08004c44 	.word	0x08004c44
 800377c:	2000014c 	.word	0x2000014c

08003780 <SystemClock_Config>:
GPIO_InitTypeDef GPIO_InitStruct = {0};


void SystemClock_Config(void)

{
 8003780:	b580      	push	{r7, lr}
 8003782:	b096      	sub	sp, #88	; 0x58
 8003784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	2244      	movs	r2, #68	; 0x44
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9cc 	bl	8003b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003794:	463b      	mov	r3, r7
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	60da      	str	r2, [r3, #12]
 80037a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80037a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037a6:	f7fd fc95 	bl	80010d4 <HAL_PWREx_ControlVoltageScaling>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80037b0:	f7fc ff14 	bl	80005dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037b4:	f7fd fc70 	bl	8001098 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <SystemClock_Config+0xc0>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <SystemClock_Config+0xc0>)
 80037c0:	f023 0318 	bic.w	r3, r3, #24
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80037c8:	2314      	movs	r3, #20
 80037ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037cc:	2301      	movs	r3, #1
 80037ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80037d0:	2301      	movs	r3, #1
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80037d8:	2360      	movs	r3, #96	; 0x60
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037dc:	2302      	movs	r3, #2
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80037e0:	2301      	movs	r3, #1
 80037e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80037e8:	2310      	movs	r3, #16
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80037ec:	2307      	movs	r3, #7
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037f0:	2302      	movs	r3, #2
 80037f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037f4:	2302      	movs	r3, #2
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fcbf 	bl	8001180 <HAL_RCC_OscConfig>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003808:	f7fc fee8 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800380c:	230f      	movs	r3, #15
 800380e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003810:	2303      	movs	r3, #3
 8003812:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003820:	463b      	mov	r3, r7
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe f8bf 	bl	80019a8 <HAL_RCC_ClockConfig>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003830:	f7fc fed4 	bl	80005dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003834:	f7fe fcd2 	bl	80021dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8003838:	bf00      	nop
 800383a:	3758      	adds	r7, #88	; 0x58
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000

08003844 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <user_USART1_UART_Init+0x58>)
 800384a:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <user_USART1_UART_Init+0x5c>)
 800384c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <user_USART1_UART_Init+0x58>)
 8003850:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003856:	4b11      	ldr	r3, [pc, #68]	; (800389c <user_USART1_UART_Init+0x58>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <user_USART1_UART_Init+0x58>)
 800385e:	2200      	movs	r2, #0
 8003860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <user_USART1_UART_Init+0x58>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <user_USART1_UART_Init+0x58>)
 800386a:	220c      	movs	r2, #12
 800386c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <user_USART1_UART_Init+0x58>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <user_USART1_UART_Init+0x58>)
 8003876:	2200      	movs	r2, #0
 8003878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <user_USART1_UART_Init+0x58>)
 800387c:	2200      	movs	r2, #0
 800387e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <user_USART1_UART_Init+0x58>)
 8003882:	2200      	movs	r2, #0
 8003884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003886:	4805      	ldr	r0, [pc, #20]	; (800389c <user_USART1_UART_Init+0x58>)
 8003888:	f7fe fdaa 	bl	80023e0 <HAL_UART_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <user_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003892:	f7fc fea3 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200000a8 	.word	0x200000a8
 80038a0:	40013800 	.word	0x40013800

080038a4 <user_GPIO_Init>:


 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
 80038b0:	4613      	mov	r3, r2
 80038b2:	707b      	strb	r3, [r7, #1]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c4:	4b29      	ldr	r3, [pc, #164]	; (800396c <user_GPIO_Init+0xc8>)
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	4a28      	ldr	r2, [pc, #160]	; (800396c <user_GPIO_Init+0xc8>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038d0:	4b26      	ldr	r3, [pc, #152]	; (800396c <user_GPIO_Init+0xc8>)
 80038d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 80038dc:	4b23      	ldr	r3, [pc, #140]	; (800396c <user_GPIO_Init+0xc8>)
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <user_GPIO_Init+0xc8>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <user_GPIO_Init+0xc8>)
 80038ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <user_GPIO_Init+0xc8>)
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	4a1c      	ldr	r2, [pc, #112]	; (800396c <user_GPIO_Init+0xc8>)
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <user_GPIO_Init+0xc8>)
 8003902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 800390c:	787a      	ldrb	r2, [r7, #1]
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fba8 	bl	8001068 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8003918:	787b      	ldrb	r3, [r7, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <user_GPIO_Init+0x88>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 800391e:	787a      	ldrb	r2, [r7, #1]
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f823 	bl	8003970 <gpio_output>
 800392a:	e008      	b.n	800393e <user_GPIO_Init+0x9a>
     }
     else if(PIN_mode == INPUT)
 800392c:	787b      	ldrb	r3, [r7, #1]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <user_GPIO_Init+0x9a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 8003932:	787a      	ldrb	r2, [r7, #1]
 8003934:	887b      	ldrh	r3, [r7, #2]
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f83b 	bl	80039b4 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
   GPIO_InitStruct.Pin = VCP_RX_Pin;
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003950:	2303      	movs	r3, #3
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4619      	mov	r1, r3
 800395a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800395e:	f7fd fa01 	bl	8000d64 <HAL_GPIO_Init>

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8003962:	bf00      	nop
 8003964:	3728      	adds	r7, #40	; 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000

08003970 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
 800397c:	4613      	mov	r3, r2
 800397e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8003990:	887b      	ldrh	r3, [r7, #2]
 8003992:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2301      	movs	r3, #1
 8003996:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	4619      	mov	r1, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd f9dc 	bl	8000d64 <HAL_GPIO_Init>
 }
 80039ac:	bf00      	nop
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	807b      	strh	r3, [r7, #2]
 80039c0:	4613      	mov	r3, r2
 80039c2:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 80039d4:	887b      	ldrh	r3, [r7, #2]
 80039d6:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd f9bc 	bl	8000d64 <HAL_GPIO_Init>
 }
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <user_output_GPIO_Init>:

 void user_output_GPIO_Init(void)
  {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <user_output_GPIO_Init+0x9c>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <user_output_GPIO_Init+0x9c>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a16:	4b1e      	ldr	r3, [pc, #120]	; (8003a90 <user_output_GPIO_Init+0x9c>)
 8003a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <user_output_GPIO_Init+0x9c>)
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <user_output_GPIO_Init+0x9c>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <user_output_GPIO_Init+0x9c>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	21f8      	movs	r1, #248	; 0xf8
 8003a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a42:	f7fd fb11 	bl	8001068 <HAL_GPIO_WritePin>
                                 |GPIO_PIN_7, GPIO_PIN_RESET);


         /*Configure GPIO pins : PA3 PA4 PA5 PA6
                                  PA7 */
         GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003a46:	23f8      	movs	r3, #248	; 0xf8
 8003a48:	60fb      	str	r3, [r7, #12]
                                 |GPIO_PIN_7;
         GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	613b      	str	r3, [r7, #16]
         GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a56:	f107 030c 	add.w	r3, r7, #12
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f7fd f980 	bl	8000d64 <HAL_GPIO_Init>



    /*Configure GPIO pin : VCP_RX_Pin */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a72:	2303      	movs	r3, #3
 8003a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003a76:	2303      	movs	r3, #3
 8003a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a84:	f7fd f96e 	bl	8000d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
  }
 8003a88:	bf00      	nop
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000

08003a94 <read_gpio>:
// }
//


 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fd fac7 	bl	8001038 <HAL_GPIO_ReadPin>
 8003aaa:	4603      	mov	r3, r0

 }
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <write_gpio>:

 void write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8003ac4:	787a      	ldrb	r2, [r7, #1]
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd facc 	bl	8001068 <HAL_GPIO_WritePin>

 }
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <__errno>:
 8003ad8:	4b01      	ldr	r3, [pc, #4]	; (8003ae0 <__errno+0x8>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000010 	.word	0x20000010

08003ae4 <__libc_init_array>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	4d0d      	ldr	r5, [pc, #52]	; (8003b1c <__libc_init_array+0x38>)
 8003ae8:	4c0d      	ldr	r4, [pc, #52]	; (8003b20 <__libc_init_array+0x3c>)
 8003aea:	1b64      	subs	r4, r4, r5
 8003aec:	10a4      	asrs	r4, r4, #2
 8003aee:	2600      	movs	r6, #0
 8003af0:	42a6      	cmp	r6, r4
 8003af2:	d109      	bne.n	8003b08 <__libc_init_array+0x24>
 8003af4:	4d0b      	ldr	r5, [pc, #44]	; (8003b24 <__libc_init_array+0x40>)
 8003af6:	4c0c      	ldr	r4, [pc, #48]	; (8003b28 <__libc_init_array+0x44>)
 8003af8:	f001 f88a 	bl	8004c10 <_init>
 8003afc:	1b64      	subs	r4, r4, r5
 8003afe:	10a4      	asrs	r4, r4, #2
 8003b00:	2600      	movs	r6, #0
 8003b02:	42a6      	cmp	r6, r4
 8003b04:	d105      	bne.n	8003b12 <__libc_init_array+0x2e>
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0c:	4798      	blx	r3
 8003b0e:	3601      	adds	r6, #1
 8003b10:	e7ee      	b.n	8003af0 <__libc_init_array+0xc>
 8003b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b16:	4798      	blx	r3
 8003b18:	3601      	adds	r6, #1
 8003b1a:	e7f2      	b.n	8003b02 <__libc_init_array+0x1e>
 8003b1c:	08004de4 	.word	0x08004de4
 8003b20:	08004de4 	.word	0x08004de4
 8003b24:	08004de4 	.word	0x08004de4
 8003b28:	08004de8 	.word	0x08004de8

08003b2c <memset>:
 8003b2c:	4402      	add	r2, r0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d100      	bne.n	8003b36 <memset+0xa>
 8003b34:	4770      	bx	lr
 8003b36:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3a:	e7f9      	b.n	8003b30 <memset+0x4>

08003b3c <strncpy>:
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	3901      	subs	r1, #1
 8003b40:	4603      	mov	r3, r0
 8003b42:	b132      	cbz	r2, 8003b52 <strncpy+0x16>
 8003b44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003b48:	f803 4b01 	strb.w	r4, [r3], #1
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	2c00      	cmp	r4, #0
 8003b50:	d1f7      	bne.n	8003b42 <strncpy+0x6>
 8003b52:	441a      	add	r2, r3
 8003b54:	2100      	movs	r1, #0
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d100      	bne.n	8003b5c <strncpy+0x20>
 8003b5a:	bd10      	pop	{r4, pc}
 8003b5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003b60:	e7f9      	b.n	8003b56 <strncpy+0x1a>
	...

08003b64 <strtok>:
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <strtok+0x5c>)
 8003b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b68:	681e      	ldr	r6, [r3, #0]
 8003b6a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	b9fc      	cbnz	r4, 8003bb0 <strtok+0x4c>
 8003b70:	2050      	movs	r0, #80	; 0x50
 8003b72:	9101      	str	r1, [sp, #4]
 8003b74:	f000 f882 	bl	8003c7c <malloc>
 8003b78:	9901      	ldr	r1, [sp, #4]
 8003b7a:	65b0      	str	r0, [r6, #88]	; 0x58
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	b920      	cbnz	r0, 8003b8a <strtok+0x26>
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <strtok+0x60>)
 8003b82:	4811      	ldr	r0, [pc, #68]	; (8003bc8 <strtok+0x64>)
 8003b84:	2157      	movs	r1, #87	; 0x57
 8003b86:	f000 f849 	bl	8003c1c <__assert_func>
 8003b8a:	e9c0 4400 	strd	r4, r4, [r0]
 8003b8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003b92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003b96:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003b9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003b9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ba2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003ba6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003baa:	6184      	str	r4, [r0, #24]
 8003bac:	7704      	strb	r4, [r0, #28]
 8003bae:	6244      	str	r4, [r0, #36]	; 0x24
 8003bb0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	b002      	add	sp, #8
 8003bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003bbc:	f000 b806 	b.w	8003bcc <__strtok_r>
 8003bc0:	20000010 	.word	0x20000010
 8003bc4:	08004c98 	.word	0x08004c98
 8003bc8:	08004caf 	.word	0x08004caf

08003bcc <__strtok_r>:
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	b908      	cbnz	r0, 8003bd4 <__strtok_r+0x8>
 8003bd0:	6810      	ldr	r0, [r2, #0]
 8003bd2:	b188      	cbz	r0, 8003bf8 <__strtok_r+0x2c>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003bdc:	460f      	mov	r7, r1
 8003bde:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003be2:	b91e      	cbnz	r6, 8003bec <__strtok_r+0x20>
 8003be4:	b965      	cbnz	r5, 8003c00 <__strtok_r+0x34>
 8003be6:	6015      	str	r5, [r2, #0]
 8003be8:	4628      	mov	r0, r5
 8003bea:	e005      	b.n	8003bf8 <__strtok_r+0x2c>
 8003bec:	42b5      	cmp	r5, r6
 8003bee:	d1f6      	bne.n	8003bde <__strtok_r+0x12>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <__strtok_r+0xa>
 8003bf4:	6014      	str	r4, [r2, #0]
 8003bf6:	7003      	strb	r3, [r0, #0]
 8003bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	e00c      	b.n	8003c18 <__strtok_r+0x4c>
 8003bfe:	b915      	cbnz	r5, 8003c06 <__strtok_r+0x3a>
 8003c00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c04:	460e      	mov	r6, r1
 8003c06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003c0a:	42ab      	cmp	r3, r5
 8003c0c:	d1f7      	bne.n	8003bfe <__strtok_r+0x32>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f3      	beq.n	8003bfa <__strtok_r+0x2e>
 8003c12:	2300      	movs	r3, #0
 8003c14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003c18:	6014      	str	r4, [r2, #0]
 8003c1a:	e7ed      	b.n	8003bf8 <__strtok_r+0x2c>

08003c1c <__assert_func>:
 8003c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c1e:	4614      	mov	r4, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <__assert_func+0x2c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4605      	mov	r5, r0
 8003c28:	68d8      	ldr	r0, [r3, #12]
 8003c2a:	b14c      	cbz	r4, 8003c40 <__assert_func+0x24>
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <__assert_func+0x30>)
 8003c2e:	9100      	str	r1, [sp, #0]
 8003c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c34:	4906      	ldr	r1, [pc, #24]	; (8003c50 <__assert_func+0x34>)
 8003c36:	462b      	mov	r3, r5
 8003c38:	f000 f80e 	bl	8003c58 <fiprintf>
 8003c3c:	f000 fcc4 	bl	80045c8 <abort>
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <__assert_func+0x38>)
 8003c42:	461c      	mov	r4, r3
 8003c44:	e7f3      	b.n	8003c2e <__assert_func+0x12>
 8003c46:	bf00      	nop
 8003c48:	20000010 	.word	0x20000010
 8003c4c:	08004d0c 	.word	0x08004d0c
 8003c50:	08004d19 	.word	0x08004d19
 8003c54:	08004d47 	.word	0x08004d47

08003c58 <fiprintf>:
 8003c58:	b40e      	push	{r1, r2, r3}
 8003c5a:	b503      	push	{r0, r1, lr}
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	ab03      	add	r3, sp, #12
 8003c60:	4805      	ldr	r0, [pc, #20]	; (8003c78 <fiprintf+0x20>)
 8003c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c66:	6800      	ldr	r0, [r0, #0]
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	f000 f919 	bl	8003ea0 <_vfiprintf_r>
 8003c6e:	b002      	add	sp, #8
 8003c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c74:	b003      	add	sp, #12
 8003c76:	4770      	bx	lr
 8003c78:	20000010 	.word	0x20000010

08003c7c <malloc>:
 8003c7c:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <malloc+0xc>)
 8003c7e:	4601      	mov	r1, r0
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f000 b86f 	b.w	8003d64 <_malloc_r>
 8003c86:	bf00      	nop
 8003c88:	20000010 	.word	0x20000010

08003c8c <_free_r>:
 8003c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c8e:	2900      	cmp	r1, #0
 8003c90:	d044      	beq.n	8003d1c <_free_r+0x90>
 8003c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c96:	9001      	str	r0, [sp, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8003c9e:	bfb8      	it	lt
 8003ca0:	18e4      	addlt	r4, r4, r3
 8003ca2:	f000 feb9 	bl	8004a18 <__malloc_lock>
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <_free_r+0x94>)
 8003ca8:	9801      	ldr	r0, [sp, #4]
 8003caa:	6813      	ldr	r3, [r2, #0]
 8003cac:	b933      	cbnz	r3, 8003cbc <_free_r+0x30>
 8003cae:	6063      	str	r3, [r4, #4]
 8003cb0:	6014      	str	r4, [r2, #0]
 8003cb2:	b003      	add	sp, #12
 8003cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cb8:	f000 beb4 	b.w	8004a24 <__malloc_unlock>
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	d908      	bls.n	8003cd2 <_free_r+0x46>
 8003cc0:	6825      	ldr	r5, [r4, #0]
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	bf01      	itttt	eq
 8003cc8:	6819      	ldreq	r1, [r3, #0]
 8003cca:	685b      	ldreq	r3, [r3, #4]
 8003ccc:	1949      	addeq	r1, r1, r5
 8003cce:	6021      	streq	r1, [r4, #0]
 8003cd0:	e7ed      	b.n	8003cae <_free_r+0x22>
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b10b      	cbz	r3, 8003cdc <_free_r+0x50>
 8003cd8:	42a3      	cmp	r3, r4
 8003cda:	d9fa      	bls.n	8003cd2 <_free_r+0x46>
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	1855      	adds	r5, r2, r1
 8003ce0:	42a5      	cmp	r5, r4
 8003ce2:	d10b      	bne.n	8003cfc <_free_r+0x70>
 8003ce4:	6824      	ldr	r4, [r4, #0]
 8003ce6:	4421      	add	r1, r4
 8003ce8:	1854      	adds	r4, r2, r1
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	6011      	str	r1, [r2, #0]
 8003cee:	d1e0      	bne.n	8003cb2 <_free_r+0x26>
 8003cf0:	681c      	ldr	r4, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	6053      	str	r3, [r2, #4]
 8003cf6:	4421      	add	r1, r4
 8003cf8:	6011      	str	r1, [r2, #0]
 8003cfa:	e7da      	b.n	8003cb2 <_free_r+0x26>
 8003cfc:	d902      	bls.n	8003d04 <_free_r+0x78>
 8003cfe:	230c      	movs	r3, #12
 8003d00:	6003      	str	r3, [r0, #0]
 8003d02:	e7d6      	b.n	8003cb2 <_free_r+0x26>
 8003d04:	6825      	ldr	r5, [r4, #0]
 8003d06:	1961      	adds	r1, r4, r5
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	bf04      	itt	eq
 8003d0c:	6819      	ldreq	r1, [r3, #0]
 8003d0e:	685b      	ldreq	r3, [r3, #4]
 8003d10:	6063      	str	r3, [r4, #4]
 8003d12:	bf04      	itt	eq
 8003d14:	1949      	addeq	r1, r1, r5
 8003d16:	6021      	streq	r1, [r4, #0]
 8003d18:	6054      	str	r4, [r2, #4]
 8003d1a:	e7ca      	b.n	8003cb2 <_free_r+0x26>
 8003d1c:	b003      	add	sp, #12
 8003d1e:	bd30      	pop	{r4, r5, pc}
 8003d20:	20000164 	.word	0x20000164

08003d24 <sbrk_aligned>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	4e0e      	ldr	r6, [pc, #56]	; (8003d60 <sbrk_aligned+0x3c>)
 8003d28:	460c      	mov	r4, r1
 8003d2a:	6831      	ldr	r1, [r6, #0]
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	b911      	cbnz	r1, 8003d36 <sbrk_aligned+0x12>
 8003d30:	f000 fb7a 	bl	8004428 <_sbrk_r>
 8003d34:	6030      	str	r0, [r6, #0]
 8003d36:	4621      	mov	r1, r4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 fb75 	bl	8004428 <_sbrk_r>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	d00a      	beq.n	8003d58 <sbrk_aligned+0x34>
 8003d42:	1cc4      	adds	r4, r0, #3
 8003d44:	f024 0403 	bic.w	r4, r4, #3
 8003d48:	42a0      	cmp	r0, r4
 8003d4a:	d007      	beq.n	8003d5c <sbrk_aligned+0x38>
 8003d4c:	1a21      	subs	r1, r4, r0
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f000 fb6a 	bl	8004428 <_sbrk_r>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d101      	bne.n	8003d5c <sbrk_aligned+0x38>
 8003d58:	f04f 34ff 	mov.w	r4, #4294967295
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	20000168 	.word	0x20000168

08003d64 <_malloc_r>:
 8003d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	1ccd      	adds	r5, r1, #3
 8003d6a:	f025 0503 	bic.w	r5, r5, #3
 8003d6e:	3508      	adds	r5, #8
 8003d70:	2d0c      	cmp	r5, #12
 8003d72:	bf38      	it	cc
 8003d74:	250c      	movcc	r5, #12
 8003d76:	2d00      	cmp	r5, #0
 8003d78:	4607      	mov	r7, r0
 8003d7a:	db01      	blt.n	8003d80 <_malloc_r+0x1c>
 8003d7c:	42a9      	cmp	r1, r5
 8003d7e:	d905      	bls.n	8003d8c <_malloc_r+0x28>
 8003d80:	230c      	movs	r3, #12
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	2600      	movs	r6, #0
 8003d86:	4630      	mov	r0, r6
 8003d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d8c:	4e2e      	ldr	r6, [pc, #184]	; (8003e48 <_malloc_r+0xe4>)
 8003d8e:	f000 fe43 	bl	8004a18 <__malloc_lock>
 8003d92:	6833      	ldr	r3, [r6, #0]
 8003d94:	461c      	mov	r4, r3
 8003d96:	bb34      	cbnz	r4, 8003de6 <_malloc_r+0x82>
 8003d98:	4629      	mov	r1, r5
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	f7ff ffc2 	bl	8003d24 <sbrk_aligned>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	4604      	mov	r4, r0
 8003da4:	d14d      	bne.n	8003e42 <_malloc_r+0xde>
 8003da6:	6834      	ldr	r4, [r6, #0]
 8003da8:	4626      	mov	r6, r4
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d140      	bne.n	8003e30 <_malloc_r+0xcc>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	4631      	mov	r1, r6
 8003db2:	4638      	mov	r0, r7
 8003db4:	eb04 0803 	add.w	r8, r4, r3
 8003db8:	f000 fb36 	bl	8004428 <_sbrk_r>
 8003dbc:	4580      	cmp	r8, r0
 8003dbe:	d13a      	bne.n	8003e36 <_malloc_r+0xd2>
 8003dc0:	6821      	ldr	r1, [r4, #0]
 8003dc2:	3503      	adds	r5, #3
 8003dc4:	1a6d      	subs	r5, r5, r1
 8003dc6:	f025 0503 	bic.w	r5, r5, #3
 8003dca:	3508      	adds	r5, #8
 8003dcc:	2d0c      	cmp	r5, #12
 8003dce:	bf38      	it	cc
 8003dd0:	250c      	movcc	r5, #12
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff ffa5 	bl	8003d24 <sbrk_aligned>
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d02b      	beq.n	8003e36 <_malloc_r+0xd2>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	442b      	add	r3, r5
 8003de2:	6023      	str	r3, [r4, #0]
 8003de4:	e00e      	b.n	8003e04 <_malloc_r+0xa0>
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	1b52      	subs	r2, r2, r5
 8003dea:	d41e      	bmi.n	8003e2a <_malloc_r+0xc6>
 8003dec:	2a0b      	cmp	r2, #11
 8003dee:	d916      	bls.n	8003e1e <_malloc_r+0xba>
 8003df0:	1961      	adds	r1, r4, r5
 8003df2:	42a3      	cmp	r3, r4
 8003df4:	6025      	str	r5, [r4, #0]
 8003df6:	bf18      	it	ne
 8003df8:	6059      	strne	r1, [r3, #4]
 8003dfa:	6863      	ldr	r3, [r4, #4]
 8003dfc:	bf08      	it	eq
 8003dfe:	6031      	streq	r1, [r6, #0]
 8003e00:	5162      	str	r2, [r4, r5]
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	4638      	mov	r0, r7
 8003e06:	f104 060b 	add.w	r6, r4, #11
 8003e0a:	f000 fe0b 	bl	8004a24 <__malloc_unlock>
 8003e0e:	f026 0607 	bic.w	r6, r6, #7
 8003e12:	1d23      	adds	r3, r4, #4
 8003e14:	1af2      	subs	r2, r6, r3
 8003e16:	d0b6      	beq.n	8003d86 <_malloc_r+0x22>
 8003e18:	1b9b      	subs	r3, r3, r6
 8003e1a:	50a3      	str	r3, [r4, r2]
 8003e1c:	e7b3      	b.n	8003d86 <_malloc_r+0x22>
 8003e1e:	6862      	ldr	r2, [r4, #4]
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	bf0c      	ite	eq
 8003e24:	6032      	streq	r2, [r6, #0]
 8003e26:	605a      	strne	r2, [r3, #4]
 8003e28:	e7ec      	b.n	8003e04 <_malloc_r+0xa0>
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	6864      	ldr	r4, [r4, #4]
 8003e2e:	e7b2      	b.n	8003d96 <_malloc_r+0x32>
 8003e30:	4634      	mov	r4, r6
 8003e32:	6876      	ldr	r6, [r6, #4]
 8003e34:	e7b9      	b.n	8003daa <_malloc_r+0x46>
 8003e36:	230c      	movs	r3, #12
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f000 fdf2 	bl	8004a24 <__malloc_unlock>
 8003e40:	e7a1      	b.n	8003d86 <_malloc_r+0x22>
 8003e42:	6025      	str	r5, [r4, #0]
 8003e44:	e7de      	b.n	8003e04 <_malloc_r+0xa0>
 8003e46:	bf00      	nop
 8003e48:	20000164 	.word	0x20000164

08003e4c <__sfputc_r>:
 8003e4c:	6893      	ldr	r3, [r2, #8]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	b410      	push	{r4}
 8003e54:	6093      	str	r3, [r2, #8]
 8003e56:	da08      	bge.n	8003e6a <__sfputc_r+0x1e>
 8003e58:	6994      	ldr	r4, [r2, #24]
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	db01      	blt.n	8003e62 <__sfputc_r+0x16>
 8003e5e:	290a      	cmp	r1, #10
 8003e60:	d103      	bne.n	8003e6a <__sfputc_r+0x1e>
 8003e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e66:	f000 baef 	b.w	8004448 <__swbuf_r>
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	1c58      	adds	r0, r3, #1
 8003e6e:	6010      	str	r0, [r2, #0]
 8003e70:	7019      	strb	r1, [r3, #0]
 8003e72:	4608      	mov	r0, r1
 8003e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <__sfputs_r>:
 8003e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	460f      	mov	r7, r1
 8003e80:	4614      	mov	r4, r2
 8003e82:	18d5      	adds	r5, r2, r3
 8003e84:	42ac      	cmp	r4, r5
 8003e86:	d101      	bne.n	8003e8c <__sfputs_r+0x12>
 8003e88:	2000      	movs	r0, #0
 8003e8a:	e007      	b.n	8003e9c <__sfputs_r+0x22>
 8003e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e90:	463a      	mov	r2, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7ff ffda 	bl	8003e4c <__sfputc_r>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d1f3      	bne.n	8003e84 <__sfputs_r+0xa>
 8003e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ea0 <_vfiprintf_r>:
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea4:	460d      	mov	r5, r1
 8003ea6:	b09d      	sub	sp, #116	; 0x74
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	4698      	mov	r8, r3
 8003eac:	4606      	mov	r6, r0
 8003eae:	b118      	cbz	r0, 8003eb8 <_vfiprintf_r+0x18>
 8003eb0:	6983      	ldr	r3, [r0, #24]
 8003eb2:	b90b      	cbnz	r3, 8003eb8 <_vfiprintf_r+0x18>
 8003eb4:	f000 fcaa 	bl	800480c <__sinit>
 8003eb8:	4b89      	ldr	r3, [pc, #548]	; (80040e0 <_vfiprintf_r+0x240>)
 8003eba:	429d      	cmp	r5, r3
 8003ebc:	d11b      	bne.n	8003ef6 <_vfiprintf_r+0x56>
 8003ebe:	6875      	ldr	r5, [r6, #4]
 8003ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ec2:	07d9      	lsls	r1, r3, #31
 8003ec4:	d405      	bmi.n	8003ed2 <_vfiprintf_r+0x32>
 8003ec6:	89ab      	ldrh	r3, [r5, #12]
 8003ec8:	059a      	lsls	r2, r3, #22
 8003eca:	d402      	bmi.n	8003ed2 <_vfiprintf_r+0x32>
 8003ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ece:	f000 fd3b 	bl	8004948 <__retarget_lock_acquire_recursive>
 8003ed2:	89ab      	ldrh	r3, [r5, #12]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	d501      	bpl.n	8003edc <_vfiprintf_r+0x3c>
 8003ed8:	692b      	ldr	r3, [r5, #16]
 8003eda:	b9eb      	cbnz	r3, 8003f18 <_vfiprintf_r+0x78>
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 fb04 	bl	80044ec <__swsetup_r>
 8003ee4:	b1c0      	cbz	r0, 8003f18 <_vfiprintf_r+0x78>
 8003ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ee8:	07dc      	lsls	r4, r3, #31
 8003eea:	d50e      	bpl.n	8003f0a <_vfiprintf_r+0x6a>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	b01d      	add	sp, #116	; 0x74
 8003ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef6:	4b7b      	ldr	r3, [pc, #492]	; (80040e4 <_vfiprintf_r+0x244>)
 8003ef8:	429d      	cmp	r5, r3
 8003efa:	d101      	bne.n	8003f00 <_vfiprintf_r+0x60>
 8003efc:	68b5      	ldr	r5, [r6, #8]
 8003efe:	e7df      	b.n	8003ec0 <_vfiprintf_r+0x20>
 8003f00:	4b79      	ldr	r3, [pc, #484]	; (80040e8 <_vfiprintf_r+0x248>)
 8003f02:	429d      	cmp	r5, r3
 8003f04:	bf08      	it	eq
 8003f06:	68f5      	ldreq	r5, [r6, #12]
 8003f08:	e7da      	b.n	8003ec0 <_vfiprintf_r+0x20>
 8003f0a:	89ab      	ldrh	r3, [r5, #12]
 8003f0c:	0598      	lsls	r0, r3, #22
 8003f0e:	d4ed      	bmi.n	8003eec <_vfiprintf_r+0x4c>
 8003f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f12:	f000 fd1a 	bl	800494a <__retarget_lock_release_recursive>
 8003f16:	e7e9      	b.n	8003eec <_vfiprintf_r+0x4c>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f26:	2330      	movs	r3, #48	; 0x30
 8003f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040ec <_vfiprintf_r+0x24c>
 8003f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f30:	f04f 0901 	mov.w	r9, #1
 8003f34:	4623      	mov	r3, r4
 8003f36:	469a      	mov	sl, r3
 8003f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f3c:	b10a      	cbz	r2, 8003f42 <_vfiprintf_r+0xa2>
 8003f3e:	2a25      	cmp	r2, #37	; 0x25
 8003f40:	d1f9      	bne.n	8003f36 <_vfiprintf_r+0x96>
 8003f42:	ebba 0b04 	subs.w	fp, sl, r4
 8003f46:	d00b      	beq.n	8003f60 <_vfiprintf_r+0xc0>
 8003f48:	465b      	mov	r3, fp
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f7ff ff93 	bl	8003e7a <__sfputs_r>
 8003f54:	3001      	adds	r0, #1
 8003f56:	f000 80aa 	beq.w	80040ae <_vfiprintf_r+0x20e>
 8003f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f5c:	445a      	add	r2, fp
 8003f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f60:	f89a 3000 	ldrb.w	r3, [sl]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a2 	beq.w	80040ae <_vfiprintf_r+0x20e>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f74:	f10a 0a01 	add.w	sl, sl, #1
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	9307      	str	r3, [sp, #28]
 8003f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f80:	931a      	str	r3, [sp, #104]	; 0x68
 8003f82:	4654      	mov	r4, sl
 8003f84:	2205      	movs	r2, #5
 8003f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8a:	4858      	ldr	r0, [pc, #352]	; (80040ec <_vfiprintf_r+0x24c>)
 8003f8c:	f7fc f930 	bl	80001f0 <memchr>
 8003f90:	9a04      	ldr	r2, [sp, #16]
 8003f92:	b9d8      	cbnz	r0, 8003fcc <_vfiprintf_r+0x12c>
 8003f94:	06d1      	lsls	r1, r2, #27
 8003f96:	bf44      	itt	mi
 8003f98:	2320      	movmi	r3, #32
 8003f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f9e:	0713      	lsls	r3, r2, #28
 8003fa0:	bf44      	itt	mi
 8003fa2:	232b      	movmi	r3, #43	; 0x2b
 8003fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8003fac:	2b2a      	cmp	r3, #42	; 0x2a
 8003fae:	d015      	beq.n	8003fdc <_vfiprintf_r+0x13c>
 8003fb0:	9a07      	ldr	r2, [sp, #28]
 8003fb2:	4654      	mov	r4, sl
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f04f 0c0a 	mov.w	ip, #10
 8003fba:	4621      	mov	r1, r4
 8003fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc0:	3b30      	subs	r3, #48	; 0x30
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	d94e      	bls.n	8004064 <_vfiprintf_r+0x1c4>
 8003fc6:	b1b0      	cbz	r0, 8003ff6 <_vfiprintf_r+0x156>
 8003fc8:	9207      	str	r2, [sp, #28]
 8003fca:	e014      	b.n	8003ff6 <_vfiprintf_r+0x156>
 8003fcc:	eba0 0308 	sub.w	r3, r0, r8
 8003fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	9304      	str	r3, [sp, #16]
 8003fd8:	46a2      	mov	sl, r4
 8003fda:	e7d2      	b.n	8003f82 <_vfiprintf_r+0xe2>
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	1d19      	adds	r1, r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	9103      	str	r1, [sp, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bfbb      	ittet	lt
 8003fe8:	425b      	neglt	r3, r3
 8003fea:	f042 0202 	orrlt.w	r2, r2, #2
 8003fee:	9307      	strge	r3, [sp, #28]
 8003ff0:	9307      	strlt	r3, [sp, #28]
 8003ff2:	bfb8      	it	lt
 8003ff4:	9204      	strlt	r2, [sp, #16]
 8003ff6:	7823      	ldrb	r3, [r4, #0]
 8003ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8003ffa:	d10c      	bne.n	8004016 <_vfiprintf_r+0x176>
 8003ffc:	7863      	ldrb	r3, [r4, #1]
 8003ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8004000:	d135      	bne.n	800406e <_vfiprintf_r+0x1ce>
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	1d1a      	adds	r2, r3, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	9203      	str	r2, [sp, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	bfb8      	it	lt
 800400e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004012:	3402      	adds	r4, #2
 8004014:	9305      	str	r3, [sp, #20]
 8004016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040fc <_vfiprintf_r+0x25c>
 800401a:	7821      	ldrb	r1, [r4, #0]
 800401c:	2203      	movs	r2, #3
 800401e:	4650      	mov	r0, sl
 8004020:	f7fc f8e6 	bl	80001f0 <memchr>
 8004024:	b140      	cbz	r0, 8004038 <_vfiprintf_r+0x198>
 8004026:	2340      	movs	r3, #64	; 0x40
 8004028:	eba0 000a 	sub.w	r0, r0, sl
 800402c:	fa03 f000 	lsl.w	r0, r3, r0
 8004030:	9b04      	ldr	r3, [sp, #16]
 8004032:	4303      	orrs	r3, r0
 8004034:	3401      	adds	r4, #1
 8004036:	9304      	str	r3, [sp, #16]
 8004038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800403c:	482c      	ldr	r0, [pc, #176]	; (80040f0 <_vfiprintf_r+0x250>)
 800403e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004042:	2206      	movs	r2, #6
 8004044:	f7fc f8d4 	bl	80001f0 <memchr>
 8004048:	2800      	cmp	r0, #0
 800404a:	d03f      	beq.n	80040cc <_vfiprintf_r+0x22c>
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <_vfiprintf_r+0x254>)
 800404e:	bb1b      	cbnz	r3, 8004098 <_vfiprintf_r+0x1f8>
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	3307      	adds	r3, #7
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	3308      	adds	r3, #8
 800405a:	9303      	str	r3, [sp, #12]
 800405c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405e:	443b      	add	r3, r7
 8004060:	9309      	str	r3, [sp, #36]	; 0x24
 8004062:	e767      	b.n	8003f34 <_vfiprintf_r+0x94>
 8004064:	fb0c 3202 	mla	r2, ip, r2, r3
 8004068:	460c      	mov	r4, r1
 800406a:	2001      	movs	r0, #1
 800406c:	e7a5      	b.n	8003fba <_vfiprintf_r+0x11a>
 800406e:	2300      	movs	r3, #0
 8004070:	3401      	adds	r4, #1
 8004072:	9305      	str	r3, [sp, #20]
 8004074:	4619      	mov	r1, r3
 8004076:	f04f 0c0a 	mov.w	ip, #10
 800407a:	4620      	mov	r0, r4
 800407c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004080:	3a30      	subs	r2, #48	; 0x30
 8004082:	2a09      	cmp	r2, #9
 8004084:	d903      	bls.n	800408e <_vfiprintf_r+0x1ee>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0c5      	beq.n	8004016 <_vfiprintf_r+0x176>
 800408a:	9105      	str	r1, [sp, #20]
 800408c:	e7c3      	b.n	8004016 <_vfiprintf_r+0x176>
 800408e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004092:	4604      	mov	r4, r0
 8004094:	2301      	movs	r3, #1
 8004096:	e7f0      	b.n	800407a <_vfiprintf_r+0x1da>
 8004098:	ab03      	add	r3, sp, #12
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	462a      	mov	r2, r5
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <_vfiprintf_r+0x258>)
 80040a0:	a904      	add	r1, sp, #16
 80040a2:	4630      	mov	r0, r6
 80040a4:	f3af 8000 	nop.w
 80040a8:	4607      	mov	r7, r0
 80040aa:	1c78      	adds	r0, r7, #1
 80040ac:	d1d6      	bne.n	800405c <_vfiprintf_r+0x1bc>
 80040ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040b0:	07d9      	lsls	r1, r3, #31
 80040b2:	d405      	bmi.n	80040c0 <_vfiprintf_r+0x220>
 80040b4:	89ab      	ldrh	r3, [r5, #12]
 80040b6:	059a      	lsls	r2, r3, #22
 80040b8:	d402      	bmi.n	80040c0 <_vfiprintf_r+0x220>
 80040ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040bc:	f000 fc45 	bl	800494a <__retarget_lock_release_recursive>
 80040c0:	89ab      	ldrh	r3, [r5, #12]
 80040c2:	065b      	lsls	r3, r3, #25
 80040c4:	f53f af12 	bmi.w	8003eec <_vfiprintf_r+0x4c>
 80040c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ca:	e711      	b.n	8003ef0 <_vfiprintf_r+0x50>
 80040cc:	ab03      	add	r3, sp, #12
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	462a      	mov	r2, r5
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <_vfiprintf_r+0x258>)
 80040d4:	a904      	add	r1, sp, #16
 80040d6:	4630      	mov	r0, r6
 80040d8:	f000 f880 	bl	80041dc <_printf_i>
 80040dc:	e7e4      	b.n	80040a8 <_vfiprintf_r+0x208>
 80040de:	bf00      	nop
 80040e0:	08004d9c 	.word	0x08004d9c
 80040e4:	08004dbc 	.word	0x08004dbc
 80040e8:	08004d7c 	.word	0x08004d7c
 80040ec:	08004d48 	.word	0x08004d48
 80040f0:	08004d52 	.word	0x08004d52
 80040f4:	00000000 	.word	0x00000000
 80040f8:	08003e7b 	.word	0x08003e7b
 80040fc:	08004d4e 	.word	0x08004d4e

08004100 <_printf_common>:
 8004100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	4616      	mov	r6, r2
 8004106:	4699      	mov	r9, r3
 8004108:	688a      	ldr	r2, [r1, #8]
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004110:	4293      	cmp	r3, r2
 8004112:	bfb8      	it	lt
 8004114:	4613      	movlt	r3, r2
 8004116:	6033      	str	r3, [r6, #0]
 8004118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800411c:	4607      	mov	r7, r0
 800411e:	460c      	mov	r4, r1
 8004120:	b10a      	cbz	r2, 8004126 <_printf_common+0x26>
 8004122:	3301      	adds	r3, #1
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0699      	lsls	r1, r3, #26
 800412a:	bf42      	ittt	mi
 800412c:	6833      	ldrmi	r3, [r6, #0]
 800412e:	3302      	addmi	r3, #2
 8004130:	6033      	strmi	r3, [r6, #0]
 8004132:	6825      	ldr	r5, [r4, #0]
 8004134:	f015 0506 	ands.w	r5, r5, #6
 8004138:	d106      	bne.n	8004148 <_printf_common+0x48>
 800413a:	f104 0a19 	add.w	sl, r4, #25
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	6832      	ldr	r2, [r6, #0]
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	42ab      	cmp	r3, r5
 8004146:	dc26      	bgt.n	8004196 <_printf_common+0x96>
 8004148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800414c:	1e13      	subs	r3, r2, #0
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	bf18      	it	ne
 8004152:	2301      	movne	r3, #1
 8004154:	0692      	lsls	r2, r2, #26
 8004156:	d42b      	bmi.n	80041b0 <_printf_common+0xb0>
 8004158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800415c:	4649      	mov	r1, r9
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d01e      	beq.n	80041a4 <_printf_common+0xa4>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	68e5      	ldr	r5, [r4, #12]
 800416a:	6832      	ldr	r2, [r6, #0]
 800416c:	f003 0306 	and.w	r3, r3, #6
 8004170:	2b04      	cmp	r3, #4
 8004172:	bf08      	it	eq
 8004174:	1aad      	subeq	r5, r5, r2
 8004176:	68a3      	ldr	r3, [r4, #8]
 8004178:	6922      	ldr	r2, [r4, #16]
 800417a:	bf0c      	ite	eq
 800417c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004180:	2500      	movne	r5, #0
 8004182:	4293      	cmp	r3, r2
 8004184:	bfc4      	itt	gt
 8004186:	1a9b      	subgt	r3, r3, r2
 8004188:	18ed      	addgt	r5, r5, r3
 800418a:	2600      	movs	r6, #0
 800418c:	341a      	adds	r4, #26
 800418e:	42b5      	cmp	r5, r6
 8004190:	d11a      	bne.n	80041c8 <_printf_common+0xc8>
 8004192:	2000      	movs	r0, #0
 8004194:	e008      	b.n	80041a8 <_printf_common+0xa8>
 8004196:	2301      	movs	r3, #1
 8004198:	4652      	mov	r2, sl
 800419a:	4649      	mov	r1, r9
 800419c:	4638      	mov	r0, r7
 800419e:	47c0      	blx	r8
 80041a0:	3001      	adds	r0, #1
 80041a2:	d103      	bne.n	80041ac <_printf_common+0xac>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ac:	3501      	adds	r5, #1
 80041ae:	e7c6      	b.n	800413e <_printf_common+0x3e>
 80041b0:	18e1      	adds	r1, r4, r3
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	2030      	movs	r0, #48	; 0x30
 80041b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ba:	4422      	add	r2, r4
 80041bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c4:	3302      	adds	r3, #2
 80041c6:	e7c7      	b.n	8004158 <_printf_common+0x58>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4622      	mov	r2, r4
 80041cc:	4649      	mov	r1, r9
 80041ce:	4638      	mov	r0, r7
 80041d0:	47c0      	blx	r8
 80041d2:	3001      	adds	r0, #1
 80041d4:	d0e6      	beq.n	80041a4 <_printf_common+0xa4>
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7d9      	b.n	800418e <_printf_common+0x8e>
	...

080041dc <_printf_i>:
 80041dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	7e0f      	ldrb	r7, [r1, #24]
 80041e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041e4:	2f78      	cmp	r7, #120	; 0x78
 80041e6:	4691      	mov	r9, r2
 80041e8:	4680      	mov	r8, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	469a      	mov	sl, r3
 80041ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041f2:	d807      	bhi.n	8004204 <_printf_i+0x28>
 80041f4:	2f62      	cmp	r7, #98	; 0x62
 80041f6:	d80a      	bhi.n	800420e <_printf_i+0x32>
 80041f8:	2f00      	cmp	r7, #0
 80041fa:	f000 80d8 	beq.w	80043ae <_printf_i+0x1d2>
 80041fe:	2f58      	cmp	r7, #88	; 0x58
 8004200:	f000 80a3 	beq.w	800434a <_printf_i+0x16e>
 8004204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800420c:	e03a      	b.n	8004284 <_printf_i+0xa8>
 800420e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004212:	2b15      	cmp	r3, #21
 8004214:	d8f6      	bhi.n	8004204 <_printf_i+0x28>
 8004216:	a101      	add	r1, pc, #4	; (adr r1, 800421c <_printf_i+0x40>)
 8004218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800421c:	08004275 	.word	0x08004275
 8004220:	08004289 	.word	0x08004289
 8004224:	08004205 	.word	0x08004205
 8004228:	08004205 	.word	0x08004205
 800422c:	08004205 	.word	0x08004205
 8004230:	08004205 	.word	0x08004205
 8004234:	08004289 	.word	0x08004289
 8004238:	08004205 	.word	0x08004205
 800423c:	08004205 	.word	0x08004205
 8004240:	08004205 	.word	0x08004205
 8004244:	08004205 	.word	0x08004205
 8004248:	08004395 	.word	0x08004395
 800424c:	080042b9 	.word	0x080042b9
 8004250:	08004377 	.word	0x08004377
 8004254:	08004205 	.word	0x08004205
 8004258:	08004205 	.word	0x08004205
 800425c:	080043b7 	.word	0x080043b7
 8004260:	08004205 	.word	0x08004205
 8004264:	080042b9 	.word	0x080042b9
 8004268:	08004205 	.word	0x08004205
 800426c:	08004205 	.word	0x08004205
 8004270:	0800437f 	.word	0x0800437f
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	602a      	str	r2, [r5, #0]
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004284:	2301      	movs	r3, #1
 8004286:	e0a3      	b.n	80043d0 <_printf_i+0x1f4>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	6829      	ldr	r1, [r5, #0]
 800428c:	0606      	lsls	r6, r0, #24
 800428e:	f101 0304 	add.w	r3, r1, #4
 8004292:	d50a      	bpl.n	80042aa <_printf_i+0xce>
 8004294:	680e      	ldr	r6, [r1, #0]
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	2e00      	cmp	r6, #0
 800429a:	da03      	bge.n	80042a4 <_printf_i+0xc8>
 800429c:	232d      	movs	r3, #45	; 0x2d
 800429e:	4276      	negs	r6, r6
 80042a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a4:	485e      	ldr	r0, [pc, #376]	; (8004420 <_printf_i+0x244>)
 80042a6:	230a      	movs	r3, #10
 80042a8:	e019      	b.n	80042de <_printf_i+0x102>
 80042aa:	680e      	ldr	r6, [r1, #0]
 80042ac:	602b      	str	r3, [r5, #0]
 80042ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042b2:	bf18      	it	ne
 80042b4:	b236      	sxthne	r6, r6
 80042b6:	e7ef      	b.n	8004298 <_printf_i+0xbc>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	6820      	ldr	r0, [r4, #0]
 80042bc:	1d19      	adds	r1, r3, #4
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	0601      	lsls	r1, r0, #24
 80042c2:	d501      	bpl.n	80042c8 <_printf_i+0xec>
 80042c4:	681e      	ldr	r6, [r3, #0]
 80042c6:	e002      	b.n	80042ce <_printf_i+0xf2>
 80042c8:	0646      	lsls	r6, r0, #25
 80042ca:	d5fb      	bpl.n	80042c4 <_printf_i+0xe8>
 80042cc:	881e      	ldrh	r6, [r3, #0]
 80042ce:	4854      	ldr	r0, [pc, #336]	; (8004420 <_printf_i+0x244>)
 80042d0:	2f6f      	cmp	r7, #111	; 0x6f
 80042d2:	bf0c      	ite	eq
 80042d4:	2308      	moveq	r3, #8
 80042d6:	230a      	movne	r3, #10
 80042d8:	2100      	movs	r1, #0
 80042da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042de:	6865      	ldr	r5, [r4, #4]
 80042e0:	60a5      	str	r5, [r4, #8]
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	bfa2      	ittt	ge
 80042e6:	6821      	ldrge	r1, [r4, #0]
 80042e8:	f021 0104 	bicge.w	r1, r1, #4
 80042ec:	6021      	strge	r1, [r4, #0]
 80042ee:	b90e      	cbnz	r6, 80042f4 <_printf_i+0x118>
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	d04d      	beq.n	8004390 <_printf_i+0x1b4>
 80042f4:	4615      	mov	r5, r2
 80042f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80042fa:	fb03 6711 	mls	r7, r3, r1, r6
 80042fe:	5dc7      	ldrb	r7, [r0, r7]
 8004300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004304:	4637      	mov	r7, r6
 8004306:	42bb      	cmp	r3, r7
 8004308:	460e      	mov	r6, r1
 800430a:	d9f4      	bls.n	80042f6 <_printf_i+0x11a>
 800430c:	2b08      	cmp	r3, #8
 800430e:	d10b      	bne.n	8004328 <_printf_i+0x14c>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	07de      	lsls	r6, r3, #31
 8004314:	d508      	bpl.n	8004328 <_printf_i+0x14c>
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	6861      	ldr	r1, [r4, #4]
 800431a:	4299      	cmp	r1, r3
 800431c:	bfde      	ittt	le
 800431e:	2330      	movle	r3, #48	; 0x30
 8004320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004324:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004328:	1b52      	subs	r2, r2, r5
 800432a:	6122      	str	r2, [r4, #16]
 800432c:	f8cd a000 	str.w	sl, [sp]
 8004330:	464b      	mov	r3, r9
 8004332:	aa03      	add	r2, sp, #12
 8004334:	4621      	mov	r1, r4
 8004336:	4640      	mov	r0, r8
 8004338:	f7ff fee2 	bl	8004100 <_printf_common>
 800433c:	3001      	adds	r0, #1
 800433e:	d14c      	bne.n	80043da <_printf_i+0x1fe>
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	b004      	add	sp, #16
 8004346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434a:	4835      	ldr	r0, [pc, #212]	; (8004420 <_printf_i+0x244>)
 800434c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004350:	6829      	ldr	r1, [r5, #0]
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	f851 6b04 	ldr.w	r6, [r1], #4
 8004358:	6029      	str	r1, [r5, #0]
 800435a:	061d      	lsls	r5, r3, #24
 800435c:	d514      	bpl.n	8004388 <_printf_i+0x1ac>
 800435e:	07df      	lsls	r7, r3, #31
 8004360:	bf44      	itt	mi
 8004362:	f043 0320 	orrmi.w	r3, r3, #32
 8004366:	6023      	strmi	r3, [r4, #0]
 8004368:	b91e      	cbnz	r6, 8004372 <_printf_i+0x196>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	f023 0320 	bic.w	r3, r3, #32
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	2310      	movs	r3, #16
 8004374:	e7b0      	b.n	80042d8 <_printf_i+0xfc>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	f043 0320 	orr.w	r3, r3, #32
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	2378      	movs	r3, #120	; 0x78
 8004380:	4828      	ldr	r0, [pc, #160]	; (8004424 <_printf_i+0x248>)
 8004382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004386:	e7e3      	b.n	8004350 <_printf_i+0x174>
 8004388:	0659      	lsls	r1, r3, #25
 800438a:	bf48      	it	mi
 800438c:	b2b6      	uxthmi	r6, r6
 800438e:	e7e6      	b.n	800435e <_printf_i+0x182>
 8004390:	4615      	mov	r5, r2
 8004392:	e7bb      	b.n	800430c <_printf_i+0x130>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	6826      	ldr	r6, [r4, #0]
 8004398:	6961      	ldr	r1, [r4, #20]
 800439a:	1d18      	adds	r0, r3, #4
 800439c:	6028      	str	r0, [r5, #0]
 800439e:	0635      	lsls	r5, r6, #24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	d501      	bpl.n	80043a8 <_printf_i+0x1cc>
 80043a4:	6019      	str	r1, [r3, #0]
 80043a6:	e002      	b.n	80043ae <_printf_i+0x1d2>
 80043a8:	0670      	lsls	r0, r6, #25
 80043aa:	d5fb      	bpl.n	80043a4 <_printf_i+0x1c8>
 80043ac:	8019      	strh	r1, [r3, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	4615      	mov	r5, r2
 80043b4:	e7ba      	b.n	800432c <_printf_i+0x150>
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	602a      	str	r2, [r5, #0]
 80043bc:	681d      	ldr	r5, [r3, #0]
 80043be:	6862      	ldr	r2, [r4, #4]
 80043c0:	2100      	movs	r1, #0
 80043c2:	4628      	mov	r0, r5
 80043c4:	f7fb ff14 	bl	80001f0 <memchr>
 80043c8:	b108      	cbz	r0, 80043ce <_printf_i+0x1f2>
 80043ca:	1b40      	subs	r0, r0, r5
 80043cc:	6060      	str	r0, [r4, #4]
 80043ce:	6863      	ldr	r3, [r4, #4]
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	2300      	movs	r3, #0
 80043d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d8:	e7a8      	b.n	800432c <_printf_i+0x150>
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	462a      	mov	r2, r5
 80043de:	4649      	mov	r1, r9
 80043e0:	4640      	mov	r0, r8
 80043e2:	47d0      	blx	sl
 80043e4:	3001      	adds	r0, #1
 80043e6:	d0ab      	beq.n	8004340 <_printf_i+0x164>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	079b      	lsls	r3, r3, #30
 80043ec:	d413      	bmi.n	8004416 <_printf_i+0x23a>
 80043ee:	68e0      	ldr	r0, [r4, #12]
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	4298      	cmp	r0, r3
 80043f4:	bfb8      	it	lt
 80043f6:	4618      	movlt	r0, r3
 80043f8:	e7a4      	b.n	8004344 <_printf_i+0x168>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4632      	mov	r2, r6
 80043fe:	4649      	mov	r1, r9
 8004400:	4640      	mov	r0, r8
 8004402:	47d0      	blx	sl
 8004404:	3001      	adds	r0, #1
 8004406:	d09b      	beq.n	8004340 <_printf_i+0x164>
 8004408:	3501      	adds	r5, #1
 800440a:	68e3      	ldr	r3, [r4, #12]
 800440c:	9903      	ldr	r1, [sp, #12]
 800440e:	1a5b      	subs	r3, r3, r1
 8004410:	42ab      	cmp	r3, r5
 8004412:	dcf2      	bgt.n	80043fa <_printf_i+0x21e>
 8004414:	e7eb      	b.n	80043ee <_printf_i+0x212>
 8004416:	2500      	movs	r5, #0
 8004418:	f104 0619 	add.w	r6, r4, #25
 800441c:	e7f5      	b.n	800440a <_printf_i+0x22e>
 800441e:	bf00      	nop
 8004420:	08004d59 	.word	0x08004d59
 8004424:	08004d6a 	.word	0x08004d6a

08004428 <_sbrk_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d06      	ldr	r5, [pc, #24]	; (8004444 <_sbrk_r+0x1c>)
 800442c:	2300      	movs	r3, #0
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc fa20 	bl	8000878 <_sbrk>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_sbrk_r+0x1a>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_sbrk_r+0x1a>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	20000170 	.word	0x20000170

08004448 <__swbuf_r>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	460e      	mov	r6, r1
 800444c:	4614      	mov	r4, r2
 800444e:	4605      	mov	r5, r0
 8004450:	b118      	cbz	r0, 800445a <__swbuf_r+0x12>
 8004452:	6983      	ldr	r3, [r0, #24]
 8004454:	b90b      	cbnz	r3, 800445a <__swbuf_r+0x12>
 8004456:	f000 f9d9 	bl	800480c <__sinit>
 800445a:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <__swbuf_r+0x98>)
 800445c:	429c      	cmp	r4, r3
 800445e:	d12b      	bne.n	80044b8 <__swbuf_r+0x70>
 8004460:	686c      	ldr	r4, [r5, #4]
 8004462:	69a3      	ldr	r3, [r4, #24]
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	071a      	lsls	r2, r3, #28
 800446a:	d52f      	bpl.n	80044cc <__swbuf_r+0x84>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	b36b      	cbz	r3, 80044cc <__swbuf_r+0x84>
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	6820      	ldr	r0, [r4, #0]
 8004474:	1ac0      	subs	r0, r0, r3
 8004476:	6963      	ldr	r3, [r4, #20]
 8004478:	b2f6      	uxtb	r6, r6
 800447a:	4283      	cmp	r3, r0
 800447c:	4637      	mov	r7, r6
 800447e:	dc04      	bgt.n	800448a <__swbuf_r+0x42>
 8004480:	4621      	mov	r1, r4
 8004482:	4628      	mov	r0, r5
 8004484:	f000 f92e 	bl	80046e4 <_fflush_r>
 8004488:	bb30      	cbnz	r0, 80044d8 <__swbuf_r+0x90>
 800448a:	68a3      	ldr	r3, [r4, #8]
 800448c:	3b01      	subs	r3, #1
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	701e      	strb	r6, [r3, #0]
 8004498:	6963      	ldr	r3, [r4, #20]
 800449a:	3001      	adds	r0, #1
 800449c:	4283      	cmp	r3, r0
 800449e:	d004      	beq.n	80044aa <__swbuf_r+0x62>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d506      	bpl.n	80044b4 <__swbuf_r+0x6c>
 80044a6:	2e0a      	cmp	r6, #10
 80044a8:	d104      	bne.n	80044b4 <__swbuf_r+0x6c>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 f919 	bl	80046e4 <_fflush_r>
 80044b2:	b988      	cbnz	r0, 80044d8 <__swbuf_r+0x90>
 80044b4:	4638      	mov	r0, r7
 80044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <__swbuf_r+0x9c>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d101      	bne.n	80044c2 <__swbuf_r+0x7a>
 80044be:	68ac      	ldr	r4, [r5, #8]
 80044c0:	e7cf      	b.n	8004462 <__swbuf_r+0x1a>
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <__swbuf_r+0xa0>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	bf08      	it	eq
 80044c8:	68ec      	ldreq	r4, [r5, #12]
 80044ca:	e7ca      	b.n	8004462 <__swbuf_r+0x1a>
 80044cc:	4621      	mov	r1, r4
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 f80c 	bl	80044ec <__swsetup_r>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d0cb      	beq.n	8004470 <__swbuf_r+0x28>
 80044d8:	f04f 37ff 	mov.w	r7, #4294967295
 80044dc:	e7ea      	b.n	80044b4 <__swbuf_r+0x6c>
 80044de:	bf00      	nop
 80044e0:	08004d9c 	.word	0x08004d9c
 80044e4:	08004dbc 	.word	0x08004dbc
 80044e8:	08004d7c 	.word	0x08004d7c

080044ec <__swsetup_r>:
 80044ec:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <__swsetup_r+0xcc>)
 80044ee:	b570      	push	{r4, r5, r6, lr}
 80044f0:	681d      	ldr	r5, [r3, #0]
 80044f2:	4606      	mov	r6, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	b125      	cbz	r5, 8004502 <__swsetup_r+0x16>
 80044f8:	69ab      	ldr	r3, [r5, #24]
 80044fa:	b913      	cbnz	r3, 8004502 <__swsetup_r+0x16>
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 f985 	bl	800480c <__sinit>
 8004502:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <__swsetup_r+0xd0>)
 8004504:	429c      	cmp	r4, r3
 8004506:	d10f      	bne.n	8004528 <__swsetup_r+0x3c>
 8004508:	686c      	ldr	r4, [r5, #4]
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004510:	0719      	lsls	r1, r3, #28
 8004512:	d42c      	bmi.n	800456e <__swsetup_r+0x82>
 8004514:	06dd      	lsls	r5, r3, #27
 8004516:	d411      	bmi.n	800453c <__swsetup_r+0x50>
 8004518:	2309      	movs	r3, #9
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	f04f 30ff 	mov.w	r0, #4294967295
 8004526:	e03e      	b.n	80045a6 <__swsetup_r+0xba>
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <__swsetup_r+0xd4>)
 800452a:	429c      	cmp	r4, r3
 800452c:	d101      	bne.n	8004532 <__swsetup_r+0x46>
 800452e:	68ac      	ldr	r4, [r5, #8]
 8004530:	e7eb      	b.n	800450a <__swsetup_r+0x1e>
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <__swsetup_r+0xd8>)
 8004534:	429c      	cmp	r4, r3
 8004536:	bf08      	it	eq
 8004538:	68ec      	ldreq	r4, [r5, #12]
 800453a:	e7e6      	b.n	800450a <__swsetup_r+0x1e>
 800453c:	0758      	lsls	r0, r3, #29
 800453e:	d512      	bpl.n	8004566 <__swsetup_r+0x7a>
 8004540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004542:	b141      	cbz	r1, 8004556 <__swsetup_r+0x6a>
 8004544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004548:	4299      	cmp	r1, r3
 800454a:	d002      	beq.n	8004552 <__swsetup_r+0x66>
 800454c:	4630      	mov	r0, r6
 800454e:	f7ff fb9d 	bl	8003c8c <_free_r>
 8004552:	2300      	movs	r3, #0
 8004554:	6363      	str	r3, [r4, #52]	; 0x34
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	2300      	movs	r3, #0
 8004560:	6063      	str	r3, [r4, #4]
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	b94b      	cbnz	r3, 8004586 <__swsetup_r+0x9a>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457c:	d003      	beq.n	8004586 <__swsetup_r+0x9a>
 800457e:	4621      	mov	r1, r4
 8004580:	4630      	mov	r0, r6
 8004582:	f000 fa09 	bl	8004998 <__smakebuf_r>
 8004586:	89a0      	ldrh	r0, [r4, #12]
 8004588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800458c:	f010 0301 	ands.w	r3, r0, #1
 8004590:	d00a      	beq.n	80045a8 <__swsetup_r+0xbc>
 8004592:	2300      	movs	r3, #0
 8004594:	60a3      	str	r3, [r4, #8]
 8004596:	6963      	ldr	r3, [r4, #20]
 8004598:	425b      	negs	r3, r3
 800459a:	61a3      	str	r3, [r4, #24]
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	b943      	cbnz	r3, 80045b2 <__swsetup_r+0xc6>
 80045a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045a4:	d1ba      	bne.n	800451c <__swsetup_r+0x30>
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	0781      	lsls	r1, r0, #30
 80045aa:	bf58      	it	pl
 80045ac:	6963      	ldrpl	r3, [r4, #20]
 80045ae:	60a3      	str	r3, [r4, #8]
 80045b0:	e7f4      	b.n	800459c <__swsetup_r+0xb0>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e7f7      	b.n	80045a6 <__swsetup_r+0xba>
 80045b6:	bf00      	nop
 80045b8:	20000010 	.word	0x20000010
 80045bc:	08004d9c 	.word	0x08004d9c
 80045c0:	08004dbc 	.word	0x08004dbc
 80045c4:	08004d7c 	.word	0x08004d7c

080045c8 <abort>:
 80045c8:	b508      	push	{r3, lr}
 80045ca:	2006      	movs	r0, #6
 80045cc:	f000 fa58 	bl	8004a80 <raise>
 80045d0:	2001      	movs	r0, #1
 80045d2:	f7fc f8d9 	bl	8000788 <_exit>
	...

080045d8 <__sflush_r>:
 80045d8:	898a      	ldrh	r2, [r1, #12]
 80045da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045de:	4605      	mov	r5, r0
 80045e0:	0710      	lsls	r0, r2, #28
 80045e2:	460c      	mov	r4, r1
 80045e4:	d458      	bmi.n	8004698 <__sflush_r+0xc0>
 80045e6:	684b      	ldr	r3, [r1, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dc05      	bgt.n	80045f8 <__sflush_r+0x20>
 80045ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dc02      	bgt.n	80045f8 <__sflush_r+0x20>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d0f9      	beq.n	80045f2 <__sflush_r+0x1a>
 80045fe:	2300      	movs	r3, #0
 8004600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004604:	682f      	ldr	r7, [r5, #0]
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	d032      	beq.n	8004670 <__sflush_r+0x98>
 800460a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	075a      	lsls	r2, r3, #29
 8004610:	d505      	bpl.n	800461e <__sflush_r+0x46>
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	1ac0      	subs	r0, r0, r3
 8004616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004618:	b10b      	cbz	r3, 800461e <__sflush_r+0x46>
 800461a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800461c:	1ac0      	subs	r0, r0, r3
 800461e:	2300      	movs	r3, #0
 8004620:	4602      	mov	r2, r0
 8004622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004624:	6a21      	ldr	r1, [r4, #32]
 8004626:	4628      	mov	r0, r5
 8004628:	47b0      	blx	r6
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	d106      	bne.n	800463e <__sflush_r+0x66>
 8004630:	6829      	ldr	r1, [r5, #0]
 8004632:	291d      	cmp	r1, #29
 8004634:	d82c      	bhi.n	8004690 <__sflush_r+0xb8>
 8004636:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <__sflush_r+0x108>)
 8004638:	40ca      	lsrs	r2, r1
 800463a:	07d6      	lsls	r6, r2, #31
 800463c:	d528      	bpl.n	8004690 <__sflush_r+0xb8>
 800463e:	2200      	movs	r2, #0
 8004640:	6062      	str	r2, [r4, #4]
 8004642:	04d9      	lsls	r1, r3, #19
 8004644:	6922      	ldr	r2, [r4, #16]
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	d504      	bpl.n	8004654 <__sflush_r+0x7c>
 800464a:	1c42      	adds	r2, r0, #1
 800464c:	d101      	bne.n	8004652 <__sflush_r+0x7a>
 800464e:	682b      	ldr	r3, [r5, #0]
 8004650:	b903      	cbnz	r3, 8004654 <__sflush_r+0x7c>
 8004652:	6560      	str	r0, [r4, #84]	; 0x54
 8004654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004656:	602f      	str	r7, [r5, #0]
 8004658:	2900      	cmp	r1, #0
 800465a:	d0ca      	beq.n	80045f2 <__sflush_r+0x1a>
 800465c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004660:	4299      	cmp	r1, r3
 8004662:	d002      	beq.n	800466a <__sflush_r+0x92>
 8004664:	4628      	mov	r0, r5
 8004666:	f7ff fb11 	bl	8003c8c <_free_r>
 800466a:	2000      	movs	r0, #0
 800466c:	6360      	str	r0, [r4, #52]	; 0x34
 800466e:	e7c1      	b.n	80045f4 <__sflush_r+0x1c>
 8004670:	6a21      	ldr	r1, [r4, #32]
 8004672:	2301      	movs	r3, #1
 8004674:	4628      	mov	r0, r5
 8004676:	47b0      	blx	r6
 8004678:	1c41      	adds	r1, r0, #1
 800467a:	d1c7      	bne.n	800460c <__sflush_r+0x34>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0c4      	beq.n	800460c <__sflush_r+0x34>
 8004682:	2b1d      	cmp	r3, #29
 8004684:	d001      	beq.n	800468a <__sflush_r+0xb2>
 8004686:	2b16      	cmp	r3, #22
 8004688:	d101      	bne.n	800468e <__sflush_r+0xb6>
 800468a:	602f      	str	r7, [r5, #0]
 800468c:	e7b1      	b.n	80045f2 <__sflush_r+0x1a>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	e7ad      	b.n	80045f4 <__sflush_r+0x1c>
 8004698:	690f      	ldr	r7, [r1, #16]
 800469a:	2f00      	cmp	r7, #0
 800469c:	d0a9      	beq.n	80045f2 <__sflush_r+0x1a>
 800469e:	0793      	lsls	r3, r2, #30
 80046a0:	680e      	ldr	r6, [r1, #0]
 80046a2:	bf08      	it	eq
 80046a4:	694b      	ldreq	r3, [r1, #20]
 80046a6:	600f      	str	r7, [r1, #0]
 80046a8:	bf18      	it	ne
 80046aa:	2300      	movne	r3, #0
 80046ac:	eba6 0807 	sub.w	r8, r6, r7
 80046b0:	608b      	str	r3, [r1, #8]
 80046b2:	f1b8 0f00 	cmp.w	r8, #0
 80046b6:	dd9c      	ble.n	80045f2 <__sflush_r+0x1a>
 80046b8:	6a21      	ldr	r1, [r4, #32]
 80046ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046bc:	4643      	mov	r3, r8
 80046be:	463a      	mov	r2, r7
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b0      	blx	r6
 80046c4:	2800      	cmp	r0, #0
 80046c6:	dc06      	bgt.n	80046d6 <__sflush_r+0xfe>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	e78e      	b.n	80045f4 <__sflush_r+0x1c>
 80046d6:	4407      	add	r7, r0
 80046d8:	eba8 0800 	sub.w	r8, r8, r0
 80046dc:	e7e9      	b.n	80046b2 <__sflush_r+0xda>
 80046de:	bf00      	nop
 80046e0:	20400001 	.word	0x20400001

080046e4 <_fflush_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	4605      	mov	r5, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	b913      	cbnz	r3, 80046f4 <_fflush_r+0x10>
 80046ee:	2500      	movs	r5, #0
 80046f0:	4628      	mov	r0, r5
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	b118      	cbz	r0, 80046fe <_fflush_r+0x1a>
 80046f6:	6983      	ldr	r3, [r0, #24]
 80046f8:	b90b      	cbnz	r3, 80046fe <_fflush_r+0x1a>
 80046fa:	f000 f887 	bl	800480c <__sinit>
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <_fflush_r+0x6c>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d11b      	bne.n	800473c <_fflush_r+0x58>
 8004704:	686c      	ldr	r4, [r5, #4]
 8004706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ef      	beq.n	80046ee <_fflush_r+0xa>
 800470e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004710:	07d0      	lsls	r0, r2, #31
 8004712:	d404      	bmi.n	800471e <_fflush_r+0x3a>
 8004714:	0599      	lsls	r1, r3, #22
 8004716:	d402      	bmi.n	800471e <_fflush_r+0x3a>
 8004718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471a:	f000 f915 	bl	8004948 <__retarget_lock_acquire_recursive>
 800471e:	4628      	mov	r0, r5
 8004720:	4621      	mov	r1, r4
 8004722:	f7ff ff59 	bl	80045d8 <__sflush_r>
 8004726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004728:	07da      	lsls	r2, r3, #31
 800472a:	4605      	mov	r5, r0
 800472c:	d4e0      	bmi.n	80046f0 <_fflush_r+0xc>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	d4dd      	bmi.n	80046f0 <_fflush_r+0xc>
 8004734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004736:	f000 f908 	bl	800494a <__retarget_lock_release_recursive>
 800473a:	e7d9      	b.n	80046f0 <_fflush_r+0xc>
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <_fflush_r+0x70>)
 800473e:	429c      	cmp	r4, r3
 8004740:	d101      	bne.n	8004746 <_fflush_r+0x62>
 8004742:	68ac      	ldr	r4, [r5, #8]
 8004744:	e7df      	b.n	8004706 <_fflush_r+0x22>
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <_fflush_r+0x74>)
 8004748:	429c      	cmp	r4, r3
 800474a:	bf08      	it	eq
 800474c:	68ec      	ldreq	r4, [r5, #12]
 800474e:	e7da      	b.n	8004706 <_fflush_r+0x22>
 8004750:	08004d9c 	.word	0x08004d9c
 8004754:	08004dbc 	.word	0x08004dbc
 8004758:	08004d7c 	.word	0x08004d7c

0800475c <std>:
 800475c:	2300      	movs	r3, #0
 800475e:	b510      	push	{r4, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	e9c0 3300 	strd	r3, r3, [r0]
 8004766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800476a:	6083      	str	r3, [r0, #8]
 800476c:	8181      	strh	r1, [r0, #12]
 800476e:	6643      	str	r3, [r0, #100]	; 0x64
 8004770:	81c2      	strh	r2, [r0, #14]
 8004772:	6183      	str	r3, [r0, #24]
 8004774:	4619      	mov	r1, r3
 8004776:	2208      	movs	r2, #8
 8004778:	305c      	adds	r0, #92	; 0x5c
 800477a:	f7ff f9d7 	bl	8003b2c <memset>
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <std+0x38>)
 8004780:	6263      	str	r3, [r4, #36]	; 0x24
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <std+0x3c>)
 8004784:	62a3      	str	r3, [r4, #40]	; 0x28
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <std+0x40>)
 8004788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <std+0x44>)
 800478c:	6224      	str	r4, [r4, #32]
 800478e:	6323      	str	r3, [r4, #48]	; 0x30
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	08004ab9 	.word	0x08004ab9
 8004798:	08004adb 	.word	0x08004adb
 800479c:	08004b13 	.word	0x08004b13
 80047a0:	08004b37 	.word	0x08004b37

080047a4 <_cleanup_r>:
 80047a4:	4901      	ldr	r1, [pc, #4]	; (80047ac <_cleanup_r+0x8>)
 80047a6:	f000 b8af 	b.w	8004908 <_fwalk_reent>
 80047aa:	bf00      	nop
 80047ac:	080046e5 	.word	0x080046e5

080047b0 <__sfmoreglue>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	2268      	movs	r2, #104	; 0x68
 80047b4:	1e4d      	subs	r5, r1, #1
 80047b6:	4355      	muls	r5, r2
 80047b8:	460e      	mov	r6, r1
 80047ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047be:	f7ff fad1 	bl	8003d64 <_malloc_r>
 80047c2:	4604      	mov	r4, r0
 80047c4:	b140      	cbz	r0, 80047d8 <__sfmoreglue+0x28>
 80047c6:	2100      	movs	r1, #0
 80047c8:	e9c0 1600 	strd	r1, r6, [r0]
 80047cc:	300c      	adds	r0, #12
 80047ce:	60a0      	str	r0, [r4, #8]
 80047d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047d4:	f7ff f9aa 	bl	8003b2c <memset>
 80047d8:	4620      	mov	r0, r4
 80047da:	bd70      	pop	{r4, r5, r6, pc}

080047dc <__sfp_lock_acquire>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__sfp_lock_acquire+0x8>)
 80047de:	f000 b8b3 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	2000016d 	.word	0x2000016d

080047e8 <__sfp_lock_release>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__sfp_lock_release+0x8>)
 80047ea:	f000 b8ae 	b.w	800494a <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	2000016d 	.word	0x2000016d

080047f4 <__sinit_lock_acquire>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sinit_lock_acquire+0x8>)
 80047f6:	f000 b8a7 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	2000016e 	.word	0x2000016e

08004800 <__sinit_lock_release>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__sinit_lock_release+0x8>)
 8004802:	f000 b8a2 	b.w	800494a <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	2000016e 	.word	0x2000016e

0800480c <__sinit>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
 8004810:	f7ff fff0 	bl	80047f4 <__sinit_lock_acquire>
 8004814:	69a3      	ldr	r3, [r4, #24]
 8004816:	b11b      	cbz	r3, 8004820 <__sinit+0x14>
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f7ff bff0 	b.w	8004800 <__sinit_lock_release>
 8004820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004824:	6523      	str	r3, [r4, #80]	; 0x50
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <__sinit+0x68>)
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <__sinit+0x6c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	62a2      	str	r2, [r4, #40]	; 0x28
 800482e:	42a3      	cmp	r3, r4
 8004830:	bf04      	itt	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	61a3      	streq	r3, [r4, #24]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f820 	bl	800487c <__sfp>
 800483c:	6060      	str	r0, [r4, #4]
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f81c 	bl	800487c <__sfp>
 8004844:	60a0      	str	r0, [r4, #8]
 8004846:	4620      	mov	r0, r4
 8004848:	f000 f818 	bl	800487c <__sfp>
 800484c:	2200      	movs	r2, #0
 800484e:	60e0      	str	r0, [r4, #12]
 8004850:	2104      	movs	r1, #4
 8004852:	6860      	ldr	r0, [r4, #4]
 8004854:	f7ff ff82 	bl	800475c <std>
 8004858:	68a0      	ldr	r0, [r4, #8]
 800485a:	2201      	movs	r2, #1
 800485c:	2109      	movs	r1, #9
 800485e:	f7ff ff7d 	bl	800475c <std>
 8004862:	68e0      	ldr	r0, [r4, #12]
 8004864:	2202      	movs	r2, #2
 8004866:	2112      	movs	r1, #18
 8004868:	f7ff ff78 	bl	800475c <std>
 800486c:	2301      	movs	r3, #1
 800486e:	61a3      	str	r3, [r4, #24]
 8004870:	e7d2      	b.n	8004818 <__sinit+0xc>
 8004872:	bf00      	nop
 8004874:	08004c94 	.word	0x08004c94
 8004878:	080047a5 	.word	0x080047a5

0800487c <__sfp>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	4607      	mov	r7, r0
 8004880:	f7ff ffac 	bl	80047dc <__sfp_lock_acquire>
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <__sfp+0x84>)
 8004886:	681e      	ldr	r6, [r3, #0]
 8004888:	69b3      	ldr	r3, [r6, #24]
 800488a:	b913      	cbnz	r3, 8004892 <__sfp+0x16>
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ffbd 	bl	800480c <__sinit>
 8004892:	3648      	adds	r6, #72	; 0x48
 8004894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004898:	3b01      	subs	r3, #1
 800489a:	d503      	bpl.n	80048a4 <__sfp+0x28>
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	b30b      	cbz	r3, 80048e4 <__sfp+0x68>
 80048a0:	6836      	ldr	r6, [r6, #0]
 80048a2:	e7f7      	b.n	8004894 <__sfp+0x18>
 80048a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048a8:	b9d5      	cbnz	r5, 80048e0 <__sfp+0x64>
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <__sfp+0x88>)
 80048ac:	60e3      	str	r3, [r4, #12]
 80048ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048b2:	6665      	str	r5, [r4, #100]	; 0x64
 80048b4:	f000 f847 	bl	8004946 <__retarget_lock_init_recursive>
 80048b8:	f7ff ff96 	bl	80047e8 <__sfp_lock_release>
 80048bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048c4:	6025      	str	r5, [r4, #0]
 80048c6:	61a5      	str	r5, [r4, #24]
 80048c8:	2208      	movs	r2, #8
 80048ca:	4629      	mov	r1, r5
 80048cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048d0:	f7ff f92c 	bl	8003b2c <memset>
 80048d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048dc:	4620      	mov	r0, r4
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e0:	3468      	adds	r4, #104	; 0x68
 80048e2:	e7d9      	b.n	8004898 <__sfp+0x1c>
 80048e4:	2104      	movs	r1, #4
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7ff ff62 	bl	80047b0 <__sfmoreglue>
 80048ec:	4604      	mov	r4, r0
 80048ee:	6030      	str	r0, [r6, #0]
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d1d5      	bne.n	80048a0 <__sfp+0x24>
 80048f4:	f7ff ff78 	bl	80047e8 <__sfp_lock_release>
 80048f8:	230c      	movs	r3, #12
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	e7ee      	b.n	80048dc <__sfp+0x60>
 80048fe:	bf00      	nop
 8004900:	08004c94 	.word	0x08004c94
 8004904:	ffff0001 	.word	0xffff0001

08004908 <_fwalk_reent>:
 8004908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800490c:	4606      	mov	r6, r0
 800490e:	4688      	mov	r8, r1
 8004910:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004914:	2700      	movs	r7, #0
 8004916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800491a:	f1b9 0901 	subs.w	r9, r9, #1
 800491e:	d505      	bpl.n	800492c <_fwalk_reent+0x24>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	2c00      	cmp	r4, #0
 8004924:	d1f7      	bne.n	8004916 <_fwalk_reent+0xe>
 8004926:	4638      	mov	r0, r7
 8004928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800492c:	89ab      	ldrh	r3, [r5, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d907      	bls.n	8004942 <_fwalk_reent+0x3a>
 8004932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004936:	3301      	adds	r3, #1
 8004938:	d003      	beq.n	8004942 <_fwalk_reent+0x3a>
 800493a:	4629      	mov	r1, r5
 800493c:	4630      	mov	r0, r6
 800493e:	47c0      	blx	r8
 8004940:	4307      	orrs	r7, r0
 8004942:	3568      	adds	r5, #104	; 0x68
 8004944:	e7e9      	b.n	800491a <_fwalk_reent+0x12>

08004946 <__retarget_lock_init_recursive>:
 8004946:	4770      	bx	lr

08004948 <__retarget_lock_acquire_recursive>:
 8004948:	4770      	bx	lr

0800494a <__retarget_lock_release_recursive>:
 800494a:	4770      	bx	lr

0800494c <__swhatbuf_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	460e      	mov	r6, r1
 8004950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004954:	2900      	cmp	r1, #0
 8004956:	b096      	sub	sp, #88	; 0x58
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	da08      	bge.n	8004970 <__swhatbuf_r+0x24>
 800495e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	061a      	lsls	r2, r3, #24
 8004968:	d410      	bmi.n	800498c <__swhatbuf_r+0x40>
 800496a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496e:	e00e      	b.n	800498e <__swhatbuf_r+0x42>
 8004970:	466a      	mov	r2, sp
 8004972:	f000 f907 	bl	8004b84 <_fstat_r>
 8004976:	2800      	cmp	r0, #0
 8004978:	dbf1      	blt.n	800495e <__swhatbuf_r+0x12>
 800497a:	9a01      	ldr	r2, [sp, #4]
 800497c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004984:	425a      	negs	r2, r3
 8004986:	415a      	adcs	r2, r3
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	e7ee      	b.n	800496a <__swhatbuf_r+0x1e>
 800498c:	2340      	movs	r3, #64	; 0x40
 800498e:	2000      	movs	r0, #0
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	b016      	add	sp, #88	; 0x58
 8004994:	bd70      	pop	{r4, r5, r6, pc}
	...

08004998 <__smakebuf_r>:
 8004998:	898b      	ldrh	r3, [r1, #12]
 800499a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800499c:	079d      	lsls	r5, r3, #30
 800499e:	4606      	mov	r6, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	d507      	bpl.n	80049b4 <__smakebuf_r+0x1c>
 80049a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	2301      	movs	r3, #1
 80049ae:	6163      	str	r3, [r4, #20]
 80049b0:	b002      	add	sp, #8
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	ab01      	add	r3, sp, #4
 80049b6:	466a      	mov	r2, sp
 80049b8:	f7ff ffc8 	bl	800494c <__swhatbuf_r>
 80049bc:	9900      	ldr	r1, [sp, #0]
 80049be:	4605      	mov	r5, r0
 80049c0:	4630      	mov	r0, r6
 80049c2:	f7ff f9cf 	bl	8003d64 <_malloc_r>
 80049c6:	b948      	cbnz	r0, 80049dc <__smakebuf_r+0x44>
 80049c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049cc:	059a      	lsls	r2, r3, #22
 80049ce:	d4ef      	bmi.n	80049b0 <__smakebuf_r+0x18>
 80049d0:	f023 0303 	bic.w	r3, r3, #3
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	e7e3      	b.n	80049a4 <__smakebuf_r+0xc>
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <__smakebuf_r+0x7c>)
 80049de:	62b3      	str	r3, [r6, #40]	; 0x28
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	6020      	str	r0, [r4, #0]
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	9b00      	ldr	r3, [sp, #0]
 80049ec:	6163      	str	r3, [r4, #20]
 80049ee:	9b01      	ldr	r3, [sp, #4]
 80049f0:	6120      	str	r0, [r4, #16]
 80049f2:	b15b      	cbz	r3, 8004a0c <__smakebuf_r+0x74>
 80049f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 f8d5 	bl	8004ba8 <_isatty_r>
 80049fe:	b128      	cbz	r0, 8004a0c <__smakebuf_r+0x74>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	89a0      	ldrh	r0, [r4, #12]
 8004a0e:	4305      	orrs	r5, r0
 8004a10:	81a5      	strh	r5, [r4, #12]
 8004a12:	e7cd      	b.n	80049b0 <__smakebuf_r+0x18>
 8004a14:	080047a5 	.word	0x080047a5

08004a18 <__malloc_lock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	; (8004a20 <__malloc_lock+0x8>)
 8004a1a:	f7ff bf95 	b.w	8004948 <__retarget_lock_acquire_recursive>
 8004a1e:	bf00      	nop
 8004a20:	2000016c 	.word	0x2000016c

08004a24 <__malloc_unlock>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__malloc_unlock+0x8>)
 8004a26:	f7ff bf90 	b.w	800494a <__retarget_lock_release_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	2000016c 	.word	0x2000016c

08004a30 <_raise_r>:
 8004a30:	291f      	cmp	r1, #31
 8004a32:	b538      	push	{r3, r4, r5, lr}
 8004a34:	4604      	mov	r4, r0
 8004a36:	460d      	mov	r5, r1
 8004a38:	d904      	bls.n	8004a44 <_raise_r+0x14>
 8004a3a:	2316      	movs	r3, #22
 8004a3c:	6003      	str	r3, [r0, #0]
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004a46:	b112      	cbz	r2, 8004a4e <_raise_r+0x1e>
 8004a48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a4c:	b94b      	cbnz	r3, 8004a62 <_raise_r+0x32>
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f000 f830 	bl	8004ab4 <_getpid_r>
 8004a54:	462a      	mov	r2, r5
 8004a56:	4601      	mov	r1, r0
 8004a58:	4620      	mov	r0, r4
 8004a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a5e:	f000 b817 	b.w	8004a90 <_kill_r>
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d00a      	beq.n	8004a7c <_raise_r+0x4c>
 8004a66:	1c59      	adds	r1, r3, #1
 8004a68:	d103      	bne.n	8004a72 <_raise_r+0x42>
 8004a6a:	2316      	movs	r3, #22
 8004a6c:	6003      	str	r3, [r0, #0]
 8004a6e:	2001      	movs	r0, #1
 8004a70:	e7e7      	b.n	8004a42 <_raise_r+0x12>
 8004a72:	2400      	movs	r4, #0
 8004a74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004a78:	4628      	mov	r0, r5
 8004a7a:	4798      	blx	r3
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	e7e0      	b.n	8004a42 <_raise_r+0x12>

08004a80 <raise>:
 8004a80:	4b02      	ldr	r3, [pc, #8]	; (8004a8c <raise+0xc>)
 8004a82:	4601      	mov	r1, r0
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	f7ff bfd3 	b.w	8004a30 <_raise_r>
 8004a8a:	bf00      	nop
 8004a8c:	20000010 	.word	0x20000010

08004a90 <_kill_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d07      	ldr	r5, [pc, #28]	; (8004ab0 <_kill_r+0x20>)
 8004a94:	2300      	movs	r3, #0
 8004a96:	4604      	mov	r4, r0
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	602b      	str	r3, [r5, #0]
 8004a9e:	f7fb fe63 	bl	8000768 <_kill>
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	d102      	bne.n	8004aac <_kill_r+0x1c>
 8004aa6:	682b      	ldr	r3, [r5, #0]
 8004aa8:	b103      	cbz	r3, 8004aac <_kill_r+0x1c>
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	bd38      	pop	{r3, r4, r5, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000170 	.word	0x20000170

08004ab4 <_getpid_r>:
 8004ab4:	f7fb be50 	b.w	8000758 <_getpid>

08004ab8 <__sread>:
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	460c      	mov	r4, r1
 8004abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac0:	f000 f894 	bl	8004bec <_read_r>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	bfab      	itete	ge
 8004ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aca:	89a3      	ldrhlt	r3, [r4, #12]
 8004acc:	181b      	addge	r3, r3, r0
 8004ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ad2:	bfac      	ite	ge
 8004ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ad6:	81a3      	strhlt	r3, [r4, #12]
 8004ad8:	bd10      	pop	{r4, pc}

08004ada <__swrite>:
 8004ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	461f      	mov	r7, r3
 8004ae0:	898b      	ldrh	r3, [r1, #12]
 8004ae2:	05db      	lsls	r3, r3, #23
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	4616      	mov	r6, r2
 8004aea:	d505      	bpl.n	8004af8 <__swrite+0x1e>
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	2302      	movs	r3, #2
 8004af2:	2200      	movs	r2, #0
 8004af4:	f000 f868 	bl	8004bc8 <_lseek_r>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b02:	81a3      	strh	r3, [r4, #12]
 8004b04:	4632      	mov	r2, r6
 8004b06:	463b      	mov	r3, r7
 8004b08:	4628      	mov	r0, r5
 8004b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	f000 b817 	b.w	8004b40 <_write_r>

08004b12 <__sseek>:
 8004b12:	b510      	push	{r4, lr}
 8004b14:	460c      	mov	r4, r1
 8004b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1a:	f000 f855 	bl	8004bc8 <_lseek_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	bf15      	itete	ne
 8004b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b2e:	81a3      	strheq	r3, [r4, #12]
 8004b30:	bf18      	it	ne
 8004b32:	81a3      	strhne	r3, [r4, #12]
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <__sclose>:
 8004b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3a:	f000 b813 	b.w	8004b64 <_close_r>
	...

08004b40 <_write_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d07      	ldr	r5, [pc, #28]	; (8004b60 <_write_r+0x20>)
 8004b44:	4604      	mov	r4, r0
 8004b46:	4608      	mov	r0, r1
 8004b48:	4611      	mov	r1, r2
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	602a      	str	r2, [r5, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f7fb fe41 	bl	80007d6 <_write>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_write_r+0x1e>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_write_r+0x1e>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000170 	.word	0x20000170

08004b64 <_close_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d06      	ldr	r5, [pc, #24]	; (8004b80 <_close_r+0x1c>)
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	f7fb fe4d 	bl	800080e <_close>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_close_r+0x1a>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_close_r+0x1a>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	20000170 	.word	0x20000170

08004b84 <_fstat_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d07      	ldr	r5, [pc, #28]	; (8004ba4 <_fstat_r+0x20>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4611      	mov	r1, r2
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	f7fb fe48 	bl	8000826 <_fstat>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	d102      	bne.n	8004ba0 <_fstat_r+0x1c>
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	b103      	cbz	r3, 8004ba0 <_fstat_r+0x1c>
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000170 	.word	0x20000170

08004ba8 <_isatty_r>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4d06      	ldr	r5, [pc, #24]	; (8004bc4 <_isatty_r+0x1c>)
 8004bac:	2300      	movs	r3, #0
 8004bae:	4604      	mov	r4, r0
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	f7fb fe47 	bl	8000846 <_isatty>
 8004bb8:	1c43      	adds	r3, r0, #1
 8004bba:	d102      	bne.n	8004bc2 <_isatty_r+0x1a>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	b103      	cbz	r3, 8004bc2 <_isatty_r+0x1a>
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20000170 	.word	0x20000170

08004bc8 <_lseek_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d07      	ldr	r5, [pc, #28]	; (8004be8 <_lseek_r+0x20>)
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4608      	mov	r0, r1
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f7fb fe40 	bl	800085c <_lseek>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_lseek_r+0x1e>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_lseek_r+0x1e>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	20000170 	.word	0x20000170

08004bec <_read_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d07      	ldr	r5, [pc, #28]	; (8004c0c <_read_r+0x20>)
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	4608      	mov	r0, r1
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f7fb fdce 	bl	800079c <_read>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_read_r+0x1e>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_read_r+0x1e>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	20000170 	.word	0x20000170

08004c10 <_init>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr

08004c1c <_fini>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr


pin_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004098  08004098  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a0  080040a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004118  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004118  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c512  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f03  00000000  00000000  0002c5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b72  00000000  00000000  0002f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9b0  00000000  00000000  00050242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c04e0  00000000  00000000  0005cbf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f00  00000000  00000000  0011d124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ec8 	.word	0x08003ec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003ec8 	.word	0x08003ec8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 f9c3 	bl	8000932 <HAL_Init>
  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

 user_USART1_UART_Init();
 80005ac:	f002 faa0 	bl	8002af0 <user_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  APPLICATION();
 80005b0:	f002 f9b4 	bl	800291c <APPLICATION>
 80005b4:	e7fc      	b.n	80005b0 <main+0xc>

080005b6 <Error_Handler>:
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
void Error_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ba:	b672      	cpsid	i
}
 80005bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report  the HAL error return state */
  __disable_irq();
  while (1)
 80005be:	e7fe      	b.n	80005be <Error_Handler+0x8>

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x44>)
 80005c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x44>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6613      	str	r3, [r2, #96]	; 0x60
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x44>)
 80005d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_MspInit+0x44>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <HAL_MspInit+0x44>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_MspInit+0x44>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09e      	sub	sp, #120	; 0x78
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2254      	movs	r2, #84	; 0x54
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fbdb 	bl	8002de4 <memset>
  if(huart->Instance==USART1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <HAL_UART_MspInit+0xb8>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d13f      	bne.n	80006b8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000638:	2301      	movs	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fdd7 	bl	80011f8 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000650:	f7ff ffb1 	bl	80005b6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_UART_MspInit+0xbc>)
 8000656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_UART_MspInit+0xbc>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6613      	str	r3, [r2, #96]	; 0x60
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_UART_MspInit+0xbc>)
 8000662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_UART_MspInit+0xbc>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_UART_MspInit+0xbc>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_UART_MspInit+0xbc>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000684:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000688:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000696:	2307      	movs	r3, #7
 8000698:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 fb4a 	bl	8000d3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2025      	movs	r0, #37	; 0x25
 80006ae:	f000 fa90 	bl	8000bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006b2:	2025      	movs	r0, #37	; 0x25
 80006b4:	f000 faa9 	bl	8000c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3778      	adds	r7, #120	; 0x78
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40013800 	.word	0x40013800
 80006c4:	40021000 	.word	0x40021000

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f962 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <USART1_IRQHandler+0x10>)
 8000722:	f001 f971 	bl	8001a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000f0 	.word	0x200000f0

08000730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return 1;
 8000734:	2301      	movs	r3, #1
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <_kill>:

int _kill(int pid, int sig)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800074a:	f002 fb21 	bl	8002d90 <__errno>
 800074e:	4603      	mov	r3, r0
 8000750:	2216      	movs	r2, #22
 8000752:	601a      	str	r2, [r3, #0]
  return -1;
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_exit>:

void _exit (int status)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ffe7 	bl	8000740 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000772:	e7fe      	b.n	8000772 <_exit+0x12>

08000774 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e00a      	b.n	800079c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000786:	f3af 8000 	nop.w
 800078a:	4601      	mov	r1, r0
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	60ba      	str	r2, [r7, #8]
 8000792:	b2ca      	uxtb	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3301      	adds	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697a      	ldr	r2, [r7, #20]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dbf0      	blt.n	8000786 <_read+0x12>
  }

  return len;
 80007a4:	687b      	ldr	r3, [r7, #4]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e009      	b.n	80007d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60ba      	str	r2, [r7, #8]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dbf1      	blt.n	80007c0 <_write+0x12>
  }
  return len;
 80007dc:	687b      	ldr	r3, [r7, #4]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <_close>:

int _close(int file)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080e:	605a      	str	r2, [r3, #4]
  return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <_isatty>:

int _isatty(int file)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <_sbrk+0x5c>)
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <_sbrk+0x60>)
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d102      	bne.n	8000872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <_sbrk+0x64>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <_sbrk+0x68>)
 8000870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	429a      	cmp	r2, r3
 800087e:	d207      	bcs.n	8000890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000880:	f002 fa86 	bl	8002d90 <__errno>
 8000884:	4603      	mov	r3, r0
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	e009      	b.n	80008a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <_sbrk+0x64>)
 80008a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20010000 	.word	0x20010000
 80008b0:	00000400 	.word	0x00000400
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	20000188 	.word	0x20000188

080008bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <SystemInit+0x20>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <SystemInit+0x20>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000918 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f7ff ffea 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	; (8000920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f002 fa45 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000912:	f7ff fe47 	bl	80005a4 <main>

08000916 <LoopForever>:

LoopForever:
    b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000918:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000924:	080040a8 	.word	0x080040a8
  ldr r2, =_sbss
 8000928:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800092c:	20000184 	.word	0x20000184

08000930 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_IRQHandler>

08000932 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f93d 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f80e 	bl	8000964 <HAL_InitTick>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000954:	f7ff fe34 	bl	80005c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	79fb      	ldrb	r3, [r7, #7]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d023      	beq.n	80009c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_InitTick+0x70>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f949 	bl	8000c26 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10f      	bne.n	80009ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d809      	bhi.n	80009b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f913 	bl	8000bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_InitTick+0x74>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e007      	b.n	80009c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e004      	b.n	80009c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e001      	b.n	80009c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000090 	.word	0x20000090

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000090 	.word	0x20000090

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <__NVIC_EnableIRQ+0x38>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff8e 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff29 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff3e 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff8e 	bl	8000b10 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5d 	bl	8000abc <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff31 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa2 	bl	8000b78 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d008      	beq.n	8000c68 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2204      	movs	r2, #4
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e022      	b.n	8000cae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 020e 	bic.w	r2, r2, #14
 8000c76:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0201 	bic.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	f003 021c 	and.w	r2, r3, #28
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	2101      	movs	r1, #1
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d005      	beq.n	8000cde <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e029      	b.n	8000d32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 020e 	bic.w	r2, r2, #14
 8000cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0201 	bic.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f003 021c 	and.w	r2, r3, #28
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	4798      	blx	r3
    }
  }
  return status;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e148      	b.n	8000fde <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 813a 	beq.w	8000fd8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x40>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d017      	beq.n	8000e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d123      	bne.n	8000e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	6939      	ldr	r1, [r7, #16]
 8000e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0203 	and.w	r2, r3, #3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8094 	beq.w	8000fd8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb0:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb4:	4a51      	ldr	r2, [pc, #324]	; (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6613      	str	r3, [r2, #96]	; 0x60
 8000ebc:	4b4f      	ldr	r3, [pc, #316]	; (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec8:	4a4d      	ldr	r2, [pc, #308]	; (8001000 <HAL_GPIO_Init+0x2c4>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ef2:	d00d      	beq.n	8000f10 <HAL_GPIO_Init+0x1d4>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a43      	ldr	r2, [pc, #268]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d007      	beq.n	8000f0c <HAL_GPIO_Init+0x1d0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a42      	ldr	r2, [pc, #264]	; (8001008 <HAL_GPIO_Init+0x2cc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d101      	bne.n	8000f08 <HAL_GPIO_Init+0x1cc>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e004      	b.n	8000f12 <HAL_GPIO_Init+0x1d6>
 8000f08:	2307      	movs	r3, #7
 8000f0a:	e002      	b.n	8000f12 <HAL_GPIO_Init+0x1d6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <HAL_GPIO_Init+0x1d6>
 8000f10:	2300      	movs	r3, #0
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	f002 0203 	and.w	r2, r2, #3
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f22:	4937      	ldr	r1, [pc, #220]	; (8001000 <HAL_GPIO_Init+0x2c4>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f54:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f84:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa8:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f47f aeaf 	bne.w	8000d4c <HAL_GPIO_Init+0x10>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000
 8001004:	48000400 	.word	0x48000400
 8001008:	48000800 	.word	0x48000800
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e001      	b.n	8001032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800105c:	e002      	b.n	8001064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_GetSysClockFreq+0x34>
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	2b0c      	cmp	r3, #12
 800109c:	d121      	bne.n	80010e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d11e      	bne.n	80010e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 80010b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e005      	b.n	80010cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80010cc:	4a2b      	ldr	r2, [pc, #172]	; (800117c <HAL_RCC_GetSysClockFreq+0x10c>)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10d      	bne.n	80010f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010e0:	e00a      	b.n	80010f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <HAL_RCC_GetSysClockFreq+0x110>)
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e004      	b.n	80010f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_RCC_GetSysClockFreq+0x114>)
 80010f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	2b0c      	cmp	r3, #12
 80010fc:	d134      	bne.n	8001168 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d003      	beq.n	8001116 <HAL_RCC_GetSysClockFreq+0xa6>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d003      	beq.n	800111c <HAL_RCC_GetSysClockFreq+0xac>
 8001114:	e005      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_RCC_GetSysClockFreq+0x110>)
 8001118:	617b      	str	r3, [r7, #20]
      break;
 800111a:	e005      	b.n	8001128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_RCC_GetSysClockFreq+0x114>)
 800111e:	617b      	str	r3, [r7, #20]
      break;
 8001120:	e002      	b.n	8001128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	617b      	str	r3, [r7, #20]
      break;
 8001126:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	3301      	adds	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	fb03 f202 	mul.w	r2, r3, r2
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_RCC_GetSysClockFreq+0x108>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	0e5b      	lsrs	r3, r3, #25
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	3301      	adds	r3, #1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001168:	69bb      	ldr	r3, [r7, #24]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	08003f20 	.word	0x08003f20
 8001180:	00f42400 	.word	0x00f42400
 8001184:	007a1200 	.word	0x007a1200

08001188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_RCC_GetHCLKFreq+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000000 	.word	0x20000000

080011a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80011a4:	f7ff fff0 	bl	8001188 <HAL_RCC_GetHCLKFreq>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	4904      	ldr	r1, [pc, #16]	; (80011c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80011b6:	5ccb      	ldrb	r3, [r1, r3]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	08003f18 	.word	0x08003f18

080011cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80011d0:	f7ff ffda 	bl	8001188 <HAL_RCC_GetHCLKFreq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	0adb      	lsrs	r3, r3, #11
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	4904      	ldr	r1, [pc, #16]	; (80011f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	08003f18 	.word	0x08003f18

080011f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001200:	2300      	movs	r3, #0
 8001202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001204:	2300      	movs	r3, #0
 8001206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001210:	2b00      	cmp	r3, #0
 8001212:	d031      	beq.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800121c:	d01a      	beq.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800121e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001222:	d814      	bhi.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001224:	2b00      	cmp	r3, #0
 8001226:	d009      	beq.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800122c:	d10f      	bne.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	4a5c      	ldr	r2, [pc, #368]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800123a:	e00c      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3304      	adds	r3, #4
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f9ce 	bl	80015e4 <RCCEx_PLLSAI1_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800124c:	e003      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	74fb      	strb	r3, [r7, #19]
      break;
 8001252:	e000      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10b      	bne.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800125c:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	494e      	ldr	r1, [pc, #312]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800126c:	4313      	orrs	r3, r2
 800126e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001272:	e001      	b.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 809e 	beq.w	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800128a:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800129a:	2300      	movs	r3, #0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00d      	beq.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	4a3f      	ldr	r2, [pc, #252]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6593      	str	r3, [r2, #88]	; 0x58
 80012ac:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b8:	2301      	movs	r3, #1
 80012ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012bc:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a39      	ldr	r2, [pc, #228]	; (80013a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012c8:	f7ff fb9c 	bl	8000a04 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80012ce:	e009      	b.n	80012e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d0:	f7ff fb98 	bl	8000a04 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d902      	bls.n	80012e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	74fb      	strb	r3, [r7, #19]
        break;
 80012e2:	e005      	b.n	80012f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0ef      	beq.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80012f0:	7cfb      	ldrb	r3, [r7, #19]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d15a      	bne.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80012f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01e      	beq.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	429a      	cmp	r2, r3
 8001310:	d019      	beq.n	8001346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001312:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800131c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d016      	beq.n	800137e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb58 	bl	8000a04 <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001356:	e00b      	b.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001358:	f7ff fb54 	bl	8000a04 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	; 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d902      	bls.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	74fb      	strb	r3, [r7, #19]
            break;
 800136e:	e006      	b.n	800137e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0ec      	beq.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800137e:	7cfb      	ldrb	r3, [r7, #19]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10b      	bne.n	800139c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001392:	4904      	ldr	r1, [pc, #16]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001394:	4313      	orrs	r3, r2
 8001396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800139a:	e009      	b.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800139c:	7cfb      	ldrb	r3, [r7, #19]
 800139e:	74bb      	strb	r3, [r7, #18]
 80013a0:	e006      	b.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b0:	7c7b      	ldrb	r3, [r7, #17]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d105      	bne.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b6:	4b8a      	ldr	r3, [pc, #552]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	4a89      	ldr	r2, [pc, #548]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80013bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013ce:	4b84      	ldr	r3, [pc, #528]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80013d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d4:	f023 0203 	bic.w	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4980      	ldr	r1, [pc, #512]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013f0:	4b7b      	ldr	r3, [pc, #492]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	f023 020c 	bic.w	r2, r3, #12
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	4978      	ldr	r1, [pc, #480]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001400:	4313      	orrs	r3, r2
 8001402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00a      	beq.n	8001428 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001412:	4b73      	ldr	r3, [pc, #460]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001418:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	496f      	ldr	r1, [pc, #444]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001422:	4313      	orrs	r3, r2
 8001424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00a      	beq.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	4967      	ldr	r1, [pc, #412]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001444:	4313      	orrs	r3, r2
 8001446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00a      	beq.n	800146c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001456:	4b62      	ldr	r3, [pc, #392]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	495e      	ldr	r1, [pc, #376]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001466:	4313      	orrs	r3, r2
 8001468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00a      	beq.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	4956      	ldr	r1, [pc, #344]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00a      	beq.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800149a:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800149c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d028      	beq.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014bc:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4945      	ldr	r1, [pc, #276]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014da:	d106      	bne.n	80014ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80014dc:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80014e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014e6:	60d3      	str	r3, [r2, #12]
 80014e8:	e011      	b.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014f2:	d10c      	bne.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3304      	adds	r3, #4
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f872 	bl	80015e4 <RCCEx_PLLSAI1_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001504:	7cfb      	ldrb	r3, [r7, #19]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800150a:	7cfb      	ldrb	r3, [r7, #19]
 800150c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d028      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800151c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	492d      	ldr	r1, [pc, #180]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800152a:	4313      	orrs	r3, r2
 800152c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001538:	d106      	bne.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001544:	60d3      	str	r3, [r2, #12]
 8001546:	e011      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001550:	d10c      	bne.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	2101      	movs	r1, #1
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f843 	bl	80015e4 <RCCEx_PLLSAI1_Config>
 800155e:	4603      	mov	r3, r0
 8001560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001562:	7cfb      	ldrb	r3, [r7, #19]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8001568:	7cfb      	ldrb	r3, [r7, #19]
 800156a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01c      	beq.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001588:	4313      	orrs	r3, r2
 800158a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001596:	d10c      	bne.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f820 	bl	80015e4 <RCCEx_PLLSAI1_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80015a8:	7cfb      	ldrb	r3, [r7, #19]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80015c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	4904      	ldr	r1, [pc, #16]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80015d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80015f2:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d018      	beq.n	8001630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 0203 	and.w	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d10d      	bne.n	800162a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
       ||
 8001612:	2b00      	cmp	r3, #0
 8001614:	d009      	beq.n	800162a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001616:	4b6b      	ldr	r3, [pc, #428]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
       ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d047      	beq.n	80016ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e044      	b.n	80016ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d018      	beq.n	800166a <RCCEx_PLLSAI1_Config+0x86>
 8001638:	2b03      	cmp	r3, #3
 800163a:	d825      	bhi.n	8001688 <RCCEx_PLLSAI1_Config+0xa4>
 800163c:	2b01      	cmp	r3, #1
 800163e:	d002      	beq.n	8001646 <RCCEx_PLLSAI1_Config+0x62>
 8001640:	2b02      	cmp	r3, #2
 8001642:	d009      	beq.n	8001658 <RCCEx_PLLSAI1_Config+0x74>
 8001644:	e020      	b.n	8001688 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11d      	bne.n	800168e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001656:	e01a      	b.n	800168e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d116      	bne.n	8001692 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001668:	e013      	b.n	8001692 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10f      	bne.n	8001696 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001676:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001686:	e006      	b.n	8001696 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
      break;
 800168c:	e004      	b.n	8001698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800168e:	bf00      	nop
 8001690:	e002      	b.n	8001698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001692:	bf00      	nop
 8001694:	e000      	b.n	8001698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001696:	bf00      	nop
    }

    if(status == HAL_OK)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800169e:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	430b      	orrs	r3, r1
 80016b4:	4943      	ldr	r1, [pc, #268]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d17c      	bne.n	80017ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80016c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016cc:	f7ff f99a 	bl	8000a04 <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80016d2:	e009      	b.n	80016e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80016d4:	f7ff f996 	bl	8000a04 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d902      	bls.n	80016e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	73fb      	strb	r3, [r7, #15]
        break;
 80016e6:	e005      	b.n	80016f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ef      	bne.n	80016d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d15f      	bne.n	80017ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d110      	bne.n	8001722 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001700:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6892      	ldr	r2, [r2, #8]
 8001710:	0211      	lsls	r1, r2, #8
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68d2      	ldr	r2, [r2, #12]
 8001716:	06d2      	lsls	r2, r2, #27
 8001718:	430a      	orrs	r2, r1
 800171a:	492a      	ldr	r1, [pc, #168]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800171c:	4313      	orrs	r3, r2
 800171e:	610b      	str	r3, [r1, #16]
 8001720:	e027      	b.n	8001772 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d112      	bne.n	800174e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001728:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6892      	ldr	r2, [r2, #8]
 8001738:	0211      	lsls	r1, r2, #8
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6912      	ldr	r2, [r2, #16]
 800173e:	0852      	lsrs	r2, r2, #1
 8001740:	3a01      	subs	r2, #1
 8001742:	0552      	lsls	r2, r2, #21
 8001744:	430a      	orrs	r2, r1
 8001746:	491f      	ldr	r1, [pc, #124]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	610b      	str	r3, [r1, #16]
 800174c:	e011      	b.n	8001772 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001756:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6892      	ldr	r2, [r2, #8]
 800175e:	0211      	lsls	r1, r2, #8
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6952      	ldr	r2, [r2, #20]
 8001764:	0852      	lsrs	r2, r2, #1
 8001766:	3a01      	subs	r2, #1
 8001768:	0652      	lsls	r2, r2, #25
 800176a:	430a      	orrs	r2, r1
 800176c:	4915      	ldr	r1, [pc, #84]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800176e:	4313      	orrs	r3, r2
 8001770:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800177c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff f941 	bl	8000a04 <HAL_GetTick>
 8001782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001784:	e009      	b.n	800179a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001786:	f7ff f93d 	bl	8000a04 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d902      	bls.n	800179a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	73fb      	strb	r3, [r7, #15]
          break;
 8001798:	e005      	b.n	80017a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ef      	beq.n	8001786 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d106      	bne.n	80017ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4903      	ldr	r1, [pc, #12]	; (80017c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e040      	b.n	800185c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe ff0c 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	; 0x24
 80017f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fc00 	bl	800200c <UART_SetConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e022      	b.n	800185c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fe20 	bl	8002464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fea7 	bl	80025a8 <UART_CheckIdleState>
 800185a:	4603      	mov	r3, r0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001878:	2b20      	cmp	r3, #32
 800187a:	f040 80bf 	bne.w	80019fc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <HAL_UART_Receive+0x26>
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0b7      	b.n	80019fe <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_UART_Receive+0x38>
 8001898:	2302      	movs	r3, #2
 800189a:	e0b0      	b.n	80019fe <HAL_UART_Receive+0x19a>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2222      	movs	r2, #34	; 0x22
 80018b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018b8:	f7ff f8a4 	bl	8000a04 <HAL_GetTick>
 80018bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	88fa      	ldrh	r2, [r7, #6]
 80018c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	88fa      	ldrh	r2, [r7, #6]
 80018ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d6:	d10e      	bne.n	80018f6 <HAL_UART_Receive+0x92>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <HAL_UART_Receive+0x88>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80018e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018ea:	e02d      	b.n	8001948 <HAL_UART_Receive+0xe4>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	22ff      	movs	r2, #255	; 0xff
 80018f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80018f4:	e028      	b.n	8001948 <HAL_UART_Receive+0xe4>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_UART_Receive+0xb6>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d104      	bne.n	8001910 <HAL_UART_Receive+0xac>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	22ff      	movs	r2, #255	; 0xff
 800190a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800190e:	e01b      	b.n	8001948 <HAL_UART_Receive+0xe4>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	227f      	movs	r2, #127	; 0x7f
 8001914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001918:	e016      	b.n	8001948 <HAL_UART_Receive+0xe4>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001922:	d10d      	bne.n	8001940 <HAL_UART_Receive+0xdc>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d104      	bne.n	8001936 <HAL_UART_Receive+0xd2>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	227f      	movs	r2, #127	; 0x7f
 8001930:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001934:	e008      	b.n	8001948 <HAL_UART_Receive+0xe4>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	223f      	movs	r2, #63	; 0x3f
 800193a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800193e:	e003      	b.n	8001948 <HAL_UART_Receive+0xe4>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800194e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001958:	d108      	bne.n	800196c <HAL_UART_Receive+0x108>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d104      	bne.n	800196c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	e003      	b.n	8001974 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800197c:	e033      	b.n	80019e6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2200      	movs	r2, #0
 8001986:	2120      	movs	r1, #32
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 fe56 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e032      	b.n	80019fe <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	8a7b      	ldrh	r3, [r7, #18]
 80019a8:	4013      	ands	r3, r2
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	3302      	adds	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e00d      	b.n	80019d4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019be:	b29b      	uxth	r3, r3
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	8a7b      	ldrh	r3, [r7, #18]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4013      	ands	r3, r2
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1c5      	bne.n	800197e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2220      	movs	r2, #32
 80019f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e000      	b.n	80019fe <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80019fc:	2302      	movs	r3, #2
  }
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0ba      	sub	sp, #232	; 0xe8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001a32:	f640 030f 	movw	r3, #2063	; 0x80f
 8001a36:	4013      	ands	r3, r2
 8001a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8001a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d115      	bne.n	8001a70 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00f      	beq.n	8001a70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 82a6 	beq.w	8001fb2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
      }
      return;
 8001a6e:	e2a0      	b.n	8001fb2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8001a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8117 	beq.w	8001ca8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001a86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001a8a:	4b85      	ldr	r3, [pc, #532]	; (8001ca0 <HAL_UART_IRQHandler+0x298>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 810a 	beq.w	8001ca8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d011      	beq.n	8001ac4 <HAL_UART_IRQHandler+0xbc>
 8001aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00b      	beq.n	8001ac4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d011      	beq.n	8001af4 <HAL_UART_IRQHandler+0xec>
 8001ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d011      	beq.n	8001b24 <HAL_UART_IRQHandler+0x11c>
 8001b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2204      	movs	r2, #4
 8001b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b1a:	f043 0202 	orr.w	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d017      	beq.n	8001b60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d105      	bne.n	8001b48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00b      	beq.n	8001b60 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b56:	f043 0208 	orr.w	r2, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d012      	beq.n	8001b92 <HAL_UART_IRQHandler+0x18a>
 8001b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00c      	beq.n	8001b92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 820c 	beq.w	8001fb6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d005      	beq.n	8001bea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d04f      	beq.n	8001c8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fde9 	bl	80027c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	d141      	bne.n	8001c82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3308      	adds	r3, #8
 8001c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c0c:	e853 3f00 	ldrex	r3, [r3]
 8001c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3308      	adds	r3, #8
 8001c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001c3a:	e841 2300 	strex	r3, r2, [r1]
 8001c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1d9      	bne.n	8001bfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d013      	beq.n	8001c7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <HAL_UART_IRQHandler+0x29c>)
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f82b 	bl	8000cba <HAL_DMA_Abort_IT>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d017      	beq.n	8001c9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8001c74:	4610      	mov	r0, r2
 8001c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c78:	e00f      	b.n	8001c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f9b0 	bl	8001fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c80:	e00b      	b.n	8001c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f9ac 	bl	8001fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c88:	e007      	b.n	8001c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f9a8 	bl	8001fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8001c98:	e18d      	b.n	8001fb6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c9a:	bf00      	nop
    return;
 8001c9c:	e18b      	b.n	8001fb6 <HAL_UART_IRQHandler+0x5ae>
 8001c9e:	bf00      	nop
 8001ca0:	04000120 	.word	0x04000120
 8001ca4:	08002889 	.word	0x08002889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 8146 	bne.w	8001f3e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 813f 	beq.w	8001f3e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8138 	beq.w	8001f3e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	f040 80b4 	bne.w	8001e4e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001cf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 815f 	beq.w	8001fba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d06:	429a      	cmp	r2, r3
 8001d08:	f080 8157 	bcs.w	8001fba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 8085 	bne.w	8001e32 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d34:	e853 3f00 	ldrex	r3, [r3]
 8001d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d62:	e841 2300 	strex	r3, r2, [r1]
 8001d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1da      	bne.n	8001d28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3308      	adds	r3, #8
 8001d78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7c:	e853 3f00 	ldrex	r3, [r3]
 8001d80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3308      	adds	r3, #8
 8001d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001da2:	e841 2300 	strex	r3, r2, [r1]
 8001da6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e1      	bne.n	8001d72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3308      	adds	r3, #8
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db8:	e853 3f00 	ldrex	r3, [r3]
 8001dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3308      	adds	r3, #8
 8001dce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001dd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001dd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001dda:	e841 2300 	strex	r3, r2, [r1]
 8001dde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1e3      	bne.n	8001dae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dfa:	e853 3f00 	ldrex	r3, [r3]
 8001dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e02:	f023 0310 	bic.w	r3, r3, #16
 8001e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e14:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e1c:	e841 2300 	strex	r3, r2, [r1]
 8001e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e4      	bne.n	8001df2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ff06 	bl	8000c3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8d4 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001e4c:	e0b5      	b.n	8001fba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80a7 	beq.w	8001fbe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8001e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a2 	beq.w	8001fbe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e82:	e853 3f00 	ldrex	r3, [r3]
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ea0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ea4:	e841 2300 	strex	r3, r2, [r1]
 8001ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e4      	bne.n	8001e7a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	e853 3f00 	ldrex	r3, [r3]
 8001ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ed4:	633a      	str	r2, [r7, #48]	; 0x30
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001edc:	e841 2300 	strex	r3, r2, [r1]
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e3      	bne.n	8001eb0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	e853 3f00 	ldrex	r3, [r3]
 8001f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0310 	bic.w	r3, r3, #16
 8001f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	e841 2300 	strex	r3, r2, [r1]
 8001f28:	617b      	str	r3, [r7, #20]
   return(result);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e4      	bne.n	8001efa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f85c 	bl	8001ff4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001f3c:	e03f      	b.n	8001fbe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <HAL_UART_IRQHandler+0x560>
 8001f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fcd1 	bl	8002908 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001f66:	e02d      	b.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01c      	beq.n	8001fc2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
    }
    return;
 8001f90:	e017      	b.n	8001fc2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
 8001f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fc82 	bl	80028b4 <UART_EndTransmit_IT>
    return;
 8001fb0:	e008      	b.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8001fb2:	bf00      	nop
 8001fb4:	e006      	b.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8001fb6:	bf00      	nop
 8001fb8:	e004      	b.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8001fba:	bf00      	nop
 8001fbc:	e002      	b.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8001fbe:	bf00      	nop
 8001fc0:	e000      	b.n	8001fc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8001fc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8001fc4:	37e8      	adds	r7, #232	; 0xe8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800200c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	431a      	orrs	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	431a      	orrs	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	4313      	orrs	r3, r2
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4bb4      	ldr	r3, [pc, #720]	; (800230c <UART_SetConfig+0x300>)
 800203c:	4013      	ands	r3, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002044:	430b      	orrs	r3, r1
 8002046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4aa9      	ldr	r2, [pc, #676]	; (8002310 <UART_SetConfig+0x304>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	4313      	orrs	r3, r2
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4aa0      	ldr	r2, [pc, #640]	; (8002314 <UART_SetConfig+0x308>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d126      	bne.n	80020e4 <UART_SetConfig+0xd8>
 8002096:	4ba0      	ldr	r3, [pc, #640]	; (8002318 <UART_SetConfig+0x30c>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d81b      	bhi.n	80020dc <UART_SetConfig+0xd0>
 80020a4:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <UART_SetConfig+0xa0>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	080020bd 	.word	0x080020bd
 80020b0:	080020cd 	.word	0x080020cd
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	080020d5 	.word	0x080020d5
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020c2:	e080      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80020c4:	2302      	movs	r3, #2
 80020c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020ca:	e07c      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80020cc:	2304      	movs	r3, #4
 80020ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020d2:	e078      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80020d4:	2308      	movs	r3, #8
 80020d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020da:	e074      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80020dc:	2310      	movs	r3, #16
 80020de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80020e2:	e070      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a8c      	ldr	r2, [pc, #560]	; (800231c <UART_SetConfig+0x310>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d138      	bne.n	8002160 <UART_SetConfig+0x154>
 80020ee:	4b8a      	ldr	r3, [pc, #552]	; (8002318 <UART_SetConfig+0x30c>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d82d      	bhi.n	8002158 <UART_SetConfig+0x14c>
 80020fc:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <UART_SetConfig+0xf8>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	08002139 	.word	0x08002139
 8002108:	08002159 	.word	0x08002159
 800210c:	08002159 	.word	0x08002159
 8002110:	08002159 	.word	0x08002159
 8002114:	08002149 	.word	0x08002149
 8002118:	08002159 	.word	0x08002159
 800211c:	08002159 	.word	0x08002159
 8002120:	08002159 	.word	0x08002159
 8002124:	08002141 	.word	0x08002141
 8002128:	08002159 	.word	0x08002159
 800212c:	08002159 	.word	0x08002159
 8002130:	08002159 	.word	0x08002159
 8002134:	08002151 	.word	0x08002151
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800213e:	e042      	b.n	80021c6 <UART_SetConfig+0x1ba>
 8002140:	2302      	movs	r3, #2
 8002142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002146:	e03e      	b.n	80021c6 <UART_SetConfig+0x1ba>
 8002148:	2304      	movs	r3, #4
 800214a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800214e:	e03a      	b.n	80021c6 <UART_SetConfig+0x1ba>
 8002150:	2308      	movs	r3, #8
 8002152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002156:	e036      	b.n	80021c6 <UART_SetConfig+0x1ba>
 8002158:	2310      	movs	r3, #16
 800215a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800215e:	e032      	b.n	80021c6 <UART_SetConfig+0x1ba>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <UART_SetConfig+0x304>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d12a      	bne.n	80021c0 <UART_SetConfig+0x1b4>
 800216a:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <UART_SetConfig+0x30c>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002178:	d01a      	beq.n	80021b0 <UART_SetConfig+0x1a4>
 800217a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800217e:	d81b      	bhi.n	80021b8 <UART_SetConfig+0x1ac>
 8002180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002184:	d00c      	beq.n	80021a0 <UART_SetConfig+0x194>
 8002186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800218a:	d815      	bhi.n	80021b8 <UART_SetConfig+0x1ac>
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <UART_SetConfig+0x18c>
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002194:	d008      	beq.n	80021a8 <UART_SetConfig+0x19c>
 8002196:	e00f      	b.n	80021b8 <UART_SetConfig+0x1ac>
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800219e:	e012      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80021a0:	2302      	movs	r3, #2
 80021a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021a6:	e00e      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80021a8:	2304      	movs	r3, #4
 80021aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021ae:	e00a      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80021b0:	2308      	movs	r3, #8
 80021b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021b6:	e006      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80021b8:	2310      	movs	r3, #16
 80021ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80021be:	e002      	b.n	80021c6 <UART_SetConfig+0x1ba>
 80021c0:	2310      	movs	r3, #16
 80021c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a51      	ldr	r2, [pc, #324]	; (8002310 <UART_SetConfig+0x304>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d17a      	bne.n	80022c6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80021d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d824      	bhi.n	8002222 <UART_SetConfig+0x216>
 80021d8:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <UART_SetConfig+0x1d4>)
 80021da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021de:	bf00      	nop
 80021e0:	08002205 	.word	0x08002205
 80021e4:	08002223 	.word	0x08002223
 80021e8:	0800220d 	.word	0x0800220d
 80021ec:	08002223 	.word	0x08002223
 80021f0:	08002213 	.word	0x08002213
 80021f4:	08002223 	.word	0x08002223
 80021f8:	08002223 	.word	0x08002223
 80021fc:	08002223 	.word	0x08002223
 8002200:	0800221b 	.word	0x0800221b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002204:	f7fe ffcc 	bl	80011a0 <HAL_RCC_GetPCLK1Freq>
 8002208:	61f8      	str	r0, [r7, #28]
        break;
 800220a:	e010      	b.n	800222e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800220c:	4b44      	ldr	r3, [pc, #272]	; (8002320 <UART_SetConfig+0x314>)
 800220e:	61fb      	str	r3, [r7, #28]
        break;
 8002210:	e00d      	b.n	800222e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002212:	f7fe ff2d 	bl	8001070 <HAL_RCC_GetSysClockFreq>
 8002216:	61f8      	str	r0, [r7, #28]
        break;
 8002218:	e009      	b.n	800222e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800221a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221e:	61fb      	str	r3, [r7, #28]
        break;
 8002220:	e005      	b.n	800222e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800222c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8107 	beq.w	8002444 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	429a      	cmp	r2, r3
 8002244:	d305      	bcc.n	8002252 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	429a      	cmp	r2, r3
 8002250:	d903      	bls.n	800225a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002258:	e0f4      	b.n	8002444 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2200      	movs	r2, #0
 800225e:	461c      	mov	r4, r3
 8002260:	4615      	mov	r5, r2
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	022b      	lsls	r3, r5, #8
 800226c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002270:	0222      	lsls	r2, r4, #8
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	6849      	ldr	r1, [r1, #4]
 8002276:	0849      	lsrs	r1, r1, #1
 8002278:	2000      	movs	r0, #0
 800227a:	4688      	mov	r8, r1
 800227c:	4681      	mov	r9, r0
 800227e:	eb12 0a08 	adds.w	sl, r2, r8
 8002282:	eb43 0b09 	adc.w	fp, r3, r9
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002294:	4650      	mov	r0, sl
 8002296:	4659      	mov	r1, fp
 8002298:	f7fe f802 	bl	80002a0 <__aeabi_uldivmod>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4613      	mov	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022aa:	d308      	bcc.n	80022be <UART_SetConfig+0x2b2>
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b2:	d204      	bcs.n	80022be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	e0c2      	b.n	8002444 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80022c4:	e0be      	b.n	8002444 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ce:	d16a      	bne.n	80023a6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80022d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d834      	bhi.n	8002342 <UART_SetConfig+0x336>
 80022d8:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <UART_SetConfig+0x2d4>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	08002305 	.word	0x08002305
 80022e4:	08002325 	.word	0x08002325
 80022e8:	0800232d 	.word	0x0800232d
 80022ec:	08002343 	.word	0x08002343
 80022f0:	08002333 	.word	0x08002333
 80022f4:	08002343 	.word	0x08002343
 80022f8:	08002343 	.word	0x08002343
 80022fc:	08002343 	.word	0x08002343
 8002300:	0800233b 	.word	0x0800233b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002304:	f7fe ff4c 	bl	80011a0 <HAL_RCC_GetPCLK1Freq>
 8002308:	61f8      	str	r0, [r7, #28]
        break;
 800230a:	e020      	b.n	800234e <UART_SetConfig+0x342>
 800230c:	efff69f3 	.word	0xefff69f3
 8002310:	40008000 	.word	0x40008000
 8002314:	40013800 	.word	0x40013800
 8002318:	40021000 	.word	0x40021000
 800231c:	40004400 	.word	0x40004400
 8002320:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002324:	f7fe ff52 	bl	80011cc <HAL_RCC_GetPCLK2Freq>
 8002328:	61f8      	str	r0, [r7, #28]
        break;
 800232a:	e010      	b.n	800234e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <UART_SetConfig+0x454>)
 800232e:	61fb      	str	r3, [r7, #28]
        break;
 8002330:	e00d      	b.n	800234e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002332:	f7fe fe9d 	bl	8001070 <HAL_RCC_GetSysClockFreq>
 8002336:	61f8      	str	r0, [r7, #28]
        break;
 8002338:	e009      	b.n	800234e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800233a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233e:	61fb      	str	r3, [r7, #28]
        break;
 8002340:	e005      	b.n	800234e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800234c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d077      	beq.n	8002444 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005a      	lsls	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	441a      	add	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b0f      	cmp	r3, #15
 800236e:	d916      	bls.n	800239e <UART_SetConfig+0x392>
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d212      	bcs.n	800239e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	b29b      	uxth	r3, r3
 800237c:	f023 030f 	bic.w	r3, r3, #15
 8002380:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	b29b      	uxth	r3, r3
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	b29a      	uxth	r2, r3
 800238e:	8afb      	ldrh	r3, [r7, #22]
 8002390:	4313      	orrs	r3, r2
 8002392:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	8afa      	ldrh	r2, [r7, #22]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e052      	b.n	8002444 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023a4:	e04e      	b.n	8002444 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d827      	bhi.n	80023fe <UART_SetConfig+0x3f2>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <UART_SetConfig+0x3a8>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023d9 	.word	0x080023d9
 80023b8:	080023e1 	.word	0x080023e1
 80023bc:	080023e9 	.word	0x080023e9
 80023c0:	080023ff 	.word	0x080023ff
 80023c4:	080023ef 	.word	0x080023ef
 80023c8:	080023ff 	.word	0x080023ff
 80023cc:	080023ff 	.word	0x080023ff
 80023d0:	080023ff 	.word	0x080023ff
 80023d4:	080023f7 	.word	0x080023f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023d8:	f7fe fee2 	bl	80011a0 <HAL_RCC_GetPCLK1Freq>
 80023dc:	61f8      	str	r0, [r7, #28]
        break;
 80023de:	e014      	b.n	800240a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023e0:	f7fe fef4 	bl	80011cc <HAL_RCC_GetPCLK2Freq>
 80023e4:	61f8      	str	r0, [r7, #28]
        break;
 80023e6:	e010      	b.n	800240a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <UART_SetConfig+0x454>)
 80023ea:	61fb      	str	r3, [r7, #28]
        break;
 80023ec:	e00d      	b.n	800240a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ee:	f7fe fe3f 	bl	8001070 <HAL_RCC_GetSysClockFreq>
 80023f2:	61f8      	str	r0, [r7, #28]
        break;
 80023f4:	e009      	b.n	800240a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fa:	61fb      	str	r3, [r7, #28]
        break;
 80023fc:	e005      	b.n	800240a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002408:	bf00      	nop
    }

    if (pclk != 0U)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d019      	beq.n	8002444 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	085a      	lsrs	r2, r3, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	441a      	add	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d909      	bls.n	800243e <UART_SetConfig+0x432>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002430:	d205      	bcs.n	800243e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60da      	str	r2, [r3, #12]
 800243c:	e002      	b.n	8002444 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002450:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245e:	bf00      	nop
 8002460:	00f42400 	.word	0x00f42400

08002464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01a      	beq.n	800257a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002562:	d10a      	bne.n	800257a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
  }
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025b8:	f7fe fa24 	bl	8000a04 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d10e      	bne.n	80025ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f82d 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e023      	b.n	8002632 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d10e      	bne.n	8002616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f817 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e00d      	b.n	8002632 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b09c      	sub	sp, #112	; 0x70
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264a:	e0a5      	b.n	8002798 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	f000 80a1 	beq.w	8002798 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7fe f9d5 	bl	8000a04 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <UART_WaitOnFlagUntilTimeout+0x32>
 8002666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13e      	bne.n	80026ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800267a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002680:	667b      	str	r3, [r7, #100]	; 0x64
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800268a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002690:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e6      	bne.n	800266c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3308      	adds	r3, #8
 80026a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	663b      	str	r3, [r7, #96]	; 0x60
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3308      	adds	r3, #8
 80026bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026be:	64ba      	str	r2, [r7, #72]	; 0x48
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80026c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80026cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e5      	bne.n	800269e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e067      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d04f      	beq.n	8002798 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002706:	d147      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002710:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	e853 3f00 	ldrex	r3, [r3]
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
 8002732:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002738:	e841 2300 	strex	r3, r2, [r1]
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e6      	bne.n	8002712 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3308      	adds	r3, #8
 800274a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	e853 3f00 	ldrex	r3, [r3]
 8002752:	613b      	str	r3, [r7, #16]
   return(result);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	66bb      	str	r3, [r7, #104]	; 0x68
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3308      	adds	r3, #8
 8002762:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002764:	623a      	str	r2, [r7, #32]
 8002766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002768:	69f9      	ldr	r1, [r7, #28]
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	e841 2300 	strex	r3, r2, [r1]
 8002770:	61bb      	str	r3, [r7, #24]
   return(result);
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e5      	bne.n	8002744 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e010      	b.n	80027ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	f43f af4a 	beq.w	800264c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3770      	adds	r7, #112	; 0x70
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b095      	sub	sp, #84	; 0x54
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
 80027ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e6      	bne.n	80027ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3308      	adds	r3, #8
 8002802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	61fb      	str	r3, [r7, #28]
   return(result);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3308      	adds	r3, #8
 800281a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800281c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002824:	e841 2300 	strex	r3, r2, [r1]
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e5      	bne.n	80027fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002834:	2b01      	cmp	r3, #1
 8002836:	d118      	bne.n	800286a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	60bb      	str	r3, [r7, #8]
   return(result);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f023 0310 	bic.w	r3, r3, #16
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	6979      	ldr	r1, [r7, #20]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	613b      	str	r3, [r7, #16]
   return(result);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e6      	bne.n	8002838 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800287c:	bf00      	nop
 800287e:	3754      	adds	r7, #84	; 0x54
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff fb9a 	bl	8001fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	613b      	str	r3, [r7, #16]
   return(result);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e6      	bne.n	80028bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fb66 	bl	8001fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002900:	bf00      	nop
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <APPLICATION>:
uint8_t button_state;



void APPLICATION()
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0

	data_receive();
 8002920:	f000 fa02 	bl	8002d28 <data_receive>
	extract_data();
 8002924:	f000 f804 	bl	8002930 <extract_data>
	pin_config();
 8002928:	f000 f852 	bl	80029d0 <pin_config>

}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <extract_data>:

void extract_data()
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	token = strtok(buffer, ",");
 8002934:	4920      	ldr	r1, [pc, #128]	; (80029b8 <extract_data+0x88>)
 8002936:	4821      	ldr	r0, [pc, #132]	; (80029bc <extract_data+0x8c>)
 8002938:	f000 fa70 	bl	8002e1c <strtok>
 800293c:	4603      	mov	r3, r0
 800293e:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <extract_data+0x90>)
 8002940:	6013      	str	r3, [r2, #0]
		     if (token != NULL)
 8002942:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <extract_data+0x90>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d010      	beq.n	800296c <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <extract_data+0x90>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2213      	movs	r2, #19
 8002950:	4619      	mov	r1, r3
 8002952:	481c      	ldr	r0, [pc, #112]	; (80029c4 <extract_data+0x94>)
 8002954:	f000 fa4e 	bl	8002df4 <strncpy>
		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <extract_data+0x94>)
 800295a:	2200      	movs	r2, #0
 800295c:	74da      	strb	r2, [r3, #19]
		         token = strtok(NULL, ",");
 800295e:	4916      	ldr	r1, [pc, #88]	; (80029b8 <extract_data+0x88>)
 8002960:	2000      	movs	r0, #0
 8002962:	f000 fa5b 	bl	8002e1c <strtok>
 8002966:	4603      	mov	r3, r0
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <extract_data+0x90>)
 800296a:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <extract_data+0x90>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <extract_data+0x66>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <extract_data+0x90>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2213      	movs	r2, #19
 800297a:	4619      	mov	r1, r3
 800297c:	4812      	ldr	r0, [pc, #72]	; (80029c8 <extract_data+0x98>)
 800297e:	f000 fa39 	bl	8002df4 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <extract_data+0x98>)
 8002984:	2200      	movs	r2, #0
 8002986:	74da      	strb	r2, [r3, #19]
		         token = strtok(NULL, ",");
 8002988:	490b      	ldr	r1, [pc, #44]	; (80029b8 <extract_data+0x88>)
 800298a:	2000      	movs	r0, #0
 800298c:	f000 fa46 	bl	8002e1c <strtok>
 8002990:	4603      	mov	r3, r0
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <extract_data+0x90>)
 8002994:	6013      	str	r3, [r2, #0]
		     }

		     // Get the third token and store it in arr3
		     if (token != NULL)
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <extract_data+0x90>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <extract_data+0x82>
		     {
		         strncpy(arr3, token, sizeof(arr3) - 1);
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <extract_data+0x90>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2213      	movs	r2, #19
 80029a4:	4619      	mov	r1, r3
 80029a6:	4809      	ldr	r0, [pc, #36]	; (80029cc <extract_data+0x9c>)
 80029a8:	f000 fa24 	bl	8002df4 <strncpy>
		         arr3[sizeof(arr3) - 1] = '\0'; // Ensure null-termination
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <extract_data+0x9c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	74da      	strb	r2, [r3, #19]
		     }
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	08003ee0 	.word	0x08003ee0
 80029bc:	2000009c 	.word	0x2000009c
 80029c0:	200000d8 	.word	0x200000d8
 80029c4:	200000b0 	.word	0x200000b0
 80029c8:	200000c4 	.word	0x200000c4
 80029cc:	200000dc 	.word	0x200000dc

080029d0 <pin_config>:


void pin_config()
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"GPIO1")==0)
 80029d4:	493a      	ldr	r1, [pc, #232]	; (8002ac0 <pin_config+0xf0>)
 80029d6:	483b      	ldr	r0, [pc, #236]	; (8002ac4 <pin_config+0xf4>)
 80029d8:	f7fd fbfa 	bl	80001d0 <strcmp>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <pin_config+0x1a>
			     {
			       switch_val=1;
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <pin_config+0xf8>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e01f      	b.n	8002a2a <pin_config+0x5a>
			     }
	            else if(strcmp(arr1,"GPIO2")==0)
 80029ea:	4938      	ldr	r1, [pc, #224]	; (8002acc <pin_config+0xfc>)
 80029ec:	4835      	ldr	r0, [pc, #212]	; (8002ac4 <pin_config+0xf4>)
 80029ee:	f7fd fbef 	bl	80001d0 <strcmp>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d103      	bne.n	8002a00 <pin_config+0x30>
				 {
				   switch_val=2;
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <pin_config+0xf8>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e014      	b.n	8002a2a <pin_config+0x5a>
				 }
	            else if(strcmp(arr1,"GPIO3")==0)
 8002a00:	4933      	ldr	r1, [pc, #204]	; (8002ad0 <pin_config+0x100>)
 8002a02:	4830      	ldr	r0, [pc, #192]	; (8002ac4 <pin_config+0xf4>)
 8002a04:	f7fd fbe4 	bl	80001d0 <strcmp>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <pin_config+0x46>
	           	 {
	           		switch_val=3;
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <pin_config+0xf8>)
 8002a10:	2203      	movs	r2, #3
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e009      	b.n	8002a2a <pin_config+0x5a>
	           	 }
	            else if(strcmp(arr1,"GPIO4")==0)
 8002a16:	492f      	ldr	r1, [pc, #188]	; (8002ad4 <pin_config+0x104>)
 8002a18:	482a      	ldr	r0, [pc, #168]	; (8002ac4 <pin_config+0xf4>)
 8002a1a:	f7fd fbd9 	bl	80001d0 <strcmp>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <pin_config+0x5a>
	             {
	            	switch_val=4;
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <pin_config+0xf8>)
 8002a26:	2204      	movs	r2, #4
 8002a28:	601a      	str	r2, [r3, #0]
	             }


			     switch(switch_val)
 8002a2a:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <pin_config+0xf8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d143      	bne.n	8002aba <pin_config+0xea>
			     {
			      case 1:if(strcmp(arr2,"A3")==0)
 8002a32:	4929      	ldr	r1, [pc, #164]	; (8002ad8 <pin_config+0x108>)
 8002a34:	4829      	ldr	r0, [pc, #164]	; (8002adc <pin_config+0x10c>)
 8002a36:	f7fd fbcb 	bl	80001d0 <strcmp>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d13c      	bne.n	8002aba <pin_config+0xea>
			            {
			             if(strcmp(arr3,"OUTPUT")==0)
 8002a40:	4927      	ldr	r1, [pc, #156]	; (8002ae0 <pin_config+0x110>)
 8002a42:	4828      	ldr	r0, [pc, #160]	; (8002ae4 <pin_config+0x114>)
 8002a44:	f7fd fbc4 	bl	80001d0 <strcmp>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10c      	bne.n	8002a68 <pin_config+0x98>
						{
			              user_GPIO_Init(GPIOA,GPIO_PIN_3,OUTPUT);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2108      	movs	r1, #8
 8002a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a56:	f000 f87b 	bl	8002b50 <user_GPIO_Init>
						  write_gpio(GPIOA,GPIO_PIN_3, PIN_SET);
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a62:	f000 f983 	bl	8002d6c <write_gpio>
					    }

					    }
			            }
			     }
}
 8002a66:	e028      	b.n	8002aba <pin_config+0xea>
			              else if(strcmp(arr3,"INPUT")==0)
 8002a68:	491f      	ldr	r1, [pc, #124]	; (8002ae8 <pin_config+0x118>)
 8002a6a:	481e      	ldr	r0, [pc, #120]	; (8002ae4 <pin_config+0x114>)
 8002a6c:	f7fd fbb0 	bl	80001d0 <strcmp>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d121      	bne.n	8002aba <pin_config+0xea>
						   user_GPIO_Init(GPIOA,GPIO_PIN_3,INPUT);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2108      	movs	r1, #8
 8002a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7e:	f000 f867 	bl	8002b50 <user_GPIO_Init>
						   A=read_gpio( GPIOA,GPIO_PIN_3);
 8002a82:	2108      	movs	r1, #8
 8002a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a88:	f000 f960 	bl	8002d4c <read_gpio>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <pin_config+0x11c>)
 8002a92:	601a      	str	r2, [r3, #0]
						   if(A == 1)
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <pin_config+0x11c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d108      	bne.n	8002aae <pin_config+0xde>
						   user_output_GPIO_Init();
 8002a9c:	f000 f8f4 	bl	8002c88 <user_output_GPIO_Init>
						   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,PIN_SET);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa8:	f7fe faca 	bl	8001040 <HAL_GPIO_WritePin>
}
 8002aac:	e005      	b.n	8002aba <pin_config+0xea>
						    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab6:	f7fe fac3 	bl	8001040 <HAL_GPIO_WritePin>
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	08003ee4 	.word	0x08003ee4
 8002ac4:	200000b0 	.word	0x200000b0
 8002ac8:	20000098 	.word	0x20000098
 8002acc:	08003eec 	.word	0x08003eec
 8002ad0:	08003ef4 	.word	0x08003ef4
 8002ad4:	08003efc 	.word	0x08003efc
 8002ad8:	08003f04 	.word	0x08003f04
 8002adc:	200000c4 	.word	0x200000c4
 8002ae0:	08003f08 	.word	0x08003f08
 8002ae4:	200000dc 	.word	0x200000dc
 8002ae8:	08003f10 	.word	0x08003f10
 8002aec:	20000094 	.word	0x20000094

08002af0 <user_USART1_UART_Init>:
UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};


 void user_USART1_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <user_USART1_UART_Init+0x5c>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <user_USART1_UART_Init+0x58>)
 8002b34:	f7fe fe48 	bl	80017c8 <HAL_UART_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <user_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b3e:	f7fd fd3a 	bl	80005b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200000f0 	.word	0x200000f0
 8002b4c:	40013800 	.word	0x40013800

08002b50 <user_GPIO_Init>:


 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <user_GPIO_Init+0xb0>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <user_GPIO_Init+0xb0>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7c:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <user_GPIO_Init+0xb0>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <user_GPIO_Init+0xb0>)
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <user_GPIO_Init+0xb0>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b94:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <user_GPIO_Init+0xb0>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8002ba0:	787a      	ldrb	r2, [r7, #1]
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fa4a 	bl	8001040 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8002bac:	787b      	ldrb	r3, [r7, #1]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <user_GPIO_Init+0x70>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8002bb2:	787a      	ldrb	r2, [r7, #1]
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f823 	bl	8002c04 <gpio_output>
 8002bbe:	e008      	b.n	8002bd2 <user_GPIO_Init+0x82>
     }
     else if(PIN_mode == INPUT)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <user_GPIO_Init+0x82>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 8002bc6:	787a      	ldrb	r2, [r7, #1]
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f83b 	bl	8002c48 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
   GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd6:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002be4:	2303      	movs	r3, #3
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4619      	mov	r1, r3
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf2:	f7fe f8a3 	bl	8000d3c <HAL_GPIO_Init>

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	; 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000

08002c04 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 030c 	add.w	r3, r7, #12
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe f87e 	bl	8000d3c <HAL_GPIO_Init>
 }
 8002c40:	bf00      	nop
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
 8002c54:	4613      	mov	r3, r2
 8002c56:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002c68:	887b      	ldrh	r3, [r7, #2]
 8002c6a:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f85e 	bl	8000d3c <HAL_GPIO_Init>
 }
 8002c80:	bf00      	nop
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <user_output_GPIO_Init>:

 void user_output_GPIO_Init(void)
  {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <user_output_GPIO_Init+0x9c>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <user_output_GPIO_Init+0x9c>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <user_output_GPIO_Init+0x9c>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <user_output_GPIO_Init+0x9c>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <user_output_GPIO_Init+0x9c>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <user_output_GPIO_Init+0x9c>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002cce:	2200      	movs	r2, #0
 8002cd0:	21f8      	movs	r1, #248	; 0xf8
 8002cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd6:	f7fe f9b3 	bl	8001040 <HAL_GPIO_WritePin>
                                 |GPIO_PIN_7, GPIO_PIN_RESET);


         /*Configure GPIO pins : PA3 PA4 PA5 PA6
                                  PA7 */
         GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002cda:	23f8      	movs	r3, #248	; 0xf8
 8002cdc:	60fb      	str	r3, [r7, #12]
                                 |GPIO_PIN_7;
         GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	613b      	str	r3, [r7, #16]
         GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	4619      	mov	r1, r3
 8002cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf4:	f7fe f822 	bl	8000d3c <HAL_GPIO_Init>



    /*Configure GPIO pin : VCP_RX_Pin */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d18:	f7fe f810 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
  }
 8002d1c:	bf00      	nop
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000

08002d28 <data_receive>:


 void data_receive()
 {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
 	HAL_UART_Receive(&huart1,(uint8_t *)buffer,strlen,500);
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <data_receive+0x18>)
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <data_receive+0x1c>)
 8002d36:	4804      	ldr	r0, [pc, #16]	; (8002d48 <data_receive+0x20>)
 8002d38:	f7fe fd94 	bl	8001864 <HAL_UART_Receive>
 }
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	080001e5 	.word	0x080001e5
 8002d44:	2000009c 	.word	0x2000009c
 8002d48:	200000f0 	.word	0x200000f0

08002d4c <read_gpio>:


 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7fe f957 	bl	8001010 <HAL_GPIO_ReadPin>
 8002d62:	4603      	mov	r3, r0

 }
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <write_gpio>:

 void write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8002d7c:	787a      	ldrb	r2, [r7, #1]
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fe f95c 	bl	8001040 <HAL_GPIO_WritePin>
 }
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <__errno>:
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <__errno+0x8>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000000c 	.word	0x2000000c

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4d0d      	ldr	r5, [pc, #52]	; (8002dd4 <__libc_init_array+0x38>)
 8002da0:	4c0d      	ldr	r4, [pc, #52]	; (8002dd8 <__libc_init_array+0x3c>)
 8002da2:	1b64      	subs	r4, r4, r5
 8002da4:	10a4      	asrs	r4, r4, #2
 8002da6:	2600      	movs	r6, #0
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	4d0b      	ldr	r5, [pc, #44]	; (8002ddc <__libc_init_array+0x40>)
 8002dae:	4c0c      	ldr	r4, [pc, #48]	; (8002de0 <__libc_init_array+0x44>)
 8002db0:	f001 f88a 	bl	8003ec8 <_init>
 8002db4:	1b64      	subs	r4, r4, r5
 8002db6:	10a4      	asrs	r4, r4, #2
 8002db8:	2600      	movs	r6, #0
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	080040a0 	.word	0x080040a0
 8002dd8:	080040a0 	.word	0x080040a0
 8002ddc:	080040a0 	.word	0x080040a0
 8002de0:	080040a4 	.word	0x080040a4

08002de4 <memset>:
 8002de4:	4402      	add	r2, r0
 8002de6:	4603      	mov	r3, r0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d100      	bne.n	8002dee <memset+0xa>
 8002dec:	4770      	bx	lr
 8002dee:	f803 1b01 	strb.w	r1, [r3], #1
 8002df2:	e7f9      	b.n	8002de8 <memset+0x4>

08002df4 <strncpy>:
 8002df4:	b510      	push	{r4, lr}
 8002df6:	3901      	subs	r1, #1
 8002df8:	4603      	mov	r3, r0
 8002dfa:	b132      	cbz	r2, 8002e0a <strncpy+0x16>
 8002dfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002e00:	f803 4b01 	strb.w	r4, [r3], #1
 8002e04:	3a01      	subs	r2, #1
 8002e06:	2c00      	cmp	r4, #0
 8002e08:	d1f7      	bne.n	8002dfa <strncpy+0x6>
 8002e0a:	441a      	add	r2, r3
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d100      	bne.n	8002e14 <strncpy+0x20>
 8002e12:	bd10      	pop	{r4, pc}
 8002e14:	f803 1b01 	strb.w	r1, [r3], #1
 8002e18:	e7f9      	b.n	8002e0e <strncpy+0x1a>
	...

08002e1c <strtok>:
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <strtok+0x5c>)
 8002e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e20:	681e      	ldr	r6, [r3, #0]
 8002e22:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8002e24:	4605      	mov	r5, r0
 8002e26:	b9fc      	cbnz	r4, 8002e68 <strtok+0x4c>
 8002e28:	2050      	movs	r0, #80	; 0x50
 8002e2a:	9101      	str	r1, [sp, #4]
 8002e2c:	f000 f882 	bl	8002f34 <malloc>
 8002e30:	9901      	ldr	r1, [sp, #4]
 8002e32:	65b0      	str	r0, [r6, #88]	; 0x58
 8002e34:	4602      	mov	r2, r0
 8002e36:	b920      	cbnz	r0, 8002e42 <strtok+0x26>
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <strtok+0x60>)
 8002e3a:	4811      	ldr	r0, [pc, #68]	; (8002e80 <strtok+0x64>)
 8002e3c:	2157      	movs	r1, #87	; 0x57
 8002e3e:	f000 f849 	bl	8002ed4 <__assert_func>
 8002e42:	e9c0 4400 	strd	r4, r4, [r0]
 8002e46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002e4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002e4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002e52:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002e56:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002e5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8002e5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002e62:	6184      	str	r4, [r0, #24]
 8002e64:	7704      	strb	r4, [r0, #28]
 8002e66:	6244      	str	r4, [r0, #36]	; 0x24
 8002e68:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	b002      	add	sp, #8
 8002e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002e74:	f000 b806 	b.w	8002e84 <__strtok_r>
 8002e78:	2000000c 	.word	0x2000000c
 8002e7c:	08003f54 	.word	0x08003f54
 8002e80:	08003f6b 	.word	0x08003f6b

08002e84 <__strtok_r>:
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	b908      	cbnz	r0, 8002e8c <__strtok_r+0x8>
 8002e88:	6810      	ldr	r0, [r2, #0]
 8002e8a:	b188      	cbz	r0, 8002eb0 <__strtok_r+0x2c>
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002e94:	460f      	mov	r7, r1
 8002e96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002e9a:	b91e      	cbnz	r6, 8002ea4 <__strtok_r+0x20>
 8002e9c:	b965      	cbnz	r5, 8002eb8 <__strtok_r+0x34>
 8002e9e:	6015      	str	r5, [r2, #0]
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	e005      	b.n	8002eb0 <__strtok_r+0x2c>
 8002ea4:	42b5      	cmp	r5, r6
 8002ea6:	d1f6      	bne.n	8002e96 <__strtok_r+0x12>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <__strtok_r+0xa>
 8002eac:	6014      	str	r4, [r2, #0]
 8002eae:	7003      	strb	r3, [r0, #0]
 8002eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb2:	461c      	mov	r4, r3
 8002eb4:	e00c      	b.n	8002ed0 <__strtok_r+0x4c>
 8002eb6:	b915      	cbnz	r5, 8002ebe <__strtok_r+0x3a>
 8002eb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002ebc:	460e      	mov	r6, r1
 8002ebe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002ec2:	42ab      	cmp	r3, r5
 8002ec4:	d1f7      	bne.n	8002eb6 <__strtok_r+0x32>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f3      	beq.n	8002eb2 <__strtok_r+0x2e>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002ed0:	6014      	str	r4, [r2, #0]
 8002ed2:	e7ed      	b.n	8002eb0 <__strtok_r+0x2c>

08002ed4 <__assert_func>:
 8002ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ed6:	4614      	mov	r4, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <__assert_func+0x2c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4605      	mov	r5, r0
 8002ee0:	68d8      	ldr	r0, [r3, #12]
 8002ee2:	b14c      	cbz	r4, 8002ef8 <__assert_func+0x24>
 8002ee4:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <__assert_func+0x30>)
 8002ee6:	9100      	str	r1, [sp, #0]
 8002ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002eec:	4906      	ldr	r1, [pc, #24]	; (8002f08 <__assert_func+0x34>)
 8002eee:	462b      	mov	r3, r5
 8002ef0:	f000 f80e 	bl	8002f10 <fiprintf>
 8002ef4:	f000 fcc4 	bl	8003880 <abort>
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <__assert_func+0x38>)
 8002efa:	461c      	mov	r4, r3
 8002efc:	e7f3      	b.n	8002ee6 <__assert_func+0x12>
 8002efe:	bf00      	nop
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	08003fc8 	.word	0x08003fc8
 8002f08:	08003fd5 	.word	0x08003fd5
 8002f0c:	08004003 	.word	0x08004003

08002f10 <fiprintf>:
 8002f10:	b40e      	push	{r1, r2, r3}
 8002f12:	b503      	push	{r0, r1, lr}
 8002f14:	4601      	mov	r1, r0
 8002f16:	ab03      	add	r3, sp, #12
 8002f18:	4805      	ldr	r0, [pc, #20]	; (8002f30 <fiprintf+0x20>)
 8002f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f1e:	6800      	ldr	r0, [r0, #0]
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	f000 f919 	bl	8003158 <_vfiprintf_r>
 8002f26:	b002      	add	sp, #8
 8002f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f2c:	b003      	add	sp, #12
 8002f2e:	4770      	bx	lr
 8002f30:	2000000c 	.word	0x2000000c

08002f34 <malloc>:
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <malloc+0xc>)
 8002f36:	4601      	mov	r1, r0
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	f000 b86f 	b.w	800301c <_malloc_r>
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <_free_r>:
 8002f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f46:	2900      	cmp	r1, #0
 8002f48:	d044      	beq.n	8002fd4 <_free_r+0x90>
 8002f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f4e:	9001      	str	r0, [sp, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f1a1 0404 	sub.w	r4, r1, #4
 8002f56:	bfb8      	it	lt
 8002f58:	18e4      	addlt	r4, r4, r3
 8002f5a:	f000 feb9 	bl	8003cd0 <__malloc_lock>
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <_free_r+0x94>)
 8002f60:	9801      	ldr	r0, [sp, #4]
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	b933      	cbnz	r3, 8002f74 <_free_r+0x30>
 8002f66:	6063      	str	r3, [r4, #4]
 8002f68:	6014      	str	r4, [r2, #0]
 8002f6a:	b003      	add	sp, #12
 8002f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f70:	f000 beb4 	b.w	8003cdc <__malloc_unlock>
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	d908      	bls.n	8002f8a <_free_r+0x46>
 8002f78:	6825      	ldr	r5, [r4, #0]
 8002f7a:	1961      	adds	r1, r4, r5
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	bf01      	itttt	eq
 8002f80:	6819      	ldreq	r1, [r3, #0]
 8002f82:	685b      	ldreq	r3, [r3, #4]
 8002f84:	1949      	addeq	r1, r1, r5
 8002f86:	6021      	streq	r1, [r4, #0]
 8002f88:	e7ed      	b.n	8002f66 <_free_r+0x22>
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b10b      	cbz	r3, 8002f94 <_free_r+0x50>
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	d9fa      	bls.n	8002f8a <_free_r+0x46>
 8002f94:	6811      	ldr	r1, [r2, #0]
 8002f96:	1855      	adds	r5, r2, r1
 8002f98:	42a5      	cmp	r5, r4
 8002f9a:	d10b      	bne.n	8002fb4 <_free_r+0x70>
 8002f9c:	6824      	ldr	r4, [r4, #0]
 8002f9e:	4421      	add	r1, r4
 8002fa0:	1854      	adds	r4, r2, r1
 8002fa2:	42a3      	cmp	r3, r4
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	d1e0      	bne.n	8002f6a <_free_r+0x26>
 8002fa8:	681c      	ldr	r4, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	6053      	str	r3, [r2, #4]
 8002fae:	4421      	add	r1, r4
 8002fb0:	6011      	str	r1, [r2, #0]
 8002fb2:	e7da      	b.n	8002f6a <_free_r+0x26>
 8002fb4:	d902      	bls.n	8002fbc <_free_r+0x78>
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	6003      	str	r3, [r0, #0]
 8002fba:	e7d6      	b.n	8002f6a <_free_r+0x26>
 8002fbc:	6825      	ldr	r5, [r4, #0]
 8002fbe:	1961      	adds	r1, r4, r5
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	bf04      	itt	eq
 8002fc4:	6819      	ldreq	r1, [r3, #0]
 8002fc6:	685b      	ldreq	r3, [r3, #4]
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	bf04      	itt	eq
 8002fcc:	1949      	addeq	r1, r1, r5
 8002fce:	6021      	streq	r1, [r4, #0]
 8002fd0:	6054      	str	r4, [r2, #4]
 8002fd2:	e7ca      	b.n	8002f6a <_free_r+0x26>
 8002fd4:	b003      	add	sp, #12
 8002fd6:	bd30      	pop	{r4, r5, pc}
 8002fd8:	20000174 	.word	0x20000174

08002fdc <sbrk_aligned>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	4e0e      	ldr	r6, [pc, #56]	; (8003018 <sbrk_aligned+0x3c>)
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	6831      	ldr	r1, [r6, #0]
 8002fe4:	4605      	mov	r5, r0
 8002fe6:	b911      	cbnz	r1, 8002fee <sbrk_aligned+0x12>
 8002fe8:	f000 fb7a 	bl	80036e0 <_sbrk_r>
 8002fec:	6030      	str	r0, [r6, #0]
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f000 fb75 	bl	80036e0 <_sbrk_r>
 8002ff6:	1c43      	adds	r3, r0, #1
 8002ff8:	d00a      	beq.n	8003010 <sbrk_aligned+0x34>
 8002ffa:	1cc4      	adds	r4, r0, #3
 8002ffc:	f024 0403 	bic.w	r4, r4, #3
 8003000:	42a0      	cmp	r0, r4
 8003002:	d007      	beq.n	8003014 <sbrk_aligned+0x38>
 8003004:	1a21      	subs	r1, r4, r0
 8003006:	4628      	mov	r0, r5
 8003008:	f000 fb6a 	bl	80036e0 <_sbrk_r>
 800300c:	3001      	adds	r0, #1
 800300e:	d101      	bne.n	8003014 <sbrk_aligned+0x38>
 8003010:	f04f 34ff 	mov.w	r4, #4294967295
 8003014:	4620      	mov	r0, r4
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	20000178 	.word	0x20000178

0800301c <_malloc_r>:
 800301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003020:	1ccd      	adds	r5, r1, #3
 8003022:	f025 0503 	bic.w	r5, r5, #3
 8003026:	3508      	adds	r5, #8
 8003028:	2d0c      	cmp	r5, #12
 800302a:	bf38      	it	cc
 800302c:	250c      	movcc	r5, #12
 800302e:	2d00      	cmp	r5, #0
 8003030:	4607      	mov	r7, r0
 8003032:	db01      	blt.n	8003038 <_malloc_r+0x1c>
 8003034:	42a9      	cmp	r1, r5
 8003036:	d905      	bls.n	8003044 <_malloc_r+0x28>
 8003038:	230c      	movs	r3, #12
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	2600      	movs	r6, #0
 800303e:	4630      	mov	r0, r6
 8003040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003044:	4e2e      	ldr	r6, [pc, #184]	; (8003100 <_malloc_r+0xe4>)
 8003046:	f000 fe43 	bl	8003cd0 <__malloc_lock>
 800304a:	6833      	ldr	r3, [r6, #0]
 800304c:	461c      	mov	r4, r3
 800304e:	bb34      	cbnz	r4, 800309e <_malloc_r+0x82>
 8003050:	4629      	mov	r1, r5
 8003052:	4638      	mov	r0, r7
 8003054:	f7ff ffc2 	bl	8002fdc <sbrk_aligned>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	4604      	mov	r4, r0
 800305c:	d14d      	bne.n	80030fa <_malloc_r+0xde>
 800305e:	6834      	ldr	r4, [r6, #0]
 8003060:	4626      	mov	r6, r4
 8003062:	2e00      	cmp	r6, #0
 8003064:	d140      	bne.n	80030e8 <_malloc_r+0xcc>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	4631      	mov	r1, r6
 800306a:	4638      	mov	r0, r7
 800306c:	eb04 0803 	add.w	r8, r4, r3
 8003070:	f000 fb36 	bl	80036e0 <_sbrk_r>
 8003074:	4580      	cmp	r8, r0
 8003076:	d13a      	bne.n	80030ee <_malloc_r+0xd2>
 8003078:	6821      	ldr	r1, [r4, #0]
 800307a:	3503      	adds	r5, #3
 800307c:	1a6d      	subs	r5, r5, r1
 800307e:	f025 0503 	bic.w	r5, r5, #3
 8003082:	3508      	adds	r5, #8
 8003084:	2d0c      	cmp	r5, #12
 8003086:	bf38      	it	cc
 8003088:	250c      	movcc	r5, #12
 800308a:	4629      	mov	r1, r5
 800308c:	4638      	mov	r0, r7
 800308e:	f7ff ffa5 	bl	8002fdc <sbrk_aligned>
 8003092:	3001      	adds	r0, #1
 8003094:	d02b      	beq.n	80030ee <_malloc_r+0xd2>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	442b      	add	r3, r5
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	e00e      	b.n	80030bc <_malloc_r+0xa0>
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	1b52      	subs	r2, r2, r5
 80030a2:	d41e      	bmi.n	80030e2 <_malloc_r+0xc6>
 80030a4:	2a0b      	cmp	r2, #11
 80030a6:	d916      	bls.n	80030d6 <_malloc_r+0xba>
 80030a8:	1961      	adds	r1, r4, r5
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	6025      	str	r5, [r4, #0]
 80030ae:	bf18      	it	ne
 80030b0:	6059      	strne	r1, [r3, #4]
 80030b2:	6863      	ldr	r3, [r4, #4]
 80030b4:	bf08      	it	eq
 80030b6:	6031      	streq	r1, [r6, #0]
 80030b8:	5162      	str	r2, [r4, r5]
 80030ba:	604b      	str	r3, [r1, #4]
 80030bc:	4638      	mov	r0, r7
 80030be:	f104 060b 	add.w	r6, r4, #11
 80030c2:	f000 fe0b 	bl	8003cdc <__malloc_unlock>
 80030c6:	f026 0607 	bic.w	r6, r6, #7
 80030ca:	1d23      	adds	r3, r4, #4
 80030cc:	1af2      	subs	r2, r6, r3
 80030ce:	d0b6      	beq.n	800303e <_malloc_r+0x22>
 80030d0:	1b9b      	subs	r3, r3, r6
 80030d2:	50a3      	str	r3, [r4, r2]
 80030d4:	e7b3      	b.n	800303e <_malloc_r+0x22>
 80030d6:	6862      	ldr	r2, [r4, #4]
 80030d8:	42a3      	cmp	r3, r4
 80030da:	bf0c      	ite	eq
 80030dc:	6032      	streq	r2, [r6, #0]
 80030de:	605a      	strne	r2, [r3, #4]
 80030e0:	e7ec      	b.n	80030bc <_malloc_r+0xa0>
 80030e2:	4623      	mov	r3, r4
 80030e4:	6864      	ldr	r4, [r4, #4]
 80030e6:	e7b2      	b.n	800304e <_malloc_r+0x32>
 80030e8:	4634      	mov	r4, r6
 80030ea:	6876      	ldr	r6, [r6, #4]
 80030ec:	e7b9      	b.n	8003062 <_malloc_r+0x46>
 80030ee:	230c      	movs	r3, #12
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4638      	mov	r0, r7
 80030f4:	f000 fdf2 	bl	8003cdc <__malloc_unlock>
 80030f8:	e7a1      	b.n	800303e <_malloc_r+0x22>
 80030fa:	6025      	str	r5, [r4, #0]
 80030fc:	e7de      	b.n	80030bc <_malloc_r+0xa0>
 80030fe:	bf00      	nop
 8003100:	20000174 	.word	0x20000174

08003104 <__sfputc_r>:
 8003104:	6893      	ldr	r3, [r2, #8]
 8003106:	3b01      	subs	r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	b410      	push	{r4}
 800310c:	6093      	str	r3, [r2, #8]
 800310e:	da08      	bge.n	8003122 <__sfputc_r+0x1e>
 8003110:	6994      	ldr	r4, [r2, #24]
 8003112:	42a3      	cmp	r3, r4
 8003114:	db01      	blt.n	800311a <__sfputc_r+0x16>
 8003116:	290a      	cmp	r1, #10
 8003118:	d103      	bne.n	8003122 <__sfputc_r+0x1e>
 800311a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800311e:	f000 baef 	b.w	8003700 <__swbuf_r>
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	1c58      	adds	r0, r3, #1
 8003126:	6010      	str	r0, [r2, #0]
 8003128:	7019      	strb	r1, [r3, #0]
 800312a:	4608      	mov	r0, r1
 800312c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003130:	4770      	bx	lr

08003132 <__sfputs_r>:
 8003132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003134:	4606      	mov	r6, r0
 8003136:	460f      	mov	r7, r1
 8003138:	4614      	mov	r4, r2
 800313a:	18d5      	adds	r5, r2, r3
 800313c:	42ac      	cmp	r4, r5
 800313e:	d101      	bne.n	8003144 <__sfputs_r+0x12>
 8003140:	2000      	movs	r0, #0
 8003142:	e007      	b.n	8003154 <__sfputs_r+0x22>
 8003144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003148:	463a      	mov	r2, r7
 800314a:	4630      	mov	r0, r6
 800314c:	f7ff ffda 	bl	8003104 <__sfputc_r>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d1f3      	bne.n	800313c <__sfputs_r+0xa>
 8003154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003158 <_vfiprintf_r>:
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	460d      	mov	r5, r1
 800315e:	b09d      	sub	sp, #116	; 0x74
 8003160:	4614      	mov	r4, r2
 8003162:	4698      	mov	r8, r3
 8003164:	4606      	mov	r6, r0
 8003166:	b118      	cbz	r0, 8003170 <_vfiprintf_r+0x18>
 8003168:	6983      	ldr	r3, [r0, #24]
 800316a:	b90b      	cbnz	r3, 8003170 <_vfiprintf_r+0x18>
 800316c:	f000 fcaa 	bl	8003ac4 <__sinit>
 8003170:	4b89      	ldr	r3, [pc, #548]	; (8003398 <_vfiprintf_r+0x240>)
 8003172:	429d      	cmp	r5, r3
 8003174:	d11b      	bne.n	80031ae <_vfiprintf_r+0x56>
 8003176:	6875      	ldr	r5, [r6, #4]
 8003178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800317a:	07d9      	lsls	r1, r3, #31
 800317c:	d405      	bmi.n	800318a <_vfiprintf_r+0x32>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	059a      	lsls	r2, r3, #22
 8003182:	d402      	bmi.n	800318a <_vfiprintf_r+0x32>
 8003184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003186:	f000 fd3b 	bl	8003c00 <__retarget_lock_acquire_recursive>
 800318a:	89ab      	ldrh	r3, [r5, #12]
 800318c:	071b      	lsls	r3, r3, #28
 800318e:	d501      	bpl.n	8003194 <_vfiprintf_r+0x3c>
 8003190:	692b      	ldr	r3, [r5, #16]
 8003192:	b9eb      	cbnz	r3, 80031d0 <_vfiprintf_r+0x78>
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f000 fb04 	bl	80037a4 <__swsetup_r>
 800319c:	b1c0      	cbz	r0, 80031d0 <_vfiprintf_r+0x78>
 800319e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031a0:	07dc      	lsls	r4, r3, #31
 80031a2:	d50e      	bpl.n	80031c2 <_vfiprintf_r+0x6a>
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	b01d      	add	sp, #116	; 0x74
 80031aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ae:	4b7b      	ldr	r3, [pc, #492]	; (800339c <_vfiprintf_r+0x244>)
 80031b0:	429d      	cmp	r5, r3
 80031b2:	d101      	bne.n	80031b8 <_vfiprintf_r+0x60>
 80031b4:	68b5      	ldr	r5, [r6, #8]
 80031b6:	e7df      	b.n	8003178 <_vfiprintf_r+0x20>
 80031b8:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <_vfiprintf_r+0x248>)
 80031ba:	429d      	cmp	r5, r3
 80031bc:	bf08      	it	eq
 80031be:	68f5      	ldreq	r5, [r6, #12]
 80031c0:	e7da      	b.n	8003178 <_vfiprintf_r+0x20>
 80031c2:	89ab      	ldrh	r3, [r5, #12]
 80031c4:	0598      	lsls	r0, r3, #22
 80031c6:	d4ed      	bmi.n	80031a4 <_vfiprintf_r+0x4c>
 80031c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031ca:	f000 fd1a 	bl	8003c02 <__retarget_lock_release_recursive>
 80031ce:	e7e9      	b.n	80031a4 <_vfiprintf_r+0x4c>
 80031d0:	2300      	movs	r3, #0
 80031d2:	9309      	str	r3, [sp, #36]	; 0x24
 80031d4:	2320      	movs	r3, #32
 80031d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031da:	f8cd 800c 	str.w	r8, [sp, #12]
 80031de:	2330      	movs	r3, #48	; 0x30
 80031e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80033a4 <_vfiprintf_r+0x24c>
 80031e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031e8:	f04f 0901 	mov.w	r9, #1
 80031ec:	4623      	mov	r3, r4
 80031ee:	469a      	mov	sl, r3
 80031f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031f4:	b10a      	cbz	r2, 80031fa <_vfiprintf_r+0xa2>
 80031f6:	2a25      	cmp	r2, #37	; 0x25
 80031f8:	d1f9      	bne.n	80031ee <_vfiprintf_r+0x96>
 80031fa:	ebba 0b04 	subs.w	fp, sl, r4
 80031fe:	d00b      	beq.n	8003218 <_vfiprintf_r+0xc0>
 8003200:	465b      	mov	r3, fp
 8003202:	4622      	mov	r2, r4
 8003204:	4629      	mov	r1, r5
 8003206:	4630      	mov	r0, r6
 8003208:	f7ff ff93 	bl	8003132 <__sfputs_r>
 800320c:	3001      	adds	r0, #1
 800320e:	f000 80aa 	beq.w	8003366 <_vfiprintf_r+0x20e>
 8003212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003214:	445a      	add	r2, fp
 8003216:	9209      	str	r2, [sp, #36]	; 0x24
 8003218:	f89a 3000 	ldrb.w	r3, [sl]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a2 	beq.w	8003366 <_vfiprintf_r+0x20e>
 8003222:	2300      	movs	r3, #0
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800322c:	f10a 0a01 	add.w	sl, sl, #1
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	9307      	str	r3, [sp, #28]
 8003234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003238:	931a      	str	r3, [sp, #104]	; 0x68
 800323a:	4654      	mov	r4, sl
 800323c:	2205      	movs	r2, #5
 800323e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003242:	4858      	ldr	r0, [pc, #352]	; (80033a4 <_vfiprintf_r+0x24c>)
 8003244:	f7fc ffdc 	bl	8000200 <memchr>
 8003248:	9a04      	ldr	r2, [sp, #16]
 800324a:	b9d8      	cbnz	r0, 8003284 <_vfiprintf_r+0x12c>
 800324c:	06d1      	lsls	r1, r2, #27
 800324e:	bf44      	itt	mi
 8003250:	2320      	movmi	r3, #32
 8003252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003256:	0713      	lsls	r3, r2, #28
 8003258:	bf44      	itt	mi
 800325a:	232b      	movmi	r3, #43	; 0x2b
 800325c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003260:	f89a 3000 	ldrb.w	r3, [sl]
 8003264:	2b2a      	cmp	r3, #42	; 0x2a
 8003266:	d015      	beq.n	8003294 <_vfiprintf_r+0x13c>
 8003268:	9a07      	ldr	r2, [sp, #28]
 800326a:	4654      	mov	r4, sl
 800326c:	2000      	movs	r0, #0
 800326e:	f04f 0c0a 	mov.w	ip, #10
 8003272:	4621      	mov	r1, r4
 8003274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003278:	3b30      	subs	r3, #48	; 0x30
 800327a:	2b09      	cmp	r3, #9
 800327c:	d94e      	bls.n	800331c <_vfiprintf_r+0x1c4>
 800327e:	b1b0      	cbz	r0, 80032ae <_vfiprintf_r+0x156>
 8003280:	9207      	str	r2, [sp, #28]
 8003282:	e014      	b.n	80032ae <_vfiprintf_r+0x156>
 8003284:	eba0 0308 	sub.w	r3, r0, r8
 8003288:	fa09 f303 	lsl.w	r3, r9, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	9304      	str	r3, [sp, #16]
 8003290:	46a2      	mov	sl, r4
 8003292:	e7d2      	b.n	800323a <_vfiprintf_r+0xe2>
 8003294:	9b03      	ldr	r3, [sp, #12]
 8003296:	1d19      	adds	r1, r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	9103      	str	r1, [sp, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	bfbb      	ittet	lt
 80032a0:	425b      	neglt	r3, r3
 80032a2:	f042 0202 	orrlt.w	r2, r2, #2
 80032a6:	9307      	strge	r3, [sp, #28]
 80032a8:	9307      	strlt	r3, [sp, #28]
 80032aa:	bfb8      	it	lt
 80032ac:	9204      	strlt	r2, [sp, #16]
 80032ae:	7823      	ldrb	r3, [r4, #0]
 80032b0:	2b2e      	cmp	r3, #46	; 0x2e
 80032b2:	d10c      	bne.n	80032ce <_vfiprintf_r+0x176>
 80032b4:	7863      	ldrb	r3, [r4, #1]
 80032b6:	2b2a      	cmp	r3, #42	; 0x2a
 80032b8:	d135      	bne.n	8003326 <_vfiprintf_r+0x1ce>
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	1d1a      	adds	r2, r3, #4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	9203      	str	r2, [sp, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bfb8      	it	lt
 80032c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80032ca:	3402      	adds	r4, #2
 80032cc:	9305      	str	r3, [sp, #20]
 80032ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80033b4 <_vfiprintf_r+0x25c>
 80032d2:	7821      	ldrb	r1, [r4, #0]
 80032d4:	2203      	movs	r2, #3
 80032d6:	4650      	mov	r0, sl
 80032d8:	f7fc ff92 	bl	8000200 <memchr>
 80032dc:	b140      	cbz	r0, 80032f0 <_vfiprintf_r+0x198>
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	eba0 000a 	sub.w	r0, r0, sl
 80032e4:	fa03 f000 	lsl.w	r0, r3, r0
 80032e8:	9b04      	ldr	r3, [sp, #16]
 80032ea:	4303      	orrs	r3, r0
 80032ec:	3401      	adds	r4, #1
 80032ee:	9304      	str	r3, [sp, #16]
 80032f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f4:	482c      	ldr	r0, [pc, #176]	; (80033a8 <_vfiprintf_r+0x250>)
 80032f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032fa:	2206      	movs	r2, #6
 80032fc:	f7fc ff80 	bl	8000200 <memchr>
 8003300:	2800      	cmp	r0, #0
 8003302:	d03f      	beq.n	8003384 <_vfiprintf_r+0x22c>
 8003304:	4b29      	ldr	r3, [pc, #164]	; (80033ac <_vfiprintf_r+0x254>)
 8003306:	bb1b      	cbnz	r3, 8003350 <_vfiprintf_r+0x1f8>
 8003308:	9b03      	ldr	r3, [sp, #12]
 800330a:	3307      	adds	r3, #7
 800330c:	f023 0307 	bic.w	r3, r3, #7
 8003310:	3308      	adds	r3, #8
 8003312:	9303      	str	r3, [sp, #12]
 8003314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003316:	443b      	add	r3, r7
 8003318:	9309      	str	r3, [sp, #36]	; 0x24
 800331a:	e767      	b.n	80031ec <_vfiprintf_r+0x94>
 800331c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003320:	460c      	mov	r4, r1
 8003322:	2001      	movs	r0, #1
 8003324:	e7a5      	b.n	8003272 <_vfiprintf_r+0x11a>
 8003326:	2300      	movs	r3, #0
 8003328:	3401      	adds	r4, #1
 800332a:	9305      	str	r3, [sp, #20]
 800332c:	4619      	mov	r1, r3
 800332e:	f04f 0c0a 	mov.w	ip, #10
 8003332:	4620      	mov	r0, r4
 8003334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003338:	3a30      	subs	r2, #48	; 0x30
 800333a:	2a09      	cmp	r2, #9
 800333c:	d903      	bls.n	8003346 <_vfiprintf_r+0x1ee>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0c5      	beq.n	80032ce <_vfiprintf_r+0x176>
 8003342:	9105      	str	r1, [sp, #20]
 8003344:	e7c3      	b.n	80032ce <_vfiprintf_r+0x176>
 8003346:	fb0c 2101 	mla	r1, ip, r1, r2
 800334a:	4604      	mov	r4, r0
 800334c:	2301      	movs	r3, #1
 800334e:	e7f0      	b.n	8003332 <_vfiprintf_r+0x1da>
 8003350:	ab03      	add	r3, sp, #12
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	462a      	mov	r2, r5
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <_vfiprintf_r+0x258>)
 8003358:	a904      	add	r1, sp, #16
 800335a:	4630      	mov	r0, r6
 800335c:	f3af 8000 	nop.w
 8003360:	4607      	mov	r7, r0
 8003362:	1c78      	adds	r0, r7, #1
 8003364:	d1d6      	bne.n	8003314 <_vfiprintf_r+0x1bc>
 8003366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003368:	07d9      	lsls	r1, r3, #31
 800336a:	d405      	bmi.n	8003378 <_vfiprintf_r+0x220>
 800336c:	89ab      	ldrh	r3, [r5, #12]
 800336e:	059a      	lsls	r2, r3, #22
 8003370:	d402      	bmi.n	8003378 <_vfiprintf_r+0x220>
 8003372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003374:	f000 fc45 	bl	8003c02 <__retarget_lock_release_recursive>
 8003378:	89ab      	ldrh	r3, [r5, #12]
 800337a:	065b      	lsls	r3, r3, #25
 800337c:	f53f af12 	bmi.w	80031a4 <_vfiprintf_r+0x4c>
 8003380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003382:	e711      	b.n	80031a8 <_vfiprintf_r+0x50>
 8003384:	ab03      	add	r3, sp, #12
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	462a      	mov	r2, r5
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <_vfiprintf_r+0x258>)
 800338c:	a904      	add	r1, sp, #16
 800338e:	4630      	mov	r0, r6
 8003390:	f000 f880 	bl	8003494 <_printf_i>
 8003394:	e7e4      	b.n	8003360 <_vfiprintf_r+0x208>
 8003396:	bf00      	nop
 8003398:	08004058 	.word	0x08004058
 800339c:	08004078 	.word	0x08004078
 80033a0:	08004038 	.word	0x08004038
 80033a4:	08004004 	.word	0x08004004
 80033a8:	0800400e 	.word	0x0800400e
 80033ac:	00000000 	.word	0x00000000
 80033b0:	08003133 	.word	0x08003133
 80033b4:	0800400a 	.word	0x0800400a

080033b8 <_printf_common>:
 80033b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033bc:	4616      	mov	r6, r2
 80033be:	4699      	mov	r9, r3
 80033c0:	688a      	ldr	r2, [r1, #8]
 80033c2:	690b      	ldr	r3, [r1, #16]
 80033c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033c8:	4293      	cmp	r3, r2
 80033ca:	bfb8      	it	lt
 80033cc:	4613      	movlt	r3, r2
 80033ce:	6033      	str	r3, [r6, #0]
 80033d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033d4:	4607      	mov	r7, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	b10a      	cbz	r2, 80033de <_printf_common+0x26>
 80033da:	3301      	adds	r3, #1
 80033dc:	6033      	str	r3, [r6, #0]
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	0699      	lsls	r1, r3, #26
 80033e2:	bf42      	ittt	mi
 80033e4:	6833      	ldrmi	r3, [r6, #0]
 80033e6:	3302      	addmi	r3, #2
 80033e8:	6033      	strmi	r3, [r6, #0]
 80033ea:	6825      	ldr	r5, [r4, #0]
 80033ec:	f015 0506 	ands.w	r5, r5, #6
 80033f0:	d106      	bne.n	8003400 <_printf_common+0x48>
 80033f2:	f104 0a19 	add.w	sl, r4, #25
 80033f6:	68e3      	ldr	r3, [r4, #12]
 80033f8:	6832      	ldr	r2, [r6, #0]
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	42ab      	cmp	r3, r5
 80033fe:	dc26      	bgt.n	800344e <_printf_common+0x96>
 8003400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003404:	1e13      	subs	r3, r2, #0
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	bf18      	it	ne
 800340a:	2301      	movne	r3, #1
 800340c:	0692      	lsls	r2, r2, #26
 800340e:	d42b      	bmi.n	8003468 <_printf_common+0xb0>
 8003410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003414:	4649      	mov	r1, r9
 8003416:	4638      	mov	r0, r7
 8003418:	47c0      	blx	r8
 800341a:	3001      	adds	r0, #1
 800341c:	d01e      	beq.n	800345c <_printf_common+0xa4>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	68e5      	ldr	r5, [r4, #12]
 8003422:	6832      	ldr	r2, [r6, #0]
 8003424:	f003 0306 	and.w	r3, r3, #6
 8003428:	2b04      	cmp	r3, #4
 800342a:	bf08      	it	eq
 800342c:	1aad      	subeq	r5, r5, r2
 800342e:	68a3      	ldr	r3, [r4, #8]
 8003430:	6922      	ldr	r2, [r4, #16]
 8003432:	bf0c      	ite	eq
 8003434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003438:	2500      	movne	r5, #0
 800343a:	4293      	cmp	r3, r2
 800343c:	bfc4      	itt	gt
 800343e:	1a9b      	subgt	r3, r3, r2
 8003440:	18ed      	addgt	r5, r5, r3
 8003442:	2600      	movs	r6, #0
 8003444:	341a      	adds	r4, #26
 8003446:	42b5      	cmp	r5, r6
 8003448:	d11a      	bne.n	8003480 <_printf_common+0xc8>
 800344a:	2000      	movs	r0, #0
 800344c:	e008      	b.n	8003460 <_printf_common+0xa8>
 800344e:	2301      	movs	r3, #1
 8003450:	4652      	mov	r2, sl
 8003452:	4649      	mov	r1, r9
 8003454:	4638      	mov	r0, r7
 8003456:	47c0      	blx	r8
 8003458:	3001      	adds	r0, #1
 800345a:	d103      	bne.n	8003464 <_printf_common+0xac>
 800345c:	f04f 30ff 	mov.w	r0, #4294967295
 8003460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003464:	3501      	adds	r5, #1
 8003466:	e7c6      	b.n	80033f6 <_printf_common+0x3e>
 8003468:	18e1      	adds	r1, r4, r3
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	2030      	movs	r0, #48	; 0x30
 800346e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003472:	4422      	add	r2, r4
 8003474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800347c:	3302      	adds	r3, #2
 800347e:	e7c7      	b.n	8003410 <_printf_common+0x58>
 8003480:	2301      	movs	r3, #1
 8003482:	4622      	mov	r2, r4
 8003484:	4649      	mov	r1, r9
 8003486:	4638      	mov	r0, r7
 8003488:	47c0      	blx	r8
 800348a:	3001      	adds	r0, #1
 800348c:	d0e6      	beq.n	800345c <_printf_common+0xa4>
 800348e:	3601      	adds	r6, #1
 8003490:	e7d9      	b.n	8003446 <_printf_common+0x8e>
	...

08003494 <_printf_i>:
 8003494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003498:	7e0f      	ldrb	r7, [r1, #24]
 800349a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800349c:	2f78      	cmp	r7, #120	; 0x78
 800349e:	4691      	mov	r9, r2
 80034a0:	4680      	mov	r8, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	469a      	mov	sl, r3
 80034a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034aa:	d807      	bhi.n	80034bc <_printf_i+0x28>
 80034ac:	2f62      	cmp	r7, #98	; 0x62
 80034ae:	d80a      	bhi.n	80034c6 <_printf_i+0x32>
 80034b0:	2f00      	cmp	r7, #0
 80034b2:	f000 80d8 	beq.w	8003666 <_printf_i+0x1d2>
 80034b6:	2f58      	cmp	r7, #88	; 0x58
 80034b8:	f000 80a3 	beq.w	8003602 <_printf_i+0x16e>
 80034bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034c4:	e03a      	b.n	800353c <_printf_i+0xa8>
 80034c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034ca:	2b15      	cmp	r3, #21
 80034cc:	d8f6      	bhi.n	80034bc <_printf_i+0x28>
 80034ce:	a101      	add	r1, pc, #4	; (adr r1, 80034d4 <_printf_i+0x40>)
 80034d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034d4:	0800352d 	.word	0x0800352d
 80034d8:	08003541 	.word	0x08003541
 80034dc:	080034bd 	.word	0x080034bd
 80034e0:	080034bd 	.word	0x080034bd
 80034e4:	080034bd 	.word	0x080034bd
 80034e8:	080034bd 	.word	0x080034bd
 80034ec:	08003541 	.word	0x08003541
 80034f0:	080034bd 	.word	0x080034bd
 80034f4:	080034bd 	.word	0x080034bd
 80034f8:	080034bd 	.word	0x080034bd
 80034fc:	080034bd 	.word	0x080034bd
 8003500:	0800364d 	.word	0x0800364d
 8003504:	08003571 	.word	0x08003571
 8003508:	0800362f 	.word	0x0800362f
 800350c:	080034bd 	.word	0x080034bd
 8003510:	080034bd 	.word	0x080034bd
 8003514:	0800366f 	.word	0x0800366f
 8003518:	080034bd 	.word	0x080034bd
 800351c:	08003571 	.word	0x08003571
 8003520:	080034bd 	.word	0x080034bd
 8003524:	080034bd 	.word	0x080034bd
 8003528:	08003637 	.word	0x08003637
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	1d1a      	adds	r2, r3, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	602a      	str	r2, [r5, #0]
 8003534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800353c:	2301      	movs	r3, #1
 800353e:	e0a3      	b.n	8003688 <_printf_i+0x1f4>
 8003540:	6820      	ldr	r0, [r4, #0]
 8003542:	6829      	ldr	r1, [r5, #0]
 8003544:	0606      	lsls	r6, r0, #24
 8003546:	f101 0304 	add.w	r3, r1, #4
 800354a:	d50a      	bpl.n	8003562 <_printf_i+0xce>
 800354c:	680e      	ldr	r6, [r1, #0]
 800354e:	602b      	str	r3, [r5, #0]
 8003550:	2e00      	cmp	r6, #0
 8003552:	da03      	bge.n	800355c <_printf_i+0xc8>
 8003554:	232d      	movs	r3, #45	; 0x2d
 8003556:	4276      	negs	r6, r6
 8003558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800355c:	485e      	ldr	r0, [pc, #376]	; (80036d8 <_printf_i+0x244>)
 800355e:	230a      	movs	r3, #10
 8003560:	e019      	b.n	8003596 <_printf_i+0x102>
 8003562:	680e      	ldr	r6, [r1, #0]
 8003564:	602b      	str	r3, [r5, #0]
 8003566:	f010 0f40 	tst.w	r0, #64	; 0x40
 800356a:	bf18      	it	ne
 800356c:	b236      	sxthne	r6, r6
 800356e:	e7ef      	b.n	8003550 <_printf_i+0xbc>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	1d19      	adds	r1, r3, #4
 8003576:	6029      	str	r1, [r5, #0]
 8003578:	0601      	lsls	r1, r0, #24
 800357a:	d501      	bpl.n	8003580 <_printf_i+0xec>
 800357c:	681e      	ldr	r6, [r3, #0]
 800357e:	e002      	b.n	8003586 <_printf_i+0xf2>
 8003580:	0646      	lsls	r6, r0, #25
 8003582:	d5fb      	bpl.n	800357c <_printf_i+0xe8>
 8003584:	881e      	ldrh	r6, [r3, #0]
 8003586:	4854      	ldr	r0, [pc, #336]	; (80036d8 <_printf_i+0x244>)
 8003588:	2f6f      	cmp	r7, #111	; 0x6f
 800358a:	bf0c      	ite	eq
 800358c:	2308      	moveq	r3, #8
 800358e:	230a      	movne	r3, #10
 8003590:	2100      	movs	r1, #0
 8003592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003596:	6865      	ldr	r5, [r4, #4]
 8003598:	60a5      	str	r5, [r4, #8]
 800359a:	2d00      	cmp	r5, #0
 800359c:	bfa2      	ittt	ge
 800359e:	6821      	ldrge	r1, [r4, #0]
 80035a0:	f021 0104 	bicge.w	r1, r1, #4
 80035a4:	6021      	strge	r1, [r4, #0]
 80035a6:	b90e      	cbnz	r6, 80035ac <_printf_i+0x118>
 80035a8:	2d00      	cmp	r5, #0
 80035aa:	d04d      	beq.n	8003648 <_printf_i+0x1b4>
 80035ac:	4615      	mov	r5, r2
 80035ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80035b2:	fb03 6711 	mls	r7, r3, r1, r6
 80035b6:	5dc7      	ldrb	r7, [r0, r7]
 80035b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035bc:	4637      	mov	r7, r6
 80035be:	42bb      	cmp	r3, r7
 80035c0:	460e      	mov	r6, r1
 80035c2:	d9f4      	bls.n	80035ae <_printf_i+0x11a>
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d10b      	bne.n	80035e0 <_printf_i+0x14c>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	07de      	lsls	r6, r3, #31
 80035cc:	d508      	bpl.n	80035e0 <_printf_i+0x14c>
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	6861      	ldr	r1, [r4, #4]
 80035d2:	4299      	cmp	r1, r3
 80035d4:	bfde      	ittt	le
 80035d6:	2330      	movle	r3, #48	; 0x30
 80035d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035e0:	1b52      	subs	r2, r2, r5
 80035e2:	6122      	str	r2, [r4, #16]
 80035e4:	f8cd a000 	str.w	sl, [sp]
 80035e8:	464b      	mov	r3, r9
 80035ea:	aa03      	add	r2, sp, #12
 80035ec:	4621      	mov	r1, r4
 80035ee:	4640      	mov	r0, r8
 80035f0:	f7ff fee2 	bl	80033b8 <_printf_common>
 80035f4:	3001      	adds	r0, #1
 80035f6:	d14c      	bne.n	8003692 <_printf_i+0x1fe>
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	b004      	add	sp, #16
 80035fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003602:	4835      	ldr	r0, [pc, #212]	; (80036d8 <_printf_i+0x244>)
 8003604:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003608:	6829      	ldr	r1, [r5, #0]
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003610:	6029      	str	r1, [r5, #0]
 8003612:	061d      	lsls	r5, r3, #24
 8003614:	d514      	bpl.n	8003640 <_printf_i+0x1ac>
 8003616:	07df      	lsls	r7, r3, #31
 8003618:	bf44      	itt	mi
 800361a:	f043 0320 	orrmi.w	r3, r3, #32
 800361e:	6023      	strmi	r3, [r4, #0]
 8003620:	b91e      	cbnz	r6, 800362a <_printf_i+0x196>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	f023 0320 	bic.w	r3, r3, #32
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	2310      	movs	r3, #16
 800362c:	e7b0      	b.n	8003590 <_printf_i+0xfc>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	2378      	movs	r3, #120	; 0x78
 8003638:	4828      	ldr	r0, [pc, #160]	; (80036dc <_printf_i+0x248>)
 800363a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800363e:	e7e3      	b.n	8003608 <_printf_i+0x174>
 8003640:	0659      	lsls	r1, r3, #25
 8003642:	bf48      	it	mi
 8003644:	b2b6      	uxthmi	r6, r6
 8003646:	e7e6      	b.n	8003616 <_printf_i+0x182>
 8003648:	4615      	mov	r5, r2
 800364a:	e7bb      	b.n	80035c4 <_printf_i+0x130>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	6826      	ldr	r6, [r4, #0]
 8003650:	6961      	ldr	r1, [r4, #20]
 8003652:	1d18      	adds	r0, r3, #4
 8003654:	6028      	str	r0, [r5, #0]
 8003656:	0635      	lsls	r5, r6, #24
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	d501      	bpl.n	8003660 <_printf_i+0x1cc>
 800365c:	6019      	str	r1, [r3, #0]
 800365e:	e002      	b.n	8003666 <_printf_i+0x1d2>
 8003660:	0670      	lsls	r0, r6, #25
 8003662:	d5fb      	bpl.n	800365c <_printf_i+0x1c8>
 8003664:	8019      	strh	r1, [r3, #0]
 8003666:	2300      	movs	r3, #0
 8003668:	6123      	str	r3, [r4, #16]
 800366a:	4615      	mov	r5, r2
 800366c:	e7ba      	b.n	80035e4 <_printf_i+0x150>
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	602a      	str	r2, [r5, #0]
 8003674:	681d      	ldr	r5, [r3, #0]
 8003676:	6862      	ldr	r2, [r4, #4]
 8003678:	2100      	movs	r1, #0
 800367a:	4628      	mov	r0, r5
 800367c:	f7fc fdc0 	bl	8000200 <memchr>
 8003680:	b108      	cbz	r0, 8003686 <_printf_i+0x1f2>
 8003682:	1b40      	subs	r0, r0, r5
 8003684:	6060      	str	r0, [r4, #4]
 8003686:	6863      	ldr	r3, [r4, #4]
 8003688:	6123      	str	r3, [r4, #16]
 800368a:	2300      	movs	r3, #0
 800368c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003690:	e7a8      	b.n	80035e4 <_printf_i+0x150>
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	462a      	mov	r2, r5
 8003696:	4649      	mov	r1, r9
 8003698:	4640      	mov	r0, r8
 800369a:	47d0      	blx	sl
 800369c:	3001      	adds	r0, #1
 800369e:	d0ab      	beq.n	80035f8 <_printf_i+0x164>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	079b      	lsls	r3, r3, #30
 80036a4:	d413      	bmi.n	80036ce <_printf_i+0x23a>
 80036a6:	68e0      	ldr	r0, [r4, #12]
 80036a8:	9b03      	ldr	r3, [sp, #12]
 80036aa:	4298      	cmp	r0, r3
 80036ac:	bfb8      	it	lt
 80036ae:	4618      	movlt	r0, r3
 80036b0:	e7a4      	b.n	80035fc <_printf_i+0x168>
 80036b2:	2301      	movs	r3, #1
 80036b4:	4632      	mov	r2, r6
 80036b6:	4649      	mov	r1, r9
 80036b8:	4640      	mov	r0, r8
 80036ba:	47d0      	blx	sl
 80036bc:	3001      	adds	r0, #1
 80036be:	d09b      	beq.n	80035f8 <_printf_i+0x164>
 80036c0:	3501      	adds	r5, #1
 80036c2:	68e3      	ldr	r3, [r4, #12]
 80036c4:	9903      	ldr	r1, [sp, #12]
 80036c6:	1a5b      	subs	r3, r3, r1
 80036c8:	42ab      	cmp	r3, r5
 80036ca:	dcf2      	bgt.n	80036b2 <_printf_i+0x21e>
 80036cc:	e7eb      	b.n	80036a6 <_printf_i+0x212>
 80036ce:	2500      	movs	r5, #0
 80036d0:	f104 0619 	add.w	r6, r4, #25
 80036d4:	e7f5      	b.n	80036c2 <_printf_i+0x22e>
 80036d6:	bf00      	nop
 80036d8:	08004015 	.word	0x08004015
 80036dc:	08004026 	.word	0x08004026

080036e0 <_sbrk_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d06      	ldr	r5, [pc, #24]	; (80036fc <_sbrk_r+0x1c>)
 80036e4:	2300      	movs	r3, #0
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fd f8b0 	bl	8000850 <_sbrk>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_sbrk_r+0x1a>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_sbrk_r+0x1a>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	20000180 	.word	0x20000180

08003700 <__swbuf_r>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	460e      	mov	r6, r1
 8003704:	4614      	mov	r4, r2
 8003706:	4605      	mov	r5, r0
 8003708:	b118      	cbz	r0, 8003712 <__swbuf_r+0x12>
 800370a:	6983      	ldr	r3, [r0, #24]
 800370c:	b90b      	cbnz	r3, 8003712 <__swbuf_r+0x12>
 800370e:	f000 f9d9 	bl	8003ac4 <__sinit>
 8003712:	4b21      	ldr	r3, [pc, #132]	; (8003798 <__swbuf_r+0x98>)
 8003714:	429c      	cmp	r4, r3
 8003716:	d12b      	bne.n	8003770 <__swbuf_r+0x70>
 8003718:	686c      	ldr	r4, [r5, #4]
 800371a:	69a3      	ldr	r3, [r4, #24]
 800371c:	60a3      	str	r3, [r4, #8]
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	071a      	lsls	r2, r3, #28
 8003722:	d52f      	bpl.n	8003784 <__swbuf_r+0x84>
 8003724:	6923      	ldr	r3, [r4, #16]
 8003726:	b36b      	cbz	r3, 8003784 <__swbuf_r+0x84>
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	6820      	ldr	r0, [r4, #0]
 800372c:	1ac0      	subs	r0, r0, r3
 800372e:	6963      	ldr	r3, [r4, #20]
 8003730:	b2f6      	uxtb	r6, r6
 8003732:	4283      	cmp	r3, r0
 8003734:	4637      	mov	r7, r6
 8003736:	dc04      	bgt.n	8003742 <__swbuf_r+0x42>
 8003738:	4621      	mov	r1, r4
 800373a:	4628      	mov	r0, r5
 800373c:	f000 f92e 	bl	800399c <_fflush_r>
 8003740:	bb30      	cbnz	r0, 8003790 <__swbuf_r+0x90>
 8003742:	68a3      	ldr	r3, [r4, #8]
 8003744:	3b01      	subs	r3, #1
 8003746:	60a3      	str	r3, [r4, #8]
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	6022      	str	r2, [r4, #0]
 800374e:	701e      	strb	r6, [r3, #0]
 8003750:	6963      	ldr	r3, [r4, #20]
 8003752:	3001      	adds	r0, #1
 8003754:	4283      	cmp	r3, r0
 8003756:	d004      	beq.n	8003762 <__swbuf_r+0x62>
 8003758:	89a3      	ldrh	r3, [r4, #12]
 800375a:	07db      	lsls	r3, r3, #31
 800375c:	d506      	bpl.n	800376c <__swbuf_r+0x6c>
 800375e:	2e0a      	cmp	r6, #10
 8003760:	d104      	bne.n	800376c <__swbuf_r+0x6c>
 8003762:	4621      	mov	r1, r4
 8003764:	4628      	mov	r0, r5
 8003766:	f000 f919 	bl	800399c <_fflush_r>
 800376a:	b988      	cbnz	r0, 8003790 <__swbuf_r+0x90>
 800376c:	4638      	mov	r0, r7
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <__swbuf_r+0x9c>)
 8003772:	429c      	cmp	r4, r3
 8003774:	d101      	bne.n	800377a <__swbuf_r+0x7a>
 8003776:	68ac      	ldr	r4, [r5, #8]
 8003778:	e7cf      	b.n	800371a <__swbuf_r+0x1a>
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <__swbuf_r+0xa0>)
 800377c:	429c      	cmp	r4, r3
 800377e:	bf08      	it	eq
 8003780:	68ec      	ldreq	r4, [r5, #12]
 8003782:	e7ca      	b.n	800371a <__swbuf_r+0x1a>
 8003784:	4621      	mov	r1, r4
 8003786:	4628      	mov	r0, r5
 8003788:	f000 f80c 	bl	80037a4 <__swsetup_r>
 800378c:	2800      	cmp	r0, #0
 800378e:	d0cb      	beq.n	8003728 <__swbuf_r+0x28>
 8003790:	f04f 37ff 	mov.w	r7, #4294967295
 8003794:	e7ea      	b.n	800376c <__swbuf_r+0x6c>
 8003796:	bf00      	nop
 8003798:	08004058 	.word	0x08004058
 800379c:	08004078 	.word	0x08004078
 80037a0:	08004038 	.word	0x08004038

080037a4 <__swsetup_r>:
 80037a4:	4b32      	ldr	r3, [pc, #200]	; (8003870 <__swsetup_r+0xcc>)
 80037a6:	b570      	push	{r4, r5, r6, lr}
 80037a8:	681d      	ldr	r5, [r3, #0]
 80037aa:	4606      	mov	r6, r0
 80037ac:	460c      	mov	r4, r1
 80037ae:	b125      	cbz	r5, 80037ba <__swsetup_r+0x16>
 80037b0:	69ab      	ldr	r3, [r5, #24]
 80037b2:	b913      	cbnz	r3, 80037ba <__swsetup_r+0x16>
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f985 	bl	8003ac4 <__sinit>
 80037ba:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <__swsetup_r+0xd0>)
 80037bc:	429c      	cmp	r4, r3
 80037be:	d10f      	bne.n	80037e0 <__swsetup_r+0x3c>
 80037c0:	686c      	ldr	r4, [r5, #4]
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037c8:	0719      	lsls	r1, r3, #28
 80037ca:	d42c      	bmi.n	8003826 <__swsetup_r+0x82>
 80037cc:	06dd      	lsls	r5, r3, #27
 80037ce:	d411      	bmi.n	80037f4 <__swsetup_r+0x50>
 80037d0:	2309      	movs	r3, #9
 80037d2:	6033      	str	r3, [r6, #0]
 80037d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037d8:	81a3      	strh	r3, [r4, #12]
 80037da:	f04f 30ff 	mov.w	r0, #4294967295
 80037de:	e03e      	b.n	800385e <__swsetup_r+0xba>
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <__swsetup_r+0xd4>)
 80037e2:	429c      	cmp	r4, r3
 80037e4:	d101      	bne.n	80037ea <__swsetup_r+0x46>
 80037e6:	68ac      	ldr	r4, [r5, #8]
 80037e8:	e7eb      	b.n	80037c2 <__swsetup_r+0x1e>
 80037ea:	4b24      	ldr	r3, [pc, #144]	; (800387c <__swsetup_r+0xd8>)
 80037ec:	429c      	cmp	r4, r3
 80037ee:	bf08      	it	eq
 80037f0:	68ec      	ldreq	r4, [r5, #12]
 80037f2:	e7e6      	b.n	80037c2 <__swsetup_r+0x1e>
 80037f4:	0758      	lsls	r0, r3, #29
 80037f6:	d512      	bpl.n	800381e <__swsetup_r+0x7a>
 80037f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037fa:	b141      	cbz	r1, 800380e <__swsetup_r+0x6a>
 80037fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003800:	4299      	cmp	r1, r3
 8003802:	d002      	beq.n	800380a <__swsetup_r+0x66>
 8003804:	4630      	mov	r0, r6
 8003806:	f7ff fb9d 	bl	8002f44 <_free_r>
 800380a:	2300      	movs	r3, #0
 800380c:	6363      	str	r3, [r4, #52]	; 0x34
 800380e:	89a3      	ldrh	r3, [r4, #12]
 8003810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003814:	81a3      	strh	r3, [r4, #12]
 8003816:	2300      	movs	r3, #0
 8003818:	6063      	str	r3, [r4, #4]
 800381a:	6923      	ldr	r3, [r4, #16]
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	6923      	ldr	r3, [r4, #16]
 8003828:	b94b      	cbnz	r3, 800383e <__swsetup_r+0x9a>
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003834:	d003      	beq.n	800383e <__swsetup_r+0x9a>
 8003836:	4621      	mov	r1, r4
 8003838:	4630      	mov	r0, r6
 800383a:	f000 fa09 	bl	8003c50 <__smakebuf_r>
 800383e:	89a0      	ldrh	r0, [r4, #12]
 8003840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003844:	f010 0301 	ands.w	r3, r0, #1
 8003848:	d00a      	beq.n	8003860 <__swsetup_r+0xbc>
 800384a:	2300      	movs	r3, #0
 800384c:	60a3      	str	r3, [r4, #8]
 800384e:	6963      	ldr	r3, [r4, #20]
 8003850:	425b      	negs	r3, r3
 8003852:	61a3      	str	r3, [r4, #24]
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	b943      	cbnz	r3, 800386a <__swsetup_r+0xc6>
 8003858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800385c:	d1ba      	bne.n	80037d4 <__swsetup_r+0x30>
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	0781      	lsls	r1, r0, #30
 8003862:	bf58      	it	pl
 8003864:	6963      	ldrpl	r3, [r4, #20]
 8003866:	60a3      	str	r3, [r4, #8]
 8003868:	e7f4      	b.n	8003854 <__swsetup_r+0xb0>
 800386a:	2000      	movs	r0, #0
 800386c:	e7f7      	b.n	800385e <__swsetup_r+0xba>
 800386e:	bf00      	nop
 8003870:	2000000c 	.word	0x2000000c
 8003874:	08004058 	.word	0x08004058
 8003878:	08004078 	.word	0x08004078
 800387c:	08004038 	.word	0x08004038

08003880 <abort>:
 8003880:	b508      	push	{r3, lr}
 8003882:	2006      	movs	r0, #6
 8003884:	f000 fa58 	bl	8003d38 <raise>
 8003888:	2001      	movs	r0, #1
 800388a:	f7fc ff69 	bl	8000760 <_exit>
	...

08003890 <__sflush_r>:
 8003890:	898a      	ldrh	r2, [r1, #12]
 8003892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003896:	4605      	mov	r5, r0
 8003898:	0710      	lsls	r0, r2, #28
 800389a:	460c      	mov	r4, r1
 800389c:	d458      	bmi.n	8003950 <__sflush_r+0xc0>
 800389e:	684b      	ldr	r3, [r1, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	dc05      	bgt.n	80038b0 <__sflush_r+0x20>
 80038a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	dc02      	bgt.n	80038b0 <__sflush_r+0x20>
 80038aa:	2000      	movs	r0, #0
 80038ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	d0f9      	beq.n	80038aa <__sflush_r+0x1a>
 80038b6:	2300      	movs	r3, #0
 80038b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038bc:	682f      	ldr	r7, [r5, #0]
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	d032      	beq.n	8003928 <__sflush_r+0x98>
 80038c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	075a      	lsls	r2, r3, #29
 80038c8:	d505      	bpl.n	80038d6 <__sflush_r+0x46>
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	1ac0      	subs	r0, r0, r3
 80038ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038d0:	b10b      	cbz	r3, 80038d6 <__sflush_r+0x46>
 80038d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038d4:	1ac0      	subs	r0, r0, r3
 80038d6:	2300      	movs	r3, #0
 80038d8:	4602      	mov	r2, r0
 80038da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038dc:	6a21      	ldr	r1, [r4, #32]
 80038de:	4628      	mov	r0, r5
 80038e0:	47b0      	blx	r6
 80038e2:	1c43      	adds	r3, r0, #1
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	d106      	bne.n	80038f6 <__sflush_r+0x66>
 80038e8:	6829      	ldr	r1, [r5, #0]
 80038ea:	291d      	cmp	r1, #29
 80038ec:	d82c      	bhi.n	8003948 <__sflush_r+0xb8>
 80038ee:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <__sflush_r+0x108>)
 80038f0:	40ca      	lsrs	r2, r1
 80038f2:	07d6      	lsls	r6, r2, #31
 80038f4:	d528      	bpl.n	8003948 <__sflush_r+0xb8>
 80038f6:	2200      	movs	r2, #0
 80038f8:	6062      	str	r2, [r4, #4]
 80038fa:	04d9      	lsls	r1, r3, #19
 80038fc:	6922      	ldr	r2, [r4, #16]
 80038fe:	6022      	str	r2, [r4, #0]
 8003900:	d504      	bpl.n	800390c <__sflush_r+0x7c>
 8003902:	1c42      	adds	r2, r0, #1
 8003904:	d101      	bne.n	800390a <__sflush_r+0x7a>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	b903      	cbnz	r3, 800390c <__sflush_r+0x7c>
 800390a:	6560      	str	r0, [r4, #84]	; 0x54
 800390c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800390e:	602f      	str	r7, [r5, #0]
 8003910:	2900      	cmp	r1, #0
 8003912:	d0ca      	beq.n	80038aa <__sflush_r+0x1a>
 8003914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003918:	4299      	cmp	r1, r3
 800391a:	d002      	beq.n	8003922 <__sflush_r+0x92>
 800391c:	4628      	mov	r0, r5
 800391e:	f7ff fb11 	bl	8002f44 <_free_r>
 8003922:	2000      	movs	r0, #0
 8003924:	6360      	str	r0, [r4, #52]	; 0x34
 8003926:	e7c1      	b.n	80038ac <__sflush_r+0x1c>
 8003928:	6a21      	ldr	r1, [r4, #32]
 800392a:	2301      	movs	r3, #1
 800392c:	4628      	mov	r0, r5
 800392e:	47b0      	blx	r6
 8003930:	1c41      	adds	r1, r0, #1
 8003932:	d1c7      	bne.n	80038c4 <__sflush_r+0x34>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0c4      	beq.n	80038c4 <__sflush_r+0x34>
 800393a:	2b1d      	cmp	r3, #29
 800393c:	d001      	beq.n	8003942 <__sflush_r+0xb2>
 800393e:	2b16      	cmp	r3, #22
 8003940:	d101      	bne.n	8003946 <__sflush_r+0xb6>
 8003942:	602f      	str	r7, [r5, #0]
 8003944:	e7b1      	b.n	80038aa <__sflush_r+0x1a>
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	e7ad      	b.n	80038ac <__sflush_r+0x1c>
 8003950:	690f      	ldr	r7, [r1, #16]
 8003952:	2f00      	cmp	r7, #0
 8003954:	d0a9      	beq.n	80038aa <__sflush_r+0x1a>
 8003956:	0793      	lsls	r3, r2, #30
 8003958:	680e      	ldr	r6, [r1, #0]
 800395a:	bf08      	it	eq
 800395c:	694b      	ldreq	r3, [r1, #20]
 800395e:	600f      	str	r7, [r1, #0]
 8003960:	bf18      	it	ne
 8003962:	2300      	movne	r3, #0
 8003964:	eba6 0807 	sub.w	r8, r6, r7
 8003968:	608b      	str	r3, [r1, #8]
 800396a:	f1b8 0f00 	cmp.w	r8, #0
 800396e:	dd9c      	ble.n	80038aa <__sflush_r+0x1a>
 8003970:	6a21      	ldr	r1, [r4, #32]
 8003972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003974:	4643      	mov	r3, r8
 8003976:	463a      	mov	r2, r7
 8003978:	4628      	mov	r0, r5
 800397a:	47b0      	blx	r6
 800397c:	2800      	cmp	r0, #0
 800397e:	dc06      	bgt.n	800398e <__sflush_r+0xfe>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003986:	81a3      	strh	r3, [r4, #12]
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	e78e      	b.n	80038ac <__sflush_r+0x1c>
 800398e:	4407      	add	r7, r0
 8003990:	eba8 0800 	sub.w	r8, r8, r0
 8003994:	e7e9      	b.n	800396a <__sflush_r+0xda>
 8003996:	bf00      	nop
 8003998:	20400001 	.word	0x20400001

0800399c <_fflush_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	690b      	ldr	r3, [r1, #16]
 80039a0:	4605      	mov	r5, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	b913      	cbnz	r3, 80039ac <_fflush_r+0x10>
 80039a6:	2500      	movs	r5, #0
 80039a8:	4628      	mov	r0, r5
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	b118      	cbz	r0, 80039b6 <_fflush_r+0x1a>
 80039ae:	6983      	ldr	r3, [r0, #24]
 80039b0:	b90b      	cbnz	r3, 80039b6 <_fflush_r+0x1a>
 80039b2:	f000 f887 	bl	8003ac4 <__sinit>
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <_fflush_r+0x6c>)
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d11b      	bne.n	80039f4 <_fflush_r+0x58>
 80039bc:	686c      	ldr	r4, [r5, #4]
 80039be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0ef      	beq.n	80039a6 <_fflush_r+0xa>
 80039c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039c8:	07d0      	lsls	r0, r2, #31
 80039ca:	d404      	bmi.n	80039d6 <_fflush_r+0x3a>
 80039cc:	0599      	lsls	r1, r3, #22
 80039ce:	d402      	bmi.n	80039d6 <_fflush_r+0x3a>
 80039d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039d2:	f000 f915 	bl	8003c00 <__retarget_lock_acquire_recursive>
 80039d6:	4628      	mov	r0, r5
 80039d8:	4621      	mov	r1, r4
 80039da:	f7ff ff59 	bl	8003890 <__sflush_r>
 80039de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039e0:	07da      	lsls	r2, r3, #31
 80039e2:	4605      	mov	r5, r0
 80039e4:	d4e0      	bmi.n	80039a8 <_fflush_r+0xc>
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	059b      	lsls	r3, r3, #22
 80039ea:	d4dd      	bmi.n	80039a8 <_fflush_r+0xc>
 80039ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ee:	f000 f908 	bl	8003c02 <__retarget_lock_release_recursive>
 80039f2:	e7d9      	b.n	80039a8 <_fflush_r+0xc>
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <_fflush_r+0x70>)
 80039f6:	429c      	cmp	r4, r3
 80039f8:	d101      	bne.n	80039fe <_fflush_r+0x62>
 80039fa:	68ac      	ldr	r4, [r5, #8]
 80039fc:	e7df      	b.n	80039be <_fflush_r+0x22>
 80039fe:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <_fflush_r+0x74>)
 8003a00:	429c      	cmp	r4, r3
 8003a02:	bf08      	it	eq
 8003a04:	68ec      	ldreq	r4, [r5, #12]
 8003a06:	e7da      	b.n	80039be <_fflush_r+0x22>
 8003a08:	08004058 	.word	0x08004058
 8003a0c:	08004078 	.word	0x08004078
 8003a10:	08004038 	.word	0x08004038

08003a14 <std>:
 8003a14:	2300      	movs	r3, #0
 8003a16:	b510      	push	{r4, lr}
 8003a18:	4604      	mov	r4, r0
 8003a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a22:	6083      	str	r3, [r0, #8]
 8003a24:	8181      	strh	r1, [r0, #12]
 8003a26:	6643      	str	r3, [r0, #100]	; 0x64
 8003a28:	81c2      	strh	r2, [r0, #14]
 8003a2a:	6183      	str	r3, [r0, #24]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	2208      	movs	r2, #8
 8003a30:	305c      	adds	r0, #92	; 0x5c
 8003a32:	f7ff f9d7 	bl	8002de4 <memset>
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <std+0x38>)
 8003a38:	6263      	str	r3, [r4, #36]	; 0x24
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <std+0x3c>)
 8003a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <std+0x40>)
 8003a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <std+0x44>)
 8003a44:	6224      	str	r4, [r4, #32]
 8003a46:	6323      	str	r3, [r4, #48]	; 0x30
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08003d71 	.word	0x08003d71
 8003a50:	08003d93 	.word	0x08003d93
 8003a54:	08003dcb 	.word	0x08003dcb
 8003a58:	08003def 	.word	0x08003def

08003a5c <_cleanup_r>:
 8003a5c:	4901      	ldr	r1, [pc, #4]	; (8003a64 <_cleanup_r+0x8>)
 8003a5e:	f000 b8af 	b.w	8003bc0 <_fwalk_reent>
 8003a62:	bf00      	nop
 8003a64:	0800399d 	.word	0x0800399d

08003a68 <__sfmoreglue>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	2268      	movs	r2, #104	; 0x68
 8003a6c:	1e4d      	subs	r5, r1, #1
 8003a6e:	4355      	muls	r5, r2
 8003a70:	460e      	mov	r6, r1
 8003a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a76:	f7ff fad1 	bl	800301c <_malloc_r>
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	b140      	cbz	r0, 8003a90 <__sfmoreglue+0x28>
 8003a7e:	2100      	movs	r1, #0
 8003a80:	e9c0 1600 	strd	r1, r6, [r0]
 8003a84:	300c      	adds	r0, #12
 8003a86:	60a0      	str	r0, [r4, #8]
 8003a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a8c:	f7ff f9aa 	bl	8002de4 <memset>
 8003a90:	4620      	mov	r0, r4
 8003a92:	bd70      	pop	{r4, r5, r6, pc}

08003a94 <__sfp_lock_acquire>:
 8003a94:	4801      	ldr	r0, [pc, #4]	; (8003a9c <__sfp_lock_acquire+0x8>)
 8003a96:	f000 b8b3 	b.w	8003c00 <__retarget_lock_acquire_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	2000017d 	.word	0x2000017d

08003aa0 <__sfp_lock_release>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	; (8003aa8 <__sfp_lock_release+0x8>)
 8003aa2:	f000 b8ae 	b.w	8003c02 <__retarget_lock_release_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	2000017d 	.word	0x2000017d

08003aac <__sinit_lock_acquire>:
 8003aac:	4801      	ldr	r0, [pc, #4]	; (8003ab4 <__sinit_lock_acquire+0x8>)
 8003aae:	f000 b8a7 	b.w	8003c00 <__retarget_lock_acquire_recursive>
 8003ab2:	bf00      	nop
 8003ab4:	2000017e 	.word	0x2000017e

08003ab8 <__sinit_lock_release>:
 8003ab8:	4801      	ldr	r0, [pc, #4]	; (8003ac0 <__sinit_lock_release+0x8>)
 8003aba:	f000 b8a2 	b.w	8003c02 <__retarget_lock_release_recursive>
 8003abe:	bf00      	nop
 8003ac0:	2000017e 	.word	0x2000017e

08003ac4 <__sinit>:
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	f7ff fff0 	bl	8003aac <__sinit_lock_acquire>
 8003acc:	69a3      	ldr	r3, [r4, #24]
 8003ace:	b11b      	cbz	r3, 8003ad8 <__sinit+0x14>
 8003ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad4:	f7ff bff0 	b.w	8003ab8 <__sinit_lock_release>
 8003ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003adc:	6523      	str	r3, [r4, #80]	; 0x50
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <__sinit+0x68>)
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <__sinit+0x6c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	bf04      	itt	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	61a3      	streq	r3, [r4, #24]
 8003aee:	4620      	mov	r0, r4
 8003af0:	f000 f820 	bl	8003b34 <__sfp>
 8003af4:	6060      	str	r0, [r4, #4]
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 f81c 	bl	8003b34 <__sfp>
 8003afc:	60a0      	str	r0, [r4, #8]
 8003afe:	4620      	mov	r0, r4
 8003b00:	f000 f818 	bl	8003b34 <__sfp>
 8003b04:	2200      	movs	r2, #0
 8003b06:	60e0      	str	r0, [r4, #12]
 8003b08:	2104      	movs	r1, #4
 8003b0a:	6860      	ldr	r0, [r4, #4]
 8003b0c:	f7ff ff82 	bl	8003a14 <std>
 8003b10:	68a0      	ldr	r0, [r4, #8]
 8003b12:	2201      	movs	r2, #1
 8003b14:	2109      	movs	r1, #9
 8003b16:	f7ff ff7d 	bl	8003a14 <std>
 8003b1a:	68e0      	ldr	r0, [r4, #12]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	2112      	movs	r1, #18
 8003b20:	f7ff ff78 	bl	8003a14 <std>
 8003b24:	2301      	movs	r3, #1
 8003b26:	61a3      	str	r3, [r4, #24]
 8003b28:	e7d2      	b.n	8003ad0 <__sinit+0xc>
 8003b2a:	bf00      	nop
 8003b2c:	08003f50 	.word	0x08003f50
 8003b30:	08003a5d 	.word	0x08003a5d

08003b34 <__sfp>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	4607      	mov	r7, r0
 8003b38:	f7ff ffac 	bl	8003a94 <__sfp_lock_acquire>
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <__sfp+0x84>)
 8003b3e:	681e      	ldr	r6, [r3, #0]
 8003b40:	69b3      	ldr	r3, [r6, #24]
 8003b42:	b913      	cbnz	r3, 8003b4a <__sfp+0x16>
 8003b44:	4630      	mov	r0, r6
 8003b46:	f7ff ffbd 	bl	8003ac4 <__sinit>
 8003b4a:	3648      	adds	r6, #72	; 0x48
 8003b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	d503      	bpl.n	8003b5c <__sfp+0x28>
 8003b54:	6833      	ldr	r3, [r6, #0]
 8003b56:	b30b      	cbz	r3, 8003b9c <__sfp+0x68>
 8003b58:	6836      	ldr	r6, [r6, #0]
 8003b5a:	e7f7      	b.n	8003b4c <__sfp+0x18>
 8003b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b60:	b9d5      	cbnz	r5, 8003b98 <__sfp+0x64>
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <__sfp+0x88>)
 8003b64:	60e3      	str	r3, [r4, #12]
 8003b66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8003b6c:	f000 f847 	bl	8003bfe <__retarget_lock_init_recursive>
 8003b70:	f7ff ff96 	bl	8003aa0 <__sfp_lock_release>
 8003b74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b7c:	6025      	str	r5, [r4, #0]
 8003b7e:	61a5      	str	r5, [r4, #24]
 8003b80:	2208      	movs	r2, #8
 8003b82:	4629      	mov	r1, r5
 8003b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b88:	f7ff f92c 	bl	8002de4 <memset>
 8003b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b94:	4620      	mov	r0, r4
 8003b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b98:	3468      	adds	r4, #104	; 0x68
 8003b9a:	e7d9      	b.n	8003b50 <__sfp+0x1c>
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f7ff ff62 	bl	8003a68 <__sfmoreglue>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	6030      	str	r0, [r6, #0]
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d1d5      	bne.n	8003b58 <__sfp+0x24>
 8003bac:	f7ff ff78 	bl	8003aa0 <__sfp_lock_release>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	e7ee      	b.n	8003b94 <__sfp+0x60>
 8003bb6:	bf00      	nop
 8003bb8:	08003f50 	.word	0x08003f50
 8003bbc:	ffff0001 	.word	0xffff0001

08003bc0 <_fwalk_reent>:
 8003bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	4688      	mov	r8, r1
 8003bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bcc:	2700      	movs	r7, #0
 8003bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8003bd6:	d505      	bpl.n	8003be4 <_fwalk_reent+0x24>
 8003bd8:	6824      	ldr	r4, [r4, #0]
 8003bda:	2c00      	cmp	r4, #0
 8003bdc:	d1f7      	bne.n	8003bce <_fwalk_reent+0xe>
 8003bde:	4638      	mov	r0, r7
 8003be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be4:	89ab      	ldrh	r3, [r5, #12]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d907      	bls.n	8003bfa <_fwalk_reent+0x3a>
 8003bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	d003      	beq.n	8003bfa <_fwalk_reent+0x3a>
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	47c0      	blx	r8
 8003bf8:	4307      	orrs	r7, r0
 8003bfa:	3568      	adds	r5, #104	; 0x68
 8003bfc:	e7e9      	b.n	8003bd2 <_fwalk_reent+0x12>

08003bfe <__retarget_lock_init_recursive>:
 8003bfe:	4770      	bx	lr

08003c00 <__retarget_lock_acquire_recursive>:
 8003c00:	4770      	bx	lr

08003c02 <__retarget_lock_release_recursive>:
 8003c02:	4770      	bx	lr

08003c04 <__swhatbuf_r>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	460e      	mov	r6, r1
 8003c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	b096      	sub	sp, #88	; 0x58
 8003c10:	4614      	mov	r4, r2
 8003c12:	461d      	mov	r5, r3
 8003c14:	da08      	bge.n	8003c28 <__swhatbuf_r+0x24>
 8003c16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	602a      	str	r2, [r5, #0]
 8003c1e:	061a      	lsls	r2, r3, #24
 8003c20:	d410      	bmi.n	8003c44 <__swhatbuf_r+0x40>
 8003c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c26:	e00e      	b.n	8003c46 <__swhatbuf_r+0x42>
 8003c28:	466a      	mov	r2, sp
 8003c2a:	f000 f907 	bl	8003e3c <_fstat_r>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	dbf1      	blt.n	8003c16 <__swhatbuf_r+0x12>
 8003c32:	9a01      	ldr	r2, [sp, #4]
 8003c34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c3c:	425a      	negs	r2, r3
 8003c3e:	415a      	adcs	r2, r3
 8003c40:	602a      	str	r2, [r5, #0]
 8003c42:	e7ee      	b.n	8003c22 <__swhatbuf_r+0x1e>
 8003c44:	2340      	movs	r3, #64	; 0x40
 8003c46:	2000      	movs	r0, #0
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	b016      	add	sp, #88	; 0x58
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c50 <__smakebuf_r>:
 8003c50:	898b      	ldrh	r3, [r1, #12]
 8003c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c54:	079d      	lsls	r5, r3, #30
 8003c56:	4606      	mov	r6, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	d507      	bpl.n	8003c6c <__smakebuf_r+0x1c>
 8003c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	6123      	str	r3, [r4, #16]
 8003c64:	2301      	movs	r3, #1
 8003c66:	6163      	str	r3, [r4, #20]
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	ab01      	add	r3, sp, #4
 8003c6e:	466a      	mov	r2, sp
 8003c70:	f7ff ffc8 	bl	8003c04 <__swhatbuf_r>
 8003c74:	9900      	ldr	r1, [sp, #0]
 8003c76:	4605      	mov	r5, r0
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f7ff f9cf 	bl	800301c <_malloc_r>
 8003c7e:	b948      	cbnz	r0, 8003c94 <__smakebuf_r+0x44>
 8003c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c84:	059a      	lsls	r2, r3, #22
 8003c86:	d4ef      	bmi.n	8003c68 <__smakebuf_r+0x18>
 8003c88:	f023 0303 	bic.w	r3, r3, #3
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	e7e3      	b.n	8003c5c <__smakebuf_r+0xc>
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <__smakebuf_r+0x7c>)
 8003c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	6020      	str	r0, [r4, #0]
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	9b00      	ldr	r3, [sp, #0]
 8003ca4:	6163      	str	r3, [r4, #20]
 8003ca6:	9b01      	ldr	r3, [sp, #4]
 8003ca8:	6120      	str	r0, [r4, #16]
 8003caa:	b15b      	cbz	r3, 8003cc4 <__smakebuf_r+0x74>
 8003cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f000 f8d5 	bl	8003e60 <_isatty_r>
 8003cb6:	b128      	cbz	r0, 8003cc4 <__smakebuf_r+0x74>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	81a3      	strh	r3, [r4, #12]
 8003cc4:	89a0      	ldrh	r0, [r4, #12]
 8003cc6:	4305      	orrs	r5, r0
 8003cc8:	81a5      	strh	r5, [r4, #12]
 8003cca:	e7cd      	b.n	8003c68 <__smakebuf_r+0x18>
 8003ccc:	08003a5d 	.word	0x08003a5d

08003cd0 <__malloc_lock>:
 8003cd0:	4801      	ldr	r0, [pc, #4]	; (8003cd8 <__malloc_lock+0x8>)
 8003cd2:	f7ff bf95 	b.w	8003c00 <__retarget_lock_acquire_recursive>
 8003cd6:	bf00      	nop
 8003cd8:	2000017c 	.word	0x2000017c

08003cdc <__malloc_unlock>:
 8003cdc:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <__malloc_unlock+0x8>)
 8003cde:	f7ff bf90 	b.w	8003c02 <__retarget_lock_release_recursive>
 8003ce2:	bf00      	nop
 8003ce4:	2000017c 	.word	0x2000017c

08003ce8 <_raise_r>:
 8003ce8:	291f      	cmp	r1, #31
 8003cea:	b538      	push	{r3, r4, r5, lr}
 8003cec:	4604      	mov	r4, r0
 8003cee:	460d      	mov	r5, r1
 8003cf0:	d904      	bls.n	8003cfc <_raise_r+0x14>
 8003cf2:	2316      	movs	r3, #22
 8003cf4:	6003      	str	r3, [r0, #0]
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003cfe:	b112      	cbz	r2, 8003d06 <_raise_r+0x1e>
 8003d00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d04:	b94b      	cbnz	r3, 8003d1a <_raise_r+0x32>
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 f830 	bl	8003d6c <_getpid_r>
 8003d0c:	462a      	mov	r2, r5
 8003d0e:	4601      	mov	r1, r0
 8003d10:	4620      	mov	r0, r4
 8003d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d16:	f000 b817 	b.w	8003d48 <_kill_r>
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d00a      	beq.n	8003d34 <_raise_r+0x4c>
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	d103      	bne.n	8003d2a <_raise_r+0x42>
 8003d22:	2316      	movs	r3, #22
 8003d24:	6003      	str	r3, [r0, #0]
 8003d26:	2001      	movs	r0, #1
 8003d28:	e7e7      	b.n	8003cfa <_raise_r+0x12>
 8003d2a:	2400      	movs	r4, #0
 8003d2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d30:	4628      	mov	r0, r5
 8003d32:	4798      	blx	r3
 8003d34:	2000      	movs	r0, #0
 8003d36:	e7e0      	b.n	8003cfa <_raise_r+0x12>

08003d38 <raise>:
 8003d38:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <raise+0xc>)
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	f7ff bfd3 	b.w	8003ce8 <_raise_r>
 8003d42:	bf00      	nop
 8003d44:	2000000c 	.word	0x2000000c

08003d48 <_kill_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4d07      	ldr	r5, [pc, #28]	; (8003d68 <_kill_r+0x20>)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	4604      	mov	r4, r0
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	f7fc fcf3 	bl	8000740 <_kill>
 8003d5a:	1c43      	adds	r3, r0, #1
 8003d5c:	d102      	bne.n	8003d64 <_kill_r+0x1c>
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	b103      	cbz	r3, 8003d64 <_kill_r+0x1c>
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
 8003d66:	bf00      	nop
 8003d68:	20000180 	.word	0x20000180

08003d6c <_getpid_r>:
 8003d6c:	f7fc bce0 	b.w	8000730 <_getpid>

08003d70 <__sread>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	460c      	mov	r4, r1
 8003d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d78:	f000 f894 	bl	8003ea4 <_read_r>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	bfab      	itete	ge
 8003d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d82:	89a3      	ldrhlt	r3, [r4, #12]
 8003d84:	181b      	addge	r3, r3, r0
 8003d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d8a:	bfac      	ite	ge
 8003d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d8e:	81a3      	strhlt	r3, [r4, #12]
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <__swrite>:
 8003d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d96:	461f      	mov	r7, r3
 8003d98:	898b      	ldrh	r3, [r1, #12]
 8003d9a:	05db      	lsls	r3, r3, #23
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4616      	mov	r6, r2
 8003da2:	d505      	bpl.n	8003db0 <__swrite+0x1e>
 8003da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da8:	2302      	movs	r3, #2
 8003daa:	2200      	movs	r2, #0
 8003dac:	f000 f868 	bl	8003e80 <_lseek_r>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	4632      	mov	r2, r6
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc6:	f000 b817 	b.w	8003df8 <_write_r>

08003dca <__sseek>:
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	460c      	mov	r4, r1
 8003dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd2:	f000 f855 	bl	8003e80 <_lseek_r>
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	bf15      	itete	ne
 8003ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003de6:	81a3      	strheq	r3, [r4, #12]
 8003de8:	bf18      	it	ne
 8003dea:	81a3      	strhne	r3, [r4, #12]
 8003dec:	bd10      	pop	{r4, pc}

08003dee <__sclose>:
 8003dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df2:	f000 b813 	b.w	8003e1c <_close_r>
	...

08003df8 <_write_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4d07      	ldr	r5, [pc, #28]	; (8003e18 <_write_r+0x20>)
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	4608      	mov	r0, r1
 8003e00:	4611      	mov	r1, r2
 8003e02:	2200      	movs	r2, #0
 8003e04:	602a      	str	r2, [r5, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7fc fcd1 	bl	80007ae <_write>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_write_r+0x1e>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_write_r+0x1e>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	20000180 	.word	0x20000180

08003e1c <_close_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4d06      	ldr	r5, [pc, #24]	; (8003e38 <_close_r+0x1c>)
 8003e20:	2300      	movs	r3, #0
 8003e22:	4604      	mov	r4, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	602b      	str	r3, [r5, #0]
 8003e28:	f7fc fcdd 	bl	80007e6 <_close>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d102      	bne.n	8003e36 <_close_r+0x1a>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	b103      	cbz	r3, 8003e36 <_close_r+0x1a>
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	20000180 	.word	0x20000180

08003e3c <_fstat_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4d07      	ldr	r5, [pc, #28]	; (8003e5c <_fstat_r+0x20>)
 8003e40:	2300      	movs	r3, #0
 8003e42:	4604      	mov	r4, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	f7fc fcd8 	bl	80007fe <_fstat>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d102      	bne.n	8003e58 <_fstat_r+0x1c>
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	b103      	cbz	r3, 8003e58 <_fstat_r+0x1c>
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000180 	.word	0x20000180

08003e60 <_isatty_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d06      	ldr	r5, [pc, #24]	; (8003e7c <_isatty_r+0x1c>)
 8003e64:	2300      	movs	r3, #0
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	f7fc fcd7 	bl	800081e <_isatty>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_isatty_r+0x1a>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_isatty_r+0x1a>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20000180 	.word	0x20000180

08003e80 <_lseek_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d07      	ldr	r5, [pc, #28]	; (8003ea0 <_lseek_r+0x20>)
 8003e84:	4604      	mov	r4, r0
 8003e86:	4608      	mov	r0, r1
 8003e88:	4611      	mov	r1, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fc fcd0 	bl	8000834 <_lseek>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_lseek_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_lseek_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000180 	.word	0x20000180

08003ea4 <_read_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d07      	ldr	r5, [pc, #28]	; (8003ec4 <_read_r+0x20>)
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	4608      	mov	r0, r1
 8003eac:	4611      	mov	r1, r2
 8003eae:	2200      	movs	r2, #0
 8003eb0:	602a      	str	r2, [r5, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f7fc fc5e 	bl	8000774 <_read>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_read_r+0x1e>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_read_r+0x1e>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000180 	.word	0x20000180

08003ec8 <_init>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr

08003ed4 <_fini>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr

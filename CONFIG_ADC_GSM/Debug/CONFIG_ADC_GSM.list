
CONFIG_ADC_GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000819c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087dc  080087dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080087dc  080087dc  000187dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087e4  080087e4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080087ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000074  08008860  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08008860  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183b7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f2  00000000  00000000  0003845b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002464d  00000000  00000000  0003def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e79  00000000  00000000  00062545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d50fd  00000000  00000000  0007a3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f4bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  0014f50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008314 	.word	0x08008314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008314 	.word	0x08008314

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b974 	b.w	8000918 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9d08      	ldr	r5, [sp, #32]
 800064e:	4604      	mov	r4, r0
 8000650:	468e      	mov	lr, r1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d14d      	bne.n	80006f2 <__udivmoddi4+0xaa>
 8000656:	428a      	cmp	r2, r1
 8000658:	4694      	mov	ip, r2
 800065a:	d969      	bls.n	8000730 <__udivmoddi4+0xe8>
 800065c:	fab2 f282 	clz	r2, r2
 8000660:	b152      	cbz	r2, 8000678 <__udivmoddi4+0x30>
 8000662:	fa01 f302 	lsl.w	r3, r1, r2
 8000666:	f1c2 0120 	rsb	r1, r2, #32
 800066a:	fa20 f101 	lsr.w	r1, r0, r1
 800066e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000672:	ea41 0e03 	orr.w	lr, r1, r3
 8000676:	4094      	lsls	r4, r2
 8000678:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800067c:	0c21      	lsrs	r1, r4, #16
 800067e:	fbbe f6f8 	udiv	r6, lr, r8
 8000682:	fa1f f78c 	uxth.w	r7, ip
 8000686:	fb08 e316 	mls	r3, r8, r6, lr
 800068a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800068e:	fb06 f107 	mul.w	r1, r6, r7
 8000692:	4299      	cmp	r1, r3
 8000694:	d90a      	bls.n	80006ac <__udivmoddi4+0x64>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f106 30ff 	add.w	r0, r6, #4294967295
 800069e:	f080 811f 	bcs.w	80008e0 <__udivmoddi4+0x298>
 80006a2:	4299      	cmp	r1, r3
 80006a4:	f240 811c 	bls.w	80008e0 <__udivmoddi4+0x298>
 80006a8:	3e02      	subs	r6, #2
 80006aa:	4463      	add	r3, ip
 80006ac:	1a5b      	subs	r3, r3, r1
 80006ae:	b2a4      	uxth	r4, r4
 80006b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b4:	fb08 3310 	mls	r3, r8, r0, r3
 80006b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006bc:	fb00 f707 	mul.w	r7, r0, r7
 80006c0:	42a7      	cmp	r7, r4
 80006c2:	d90a      	bls.n	80006da <__udivmoddi4+0x92>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006cc:	f080 810a 	bcs.w	80008e4 <__udivmoddi4+0x29c>
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	f240 8107 	bls.w	80008e4 <__udivmoddi4+0x29c>
 80006d6:	4464      	add	r4, ip
 80006d8:	3802      	subs	r0, #2
 80006da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006de:	1be4      	subs	r4, r4, r7
 80006e0:	2600      	movs	r6, #0
 80006e2:	b11d      	cbz	r5, 80006ec <__udivmoddi4+0xa4>
 80006e4:	40d4      	lsrs	r4, r2
 80006e6:	2300      	movs	r3, #0
 80006e8:	e9c5 4300 	strd	r4, r3, [r5]
 80006ec:	4631      	mov	r1, r6
 80006ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d909      	bls.n	800070a <__udivmoddi4+0xc2>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	f000 80ef 	beq.w	80008da <__udivmoddi4+0x292>
 80006fc:	2600      	movs	r6, #0
 80006fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000702:	4630      	mov	r0, r6
 8000704:	4631      	mov	r1, r6
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	fab3 f683 	clz	r6, r3
 800070e:	2e00      	cmp	r6, #0
 8000710:	d14a      	bne.n	80007a8 <__udivmoddi4+0x160>
 8000712:	428b      	cmp	r3, r1
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xd4>
 8000716:	4282      	cmp	r2, r0
 8000718:	f200 80f9 	bhi.w	800090e <__udivmoddi4+0x2c6>
 800071c:	1a84      	subs	r4, r0, r2
 800071e:	eb61 0303 	sbc.w	r3, r1, r3
 8000722:	2001      	movs	r0, #1
 8000724:	469e      	mov	lr, r3
 8000726:	2d00      	cmp	r5, #0
 8000728:	d0e0      	beq.n	80006ec <__udivmoddi4+0xa4>
 800072a:	e9c5 4e00 	strd	r4, lr, [r5]
 800072e:	e7dd      	b.n	80006ec <__udivmoddi4+0xa4>
 8000730:	b902      	cbnz	r2, 8000734 <__udivmoddi4+0xec>
 8000732:	deff      	udf	#255	; 0xff
 8000734:	fab2 f282 	clz	r2, r2
 8000738:	2a00      	cmp	r2, #0
 800073a:	f040 8092 	bne.w	8000862 <__udivmoddi4+0x21a>
 800073e:	eba1 010c 	sub.w	r1, r1, ip
 8000742:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000746:	fa1f fe8c 	uxth.w	lr, ip
 800074a:	2601      	movs	r6, #1
 800074c:	0c20      	lsrs	r0, r4, #16
 800074e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000752:	fb07 1113 	mls	r1, r7, r3, r1
 8000756:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800075a:	fb0e f003 	mul.w	r0, lr, r3
 800075e:	4288      	cmp	r0, r1
 8000760:	d908      	bls.n	8000774 <__udivmoddi4+0x12c>
 8000762:	eb1c 0101 	adds.w	r1, ip, r1
 8000766:	f103 38ff 	add.w	r8, r3, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x12a>
 800076c:	4288      	cmp	r0, r1
 800076e:	f200 80cb 	bhi.w	8000908 <__udivmoddi4+0x2c0>
 8000772:	4643      	mov	r3, r8
 8000774:	1a09      	subs	r1, r1, r0
 8000776:	b2a4      	uxth	r4, r4
 8000778:	fbb1 f0f7 	udiv	r0, r1, r7
 800077c:	fb07 1110 	mls	r1, r7, r0, r1
 8000780:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000784:	fb0e fe00 	mul.w	lr, lr, r0
 8000788:	45a6      	cmp	lr, r4
 800078a:	d908      	bls.n	800079e <__udivmoddi4+0x156>
 800078c:	eb1c 0404 	adds.w	r4, ip, r4
 8000790:	f100 31ff 	add.w	r1, r0, #4294967295
 8000794:	d202      	bcs.n	800079c <__udivmoddi4+0x154>
 8000796:	45a6      	cmp	lr, r4
 8000798:	f200 80bb 	bhi.w	8000912 <__udivmoddi4+0x2ca>
 800079c:	4608      	mov	r0, r1
 800079e:	eba4 040e 	sub.w	r4, r4, lr
 80007a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007a6:	e79c      	b.n	80006e2 <__udivmoddi4+0x9a>
 80007a8:	f1c6 0720 	rsb	r7, r6, #32
 80007ac:	40b3      	lsls	r3, r6
 80007ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80007b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007b6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ba:	fa01 f306 	lsl.w	r3, r1, r6
 80007be:	431c      	orrs	r4, r3
 80007c0:	40f9      	lsrs	r1, r7
 80007c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007c6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ce:	0c20      	lsrs	r0, r4, #16
 80007d0:	fa1f fe8c 	uxth.w	lr, ip
 80007d4:	fb09 1118 	mls	r1, r9, r8, r1
 80007d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007dc:	fb08 f00e 	mul.w	r0, r8, lr
 80007e0:	4288      	cmp	r0, r1
 80007e2:	fa02 f206 	lsl.w	r2, r2, r6
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b8>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80007f0:	f080 8088 	bcs.w	8000904 <__udivmoddi4+0x2bc>
 80007f4:	4288      	cmp	r0, r1
 80007f6:	f240 8085 	bls.w	8000904 <__udivmoddi4+0x2bc>
 80007fa:	f1a8 0802 	sub.w	r8, r8, #2
 80007fe:	4461      	add	r1, ip
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	b2a4      	uxth	r4, r4
 8000804:	fbb1 f0f9 	udiv	r0, r1, r9
 8000808:	fb09 1110 	mls	r1, r9, r0, r1
 800080c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000810:	fb00 fe0e 	mul.w	lr, r0, lr
 8000814:	458e      	cmp	lr, r1
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1e2>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000820:	d26c      	bcs.n	80008fc <__udivmoddi4+0x2b4>
 8000822:	458e      	cmp	lr, r1
 8000824:	d96a      	bls.n	80008fc <__udivmoddi4+0x2b4>
 8000826:	3802      	subs	r0, #2
 8000828:	4461      	add	r1, ip
 800082a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800082e:	fba0 9402 	umull	r9, r4, r0, r2
 8000832:	eba1 010e 	sub.w	r1, r1, lr
 8000836:	42a1      	cmp	r1, r4
 8000838:	46c8      	mov	r8, r9
 800083a:	46a6      	mov	lr, r4
 800083c:	d356      	bcc.n	80008ec <__udivmoddi4+0x2a4>
 800083e:	d053      	beq.n	80008e8 <__udivmoddi4+0x2a0>
 8000840:	b15d      	cbz	r5, 800085a <__udivmoddi4+0x212>
 8000842:	ebb3 0208 	subs.w	r2, r3, r8
 8000846:	eb61 010e 	sbc.w	r1, r1, lr
 800084a:	fa01 f707 	lsl.w	r7, r1, r7
 800084e:	fa22 f306 	lsr.w	r3, r2, r6
 8000852:	40f1      	lsrs	r1, r6
 8000854:	431f      	orrs	r7, r3
 8000856:	e9c5 7100 	strd	r7, r1, [r5]
 800085a:	2600      	movs	r6, #0
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	f1c2 0320 	rsb	r3, r2, #32
 8000866:	40d8      	lsrs	r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	fa21 f303 	lsr.w	r3, r1, r3
 8000870:	4091      	lsls	r1, r2
 8000872:	4301      	orrs	r1, r0
 8000874:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000878:	fa1f fe8c 	uxth.w	lr, ip
 800087c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000880:	fb07 3610 	mls	r6, r7, r0, r3
 8000884:	0c0b      	lsrs	r3, r1, #16
 8000886:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800088a:	fb00 f60e 	mul.w	r6, r0, lr
 800088e:	429e      	cmp	r6, r3
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d908      	bls.n	80008a8 <__udivmoddi4+0x260>
 8000896:	eb1c 0303 	adds.w	r3, ip, r3
 800089a:	f100 38ff 	add.w	r8, r0, #4294967295
 800089e:	d22f      	bcs.n	8000900 <__udivmoddi4+0x2b8>
 80008a0:	429e      	cmp	r6, r3
 80008a2:	d92d      	bls.n	8000900 <__udivmoddi4+0x2b8>
 80008a4:	3802      	subs	r0, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1b9b      	subs	r3, r3, r6
 80008aa:	b289      	uxth	r1, r1
 80008ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80008b0:	fb07 3316 	mls	r3, r7, r6, r3
 80008b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b8:	fb06 f30e 	mul.w	r3, r6, lr
 80008bc:	428b      	cmp	r3, r1
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x28a>
 80008c0:	eb1c 0101 	adds.w	r1, ip, r1
 80008c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008c8:	d216      	bcs.n	80008f8 <__udivmoddi4+0x2b0>
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d914      	bls.n	80008f8 <__udivmoddi4+0x2b0>
 80008ce:	3e02      	subs	r6, #2
 80008d0:	4461      	add	r1, ip
 80008d2:	1ac9      	subs	r1, r1, r3
 80008d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008d8:	e738      	b.n	800074c <__udivmoddi4+0x104>
 80008da:	462e      	mov	r6, r5
 80008dc:	4628      	mov	r0, r5
 80008de:	e705      	b.n	80006ec <__udivmoddi4+0xa4>
 80008e0:	4606      	mov	r6, r0
 80008e2:	e6e3      	b.n	80006ac <__udivmoddi4+0x64>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6f8      	b.n	80006da <__udivmoddi4+0x92>
 80008e8:	454b      	cmp	r3, r9
 80008ea:	d2a9      	bcs.n	8000840 <__udivmoddi4+0x1f8>
 80008ec:	ebb9 0802 	subs.w	r8, r9, r2
 80008f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7a3      	b.n	8000840 <__udivmoddi4+0x1f8>
 80008f8:	4646      	mov	r6, r8
 80008fa:	e7ea      	b.n	80008d2 <__udivmoddi4+0x28a>
 80008fc:	4620      	mov	r0, r4
 80008fe:	e794      	b.n	800082a <__udivmoddi4+0x1e2>
 8000900:	4640      	mov	r0, r8
 8000902:	e7d1      	b.n	80008a8 <__udivmoddi4+0x260>
 8000904:	46d0      	mov	r8, sl
 8000906:	e77b      	b.n	8000800 <__udivmoddi4+0x1b8>
 8000908:	3b02      	subs	r3, #2
 800090a:	4461      	add	r1, ip
 800090c:	e732      	b.n	8000774 <__udivmoddi4+0x12c>
 800090e:	4630      	mov	r0, r6
 8000910:	e709      	b.n	8000726 <__udivmoddi4+0xde>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	e742      	b.n	800079e <__udivmoddi4+0x156>

08000918 <__aeabi_idiv0>:
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <DataToGsm>:
int count=0;

extern UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af06      	add	r7, sp, #24
 8000922:	6078      	str	r0, [r7, #4]
	uint8_t sec=d->sec;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	73fb      	strb	r3, [r7, #15]
	uint8_t ST=d->scan_time;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	7f1b      	ldrb	r3, [r3, #28]
 800092e:	73bb      	strb	r3, [r7, #14]
	//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf(buffer_Time,"%02d:%02d:%02d",d->hr,d->min,d->sec);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	785b      	ldrb	r3, [r3, #1]
 800093a:	4619      	mov	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	460b      	mov	r3, r1
 8000944:	4951      	ldr	r1, [pc, #324]	; (8000a8c <DataToGsm+0x170>)
 8000946:	4852      	ldr	r0, [pc, #328]	; (8000a90 <DataToGsm+0x174>)
 8000948:	f006 fb96 	bl	8007078 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f103 0118 	add.w	r1, r3, #24
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	2204      	movs	r2, #4
 8000958:	484e      	ldr	r0, [pc, #312]	; (8000a94 <DataToGsm+0x178>)
 800095a:	f004 fd81 	bl	8005460 <HAL_UART_Transmit>
	sprintf(CH1,"f",d->adc1_value);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fe00 	bl	8000568 <__aeabi_f2d>
 8000968:	4602      	mov	r2, r0
 800096a:	460b      	mov	r3, r1
 800096c:	494a      	ldr	r1, [pc, #296]	; (8000a98 <DataToGsm+0x17c>)
 800096e:	484b      	ldr	r0, [pc, #300]	; (8000a9c <DataToGsm+0x180>)
 8000970:	f006 fb82 	bl	8007078 <siprintf>
	sprintf(CH2,"f",d->adc2_value);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fdf5 	bl	8000568 <__aeabi_f2d>
 800097e:	4602      	mov	r2, r0
 8000980:	460b      	mov	r3, r1
 8000982:	4945      	ldr	r1, [pc, #276]	; (8000a98 <DataToGsm+0x17c>)
 8000984:	4846      	ldr	r0, [pc, #280]	; (8000aa0 <DataToGsm+0x184>)
 8000986:	f006 fb77 	bl	8007078 <siprintf>
	sprintf(CH3,"f",d->adc3_value);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdea 	bl	8000568 <__aeabi_f2d>
 8000994:	4602      	mov	r2, r0
 8000996:	460b      	mov	r3, r1
 8000998:	493f      	ldr	r1, [pc, #252]	; (8000a98 <DataToGsm+0x17c>)
 800099a:	4842      	ldr	r0, [pc, #264]	; (8000aa4 <DataToGsm+0x188>)
 800099c:	f006 fb6c 	bl	8007078 <siprintf>
	sprintf(CH4,"f",d->adc4_value);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fddf 	bl	8000568 <__aeabi_f2d>
 80009aa:	4602      	mov	r2, r0
 80009ac:	460b      	mov	r3, r1
 80009ae:	493a      	ldr	r1, [pc, #232]	; (8000a98 <DataToGsm+0x17c>)
 80009b0:	483d      	ldr	r0, [pc, #244]	; (8000aa8 <DataToGsm+0x18c>)
 80009b2:	f006 fb61 	bl	8007078 <siprintf>

	if(d->GPIO[0]==1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d107      	bne.n	80009ce <DataToGsm+0xb2>
	{
		strcpy(d->Status1, "High");
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	331d      	adds	r3, #29
 80009c2:	4a3a      	ldr	r2, [pc, #232]	; (8000aac <DataToGsm+0x190>)
 80009c4:	6810      	ldr	r0, [r2, #0]
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	7912      	ldrb	r2, [r2, #4]
 80009ca:	711a      	strb	r2, [r3, #4]
 80009cc:	e004      	b.n	80009d8 <DataToGsm+0xbc>
	}
	else
	{
		strcpy(d->Status1, "Low");
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	331d      	adds	r3, #29
 80009d2:	4a37      	ldr	r2, [pc, #220]	; (8000ab0 <DataToGsm+0x194>)
 80009d4:	6810      	ldr	r0, [r2, #0]
 80009d6:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7e5b      	ldrb	r3, [r3, #25]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d107      	bne.n	80009f0 <DataToGsm+0xd4>
	{
		strcpy(d->Status2, "High");
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3327      	adds	r3, #39	; 0x27
 80009e4:	4a31      	ldr	r2, [pc, #196]	; (8000aac <DataToGsm+0x190>)
 80009e6:	6810      	ldr	r0, [r2, #0]
 80009e8:	6018      	str	r0, [r3, #0]
 80009ea:	7912      	ldrb	r2, [r2, #4]
 80009ec:	711a      	strb	r2, [r3, #4]
 80009ee:	e004      	b.n	80009fa <DataToGsm+0xde>
	}
	else
	{
		strcpy(d->Status2, "Low");
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3327      	adds	r3, #39	; 0x27
 80009f4:	4a2e      	ldr	r2, [pc, #184]	; (8000ab0 <DataToGsm+0x194>)
 80009f6:	6810      	ldr	r0, [r2, #0]
 80009f8:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7e9b      	ldrb	r3, [r3, #26]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d107      	bne.n	8000a12 <DataToGsm+0xf6>
	{
		strcpy(d->Status3, "High");
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3331      	adds	r3, #49	; 0x31
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <DataToGsm+0x190>)
 8000a08:	6810      	ldr	r0, [r2, #0]
 8000a0a:	6018      	str	r0, [r3, #0]
 8000a0c:	7912      	ldrb	r2, [r2, #4]
 8000a0e:	711a      	strb	r2, [r3, #4]
 8000a10:	e004      	b.n	8000a1c <DataToGsm+0x100>
	}
	else
	{
		strcpy(d->Status3, "Low");
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3331      	adds	r3, #49	; 0x31
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <DataToGsm+0x194>)
 8000a18:	6810      	ldr	r0, [r2, #0]
 8000a1a:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7edb      	ldrb	r3, [r3, #27]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d107      	bne.n	8000a34 <DataToGsm+0x118>
	{
		strcpy(d->Status4, "High");
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	333b      	adds	r3, #59	; 0x3b
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <DataToGsm+0x190>)
 8000a2a:	6810      	ldr	r0, [r2, #0]
 8000a2c:	6018      	str	r0, [r3, #0]
 8000a2e:	7912      	ldrb	r2, [r2, #4]
 8000a30:	711a      	strb	r2, [r3, #4]
 8000a32:	e004      	b.n	8000a3e <DataToGsm+0x122>
	}
	else
	{
		strcpy(d->Status4, "Low");
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	333b      	adds	r3, #59	; 0x3b
 8000a38:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <DataToGsm+0x194>)
 8000a3a:	6810      	ldr	r0, [r2, #0]
 8000a3c:	6018      	str	r0, [r3, #0]





	if(sec==59)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	2b3b      	cmp	r3, #59	; 0x3b
 8000a42:	d104      	bne.n	8000a4e <DataToGsm+0x132>
	{
		count=count+1;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <DataToGsm+0x198>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <DataToGsm+0x198>)
 8000a4c:	6013      	str	r3, [r2, #0]

	}


	if(count==1)
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <DataToGsm+0x198>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d116      	bne.n	8000a84 <DataToGsm+0x168>
	{
		DataToCloud(buffer_Time,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	331d      	adds	r3, #29
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	3227      	adds	r2, #39	; 0x27
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	3131      	adds	r1, #49	; 0x31
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	303b      	adds	r0, #59	; 0x3b
 8000a66:	9004      	str	r0, [sp, #16]
 8000a68:	9103      	str	r1, [sp, #12]
 8000a6a:	9202      	str	r2, [sp, #8]
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <DataToGsm+0x18c>)
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <DataToGsm+0x188>)
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <DataToGsm+0x184>)
 8000a76:	4909      	ldr	r1, [pc, #36]	; (8000a9c <DataToGsm+0x180>)
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <DataToGsm+0x174>)
 8000a7a:	f000 fb09 	bl	8001090 <DataToCloud>
		count=0;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <DataToGsm+0x198>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
	}


}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0800832c 	.word	0x0800832c
 8000a90:	20000090 	.word	0x20000090
 8000a94:	2000022c 	.word	0x2000022c
 8000a98:	0800833c 	.word	0x0800833c
 8000a9c:	200000a0 	.word	0x200000a0
 8000aa0:	200000ac 	.word	0x200000ac
 8000aa4:	200000b8 	.word	0x200000b8
 8000aa8:	200000c4 	.word	0x200000c4
 8000aac:	08008340 	.word	0x08008340
 8000ab0:	08008348 	.word	0x08008348
 8000ab4:	200000d0 	.word	0x200000d0

08000ab8 <Configurator>:
char config[4]={1,1,0,0};
uint8_t s[4];
//extern struct data d;

 void Configurator()
 {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	 data_receive();
 8000abc:	f000 fcd6 	bl	800146c <data_receive>

		  if (tx_data[0] != '\0')
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <Configurator+0x48>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <Configurator+0x18>
		   {
		     flag = 1; // Set flag to indicate data has been received
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <Configurator+0x4c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	e002      	b.n	8000ad6 <Configurator+0x1e>
		   }
		   else
		   {
			   flag=0;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <Configurator+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
		   }

           if (flag)
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <Configurator+0x4c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d005      	beq.n	8000aea <Configurator+0x32>
           {
	        extract_data();
 8000ade:	f000 f8dd 	bl	8000c9c <extract_data>
	        pin_config();
 8000ae2:	f000 f913 	bl	8000d0c <pin_config>
	        clear_buffer();
 8000ae6:	f000 f811 	bl	8000b0c <clear_buffer>
           }
           reset_output(&d);
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <Configurator+0x50>)
 8000aec:	f000 f85a 	bl	8000ba4 <reset_output>
           set_output(&d);
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <Configurator+0x50>)
 8000af2:	f000 f817 	bl	8000b24 <set_output>
//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

           read_pinstatus(&d);
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <Configurator+0x50>)
 8000af8:	f000 f894 	bl	8000c24 <read_pinstatus>
            //status_transmit();
            //DataTOgsm(d);


 }
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000d8 	.word	0x200000d8
 8000b04:	20000188 	.word	0x20000188
 8000b08:	2000037c 	.word	0x2000037c

08000b0c <clear_buffer>:

 void clear_buffer()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 8000b10:	220f      	movs	r2, #15
 8000b12:	2100      	movs	r1, #0
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <clear_buffer+0x14>)
 8000b16:	f006 f983 	bl	8006e20 <memset>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000d8 	.word	0x200000d8

08000b24 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

 void set_output(struct data *d)
 {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	 if(config[0] == 0)
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <set_output+0x78>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d108      	bne.n	8000b46 <set_output+0x22>
	{
		 d->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <set_output+0x7c>)
 8000b3a:	f000 fcbb 	bl	80014b4 <write_gpio>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	761a      	strb	r2, [r3, #24]
	}

	if(config[1] == 0)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <set_output+0x78>)
 8000b48:	785b      	ldrb	r3, [r3, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d108      	bne.n	8000b60 <set_output+0x3c>
	{
		d->GPIO[1] = write_gpio(GPIOB,GPIO_PIN_1, PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2102      	movs	r1, #2
 8000b52:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <set_output+0x7c>)
 8000b54:	f000 fcae 	bl	80014b4 <write_gpio>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	765a      	strb	r2, [r3, #25]
	}

	if(config[2] == 0)
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <set_output+0x78>)
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d108      	bne.n	8000b7a <set_output+0x56>
	{
		d->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <set_output+0x7c>)
 8000b6e:	f000 fca1 	bl	80014b4 <write_gpio>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	769a      	strb	r2, [r3, #26]
	}

	if(config[3] == 0)
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <set_output+0x78>)
 8000b7c:	78db      	ldrb	r3, [r3, #3]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d108      	bne.n	8000b94 <set_output+0x70>
	{
		d->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	2120      	movs	r1, #32
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <set_output+0x7c>)
 8000b88:	f000 fc94 	bl	80014b4 <write_gpio>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	76da      	strb	r2, [r3, #27]
	}
//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
 }
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <reset_output>:

 void reset_output(struct data *d1)
  {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 	 if(config[0] == 0)
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <reset_output+0x78>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d108      	bne.n	8000bc6 <reset_output+0x22>
 	{
 		d1->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4819      	ldr	r0, [pc, #100]	; (8000c20 <reset_output+0x7c>)
 8000bba:	f000 fc7b 	bl	80014b4 <write_gpio>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	761a      	strb	r2, [r3, #24]
 	}

 	if(config[1] == 0)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <reset_output+0x78>)
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d108      	bne.n	8000be0 <reset_output+0x3c>
 	{
 		d1->GPIO[1]=write_gpio(GPIOB,GPIO_PIN_1, PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <reset_output+0x7c>)
 8000bd4:	f000 fc6e 	bl	80014b4 <write_gpio>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	765a      	strb	r2, [r3, #25]
 	}

 	if(config[2] == 0)
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <reset_output+0x78>)
 8000be2:	789b      	ldrb	r3, [r3, #2]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <reset_output+0x56>
 	{
 		d1->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <reset_output+0x7c>)
 8000bee:	f000 fc61 	bl	80014b4 <write_gpio>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	769a      	strb	r2, [r3, #26]
 	}

 	if(config[3] == 0)
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <reset_output+0x78>)
 8000bfc:	78db      	ldrb	r3, [r3, #3]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d108      	bne.n	8000c14 <reset_output+0x70>
 	{
 		d1->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2120      	movs	r1, #32
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <reset_output+0x7c>)
 8000c08:	f000 fc54 	bl	80014b4 <write_gpio>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	76da      	strb	r2, [r3, #27]
 	}
  }
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	48000400 	.word	0x48000400

08000c24 <read_pinstatus>:

 void read_pinstatus(struct data *d2)
 {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	 if(config[0]==1)
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <read_pinstatus+0x70>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d107      	bne.n	8000c44 <read_pinstatus+0x20>
	 {
	     d2->GPIO[0]=read_gpio( GPIOB,GPIO_PIN_0);
 8000c34:	2101      	movs	r1, #1
 8000c36:	4818      	ldr	r0, [pc, #96]	; (8000c98 <read_pinstatus+0x74>)
 8000c38:	f000 fc2c 	bl	8001494 <read_gpio>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	761a      	strb	r2, [r3, #24]
	 }
	 if(config[1]==1)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <read_pinstatus+0x70>)
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d107      	bne.n	8000c5c <read_pinstatus+0x38>
	 {
		 d2->GPIO[1]=read_gpio( GPIOB,GPIO_PIN_1);
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <read_pinstatus+0x74>)
 8000c50:	f000 fc20 	bl	8001494 <read_gpio>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	765a      	strb	r2, [r3, #25]
	 }
	 if(config[2]==1)
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <read_pinstatus+0x70>)
 8000c5e:	789b      	ldrb	r3, [r3, #2]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d107      	bne.n	8000c74 <read_pinstatus+0x50>
	 {
	    d2->GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 8000c64:	2110      	movs	r1, #16
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <read_pinstatus+0x74>)
 8000c68:	f000 fc14 	bl	8001494 <read_gpio>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	769a      	strb	r2, [r3, #26]
	 }
	if(config[3]==1)
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <read_pinstatus+0x70>)
 8000c76:	78db      	ldrb	r3, [r3, #3]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d107      	bne.n	8000c8c <read_pinstatus+0x68>
	{
	   d2->GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <read_pinstatus+0x74>)
 8000c80:	f000 fc08 	bl	8001494 <read_gpio>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	76da      	strb	r2, [r3, #27]
    }
//	 return d->GPIO;
 }
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000000 	.word	0x20000000
 8000c98:	48000400 	.word	0x48000400

08000c9c <extract_data>:


void extract_data()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 8000ca0:	4915      	ldr	r1, [pc, #84]	; (8000cf8 <extract_data+0x5c>)
 8000ca2:	4816      	ldr	r0, [pc, #88]	; (8000cfc <extract_data+0x60>)
 8000ca4:	f006 fa1c 	bl	80070e0 <strtok>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <extract_data+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <extract_data+0x64>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d010      	beq.n	8000cd8 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <extract_data+0x64>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2209      	movs	r2, #9
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4811      	ldr	r0, [pc, #68]	; (8000d04 <extract_data+0x68>)
 8000cc0:	f006 f9fa 	bl	80070b8 <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <extract_data+0x68>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	725a      	strb	r2, [r3, #9]
		         token = strtok(NULL, ",");
 8000cca:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <extract_data+0x5c>)
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f006 fa07 	bl	80070e0 <strtok>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <extract_data+0x64>)
 8000cd6:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <extract_data+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <extract_data+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2209      	movs	r2, #9
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <extract_data+0x6c>)
 8000cea:	f006 f9e5 	bl	80070b8 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <extract_data+0x6c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	725a      	strb	r2, [r3, #9]
		         //token = strtok(NULL, ",");
		     }


}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	0800834c 	.word	0x0800834c
 8000cfc:	200000d8 	.word	0x200000d8
 8000d00:	20000184 	.word	0x20000184
 8000d04:	2000016c 	.word	0x2000016c
 8000d08:	20000178 	.word	0x20000178

08000d0c <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"B0")==0)
 8000d10:	4973      	ldr	r1, [pc, #460]	; (8000ee0 <pin_config+0x1d4>)
 8000d12:	4874      	ldr	r0, [pc, #464]	; (8000ee4 <pin_config+0x1d8>)
 8000d14:	f7ff fa5c 	bl	80001d0 <strcmp>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d103      	bne.n	8000d26 <pin_config+0x1a>
			     {
			       switch_val=1;
 8000d1e:	4b72      	ldr	r3, [pc, #456]	; (8000ee8 <pin_config+0x1dc>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e040      	b.n	8000da8 <pin_config+0x9c>
			     }

	            else if(strcmp(arr1,"B1")==0)
 8000d26:	4971      	ldr	r1, [pc, #452]	; (8000eec <pin_config+0x1e0>)
 8000d28:	486e      	ldr	r0, [pc, #440]	; (8000ee4 <pin_config+0x1d8>)
 8000d2a:	f7ff fa51 	bl	80001d0 <strcmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d103      	bne.n	8000d3c <pin_config+0x30>
				 {
				   switch_val=2;
 8000d34:	4b6c      	ldr	r3, [pc, #432]	; (8000ee8 <pin_config+0x1dc>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e035      	b.n	8000da8 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"B4")==0)
 8000d3c:	496c      	ldr	r1, [pc, #432]	; (8000ef0 <pin_config+0x1e4>)
 8000d3e:	4869      	ldr	r0, [pc, #420]	; (8000ee4 <pin_config+0x1d8>)
 8000d40:	f7ff fa46 	bl	80001d0 <strcmp>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <pin_config+0x46>
	           	 {
	           		switch_val=3;
 8000d4a:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <pin_config+0x1dc>)
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e02a      	b.n	8000da8 <pin_config+0x9c>
	           	 }

	            else if(strcmp(arr1,"B5")==0)
 8000d52:	4968      	ldr	r1, [pc, #416]	; (8000ef4 <pin_config+0x1e8>)
 8000d54:	4863      	ldr	r0, [pc, #396]	; (8000ee4 <pin_config+0x1d8>)
 8000d56:	f7ff fa3b 	bl	80001d0 <strcmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <pin_config+0x5c>
                 {
				    switch_val=4;
 8000d60:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <pin_config+0x1dc>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e01f      	b.n	8000da8 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"ADC1")==0)
 8000d68:	4963      	ldr	r1, [pc, #396]	; (8000ef8 <pin_config+0x1ec>)
 8000d6a:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <pin_config+0x1d8>)
 8000d6c:	f7ff fa30 	bl	80001d0 <strcmp>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <pin_config+0x72>
				 {
					switch_val=5;
 8000d76:	4b5c      	ldr	r3, [pc, #368]	; (8000ee8 <pin_config+0x1dc>)
 8000d78:	2205      	movs	r2, #5
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	e014      	b.n	8000da8 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"RTC")==0)
 8000d7e:	495f      	ldr	r1, [pc, #380]	; (8000efc <pin_config+0x1f0>)
 8000d80:	4858      	ldr	r0, [pc, #352]	; (8000ee4 <pin_config+0x1d8>)
 8000d82:	f7ff fa25 	bl	80001d0 <strcmp>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d103      	bne.n	8000d94 <pin_config+0x88>
	             {
	            	switch_val=6;
 8000d8c:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <pin_config+0x1dc>)
 8000d8e:	2206      	movs	r2, #6
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e009      	b.n	8000da8 <pin_config+0x9c>
	             }

	            else if(strcmp(arr1,"SCANTIME")==0)
 8000d94:	495a      	ldr	r1, [pc, #360]	; (8000f00 <pin_config+0x1f4>)
 8000d96:	4853      	ldr	r0, [pc, #332]	; (8000ee4 <pin_config+0x1d8>)
 8000d98:	f7ff fa1a 	bl	80001d0 <strcmp>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d102      	bne.n	8000da8 <pin_config+0x9c>
				 {
					switch_val=7;
 8000da2:	4b51      	ldr	r3, [pc, #324]	; (8000ee8 <pin_config+0x1dc>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
				 }


			     switch(switch_val)
 8000da8:	4b4f      	ldr	r3, [pc, #316]	; (8000ee8 <pin_config+0x1dc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	f200 8093 	bhi.w	8000eda <pin_config+0x1ce>
 8000db4:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <pin_config+0xb0>)
 8000db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dba:	bf00      	nop
 8000dbc:	08000dcd 	.word	0x08000dcd
 8000dc0:	08000e0d 	.word	0x08000e0d
 8000dc4:	08000e4d 	.word	0x08000e4d
 8000dc8:	08000e8d 	.word	0x08000e8d
			     {

			     case 1:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8000dcc:	494d      	ldr	r1, [pc, #308]	; (8000f04 <pin_config+0x1f8>)
 8000dce:	484e      	ldr	r0, [pc, #312]	; (8000f08 <pin_config+0x1fc>)
 8000dd0:	f7ff f9fe 	bl	80001d0 <strcmp>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d108      	bne.n	8000dec <pin_config+0xe0>
						{
			              user_GPIO_Init(GPIOB,GPIO_PIN_0,OUTPUT);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2101      	movs	r1, #1
 8000dde:	484b      	ldr	r0, [pc, #300]	; (8000f0c <pin_config+0x200>)
 8000de0:	f000 faa8 	bl	8001334 <user_GPIO_Init>
					      config[0] = 0;
 8000de4:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <pin_config+0x204>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
			              else if(strcmp(arr2,"INPUT")==0)
					    {
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
						   config[0] = 1;
					    }
			     break;
 8000dea:	e06f      	b.n	8000ecc <pin_config+0x1c0>
			              else if(strcmp(arr2,"INPUT")==0)
 8000dec:	4949      	ldr	r1, [pc, #292]	; (8000f14 <pin_config+0x208>)
 8000dee:	4846      	ldr	r0, [pc, #280]	; (8000f08 <pin_config+0x1fc>)
 8000df0:	f7ff f9ee 	bl	80001d0 <strcmp>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d168      	bne.n	8000ecc <pin_config+0x1c0>
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4843      	ldr	r0, [pc, #268]	; (8000f0c <pin_config+0x200>)
 8000e00:	f000 fa98 	bl	8001334 <user_GPIO_Init>
						   config[0] = 1;
 8000e04:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <pin_config+0x204>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
			     break;
 8000e0a:	e05f      	b.n	8000ecc <pin_config+0x1c0>

			   case 2:
				    	if(strcmp(arr2,"OUTPUT")==0)
 8000e0c:	493d      	ldr	r1, [pc, #244]	; (8000f04 <pin_config+0x1f8>)
 8000e0e:	483e      	ldr	r0, [pc, #248]	; (8000f08 <pin_config+0x1fc>)
 8000e10:	f7ff f9de 	bl	80001d0 <strcmp>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d108      	bne.n	8000e2c <pin_config+0x120>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_1,OUTPUT);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	483b      	ldr	r0, [pc, #236]	; (8000f0c <pin_config+0x200>)
 8000e20:	f000 fa88 	bl	8001334 <user_GPIO_Init>
			    	      config[1]=0;
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <pin_config+0x204>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	705a      	strb	r2, [r3, #1]
			    	     else if(strcmp(arr2,"INPUT")==0)
			    		{
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
			    		  config[1]=1;
			    		}
	    	    break;
 8000e2a:	e051      	b.n	8000ed0 <pin_config+0x1c4>
			    	     else if(strcmp(arr2,"INPUT")==0)
 8000e2c:	4939      	ldr	r1, [pc, #228]	; (8000f14 <pin_config+0x208>)
 8000e2e:	4836      	ldr	r0, [pc, #216]	; (8000f08 <pin_config+0x1fc>)
 8000e30:	f7ff f9ce 	bl	80001d0 <strcmp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d14a      	bne.n	8000ed0 <pin_config+0x1c4>
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4833      	ldr	r0, [pc, #204]	; (8000f0c <pin_config+0x200>)
 8000e40:	f000 fa78 	bl	8001334 <user_GPIO_Init>
			    		  config[1]=1;
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <pin_config+0x204>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	705a      	strb	r2, [r3, #1]
	    	    break;
 8000e4a:	e041      	b.n	8000ed0 <pin_config+0x1c4>

			     case 3:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8000e4c:	492d      	ldr	r1, [pc, #180]	; (8000f04 <pin_config+0x1f8>)
 8000e4e:	482e      	ldr	r0, [pc, #184]	; (8000f08 <pin_config+0x1fc>)
 8000e50:	f7ff f9be 	bl	80001d0 <strcmp>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d108      	bne.n	8000e6c <pin_config+0x160>
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	482b      	ldr	r0, [pc, #172]	; (8000f0c <pin_config+0x200>)
 8000e60:	f000 fa68 	bl	8001334 <user_GPIO_Init>
			     		  config[2]=0;
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <pin_config+0x204>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	709a      	strb	r2, [r3, #2]
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			     		  config[2]=1;
			     		}

			     break;
 8000e6a:	e033      	b.n	8000ed4 <pin_config+0x1c8>
			     		 else if(strcmp(arr2,"INPUT")==0)
 8000e6c:	4929      	ldr	r1, [pc, #164]	; (8000f14 <pin_config+0x208>)
 8000e6e:	4826      	ldr	r0, [pc, #152]	; (8000f08 <pin_config+0x1fc>)
 8000e70:	f7ff f9ae 	bl	80001d0 <strcmp>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d12c      	bne.n	8000ed4 <pin_config+0x1c8>
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4823      	ldr	r0, [pc, #140]	; (8000f0c <pin_config+0x200>)
 8000e80:	f000 fa58 	bl	8001334 <user_GPIO_Init>
			     		  config[2]=1;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <pin_config+0x204>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	709a      	strb	r2, [r3, #2]
			     break;
 8000e8a:	e023      	b.n	8000ed4 <pin_config+0x1c8>

			     case 4:
			    	 	 if(strcmp(arr2,"OUTPUT")==0)
 8000e8c:	491d      	ldr	r1, [pc, #116]	; (8000f04 <pin_config+0x1f8>)
 8000e8e:	481e      	ldr	r0, [pc, #120]	; (8000f08 <pin_config+0x1fc>)
 8000e90:	f7ff f99e 	bl	80001d0 <strcmp>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d108      	bne.n	8000eac <pin_config+0x1a0>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	481b      	ldr	r0, [pc, #108]	; (8000f0c <pin_config+0x200>)
 8000ea0:	f000 fa48 	bl	8001334 <user_GPIO_Init>
			    		  config[3]=0;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <pin_config+0x204>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	70da      	strb	r2, [r3, #3]
			    		  else if(strcmp(arr2,"INPUT")==0)
			    	    {
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			              config[3]=1;
			    	    }
			     break;
 8000eaa:	e015      	b.n	8000ed8 <pin_config+0x1cc>
			    		  else if(strcmp(arr2,"INPUT")==0)
 8000eac:	4919      	ldr	r1, [pc, #100]	; (8000f14 <pin_config+0x208>)
 8000eae:	4816      	ldr	r0, [pc, #88]	; (8000f08 <pin_config+0x1fc>)
 8000eb0:	f7ff f98e 	bl	80001d0 <strcmp>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10e      	bne.n	8000ed8 <pin_config+0x1cc>
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <pin_config+0x200>)
 8000ec0:	f000 fa38 	bl	8001334 <user_GPIO_Init>
			              config[3]=1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <pin_config+0x204>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	70da      	strb	r2, [r3, #3]
			     break;
 8000eca:	e005      	b.n	8000ed8 <pin_config+0x1cc>
			     break;
 8000ecc:	bf00      	nop
 8000ece:	e004      	b.n	8000eda <pin_config+0x1ce>
	    	    break;
 8000ed0:	bf00      	nop
 8000ed2:	e002      	b.n	8000eda <pin_config+0x1ce>
			     break;
 8000ed4:	bf00      	nop
 8000ed6:	e000      	b.n	8000eda <pin_config+0x1ce>
			     break;
 8000ed8:	bf00      	nop
//			 break;
//			     case 7:
//			    	 d.scan_time = (uint8_t)atoi(arr2);
////			    	 DataTOgsm(d);
			     }
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08008350 	.word	0x08008350
 8000ee4:	2000016c 	.word	0x2000016c
 8000ee8:	200000d4 	.word	0x200000d4
 8000eec:	08008354 	.word	0x08008354
 8000ef0:	08008358 	.word	0x08008358
 8000ef4:	0800835c 	.word	0x0800835c
 8000ef8:	08008360 	.word	0x08008360
 8000efc:	08008368 	.word	0x08008368
 8000f00:	0800836c 	.word	0x0800836c
 8000f04:	08008378 	.word	0x08008378
 8000f08:	20000178 	.word	0x20000178
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	20000000 	.word	0x20000000
 8000f14:	08008380 	.word	0x08008380

08000f18 <UART2_Init>:

UART_HandleTypeDef huart2;


void UART2_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <UART2_Init+0x58>)
 8000f1e:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <UART2_Init+0x5c>)
 8000f20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <UART2_Init+0x58>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <UART2_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <UART2_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <UART2_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <UART2_Init+0x58>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <UART2_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <UART2_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <UART2_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <UART2_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <UART2_Init+0x58>)
 8000f5c:	f004 fa32 	bl	80053c4 <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <UART2_Init+0x52>
	{
		Error_Handler();
 8000f66:	f000 fc61 	bl	800182c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000022c 	.word	0x2000022c
 8000f74:	40004400 	.word	0x40004400

08000f78 <DataToUart>:
//{
//	HAL_UART_Transmit(&huart2, (uint8_t*)GPIO, 4,1000);
//}

void DataToUart(struct data *d)
{
 8000f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7a:	b08d      	sub	sp, #52	; 0x34
 8000f7c:	af0a      	add	r7, sp, #40	; 0x28
 8000f7e:	6078      	str	r0, [r7, #4]
//	extern buffer_Time;
//	sprintf(buffer_Time,"%02d:%02d:%02d",d1->hr,d1->min,d1->sec);
//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);

	sprintf(buf,"%02d:%02d:%02d,%s,%s,%s,%s,%s,%s,%s,%s\r\n",d->hr,d->min,d->sec,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461d      	mov	r5, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	461e      	mov	r6, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	789b      	ldrb	r3, [r3, #2]
 8000f90:	461c      	mov	r4, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	331d      	adds	r3, #29
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	3227      	adds	r2, #39	; 0x27
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	3131      	adds	r1, #49	; 0x31
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	303b      	adds	r0, #59	; 0x3b
 8000fa2:	9008      	str	r0, [sp, #32]
 8000fa4:	9107      	str	r1, [sp, #28]
 8000fa6:	9206      	str	r2, [sp, #24]
 8000fa8:	9305      	str	r3, [sp, #20]
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <DataToUart+0x70>)
 8000fac:	9304      	str	r3, [sp, #16]
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <DataToUart+0x74>)
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <DataToUart+0x78>)
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <DataToUart+0x7c>)
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	9400      	str	r4, [sp, #0]
 8000fbc:	4633      	mov	r3, r6
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <DataToUart+0x80>)
 8000fc2:	480e      	ldr	r0, [pc, #56]	; (8000ffc <DataToUart+0x84>)
 8000fc4:	f006 f858 	bl	8007078 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <DataToUart+0x84>)
 8000fca:	f7ff f90b 	bl	80001e4 <strlen>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	4909      	ldr	r1, [pc, #36]	; (8000ffc <DataToUart+0x84>)
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <DataToUart+0x88>)
 8000fda:	f004 fa41 	bl	8005460 <HAL_UART_Transmit>
//	HAL_Delay(1000);

}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000c4 	.word	0x200000c4
 8000fec:	200000b8 	.word	0x200000b8
 8000ff0:	200000ac 	.word	0x200000ac
 8000ff4:	200000a0 	.word	0x200000a0
 8000ff8:	08008388 	.word	0x08008388
 8000ffc:	2000018c 	.word	0x2000018c
 8001000:	2000022c 	.word	0x2000022c

08001004 <GsmCommands>:



void GsmCommands(uint8_t* cmd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff f8e9 	bl	80001e4 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29b      	uxth	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <GsmCommands+0x38>)
 800101c:	f004 fb86 	bl	800572c <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 8001020:	2264      	movs	r2, #100	; 0x64
 8001022:	4907      	ldr	r1, [pc, #28]	; (8001040 <GsmCommands+0x3c>)
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <GsmCommands+0x38>)
 8001026:	f004 fbef 	bl	8005808 <HAL_UART_Receive_IT>
	HAL_Delay(500);
 800102a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800102e:	f000 ff09 	bl	8001e44 <HAL_Delay>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000022c 	.word	0x2000022c
 8001040:	200001c8 	.word	0x200001c8

08001044 <Gsm_Init>:



void Gsm_Init()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 8001048:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800104c:	f000 fefa 	bl	8001e44 <HAL_Delay>


	GsmCommands((uint8_t*)"AT\r\n");
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <Gsm_Init+0x34>)
 8001052:	f7ff ffd7 	bl	8001004 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <Gsm_Init+0x38>)
 8001058:	f7ff ffd4 	bl	8001004 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <Gsm_Init+0x3c>)
 800105e:	f7ff ffd1 	bl	8001004 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8001062:	4808      	ldr	r0, [pc, #32]	; (8001084 <Gsm_Init+0x40>)
 8001064:	f7ff ffce 	bl	8001004 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"airtelgprs.com\"\r\n");
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <Gsm_Init+0x44>)
 800106a:	f7ff ffcb 	bl	8001004 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <Gsm_Init+0x48>)
 8001070:	f7ff ffc8 	bl	8001004 <GsmCommands>

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	080083b4 	.word	0x080083b4
 800107c:	080083bc 	.word	0x080083bc
 8001080:	080083c8 	.word	0x080083c8
 8001084:	080083d4 	.word	0x080083d4
 8001088:	080083e4 	.word	0x080083e4
 800108c:	0800840c 	.word	0x0800840c

08001090 <DataToCloud>:


void DataToCloud(uint8_t* Time,uint8_t* Ch1,uint8_t* Ch2,uint8_t* Ch3,uint8_t* Ch4,uint8_t* D1,uint8_t* D2,uint8_t* D3,uint8_t* D4)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8001096:	af08      	add	r7, sp, #32
 8001098:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800109c:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 80010a0:	6020      	str	r0, [r4, #0]
 80010a2:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80010a6:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 80010aa:	6001      	str	r1, [r0, #0]
 80010ac:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80010b0:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 80010b4:	600a      	str	r2, [r1, #0]
 80010b6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80010ba:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80010be:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 80010c0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010c4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f000 f89b 	bl	8001204 <url_encode>
 80010ce:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch1 = url_encode(Ch1);
 80010d2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010d6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f000 f892 	bl	8001204 <url_encode>
 80010e0:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch2 = url_encode(Ch2);
 80010e4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010e8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f000 f889 	bl	8001204 <url_encode>
 80010f2:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch3 = url_encode(Ch3);
 80010f6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010fa:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f000 f880 	bl	8001204 <url_encode>
 8001104:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_Ch4 = url_encode(Ch4);
 8001108:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 800110c:	f000 f87a 	bl	8001204 <url_encode>
 8001110:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D1 = url_encode(D1);
 8001114:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8001118:	f000 f874 	bl	8001204 <url_encode>
 800111c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D2 = url_encode(D2);
 8001120:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8001124:	f000 f86e 	bl	8001204 <url_encode>
 8001128:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D3 = url_encode(D3);
 800112c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8001130:	f000 f868 	bl	8001204 <url_encode>
 8001134:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	char* encoded_D4 = url_encode(D4);
 8001138:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800113c:	f000 f862 	bl	8001204 <url_encode>
 8001140:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8001144:	482b      	ldr	r0, [pc, #172]	; (80011f4 <DataToCloud+0x164>)
 8001146:	f7ff ff5d 	bl	8001004 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800114a:	482b      	ldr	r0, [pc, #172]	; (80011f8 <DataToCloud+0x168>)
 800114c:	f7ff ff5a 	bl	8001004 <GsmCommands>


	snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyM2Si83cN_Ieegenl17V6-CFZDiRIFlvHbPW19ydK0MydLo3YrItC4_J7xeOUK8FtQ/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s\"\r\n",encoded_Time, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8001150:	f107 0010 	add.w	r0, r7, #16
 8001154:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001158:	9307      	str	r3, [sp, #28]
 800115a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800115e:	9306      	str	r3, [sp, #24]
 8001160:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001164:	9305      	str	r3, [sp, #20]
 8001166:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800116a:	9304      	str	r3, [sp, #16]
 800116c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <DataToCloud+0x16c>)
 800118a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800118e:	f005 ff3f 	bl	8007010 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff34 	bl	8001004 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <DataToCloud+0x170>)
 800119e:	f7ff ff31 	bl	8001004 <GsmCommands>

	free(encoded_Time);
 80011a2:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80011a6:	f005 fe33 	bl	8006e10 <free>
	free(encoded_Ch1);
 80011aa:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80011ae:	f005 fe2f 	bl	8006e10 <free>
	free(encoded_Ch2);
 80011b2:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80011b6:	f005 fe2b 	bl	8006e10 <free>
	free(encoded_Ch3);
 80011ba:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80011be:	f005 fe27 	bl	8006e10 <free>
	free(encoded_Ch4);
 80011c2:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80011c6:	f005 fe23 	bl	8006e10 <free>
	free(encoded_D1);
 80011ca:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80011ce:	f005 fe1f 	bl	8006e10 <free>
	free(encoded_D2);
 80011d2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80011d6:	f005 fe1b 	bl	8006e10 <free>
	free(encoded_D3);
 80011da:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80011de:	f005 fe17 	bl	8006e10 <free>
	free(encoded_D4);
 80011e2:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80011e6:	f005 fe13 	bl	8006e10 <free>

}
 80011ea:	bf00      	nop
 80011ec:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	0800841c 	.word	0x0800841c
 80011f8:	0800842c 	.word	0x0800842c
 80011fc:	0800843c 	.word	0x0800843c
 8001200:	08008520 	.word	0x08008520

08001204 <url_encode>:



char* url_encode(const char* str)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <url_encode+0xc8>)
 800120e:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7fe ffe7 	bl	80001e4 <strlen>
 8001216:	4602      	mov	r2, r0
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	3301      	adds	r3, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f005 fded 	bl	8006e00 <malloc>
 8001226:	4603      	mov	r3, r0
 8001228:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	617b      	str	r3, [r7, #20]

	while (*str) {
 800122e:	e040      	b.n	80012b2 <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <url_encode+0xcc>)
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10f      	bne.n	8001264 <url_encode+0x60>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b2d      	cmp	r3, #45	; 0x2d
 800124a:	d00b      	beq.n	8001264 <url_encode+0x60>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b5f      	cmp	r3, #95	; 0x5f
 8001252:	d007      	beq.n	8001264 <url_encode+0x60>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b2e      	cmp	r3, #46	; 0x2e
 800125a:	d003      	beq.n	8001264 <url_encode+0x60>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b7e      	cmp	r3, #126	; 0x7e
 8001262:	d106      	bne.n	8001272 <url_encode+0x6e>
			*ptr++ = *str;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	617a      	str	r2, [r7, #20]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e01c      	b.n	80012ac <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	617a      	str	r2, [r7, #20]
 8001278:	2225      	movs	r2, #37	; 0x25
 800127a:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	441a      	add	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	1c59      	adds	r1, r3, #1
 8001290:	6179      	str	r1, [r7, #20]
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	441a      	add	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	6179      	str	r1, [r7, #20]
 80012a8:	7812      	ldrb	r2, [r2, #0]
 80012aa:	701a      	strb	r2, [r3, #0]
		}
		str++;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
	while (*str) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1ba      	bne.n	8001230 <url_encode+0x2c>
	}
	*ptr = '\0';
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
	return encoded;
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	08008534 	.word	0x08008534
 80012d0:	08008590 	.word	0x08008590

080012d4 <user_USART1_UART_Init>:
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

 void user_USART1_UART_Init(void)
 {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
 ////////////////////
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <user_USART1_UART_Init+0x58>)
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <user_USART1_UART_Init+0x5c>)
 80012dc:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <user_USART1_UART_Init+0x58>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <user_USART1_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <user_USART1_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <user_USART1_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <user_USART1_UART_Init+0x58>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <user_USART1_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <user_USART1_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <user_USART1_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <user_USART1_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <user_USART1_UART_Init+0x58>)
 8001318:	f004 f854 	bl	80053c4 <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <user_USART1_UART_Init+0x52>
   {
     Error_Handler();
 8001322:	f000 fa83 	bl	800182c <Error_Handler>
   }

 }
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000e8 	.word	0x200000e8
 8001330:	40013800 	.word	0x40013800

08001334 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <user_GPIO_Init+0xac>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <user_GPIO_Init+0xac>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <user_GPIO_Init+0xac>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <user_GPIO_Init+0xac>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <user_GPIO_Init+0xac>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <user_GPIO_Init+0xac>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <user_GPIO_Init+0xac>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <user_GPIO_Init+0xac>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <user_GPIO_Init+0xac>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 800138c:	787a      	ldrb	r2, [r7, #1]
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	4619      	mov	r1, r3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f001 faea 	bl	800296c <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <user_GPIO_Init+0x78>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 800139e:	787a      	ldrb	r2, [r7, #1]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f81f 	bl	80013e8 <gpio_output>
 80013aa:	e008      	b.n	80013be <user_GPIO_Init+0x8a>
     }
     else if(PIN_mode == INPUT)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <user_GPIO_Init+0x8a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 80013b2:	787a      	ldrb	r2, [r7, #1]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4619      	mov	r1, r3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f837 	bl	800142c <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <user_GPIO_Init+0xb0>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <user_GPIO_Init+0xb0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <user_GPIO_Init+0xb0>)
 80013cc:	2203      	movs	r2, #3
 80013ce:	60da      	str	r2, [r3, #12]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <user_GPIO_Init+0xb0>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	20000314 	.word	0x20000314

080013e8 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f001 f922 	bl	8002668 <HAL_GPIO_Init>
 }
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f001 f902 	bl	8002668 <HAL_GPIO_Init>
 }
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <data_receive>:




void data_receive()
 {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 8001470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001474:	2214      	movs	r2, #20
 8001476:	4905      	ldr	r1, [pc, #20]	; (800148c <data_receive+0x20>)
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <data_receive+0x24>)
 800147a:	f004 f885 	bl	8005588 <HAL_UART_Receive>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <data_receive+0x1c>
	 {
			 Error_Handler();
 8001484:	f000 f9d2 	bl	800182c <Error_Handler>
	 }
 }
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000d8 	.word	0x200000d8
 8001490:	200000e8 	.word	0x200000e8

08001494 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f001 fa49 	bl	800293c <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0

 }
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 80014c4:	787a      	ldrb	r2, [r7, #1]
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 fa4e 	bl	800296c <HAL_GPIO_WritePin>
    return PinState;
 80014d0:	787b      	ldrb	r3, [r7, #1]
 }
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <dec_bcd>:


//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <dec_bcd+0x48>)
 80014e8:	fb82 1203 	smull	r1, r2, r2, r3
 80014ec:	1092      	asrs	r2, r2, #2
 80014ee:	17db      	asrs	r3, r3, #31
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <dec_bcd+0x48>)
 80014fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001500:	1099      	asrs	r1, r3, #2
 8001502:	17d3      	asrs	r3, r2, #31
 8001504:	1ac9      	subs	r1, r1, r3
 8001506:	460b      	mov	r3, r1
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	1ad1      	subs	r1, r2, r3
 8001510:	b2cb      	uxtb	r3, r1
 8001512:	4403      	add	r3, r0
 8001514:	b2db      	uxtb	r3, r3
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	66666667 	.word	0x66666667

08001528 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	461a      	mov	r2, r3
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	4413      	add	r3, r2
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155e:	f000 fbfc 	bl	8001d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001562:	f000 f821 	bl	80015a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
//  MX_ADC1_Init();
  MX_I2C1_Init();
 8001566:	f000 f881 	bl	800166c <MX_I2C1_Init>
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  UART2_Init();
 800156a:	f7ff fcd5 	bl	8000f18 <UART2_Init>
  user_USART1_UART_Init();
 800156e:	f7ff feb1 	bl	80012d4 <user_USART1_UART_Init>
  	set_time(00,30,2,5,30,7,24);
 8001572:	2318      	movs	r3, #24
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2307      	movs	r3, #7
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	231e      	movs	r3, #30
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2305      	movs	r3, #5
 8001580:	2202      	movs	r2, #2
 8001582:	211e      	movs	r1, #30
 8001584:	2000      	movs	r0, #0
 8001586:	f000 f8b1 	bl	80016ec <set_time>

  	Gsm_Init();
 800158a:	f7ff fd5b 	bl	8001044 <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Configurator();
 800158e:	f7ff fa93 	bl	8000ab8 <Configurator>
	  		get_time();
 8001592:	f000 f8fb 	bl	800178c <get_time>
//	  		d.hr=time.hour;
//	  		d.min=time.minutes;
//	  		d.sec=time.seconds;

	  		DataToGsm(&d);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <main+0x4c>)
 8001598:	f7ff f9c0 	bl	800091c <DataToGsm>
	  		DataToUart(&d);
 800159c:	4801      	ldr	r0, [pc, #4]	; (80015a4 <main+0x4c>)
 800159e:	f7ff fceb 	bl	8000f78 <DataToUart>
	  Configurator();
 80015a2:	e7f4      	b.n	800158e <main+0x36>
 80015a4:	2000037c 	.word	0x2000037c

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b096      	sub	sp, #88	; 0x58
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2244      	movs	r2, #68	; 0x44
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fc32 	bl	8006e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ce:	f002 fd73 	bl	80040b8 <HAL_PWREx_ControlVoltageScaling>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015d8:	f000 f928 	bl	800182c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015dc:	f002 fd4e 	bl	800407c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <SystemClock_Config+0xc0>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	4a20      	ldr	r2, [pc, #128]	; (8001668 <SystemClock_Config+0xc0>)
 80015e8:	f023 0318 	bic.w	r3, r3, #24
 80015ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015f0:	2314      	movs	r3, #20
 80015f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001600:	2360      	movs	r3, #96	; 0x60
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001604:	2302      	movs	r3, #2
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001608:	2301      	movs	r3, #1
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800160c:	2301      	movs	r3, #1
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001610:	2310      	movs	r3, #16
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001614:	2307      	movs	r3, #7
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fd9d 	bl	8004164 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001630:	f000 f8fc 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2303      	movs	r3, #3
 800163a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	2101      	movs	r1, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f003 f99d 	bl	800498c <HAL_RCC_ClockConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001658:	f000 f8e8 	bl	800182c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800165c:	f003 fdb0 	bl	80051c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001660:	bf00      	nop
 8001662:	3758      	adds	r7, #88	; 0x58
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <MX_I2C1_Init+0x78>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <MX_I2C1_Init+0x7c>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001684:	2201      	movs	r2, #1
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_I2C1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016a8:	f001 f978 	bl	800299c <HAL_I2C_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016b2:	f000 f8bb 	bl	800182c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b6:	2100      	movs	r1, #0
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016ba:	f002 fc47 	bl	8003f4c <HAL_I2CEx_ConfigAnalogFilter>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016c4:	f000 f8b2 	bl	800182c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_I2C1_Init+0x74>)
 80016cc:	f002 fc89 	bl	8003fe2 <HAL_I2CEx_ConfigDigitalFilter>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016d6:	f000 f8a9 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000328 	.word	0x20000328
 80016e4:	40005400 	.word	0x40005400
 80016e8:	00707cbb 	.word	0x00707cbb

080016ec <set_time>:
//}

/* USER CODE BEGIN 4 */

void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	4604      	mov	r4, r0
 80016f4:	4608      	mov	r0, r1
 80016f6:	4611      	mov	r1, r2
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	4603      	mov	r3, r0
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	460b      	mov	r3, r1
 8001704:	717b      	strb	r3, [r7, #5]
 8001706:	4613      	mov	r3, r2
 8001708:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fee5 	bl	80014dc <dec_bcd>
 8001712:	4603      	mov	r3, r0
 8001714:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fedf 	bl	80014dc <dec_bcd>
 800171e:	4603      	mov	r3, r0
 8001720:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fed9 	bl	80014dc <dec_bcd>
 800172a:	4603      	mov	r3, r0
 800172c:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 800172e:	793b      	ldrb	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fed3 	bl	80014dc <dec_bcd>
 8001736:	4603      	mov	r3, r0
 8001738:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 800173a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fecc 	bl	80014dc <dec_bcd>
 8001744:	4603      	mov	r3, r0
 8001746:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8001748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fec5 	bl	80014dc <dec_bcd>
 8001752:	4603      	mov	r3, r0
 8001754:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 8001756:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff febe 	bl	80014dc <dec_bcd>
 8001760:	4603      	mov	r3, r0
 8001762:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2307      	movs	r3, #7
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	2200      	movs	r2, #0
 8001778:	21d0      	movs	r1, #208	; 0xd0
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <set_time+0x9c>)
 800177c:	f001 f99e 	bl	8002abc <HAL_I2C_Mem_Write>
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000328 	.word	0x20000328

0800178c <get_time>:


void get_time()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2307      	movs	r3, #7
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	463b      	mov	r3, r7
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2301      	movs	r3, #1
 80017a2:	2200      	movs	r2, #0
 80017a4:	21d0      	movs	r1, #208	; 0xd0
 80017a6:	481f      	ldr	r0, [pc, #124]	; (8001824 <get_time+0x98>)
 80017a8:	f001 fa9c 	bl	8002ce4 <HAL_I2C_Mem_Read>
	d.hr=bcd_dec(get_time[0]);
 80017ac:	783b      	ldrb	r3, [r7, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff feba 	bl	8001528 <bcd_dec>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <get_time+0x9c>)
 80017ba:	701a      	strb	r2, [r3, #0]
	d.min=bcd_dec(get_time[1]);
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff feb2 	bl	8001528 <bcd_dec>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <get_time+0x9c>)
 80017ca:	705a      	strb	r2, [r3, #1]
	d.sec=bcd_dec(get_time[2]);
 80017cc:	78bb      	ldrb	r3, [r7, #2]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff feaa 	bl	8001528 <bcd_dec>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <get_time+0x9c>)
 80017da:	709a      	strb	r2, [r3, #2]
	d.day=bcd_dec(get_time[3]);
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fea2 	bl	8001528 <bcd_dec>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <get_time+0x9c>)
 80017ea:	70da      	strb	r2, [r3, #3]
	d.date=bcd_dec(get_time[4]);
 80017ec:	793b      	ldrb	r3, [r7, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fe9a 	bl	8001528 <bcd_dec>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <get_time+0x9c>)
 80017fa:	711a      	strb	r2, [r3, #4]
	d.month=bcd_dec(get_time[5]);
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe92 	bl	8001528 <bcd_dec>
 8001804:	4603      	mov	r3, r0
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <get_time+0x9c>)
 800180a:	715a      	strb	r2, [r3, #5]
	d.year=bcd_dec(get_time[6]);
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fe8a 	bl	8001528 <bcd_dec>
 8001814:	4603      	mov	r3, r0
 8001816:	b2da      	uxtb	r2, r3
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <get_time+0x9c>)
 800181a:	719a      	strb	r2, [r3, #6]
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000328 	.word	0x20000328
 8001828:	2000037c 	.word	0x2000037c

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_MspInit+0x44>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_MspInit+0x44>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6613      	str	r3, [r2, #96]	; 0x60
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_MspInit+0x44>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_MspInit+0x44>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_MspInit+0x44>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_MspInit+0x44>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b09e      	sub	sp, #120	; 0x78
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	2254      	movs	r2, #84	; 0x54
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 fabd 	bl	8006e20 <memset>
  if(hi2c->Instance==I2C1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_I2C_MspInit+0xc4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d145      	bne.n	800193c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fa89 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018c8:	f7ff ffb0 	bl	800182c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_I2C_MspInit+0xc8>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_I2C_MspInit+0xc8>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_I2C_MspInit+0xc8>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e4:	23c0      	movs	r3, #192	; 0xc0
 80018e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e8:	2312      	movs	r3, #18
 80018ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f4:	2304      	movs	r3, #4
 80018f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018fc:	4619      	mov	r1, r3
 80018fe:	4813      	ldr	r0, [pc, #76]	; (800194c <HAL_I2C_MspInit+0xcc>)
 8001900:	f000 feb2 	bl	8002668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_I2C_MspInit+0xc8>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_I2C_MspInit+0xc8>)
 800190a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800190e:	6593      	str	r3, [r2, #88]	; 0x58
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_I2C_MspInit+0xc8>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	201f      	movs	r0, #31
 8001922:	f000 fdde 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001926:	201f      	movs	r0, #31
 8001928:	f000 fdf7 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	2020      	movs	r0, #32
 8001932:	f000 fdd6 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001936:	2020      	movs	r0, #32
 8001938:	f000 fdef 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3778      	adds	r7, #120	; 0x78
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40005400 	.word	0x40005400
 8001948:	40021000 	.word	0x40021000
 800194c:	48000400 	.word	0x48000400

08001950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0a0      	sub	sp, #128	; 0x80
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	2254      	movs	r2, #84	; 0x54
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f005 fa55 	bl	8006e20 <memset>
  if(huart->Instance==USART1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a46      	ldr	r2, [pc, #280]	; (8001a94 <HAL_UART_MspInit+0x144>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d140      	bne.n	8001a02 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001980:	2301      	movs	r3, #1
 8001982:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fa21 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001998:	f7ff ff48 	bl	800182c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800199c:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_UART_MspInit+0x148>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a0:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <HAL_UART_MspInit+0x148>)
 80019a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a6:	6613      	str	r3, [r2, #96]	; 0x60
 80019a8:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_UART_MspInit+0x148>)
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_UART_MspInit+0x148>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	4a37      	ldr	r2, [pc, #220]	; (8001a98 <HAL_UART_MspInit+0x148>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c0:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_UART_MspInit+0x148>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019de:	2307      	movs	r3, #7
 80019e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f000 fe3c 	bl	8002668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2025      	movs	r0, #37	; 0x25
 80019f6:	f000 fd74 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019fa:	2025      	movs	r0, #37	; 0x25
 80019fc:	f000 fd8d 	bl	800251a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a00:	e043      	b.n	8001a8a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <HAL_UART_MspInit+0x14c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d13e      	bne.n	8001a8a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 f9db 	bl	8004dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001a24:	f7ff ff02 	bl	800182c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_UART_MspInit+0x148>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a1a      	ldr	r2, [pc, #104]	; (8001a98 <HAL_UART_MspInit+0x148>)
 8001a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_UART_MspInit+0x148>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_UART_MspInit+0x148>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_UART_MspInit+0x148>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_UART_MspInit+0x148>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a58:	230c      	movs	r3, #12
 8001a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a70:	4619      	mov	r1, r3
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a76:	f000 fdf7 	bl	8002668 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2026      	movs	r0, #38	; 0x26
 8001a80:	f000 fd2f 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a84:	2026      	movs	r0, #38	; 0x26
 8001a86:	f000 fd48 	bl	800251a <HAL_NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3780      	adds	r7, #128	; 0x80
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40013800 	.word	0x40013800
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40004400 	.word	0x40004400

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 f98a 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <ADC1_IRQHandler+0x10>)
 8001afa:	f000 fa13 	bl	8001f24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200002b0 	.word	0x200002b0

08001b08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <I2C1_EV_IRQHandler+0x10>)
 8001b0e:	f001 fa03 	bl	8002f18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000328 	.word	0x20000328

08001b1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <I2C1_ER_IRQHandler+0x10>)
 8001b22:	f001 fa13 	bl	8002f4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000328 	.word	0x20000328

08001b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <USART1_IRQHandler+0x10>)
 8001b36:	f003 febd 	bl	80058b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200000e8 	.word	0x200000e8

08001b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USART2_IRQHandler+0x10>)
 8001b4a:	f003 feb3 	bl	80058b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000022c 	.word	0x2000022c

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b72:	f005 f91b 	bl	8006dac <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9a:	e7fe      	b.n	8001b9a <_exit+0x12>

08001b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf0      	blt.n	8001bae <_read+0x12>
  }

  return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e009      	b.n	8001bfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf1      	blt.n	8001be8 <_write+0x12>
  }
  return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_close>:

int _close(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
  return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_isatty>:

int _isatty(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f005 f880 	bl	8006dac <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20010000 	.word	0x20010000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	200003c4 	.word	0x200003c4
 8001ce0:	200003e0 	.word	0x200003e0

08001ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d0c:	f7ff ffea 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d12:	490d      	ldr	r1, [pc, #52]	; (8001d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <LoopForever+0xe>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d28:	4c0a      	ldr	r4, [pc, #40]	; (8001d54 <LoopForever+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d36:	f005 f83f 	bl	8006db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7ff fc0d 	bl	8001558 <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d4c:	080087ec 	.word	0x080087ec
  ldr r2, =_sbss
 8001d50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d54:	200003dc 	.word	0x200003dc

08001d58 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <CAN1_RX0_IRQHandler>

08001d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 fbb1 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f80e 	bl	8001d8c <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	e001      	b.n	8001d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7c:	f7ff fd5c 	bl	8001838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_InitTick+0x6c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_InitTick+0x70>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_InitTick+0x6c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fbbd 	bl	8002536 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d809      	bhi.n	8001ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 fb87 	bl	80024e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_InitTick+0x74>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e007      	b.n	8001dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e004      	b.n	8001dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e001      	b.n	8001dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	20000008 	.word	0x20000008

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	200003c8 	.word	0x200003c8

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200003c8 	.word	0x200003c8

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000000c 	.word	0x2000000c

08001e8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d101      	bne.n	8001ef0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d101      	bne.n	8001f16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x56>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f9d3 	bl	8002318 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_ADC_IRQHandler+0x6a>
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05e      	beq.n	8002056 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d059      	beq.n	8002056 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff64 	bl	8001e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03e      	beq.n	8002048 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d135      	bne.n	8002048 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d12e      	bne.n	8002048 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff72 	bl	8001ed8 <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11a      	bne.n	8002030 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020c 	bic.w	r2, r2, #12
 8002008:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d112      	bne.n	8002048 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
 800202e:	e00b      	b.n	8002048 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f91f 	bl	800228c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <HAL_ADC_IRQHandler+0x146>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002070:	2b00      	cmp	r3, #0
 8002072:	d072      	beq.n	800215a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06d      	beq.n	800215a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff09 	bl	8001eb2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020a0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fef0 	bl	8001e8c <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ac:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d047      	beq.n	800214c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x1b2>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03f      	beq.n	800214c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d13a      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d133      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d12e      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff03 	bl	8001efe <LL_ADC_INJ_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11a      	bne.n	8002134 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d112      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
 8002132:	e00b      	b.n	800214c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f043 0210 	orr.w	r2, r3, #16
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f8bb 	bl	80022c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2260      	movs	r2, #96	; 0x60
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b00      	cmp	r3, #0
 8002162:	d011      	beq.n	8002188 <HAL_ADC_IRQHandler+0x264>
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f890 	bl	80022a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d012      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x294>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f8a1 	bl	80022f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x2c4>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f893 	bl	8002304 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02a      	beq.n	8002248 <HAL_ADC_IRQHandler+0x324>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d025      	beq.n	8002248 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002204:	2301      	movs	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e008      	b.n	800221c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002218:	2301      	movs	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10e      	bne.n	8002240 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f043 0202 	orr.w	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f83a 	bl	80022b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <HAL_ADC_IRQHandler+0x360>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f043 0208 	orr.w	r2, r3, #8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f82c 	bl	80022dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d008      	beq.n	8002578 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e022      	b.n	80025be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020e 	bic.w	r2, r2, #14
 8002586:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f003 021c 	and.w	r2, r3, #28
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e029      	b.n	8002642 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f003 021c 	and.w	r2, r3, #28
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
    }
  }
  return status;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800265a:	b2db      	uxtb	r3, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	e148      	b.n	800290a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 813a 	beq.w	8002904 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d005      	beq.n	80026a8 <HAL_GPIO_Init+0x40>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d130      	bne.n	800270a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026de:	2201      	movs	r2, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0201 	and.w	r2, r3, #1
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b03      	cmp	r3, #3
 8002714:	d017      	beq.n	8002746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d123      	bne.n	800279a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	6939      	ldr	r1, [r7, #16]
 8002796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8094 	beq.w	8002904 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x2c0>)
 80027de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x2c0>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6613      	str	r3, [r2, #96]	; 0x60
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_GPIO_Init+0x2c0>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027f4:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_GPIO_Init+0x2c4>)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800281e:	d00d      	beq.n	800283c <HAL_GPIO_Init+0x1d4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a43      	ldr	r2, [pc, #268]	; (8002930 <HAL_GPIO_Init+0x2c8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x1d0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a42      	ldr	r2, [pc, #264]	; (8002934 <HAL_GPIO_Init+0x2cc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_GPIO_Init+0x1cc>
 8002830:	2302      	movs	r3, #2
 8002832:	e004      	b.n	800283e <HAL_GPIO_Init+0x1d6>
 8002834:	2307      	movs	r3, #7
 8002836:	e002      	b.n	800283e <HAL_GPIO_Init+0x1d6>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_GPIO_Init+0x1d6>
 800283c:	2300      	movs	r3, #0
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	f002 0203 	and.w	r2, r2, #3
 8002844:	0092      	lsls	r2, r2, #2
 8002846:	4093      	lsls	r3, r2
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800284e:	4937      	ldr	r1, [pc, #220]	; (800292c <HAL_GPIO_Init+0x2c4>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002880:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002886:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028fe:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f aeaf 	bne.w	8002678 <HAL_GPIO_Init+0x10>
  }
}
 800291a:	bf00      	nop
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40021000 	.word	0x40021000
 800292c:	40010000 	.word	0x40010000
 8002930:	48000400 	.word	0x48000400
 8002934:	48000800 	.word	0x48000800
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	887b      	ldrh	r3, [r7, #2]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e001      	b.n	800295e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
 8002978:	4613      	mov	r3, r2
 800297a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002988:	e002      	b.n	8002990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e081      	b.n	8002ab2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe ff5c 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e006      	b.n	8002a24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d104      	bne.n	8002a36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69d9      	ldr	r1, [r3, #28]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	813b      	strh	r3, [r7, #8]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 80f9 	bne.w	8002cd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_I2C_Mem_Write+0x34>
 8002aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0ed      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Mem_Write+0x4e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0e6      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b12:	f7ff f98b 	bl	8001e2c <HAL_GetTick>
 8002b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2319      	movs	r3, #25
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 ffd8 	bl	8003ada <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0d1      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2221      	movs	r2, #33	; 0x21
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2240      	movs	r2, #64	; 0x40
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b5c:	88f8      	ldrh	r0, [r7, #6]
 8002b5e:	893a      	ldrh	r2, [r7, #8]
 8002b60:	8979      	ldrh	r1, [r7, #10]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fb91 	bl	8003294 <I2C_RequestMemoryWrite>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0a9      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d90e      	bls.n	8002bac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f001 f941 	bl	8003e2c <I2C_TransferConfig>
 8002baa:	e00f      	b.n	8002bcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f001 f930 	bl	8003e2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 ffc2 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e07b      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d034      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x1c8>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d130      	bne.n	8002c84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 ff54 	bl	8003ada <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e04d      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2bff      	cmp	r3, #255	; 0xff
 8002c44:	d90e      	bls.n	8002c64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f001 f8e5 	bl	8003e2c <I2C_TransferConfig>
 8002c62:	e00f      	b.n	8002c84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	8979      	ldrh	r1, [r7, #10]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f001 f8d4 	bl	8003e2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d19e      	bne.n	8002bcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 ffa1 	bl	8003bda <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e01a      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_I2C_Mem_Write+0x224>)
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	fe00e800 	.word	0xfe00e800

08002ce4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	4608      	mov	r0, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	817b      	strh	r3, [r7, #10]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	813b      	strh	r3, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	f040 80fd 	bne.w	8002f06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_I2C_Mem_Read+0x34>
 8002d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0f1      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Mem_Read+0x4e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0ea      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d3a:	f7ff f877 	bl	8001e2c <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2319      	movs	r3, #25
 8002d46:	2201      	movs	r2, #1
 8002d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fec4 	bl	8003ada <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d5      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2222      	movs	r2, #34	; 0x22
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d84:	88f8      	ldrh	r0, [r7, #6]
 8002d86:	893a      	ldrh	r2, [r7, #8]
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	4603      	mov	r3, r0
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fad1 	bl	800333c <I2C_RequestMemoryRead>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0ad      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2bff      	cmp	r3, #255	; 0xff
 8002db4:	d90e      	bls.n	8002dd4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	8979      	ldrh	r1, [r7, #10]
 8002dc4:	4b52      	ldr	r3, [pc, #328]	; (8002f10 <HAL_I2C_Mem_Read+0x22c>)
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f001 f82d 	bl	8003e2c <I2C_TransferConfig>
 8002dd2:	e00f      	b.n	8002df4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_I2C_Mem_Read+0x22c>)
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f001 f81c 	bl	8003e2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2104      	movs	r1, #4
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fe6b 	bl	8003ada <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07c      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d034      	beq.n	8002eb4 <HAL_I2C_Mem_Read+0x1d0>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d130      	bne.n	8002eb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fe3c 	bl	8003ada <I2C_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e04d      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2bff      	cmp	r3, #255	; 0xff
 8002e74:	d90e      	bls.n	8002e94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	22ff      	movs	r2, #255	; 0xff
 8002e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	8979      	ldrh	r1, [r7, #10]
 8002e84:	2300      	movs	r3, #0
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 ffcd 	bl	8003e2c <I2C_TransferConfig>
 8002e92:	e00f      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	8979      	ldrh	r1, [r7, #10]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 ffbc 	bl	8003e2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d19a      	bne.n	8002df4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fe89 	bl	8003bda <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e01a      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_I2C_Mem_Read+0x230>)
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	80002400 	.word	0x80002400
 8002f14:	fe00e800 	.word	0xfe00e800

08002f18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
  }
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	09db      	lsrs	r3, r3, #7
 8002f74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0a9b      	lsrs	r3, r3, #10
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d010      	beq.n	8002fc0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	09db      	lsrs	r3, r3, #7
 8002fa2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f043 0208 	orr.w	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	0a5b      	lsrs	r3, r3, #9
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	09db      	lsrs	r3, r3, #7
 8002fd0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f043 0202 	orr.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 030b 	and.w	r3, r3, #11
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002ffe:	68f9      	ldr	r1, [r7, #12]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fc31 	bl	8003868 <I2C_ITError>
  }
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
 8003042:	4613      	mov	r3, r2
 8003044:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <I2C_Slave_ISR_IT+0x24>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0ec      	b.n	800328c <I2C_Slave_ISR_IT+0x1fe>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030d2:	6939      	ldr	r1, [r7, #16]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fa67 	bl	80035a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d04d      	beq.n	8003182 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d047      	beq.n	8003182 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d128      	bne.n	800314e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b28      	cmp	r3, #40	; 0x28
 8003106:	d108      	bne.n	800311a <I2C_Slave_ISR_IT+0x8c>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800310e:	d104      	bne.n	800311a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003110:	6939      	ldr	r1, [r7, #16]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fb52 	bl	80037bc <I2C_ITListenCplt>
 8003118:	e032      	b.n	8003180 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b29      	cmp	r3, #41	; 0x29
 8003124:	d10e      	bne.n	8003144 <I2C_Slave_ISR_IT+0xb6>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800312c:	d00a      	beq.n	8003144 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2210      	movs	r2, #16
 8003134:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fc8d 	bl	8003a56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f9d5 	bl	80034ec <I2C_ITSlaveSeqCplt>
 8003142:	e01d      	b.n	8003180 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800314c:	e096      	b.n	800327c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2210      	movs	r2, #16
 8003154:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f043 0204 	orr.w	r2, r3, #4
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <I2C_Slave_ISR_IT+0xe4>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800316e:	f040 8085 	bne.w	800327c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4619      	mov	r1, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fb75 	bl	8003868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800317e:	e07d      	b.n	800327c <I2C_Slave_ISR_IT+0x1ee>
 8003180:	e07c      	b.n	800327c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d030      	beq.n	80031f0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02a      	beq.n	80031f0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d018      	beq.n	80031d6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d14f      	bne.n	8003280 <I2C_Slave_ISR_IT+0x1f2>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031e6:	d04b      	beq.n	8003280 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f97f 	bl	80034ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80031ee:	e047      	b.n	8003280 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	08db      	lsrs	r3, r3, #3
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	08db      	lsrs	r3, r3, #3
 8003200:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003208:	6939      	ldr	r1, [r7, #16]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f8ea 	bl	80033e4 <I2C_ITAddrCplt>
 8003210:	e037      	b.n	8003282 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d031      	beq.n	8003282 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003226:	2b00      	cmp	r3, #0
 8003228:	d02b      	beq.n	8003282 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d018      	beq.n	8003266 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
 8003264:	e00d      	b.n	8003282 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800326c:	d002      	beq.n	8003274 <I2C_Slave_ISR_IT+0x1e6>
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f939 	bl	80034ec <I2C_ITSlaveSeqCplt>
 800327a:	e002      	b.n	8003282 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003280:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	8979      	ldrh	r1, [r7, #10]
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <I2C_RequestMemoryWrite+0xa4>)
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fdb5 	bl	8003e2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fc47 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e02c      	b.n	8003330 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	629a      	str	r2, [r3, #40]	; 0x28
 80032e6:	e015      	b.n	8003314 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032e8:	893b      	ldrh	r3, [r7, #8]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fc2d 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e012      	b.n	8003330 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800330a:	893b      	ldrh	r3, [r7, #8]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2200      	movs	r2, #0
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fbdb 	bl	8003ada <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	80002000 	.word	0x80002000

0800333c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <I2C_RequestMemoryRead+0xa4>)
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2300      	movs	r3, #0
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fd62 	bl	8003e2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	69b9      	ldr	r1, [r7, #24]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fbf4 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e02c      	b.n	80033d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
 800338c:	e015      	b.n	80033ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	b29b      	uxth	r3, r3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	69b9      	ldr	r1, [r7, #24]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fbda 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e012      	b.n	80033d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033b0:	893b      	ldrh	r3, [r7, #8]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2140      	movs	r1, #64	; 0x40
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fb88 	bl	8003ada <I2C_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	80002000 	.word	0x80002000

080033e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033fa:	2b28      	cmp	r3, #40	; 0x28
 80033fc:	d16a      	bne.n	80034d4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	b29b      	uxth	r3, r3
 8003418:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800341c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003438:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d138      	bne.n	80034b4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	09db      	lsrs	r3, r3, #7
 8003446:	b29a      	uxth	r2, r3
 8003448:	89bb      	ldrh	r3, [r7, #12]
 800344a:	4053      	eors	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	f003 0306 	and.w	r3, r3, #6
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11c      	bne.n	8003490 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	2b02      	cmp	r3, #2
 800346a:	d13b      	bne.n	80034e4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2208      	movs	r2, #8
 8003478:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003482:	89ba      	ldrh	r2, [r7, #12]
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	4619      	mov	r1, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fdd4 	bl	8003036 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800348e:	e029      	b.n	80034e4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fcf9 	bl	8003e90 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034a6:	89ba      	ldrh	r2, [r7, #12]
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fdc2 	bl	8003036 <HAL_I2C_AddrCallback>
}
 80034b2:	e017      	b.n	80034e4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80034b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fce9 	bl	8003e90 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80034c6:	89ba      	ldrh	r2, [r7, #12]
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fdb2 	bl	8003036 <HAL_I2C_AddrCallback>
}
 80034d2:	e007      	b.n	80034e4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2208      	movs	r2, #8
 80034da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0b9b      	lsrs	r3, r3, #14
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e00d      	b.n	800353e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0bdb      	lsrs	r3, r3, #15
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800353c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b29      	cmp	r3, #41	; 0x29
 8003548:	d112      	bne.n	8003570 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2228      	movs	r2, #40	; 0x28
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2221      	movs	r2, #33	; 0x21
 8003556:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003558:	2101      	movs	r1, #1
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fc98 	bl	8003e90 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fd50 	bl	800300e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800356e:	e017      	b.n	80035a0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b2a      	cmp	r3, #42	; 0x2a
 800357a:	d111      	bne.n	80035a0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2228      	movs	r2, #40	; 0x28
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2222      	movs	r2, #34	; 0x22
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800358a:	2102      	movs	r1, #2
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fc7f 	bl	8003e90 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fd41 	bl	8003022 <HAL_I2C_SlaveRxCpltCallback>
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2220      	movs	r2, #32
 80035cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	2b21      	cmp	r3, #33	; 0x21
 80035d2:	d002      	beq.n	80035da <I2C_ITSlaveCplt+0x32>
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b29      	cmp	r3, #41	; 0x29
 80035d8:	d108      	bne.n	80035ec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80035da:	f248 0101 	movw	r1, #32769	; 0x8001
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fc56 	bl	8003e90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2221      	movs	r2, #33	; 0x21
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
 80035ea:	e00d      	b.n	8003608 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b22      	cmp	r3, #34	; 0x22
 80035f0:	d002      	beq.n	80035f8 <I2C_ITSlaveCplt+0x50>
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b2a      	cmp	r3, #42	; 0x2a
 80035f6:	d107      	bne.n	8003608 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fc47 	bl	8003e90 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2222      	movs	r2, #34	; 0x22
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003616:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4b64      	ldr	r3, [pc, #400]	; (80037b4 <I2C_ITSlaveCplt+0x20c>)
 8003624:	400b      	ands	r3, r1
 8003626:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fa14 	bl	8003a56 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	0b9b      	lsrs	r3, r3, #14
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d013      	beq.n	8003662 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003648:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003660:	e018      	b.n	8003694 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	0bdb      	lsrs	r3, r3, #15
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d012      	beq.n	8003694 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d020      	beq.n	80036e2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0304 	bic.w	r3, r3, #4
 80036a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00c      	beq.n	80036e2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	2b00      	cmp	r3, #0
 800370c:	d010      	beq.n	8003730 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8a7 	bl	8003868 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b28      	cmp	r3, #40	; 0x28
 8003724:	d141      	bne.n	80037aa <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003726:	6979      	ldr	r1, [r7, #20]
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f847 	bl	80037bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800372e:	e03c      	b.n	80037aa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003738:	d014      	beq.n	8003764 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff fed6 	bl	80034ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <I2C_ITSlaveCplt+0x210>)
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fc78 	bl	8003052 <HAL_I2C_ListenCpltCallback>
}
 8003762:	e022      	b.n	80037aa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b22      	cmp	r3, #34	; 0x22
 800376e:	d10e      	bne.n	800378e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fc4b 	bl	8003022 <HAL_I2C_SlaveRxCpltCallback>
}
 800378c:	e00d      	b.n	80037aa <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fc32 	bl	800300e <HAL_I2C_SlaveTxCpltCallback>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	fe00e800 	.word	0xfe00e800
 80037b8:	ffff0000 	.word	0xffff0000

080037bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a26      	ldr	r2, [pc, #152]	; (8003864 <I2C_ITListenCplt+0xa8>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	089b      	lsrs	r3, r3, #2
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d022      	beq.n	800383a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d012      	beq.n	800383a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800383a:	f248 0103 	movw	r1, #32771	; 0x8003
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fb26 	bl	8003e90 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2210      	movs	r2, #16
 800384a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fbfc 	bl	8003052 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	ffff0000 	.word	0xffff0000

08003868 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a5d      	ldr	r2, [pc, #372]	; (80039fc <I2C_ITError+0x194>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b28      	cmp	r3, #40	; 0x28
 800389e:	d005      	beq.n	80038ac <I2C_ITError+0x44>
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b29      	cmp	r3, #41	; 0x29
 80038a4:	d002      	beq.n	80038ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b2a      	cmp	r3, #42	; 0x2a
 80038aa:	d10b      	bne.n	80038c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038ac:	2103      	movs	r1, #3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 faee 	bl	8003e90 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2228      	movs	r2, #40	; 0x28
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a50      	ldr	r2, [pc, #320]	; (8003a00 <I2C_ITError+0x198>)
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34
 80038c2:	e011      	b.n	80038e8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fae1 	bl	8003e90 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b60      	cmp	r3, #96	; 0x60
 80038d8:	d003      	beq.n	80038e2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d039      	beq.n	800396a <I2C_ITError+0x102>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b11      	cmp	r3, #17
 80038fa:	d002      	beq.n	8003902 <I2C_ITError+0x9a>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b21      	cmp	r3, #33	; 0x21
 8003900:	d133      	bne.n	800396a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d107      	bne.n	8003922 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003920:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fe90 	bl	800264c <HAL_DMA_GetState>
 800392c:	4603      	mov	r3, r0
 800392e:	2b01      	cmp	r3, #1
 8003930:	d017      	beq.n	8003962 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	4a33      	ldr	r2, [pc, #204]	; (8003a04 <I2C_ITError+0x19c>)
 8003938:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fe3f 	bl	80025ca <HAL_DMA_Abort_IT>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d04d      	beq.n	80039ee <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800395c:	4610      	mov	r0, r2
 800395e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003960:	e045      	b.n	80039ee <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f850 	bl	8003a08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003968:	e041      	b.n	80039ee <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d039      	beq.n	80039e6 <I2C_ITError+0x17e>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b12      	cmp	r3, #18
 8003976:	d002      	beq.n	800397e <I2C_ITError+0x116>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b22      	cmp	r3, #34	; 0x22
 800397c:	d133      	bne.n	80039e6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398c:	d107      	bne.n	800399e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800399c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe fe52 	bl	800264c <HAL_DMA_GetState>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d017      	beq.n	80039de <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <I2C_ITError+0x19c>)
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fe01 	bl	80025ca <HAL_DMA_Abort_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d011      	beq.n	80039f2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039d8:	4610      	mov	r0, r2
 80039da:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039dc:	e009      	b.n	80039f2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f812 	bl	8003a08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039e4:	e005      	b.n	80039f2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f80e 	bl	8003a08 <I2C_TreatErrorCallback>
  }
}
 80039ec:	e002      	b.n	80039f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039f2:	bf00      	nop
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	ffff0000 	.word	0xffff0000
 8003a00:	0800308f 	.word	0x0800308f
 8003a04:	08003a9f 	.word	0x08003a9f

08003a08 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b60      	cmp	r3, #96	; 0x60
 8003a1a:	d10e      	bne.n	8003a3a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fb21 	bl	800307a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a38:	e009      	b.n	8003a4e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fb0c 	bl	8003066 <HAL_I2C_ErrorCallback>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d103      	bne.n	8003a74 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2200      	movs	r2, #0
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d007      	beq.n	8003a92 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	619a      	str	r2, [r3, #24]
  }
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	2200      	movs	r2, #0
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	2200      	movs	r2, #0
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f7ff ff9b 	bl	8003a08 <I2C_TreatErrorCallback>
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aea:	e022      	b.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d01e      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fe f99a 	bl	8001e2c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d113      	bne.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00f      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0cd      	beq.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b66:	e02c      	b.n	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f871 	bl	8003c54 <I2C_IsErrorOccurred>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e02a      	b.n	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d01e      	beq.n	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7fe f952 	bl	8001e2c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d113      	bne.n	8003bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e007      	b.n	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d1cb      	bne.n	8003b68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be6:	e028      	b.n	8003c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f831 	bl	8003c54 <I2C_IsErrorOccurred>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e026      	b.n	8003c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfc:	f7fe f916 	bl	8001e2c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d302      	bcc.n	8003c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d113      	bne.n	8003c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e007      	b.n	8003c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d1cf      	bne.n	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	; 0x28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d075      	beq.n	8003d6c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2210      	movs	r2, #16
 8003c86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c88:	e056      	b.n	8003d38 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d052      	beq.n	8003d38 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fe f8cb 	bl	8001e2c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_IsErrorOccurred+0x54>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d147      	bne.n	8003d38 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cca:	d12e      	bne.n	8003d2a <I2C_IsErrorOccurred+0xd6>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd2:	d02a      	beq.n	8003d2a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d027      	beq.n	8003d2a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cea:	f7fe f89f 	bl	8001e2c <HAL_GetTick>
 8003cee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf0:	e01b      	b.n	8003d2a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cf2:	f7fe f89b 	bl	8001e2c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b19      	cmp	r3, #25
 8003cfe:	d914      	bls.n	8003d2a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d1dc      	bne.n	8003cf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d003      	beq.n	8003d4e <I2C_IsErrorOccurred+0xfa>
 8003d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d09d      	beq.n	8003c8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01c      	beq.n	8003e1c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f7ff fe37 	bl	8003a56 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <I2C_IsErrorOccurred+0x1d4>)
 8003df4:	400b      	ands	r3, r1
 8003df6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	fe00e800 	.word	0xfe00e800

08003e2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e44:	7a7b      	ldrb	r3, [r7, #9]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	0d5b      	lsrs	r3, r3, #21
 8003e66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <I2C_TransferConfig+0x60>)
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	ea02 0103 	and.w	r1, r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	03ff63ff 	.word	0x03ff63ff

08003e90 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00f      	beq.n	8003eca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003eb0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ebe:	2b28      	cmp	r3, #40	; 0x28
 8003ec0:	d003      	beq.n	8003eca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ec8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00f      	beq.n	8003ef4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003eda:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ee8:	2b28      	cmp	r3, #40	; 0x28
 8003eea:	d003      	beq.n	8003ef4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ef2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ef4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	da03      	bge.n	8003f04 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f04:	887b      	ldrh	r3, [r7, #2]
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d103      	bne.n	8003f12 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d103      	bne.n	8003f20 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f043 0320 	orr.w	r3, r3, #32
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d103      	bne.n	8003f2e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	43da      	mvns	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d138      	bne.n	8003fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e032      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d139      	bne.n	800406c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004002:	2302      	movs	r3, #2
 8004004:	e033      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2224      	movs	r2, #36	; 0x24
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004034:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40007000 	.word	0x40007000

0800409c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40007000 	.word	0x40007000

080040b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c6:	d130      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d4:	d038      	beq.n	8004148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d6:	4b20      	ldr	r3, [pc, #128]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040de:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2232      	movs	r2, #50	; 0x32
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	3301      	adds	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040fc:	e002      	b.n	8004104 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b01      	subs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d102      	bne.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f2      	bne.n	80040fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004124:	d110      	bne.n	8004148 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e00f      	b.n	800414a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d007      	beq.n	8004148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004138:	4b07      	ldr	r3, [pc, #28]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004140:	4a05      	ldr	r2, [pc, #20]	; (8004158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004146:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000
 800415c:	20000004 	.word	0x20000004
 8004160:	431bde83 	.word	0x431bde83

08004164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f000 bc02 	b.w	800497c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004178:	4b96      	ldr	r3, [pc, #600]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004182:	4b94      	ldr	r3, [pc, #592]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80e4 	beq.w	8004362 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4c>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	f040 808b 	bne.w	80042be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	f040 8087 	bne.w	80042be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041b0:	4b88      	ldr	r3, [pc, #544]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_OscConfig+0x64>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e3d9      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	4b81      	ldr	r3, [pc, #516]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <HAL_RCC_OscConfig+0x7e>
 80041d8:	4b7e      	ldr	r3, [pc, #504]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e0:	e005      	b.n	80041ee <HAL_RCC_OscConfig+0x8a>
 80041e2:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80041e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d223      	bcs.n	800423a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fd8c 	bl	8004d14 <RCC_SetFlashLatencyFromMSIRange>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e3ba      	b.n	800497c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004206:	4b73      	ldr	r3, [pc, #460]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a72      	ldr	r2, [pc, #456]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 800420c:	f043 0308 	orr.w	r3, r3, #8
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	496d      	ldr	r1, [pc, #436]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004224:	4b6b      	ldr	r3, [pc, #428]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4968      	ldr	r1, [pc, #416]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	e025      	b.n	8004286 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800423a:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004240:	f043 0308 	orr.w	r3, r3, #8
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4960      	ldr	r1, [pc, #384]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004254:	4313      	orrs	r3, r2
 8004256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004258:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	495b      	ldr	r1, [pc, #364]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fd4c 	bl	8004d14 <RCC_SetFlashLatencyFromMSIRange>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e37a      	b.n	800497c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004286:	f000 fc81 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b51      	ldr	r3, [pc, #324]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	4950      	ldr	r1, [pc, #320]	; (80043d8 <HAL_RCC_OscConfig+0x274>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	fa22 f303 	lsr.w	r3, r2, r3
 80042a2:	4a4e      	ldr	r2, [pc, #312]	; (80043dc <HAL_RCC_OscConfig+0x278>)
 80042a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042a6:	4b4e      	ldr	r3, [pc, #312]	; (80043e0 <HAL_RCC_OscConfig+0x27c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd fd6e 	bl	8001d8c <HAL_InitTick>
 80042b0:	4603      	mov	r3, r0
 80042b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d052      	beq.n	8004360 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	e35e      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d032      	beq.n	800432c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042c6:	4b43      	ldr	r3, [pc, #268]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a42      	ldr	r2, [pc, #264]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042d2:	f7fd fdab 	bl	8001e2c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042da:	f7fd fda7 	bl	8001e2c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e347      	b.n	800497c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f8:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a35      	ldr	r2, [pc, #212]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80042fe:	f043 0308 	orr.w	r3, r3, #8
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	4930      	ldr	r1, [pc, #192]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	492b      	ldr	r1, [pc, #172]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
 800432a:	e01a      	b.n	8004362 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800432c:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a28      	ldr	r2, [pc, #160]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004338:	f7fd fd78 	bl	8001e2c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004340:	f7fd fd74 	bl	8001e2c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e314      	b.n	800497c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x1dc>
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004360:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d073      	beq.n	8004456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d005      	beq.n	8004380 <HAL_RCC_OscConfig+0x21c>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d10e      	bne.n	8004398 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b03      	cmp	r3, #3
 800437e:	d10b      	bne.n	8004398 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d063      	beq.n	8004454 <HAL_RCC_OscConfig+0x2f0>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d15f      	bne.n	8004454 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e2f1      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a0:	d106      	bne.n	80043b0 <HAL_RCC_OscConfig+0x24c>
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e025      	b.n	80043fc <HAL_RCC_OscConfig+0x298>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b8:	d114      	bne.n	80043e4 <HAL_RCC_OscConfig+0x280>
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a02      	ldr	r2, [pc, #8]	; (80043d4 <HAL_RCC_OscConfig+0x270>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e013      	b.n	80043fc <HAL_RCC_OscConfig+0x298>
 80043d4:	40021000 	.word	0x40021000
 80043d8:	08008548 	.word	0x08008548
 80043dc:	20000004 	.word	0x20000004
 80043e0:	20000008 	.word	0x20000008
 80043e4:	4ba0      	ldr	r3, [pc, #640]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a9f      	ldr	r2, [pc, #636]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b9d      	ldr	r3, [pc, #628]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a9c      	ldr	r2, [pc, #624]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd fd12 	bl	8001e2c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fd fd0e 	bl	8001e2c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e2ae      	b.n	800497c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800441e:	4b92      	ldr	r3, [pc, #584]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x2a8>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd fcfe 	bl	8001e2c <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004434:	f7fd fcfa 	bl	8001e2c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e29a      	b.n	800497c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004446:	4b88      	ldr	r3, [pc, #544]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x2d0>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d060      	beq.n	8004524 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d005      	beq.n	8004474 <HAL_RCC_OscConfig+0x310>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d119      	bne.n	80044a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d116      	bne.n	80044a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004474:	4b7c      	ldr	r3, [pc, #496]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_OscConfig+0x328>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e277      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448c:	4b76      	ldr	r3, [pc, #472]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	4973      	ldr	r1, [pc, #460]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a0:	e040      	b.n	8004524 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d023      	beq.n	80044f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044aa:	4b6f      	ldr	r3, [pc, #444]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6e      	ldr	r2, [pc, #440]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fd fcb9 	bl	8001e2c <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044be:	f7fd fcb5 	bl	8001e2c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e255      	b.n	800497c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d0:	4b65      	ldr	r3, [pc, #404]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b62      	ldr	r3, [pc, #392]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	495f      	ldr	r1, [pc, #380]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
 80044f0:	e018      	b.n	8004524 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f2:	4b5d      	ldr	r3, [pc, #372]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5c      	ldr	r2, [pc, #368]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80044f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fd fc95 	bl	8001e2c <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004506:	f7fd fc91 	bl	8001e2c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e231      	b.n	800497c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d03c      	beq.n	80045aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01c      	beq.n	8004572 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004538:	4b4b      	ldr	r3, [pc, #300]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800453a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453e:	4a4a      	ldr	r2, [pc, #296]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd fc70 	bl	8001e2c <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004550:	f7fd fc6c 	bl	8001e2c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e20c      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004562:	4b41      	ldr	r3, [pc, #260]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ef      	beq.n	8004550 <HAL_RCC_OscConfig+0x3ec>
 8004570:	e01b      	b.n	80045aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004578:	4a3b      	ldr	r2, [pc, #236]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fd fc53 	bl	8001e2c <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800458a:	f7fd fc4f 	bl	8001e2c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e1ef      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ef      	bne.n	800458a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80a6 	beq.w	8004704 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045bc:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10d      	bne.n	80045e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	4b27      	ldr	r3, [pc, #156]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	4a26      	ldr	r2, [pc, #152]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d2:	6593      	str	r3, [r2, #88]	; 0x58
 80045d4:	4b24      	ldr	r3, [pc, #144]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e0:	2301      	movs	r3, #1
 80045e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e4:	4b21      	ldr	r3, [pc, #132]	; (800466c <HAL_RCC_OscConfig+0x508>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d118      	bne.n	8004622 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_RCC_OscConfig+0x508>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_RCC_OscConfig+0x508>)
 80045f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fc:	f7fd fc16 	bl	8001e2c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004604:	f7fd fc12 	bl	8001e2c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e1b2      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <HAL_RCC_OscConfig+0x508>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <HAL_RCC_OscConfig+0x4d8>
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	4a0d      	ldr	r2, [pc, #52]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800463a:	e029      	b.n	8004690 <HAL_RCC_OscConfig+0x52c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d115      	bne.n	8004670 <HAL_RCC_OscConfig+0x50c>
 8004644:	4b08      	ldr	r3, [pc, #32]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	4a07      	ldr	r2, [pc, #28]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	4a03      	ldr	r2, [pc, #12]	; (8004668 <HAL_RCC_OscConfig+0x504>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004664:	e014      	b.n	8004690 <HAL_RCC_OscConfig+0x52c>
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000
 800466c:	40007000 	.word	0x40007000
 8004670:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a99      	ldr	r2, [pc, #612]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004680:	4b96      	ldr	r3, [pc, #600]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	4a95      	ldr	r2, [pc, #596]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d016      	beq.n	80046c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fd fbc8 	bl	8001e2c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fd fbc4 	bl	8001e2c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e162      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b6:	4b89      	ldr	r3, [pc, #548]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ed      	beq.n	80046a0 <HAL_RCC_OscConfig+0x53c>
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fd fbb1 	bl	8001e2c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fd fbad 	bl	8001e2c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e14b      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046e4:	4b7d      	ldr	r3, [pc, #500]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ed      	bne.n	80046ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f2:	7ffb      	ldrb	r3, [r7, #31]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b78      	ldr	r3, [pc, #480]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	4a77      	ldr	r2, [pc, #476]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004702:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d03c      	beq.n	800478a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01c      	beq.n	8004752 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004718:	4b70      	ldr	r3, [pc, #448]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 800471a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471e:	4a6f      	ldr	r2, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fd fb80 	bl	8001e2c <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004730:	f7fd fb7c 	bl	8001e2c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e11c      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004742:	4b66      	ldr	r3, [pc, #408]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0ef      	beq.n	8004730 <HAL_RCC_OscConfig+0x5cc>
 8004750:	e01b      	b.n	800478a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004752:	4b62      	ldr	r3, [pc, #392]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004758:	4a60      	ldr	r2, [pc, #384]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 800475a:	f023 0301 	bic.w	r3, r3, #1
 800475e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004762:	f7fd fb63 	bl	8001e2c <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800476a:	f7fd fb5f 	bl	8001e2c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0ff      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800477c:	4b57      	ldr	r3, [pc, #348]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 800477e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ef      	bne.n	800476a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80f3 	beq.w	800497a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	2b02      	cmp	r3, #2
 800479a:	f040 80c9 	bne.w	8004930 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800479e:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0203 	and.w	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d12c      	bne.n	800480c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	3b01      	subs	r3, #1
 80047be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d123      	bne.n	800480c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d11b      	bne.n	800480c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d113      	bne.n	800480c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	3b01      	subs	r3, #1
 80047f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d109      	bne.n	800480c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	3b01      	subs	r3, #1
 8004806:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d06b      	beq.n	80048e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d062      	beq.n	80048d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004812:	4b32      	ldr	r3, [pc, #200]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0ac      	b.n	800497c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004822:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2d      	ldr	r2, [pc, #180]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800482e:	f7fd fafd 	bl	8001e2c <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004836:	f7fd faf9 	bl	8001e2c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e099      	b.n	800497c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004848:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004854:	4b21      	ldr	r3, [pc, #132]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_RCC_OscConfig+0x77c>)
 800485a:	4013      	ands	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004864:	3a01      	subs	r2, #1
 8004866:	0112      	lsls	r2, r2, #4
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800486e:	0212      	lsls	r2, r2, #8
 8004870:	4311      	orrs	r1, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004876:	0852      	lsrs	r2, r2, #1
 8004878:	3a01      	subs	r2, #1
 800487a:	0552      	lsls	r2, r2, #21
 800487c:	4311      	orrs	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004882:	0852      	lsrs	r2, r2, #1
 8004884:	3a01      	subs	r2, #1
 8004886:	0652      	lsls	r2, r2, #25
 8004888:	4311      	orrs	r1, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800488e:	06d2      	lsls	r2, r2, #27
 8004890:	430a      	orrs	r2, r1
 8004892:	4912      	ldr	r1, [pc, #72]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 8004894:	4313      	orrs	r3, r2
 8004896:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 800489e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048b0:	f7fd fabc 	bl	8001e2c <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fd fab8 	bl	8001e2c <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e058      	b.n	800497c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ca:	4b04      	ldr	r3, [pc, #16]	; (80048dc <HAL_RCC_OscConfig+0x778>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048d6:	e050      	b.n	800497a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e04f      	b.n	800497c <HAL_RCC_OscConfig+0x818>
 80048dc:	40021000 	.word	0x40021000
 80048e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d144      	bne.n	800497a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a23      	ldr	r2, [pc, #140]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 80048f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048fc:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a20      	ldr	r2, [pc, #128]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 8004902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004908:	f7fd fa90 	bl	8001e2c <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fd fa8c 	bl	8001e2c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e02c      	b.n	800497c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x7ac>
 800492e:	e024      	b.n	800497a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d01f      	beq.n	8004976 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 800493c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004942:	f7fd fa73 	bl	8001e2c <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494a:	f7fd fa6f 	bl	8001e2c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00f      	b.n	800497c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	4905      	ldr	r1, [pc, #20]	; (8004984 <HAL_RCC_OscConfig+0x820>)
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCC_OscConfig+0x824>)
 8004970:	4013      	ands	r3, r2
 8004972:	60cb      	str	r3, [r1, #12]
 8004974:	e001      	b.n	800497a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	feeefffc 	.word	0xfeeefffc

0800498c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0e7      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b75      	ldr	r3, [pc, #468]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d910      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b72      	ldr	r3, [pc, #456]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 0207 	bic.w	r2, r3, #7
 80049b6:	4970      	ldr	r1, [pc, #448]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b6e      	ldr	r3, [pc, #440]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0cf      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d908      	bls.n	80049fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4960      	ldr	r1, [pc, #384]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d04c      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	4b5a      	ldr	r3, [pc, #360]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d121      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e0a6      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2a:	4b54      	ldr	r3, [pc, #336]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d115      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e09a      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a42:	4b4e      	ldr	r3, [pc, #312]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e08e      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a52:	4b4a      	ldr	r3, [pc, #296]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e086      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a62:	4b46      	ldr	r3, [pc, #280]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4943      	ldr	r1, [pc, #268]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fd f9da 	bl	8001e2c <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7fd f9d6 	bl	8001e2c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e06e      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	4b3a      	ldr	r3, [pc, #232]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 020c 	and.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1eb      	bne.n	8004a7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d010      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d208      	bcs.n	8004ad2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b2e      	ldr	r3, [pc, #184]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	492b      	ldr	r1, [pc, #172]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d210      	bcs.n	8004b02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f023 0207 	bic.w	r2, r3, #7
 8004ae8:	4923      	ldr	r1, [pc, #140]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af0:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <HAL_RCC_ClockConfig+0x1ec>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e036      	b.n	8004b70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	4918      	ldr	r1, [pc, #96]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d009      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4910      	ldr	r1, [pc, #64]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b40:	f000 f824 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	490b      	ldr	r1, [pc, #44]	; (8004b80 <HAL_RCC_ClockConfig+0x1f4>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <HAL_RCC_ClockConfig+0x1f8>)
 8004b5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCC_ClockConfig+0x1fc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fd f911 	bl	8001d8c <HAL_InitTick>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	08008548 	.word	0x08008548
 8004b84:	20000004 	.word	0x20000004
 8004b88:	20000008 	.word	0x20000008

08004b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b9a:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d121      	bne.n	8004bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d11e      	bne.n	8004bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bcc:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	e005      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004be8:	4a2b      	ldr	r2, [pc, #172]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10d      	bne.n	8004c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d102      	bne.n	8004c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c04:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	e004      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d134      	bne.n	8004c84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d003      	beq.n	8004c32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d003      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0xac>
 8004c30:	e005      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c32:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004c34:	617b      	str	r3, [r7, #20]
      break;
 8004c36:	e005      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c38:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c3a:	617b      	str	r3, [r7, #20]
      break;
 8004c3c:	e002      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	617b      	str	r3, [r7, #20]
      break;
 8004c42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	3301      	adds	r3, #1
 8004c50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	fb03 f202 	mul.w	r2, r3, r2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	0e5b      	lsrs	r3, r3, #25
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	3301      	adds	r3, #1
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c84:	69bb      	ldr	r3, [r7, #24]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3724      	adds	r7, #36	; 0x24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	08008560 	.word	0x08008560
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	007a1200 	.word	0x007a1200

08004ca4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000004 	.word	0x20000004

08004cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cc0:	f7ff fff0 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4904      	ldr	r1, [pc, #16]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	08008558 	.word	0x08008558

08004ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cec:	f7ff ffda 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0adb      	lsrs	r3, r3, #11
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4904      	ldr	r1, [pc, #16]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	08008558 	.word	0x08008558

08004d14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d20:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d2c:	f7ff f9b6 	bl	800409c <HAL_PWREx_GetVoltageRange>
 8004d30:	6178      	str	r0, [r7, #20]
 8004d32:	e014      	b.n	8004d5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d34:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	4a24      	ldr	r2, [pc, #144]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d4c:	f7ff f9a6 	bl	800409c <HAL_PWREx_GetVoltageRange>
 8004d50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d64:	d10b      	bne.n	8004d7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b80      	cmp	r3, #128	; 0x80
 8004d6a:	d919      	bls.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2ba0      	cmp	r3, #160	; 0xa0
 8004d70:	d902      	bls.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d72:	2302      	movs	r3, #2
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e013      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d78:	2301      	movs	r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	e010      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d902      	bls.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d84:	2303      	movs	r3, #3
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	e00a      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b80      	cmp	r3, #128	; 0x80
 8004d8e:	d102      	bne.n	8004d96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d90:	2302      	movs	r3, #2
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	e004      	b.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b70      	cmp	r3, #112	; 0x70
 8004d9a:	d101      	bne.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 0207 	bic.w	r2, r3, #7
 8004da8:	4909      	ldr	r1, [pc, #36]	; (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d001      	beq.n	8004dc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40022000 	.word	0x40022000

08004dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d031      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004df8:	d01a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004dfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dfe:	d814      	bhi.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e08:	d10f      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e0a:	4b5d      	ldr	r3, [pc, #372]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	4a5c      	ldr	r2, [pc, #368]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e16:	e00c      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f9de 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e28:	e003      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	74fb      	strb	r3, [r7, #19]
      break;
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e32:	7cfb      	ldrb	r3, [r7, #19]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e38:	4b51      	ldr	r3, [pc, #324]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	494e      	ldr	r1, [pc, #312]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e4e:	e001      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 809e 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e62:	2300      	movs	r3, #0
 8004e64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e66:	4b46      	ldr	r3, [pc, #280]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7c:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	4a3f      	ldr	r2, [pc, #252]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6593      	str	r3, [r2, #88]	; 0x58
 8004e88:	4b3d      	ldr	r3, [pc, #244]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e94:	2301      	movs	r3, #1
 8004e96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e98:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a39      	ldr	r2, [pc, #228]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea4:	f7fc ffc2 	bl	8001e2c <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eaa:	e009      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eac:	f7fc ffbe 	bl	8001e2c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d902      	bls.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	74fb      	strb	r3, [r7, #19]
        break;
 8004ebe:	e005      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec0:	4b30      	ldr	r3, [pc, #192]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0ef      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d15a      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed2:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004edc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01e      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d019      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eee:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004efa:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f1a:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d016      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fc ff7e 	bl	8001e2c <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f32:	e00b      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fc ff7a 	bl	8001e2c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d902      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	74fb      	strb	r3, [r7, #19]
            break;
 8004f4a:	e006      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ec      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6e:	4904      	ldr	r1, [pc, #16]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f76:	e009      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
 8004f7c:	e006      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f7e:	bf00      	nop
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f8c:	7c7b      	ldrb	r3, [r7, #17]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d105      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f92:	4b8a      	ldr	r3, [pc, #552]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	4a89      	ldr	r2, [pc, #548]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004faa:	4b84      	ldr	r3, [pc, #528]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb0:	f023 0203 	bic.w	r2, r3, #3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	4980      	ldr	r1, [pc, #512]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fcc:	4b7b      	ldr	r3, [pc, #492]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 020c 	bic.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	4978      	ldr	r1, [pc, #480]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fee:	4b73      	ldr	r3, [pc, #460]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	496f      	ldr	r1, [pc, #444]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005010:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	4967      	ldr	r1, [pc, #412]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005032:	4b62      	ldr	r3, [pc, #392]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	495e      	ldr	r1, [pc, #376]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005054:	4b59      	ldr	r3, [pc, #356]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	4956      	ldr	r1, [pc, #344]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005076:	4b51      	ldr	r3, [pc, #324]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	494d      	ldr	r1, [pc, #308]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d028      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005098:	4b48      	ldr	r3, [pc, #288]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	4945      	ldr	r1, [pc, #276]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b6:	d106      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	4b40      	ldr	r3, [pc, #256]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a3f      	ldr	r2, [pc, #252]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c2:	60d3      	str	r3, [r2, #12]
 80050c4:	e011      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ce:	d10c      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3304      	adds	r3, #4
 80050d4:	2101      	movs	r1, #1
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f882 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 80050dc:	4603      	mov	r3, r0
 80050de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d028      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050f6:	4b31      	ldr	r3, [pc, #196]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005104:	492d      	ldr	r1, [pc, #180]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005114:	d106      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	4a28      	ldr	r2, [pc, #160]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800511c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005120:	60d3      	str	r3, [r2, #12]
 8005122:	e011      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800512c:	d10c      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3304      	adds	r3, #4
 8005132:	2101      	movs	r1, #1
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f853 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01c      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005154:	4b19      	ldr	r3, [pc, #100]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	4916      	ldr	r1, [pc, #88]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005172:	d10c      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	2102      	movs	r1, #2
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f830 	bl	80051e0 <RCCEx_PLLSAI1_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800519a:	4b08      	ldr	r3, [pc, #32]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a8:	4904      	ldr	r1, [pc, #16]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a04      	ldr	r2, [pc, #16]	; (80051dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051ca:	f043 0304 	orr.w	r3, r3, #4
 80051ce:	6013      	str	r3, [r2, #0]
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000

080051e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ee:	4b74      	ldr	r3, [pc, #464]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051fa:	4b71      	ldr	r3, [pc, #452]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0203 	and.w	r2, r3, #3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d10d      	bne.n	8005226 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
       ||
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005212:	4b6b      	ldr	r3, [pc, #428]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
       ||
 8005222:	429a      	cmp	r2, r3
 8005224:	d047      	beq.n	80052b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e044      	b.n	80052b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d018      	beq.n	8005266 <RCCEx_PLLSAI1_Config+0x86>
 8005234:	2b03      	cmp	r3, #3
 8005236:	d825      	bhi.n	8005284 <RCCEx_PLLSAI1_Config+0xa4>
 8005238:	2b01      	cmp	r3, #1
 800523a:	d002      	beq.n	8005242 <RCCEx_PLLSAI1_Config+0x62>
 800523c:	2b02      	cmp	r3, #2
 800523e:	d009      	beq.n	8005254 <RCCEx_PLLSAI1_Config+0x74>
 8005240:	e020      	b.n	8005284 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005242:	4b5f      	ldr	r3, [pc, #380]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11d      	bne.n	800528a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005252:	e01a      	b.n	800528a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005254:	4b5a      	ldr	r3, [pc, #360]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005264:	e013      	b.n	800528e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005266:	4b56      	ldr	r3, [pc, #344]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005272:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005282:	e006      	b.n	8005292 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	73fb      	strb	r3, [r7, #15]
      break;
 8005288:	e004      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005292:	bf00      	nop
    }

    if(status == HAL_OK)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10d      	bne.n	80052b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800529a:	4b49      	ldr	r3, [pc, #292]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6819      	ldr	r1, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	430b      	orrs	r3, r1
 80052b0:	4943      	ldr	r1, [pc, #268]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d17c      	bne.n	80053b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052bc:	4b40      	ldr	r3, [pc, #256]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fc fdb0 	bl	8001e2c <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d0:	f7fc fdac 	bl	8001e2c <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
        break;
 80052e2:	e005      	b.n	80052f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052e4:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1ef      	bne.n	80052d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d15f      	bne.n	80053b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d110      	bne.n	800531e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052fc:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
 800530c:	0211      	lsls	r1, r2, #8
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68d2      	ldr	r2, [r2, #12]
 8005312:	06d2      	lsls	r2, r2, #27
 8005314:	430a      	orrs	r2, r1
 8005316:	492a      	ldr	r1, [pc, #168]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005318:	4313      	orrs	r3, r2
 800531a:	610b      	str	r3, [r1, #16]
 800531c:	e027      	b.n	800536e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d112      	bne.n	800534a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005324:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800532c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	0211      	lsls	r1, r2, #8
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6912      	ldr	r2, [r2, #16]
 800533a:	0852      	lsrs	r2, r2, #1
 800533c:	3a01      	subs	r2, #1
 800533e:	0552      	lsls	r2, r2, #21
 8005340:	430a      	orrs	r2, r1
 8005342:	491f      	ldr	r1, [pc, #124]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005344:	4313      	orrs	r3, r2
 8005346:	610b      	str	r3, [r1, #16]
 8005348:	e011      	b.n	800536e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005352:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6892      	ldr	r2, [r2, #8]
 800535a:	0211      	lsls	r1, r2, #8
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6952      	ldr	r2, [r2, #20]
 8005360:	0852      	lsrs	r2, r2, #1
 8005362:	3a01      	subs	r2, #1
 8005364:	0652      	lsls	r2, r2, #25
 8005366:	430a      	orrs	r2, r1
 8005368:	4915      	ldr	r1, [pc, #84]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800536a:	4313      	orrs	r3, r2
 800536c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005378:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537a:	f7fc fd57 	bl	8001e2c <HAL_GetTick>
 800537e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005380:	e009      	b.n	8005396 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005382:	f7fc fd53 	bl	8001e2c <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d902      	bls.n	8005396 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	73fb      	strb	r3, [r7, #15]
          break;
 8005394:	e005      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0ef      	beq.n	8005382 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	4903      	ldr	r1, [pc, #12]	; (80053c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40021000 	.word	0x40021000

080053c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e040      	b.n	8005458 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fc fab2 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2224      	movs	r2, #36	; 0x24
 80053f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fd62 	bl	8005ecc <UART_SetConfig>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e022      	b.n	8005458 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 ff82 	bl	8006324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800542e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800543e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f809 	bl	8006468 <UART_CheckIdleState>
 8005456:	4603      	mov	r3, r0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005474:	2b20      	cmp	r3, #32
 8005476:	f040 8082 	bne.w	800557e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_UART_Transmit+0x26>
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e07a      	b.n	8005580 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_UART_Transmit+0x38>
 8005494:	2302      	movs	r3, #2
 8005496:	e073      	b.n	8005580 <HAL_UART_Transmit+0x120>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2221      	movs	r2, #33	; 0x21
 80054ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ae:	f7fc fcbd 	bl	8001e2c <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	88fa      	ldrh	r2, [r7, #6]
 80054c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d108      	bne.n	80054e0 <HAL_UART_Transmit+0x80>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e003      	b.n	80054e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80054f0:	e02d      	b.n	800554e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2180      	movs	r1, #128	; 0x80
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fffc 	bl	80064fa <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e039      	b.n	8005580 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	881a      	ldrh	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551e:	b292      	uxth	r2, r2
 8005520:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	3302      	adds	r3, #2
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e008      	b.n	800553c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b292      	uxth	r2, r2
 8005534:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3301      	adds	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1cb      	bne.n	80054f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	2140      	movs	r1, #64	; 0x40
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 ffc8 	bl	80064fa <UART_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e005      	b.n	8005580 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e000      	b.n	8005580 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
  }
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	; 0x28
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800559c:	2b20      	cmp	r3, #32
 800559e:	f040 80bf 	bne.w	8005720 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_UART_Receive+0x26>
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e0b7      	b.n	8005722 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_UART_Receive+0x38>
 80055bc:	2302      	movs	r3, #2
 80055be:	e0b0      	b.n	8005722 <HAL_UART_Receive+0x19a>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2222      	movs	r2, #34	; 0x22
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055dc:	f7fc fc26 	bl	8001e2c <HAL_GetTick>
 80055e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fa:	d10e      	bne.n	800561a <HAL_UART_Receive+0x92>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <HAL_UART_Receive+0x88>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f240 12ff 	movw	r2, #511	; 0x1ff
 800560a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800560e:	e02d      	b.n	800566c <HAL_UART_Receive+0xe4>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005618:	e028      	b.n	800566c <HAL_UART_Receive+0xe4>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10d      	bne.n	800563e <HAL_UART_Receive+0xb6>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_UART_Receive+0xac>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	22ff      	movs	r2, #255	; 0xff
 800562e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005632:	e01b      	b.n	800566c <HAL_UART_Receive+0xe4>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	227f      	movs	r2, #127	; 0x7f
 8005638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800563c:	e016      	b.n	800566c <HAL_UART_Receive+0xe4>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005646:	d10d      	bne.n	8005664 <HAL_UART_Receive+0xdc>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_UART_Receive+0xd2>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	227f      	movs	r2, #127	; 0x7f
 8005654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005658:	e008      	b.n	800566c <HAL_UART_Receive+0xe4>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	223f      	movs	r2, #63	; 0x3f
 800565e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005662:	e003      	b.n	800566c <HAL_UART_Receive+0xe4>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005672:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d108      	bne.n	8005690 <HAL_UART_Receive+0x108>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	e003      	b.n	8005698 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005694:	2300      	movs	r3, #0
 8005696:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056a0:	e033      	b.n	800570a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	2120      	movs	r1, #32
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 ff24 	bl	80064fa <UART_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e032      	b.n	8005722 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10c      	bne.n	80056dc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	8a7b      	ldrh	r3, [r7, #18]
 80056cc:	4013      	ands	r3, r2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	3302      	adds	r3, #2
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e00d      	b.n	80056f8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	8a7b      	ldrh	r3, [r7, #18]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	4013      	ands	r3, r2
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1c5      	bne.n	80056a2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800572c:	b480      	push	{r7}
 800572e:	b08b      	sub	sp, #44	; 0x2c
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573e:	2b20      	cmp	r3, #32
 8005740:	d156      	bne.n	80057f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_UART_Transmit_IT+0x22>
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e04f      	b.n	80057f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_UART_Transmit_IT+0x34>
 800575c:	2302      	movs	r3, #2
 800575e:	e048      	b.n	80057f2 <HAL_UART_Transmit_IT+0xc6>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	88fa      	ldrh	r2, [r7, #6]
 8005772:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2221      	movs	r2, #33	; 0x21
 8005790:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	d107      	bne.n	80057ac <HAL_UART_Transmit_IT+0x80>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a16      	ldr	r2, [pc, #88]	; (8005800 <HAL_UART_Transmit_IT+0xd4>)
 80057a8:	669a      	str	r2, [r3, #104]	; 0x68
 80057aa:	e002      	b.n	80057b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <HAL_UART_Transmit_IT+0xd8>)
 80057b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	613b      	str	r3, [r7, #16]
   return(result);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69f9      	ldr	r1, [r7, #28]
 80057de:	6a3a      	ldr	r2, [r7, #32]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e6      	bne.n	80057ba <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	e000      	b.n	80057f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
  }
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	372c      	adds	r7, #44	; 0x2c
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	080069c3 	.word	0x080069c3
 8005804:	0800690b 	.word	0x0800690b

08005808 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581a:	2b20      	cmp	r3, #32
 800581c:	d142      	bne.n	80058a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_UART_Receive_IT+0x22>
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e03b      	b.n	80058a6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_UART_Receive_IT+0x34>
 8005838:	2302      	movs	r3, #2
 800583a:	e034      	b.n	80058a6 <HAL_UART_Receive_IT+0x9e>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a18      	ldr	r2, [pc, #96]	; (80058b0 <HAL_UART_Receive_IT+0xa8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d01f      	beq.n	8005894 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	613b      	str	r3, [r7, #16]
   return(result);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	69f9      	ldr	r1, [r7, #28]
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	61bb      	str	r3, [r7, #24]
   return(result);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e6      	bne.n	8005862 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	461a      	mov	r2, r3
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fef2 	bl	8006684 <UART_Start_Receive_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	e000      	b.n	80058a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3728      	adds	r7, #40	; 0x28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40008000 	.word	0x40008000

080058b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b0ba      	sub	sp, #232	; 0xe8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058de:	f640 030f 	movw	r3, #2063	; 0x80f
 80058e2:	4013      	ands	r3, r2
 80058e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d115      	bne.n	800591c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00f      	beq.n	800591c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 82a6 	beq.w	8005e5e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	4798      	blx	r3
      }
      return;
 800591a:	e2a0      	b.n	8005e5e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800591c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8117 	beq.w	8005b54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005932:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005936:	4b85      	ldr	r3, [pc, #532]	; (8005b4c <HAL_UART_IRQHandler+0x298>)
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 810a 	beq.w	8005b54 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <HAL_UART_IRQHandler+0xbc>
 800594c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00b      	beq.n	8005970 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005966:	f043 0201 	orr.w	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d011      	beq.n	80059a0 <HAL_UART_IRQHandler+0xec>
 800597c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2202      	movs	r2, #2
 800598e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d011      	beq.n	80059d0 <HAL_UART_IRQHandler+0x11c>
 80059ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2204      	movs	r2, #4
 80059be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c6:	f043 0202 	orr.w	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d017      	beq.n	8005a0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2208      	movs	r2, #8
 80059fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a02:	f043 0208 	orr.w	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d012      	beq.n	8005a3e <HAL_UART_IRQHandler+0x18a>
 8005a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 820c 	beq.w	8005e62 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d005      	beq.n	8005a96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04f      	beq.n	8005b36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 febe 	bl	8006818 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d141      	bne.n	8005b2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1d9      	bne.n	8005aaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <HAL_UART_IRQHandler+0x29c>)
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fc fd5d 	bl	80025ca <HAL_DMA_Abort_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d017      	beq.n	8005b46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	e00f      	b.n	8005b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9ba 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	e00b      	b.n	8005b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9b6 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	e007      	b.n	8005b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f9b2 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b44:	e18d      	b.n	8005e62 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b46:	bf00      	nop
    return;
 8005b48:	e18b      	b.n	8005e62 <HAL_UART_IRQHandler+0x5ae>
 8005b4a:	bf00      	nop
 8005b4c:	04000120 	.word	0x04000120
 8005b50:	080068df 	.word	0x080068df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 8146 	bne.w	8005dea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 813f 	beq.w	8005dea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8138 	beq.w	8005dea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2210      	movs	r2, #16
 8005b80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	f040 80b4 	bne.w	8005cfa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 815f 	beq.w	8005e66 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	f080 8157 	bcs.w	8005e66 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 8085 	bne.w	8005cde <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1da      	bne.n	8005bd4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e1      	bne.n	8005c1e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e3      	bne.n	8005c5a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cae:	f023 0310 	bic.w	r3, r3, #16
 8005cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e4      	bne.n	8005c9e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fc fc38 	bl	800254e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f8de 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cf8:	e0b5      	b.n	8005e66 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80a7 	beq.w	8005e6a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a2 	beq.w	8005e6a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d48:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e4      	bne.n	8005d26 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3308      	adds	r3, #8
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d80:	633a      	str	r2, [r7, #48]	; 0x30
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e3      	bne.n	8005d5c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	69b9      	ldr	r1, [r7, #24]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e4      	bne.n	8005da6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f866 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005de8:	e03f      	b.n	8005e6a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00e      	beq.n	8005e14 <HAL_UART_IRQHandler+0x560>
 8005df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 ffc2 	bl	8006d96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e12:	e02d      	b.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01c      	beq.n	8005e6e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4798      	blx	r3
    }
    return;
 8005e3c:	e017      	b.n	8005e6e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d012      	beq.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fe13 	bl	8006a82 <UART_EndTransmit_IT>
    return;
 8005e5c:	e008      	b.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e5e:	bf00      	nop
 8005e60:	e006      	b.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e70:	37e8      	adds	r7, #232	; 0xe8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop

08005e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed0:	b08a      	sub	sp, #40	; 0x28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4bb4      	ldr	r3, [pc, #720]	; (80061cc <UART_SetConfig+0x300>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4aa9      	ldr	r2, [pc, #676]	; (80061d0 <UART_SetConfig+0x304>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f34:	4313      	orrs	r3, r2
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4aa0      	ldr	r2, [pc, #640]	; (80061d4 <UART_SetConfig+0x308>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d126      	bne.n	8005fa4 <UART_SetConfig+0xd8>
 8005f56:	4ba0      	ldr	r3, [pc, #640]	; (80061d8 <UART_SetConfig+0x30c>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d81b      	bhi.n	8005f9c <UART_SetConfig+0xd0>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0xa0>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005f7d 	.word	0x08005f7d
 8005f70:	08005f8d 	.word	0x08005f8d
 8005f74:	08005f85 	.word	0x08005f85
 8005f78:	08005f95 	.word	0x08005f95
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f82:	e080      	b.n	8006086 <UART_SetConfig+0x1ba>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8a:	e07c      	b.n	8006086 <UART_SetConfig+0x1ba>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f92:	e078      	b.n	8006086 <UART_SetConfig+0x1ba>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9a:	e074      	b.n	8006086 <UART_SetConfig+0x1ba>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa2:	e070      	b.n	8006086 <UART_SetConfig+0x1ba>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a8c      	ldr	r2, [pc, #560]	; (80061dc <UART_SetConfig+0x310>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d138      	bne.n	8006020 <UART_SetConfig+0x154>
 8005fae:	4b8a      	ldr	r3, [pc, #552]	; (80061d8 <UART_SetConfig+0x30c>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb4:	f003 030c 	and.w	r3, r3, #12
 8005fb8:	2b0c      	cmp	r3, #12
 8005fba:	d82d      	bhi.n	8006018 <UART_SetConfig+0x14c>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xf8>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005ff9 	.word	0x08005ff9
 8005fc8:	08006019 	.word	0x08006019
 8005fcc:	08006019 	.word	0x08006019
 8005fd0:	08006019 	.word	0x08006019
 8005fd4:	08006009 	.word	0x08006009
 8005fd8:	08006019 	.word	0x08006019
 8005fdc:	08006019 	.word	0x08006019
 8005fe0:	08006019 	.word	0x08006019
 8005fe4:	08006001 	.word	0x08006001
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	08006019 	.word	0x08006019
 8005ff0:	08006019 	.word	0x08006019
 8005ff4:	08006011 	.word	0x08006011
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e042      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006000:	2302      	movs	r3, #2
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e03e      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600e:	e03a      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006016:	e036      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601e:	e032      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a6a      	ldr	r2, [pc, #424]	; (80061d0 <UART_SetConfig+0x304>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d12a      	bne.n	8006080 <UART_SetConfig+0x1b4>
 800602a:	4b6b      	ldr	r3, [pc, #428]	; (80061d8 <UART_SetConfig+0x30c>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006038:	d01a      	beq.n	8006070 <UART_SetConfig+0x1a4>
 800603a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800603e:	d81b      	bhi.n	8006078 <UART_SetConfig+0x1ac>
 8006040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006044:	d00c      	beq.n	8006060 <UART_SetConfig+0x194>
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800604a:	d815      	bhi.n	8006078 <UART_SetConfig+0x1ac>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <UART_SetConfig+0x18c>
 8006050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006054:	d008      	beq.n	8006068 <UART_SetConfig+0x19c>
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x1ac>
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e012      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006060:	2302      	movs	r3, #2
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e00e      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e00a      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e006      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e002      	b.n	8006086 <UART_SetConfig+0x1ba>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a51      	ldr	r2, [pc, #324]	; (80061d0 <UART_SetConfig+0x304>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d17a      	bne.n	8006186 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006094:	2b08      	cmp	r3, #8
 8006096:	d824      	bhi.n	80060e2 <UART_SetConfig+0x216>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x1d4>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060d3 	.word	0x080060d3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060e3 	.word	0x080060e3
 80060c0:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fe fdfa 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 80060c8:	61f8      	str	r0, [r7, #28]
        break;
 80060ca:	e010      	b.n	80060ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b44      	ldr	r3, [pc, #272]	; (80061e0 <UART_SetConfig+0x314>)
 80060ce:	61fb      	str	r3, [r7, #28]
        break;
 80060d0:	e00d      	b.n	80060ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fe fd5b 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 80060d6:	61f8      	str	r0, [r7, #28]
        break;
 80060d8:	e009      	b.n	80060ee <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	61fb      	str	r3, [r7, #28]
        break;
 80060e0:	e005      	b.n	80060ee <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8107 	beq.w	8006304 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	429a      	cmp	r2, r3
 8006104:	d305      	bcc.n	8006112 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	429a      	cmp	r2, r3
 8006110:	d903      	bls.n	800611a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006118:	e0f4      	b.n	8006304 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2200      	movs	r2, #0
 800611e:	461c      	mov	r4, r3
 8006120:	4615      	mov	r5, r2
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	022b      	lsls	r3, r5, #8
 800612c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006130:	0222      	lsls	r2, r4, #8
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6849      	ldr	r1, [r1, #4]
 8006136:	0849      	lsrs	r1, r1, #1
 8006138:	2000      	movs	r0, #0
 800613a:	4688      	mov	r8, r1
 800613c:	4681      	mov	r9, r0
 800613e:	eb12 0a08 	adds.w	sl, r2, r8
 8006142:	eb43 0b09 	adc.w	fp, r3, r9
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006154:	4650      	mov	r0, sl
 8006156:	4659      	mov	r1, fp
 8006158:	f7fa fa5e 	bl	8000618 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4613      	mov	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800616a:	d308      	bcc.n	800617e <UART_SetConfig+0x2b2>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006172:	d204      	bcs.n	800617e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	60da      	str	r2, [r3, #12]
 800617c:	e0c2      	b.n	8006304 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006184:	e0be      	b.n	8006304 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618e:	d16a      	bne.n	8006266 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006194:	2b08      	cmp	r3, #8
 8006196:	d834      	bhi.n	8006202 <UART_SetConfig+0x336>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x2d4>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061ed 	.word	0x080061ed
 80061ac:	08006203 	.word	0x08006203
 80061b0:	080061f3 	.word	0x080061f3
 80061b4:	08006203 	.word	0x08006203
 80061b8:	08006203 	.word	0x08006203
 80061bc:	08006203 	.word	0x08006203
 80061c0:	080061fb 	.word	0x080061fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fe fd7a 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 80061c8:	61f8      	str	r0, [r7, #28]
        break;
 80061ca:	e020      	b.n	800620e <UART_SetConfig+0x342>
 80061cc:	efff69f3 	.word	0xefff69f3
 80061d0:	40008000 	.word	0x40008000
 80061d4:	40013800 	.word	0x40013800
 80061d8:	40021000 	.word	0x40021000
 80061dc:	40004400 	.word	0x40004400
 80061e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e4:	f7fe fd80 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 80061e8:	61f8      	str	r0, [r7, #28]
        break;
 80061ea:	e010      	b.n	800620e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ec:	4b4c      	ldr	r3, [pc, #304]	; (8006320 <UART_SetConfig+0x454>)
 80061ee:	61fb      	str	r3, [r7, #28]
        break;
 80061f0:	e00d      	b.n	800620e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f2:	f7fe fccb 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 80061f6:	61f8      	str	r0, [r7, #28]
        break;
 80061f8:	e009      	b.n	800620e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fe:	61fb      	str	r3, [r7, #28]
        break;
 8006200:	e005      	b.n	800620e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800620c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d077      	beq.n	8006304 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	005a      	lsls	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	441a      	add	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b0f      	cmp	r3, #15
 800622e:	d916      	bls.n	800625e <UART_SetConfig+0x392>
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006236:	d212      	bcs.n	800625e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f023 030f 	bic.w	r3, r3, #15
 8006240:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	b29a      	uxth	r2, r3
 800624e:	8afb      	ldrh	r3, [r7, #22]
 8006250:	4313      	orrs	r3, r2
 8006252:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	8afa      	ldrh	r2, [r7, #22]
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	e052      	b.n	8006304 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006264:	e04e      	b.n	8006304 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800626a:	2b08      	cmp	r3, #8
 800626c:	d827      	bhi.n	80062be <UART_SetConfig+0x3f2>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0x3a8>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062bf 	.word	0x080062bf
 8006284:	080062af 	.word	0x080062af
 8006288:	080062bf 	.word	0x080062bf
 800628c:	080062bf 	.word	0x080062bf
 8006290:	080062bf 	.word	0x080062bf
 8006294:	080062b7 	.word	0x080062b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fe fd10 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 800629c:	61f8      	str	r0, [r7, #28]
        break;
 800629e:	e014      	b.n	80062ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a0:	f7fe fd22 	bl	8004ce8 <HAL_RCC_GetPCLK2Freq>
 80062a4:	61f8      	str	r0, [r7, #28]
        break;
 80062a6:	e010      	b.n	80062ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <UART_SetConfig+0x454>)
 80062aa:	61fb      	str	r3, [r7, #28]
        break;
 80062ac:	e00d      	b.n	80062ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fe fc6d 	bl	8004b8c <HAL_RCC_GetSysClockFreq>
 80062b2:	61f8      	str	r0, [r7, #28]
        break;
 80062b4:	e009      	b.n	80062ca <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ba:	61fb      	str	r3, [r7, #28]
        break;
 80062bc:	e005      	b.n	80062ca <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062c8:	bf00      	nop
    }

    if (pclk != 0U)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d019      	beq.n	8006304 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	085a      	lsrs	r2, r3, #1
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	441a      	add	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d909      	bls.n	80062fe <UART_SetConfig+0x432>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f0:	d205      	bcs.n	80062fe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60da      	str	r2, [r3, #12]
 80062fc:	e002      	b.n	8006304 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006310:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006314:	4618      	mov	r0, r3
 8006316:	3728      	adds	r7, #40	; 0x28
 8006318:	46bd      	mov	sp, r7
 800631a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800631e:	bf00      	nop
 8006320:	00f42400 	.word	0x00f42400

08006324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01a      	beq.n	800643a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006422:	d10a      	bne.n	800643a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006478:	f7fb fcd8 	bl	8001e2c <HAL_GetTick>
 800647c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b08      	cmp	r3, #8
 800648a:	d10e      	bne.n	80064aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800648c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f82d 	bl	80064fa <UART_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e023      	b.n	80064f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d10e      	bne.n	80064d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f817 	bl	80064fa <UART_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e00d      	b.n	80064f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b09c      	sub	sp, #112	; 0x70
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	603b      	str	r3, [r7, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650a:	e0a5      	b.n	8006658 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	f000 80a1 	beq.w	8006658 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006516:	f7fb fc89 	bl	8001e2c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006522:	429a      	cmp	r2, r3
 8006524:	d302      	bcc.n	800652c <UART_WaitOnFlagUntilTimeout+0x32>
 8006526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006528:	2b00      	cmp	r3, #0
 800652a:	d13e      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800653a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006540:	667b      	str	r3, [r7, #100]	; 0x64
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800654a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800654c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006550:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	663b      	str	r3, [r7, #96]	; 0x60
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800657e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006580:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800658c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e5      	bne.n	800655e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e067      	b.n	800667a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d04f      	beq.n	8006658 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c6:	d147      	bne.n	8006658 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
 80065f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e6      	bne.n	80065d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	613b      	str	r3, [r7, #16]
   return(result);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 0301 	bic.w	r3, r3, #1
 800661a:	66bb      	str	r3, [r7, #104]	; 0x68
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006624:	623a      	str	r2, [r7, #32]
 8006626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	69f9      	ldr	r1, [r7, #28]
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	61bb      	str	r3, [r7, #24]
   return(result);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e5      	bne.n	8006604 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2220      	movs	r2, #32
 8006648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e010      	b.n	800667a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	429a      	cmp	r2, r3
 8006674:	f43f af4a 	beq.w	800650c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3770      	adds	r7, #112	; 0x70
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006684:	b480      	push	{r7}
 8006686:	b097      	sub	sp, #92	; 0x5c
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	88fa      	ldrh	r2, [r7, #6]
 800669c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066b6:	d10e      	bne.n	80066d6 <UART_Start_Receive_IT+0x52>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <UART_Start_Receive_IT+0x48>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066ca:	e02d      	b.n	8006728 <UART_Start_Receive_IT+0xa4>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	22ff      	movs	r2, #255	; 0xff
 80066d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066d4:	e028      	b.n	8006728 <UART_Start_Receive_IT+0xa4>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10d      	bne.n	80066fa <UART_Start_Receive_IT+0x76>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <UART_Start_Receive_IT+0x6c>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	22ff      	movs	r2, #255	; 0xff
 80066ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066ee:	e01b      	b.n	8006728 <UART_Start_Receive_IT+0xa4>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	227f      	movs	r2, #127	; 0x7f
 80066f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066f8:	e016      	b.n	8006728 <UART_Start_Receive_IT+0xa4>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006702:	d10d      	bne.n	8006720 <UART_Start_Receive_IT+0x9c>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <UART_Start_Receive_IT+0x92>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	227f      	movs	r2, #127	; 0x7f
 8006710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006714:	e008      	b.n	8006728 <UART_Start_Receive_IT+0xa4>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	223f      	movs	r2, #63	; 0x3f
 800671a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800671e:	e003      	b.n	8006728 <UART_Start_Receive_IT+0xa4>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2222      	movs	r2, #34	; 0x22
 8006734:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	657b      	str	r3, [r7, #84]	; 0x54
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006756:	64ba      	str	r2, [r7, #72]	; 0x48
 8006758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800675c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e5      	bne.n	8006736 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	d107      	bne.n	8006784 <UART_Start_Receive_IT+0x100>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a24      	ldr	r2, [pc, #144]	; (8006810 <UART_Start_Receive_IT+0x18c>)
 8006780:	665a      	str	r2, [r3, #100]	; 0x64
 8006782:	e002      	b.n	800678a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a23      	ldr	r2, [pc, #140]	; (8006814 <UART_Start_Receive_IT+0x190>)
 8006788:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d019      	beq.n	80067ce <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e6      	bne.n	800679a <UART_Start_Receive_IT+0x116>
 80067cc:	e018      	b.n	8006800 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	613b      	str	r3, [r7, #16]
   return(result);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f043 0320 	orr.w	r3, r3, #32
 80067e2:	653b      	str	r3, [r7, #80]	; 0x50
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	69f9      	ldr	r1, [r7, #28]
 80067f2:	6a3a      	ldr	r2, [r7, #32]
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e6      	bne.n	80067ce <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	375c      	adds	r7, #92	; 0x5c
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	08006c37 	.word	0x08006c37
 8006814:	08006ad7 	.word	0x08006ad7

08006818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b095      	sub	sp, #84	; 0x54
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683e:	643b      	str	r3, [r7, #64]	; 0x40
 8006840:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e6      	bne.n	8006820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	61fb      	str	r3, [r7, #28]
   return(result);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	64bb      	str	r3, [r7, #72]	; 0x48
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	2b01      	cmp	r3, #1
 800688c:	d118      	bne.n	80068c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	60bb      	str	r3, [r7, #8]
   return(result);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f023 0310 	bic.w	r3, r3, #16
 80068a2:	647b      	str	r3, [r7, #68]	; 0x44
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6979      	ldr	r1, [r7, #20]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80068d2:	bf00      	nop
 80068d4:	3754      	adds	r7, #84	; 0x54
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff facf 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800690a:	b480      	push	{r7}
 800690c:	b08f      	sub	sp, #60	; 0x3c
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006916:	2b21      	cmp	r3, #33	; 0x21
 8006918:	d14d      	bne.n	80069b6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d132      	bne.n	800698c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	61fb      	str	r3, [r7, #28]
   return(result);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006946:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e6      	bne.n	8006926 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	60bb      	str	r3, [r7, #8]
   return(result);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800696c:	633b      	str	r3, [r7, #48]	; 0x30
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	613b      	str	r3, [r7, #16]
   return(result);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e6      	bne.n	8006958 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800698a:	e014      	b.n	80069b6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	b292      	uxth	r2, r2
 8006998:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80069b6:	bf00      	nop
 80069b8:	373c      	adds	r7, #60	; 0x3c
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b091      	sub	sp, #68	; 0x44
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ce:	2b21      	cmp	r3, #33	; 0x21
 80069d0:	d151      	bne.n	8006a76 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d132      	bne.n	8006a44 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	623b      	str	r3, [r7, #32]
   return(result);
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	633b      	str	r3, [r7, #48]	; 0x30
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e6      	bne.n	80069de <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	69b9      	ldr	r1, [r7, #24]
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e6      	bne.n	8006a10 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006a42:	e018      	b.n	8006a76 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4c:	881a      	ldrh	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a56:	b292      	uxth	r2, r2
 8006a58:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006a76:	bf00      	nop
 8006a78:	3744      	adds	r7, #68	; 0x44
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b088      	sub	sp, #32
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6979      	ldr	r1, [r7, #20]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff f9d5 	bl	8005e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ace:	bf00      	nop
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b096      	sub	sp, #88	; 0x58
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ae4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aec:	2b22      	cmp	r3, #34	; 0x22
 8006aee:	f040 8094 	bne.w	8006c1a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006af8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006afc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006b00:	b2d9      	uxtb	r1, r3
 8006b02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	400a      	ands	r2, r1
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d179      	bne.n	8006c2e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b58:	647b      	str	r3, [r7, #68]	; 0x44
 8006b5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e6      	bne.n	8006b3a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d12e      	bne.n	8006c12 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	617b      	str	r3, [r7, #20]
   return(result);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e6      	bne.n	8006bba <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	2b10      	cmp	r3, #16
 8006bf8:	d103      	bne.n	8006c02 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff f952 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c10:	e00d      	b.n	8006c2e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff f93a 	bl	8005e8c <HAL_UART_RxCpltCallback>
}
 8006c18:	e009      	b.n	8006c2e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	8b1b      	ldrh	r3, [r3, #24]
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0208 	orr.w	r2, r2, #8
 8006c2a:	b292      	uxth	r2, r2
 8006c2c:	831a      	strh	r2, [r3, #24]
}
 8006c2e:	bf00      	nop
 8006c30:	3758      	adds	r7, #88	; 0x58
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b096      	sub	sp, #88	; 0x58
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c4c:	2b22      	cmp	r3, #34	; 0x22
 8006c4e:	f040 8094 	bne.w	8006d7a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c62:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006c66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	1c9a      	adds	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d179      	bne.n	8006d8e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e6      	bne.n	8006c9a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e5      	bne.n	8006ccc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d12e      	bne.n	8006d72 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f023 0310 	bic.w	r3, r3, #16
 8006d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6979      	ldr	r1, [r7, #20]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	613b      	str	r3, [r7, #16]
   return(result);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e6      	bne.n	8006d1a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f003 0310 	and.w	r3, r3, #16
 8006d56:	2b10      	cmp	r3, #16
 8006d58:	d103      	bne.n	8006d62 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2210      	movs	r2, #16
 8006d60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff f8a2 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d70:	e00d      	b.n	8006d8e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff f88a 	bl	8005e8c <HAL_UART_RxCpltCallback>
}
 8006d78:	e009      	b.n	8006d8e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	8b1b      	ldrh	r3, [r3, #24]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0208 	orr.w	r2, r2, #8
 8006d8a:	b292      	uxth	r2, r2
 8006d8c:	831a      	strh	r2, [r3, #24]
}
 8006d8e:	bf00      	nop
 8006d90:	3758      	adds	r7, #88	; 0x58
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <__errno>:
 8006dac:	4b01      	ldr	r3, [pc, #4]	; (8006db4 <__errno+0x8>)
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000010 	.word	0x20000010

08006db8 <__libc_init_array>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4d0d      	ldr	r5, [pc, #52]	; (8006df0 <__libc_init_array+0x38>)
 8006dbc:	4c0d      	ldr	r4, [pc, #52]	; (8006df4 <__libc_init_array+0x3c>)
 8006dbe:	1b64      	subs	r4, r4, r5
 8006dc0:	10a4      	asrs	r4, r4, #2
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	42a6      	cmp	r6, r4
 8006dc6:	d109      	bne.n	8006ddc <__libc_init_array+0x24>
 8006dc8:	4d0b      	ldr	r5, [pc, #44]	; (8006df8 <__libc_init_array+0x40>)
 8006dca:	4c0c      	ldr	r4, [pc, #48]	; (8006dfc <__libc_init_array+0x44>)
 8006dcc:	f001 faa2 	bl	8008314 <_init>
 8006dd0:	1b64      	subs	r4, r4, r5
 8006dd2:	10a4      	asrs	r4, r4, #2
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	d105      	bne.n	8006de6 <__libc_init_array+0x2e>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de0:	4798      	blx	r3
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7ee      	b.n	8006dc4 <__libc_init_array+0xc>
 8006de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dea:	4798      	blx	r3
 8006dec:	3601      	adds	r6, #1
 8006dee:	e7f2      	b.n	8006dd6 <__libc_init_array+0x1e>
 8006df0:	080087e4 	.word	0x080087e4
 8006df4:	080087e4 	.word	0x080087e4
 8006df8:	080087e4 	.word	0x080087e4
 8006dfc:	080087e8 	.word	0x080087e8

08006e00 <malloc>:
 8006e00:	4b02      	ldr	r3, [pc, #8]	; (8006e0c <malloc+0xc>)
 8006e02:	4601      	mov	r1, r0
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	f000 b87f 	b.w	8006f08 <_malloc_r>
 8006e0a:	bf00      	nop
 8006e0c:	20000010 	.word	0x20000010

08006e10 <free>:
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <free+0xc>)
 8006e12:	4601      	mov	r1, r0
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f000 b80b 	b.w	8006e30 <_free_r>
 8006e1a:	bf00      	nop
 8006e1c:	20000010 	.word	0x20000010

08006e20 <memset>:
 8006e20:	4402      	add	r2, r0
 8006e22:	4603      	mov	r3, r0
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d100      	bne.n	8006e2a <memset+0xa>
 8006e28:	4770      	bx	lr
 8006e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2e:	e7f9      	b.n	8006e24 <memset+0x4>

08006e30 <_free_r>:
 8006e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e32:	2900      	cmp	r1, #0
 8006e34:	d044      	beq.n	8006ec0 <_free_r+0x90>
 8006e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e3a:	9001      	str	r0, [sp, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e42:	bfb8      	it	lt
 8006e44:	18e4      	addlt	r4, r4, r3
 8006e46:	f000 f9d7 	bl	80071f8 <__malloc_lock>
 8006e4a:	4a1e      	ldr	r2, [pc, #120]	; (8006ec4 <_free_r+0x94>)
 8006e4c:	9801      	ldr	r0, [sp, #4]
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	b933      	cbnz	r3, 8006e60 <_free_r+0x30>
 8006e52:	6063      	str	r3, [r4, #4]
 8006e54:	6014      	str	r4, [r2, #0]
 8006e56:	b003      	add	sp, #12
 8006e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e5c:	f000 b9d2 	b.w	8007204 <__malloc_unlock>
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d908      	bls.n	8006e76 <_free_r+0x46>
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1961      	adds	r1, r4, r5
 8006e68:	428b      	cmp	r3, r1
 8006e6a:	bf01      	itttt	eq
 8006e6c:	6819      	ldreq	r1, [r3, #0]
 8006e6e:	685b      	ldreq	r3, [r3, #4]
 8006e70:	1949      	addeq	r1, r1, r5
 8006e72:	6021      	streq	r1, [r4, #0]
 8006e74:	e7ed      	b.n	8006e52 <_free_r+0x22>
 8006e76:	461a      	mov	r2, r3
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b10b      	cbz	r3, 8006e80 <_free_r+0x50>
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d9fa      	bls.n	8006e76 <_free_r+0x46>
 8006e80:	6811      	ldr	r1, [r2, #0]
 8006e82:	1855      	adds	r5, r2, r1
 8006e84:	42a5      	cmp	r5, r4
 8006e86:	d10b      	bne.n	8006ea0 <_free_r+0x70>
 8006e88:	6824      	ldr	r4, [r4, #0]
 8006e8a:	4421      	add	r1, r4
 8006e8c:	1854      	adds	r4, r2, r1
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	d1e0      	bne.n	8006e56 <_free_r+0x26>
 8006e94:	681c      	ldr	r4, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	6053      	str	r3, [r2, #4]
 8006e9a:	4421      	add	r1, r4
 8006e9c:	6011      	str	r1, [r2, #0]
 8006e9e:	e7da      	b.n	8006e56 <_free_r+0x26>
 8006ea0:	d902      	bls.n	8006ea8 <_free_r+0x78>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6003      	str	r3, [r0, #0]
 8006ea6:	e7d6      	b.n	8006e56 <_free_r+0x26>
 8006ea8:	6825      	ldr	r5, [r4, #0]
 8006eaa:	1961      	adds	r1, r4, r5
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf04      	itt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	bf04      	itt	eq
 8006eb8:	1949      	addeq	r1, r1, r5
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	6054      	str	r4, [r2, #4]
 8006ebe:	e7ca      	b.n	8006e56 <_free_r+0x26>
 8006ec0:	b003      	add	sp, #12
 8006ec2:	bd30      	pop	{r4, r5, pc}
 8006ec4:	200003cc 	.word	0x200003cc

08006ec8 <sbrk_aligned>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	4e0e      	ldr	r6, [pc, #56]	; (8006f04 <sbrk_aligned+0x3c>)
 8006ecc:	460c      	mov	r4, r1
 8006ece:	6831      	ldr	r1, [r6, #0]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	b911      	cbnz	r1, 8006eda <sbrk_aligned+0x12>
 8006ed4:	f000 f88c 	bl	8006ff0 <_sbrk_r>
 8006ed8:	6030      	str	r0, [r6, #0]
 8006eda:	4621      	mov	r1, r4
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f887 	bl	8006ff0 <_sbrk_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d00a      	beq.n	8006efc <sbrk_aligned+0x34>
 8006ee6:	1cc4      	adds	r4, r0, #3
 8006ee8:	f024 0403 	bic.w	r4, r4, #3
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d007      	beq.n	8006f00 <sbrk_aligned+0x38>
 8006ef0:	1a21      	subs	r1, r4, r0
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f87c 	bl	8006ff0 <_sbrk_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d101      	bne.n	8006f00 <sbrk_aligned+0x38>
 8006efc:	f04f 34ff 	mov.w	r4, #4294967295
 8006f00:	4620      	mov	r0, r4
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	200003d0 	.word	0x200003d0

08006f08 <_malloc_r>:
 8006f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	1ccd      	adds	r5, r1, #3
 8006f0e:	f025 0503 	bic.w	r5, r5, #3
 8006f12:	3508      	adds	r5, #8
 8006f14:	2d0c      	cmp	r5, #12
 8006f16:	bf38      	it	cc
 8006f18:	250c      	movcc	r5, #12
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	db01      	blt.n	8006f24 <_malloc_r+0x1c>
 8006f20:	42a9      	cmp	r1, r5
 8006f22:	d905      	bls.n	8006f30 <_malloc_r+0x28>
 8006f24:	230c      	movs	r3, #12
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	2600      	movs	r6, #0
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f30:	4e2e      	ldr	r6, [pc, #184]	; (8006fec <_malloc_r+0xe4>)
 8006f32:	f000 f961 	bl	80071f8 <__malloc_lock>
 8006f36:	6833      	ldr	r3, [r6, #0]
 8006f38:	461c      	mov	r4, r3
 8006f3a:	bb34      	cbnz	r4, 8006f8a <_malloc_r+0x82>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f7ff ffc2 	bl	8006ec8 <sbrk_aligned>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	4604      	mov	r4, r0
 8006f48:	d14d      	bne.n	8006fe6 <_malloc_r+0xde>
 8006f4a:	6834      	ldr	r4, [r6, #0]
 8006f4c:	4626      	mov	r6, r4
 8006f4e:	2e00      	cmp	r6, #0
 8006f50:	d140      	bne.n	8006fd4 <_malloc_r+0xcc>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	4631      	mov	r1, r6
 8006f56:	4638      	mov	r0, r7
 8006f58:	eb04 0803 	add.w	r8, r4, r3
 8006f5c:	f000 f848 	bl	8006ff0 <_sbrk_r>
 8006f60:	4580      	cmp	r8, r0
 8006f62:	d13a      	bne.n	8006fda <_malloc_r+0xd2>
 8006f64:	6821      	ldr	r1, [r4, #0]
 8006f66:	3503      	adds	r5, #3
 8006f68:	1a6d      	subs	r5, r5, r1
 8006f6a:	f025 0503 	bic.w	r5, r5, #3
 8006f6e:	3508      	adds	r5, #8
 8006f70:	2d0c      	cmp	r5, #12
 8006f72:	bf38      	it	cc
 8006f74:	250c      	movcc	r5, #12
 8006f76:	4629      	mov	r1, r5
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff ffa5 	bl	8006ec8 <sbrk_aligned>
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d02b      	beq.n	8006fda <_malloc_r+0xd2>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	442b      	add	r3, r5
 8006f86:	6023      	str	r3, [r4, #0]
 8006f88:	e00e      	b.n	8006fa8 <_malloc_r+0xa0>
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	1b52      	subs	r2, r2, r5
 8006f8e:	d41e      	bmi.n	8006fce <_malloc_r+0xc6>
 8006f90:	2a0b      	cmp	r2, #11
 8006f92:	d916      	bls.n	8006fc2 <_malloc_r+0xba>
 8006f94:	1961      	adds	r1, r4, r5
 8006f96:	42a3      	cmp	r3, r4
 8006f98:	6025      	str	r5, [r4, #0]
 8006f9a:	bf18      	it	ne
 8006f9c:	6059      	strne	r1, [r3, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	bf08      	it	eq
 8006fa2:	6031      	streq	r1, [r6, #0]
 8006fa4:	5162      	str	r2, [r4, r5]
 8006fa6:	604b      	str	r3, [r1, #4]
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f104 060b 	add.w	r6, r4, #11
 8006fae:	f000 f929 	bl	8007204 <__malloc_unlock>
 8006fb2:	f026 0607 	bic.w	r6, r6, #7
 8006fb6:	1d23      	adds	r3, r4, #4
 8006fb8:	1af2      	subs	r2, r6, r3
 8006fba:	d0b6      	beq.n	8006f2a <_malloc_r+0x22>
 8006fbc:	1b9b      	subs	r3, r3, r6
 8006fbe:	50a3      	str	r3, [r4, r2]
 8006fc0:	e7b3      	b.n	8006f2a <_malloc_r+0x22>
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	bf0c      	ite	eq
 8006fc8:	6032      	streq	r2, [r6, #0]
 8006fca:	605a      	strne	r2, [r3, #4]
 8006fcc:	e7ec      	b.n	8006fa8 <_malloc_r+0xa0>
 8006fce:	4623      	mov	r3, r4
 8006fd0:	6864      	ldr	r4, [r4, #4]
 8006fd2:	e7b2      	b.n	8006f3a <_malloc_r+0x32>
 8006fd4:	4634      	mov	r4, r6
 8006fd6:	6876      	ldr	r6, [r6, #4]
 8006fd8:	e7b9      	b.n	8006f4e <_malloc_r+0x46>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f000 f910 	bl	8007204 <__malloc_unlock>
 8006fe4:	e7a1      	b.n	8006f2a <_malloc_r+0x22>
 8006fe6:	6025      	str	r5, [r4, #0]
 8006fe8:	e7de      	b.n	8006fa8 <_malloc_r+0xa0>
 8006fea:	bf00      	nop
 8006fec:	200003cc 	.word	0x200003cc

08006ff0 <_sbrk_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d06      	ldr	r5, [pc, #24]	; (800700c <_sbrk_r+0x1c>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	602b      	str	r3, [r5, #0]
 8006ffc:	f7fa fe3c 	bl	8001c78 <_sbrk>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d102      	bne.n	800700a <_sbrk_r+0x1a>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	b103      	cbz	r3, 800700a <_sbrk_r+0x1a>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	200003d4 	.word	0x200003d4

08007010 <sniprintf>:
 8007010:	b40c      	push	{r2, r3}
 8007012:	b530      	push	{r4, r5, lr}
 8007014:	4b17      	ldr	r3, [pc, #92]	; (8007074 <sniprintf+0x64>)
 8007016:	1e0c      	subs	r4, r1, #0
 8007018:	681d      	ldr	r5, [r3, #0]
 800701a:	b09d      	sub	sp, #116	; 0x74
 800701c:	da08      	bge.n	8007030 <sniprintf+0x20>
 800701e:	238b      	movs	r3, #139	; 0x8b
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	f04f 30ff 	mov.w	r0, #4294967295
 8007026:	b01d      	add	sp, #116	; 0x74
 8007028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800702c:	b002      	add	sp, #8
 800702e:	4770      	bx	lr
 8007030:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007034:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007038:	bf14      	ite	ne
 800703a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800703e:	4623      	moveq	r3, r4
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	9307      	str	r3, [sp, #28]
 8007044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	9006      	str	r0, [sp, #24]
 800704c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007050:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007052:	ab21      	add	r3, sp, #132	; 0x84
 8007054:	a902      	add	r1, sp, #8
 8007056:	4628      	mov	r0, r5
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	f000 f935 	bl	80072c8 <_svfiprintf_r>
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	bfbc      	itt	lt
 8007062:	238b      	movlt	r3, #139	; 0x8b
 8007064:	602b      	strlt	r3, [r5, #0]
 8007066:	2c00      	cmp	r4, #0
 8007068:	d0dd      	beq.n	8007026 <sniprintf+0x16>
 800706a:	9b02      	ldr	r3, [sp, #8]
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	e7d9      	b.n	8007026 <sniprintf+0x16>
 8007072:	bf00      	nop
 8007074:	20000010 	.word	0x20000010

08007078 <siprintf>:
 8007078:	b40e      	push	{r1, r2, r3}
 800707a:	b500      	push	{lr}
 800707c:	b09c      	sub	sp, #112	; 0x70
 800707e:	ab1d      	add	r3, sp, #116	; 0x74
 8007080:	9002      	str	r0, [sp, #8]
 8007082:	9006      	str	r0, [sp, #24]
 8007084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007088:	4809      	ldr	r0, [pc, #36]	; (80070b0 <siprintf+0x38>)
 800708a:	9107      	str	r1, [sp, #28]
 800708c:	9104      	str	r1, [sp, #16]
 800708e:	4909      	ldr	r1, [pc, #36]	; (80070b4 <siprintf+0x3c>)
 8007090:	f853 2b04 	ldr.w	r2, [r3], #4
 8007094:	9105      	str	r1, [sp, #20]
 8007096:	6800      	ldr	r0, [r0, #0]
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	a902      	add	r1, sp, #8
 800709c:	f000 f914 	bl	80072c8 <_svfiprintf_r>
 80070a0:	9b02      	ldr	r3, [sp, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	b01c      	add	sp, #112	; 0x70
 80070a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ac:	b003      	add	sp, #12
 80070ae:	4770      	bx	lr
 80070b0:	20000010 	.word	0x20000010
 80070b4:	ffff0208 	.word	0xffff0208

080070b8 <strncpy>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	3901      	subs	r1, #1
 80070bc:	4603      	mov	r3, r0
 80070be:	b132      	cbz	r2, 80070ce <strncpy+0x16>
 80070c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070c4:	f803 4b01 	strb.w	r4, [r3], #1
 80070c8:	3a01      	subs	r2, #1
 80070ca:	2c00      	cmp	r4, #0
 80070cc:	d1f7      	bne.n	80070be <strncpy+0x6>
 80070ce:	441a      	add	r2, r3
 80070d0:	2100      	movs	r1, #0
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d100      	bne.n	80070d8 <strncpy+0x20>
 80070d6:	bd10      	pop	{r4, pc}
 80070d8:	f803 1b01 	strb.w	r1, [r3], #1
 80070dc:	e7f9      	b.n	80070d2 <strncpy+0x1a>
	...

080070e0 <strtok>:
 80070e0:	4b16      	ldr	r3, [pc, #88]	; (800713c <strtok+0x5c>)
 80070e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070e4:	681e      	ldr	r6, [r3, #0]
 80070e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80070e8:	4605      	mov	r5, r0
 80070ea:	b9fc      	cbnz	r4, 800712c <strtok+0x4c>
 80070ec:	2050      	movs	r0, #80	; 0x50
 80070ee:	9101      	str	r1, [sp, #4]
 80070f0:	f7ff fe86 	bl	8006e00 <malloc>
 80070f4:	9901      	ldr	r1, [sp, #4]
 80070f6:	65b0      	str	r0, [r6, #88]	; 0x58
 80070f8:	4602      	mov	r2, r0
 80070fa:	b920      	cbnz	r0, 8007106 <strtok+0x26>
 80070fc:	4b10      	ldr	r3, [pc, #64]	; (8007140 <strtok+0x60>)
 80070fe:	4811      	ldr	r0, [pc, #68]	; (8007144 <strtok+0x64>)
 8007100:	2157      	movs	r1, #87	; 0x57
 8007102:	f000 f849 	bl	8007198 <__assert_func>
 8007106:	e9c0 4400 	strd	r4, r4, [r0]
 800710a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800710e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007112:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007116:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800711a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800711e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007122:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007126:	6184      	str	r4, [r0, #24]
 8007128:	7704      	strb	r4, [r0, #28]
 800712a:	6244      	str	r4, [r0, #36]	; 0x24
 800712c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800712e:	2301      	movs	r3, #1
 8007130:	4628      	mov	r0, r5
 8007132:	b002      	add	sp, #8
 8007134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007138:	f000 b806 	b.w	8007148 <__strtok_r>
 800713c:	20000010 	.word	0x20000010
 8007140:	08008698 	.word	0x08008698
 8007144:	080086af 	.word	0x080086af

08007148 <__strtok_r>:
 8007148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714a:	b908      	cbnz	r0, 8007150 <__strtok_r+0x8>
 800714c:	6810      	ldr	r0, [r2, #0]
 800714e:	b188      	cbz	r0, 8007174 <__strtok_r+0x2c>
 8007150:	4604      	mov	r4, r0
 8007152:	4620      	mov	r0, r4
 8007154:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007158:	460f      	mov	r7, r1
 800715a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800715e:	b91e      	cbnz	r6, 8007168 <__strtok_r+0x20>
 8007160:	b965      	cbnz	r5, 800717c <__strtok_r+0x34>
 8007162:	6015      	str	r5, [r2, #0]
 8007164:	4628      	mov	r0, r5
 8007166:	e005      	b.n	8007174 <__strtok_r+0x2c>
 8007168:	42b5      	cmp	r5, r6
 800716a:	d1f6      	bne.n	800715a <__strtok_r+0x12>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f0      	bne.n	8007152 <__strtok_r+0xa>
 8007170:	6014      	str	r4, [r2, #0]
 8007172:	7003      	strb	r3, [r0, #0]
 8007174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007176:	461c      	mov	r4, r3
 8007178:	e00c      	b.n	8007194 <__strtok_r+0x4c>
 800717a:	b915      	cbnz	r5, 8007182 <__strtok_r+0x3a>
 800717c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007180:	460e      	mov	r6, r1
 8007182:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007186:	42ab      	cmp	r3, r5
 8007188:	d1f7      	bne.n	800717a <__strtok_r+0x32>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f3      	beq.n	8007176 <__strtok_r+0x2e>
 800718e:	2300      	movs	r3, #0
 8007190:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007194:	6014      	str	r4, [r2, #0]
 8007196:	e7ed      	b.n	8007174 <__strtok_r+0x2c>

08007198 <__assert_func>:
 8007198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800719a:	4614      	mov	r4, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <__assert_func+0x2c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4605      	mov	r5, r0
 80071a4:	68d8      	ldr	r0, [r3, #12]
 80071a6:	b14c      	cbz	r4, 80071bc <__assert_func+0x24>
 80071a8:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <__assert_func+0x30>)
 80071aa:	9100      	str	r1, [sp, #0]
 80071ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071b0:	4906      	ldr	r1, [pc, #24]	; (80071cc <__assert_func+0x34>)
 80071b2:	462b      	mov	r3, r5
 80071b4:	f000 f80e 	bl	80071d4 <fiprintf>
 80071b8:	f000 fd34 	bl	8007c24 <abort>
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <__assert_func+0x38>)
 80071be:	461c      	mov	r4, r3
 80071c0:	e7f3      	b.n	80071aa <__assert_func+0x12>
 80071c2:	bf00      	nop
 80071c4:	20000010 	.word	0x20000010
 80071c8:	0800870c 	.word	0x0800870c
 80071cc:	08008719 	.word	0x08008719
 80071d0:	08008747 	.word	0x08008747

080071d4 <fiprintf>:
 80071d4:	b40e      	push	{r1, r2, r3}
 80071d6:	b503      	push	{r0, r1, lr}
 80071d8:	4601      	mov	r1, r0
 80071da:	ab03      	add	r3, sp, #12
 80071dc:	4805      	ldr	r0, [pc, #20]	; (80071f4 <fiprintf+0x20>)
 80071de:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e2:	6800      	ldr	r0, [r0, #0]
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	f000 f999 	bl	800751c <_vfiprintf_r>
 80071ea:	b002      	add	sp, #8
 80071ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f0:	b003      	add	sp, #12
 80071f2:	4770      	bx	lr
 80071f4:	20000010 	.word	0x20000010

080071f8 <__malloc_lock>:
 80071f8:	4801      	ldr	r0, [pc, #4]	; (8007200 <__malloc_lock+0x8>)
 80071fa:	f000 bed3 	b.w	8007fa4 <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	200003d8 	.word	0x200003d8

08007204 <__malloc_unlock>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__malloc_unlock+0x8>)
 8007206:	f000 bece 	b.w	8007fa6 <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	200003d8 	.word	0x200003d8

08007210 <__ssputs_r>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	688e      	ldr	r6, [r1, #8]
 8007216:	429e      	cmp	r6, r3
 8007218:	4682      	mov	sl, r0
 800721a:	460c      	mov	r4, r1
 800721c:	4690      	mov	r8, r2
 800721e:	461f      	mov	r7, r3
 8007220:	d838      	bhi.n	8007294 <__ssputs_r+0x84>
 8007222:	898a      	ldrh	r2, [r1, #12]
 8007224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007228:	d032      	beq.n	8007290 <__ssputs_r+0x80>
 800722a:	6825      	ldr	r5, [r4, #0]
 800722c:	6909      	ldr	r1, [r1, #16]
 800722e:	eba5 0901 	sub.w	r9, r5, r1
 8007232:	6965      	ldr	r5, [r4, #20]
 8007234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800723c:	3301      	adds	r3, #1
 800723e:	444b      	add	r3, r9
 8007240:	106d      	asrs	r5, r5, #1
 8007242:	429d      	cmp	r5, r3
 8007244:	bf38      	it	cc
 8007246:	461d      	movcc	r5, r3
 8007248:	0553      	lsls	r3, r2, #21
 800724a:	d531      	bpl.n	80072b0 <__ssputs_r+0xa0>
 800724c:	4629      	mov	r1, r5
 800724e:	f7ff fe5b 	bl	8006f08 <_malloc_r>
 8007252:	4606      	mov	r6, r0
 8007254:	b950      	cbnz	r0, 800726c <__ssputs_r+0x5c>
 8007256:	230c      	movs	r3, #12
 8007258:	f8ca 3000 	str.w	r3, [sl]
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	6921      	ldr	r1, [r4, #16]
 800726e:	464a      	mov	r2, r9
 8007270:	f000 ff00 	bl	8008074 <memcpy>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800727a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	6126      	str	r6, [r4, #16]
 8007282:	6165      	str	r5, [r4, #20]
 8007284:	444e      	add	r6, r9
 8007286:	eba5 0509 	sub.w	r5, r5, r9
 800728a:	6026      	str	r6, [r4, #0]
 800728c:	60a5      	str	r5, [r4, #8]
 800728e:	463e      	mov	r6, r7
 8007290:	42be      	cmp	r6, r7
 8007292:	d900      	bls.n	8007296 <__ssputs_r+0x86>
 8007294:	463e      	mov	r6, r7
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	4632      	mov	r2, r6
 800729a:	4641      	mov	r1, r8
 800729c:	f000 fef8 	bl	8008090 <memmove>
 80072a0:	68a3      	ldr	r3, [r4, #8]
 80072a2:	1b9b      	subs	r3, r3, r6
 80072a4:	60a3      	str	r3, [r4, #8]
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	4433      	add	r3, r6
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	2000      	movs	r0, #0
 80072ae:	e7db      	b.n	8007268 <__ssputs_r+0x58>
 80072b0:	462a      	mov	r2, r5
 80072b2:	f000 ff07 	bl	80080c4 <_realloc_r>
 80072b6:	4606      	mov	r6, r0
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d1e1      	bne.n	8007280 <__ssputs_r+0x70>
 80072bc:	6921      	ldr	r1, [r4, #16]
 80072be:	4650      	mov	r0, sl
 80072c0:	f7ff fdb6 	bl	8006e30 <_free_r>
 80072c4:	e7c7      	b.n	8007256 <__ssputs_r+0x46>
	...

080072c8 <_svfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	4698      	mov	r8, r3
 80072ce:	898b      	ldrh	r3, [r1, #12]
 80072d0:	061b      	lsls	r3, r3, #24
 80072d2:	b09d      	sub	sp, #116	; 0x74
 80072d4:	4607      	mov	r7, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	4614      	mov	r4, r2
 80072da:	d50e      	bpl.n	80072fa <_svfiprintf_r+0x32>
 80072dc:	690b      	ldr	r3, [r1, #16]
 80072de:	b963      	cbnz	r3, 80072fa <_svfiprintf_r+0x32>
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	f7ff fe11 	bl	8006f08 <_malloc_r>
 80072e6:	6028      	str	r0, [r5, #0]
 80072e8:	6128      	str	r0, [r5, #16]
 80072ea:	b920      	cbnz	r0, 80072f6 <_svfiprintf_r+0x2e>
 80072ec:	230c      	movs	r3, #12
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	e0d1      	b.n	800749a <_svfiprintf_r+0x1d2>
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	616b      	str	r3, [r5, #20]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9309      	str	r3, [sp, #36]	; 0x24
 80072fe:	2320      	movs	r3, #32
 8007300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007304:	f8cd 800c 	str.w	r8, [sp, #12]
 8007308:	2330      	movs	r3, #48	; 0x30
 800730a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074b4 <_svfiprintf_r+0x1ec>
 800730e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007312:	f04f 0901 	mov.w	r9, #1
 8007316:	4623      	mov	r3, r4
 8007318:	469a      	mov	sl, r3
 800731a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800731e:	b10a      	cbz	r2, 8007324 <_svfiprintf_r+0x5c>
 8007320:	2a25      	cmp	r2, #37	; 0x25
 8007322:	d1f9      	bne.n	8007318 <_svfiprintf_r+0x50>
 8007324:	ebba 0b04 	subs.w	fp, sl, r4
 8007328:	d00b      	beq.n	8007342 <_svfiprintf_r+0x7a>
 800732a:	465b      	mov	r3, fp
 800732c:	4622      	mov	r2, r4
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ff6d 	bl	8007210 <__ssputs_r>
 8007336:	3001      	adds	r0, #1
 8007338:	f000 80aa 	beq.w	8007490 <_svfiprintf_r+0x1c8>
 800733c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800733e:	445a      	add	r2, fp
 8007340:	9209      	str	r2, [sp, #36]	; 0x24
 8007342:	f89a 3000 	ldrb.w	r3, [sl]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 80a2 	beq.w	8007490 <_svfiprintf_r+0x1c8>
 800734c:	2300      	movs	r3, #0
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007356:	f10a 0a01 	add.w	sl, sl, #1
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007362:	931a      	str	r3, [sp, #104]	; 0x68
 8007364:	4654      	mov	r4, sl
 8007366:	2205      	movs	r2, #5
 8007368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736c:	4851      	ldr	r0, [pc, #324]	; (80074b4 <_svfiprintf_r+0x1ec>)
 800736e:	f7f8 ff47 	bl	8000200 <memchr>
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	b9d8      	cbnz	r0, 80073ae <_svfiprintf_r+0xe6>
 8007376:	06d0      	lsls	r0, r2, #27
 8007378:	bf44      	itt	mi
 800737a:	2320      	movmi	r3, #32
 800737c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007380:	0711      	lsls	r1, r2, #28
 8007382:	bf44      	itt	mi
 8007384:	232b      	movmi	r3, #43	; 0x2b
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738a:	f89a 3000 	ldrb.w	r3, [sl]
 800738e:	2b2a      	cmp	r3, #42	; 0x2a
 8007390:	d015      	beq.n	80073be <_svfiprintf_r+0xf6>
 8007392:	9a07      	ldr	r2, [sp, #28]
 8007394:	4654      	mov	r4, sl
 8007396:	2000      	movs	r0, #0
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4621      	mov	r1, r4
 800739e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a2:	3b30      	subs	r3, #48	; 0x30
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d94e      	bls.n	8007446 <_svfiprintf_r+0x17e>
 80073a8:	b1b0      	cbz	r0, 80073d8 <_svfiprintf_r+0x110>
 80073aa:	9207      	str	r2, [sp, #28]
 80073ac:	e014      	b.n	80073d8 <_svfiprintf_r+0x110>
 80073ae:	eba0 0308 	sub.w	r3, r0, r8
 80073b2:	fa09 f303 	lsl.w	r3, r9, r3
 80073b6:	4313      	orrs	r3, r2
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	46a2      	mov	sl, r4
 80073bc:	e7d2      	b.n	8007364 <_svfiprintf_r+0x9c>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	1d19      	adds	r1, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfbb      	ittet	lt
 80073ca:	425b      	neglt	r3, r3
 80073cc:	f042 0202 	orrlt.w	r2, r2, #2
 80073d0:	9307      	strge	r3, [sp, #28]
 80073d2:	9307      	strlt	r3, [sp, #28]
 80073d4:	bfb8      	it	lt
 80073d6:	9204      	strlt	r2, [sp, #16]
 80073d8:	7823      	ldrb	r3, [r4, #0]
 80073da:	2b2e      	cmp	r3, #46	; 0x2e
 80073dc:	d10c      	bne.n	80073f8 <_svfiprintf_r+0x130>
 80073de:	7863      	ldrb	r3, [r4, #1]
 80073e0:	2b2a      	cmp	r3, #42	; 0x2a
 80073e2:	d135      	bne.n	8007450 <_svfiprintf_r+0x188>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	1d1a      	adds	r2, r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	9203      	str	r2, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfb8      	it	lt
 80073f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80073f4:	3402      	adds	r4, #2
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074c4 <_svfiprintf_r+0x1fc>
 80073fc:	7821      	ldrb	r1, [r4, #0]
 80073fe:	2203      	movs	r2, #3
 8007400:	4650      	mov	r0, sl
 8007402:	f7f8 fefd 	bl	8000200 <memchr>
 8007406:	b140      	cbz	r0, 800741a <_svfiprintf_r+0x152>
 8007408:	2340      	movs	r3, #64	; 0x40
 800740a:	eba0 000a 	sub.w	r0, r0, sl
 800740e:	fa03 f000 	lsl.w	r0, r3, r0
 8007412:	9b04      	ldr	r3, [sp, #16]
 8007414:	4303      	orrs	r3, r0
 8007416:	3401      	adds	r4, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	4826      	ldr	r0, [pc, #152]	; (80074b8 <_svfiprintf_r+0x1f0>)
 8007420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007424:	2206      	movs	r2, #6
 8007426:	f7f8 feeb 	bl	8000200 <memchr>
 800742a:	2800      	cmp	r0, #0
 800742c:	d038      	beq.n	80074a0 <_svfiprintf_r+0x1d8>
 800742e:	4b23      	ldr	r3, [pc, #140]	; (80074bc <_svfiprintf_r+0x1f4>)
 8007430:	bb1b      	cbnz	r3, 800747a <_svfiprintf_r+0x1b2>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	3307      	adds	r3, #7
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	3308      	adds	r3, #8
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	4433      	add	r3, r6
 8007442:	9309      	str	r3, [sp, #36]	; 0x24
 8007444:	e767      	b.n	8007316 <_svfiprintf_r+0x4e>
 8007446:	fb0c 3202 	mla	r2, ip, r2, r3
 800744a:	460c      	mov	r4, r1
 800744c:	2001      	movs	r0, #1
 800744e:	e7a5      	b.n	800739c <_svfiprintf_r+0xd4>
 8007450:	2300      	movs	r3, #0
 8007452:	3401      	adds	r4, #1
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	4619      	mov	r1, r3
 8007458:	f04f 0c0a 	mov.w	ip, #10
 800745c:	4620      	mov	r0, r4
 800745e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007462:	3a30      	subs	r2, #48	; 0x30
 8007464:	2a09      	cmp	r2, #9
 8007466:	d903      	bls.n	8007470 <_svfiprintf_r+0x1a8>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0c5      	beq.n	80073f8 <_svfiprintf_r+0x130>
 800746c:	9105      	str	r1, [sp, #20]
 800746e:	e7c3      	b.n	80073f8 <_svfiprintf_r+0x130>
 8007470:	fb0c 2101 	mla	r1, ip, r1, r2
 8007474:	4604      	mov	r4, r0
 8007476:	2301      	movs	r3, #1
 8007478:	e7f0      	b.n	800745c <_svfiprintf_r+0x194>
 800747a:	ab03      	add	r3, sp, #12
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	462a      	mov	r2, r5
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <_svfiprintf_r+0x1f8>)
 8007482:	a904      	add	r1, sp, #16
 8007484:	4638      	mov	r0, r7
 8007486:	f3af 8000 	nop.w
 800748a:	1c42      	adds	r2, r0, #1
 800748c:	4606      	mov	r6, r0
 800748e:	d1d6      	bne.n	800743e <_svfiprintf_r+0x176>
 8007490:	89ab      	ldrh	r3, [r5, #12]
 8007492:	065b      	lsls	r3, r3, #25
 8007494:	f53f af2c 	bmi.w	80072f0 <_svfiprintf_r+0x28>
 8007498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749a:	b01d      	add	sp, #116	; 0x74
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	ab03      	add	r3, sp, #12
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	462a      	mov	r2, r5
 80074a6:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <_svfiprintf_r+0x1f8>)
 80074a8:	a904      	add	r1, sp, #16
 80074aa:	4638      	mov	r0, r7
 80074ac:	f000 f9d4 	bl	8007858 <_printf_i>
 80074b0:	e7eb      	b.n	800748a <_svfiprintf_r+0x1c2>
 80074b2:	bf00      	nop
 80074b4:	08008748 	.word	0x08008748
 80074b8:	08008752 	.word	0x08008752
 80074bc:	00000000 	.word	0x00000000
 80074c0:	08007211 	.word	0x08007211
 80074c4:	0800874e 	.word	0x0800874e

080074c8 <__sfputc_r>:
 80074c8:	6893      	ldr	r3, [r2, #8]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	b410      	push	{r4}
 80074d0:	6093      	str	r3, [r2, #8]
 80074d2:	da08      	bge.n	80074e6 <__sfputc_r+0x1e>
 80074d4:	6994      	ldr	r4, [r2, #24]
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	db01      	blt.n	80074de <__sfputc_r+0x16>
 80074da:	290a      	cmp	r1, #10
 80074dc:	d103      	bne.n	80074e6 <__sfputc_r+0x1e>
 80074de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e2:	f000 badf 	b.w	8007aa4 <__swbuf_r>
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	1c58      	adds	r0, r3, #1
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	7019      	strb	r1, [r3, #0]
 80074ee:	4608      	mov	r0, r1
 80074f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <__sfputs_r>:
 80074f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	18d5      	adds	r5, r2, r3
 8007500:	42ac      	cmp	r4, r5
 8007502:	d101      	bne.n	8007508 <__sfputs_r+0x12>
 8007504:	2000      	movs	r0, #0
 8007506:	e007      	b.n	8007518 <__sfputs_r+0x22>
 8007508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750c:	463a      	mov	r2, r7
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff ffda 	bl	80074c8 <__sfputc_r>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d1f3      	bne.n	8007500 <__sfputs_r+0xa>
 8007518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800751c <_vfiprintf_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	460d      	mov	r5, r1
 8007522:	b09d      	sub	sp, #116	; 0x74
 8007524:	4614      	mov	r4, r2
 8007526:	4698      	mov	r8, r3
 8007528:	4606      	mov	r6, r0
 800752a:	b118      	cbz	r0, 8007534 <_vfiprintf_r+0x18>
 800752c:	6983      	ldr	r3, [r0, #24]
 800752e:	b90b      	cbnz	r3, 8007534 <_vfiprintf_r+0x18>
 8007530:	f000 fc9a 	bl	8007e68 <__sinit>
 8007534:	4b89      	ldr	r3, [pc, #548]	; (800775c <_vfiprintf_r+0x240>)
 8007536:	429d      	cmp	r5, r3
 8007538:	d11b      	bne.n	8007572 <_vfiprintf_r+0x56>
 800753a:	6875      	ldr	r5, [r6, #4]
 800753c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	d405      	bmi.n	800754e <_vfiprintf_r+0x32>
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	059a      	lsls	r2, r3, #22
 8007546:	d402      	bmi.n	800754e <_vfiprintf_r+0x32>
 8007548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800754a:	f000 fd2b 	bl	8007fa4 <__retarget_lock_acquire_recursive>
 800754e:	89ab      	ldrh	r3, [r5, #12]
 8007550:	071b      	lsls	r3, r3, #28
 8007552:	d501      	bpl.n	8007558 <_vfiprintf_r+0x3c>
 8007554:	692b      	ldr	r3, [r5, #16]
 8007556:	b9eb      	cbnz	r3, 8007594 <_vfiprintf_r+0x78>
 8007558:	4629      	mov	r1, r5
 800755a:	4630      	mov	r0, r6
 800755c:	f000 faf4 	bl	8007b48 <__swsetup_r>
 8007560:	b1c0      	cbz	r0, 8007594 <_vfiprintf_r+0x78>
 8007562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007564:	07dc      	lsls	r4, r3, #31
 8007566:	d50e      	bpl.n	8007586 <_vfiprintf_r+0x6a>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	b01d      	add	sp, #116	; 0x74
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	4b7b      	ldr	r3, [pc, #492]	; (8007760 <_vfiprintf_r+0x244>)
 8007574:	429d      	cmp	r5, r3
 8007576:	d101      	bne.n	800757c <_vfiprintf_r+0x60>
 8007578:	68b5      	ldr	r5, [r6, #8]
 800757a:	e7df      	b.n	800753c <_vfiprintf_r+0x20>
 800757c:	4b79      	ldr	r3, [pc, #484]	; (8007764 <_vfiprintf_r+0x248>)
 800757e:	429d      	cmp	r5, r3
 8007580:	bf08      	it	eq
 8007582:	68f5      	ldreq	r5, [r6, #12]
 8007584:	e7da      	b.n	800753c <_vfiprintf_r+0x20>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	0598      	lsls	r0, r3, #22
 800758a:	d4ed      	bmi.n	8007568 <_vfiprintf_r+0x4c>
 800758c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800758e:	f000 fd0a 	bl	8007fa6 <__retarget_lock_release_recursive>
 8007592:	e7e9      	b.n	8007568 <_vfiprintf_r+0x4c>
 8007594:	2300      	movs	r3, #0
 8007596:	9309      	str	r3, [sp, #36]	; 0x24
 8007598:	2320      	movs	r3, #32
 800759a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800759e:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a2:	2330      	movs	r3, #48	; 0x30
 80075a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007768 <_vfiprintf_r+0x24c>
 80075a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ac:	f04f 0901 	mov.w	r9, #1
 80075b0:	4623      	mov	r3, r4
 80075b2:	469a      	mov	sl, r3
 80075b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b8:	b10a      	cbz	r2, 80075be <_vfiprintf_r+0xa2>
 80075ba:	2a25      	cmp	r2, #37	; 0x25
 80075bc:	d1f9      	bne.n	80075b2 <_vfiprintf_r+0x96>
 80075be:	ebba 0b04 	subs.w	fp, sl, r4
 80075c2:	d00b      	beq.n	80075dc <_vfiprintf_r+0xc0>
 80075c4:	465b      	mov	r3, fp
 80075c6:	4622      	mov	r2, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ff93 	bl	80074f6 <__sfputs_r>
 80075d0:	3001      	adds	r0, #1
 80075d2:	f000 80aa 	beq.w	800772a <_vfiprintf_r+0x20e>
 80075d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d8:	445a      	add	r2, fp
 80075da:	9209      	str	r2, [sp, #36]	; 0x24
 80075dc:	f89a 3000 	ldrb.w	r3, [sl]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80a2 	beq.w	800772a <_vfiprintf_r+0x20e>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f04f 32ff 	mov.w	r2, #4294967295
 80075ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f0:	f10a 0a01 	add.w	sl, sl, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075fc:	931a      	str	r3, [sp, #104]	; 0x68
 80075fe:	4654      	mov	r4, sl
 8007600:	2205      	movs	r2, #5
 8007602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007606:	4858      	ldr	r0, [pc, #352]	; (8007768 <_vfiprintf_r+0x24c>)
 8007608:	f7f8 fdfa 	bl	8000200 <memchr>
 800760c:	9a04      	ldr	r2, [sp, #16]
 800760e:	b9d8      	cbnz	r0, 8007648 <_vfiprintf_r+0x12c>
 8007610:	06d1      	lsls	r1, r2, #27
 8007612:	bf44      	itt	mi
 8007614:	2320      	movmi	r3, #32
 8007616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761a:	0713      	lsls	r3, r2, #28
 800761c:	bf44      	itt	mi
 800761e:	232b      	movmi	r3, #43	; 0x2b
 8007620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007624:	f89a 3000 	ldrb.w	r3, [sl]
 8007628:	2b2a      	cmp	r3, #42	; 0x2a
 800762a:	d015      	beq.n	8007658 <_vfiprintf_r+0x13c>
 800762c:	9a07      	ldr	r2, [sp, #28]
 800762e:	4654      	mov	r4, sl
 8007630:	2000      	movs	r0, #0
 8007632:	f04f 0c0a 	mov.w	ip, #10
 8007636:	4621      	mov	r1, r4
 8007638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763c:	3b30      	subs	r3, #48	; 0x30
 800763e:	2b09      	cmp	r3, #9
 8007640:	d94e      	bls.n	80076e0 <_vfiprintf_r+0x1c4>
 8007642:	b1b0      	cbz	r0, 8007672 <_vfiprintf_r+0x156>
 8007644:	9207      	str	r2, [sp, #28]
 8007646:	e014      	b.n	8007672 <_vfiprintf_r+0x156>
 8007648:	eba0 0308 	sub.w	r3, r0, r8
 800764c:	fa09 f303 	lsl.w	r3, r9, r3
 8007650:	4313      	orrs	r3, r2
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	46a2      	mov	sl, r4
 8007656:	e7d2      	b.n	80075fe <_vfiprintf_r+0xe2>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	1d19      	adds	r1, r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	9103      	str	r1, [sp, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfbb      	ittet	lt
 8007664:	425b      	neglt	r3, r3
 8007666:	f042 0202 	orrlt.w	r2, r2, #2
 800766a:	9307      	strge	r3, [sp, #28]
 800766c:	9307      	strlt	r3, [sp, #28]
 800766e:	bfb8      	it	lt
 8007670:	9204      	strlt	r2, [sp, #16]
 8007672:	7823      	ldrb	r3, [r4, #0]
 8007674:	2b2e      	cmp	r3, #46	; 0x2e
 8007676:	d10c      	bne.n	8007692 <_vfiprintf_r+0x176>
 8007678:	7863      	ldrb	r3, [r4, #1]
 800767a:	2b2a      	cmp	r3, #42	; 0x2a
 800767c:	d135      	bne.n	80076ea <_vfiprintf_r+0x1ce>
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	1d1a      	adds	r2, r3, #4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	9203      	str	r2, [sp, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bfb8      	it	lt
 800768a:	f04f 33ff 	movlt.w	r3, #4294967295
 800768e:	3402      	adds	r4, #2
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007778 <_vfiprintf_r+0x25c>
 8007696:	7821      	ldrb	r1, [r4, #0]
 8007698:	2203      	movs	r2, #3
 800769a:	4650      	mov	r0, sl
 800769c:	f7f8 fdb0 	bl	8000200 <memchr>
 80076a0:	b140      	cbz	r0, 80076b4 <_vfiprintf_r+0x198>
 80076a2:	2340      	movs	r3, #64	; 0x40
 80076a4:	eba0 000a 	sub.w	r0, r0, sl
 80076a8:	fa03 f000 	lsl.w	r0, r3, r0
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	4303      	orrs	r3, r0
 80076b0:	3401      	adds	r4, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b8:	482c      	ldr	r0, [pc, #176]	; (800776c <_vfiprintf_r+0x250>)
 80076ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076be:	2206      	movs	r2, #6
 80076c0:	f7f8 fd9e 	bl	8000200 <memchr>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d03f      	beq.n	8007748 <_vfiprintf_r+0x22c>
 80076c8:	4b29      	ldr	r3, [pc, #164]	; (8007770 <_vfiprintf_r+0x254>)
 80076ca:	bb1b      	cbnz	r3, 8007714 <_vfiprintf_r+0x1f8>
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	3307      	adds	r3, #7
 80076d0:	f023 0307 	bic.w	r3, r3, #7
 80076d4:	3308      	adds	r3, #8
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	443b      	add	r3, r7
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	e767      	b.n	80075b0 <_vfiprintf_r+0x94>
 80076e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e4:	460c      	mov	r4, r1
 80076e6:	2001      	movs	r0, #1
 80076e8:	e7a5      	b.n	8007636 <_vfiprintf_r+0x11a>
 80076ea:	2300      	movs	r3, #0
 80076ec:	3401      	adds	r4, #1
 80076ee:	9305      	str	r3, [sp, #20]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f04f 0c0a 	mov.w	ip, #10
 80076f6:	4620      	mov	r0, r4
 80076f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076fc:	3a30      	subs	r2, #48	; 0x30
 80076fe:	2a09      	cmp	r2, #9
 8007700:	d903      	bls.n	800770a <_vfiprintf_r+0x1ee>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0c5      	beq.n	8007692 <_vfiprintf_r+0x176>
 8007706:	9105      	str	r1, [sp, #20]
 8007708:	e7c3      	b.n	8007692 <_vfiprintf_r+0x176>
 800770a:	fb0c 2101 	mla	r1, ip, r1, r2
 800770e:	4604      	mov	r4, r0
 8007710:	2301      	movs	r3, #1
 8007712:	e7f0      	b.n	80076f6 <_vfiprintf_r+0x1da>
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	462a      	mov	r2, r5
 800771a:	4b16      	ldr	r3, [pc, #88]	; (8007774 <_vfiprintf_r+0x258>)
 800771c:	a904      	add	r1, sp, #16
 800771e:	4630      	mov	r0, r6
 8007720:	f3af 8000 	nop.w
 8007724:	4607      	mov	r7, r0
 8007726:	1c78      	adds	r0, r7, #1
 8007728:	d1d6      	bne.n	80076d8 <_vfiprintf_r+0x1bc>
 800772a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772c:	07d9      	lsls	r1, r3, #31
 800772e:	d405      	bmi.n	800773c <_vfiprintf_r+0x220>
 8007730:	89ab      	ldrh	r3, [r5, #12]
 8007732:	059a      	lsls	r2, r3, #22
 8007734:	d402      	bmi.n	800773c <_vfiprintf_r+0x220>
 8007736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007738:	f000 fc35 	bl	8007fa6 <__retarget_lock_release_recursive>
 800773c:	89ab      	ldrh	r3, [r5, #12]
 800773e:	065b      	lsls	r3, r3, #25
 8007740:	f53f af12 	bmi.w	8007568 <_vfiprintf_r+0x4c>
 8007744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007746:	e711      	b.n	800756c <_vfiprintf_r+0x50>
 8007748:	ab03      	add	r3, sp, #12
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	462a      	mov	r2, r5
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <_vfiprintf_r+0x258>)
 8007750:	a904      	add	r1, sp, #16
 8007752:	4630      	mov	r0, r6
 8007754:	f000 f880 	bl	8007858 <_printf_i>
 8007758:	e7e4      	b.n	8007724 <_vfiprintf_r+0x208>
 800775a:	bf00      	nop
 800775c:	0800879c 	.word	0x0800879c
 8007760:	080087bc 	.word	0x080087bc
 8007764:	0800877c 	.word	0x0800877c
 8007768:	08008748 	.word	0x08008748
 800776c:	08008752 	.word	0x08008752
 8007770:	00000000 	.word	0x00000000
 8007774:	080074f7 	.word	0x080074f7
 8007778:	0800874e 	.word	0x0800874e

0800777c <_printf_common>:
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	4616      	mov	r6, r2
 8007782:	4699      	mov	r9, r3
 8007784:	688a      	ldr	r2, [r1, #8]
 8007786:	690b      	ldr	r3, [r1, #16]
 8007788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800778c:	4293      	cmp	r3, r2
 800778e:	bfb8      	it	lt
 8007790:	4613      	movlt	r3, r2
 8007792:	6033      	str	r3, [r6, #0]
 8007794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007798:	4607      	mov	r7, r0
 800779a:	460c      	mov	r4, r1
 800779c:	b10a      	cbz	r2, 80077a2 <_printf_common+0x26>
 800779e:	3301      	adds	r3, #1
 80077a0:	6033      	str	r3, [r6, #0]
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	0699      	lsls	r1, r3, #26
 80077a6:	bf42      	ittt	mi
 80077a8:	6833      	ldrmi	r3, [r6, #0]
 80077aa:	3302      	addmi	r3, #2
 80077ac:	6033      	strmi	r3, [r6, #0]
 80077ae:	6825      	ldr	r5, [r4, #0]
 80077b0:	f015 0506 	ands.w	r5, r5, #6
 80077b4:	d106      	bne.n	80077c4 <_printf_common+0x48>
 80077b6:	f104 0a19 	add.w	sl, r4, #25
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	6832      	ldr	r2, [r6, #0]
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc26      	bgt.n	8007812 <_printf_common+0x96>
 80077c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c8:	1e13      	subs	r3, r2, #0
 80077ca:	6822      	ldr	r2, [r4, #0]
 80077cc:	bf18      	it	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	0692      	lsls	r2, r2, #26
 80077d2:	d42b      	bmi.n	800782c <_printf_common+0xb0>
 80077d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d8:	4649      	mov	r1, r9
 80077da:	4638      	mov	r0, r7
 80077dc:	47c0      	blx	r8
 80077de:	3001      	adds	r0, #1
 80077e0:	d01e      	beq.n	8007820 <_printf_common+0xa4>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	68e5      	ldr	r5, [r4, #12]
 80077e6:	6832      	ldr	r2, [r6, #0]
 80077e8:	f003 0306 	and.w	r3, r3, #6
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	bf08      	it	eq
 80077f0:	1aad      	subeq	r5, r5, r2
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	bf0c      	ite	eq
 80077f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077fc:	2500      	movne	r5, #0
 80077fe:	4293      	cmp	r3, r2
 8007800:	bfc4      	itt	gt
 8007802:	1a9b      	subgt	r3, r3, r2
 8007804:	18ed      	addgt	r5, r5, r3
 8007806:	2600      	movs	r6, #0
 8007808:	341a      	adds	r4, #26
 800780a:	42b5      	cmp	r5, r6
 800780c:	d11a      	bne.n	8007844 <_printf_common+0xc8>
 800780e:	2000      	movs	r0, #0
 8007810:	e008      	b.n	8007824 <_printf_common+0xa8>
 8007812:	2301      	movs	r3, #1
 8007814:	4652      	mov	r2, sl
 8007816:	4649      	mov	r1, r9
 8007818:	4638      	mov	r0, r7
 800781a:	47c0      	blx	r8
 800781c:	3001      	adds	r0, #1
 800781e:	d103      	bne.n	8007828 <_printf_common+0xac>
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	3501      	adds	r5, #1
 800782a:	e7c6      	b.n	80077ba <_printf_common+0x3e>
 800782c:	18e1      	adds	r1, r4, r3
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	2030      	movs	r0, #48	; 0x30
 8007832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007836:	4422      	add	r2, r4
 8007838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800783c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007840:	3302      	adds	r3, #2
 8007842:	e7c7      	b.n	80077d4 <_printf_common+0x58>
 8007844:	2301      	movs	r3, #1
 8007846:	4622      	mov	r2, r4
 8007848:	4649      	mov	r1, r9
 800784a:	4638      	mov	r0, r7
 800784c:	47c0      	blx	r8
 800784e:	3001      	adds	r0, #1
 8007850:	d0e6      	beq.n	8007820 <_printf_common+0xa4>
 8007852:	3601      	adds	r6, #1
 8007854:	e7d9      	b.n	800780a <_printf_common+0x8e>
	...

08007858 <_printf_i>:
 8007858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	7e0f      	ldrb	r7, [r1, #24]
 800785e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007860:	2f78      	cmp	r7, #120	; 0x78
 8007862:	4691      	mov	r9, r2
 8007864:	4680      	mov	r8, r0
 8007866:	460c      	mov	r4, r1
 8007868:	469a      	mov	sl, r3
 800786a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800786e:	d807      	bhi.n	8007880 <_printf_i+0x28>
 8007870:	2f62      	cmp	r7, #98	; 0x62
 8007872:	d80a      	bhi.n	800788a <_printf_i+0x32>
 8007874:	2f00      	cmp	r7, #0
 8007876:	f000 80d8 	beq.w	8007a2a <_printf_i+0x1d2>
 800787a:	2f58      	cmp	r7, #88	; 0x58
 800787c:	f000 80a3 	beq.w	80079c6 <_printf_i+0x16e>
 8007880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007888:	e03a      	b.n	8007900 <_printf_i+0xa8>
 800788a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800788e:	2b15      	cmp	r3, #21
 8007890:	d8f6      	bhi.n	8007880 <_printf_i+0x28>
 8007892:	a101      	add	r1, pc, #4	; (adr r1, 8007898 <_printf_i+0x40>)
 8007894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007898:	080078f1 	.word	0x080078f1
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007881 	.word	0x08007881
 80078a4:	08007881 	.word	0x08007881
 80078a8:	08007881 	.word	0x08007881
 80078ac:	08007881 	.word	0x08007881
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007881 	.word	0x08007881
 80078b8:	08007881 	.word	0x08007881
 80078bc:	08007881 	.word	0x08007881
 80078c0:	08007881 	.word	0x08007881
 80078c4:	08007a11 	.word	0x08007a11
 80078c8:	08007935 	.word	0x08007935
 80078cc:	080079f3 	.word	0x080079f3
 80078d0:	08007881 	.word	0x08007881
 80078d4:	08007881 	.word	0x08007881
 80078d8:	08007a33 	.word	0x08007a33
 80078dc:	08007881 	.word	0x08007881
 80078e0:	08007935 	.word	0x08007935
 80078e4:	08007881 	.word	0x08007881
 80078e8:	08007881 	.word	0x08007881
 80078ec:	080079fb 	.word	0x080079fb
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	1d1a      	adds	r2, r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	602a      	str	r2, [r5, #0]
 80078f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007900:	2301      	movs	r3, #1
 8007902:	e0a3      	b.n	8007a4c <_printf_i+0x1f4>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	6829      	ldr	r1, [r5, #0]
 8007908:	0606      	lsls	r6, r0, #24
 800790a:	f101 0304 	add.w	r3, r1, #4
 800790e:	d50a      	bpl.n	8007926 <_printf_i+0xce>
 8007910:	680e      	ldr	r6, [r1, #0]
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	2e00      	cmp	r6, #0
 8007916:	da03      	bge.n	8007920 <_printf_i+0xc8>
 8007918:	232d      	movs	r3, #45	; 0x2d
 800791a:	4276      	negs	r6, r6
 800791c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007920:	485e      	ldr	r0, [pc, #376]	; (8007a9c <_printf_i+0x244>)
 8007922:	230a      	movs	r3, #10
 8007924:	e019      	b.n	800795a <_printf_i+0x102>
 8007926:	680e      	ldr	r6, [r1, #0]
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800792e:	bf18      	it	ne
 8007930:	b236      	sxthne	r6, r6
 8007932:	e7ef      	b.n	8007914 <_printf_i+0xbc>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	6820      	ldr	r0, [r4, #0]
 8007938:	1d19      	adds	r1, r3, #4
 800793a:	6029      	str	r1, [r5, #0]
 800793c:	0601      	lsls	r1, r0, #24
 800793e:	d501      	bpl.n	8007944 <_printf_i+0xec>
 8007940:	681e      	ldr	r6, [r3, #0]
 8007942:	e002      	b.n	800794a <_printf_i+0xf2>
 8007944:	0646      	lsls	r6, r0, #25
 8007946:	d5fb      	bpl.n	8007940 <_printf_i+0xe8>
 8007948:	881e      	ldrh	r6, [r3, #0]
 800794a:	4854      	ldr	r0, [pc, #336]	; (8007a9c <_printf_i+0x244>)
 800794c:	2f6f      	cmp	r7, #111	; 0x6f
 800794e:	bf0c      	ite	eq
 8007950:	2308      	moveq	r3, #8
 8007952:	230a      	movne	r3, #10
 8007954:	2100      	movs	r1, #0
 8007956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800795a:	6865      	ldr	r5, [r4, #4]
 800795c:	60a5      	str	r5, [r4, #8]
 800795e:	2d00      	cmp	r5, #0
 8007960:	bfa2      	ittt	ge
 8007962:	6821      	ldrge	r1, [r4, #0]
 8007964:	f021 0104 	bicge.w	r1, r1, #4
 8007968:	6021      	strge	r1, [r4, #0]
 800796a:	b90e      	cbnz	r6, 8007970 <_printf_i+0x118>
 800796c:	2d00      	cmp	r5, #0
 800796e:	d04d      	beq.n	8007a0c <_printf_i+0x1b4>
 8007970:	4615      	mov	r5, r2
 8007972:	fbb6 f1f3 	udiv	r1, r6, r3
 8007976:	fb03 6711 	mls	r7, r3, r1, r6
 800797a:	5dc7      	ldrb	r7, [r0, r7]
 800797c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007980:	4637      	mov	r7, r6
 8007982:	42bb      	cmp	r3, r7
 8007984:	460e      	mov	r6, r1
 8007986:	d9f4      	bls.n	8007972 <_printf_i+0x11a>
 8007988:	2b08      	cmp	r3, #8
 800798a:	d10b      	bne.n	80079a4 <_printf_i+0x14c>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	07de      	lsls	r6, r3, #31
 8007990:	d508      	bpl.n	80079a4 <_printf_i+0x14c>
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	4299      	cmp	r1, r3
 8007998:	bfde      	ittt	le
 800799a:	2330      	movle	r3, #48	; 0x30
 800799c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079a4:	1b52      	subs	r2, r2, r5
 80079a6:	6122      	str	r2, [r4, #16]
 80079a8:	f8cd a000 	str.w	sl, [sp]
 80079ac:	464b      	mov	r3, r9
 80079ae:	aa03      	add	r2, sp, #12
 80079b0:	4621      	mov	r1, r4
 80079b2:	4640      	mov	r0, r8
 80079b4:	f7ff fee2 	bl	800777c <_printf_common>
 80079b8:	3001      	adds	r0, #1
 80079ba:	d14c      	bne.n	8007a56 <_printf_i+0x1fe>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	b004      	add	sp, #16
 80079c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c6:	4835      	ldr	r0, [pc, #212]	; (8007a9c <_printf_i+0x244>)
 80079c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079cc:	6829      	ldr	r1, [r5, #0]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d4:	6029      	str	r1, [r5, #0]
 80079d6:	061d      	lsls	r5, r3, #24
 80079d8:	d514      	bpl.n	8007a04 <_printf_i+0x1ac>
 80079da:	07df      	lsls	r7, r3, #31
 80079dc:	bf44      	itt	mi
 80079de:	f043 0320 	orrmi.w	r3, r3, #32
 80079e2:	6023      	strmi	r3, [r4, #0]
 80079e4:	b91e      	cbnz	r6, 80079ee <_printf_i+0x196>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	f023 0320 	bic.w	r3, r3, #32
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	2310      	movs	r3, #16
 80079f0:	e7b0      	b.n	8007954 <_printf_i+0xfc>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	f043 0320 	orr.w	r3, r3, #32
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	2378      	movs	r3, #120	; 0x78
 80079fc:	4828      	ldr	r0, [pc, #160]	; (8007aa0 <_printf_i+0x248>)
 80079fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a02:	e7e3      	b.n	80079cc <_printf_i+0x174>
 8007a04:	0659      	lsls	r1, r3, #25
 8007a06:	bf48      	it	mi
 8007a08:	b2b6      	uxthmi	r6, r6
 8007a0a:	e7e6      	b.n	80079da <_printf_i+0x182>
 8007a0c:	4615      	mov	r5, r2
 8007a0e:	e7bb      	b.n	8007988 <_printf_i+0x130>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	6826      	ldr	r6, [r4, #0]
 8007a14:	6961      	ldr	r1, [r4, #20]
 8007a16:	1d18      	adds	r0, r3, #4
 8007a18:	6028      	str	r0, [r5, #0]
 8007a1a:	0635      	lsls	r5, r6, #24
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	d501      	bpl.n	8007a24 <_printf_i+0x1cc>
 8007a20:	6019      	str	r1, [r3, #0]
 8007a22:	e002      	b.n	8007a2a <_printf_i+0x1d2>
 8007a24:	0670      	lsls	r0, r6, #25
 8007a26:	d5fb      	bpl.n	8007a20 <_printf_i+0x1c8>
 8007a28:	8019      	strh	r1, [r3, #0]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	4615      	mov	r5, r2
 8007a30:	e7ba      	b.n	80079a8 <_printf_i+0x150>
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	1d1a      	adds	r2, r3, #4
 8007a36:	602a      	str	r2, [r5, #0]
 8007a38:	681d      	ldr	r5, [r3, #0]
 8007a3a:	6862      	ldr	r2, [r4, #4]
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f7f8 fbde 	bl	8000200 <memchr>
 8007a44:	b108      	cbz	r0, 8007a4a <_printf_i+0x1f2>
 8007a46:	1b40      	subs	r0, r0, r5
 8007a48:	6060      	str	r0, [r4, #4]
 8007a4a:	6863      	ldr	r3, [r4, #4]
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a54:	e7a8      	b.n	80079a8 <_printf_i+0x150>
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	462a      	mov	r2, r5
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	47d0      	blx	sl
 8007a60:	3001      	adds	r0, #1
 8007a62:	d0ab      	beq.n	80079bc <_printf_i+0x164>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	079b      	lsls	r3, r3, #30
 8007a68:	d413      	bmi.n	8007a92 <_printf_i+0x23a>
 8007a6a:	68e0      	ldr	r0, [r4, #12]
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	4298      	cmp	r0, r3
 8007a70:	bfb8      	it	lt
 8007a72:	4618      	movlt	r0, r3
 8007a74:	e7a4      	b.n	80079c0 <_printf_i+0x168>
 8007a76:	2301      	movs	r3, #1
 8007a78:	4632      	mov	r2, r6
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	47d0      	blx	sl
 8007a80:	3001      	adds	r0, #1
 8007a82:	d09b      	beq.n	80079bc <_printf_i+0x164>
 8007a84:	3501      	adds	r5, #1
 8007a86:	68e3      	ldr	r3, [r4, #12]
 8007a88:	9903      	ldr	r1, [sp, #12]
 8007a8a:	1a5b      	subs	r3, r3, r1
 8007a8c:	42ab      	cmp	r3, r5
 8007a8e:	dcf2      	bgt.n	8007a76 <_printf_i+0x21e>
 8007a90:	e7eb      	b.n	8007a6a <_printf_i+0x212>
 8007a92:	2500      	movs	r5, #0
 8007a94:	f104 0619 	add.w	r6, r4, #25
 8007a98:	e7f5      	b.n	8007a86 <_printf_i+0x22e>
 8007a9a:	bf00      	nop
 8007a9c:	08008759 	.word	0x08008759
 8007aa0:	0800876a 	.word	0x0800876a

08007aa4 <__swbuf_r>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	460e      	mov	r6, r1
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	4605      	mov	r5, r0
 8007aac:	b118      	cbz	r0, 8007ab6 <__swbuf_r+0x12>
 8007aae:	6983      	ldr	r3, [r0, #24]
 8007ab0:	b90b      	cbnz	r3, 8007ab6 <__swbuf_r+0x12>
 8007ab2:	f000 f9d9 	bl	8007e68 <__sinit>
 8007ab6:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <__swbuf_r+0x98>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	d12b      	bne.n	8007b14 <__swbuf_r+0x70>
 8007abc:	686c      	ldr	r4, [r5, #4]
 8007abe:	69a3      	ldr	r3, [r4, #24]
 8007ac0:	60a3      	str	r3, [r4, #8]
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	071a      	lsls	r2, r3, #28
 8007ac6:	d52f      	bpl.n	8007b28 <__swbuf_r+0x84>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	b36b      	cbz	r3, 8007b28 <__swbuf_r+0x84>
 8007acc:	6923      	ldr	r3, [r4, #16]
 8007ace:	6820      	ldr	r0, [r4, #0]
 8007ad0:	1ac0      	subs	r0, r0, r3
 8007ad2:	6963      	ldr	r3, [r4, #20]
 8007ad4:	b2f6      	uxtb	r6, r6
 8007ad6:	4283      	cmp	r3, r0
 8007ad8:	4637      	mov	r7, r6
 8007ada:	dc04      	bgt.n	8007ae6 <__swbuf_r+0x42>
 8007adc:	4621      	mov	r1, r4
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 f92e 	bl	8007d40 <_fflush_r>
 8007ae4:	bb30      	cbnz	r0, 8007b34 <__swbuf_r+0x90>
 8007ae6:	68a3      	ldr	r3, [r4, #8]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	60a3      	str	r3, [r4, #8]
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	701e      	strb	r6, [r3, #0]
 8007af4:	6963      	ldr	r3, [r4, #20]
 8007af6:	3001      	adds	r0, #1
 8007af8:	4283      	cmp	r3, r0
 8007afa:	d004      	beq.n	8007b06 <__swbuf_r+0x62>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	07db      	lsls	r3, r3, #31
 8007b00:	d506      	bpl.n	8007b10 <__swbuf_r+0x6c>
 8007b02:	2e0a      	cmp	r6, #10
 8007b04:	d104      	bne.n	8007b10 <__swbuf_r+0x6c>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 f919 	bl	8007d40 <_fflush_r>
 8007b0e:	b988      	cbnz	r0, 8007b34 <__swbuf_r+0x90>
 8007b10:	4638      	mov	r0, r7
 8007b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b14:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <__swbuf_r+0x9c>)
 8007b16:	429c      	cmp	r4, r3
 8007b18:	d101      	bne.n	8007b1e <__swbuf_r+0x7a>
 8007b1a:	68ac      	ldr	r4, [r5, #8]
 8007b1c:	e7cf      	b.n	8007abe <__swbuf_r+0x1a>
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <__swbuf_r+0xa0>)
 8007b20:	429c      	cmp	r4, r3
 8007b22:	bf08      	it	eq
 8007b24:	68ec      	ldreq	r4, [r5, #12]
 8007b26:	e7ca      	b.n	8007abe <__swbuf_r+0x1a>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 f80c 	bl	8007b48 <__swsetup_r>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d0cb      	beq.n	8007acc <__swbuf_r+0x28>
 8007b34:	f04f 37ff 	mov.w	r7, #4294967295
 8007b38:	e7ea      	b.n	8007b10 <__swbuf_r+0x6c>
 8007b3a:	bf00      	nop
 8007b3c:	0800879c 	.word	0x0800879c
 8007b40:	080087bc 	.word	0x080087bc
 8007b44:	0800877c 	.word	0x0800877c

08007b48 <__swsetup_r>:
 8007b48:	4b32      	ldr	r3, [pc, #200]	; (8007c14 <__swsetup_r+0xcc>)
 8007b4a:	b570      	push	{r4, r5, r6, lr}
 8007b4c:	681d      	ldr	r5, [r3, #0]
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460c      	mov	r4, r1
 8007b52:	b125      	cbz	r5, 8007b5e <__swsetup_r+0x16>
 8007b54:	69ab      	ldr	r3, [r5, #24]
 8007b56:	b913      	cbnz	r3, 8007b5e <__swsetup_r+0x16>
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f985 	bl	8007e68 <__sinit>
 8007b5e:	4b2e      	ldr	r3, [pc, #184]	; (8007c18 <__swsetup_r+0xd0>)
 8007b60:	429c      	cmp	r4, r3
 8007b62:	d10f      	bne.n	8007b84 <__swsetup_r+0x3c>
 8007b64:	686c      	ldr	r4, [r5, #4]
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b6c:	0719      	lsls	r1, r3, #28
 8007b6e:	d42c      	bmi.n	8007bca <__swsetup_r+0x82>
 8007b70:	06dd      	lsls	r5, r3, #27
 8007b72:	d411      	bmi.n	8007b98 <__swsetup_r+0x50>
 8007b74:	2309      	movs	r3, #9
 8007b76:	6033      	str	r3, [r6, #0]
 8007b78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b82:	e03e      	b.n	8007c02 <__swsetup_r+0xba>
 8007b84:	4b25      	ldr	r3, [pc, #148]	; (8007c1c <__swsetup_r+0xd4>)
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d101      	bne.n	8007b8e <__swsetup_r+0x46>
 8007b8a:	68ac      	ldr	r4, [r5, #8]
 8007b8c:	e7eb      	b.n	8007b66 <__swsetup_r+0x1e>
 8007b8e:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <__swsetup_r+0xd8>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	bf08      	it	eq
 8007b94:	68ec      	ldreq	r4, [r5, #12]
 8007b96:	e7e6      	b.n	8007b66 <__swsetup_r+0x1e>
 8007b98:	0758      	lsls	r0, r3, #29
 8007b9a:	d512      	bpl.n	8007bc2 <__swsetup_r+0x7a>
 8007b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9e:	b141      	cbz	r1, 8007bb2 <__swsetup_r+0x6a>
 8007ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba4:	4299      	cmp	r1, r3
 8007ba6:	d002      	beq.n	8007bae <__swsetup_r+0x66>
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f7ff f941 	bl	8006e30 <_free_r>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f043 0308 	orr.w	r3, r3, #8
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	b94b      	cbnz	r3, 8007be2 <__swsetup_r+0x9a>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd8:	d003      	beq.n	8007be2 <__swsetup_r+0x9a>
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f000 fa09 	bl	8007ff4 <__smakebuf_r>
 8007be2:	89a0      	ldrh	r0, [r4, #12]
 8007be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be8:	f010 0301 	ands.w	r3, r0, #1
 8007bec:	d00a      	beq.n	8007c04 <__swsetup_r+0xbc>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60a3      	str	r3, [r4, #8]
 8007bf2:	6963      	ldr	r3, [r4, #20]
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	61a3      	str	r3, [r4, #24]
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	b943      	cbnz	r3, 8007c0e <__swsetup_r+0xc6>
 8007bfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c00:	d1ba      	bne.n	8007b78 <__swsetup_r+0x30>
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	0781      	lsls	r1, r0, #30
 8007c06:	bf58      	it	pl
 8007c08:	6963      	ldrpl	r3, [r4, #20]
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	e7f4      	b.n	8007bf8 <__swsetup_r+0xb0>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e7f7      	b.n	8007c02 <__swsetup_r+0xba>
 8007c12:	bf00      	nop
 8007c14:	20000010 	.word	0x20000010
 8007c18:	0800879c 	.word	0x0800879c
 8007c1c:	080087bc 	.word	0x080087bc
 8007c20:	0800877c 	.word	0x0800877c

08007c24 <abort>:
 8007c24:	b508      	push	{r3, lr}
 8007c26:	2006      	movs	r0, #6
 8007c28:	f000 faa4 	bl	8008174 <raise>
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	f7f9 ffab 	bl	8001b88 <_exit>
	...

08007c34 <__sflush_r>:
 8007c34:	898a      	ldrh	r2, [r1, #12]
 8007c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	0710      	lsls	r0, r2, #28
 8007c3e:	460c      	mov	r4, r1
 8007c40:	d458      	bmi.n	8007cf4 <__sflush_r+0xc0>
 8007c42:	684b      	ldr	r3, [r1, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc05      	bgt.n	8007c54 <__sflush_r+0x20>
 8007c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dc02      	bgt.n	8007c54 <__sflush_r+0x20>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c56:	2e00      	cmp	r6, #0
 8007c58:	d0f9      	beq.n	8007c4e <__sflush_r+0x1a>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c60:	682f      	ldr	r7, [r5, #0]
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	d032      	beq.n	8007ccc <__sflush_r+0x98>
 8007c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	075a      	lsls	r2, r3, #29
 8007c6c:	d505      	bpl.n	8007c7a <__sflush_r+0x46>
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c74:	b10b      	cbz	r3, 8007c7a <__sflush_r+0x46>
 8007c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c78:	1ac0      	subs	r0, r0, r3
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c80:	6a21      	ldr	r1, [r4, #32]
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b0      	blx	r6
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	d106      	bne.n	8007c9a <__sflush_r+0x66>
 8007c8c:	6829      	ldr	r1, [r5, #0]
 8007c8e:	291d      	cmp	r1, #29
 8007c90:	d82c      	bhi.n	8007cec <__sflush_r+0xb8>
 8007c92:	4a2a      	ldr	r2, [pc, #168]	; (8007d3c <__sflush_r+0x108>)
 8007c94:	40ca      	lsrs	r2, r1
 8007c96:	07d6      	lsls	r6, r2, #31
 8007c98:	d528      	bpl.n	8007cec <__sflush_r+0xb8>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	6062      	str	r2, [r4, #4]
 8007c9e:	04d9      	lsls	r1, r3, #19
 8007ca0:	6922      	ldr	r2, [r4, #16]
 8007ca2:	6022      	str	r2, [r4, #0]
 8007ca4:	d504      	bpl.n	8007cb0 <__sflush_r+0x7c>
 8007ca6:	1c42      	adds	r2, r0, #1
 8007ca8:	d101      	bne.n	8007cae <__sflush_r+0x7a>
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	b903      	cbnz	r3, 8007cb0 <__sflush_r+0x7c>
 8007cae:	6560      	str	r0, [r4, #84]	; 0x54
 8007cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cb2:	602f      	str	r7, [r5, #0]
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	d0ca      	beq.n	8007c4e <__sflush_r+0x1a>
 8007cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cbc:	4299      	cmp	r1, r3
 8007cbe:	d002      	beq.n	8007cc6 <__sflush_r+0x92>
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f7ff f8b5 	bl	8006e30 <_free_r>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8007cca:	e7c1      	b.n	8007c50 <__sflush_r+0x1c>
 8007ccc:	6a21      	ldr	r1, [r4, #32]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b0      	blx	r6
 8007cd4:	1c41      	adds	r1, r0, #1
 8007cd6:	d1c7      	bne.n	8007c68 <__sflush_r+0x34>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0c4      	beq.n	8007c68 <__sflush_r+0x34>
 8007cde:	2b1d      	cmp	r3, #29
 8007ce0:	d001      	beq.n	8007ce6 <__sflush_r+0xb2>
 8007ce2:	2b16      	cmp	r3, #22
 8007ce4:	d101      	bne.n	8007cea <__sflush_r+0xb6>
 8007ce6:	602f      	str	r7, [r5, #0]
 8007ce8:	e7b1      	b.n	8007c4e <__sflush_r+0x1a>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cf0:	81a3      	strh	r3, [r4, #12]
 8007cf2:	e7ad      	b.n	8007c50 <__sflush_r+0x1c>
 8007cf4:	690f      	ldr	r7, [r1, #16]
 8007cf6:	2f00      	cmp	r7, #0
 8007cf8:	d0a9      	beq.n	8007c4e <__sflush_r+0x1a>
 8007cfa:	0793      	lsls	r3, r2, #30
 8007cfc:	680e      	ldr	r6, [r1, #0]
 8007cfe:	bf08      	it	eq
 8007d00:	694b      	ldreq	r3, [r1, #20]
 8007d02:	600f      	str	r7, [r1, #0]
 8007d04:	bf18      	it	ne
 8007d06:	2300      	movne	r3, #0
 8007d08:	eba6 0807 	sub.w	r8, r6, r7
 8007d0c:	608b      	str	r3, [r1, #8]
 8007d0e:	f1b8 0f00 	cmp.w	r8, #0
 8007d12:	dd9c      	ble.n	8007c4e <__sflush_r+0x1a>
 8007d14:	6a21      	ldr	r1, [r4, #32]
 8007d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d18:	4643      	mov	r3, r8
 8007d1a:	463a      	mov	r2, r7
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b0      	blx	r6
 8007d20:	2800      	cmp	r0, #0
 8007d22:	dc06      	bgt.n	8007d32 <__sflush_r+0xfe>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	e78e      	b.n	8007c50 <__sflush_r+0x1c>
 8007d32:	4407      	add	r7, r0
 8007d34:	eba8 0800 	sub.w	r8, r8, r0
 8007d38:	e7e9      	b.n	8007d0e <__sflush_r+0xda>
 8007d3a:	bf00      	nop
 8007d3c:	20400001 	.word	0x20400001

08007d40 <_fflush_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	690b      	ldr	r3, [r1, #16]
 8007d44:	4605      	mov	r5, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b913      	cbnz	r3, 8007d50 <_fflush_r+0x10>
 8007d4a:	2500      	movs	r5, #0
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	b118      	cbz	r0, 8007d5a <_fflush_r+0x1a>
 8007d52:	6983      	ldr	r3, [r0, #24]
 8007d54:	b90b      	cbnz	r3, 8007d5a <_fflush_r+0x1a>
 8007d56:	f000 f887 	bl	8007e68 <__sinit>
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <_fflush_r+0x6c>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d11b      	bne.n	8007d98 <_fflush_r+0x58>
 8007d60:	686c      	ldr	r4, [r5, #4]
 8007d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0ef      	beq.n	8007d4a <_fflush_r+0xa>
 8007d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d6c:	07d0      	lsls	r0, r2, #31
 8007d6e:	d404      	bmi.n	8007d7a <_fflush_r+0x3a>
 8007d70:	0599      	lsls	r1, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_fflush_r+0x3a>
 8007d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d76:	f000 f915 	bl	8007fa4 <__retarget_lock_acquire_recursive>
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	f7ff ff59 	bl	8007c34 <__sflush_r>
 8007d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d84:	07da      	lsls	r2, r3, #31
 8007d86:	4605      	mov	r5, r0
 8007d88:	d4e0      	bmi.n	8007d4c <_fflush_r+0xc>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	059b      	lsls	r3, r3, #22
 8007d8e:	d4dd      	bmi.n	8007d4c <_fflush_r+0xc>
 8007d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d92:	f000 f908 	bl	8007fa6 <__retarget_lock_release_recursive>
 8007d96:	e7d9      	b.n	8007d4c <_fflush_r+0xc>
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <_fflush_r+0x70>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d101      	bne.n	8007da2 <_fflush_r+0x62>
 8007d9e:	68ac      	ldr	r4, [r5, #8]
 8007da0:	e7df      	b.n	8007d62 <_fflush_r+0x22>
 8007da2:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <_fflush_r+0x74>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	bf08      	it	eq
 8007da8:	68ec      	ldreq	r4, [r5, #12]
 8007daa:	e7da      	b.n	8007d62 <_fflush_r+0x22>
 8007dac:	0800879c 	.word	0x0800879c
 8007db0:	080087bc 	.word	0x080087bc
 8007db4:	0800877c 	.word	0x0800877c

08007db8 <std>:
 8007db8:	2300      	movs	r3, #0
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc6:	6083      	str	r3, [r0, #8]
 8007dc8:	8181      	strh	r1, [r0, #12]
 8007dca:	6643      	str	r3, [r0, #100]	; 0x64
 8007dcc:	81c2      	strh	r2, [r0, #14]
 8007dce:	6183      	str	r3, [r0, #24]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	305c      	adds	r0, #92	; 0x5c
 8007dd6:	f7ff f823 	bl	8006e20 <memset>
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x38>)
 8007ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <std+0x3c>)
 8007de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <std+0x40>)
 8007de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <std+0x44>)
 8007de8:	6224      	str	r4, [r4, #32]
 8007dea:	6323      	str	r3, [r4, #48]	; 0x30
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	bf00      	nop
 8007df0:	080081ad 	.word	0x080081ad
 8007df4:	080081cf 	.word	0x080081cf
 8007df8:	08008207 	.word	0x08008207
 8007dfc:	0800822b 	.word	0x0800822b

08007e00 <_cleanup_r>:
 8007e00:	4901      	ldr	r1, [pc, #4]	; (8007e08 <_cleanup_r+0x8>)
 8007e02:	f000 b8af 	b.w	8007f64 <_fwalk_reent>
 8007e06:	bf00      	nop
 8007e08:	08007d41 	.word	0x08007d41

08007e0c <__sfmoreglue>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	2268      	movs	r2, #104	; 0x68
 8007e10:	1e4d      	subs	r5, r1, #1
 8007e12:	4355      	muls	r5, r2
 8007e14:	460e      	mov	r6, r1
 8007e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e1a:	f7ff f875 	bl	8006f08 <_malloc_r>
 8007e1e:	4604      	mov	r4, r0
 8007e20:	b140      	cbz	r0, 8007e34 <__sfmoreglue+0x28>
 8007e22:	2100      	movs	r1, #0
 8007e24:	e9c0 1600 	strd	r1, r6, [r0]
 8007e28:	300c      	adds	r0, #12
 8007e2a:	60a0      	str	r0, [r4, #8]
 8007e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e30:	f7fe fff6 	bl	8006e20 <memset>
 8007e34:	4620      	mov	r0, r4
 8007e36:	bd70      	pop	{r4, r5, r6, pc}

08007e38 <__sfp_lock_acquire>:
 8007e38:	4801      	ldr	r0, [pc, #4]	; (8007e40 <__sfp_lock_acquire+0x8>)
 8007e3a:	f000 b8b3 	b.w	8007fa4 <__retarget_lock_acquire_recursive>
 8007e3e:	bf00      	nop
 8007e40:	200003d9 	.word	0x200003d9

08007e44 <__sfp_lock_release>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__sfp_lock_release+0x8>)
 8007e46:	f000 b8ae 	b.w	8007fa6 <__retarget_lock_release_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	200003d9 	.word	0x200003d9

08007e50 <__sinit_lock_acquire>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sinit_lock_acquire+0x8>)
 8007e52:	f000 b8a7 	b.w	8007fa4 <__retarget_lock_acquire_recursive>
 8007e56:	bf00      	nop
 8007e58:	200003da 	.word	0x200003da

08007e5c <__sinit_lock_release>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sinit_lock_release+0x8>)
 8007e5e:	f000 b8a2 	b.w	8007fa6 <__retarget_lock_release_recursive>
 8007e62:	bf00      	nop
 8007e64:	200003da 	.word	0x200003da

08007e68 <__sinit>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	f7ff fff0 	bl	8007e50 <__sinit_lock_acquire>
 8007e70:	69a3      	ldr	r3, [r4, #24]
 8007e72:	b11b      	cbz	r3, 8007e7c <__sinit+0x14>
 8007e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e78:	f7ff bff0 	b.w	8007e5c <__sinit_lock_release>
 8007e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e80:	6523      	str	r3, [r4, #80]	; 0x50
 8007e82:	4b13      	ldr	r3, [pc, #76]	; (8007ed0 <__sinit+0x68>)
 8007e84:	4a13      	ldr	r2, [pc, #76]	; (8007ed4 <__sinit+0x6c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	bf04      	itt	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	61a3      	streq	r3, [r4, #24]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f820 	bl	8007ed8 <__sfp>
 8007e98:	6060      	str	r0, [r4, #4]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f81c 	bl	8007ed8 <__sfp>
 8007ea0:	60a0      	str	r0, [r4, #8]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 f818 	bl	8007ed8 <__sfp>
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	60e0      	str	r0, [r4, #12]
 8007eac:	2104      	movs	r1, #4
 8007eae:	6860      	ldr	r0, [r4, #4]
 8007eb0:	f7ff ff82 	bl	8007db8 <std>
 8007eb4:	68a0      	ldr	r0, [r4, #8]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	2109      	movs	r1, #9
 8007eba:	f7ff ff7d 	bl	8007db8 <std>
 8007ebe:	68e0      	ldr	r0, [r4, #12]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	2112      	movs	r1, #18
 8007ec4:	f7ff ff78 	bl	8007db8 <std>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	61a3      	str	r3, [r4, #24]
 8007ecc:	e7d2      	b.n	8007e74 <__sinit+0xc>
 8007ece:	bf00      	nop
 8007ed0:	08008694 	.word	0x08008694
 8007ed4:	08007e01 	.word	0x08007e01

08007ed8 <__sfp>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	4607      	mov	r7, r0
 8007edc:	f7ff ffac 	bl	8007e38 <__sfp_lock_acquire>
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <__sfp+0x84>)
 8007ee2:	681e      	ldr	r6, [r3, #0]
 8007ee4:	69b3      	ldr	r3, [r6, #24]
 8007ee6:	b913      	cbnz	r3, 8007eee <__sfp+0x16>
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff ffbd 	bl	8007e68 <__sinit>
 8007eee:	3648      	adds	r6, #72	; 0x48
 8007ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	d503      	bpl.n	8007f00 <__sfp+0x28>
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	b30b      	cbz	r3, 8007f40 <__sfp+0x68>
 8007efc:	6836      	ldr	r6, [r6, #0]
 8007efe:	e7f7      	b.n	8007ef0 <__sfp+0x18>
 8007f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f04:	b9d5      	cbnz	r5, 8007f3c <__sfp+0x64>
 8007f06:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <__sfp+0x88>)
 8007f08:	60e3      	str	r3, [r4, #12]
 8007f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f10:	f000 f847 	bl	8007fa2 <__retarget_lock_init_recursive>
 8007f14:	f7ff ff96 	bl	8007e44 <__sfp_lock_release>
 8007f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f20:	6025      	str	r5, [r4, #0]
 8007f22:	61a5      	str	r5, [r4, #24]
 8007f24:	2208      	movs	r2, #8
 8007f26:	4629      	mov	r1, r5
 8007f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f2c:	f7fe ff78 	bl	8006e20 <memset>
 8007f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f38:	4620      	mov	r0, r4
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3c:	3468      	adds	r4, #104	; 0x68
 8007f3e:	e7d9      	b.n	8007ef4 <__sfp+0x1c>
 8007f40:	2104      	movs	r1, #4
 8007f42:	4638      	mov	r0, r7
 8007f44:	f7ff ff62 	bl	8007e0c <__sfmoreglue>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	6030      	str	r0, [r6, #0]
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d1d5      	bne.n	8007efc <__sfp+0x24>
 8007f50:	f7ff ff78 	bl	8007e44 <__sfp_lock_release>
 8007f54:	230c      	movs	r3, #12
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	e7ee      	b.n	8007f38 <__sfp+0x60>
 8007f5a:	bf00      	nop
 8007f5c:	08008694 	.word	0x08008694
 8007f60:	ffff0001 	.word	0xffff0001

08007f64 <_fwalk_reent>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4606      	mov	r6, r0
 8007f6a:	4688      	mov	r8, r1
 8007f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f70:	2700      	movs	r7, #0
 8007f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f76:	f1b9 0901 	subs.w	r9, r9, #1
 8007f7a:	d505      	bpl.n	8007f88 <_fwalk_reent+0x24>
 8007f7c:	6824      	ldr	r4, [r4, #0]
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d1f7      	bne.n	8007f72 <_fwalk_reent+0xe>
 8007f82:	4638      	mov	r0, r7
 8007f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f88:	89ab      	ldrh	r3, [r5, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d907      	bls.n	8007f9e <_fwalk_reent+0x3a>
 8007f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f92:	3301      	adds	r3, #1
 8007f94:	d003      	beq.n	8007f9e <_fwalk_reent+0x3a>
 8007f96:	4629      	mov	r1, r5
 8007f98:	4630      	mov	r0, r6
 8007f9a:	47c0      	blx	r8
 8007f9c:	4307      	orrs	r7, r0
 8007f9e:	3568      	adds	r5, #104	; 0x68
 8007fa0:	e7e9      	b.n	8007f76 <_fwalk_reent+0x12>

08007fa2 <__retarget_lock_init_recursive>:
 8007fa2:	4770      	bx	lr

08007fa4 <__retarget_lock_acquire_recursive>:
 8007fa4:	4770      	bx	lr

08007fa6 <__retarget_lock_release_recursive>:
 8007fa6:	4770      	bx	lr

08007fa8 <__swhatbuf_r>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	460e      	mov	r6, r1
 8007fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	b096      	sub	sp, #88	; 0x58
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	da08      	bge.n	8007fcc <__swhatbuf_r+0x24>
 8007fba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	061a      	lsls	r2, r3, #24
 8007fc4:	d410      	bmi.n	8007fe8 <__swhatbuf_r+0x40>
 8007fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fca:	e00e      	b.n	8007fea <__swhatbuf_r+0x42>
 8007fcc:	466a      	mov	r2, sp
 8007fce:	f000 f953 	bl	8008278 <_fstat_r>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	dbf1      	blt.n	8007fba <__swhatbuf_r+0x12>
 8007fd6:	9a01      	ldr	r2, [sp, #4]
 8007fd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fe0:	425a      	negs	r2, r3
 8007fe2:	415a      	adcs	r2, r3
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	e7ee      	b.n	8007fc6 <__swhatbuf_r+0x1e>
 8007fe8:	2340      	movs	r3, #64	; 0x40
 8007fea:	2000      	movs	r0, #0
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	b016      	add	sp, #88	; 0x58
 8007ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ff4 <__smakebuf_r>:
 8007ff4:	898b      	ldrh	r3, [r1, #12]
 8007ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff8:	079d      	lsls	r5, r3, #30
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	d507      	bpl.n	8008010 <__smakebuf_r+0x1c>
 8008000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	2301      	movs	r3, #1
 800800a:	6163      	str	r3, [r4, #20]
 800800c:	b002      	add	sp, #8
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	ab01      	add	r3, sp, #4
 8008012:	466a      	mov	r2, sp
 8008014:	f7ff ffc8 	bl	8007fa8 <__swhatbuf_r>
 8008018:	9900      	ldr	r1, [sp, #0]
 800801a:	4605      	mov	r5, r0
 800801c:	4630      	mov	r0, r6
 800801e:	f7fe ff73 	bl	8006f08 <_malloc_r>
 8008022:	b948      	cbnz	r0, 8008038 <__smakebuf_r+0x44>
 8008024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008028:	059a      	lsls	r2, r3, #22
 800802a:	d4ef      	bmi.n	800800c <__smakebuf_r+0x18>
 800802c:	f023 0303 	bic.w	r3, r3, #3
 8008030:	f043 0302 	orr.w	r3, r3, #2
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	e7e3      	b.n	8008000 <__smakebuf_r+0xc>
 8008038:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <__smakebuf_r+0x7c>)
 800803a:	62b3      	str	r3, [r6, #40]	; 0x28
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	6020      	str	r0, [r4, #0]
 8008040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	6163      	str	r3, [r4, #20]
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	6120      	str	r0, [r4, #16]
 800804e:	b15b      	cbz	r3, 8008068 <__smakebuf_r+0x74>
 8008050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f921 	bl	800829c <_isatty_r>
 800805a:	b128      	cbz	r0, 8008068 <__smakebuf_r+0x74>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	f043 0301 	orr.w	r3, r3, #1
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	89a0      	ldrh	r0, [r4, #12]
 800806a:	4305      	orrs	r5, r0
 800806c:	81a5      	strh	r5, [r4, #12]
 800806e:	e7cd      	b.n	800800c <__smakebuf_r+0x18>
 8008070:	08007e01 	.word	0x08007e01

08008074 <memcpy>:
 8008074:	440a      	add	r2, r1
 8008076:	4291      	cmp	r1, r2
 8008078:	f100 33ff 	add.w	r3, r0, #4294967295
 800807c:	d100      	bne.n	8008080 <memcpy+0xc>
 800807e:	4770      	bx	lr
 8008080:	b510      	push	{r4, lr}
 8008082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800808a:	4291      	cmp	r1, r2
 800808c:	d1f9      	bne.n	8008082 <memcpy+0xe>
 800808e:	bd10      	pop	{r4, pc}

08008090 <memmove>:
 8008090:	4288      	cmp	r0, r1
 8008092:	b510      	push	{r4, lr}
 8008094:	eb01 0402 	add.w	r4, r1, r2
 8008098:	d902      	bls.n	80080a0 <memmove+0x10>
 800809a:	4284      	cmp	r4, r0
 800809c:	4623      	mov	r3, r4
 800809e:	d807      	bhi.n	80080b0 <memmove+0x20>
 80080a0:	1e43      	subs	r3, r0, #1
 80080a2:	42a1      	cmp	r1, r4
 80080a4:	d008      	beq.n	80080b8 <memmove+0x28>
 80080a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ae:	e7f8      	b.n	80080a2 <memmove+0x12>
 80080b0:	4402      	add	r2, r0
 80080b2:	4601      	mov	r1, r0
 80080b4:	428a      	cmp	r2, r1
 80080b6:	d100      	bne.n	80080ba <memmove+0x2a>
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080c2:	e7f7      	b.n	80080b4 <memmove+0x24>

080080c4 <_realloc_r>:
 80080c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	4680      	mov	r8, r0
 80080ca:	4614      	mov	r4, r2
 80080cc:	460e      	mov	r6, r1
 80080ce:	b921      	cbnz	r1, 80080da <_realloc_r+0x16>
 80080d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080d4:	4611      	mov	r1, r2
 80080d6:	f7fe bf17 	b.w	8006f08 <_malloc_r>
 80080da:	b92a      	cbnz	r2, 80080e8 <_realloc_r+0x24>
 80080dc:	f7fe fea8 	bl	8006e30 <_free_r>
 80080e0:	4625      	mov	r5, r4
 80080e2:	4628      	mov	r0, r5
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	f000 f8fa 	bl	80082e0 <_malloc_usable_size_r>
 80080ec:	4284      	cmp	r4, r0
 80080ee:	4607      	mov	r7, r0
 80080f0:	d802      	bhi.n	80080f8 <_realloc_r+0x34>
 80080f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080f6:	d812      	bhi.n	800811e <_realloc_r+0x5a>
 80080f8:	4621      	mov	r1, r4
 80080fa:	4640      	mov	r0, r8
 80080fc:	f7fe ff04 	bl	8006f08 <_malloc_r>
 8008100:	4605      	mov	r5, r0
 8008102:	2800      	cmp	r0, #0
 8008104:	d0ed      	beq.n	80080e2 <_realloc_r+0x1e>
 8008106:	42bc      	cmp	r4, r7
 8008108:	4622      	mov	r2, r4
 800810a:	4631      	mov	r1, r6
 800810c:	bf28      	it	cs
 800810e:	463a      	movcs	r2, r7
 8008110:	f7ff ffb0 	bl	8008074 <memcpy>
 8008114:	4631      	mov	r1, r6
 8008116:	4640      	mov	r0, r8
 8008118:	f7fe fe8a 	bl	8006e30 <_free_r>
 800811c:	e7e1      	b.n	80080e2 <_realloc_r+0x1e>
 800811e:	4635      	mov	r5, r6
 8008120:	e7df      	b.n	80080e2 <_realloc_r+0x1e>

08008122 <_raise_r>:
 8008122:	291f      	cmp	r1, #31
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4604      	mov	r4, r0
 8008128:	460d      	mov	r5, r1
 800812a:	d904      	bls.n	8008136 <_raise_r+0x14>
 800812c:	2316      	movs	r3, #22
 800812e:	6003      	str	r3, [r0, #0]
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008138:	b112      	cbz	r2, 8008140 <_raise_r+0x1e>
 800813a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800813e:	b94b      	cbnz	r3, 8008154 <_raise_r+0x32>
 8008140:	4620      	mov	r0, r4
 8008142:	f000 f831 	bl	80081a8 <_getpid_r>
 8008146:	462a      	mov	r2, r5
 8008148:	4601      	mov	r1, r0
 800814a:	4620      	mov	r0, r4
 800814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008150:	f000 b818 	b.w	8008184 <_kill_r>
 8008154:	2b01      	cmp	r3, #1
 8008156:	d00a      	beq.n	800816e <_raise_r+0x4c>
 8008158:	1c59      	adds	r1, r3, #1
 800815a:	d103      	bne.n	8008164 <_raise_r+0x42>
 800815c:	2316      	movs	r3, #22
 800815e:	6003      	str	r3, [r0, #0]
 8008160:	2001      	movs	r0, #1
 8008162:	e7e7      	b.n	8008134 <_raise_r+0x12>
 8008164:	2400      	movs	r4, #0
 8008166:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800816a:	4628      	mov	r0, r5
 800816c:	4798      	blx	r3
 800816e:	2000      	movs	r0, #0
 8008170:	e7e0      	b.n	8008134 <_raise_r+0x12>
	...

08008174 <raise>:
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <raise+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f7ff bfd2 	b.w	8008122 <_raise_r>
 800817e:	bf00      	nop
 8008180:	20000010 	.word	0x20000010

08008184 <_kill_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	; (80081a4 <_kill_r+0x20>)
 8008188:	2300      	movs	r3, #0
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	4611      	mov	r1, r2
 8008190:	602b      	str	r3, [r5, #0]
 8008192:	f7f9 fce9 	bl	8001b68 <_kill>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d102      	bne.n	80081a0 <_kill_r+0x1c>
 800819a:	682b      	ldr	r3, [r5, #0]
 800819c:	b103      	cbz	r3, 80081a0 <_kill_r+0x1c>
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	200003d4 	.word	0x200003d4

080081a8 <_getpid_r>:
 80081a8:	f7f9 bcd6 	b.w	8001b58 <_getpid>

080081ac <__sread>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	460c      	mov	r4, r1
 80081b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b4:	f000 f89c 	bl	80082f0 <_read_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	bfab      	itete	ge
 80081bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081be:	89a3      	ldrhlt	r3, [r4, #12]
 80081c0:	181b      	addge	r3, r3, r0
 80081c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081c6:	bfac      	ite	ge
 80081c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ca:	81a3      	strhlt	r3, [r4, #12]
 80081cc:	bd10      	pop	{r4, pc}

080081ce <__swrite>:
 80081ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d2:	461f      	mov	r7, r3
 80081d4:	898b      	ldrh	r3, [r1, #12]
 80081d6:	05db      	lsls	r3, r3, #23
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	4616      	mov	r6, r2
 80081de:	d505      	bpl.n	80081ec <__swrite+0x1e>
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	2302      	movs	r3, #2
 80081e6:	2200      	movs	r2, #0
 80081e8:	f000 f868 	bl	80082bc <_lseek_r>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	4632      	mov	r2, r6
 80081fa:	463b      	mov	r3, r7
 80081fc:	4628      	mov	r0, r5
 80081fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	f000 b817 	b.w	8008234 <_write_r>

08008206 <__sseek>:
 8008206:	b510      	push	{r4, lr}
 8008208:	460c      	mov	r4, r1
 800820a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820e:	f000 f855 	bl	80082bc <_lseek_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	bf15      	itete	ne
 8008218:	6560      	strne	r0, [r4, #84]	; 0x54
 800821a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800821e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008222:	81a3      	strheq	r3, [r4, #12]
 8008224:	bf18      	it	ne
 8008226:	81a3      	strhne	r3, [r4, #12]
 8008228:	bd10      	pop	{r4, pc}

0800822a <__sclose>:
 800822a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822e:	f000 b813 	b.w	8008258 <_close_r>
	...

08008234 <_write_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4d07      	ldr	r5, [pc, #28]	; (8008254 <_write_r+0x20>)
 8008238:	4604      	mov	r4, r0
 800823a:	4608      	mov	r0, r1
 800823c:	4611      	mov	r1, r2
 800823e:	2200      	movs	r2, #0
 8008240:	602a      	str	r2, [r5, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	f7f9 fcc7 	bl	8001bd6 <_write>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_write_r+0x1e>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_write_r+0x1e>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	200003d4 	.word	0x200003d4

08008258 <_close_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_close_r+0x1c>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	f7f9 fcd3 	bl	8001c0e <_close>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_close_r+0x1a>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_close_r+0x1a>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	200003d4 	.word	0x200003d4

08008278 <_fstat_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d07      	ldr	r5, [pc, #28]	; (8008298 <_fstat_r+0x20>)
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	f7f9 fcce 	bl	8001c26 <_fstat>
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	d102      	bne.n	8008294 <_fstat_r+0x1c>
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	b103      	cbz	r3, 8008294 <_fstat_r+0x1c>
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	bd38      	pop	{r3, r4, r5, pc}
 8008296:	bf00      	nop
 8008298:	200003d4 	.word	0x200003d4

0800829c <_isatty_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d06      	ldr	r5, [pc, #24]	; (80082b8 <_isatty_r+0x1c>)
 80082a0:	2300      	movs	r3, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	f7f9 fccd 	bl	8001c46 <_isatty>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_isatty_r+0x1a>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_isatty_r+0x1a>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	200003d4 	.word	0x200003d4

080082bc <_lseek_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_lseek_r+0x20>)
 80082c0:	4604      	mov	r4, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7f9 fcc6 	bl	8001c5c <_lseek>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_lseek_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_lseek_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	200003d4 	.word	0x200003d4

080082e0 <_malloc_usable_size_r>:
 80082e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e4:	1f18      	subs	r0, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfbc      	itt	lt
 80082ea:	580b      	ldrlt	r3, [r1, r0]
 80082ec:	18c0      	addlt	r0, r0, r3
 80082ee:	4770      	bx	lr

080082f0 <_read_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_read_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7f9 fc4c 	bl	8001b9c <_read>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_read_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_read_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200003d4 	.word	0x200003d4

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr

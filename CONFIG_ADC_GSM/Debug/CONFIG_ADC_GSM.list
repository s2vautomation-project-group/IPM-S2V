
CONFIG_ADC_GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800bc30  0800bc30  0001bc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2ec  0800c2ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2ec  0800c2ec  0001c2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2f4  0800c2f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2f4  0800c2f4  0001c2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2f8  0800c2f8  0001c2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200001dc  0800c4d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800c4d8  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fc9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363e  00000000  00000000  000381d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  0003b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a14  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018991  00000000  00000000  00062714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5150  00000000  00000000  0007b0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001501f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006198  00000000  00000000  00150248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc14 	.word	0x0800bc14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bc14 	.word	0x0800bc14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <DataToGsm>:
int count=0;

extern UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af06      	add	r7, sp, #24
 8000f72:	6078      	str	r0, [r7, #4]
	uint8_t sec=d->sec;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	789b      	ldrb	r3, [r3, #2]
 8000f78:	73fb      	strb	r3, [r7, #15]
	uint8_t ST=d->scan_time;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7f1b      	ldrb	r3, [r3, #28]
 8000f7e:	73bb      	strb	r3, [r7, #14]
	//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf(buffer_Time,"%02d:%02d:%02d",d->hr,d->min,d->sec);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	789b      	ldrb	r3, [r3, #2]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	460b      	mov	r3, r1
 8000f94:	494d      	ldr	r1, [pc, #308]	; (80010cc <DataToGsm+0x160>)
 8000f96:	484e      	ldr	r0, [pc, #312]	; (80010d0 <DataToGsm+0x164>)
 8000f98:	f008 fc4c 	bl	8009834 <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf(CH1,"%f",d->adc1_value);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fae1 	bl	8000568 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	494a      	ldr	r1, [pc, #296]	; (80010d4 <DataToGsm+0x168>)
 8000fac:	484a      	ldr	r0, [pc, #296]	; (80010d8 <DataToGsm+0x16c>)
 8000fae:	f008 fc41 	bl	8009834 <siprintf>
	sprintf(CH2,"%f",d->adc2_value);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fad6 	bl	8000568 <__aeabi_f2d>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4944      	ldr	r1, [pc, #272]	; (80010d4 <DataToGsm+0x168>)
 8000fc2:	4846      	ldr	r0, [pc, #280]	; (80010dc <DataToGsm+0x170>)
 8000fc4:	f008 fc36 	bl	8009834 <siprintf>
	sprintf(CH3,"%f",d->adc3_value);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff facb 	bl	8000568 <__aeabi_f2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	493f      	ldr	r1, [pc, #252]	; (80010d4 <DataToGsm+0x168>)
 8000fd8:	4841      	ldr	r0, [pc, #260]	; (80010e0 <DataToGsm+0x174>)
 8000fda:	f008 fc2b 	bl	8009834 <siprintf>
	sprintf(CH4,"%f",d->adc4_value);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fac0 	bl	8000568 <__aeabi_f2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4939      	ldr	r1, [pc, #228]	; (80010d4 <DataToGsm+0x168>)
 8000fee:	483d      	ldr	r0, [pc, #244]	; (80010e4 <DataToGsm+0x178>)
 8000ff0:	f008 fc20 	bl	8009834 <siprintf>

	if(d->GPIO[0]==1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7e1b      	ldrb	r3, [r3, #24]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d107      	bne.n	800100c <DataToGsm+0xa0>
	{
		strcpy(d->Status1, "High");
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	331d      	adds	r3, #29
 8001000:	4a39      	ldr	r2, [pc, #228]	; (80010e8 <DataToGsm+0x17c>)
 8001002:	6810      	ldr	r0, [r2, #0]
 8001004:	6018      	str	r0, [r3, #0]
 8001006:	7912      	ldrb	r2, [r2, #4]
 8001008:	711a      	strb	r2, [r3, #4]
 800100a:	e004      	b.n	8001016 <DataToGsm+0xaa>
	}
	else
	{
		strcpy(d->Status1, "Low");
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	331d      	adds	r3, #29
 8001010:	4a36      	ldr	r2, [pc, #216]	; (80010ec <DataToGsm+0x180>)
 8001012:	6810      	ldr	r0, [r2, #0]
 8001014:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7e5b      	ldrb	r3, [r3, #25]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d107      	bne.n	800102e <DataToGsm+0xc2>
	{
		strcpy(d->Status2, "High");
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3327      	adds	r3, #39	; 0x27
 8001022:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <DataToGsm+0x17c>)
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	6018      	str	r0, [r3, #0]
 8001028:	7912      	ldrb	r2, [r2, #4]
 800102a:	711a      	strb	r2, [r3, #4]
 800102c:	e004      	b.n	8001038 <DataToGsm+0xcc>
	}
	else
	{
		strcpy(d->Status2, "Low");
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3327      	adds	r3, #39	; 0x27
 8001032:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <DataToGsm+0x180>)
 8001034:	6810      	ldr	r0, [r2, #0]
 8001036:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7e9b      	ldrb	r3, [r3, #26]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d107      	bne.n	8001050 <DataToGsm+0xe4>
	{
		strcpy(d->Status3, "High");
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3331      	adds	r3, #49	; 0x31
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <DataToGsm+0x17c>)
 8001046:	6810      	ldr	r0, [r2, #0]
 8001048:	6018      	str	r0, [r3, #0]
 800104a:	7912      	ldrb	r2, [r2, #4]
 800104c:	711a      	strb	r2, [r3, #4]
 800104e:	e004      	b.n	800105a <DataToGsm+0xee>
	}
	else
	{
		strcpy(d->Status3, "Low");
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3331      	adds	r3, #49	; 0x31
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <DataToGsm+0x180>)
 8001056:	6810      	ldr	r0, [r2, #0]
 8001058:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7edb      	ldrb	r3, [r3, #27]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d107      	bne.n	8001072 <DataToGsm+0x106>
	{
		strcpy(d->Status4, "High");
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	333b      	adds	r3, #59	; 0x3b
 8001066:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <DataToGsm+0x17c>)
 8001068:	6810      	ldr	r0, [r2, #0]
 800106a:	6018      	str	r0, [r3, #0]
 800106c:	7912      	ldrb	r2, [r2, #4]
 800106e:	711a      	strb	r2, [r3, #4]
 8001070:	e004      	b.n	800107c <DataToGsm+0x110>
	}
	else
	{
		strcpy(d->Status4, "Low");
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	333b      	adds	r3, #59	; 0x3b
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <DataToGsm+0x180>)
 8001078:	6810      	ldr	r0, [r2, #0]
 800107a:	6018      	str	r0, [r3, #0]





	if(sec==59)
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	2b3b      	cmp	r3, #59	; 0x3b
 8001080:	d104      	bne.n	800108c <DataToGsm+0x120>
	{
		count=count+1;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <DataToGsm+0x184>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3301      	adds	r3, #1
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <DataToGsm+0x184>)
 800108a:	6013      	str	r3, [r2, #0]

	}


	if(count==1)
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <DataToGsm+0x184>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d116      	bne.n	80010c2 <DataToGsm+0x156>
	{
		DataToCloud(buffer_Time,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	331d      	adds	r3, #29
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	3227      	adds	r2, #39	; 0x27
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	3131      	adds	r1, #49	; 0x31
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	303b      	adds	r0, #59	; 0x3b
 80010a4:	9004      	str	r0, [sp, #16]
 80010a6:	9103      	str	r1, [sp, #12]
 80010a8:	9202      	str	r2, [sp, #8]
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <DataToGsm+0x178>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <DataToGsm+0x174>)
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <DataToGsm+0x170>)
 80010b4:	4908      	ldr	r1, [pc, #32]	; (80010d8 <DataToGsm+0x16c>)
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <DataToGsm+0x164>)
 80010b8:	f000 fbd8 	bl	800186c <DataToCloud>
		count=0;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <DataToGsm+0x184>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
	}


}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	0800bc30 	.word	0x0800bc30
 80010d0:	200001f8 	.word	0x200001f8
 80010d4:	0800bc40 	.word	0x0800bc40
 80010d8:	20000208 	.word	0x20000208
 80010dc:	20000214 	.word	0x20000214
 80010e0:	20000220 	.word	0x20000220
 80010e4:	2000022c 	.word	0x2000022c
 80010e8:	0800bc44 	.word	0x0800bc44
 80010ec:	0800bc4c 	.word	0x0800bc4c
 80010f0:	20000238 	.word	0x20000238
 80010f4:	00000000 	.word	0x00000000

080010f8 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 80010fc:	f000 fdfc 	bl	8001cf8 <adc_value>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <voltage_cal+0x48>)
 8001106:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <voltage_cal+0x48>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa19 	bl	8000544 <__aeabi_i2d>
 8001112:	a309      	add	r3, pc, #36	; (adr r3, 8001138 <voltage_cal+0x40>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	f7ff fa7e 	bl	8000618 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd50 	bl	8000bc8 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	ee07 3a90 	vmov	s15, r3
}
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f3af 8000 	nop.w
 8001138:	e734d9b4 	.word	0xe734d9b4
 800113c:	3f4a680c 	.word	0x3f4a680c
 8001140:	2000023c 	.word	0x2000023c

08001144 <ADC_handler>:

void ADC_handler(struct data *d)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <ADC_handler+0xb8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10f      	bne.n	8001174 <ADC_handler+0x30>
	{
		ADC_select_CH1();
 8001154:	f000 fd12 	bl	8001b7c <ADC_select_CH1>
		adc_start();
 8001158:	f000 fdb8 	bl	8001ccc <adc_start>
		adc_conversion();
 800115c:	f000 fdc0 	bl	8001ce0 <adc_conversion>
		d->adc1_value = voltage_cal();
 8001160:	f7ff ffca 	bl	80010f8 <voltage_cal>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edc3 7a02 	vstr	s15, [r3, #8]
		adc_stop();
 800116e:	f000 fdcf 	bl	8001d10 <adc_stop>
 8001172:	e000      	b.n	8001176 <ADC_handler+0x32>
	}
	else
	{
		__NOP();
 8001174:	bf00      	nop
	}
	if(adcChnlChecker[1] == 1)
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <ADC_handler+0xb8>)
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10f      	bne.n	800119e <ADC_handler+0x5a>
	{
		ADC_select_CH2();
 800117e:	f000 fd27 	bl	8001bd0 <ADC_select_CH2>
		adc_start();
 8001182:	f000 fda3 	bl	8001ccc <adc_start>
		adc_conversion();
 8001186:	f000 fdab 	bl	8001ce0 <adc_conversion>
		d->adc2_value = voltage_cal();
 800118a:	f7ff ffb5 	bl	80010f8 <voltage_cal>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	edc3 7a03 	vstr	s15, [r3, #12]
		adc_stop();
 8001198:	f000 fdba 	bl	8001d10 <adc_stop>
 800119c:	e000      	b.n	80011a0 <ADC_handler+0x5c>
	}
	else
	{
		__NOP();
 800119e:	bf00      	nop
	}
	if(adcChnlChecker[2] == 1)
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <ADC_handler+0xb8>)
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d10f      	bne.n	80011c8 <ADC_handler+0x84>
	{
		ADC_select_CH3();
 80011a8:	f000 fd3c 	bl	8001c24 <ADC_select_CH3>
		adc_start();
 80011ac:	f000 fd8e 	bl	8001ccc <adc_start>
		adc_conversion();
 80011b0:	f000 fd96 	bl	8001ce0 <adc_conversion>
		d->adc3_value = voltage_cal();
 80011b4:	f7ff ffa0 	bl	80010f8 <voltage_cal>
 80011b8:	eef0 7a40 	vmov.f32	s15, s0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edc3 7a04 	vstr	s15, [r3, #16]
		adc_stop();
 80011c2:	f000 fda5 	bl	8001d10 <adc_stop>
 80011c6:	e000      	b.n	80011ca <ADC_handler+0x86>
	}
	else
	{
		__NOP();
 80011c8:	bf00      	nop
	}
	if(adcChnlChecker[3] == 1)
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <ADC_handler+0xb8>)
 80011cc:	78db      	ldrb	r3, [r3, #3]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10f      	bne.n	80011f2 <ADC_handler+0xae>
	{
		ADC_select_CH4();
 80011d2:	f000 fd51 	bl	8001c78 <ADC_select_CH4>
		adc_start();
 80011d6:	f000 fd79 	bl	8001ccc <adc_start>
		adc_conversion();
 80011da:	f000 fd81 	bl	8001ce0 <adc_conversion>
		d->adc4_value = voltage_cal();
 80011de:	f7ff ff8b 	bl	80010f8 <voltage_cal>
 80011e2:	eef0 7a40 	vmov.f32	s15, s0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edc3 7a05 	vstr	s15, [r3, #20]
		adc_stop();
 80011ec:	f000 fd90 	bl	8001d10 <adc_stop>
	{
		__NOP();
	}
//	adc_stop();

}
 80011f0:	e000      	b.n	80011f4 <ADC_handler+0xb0>
		__NOP();
 80011f2:	bf00      	nop
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000300 	.word	0x20000300

08001200 <Configurator>:
uint8_t s[4];
extern struct data d;
uint8_t adcChnlChecker[4];

void Configurator()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	data_receive();
 8001204:	f000 fe5a 	bl	8001ebc <data_receive>

	if (tx_data[0] != '\0')
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <Configurator+0x44>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <Configurator+0x18>
	{
		flag = 1; // Set flag to indicate data has been received
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <Configurator+0x48>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e002      	b.n	800121e <Configurator+0x1e>
	}
	else
	{
		flag=0;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <Configurator+0x48>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
	}

	if (flag)
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <Configurator+0x48>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <Configurator+0x2e>
	{
		extract_data();
 8001226:	f000 f8cd 	bl	80013c4 <extract_data>
		pin_config();
 800122a:	f000 f903 	bl	8001434 <pin_config>
		//clear_buffer();
	}
	reset_output();
 800122e:	f000 f84d 	bl	80012cc <reset_output>
	set_output();
 8001232:	f000 f80d 	bl	8001250 <set_output>
	pin_status = read_pinstatus();
 8001236:	f000 f887 	bl	8001348 <read_pinstatus>
 800123a:	4603      	mov	r3, r0
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <Configurator+0x4c>)
 800123e:	6013      	str	r3, [r2, #0]
	//            status_transmit();
//	reset_output();
	//DataTOgsm(d);


}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000244 	.word	0x20000244
 8001248:	200002f4 	.word	0x200002f4
 800124c:	200002f8 	.word	0x200002f8

08001250 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

void set_output()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	if(config[0] == 0)
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <set_output+0x70>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d108      	bne.n	800126e <set_output+0x1e>
	{
		d.GPIO[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2101      	movs	r1, #1
 8001260:	4818      	ldr	r0, [pc, #96]	; (80012c4 <set_output+0x74>)
 8001262:	f000 fe4f 	bl	8001f04 <write_gpio>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <set_output+0x78>)
 800126c:	761a      	strb	r2, [r3, #24]
	}

	if(config[1] == 0)
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <set_output+0x70>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d108      	bne.n	8001288 <set_output+0x38>
	{
		d.GPIO[1] = write_gpio(GPIOB,GPIO_PIN_1, PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2102      	movs	r1, #2
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <set_output+0x74>)
 800127c:	f000 fe42 	bl	8001f04 <write_gpio>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <set_output+0x78>)
 8001286:	765a      	strb	r2, [r3, #25]
	}

	if(config[2] == 0)
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <set_output+0x70>)
 800128a:	789b      	ldrb	r3, [r3, #2]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d108      	bne.n	80012a2 <set_output+0x52>
	{
		d.GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	2110      	movs	r1, #16
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <set_output+0x74>)
 8001296:	f000 fe35 	bl	8001f04 <write_gpio>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <set_output+0x78>)
 80012a0:	769a      	strb	r2, [r3, #26]
	}

	if(config[3] == 0)
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <set_output+0x70>)
 80012a4:	78db      	ldrb	r3, [r3, #3]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d108      	bne.n	80012bc <set_output+0x6c>
	{
		d.GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2120      	movs	r1, #32
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <set_output+0x74>)
 80012b0:	f000 fe28 	bl	8001f04 <write_gpio>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <set_output+0x78>)
 80012ba:	76da      	strb	r2, [r3, #27]
	}
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002fc 	.word	0x200002fc
 80012c4:	48000400 	.word	0x48000400
 80012c8:	200004f4 	.word	0x200004f4

080012cc <reset_output>:

void reset_output()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	if(config[0] == 0)
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <reset_output+0x70>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <reset_output+0x1e>
	{
		d.GPIO[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2101      	movs	r1, #1
 80012dc:	4818      	ldr	r0, [pc, #96]	; (8001340 <reset_output+0x74>)
 80012de:	f000 fe11 	bl	8001f04 <write_gpio>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <reset_output+0x78>)
 80012e8:	761a      	strb	r2, [r3, #24]
	}

	if(config[1] == 0)
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <reset_output+0x70>)
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d108      	bne.n	8001304 <reset_output+0x38>
	{
		d.GPIO[1]=write_gpio(GPIOB,GPIO_PIN_1, PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2102      	movs	r1, #2
 80012f6:	4812      	ldr	r0, [pc, #72]	; (8001340 <reset_output+0x74>)
 80012f8:	f000 fe04 	bl	8001f04 <write_gpio>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <reset_output+0x78>)
 8001302:	765a      	strb	r2, [r3, #25]
	}

	if(config[2] == 0)
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <reset_output+0x70>)
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d108      	bne.n	800131e <reset_output+0x52>
	{
		d.GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2110      	movs	r1, #16
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <reset_output+0x74>)
 8001312:	f000 fdf7 	bl	8001f04 <write_gpio>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <reset_output+0x78>)
 800131c:	769a      	strb	r2, [r3, #26]
	}

	if(config[3] == 0)
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <reset_output+0x70>)
 8001320:	78db      	ldrb	r3, [r3, #3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d108      	bne.n	8001338 <reset_output+0x6c>
	{
		d.GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2120      	movs	r1, #32
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <reset_output+0x74>)
 800132c:	f000 fdea 	bl	8001f04 <write_gpio>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <reset_output+0x78>)
 8001336:	76da      	strb	r2, [r3, #27]
	}
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002fc 	.word	0x200002fc
 8001340:	48000400 	.word	0x48000400
 8001344:	200004f4 	.word	0x200004f4

08001348 <read_pinstatus>:

uint8_t* read_pinstatus()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	if(config[0]==1)
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <read_pinstatus+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <read_pinstatus+0x1c>
	{
		d.GPIO[0]=read_gpio( GPIOB,GPIO_PIN_0);
 8001354:	2101      	movs	r1, #1
 8001356:	4818      	ldr	r0, [pc, #96]	; (80013b8 <read_pinstatus+0x70>)
 8001358:	f000 fdc4 	bl	8001ee4 <read_gpio>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <read_pinstatus+0x74>)
 8001362:	761a      	strb	r2, [r3, #24]
	}
	if(config[1]==1)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <read_pinstatus+0x6c>)
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d107      	bne.n	800137c <read_pinstatus+0x34>
	{
		d.GPIO[1]=read_gpio( GPIOB,GPIO_PIN_1);
 800136c:	2102      	movs	r1, #2
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <read_pinstatus+0x70>)
 8001370:	f000 fdb8 	bl	8001ee4 <read_gpio>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <read_pinstatus+0x74>)
 800137a:	765a      	strb	r2, [r3, #25]
	}
	if(config[2]==1)
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <read_pinstatus+0x6c>)
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d107      	bne.n	8001394 <read_pinstatus+0x4c>
	{
		d.GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 8001384:	2110      	movs	r1, #16
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <read_pinstatus+0x70>)
 8001388:	f000 fdac 	bl	8001ee4 <read_gpio>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <read_pinstatus+0x74>)
 8001392:	769a      	strb	r2, [r3, #26]
	}
	if(config[3]==1)
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <read_pinstatus+0x6c>)
 8001396:	78db      	ldrb	r3, [r3, #3]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <read_pinstatus+0x64>
	{
		d.GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 800139c:	2120      	movs	r1, #32
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <read_pinstatus+0x70>)
 80013a0:	f000 fda0 	bl	8001ee4 <read_gpio>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <read_pinstatus+0x74>)
 80013aa:	76da      	strb	r2, [r3, #27]
	}
	return d.GPIO;
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <read_pinstatus+0x78>)
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200002fc 	.word	0x200002fc
 80013b8:	48000400 	.word	0x48000400
 80013bc:	200004f4 	.word	0x200004f4
 80013c0:	2000050c 	.word	0x2000050c

080013c4 <extract_data>:


void extract_data()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 80013c8:	4915      	ldr	r1, [pc, #84]	; (8001420 <extract_data+0x5c>)
 80013ca:	4816      	ldr	r0, [pc, #88]	; (8001424 <extract_data+0x60>)
 80013cc:	f008 fa66 	bl	800989c <strtok>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a15      	ldr	r2, [pc, #84]	; (8001428 <extract_data+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]


	if (token != NULL)
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <extract_data+0x64>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <extract_data+0x3c>
	{
		strncpy(arr1, token, sizeof(arr1) - 1);
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <extract_data+0x64>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2209      	movs	r2, #9
 80013e4:	4619      	mov	r1, r3
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <extract_data+0x68>)
 80013e8:	f008 fa44 	bl	8009874 <strncpy>

		arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <extract_data+0x68>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	725a      	strb	r2, [r3, #9]
		token = strtok(NULL, ",");
 80013f2:	490b      	ldr	r1, [pc, #44]	; (8001420 <extract_data+0x5c>)
 80013f4:	2000      	movs	r0, #0
 80013f6:	f008 fa51 	bl	800989c <strtok>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <extract_data+0x64>)
 80013fe:	6013      	str	r3, [r2, #0]
	}

	// Get the second token and store it in arr2
	if (token != NULL)
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <extract_data+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <extract_data+0x58>
	{
		strncpy(arr2, token, sizeof(arr2) - 1);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <extract_data+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2209      	movs	r2, #9
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <extract_data+0x6c>)
 8001412:	f008 fa2f 	bl	8009874 <strncpy>
		arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <extract_data+0x6c>)
 8001418:	2200      	movs	r2, #0
 800141a:	725a      	strb	r2, [r3, #9]
		//token = strtok(NULL, ",");
	}


}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	0800bc50 	.word	0x0800bc50
 8001424:	20000244 	.word	0x20000244
 8001428:	200002f0 	.word	0x200002f0
 800142c:	200002d8 	.word	0x200002d8
 8001430:	200002e4 	.word	0x200002e4

08001434 <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

	if(strcmp(arr1,"B0")==0)
 8001438:	499a      	ldr	r1, [pc, #616]	; (80016a4 <pin_config+0x270>)
 800143a:	489b      	ldr	r0, [pc, #620]	; (80016a8 <pin_config+0x274>)
 800143c:	f7fe fec8 	bl	80001d0 <strcmp>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <pin_config+0x1a>
	{
		switch_val=1;
 8001446:	4b99      	ldr	r3, [pc, #612]	; (80016ac <pin_config+0x278>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e040      	b.n	80014d0 <pin_config+0x9c>
	}

	else if(strcmp(arr1,"B1")==0)
 800144e:	4998      	ldr	r1, [pc, #608]	; (80016b0 <pin_config+0x27c>)
 8001450:	4895      	ldr	r0, [pc, #596]	; (80016a8 <pin_config+0x274>)
 8001452:	f7fe febd 	bl	80001d0 <strcmp>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <pin_config+0x30>
	{
		switch_val=2;
 800145c:	4b93      	ldr	r3, [pc, #588]	; (80016ac <pin_config+0x278>)
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e035      	b.n	80014d0 <pin_config+0x9c>
	}

	else if(strcmp(arr1,"B4")==0)
 8001464:	4993      	ldr	r1, [pc, #588]	; (80016b4 <pin_config+0x280>)
 8001466:	4890      	ldr	r0, [pc, #576]	; (80016a8 <pin_config+0x274>)
 8001468:	f7fe feb2 	bl	80001d0 <strcmp>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d103      	bne.n	800147a <pin_config+0x46>
	{
		switch_val=3;
 8001472:	4b8e      	ldr	r3, [pc, #568]	; (80016ac <pin_config+0x278>)
 8001474:	2203      	movs	r2, #3
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e02a      	b.n	80014d0 <pin_config+0x9c>
	}

	else if(strcmp(arr1,"B5")==0)
 800147a:	498f      	ldr	r1, [pc, #572]	; (80016b8 <pin_config+0x284>)
 800147c:	488a      	ldr	r0, [pc, #552]	; (80016a8 <pin_config+0x274>)
 800147e:	f7fe fea7 	bl	80001d0 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <pin_config+0x5c>
	{
		switch_val=4;
 8001488:	4b88      	ldr	r3, [pc, #544]	; (80016ac <pin_config+0x278>)
 800148a:	2204      	movs	r2, #4
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e01f      	b.n	80014d0 <pin_config+0x9c>
	}

	else if(strcmp(arr1,"ADC1")==0)
 8001490:	498a      	ldr	r1, [pc, #552]	; (80016bc <pin_config+0x288>)
 8001492:	4885      	ldr	r0, [pc, #532]	; (80016a8 <pin_config+0x274>)
 8001494:	f7fe fe9c 	bl	80001d0 <strcmp>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <pin_config+0x72>
	{
		switch_val=5;
 800149e:	4b83      	ldr	r3, [pc, #524]	; (80016ac <pin_config+0x278>)
 80014a0:	2205      	movs	r2, #5
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e014      	b.n	80014d0 <pin_config+0x9c>
	}

	else if(strcmp(arr1,"RTC")==0)
 80014a6:	4986      	ldr	r1, [pc, #536]	; (80016c0 <pin_config+0x28c>)
 80014a8:	487f      	ldr	r0, [pc, #508]	; (80016a8 <pin_config+0x274>)
 80014aa:	f7fe fe91 	bl	80001d0 <strcmp>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d103      	bne.n	80014bc <pin_config+0x88>
	{
		switch_val=6;
 80014b4:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <pin_config+0x278>)
 80014b6:	2206      	movs	r2, #6
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e009      	b.n	80014d0 <pin_config+0x9c>
	}

	else if(strcmp(arr1,"SCANTIME")==0)
 80014bc:	4981      	ldr	r1, [pc, #516]	; (80016c4 <pin_config+0x290>)
 80014be:	487a      	ldr	r0, [pc, #488]	; (80016a8 <pin_config+0x274>)
 80014c0:	f7fe fe86 	bl	80001d0 <strcmp>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <pin_config+0x9c>
	{
		switch_val=7;
 80014ca:	4b78      	ldr	r3, [pc, #480]	; (80016ac <pin_config+0x278>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
	}


	switch(switch_val)
 80014d0:	4b76      	ldr	r3, [pc, #472]	; (80016ac <pin_config+0x278>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	f200 80e1 	bhi.w	800169e <pin_config+0x26a>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <pin_config+0xb0>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f9 	.word	0x080014f9
 80014e8:	0800153b 	.word	0x0800153b
 80014ec:	0800157d 	.word	0x0800157d
 80014f0:	080015bd 	.word	0x080015bd
 80014f4:	080015fd 	.word	0x080015fd
	{

	case 1:
		if(strcmp(arr2,"OUTPUT")==0)
 80014f8:	4973      	ldr	r1, [pc, #460]	; (80016c8 <pin_config+0x294>)
 80014fa:	4874      	ldr	r0, [pc, #464]	; (80016cc <pin_config+0x298>)
 80014fc:	f7fe fe68 	bl	80001d0 <strcmp>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d108      	bne.n	8001518 <pin_config+0xe4>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_0,OUTPUT);
 8001506:	2200      	movs	r2, #0
 8001508:	2101      	movs	r1, #1
 800150a:	4871      	ldr	r0, [pc, #452]	; (80016d0 <pin_config+0x29c>)
 800150c:	f000 fc3a 	bl	8001d84 <user_GPIO_Init>
			config[0] = 0;
 8001510:	4b70      	ldr	r3, [pc, #448]	; (80016d4 <pin_config+0x2a0>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
			config[0] = 1;
		}
		break;
 8001516:	e0bb      	b.n	8001690 <pin_config+0x25c>
		else if(strcmp(arr2,"INPUT")==0)
 8001518:	496f      	ldr	r1, [pc, #444]	; (80016d8 <pin_config+0x2a4>)
 800151a:	486c      	ldr	r0, [pc, #432]	; (80016cc <pin_config+0x298>)
 800151c:	f7fe fe58 	bl	80001d0 <strcmp>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	f040 80b4 	bne.w	8001690 <pin_config+0x25c>
			user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
 8001528:	2201      	movs	r2, #1
 800152a:	2101      	movs	r1, #1
 800152c:	4868      	ldr	r0, [pc, #416]	; (80016d0 <pin_config+0x29c>)
 800152e:	f000 fc29 	bl	8001d84 <user_GPIO_Init>
			config[0] = 1;
 8001532:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <pin_config+0x2a0>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
		break;
 8001538:	e0aa      	b.n	8001690 <pin_config+0x25c>

	case 2:
		if(strcmp(arr2,"OUTPUT")==0)
 800153a:	4963      	ldr	r1, [pc, #396]	; (80016c8 <pin_config+0x294>)
 800153c:	4863      	ldr	r0, [pc, #396]	; (80016cc <pin_config+0x298>)
 800153e:	f7fe fe47 	bl	80001d0 <strcmp>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d108      	bne.n	800155a <pin_config+0x126>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_1,OUTPUT);
 8001548:	2200      	movs	r2, #0
 800154a:	2102      	movs	r1, #2
 800154c:	4860      	ldr	r0, [pc, #384]	; (80016d0 <pin_config+0x29c>)
 800154e:	f000 fc19 	bl	8001d84 <user_GPIO_Init>
			config[1]=0;
 8001552:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <pin_config+0x2a0>)
 8001554:	2200      	movs	r2, #0
 8001556:	705a      	strb	r2, [r3, #1]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
			config[1]=1;
		}
		break;
 8001558:	e09c      	b.n	8001694 <pin_config+0x260>
		else if(strcmp(arr2,"INPUT")==0)
 800155a:	495f      	ldr	r1, [pc, #380]	; (80016d8 <pin_config+0x2a4>)
 800155c:	485b      	ldr	r0, [pc, #364]	; (80016cc <pin_config+0x298>)
 800155e:	f7fe fe37 	bl	80001d0 <strcmp>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 8095 	bne.w	8001694 <pin_config+0x260>
			user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
 800156a:	2201      	movs	r2, #1
 800156c:	2102      	movs	r1, #2
 800156e:	4858      	ldr	r0, [pc, #352]	; (80016d0 <pin_config+0x29c>)
 8001570:	f000 fc08 	bl	8001d84 <user_GPIO_Init>
			config[1]=1;
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <pin_config+0x2a0>)
 8001576:	2201      	movs	r2, #1
 8001578:	705a      	strb	r2, [r3, #1]
		break;
 800157a:	e08b      	b.n	8001694 <pin_config+0x260>

	case 3:
		if(strcmp(arr2,"OUTPUT")==0)
 800157c:	4952      	ldr	r1, [pc, #328]	; (80016c8 <pin_config+0x294>)
 800157e:	4853      	ldr	r0, [pc, #332]	; (80016cc <pin_config+0x298>)
 8001580:	f7fe fe26 	bl	80001d0 <strcmp>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <pin_config+0x168>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 800158a:	2200      	movs	r2, #0
 800158c:	2110      	movs	r1, #16
 800158e:	4850      	ldr	r0, [pc, #320]	; (80016d0 <pin_config+0x29c>)
 8001590:	f000 fbf8 	bl	8001d84 <user_GPIO_Init>
			config[2]=0;
 8001594:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <pin_config+0x2a0>)
 8001596:	2200      	movs	r2, #0
 8001598:	709a      	strb	r2, [r3, #2]
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			config[2]=1;
		}

		break;
 800159a:	e07d      	b.n	8001698 <pin_config+0x264>
		else if(strcmp(arr2,"INPUT")==0)
 800159c:	494e      	ldr	r1, [pc, #312]	; (80016d8 <pin_config+0x2a4>)
 800159e:	484b      	ldr	r0, [pc, #300]	; (80016cc <pin_config+0x298>)
 80015a0:	f7fe fe16 	bl	80001d0 <strcmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d176      	bne.n	8001698 <pin_config+0x264>
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2110      	movs	r1, #16
 80015ae:	4848      	ldr	r0, [pc, #288]	; (80016d0 <pin_config+0x29c>)
 80015b0:	f000 fbe8 	bl	8001d84 <user_GPIO_Init>
			config[2]=1;
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <pin_config+0x2a0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	709a      	strb	r2, [r3, #2]
		break;
 80015ba:	e06d      	b.n	8001698 <pin_config+0x264>

	case 4:
		if(strcmp(arr2,"OUTPUT")==0)
 80015bc:	4942      	ldr	r1, [pc, #264]	; (80016c8 <pin_config+0x294>)
 80015be:	4843      	ldr	r0, [pc, #268]	; (80016cc <pin_config+0x298>)
 80015c0:	f7fe fe06 	bl	80001d0 <strcmp>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d108      	bne.n	80015dc <pin_config+0x1a8>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2120      	movs	r1, #32
 80015ce:	4840      	ldr	r0, [pc, #256]	; (80016d0 <pin_config+0x29c>)
 80015d0:	f000 fbd8 	bl	8001d84 <user_GPIO_Init>
			config[3]=0;
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <pin_config+0x2a0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	70da      	strb	r2, [r3, #3]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			config[3]=1;
		}
		break;
 80015da:	e05f      	b.n	800169c <pin_config+0x268>
		else if(strcmp(arr2,"INPUT")==0)
 80015dc:	493e      	ldr	r1, [pc, #248]	; (80016d8 <pin_config+0x2a4>)
 80015de:	483b      	ldr	r0, [pc, #236]	; (80016cc <pin_config+0x298>)
 80015e0:	f7fe fdf6 	bl	80001d0 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d158      	bne.n	800169c <pin_config+0x268>
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2120      	movs	r1, #32
 80015ee:	4838      	ldr	r0, [pc, #224]	; (80016d0 <pin_config+0x29c>)
 80015f0:	f000 fbc8 	bl	8001d84 <user_GPIO_Init>
			config[3]=1;
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <pin_config+0x2a0>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	70da      	strb	r2, [r3, #3]
		break;
 80015fa:	e04f      	b.n	800169c <pin_config+0x268>

	case 5:
		if(strcmp(arr2,"CH1")==0)
 80015fc:	4937      	ldr	r1, [pc, #220]	; (80016dc <pin_config+0x2a8>)
 80015fe:	4833      	ldr	r0, [pc, #204]	; (80016cc <pin_config+0x298>)
 8001600:	f7fe fde6 	bl	80001d0 <strcmp>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <pin_config+0x1e2>
		{
			ADC_select_CH1();
 800160a:	f000 fab7 	bl	8001b7c <ADC_select_CH1>
			adcChnlChecker[0] = 1;
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <pin_config+0x2ac>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			__NOP();
		}
		break;
 8001614:	e043      	b.n	800169e <pin_config+0x26a>
		else if(strcmp(arr2,"CH2")==0)
 8001616:	4933      	ldr	r1, [pc, #204]	; (80016e4 <pin_config+0x2b0>)
 8001618:	482c      	ldr	r0, [pc, #176]	; (80016cc <pin_config+0x298>)
 800161a:	f7fe fdd9 	bl	80001d0 <strcmp>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <pin_config+0x1fc>
			ADC_select_CH2();
 8001624:	f000 fad4 	bl	8001bd0 <ADC_select_CH2>
			adcChnlChecker[1] = 1;
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <pin_config+0x2ac>)
 800162a:	2201      	movs	r2, #1
 800162c:	705a      	strb	r2, [r3, #1]
		break;
 800162e:	e036      	b.n	800169e <pin_config+0x26a>
		else if(strcmp(arr2,"CH3")==0)
 8001630:	492d      	ldr	r1, [pc, #180]	; (80016e8 <pin_config+0x2b4>)
 8001632:	4826      	ldr	r0, [pc, #152]	; (80016cc <pin_config+0x298>)
 8001634:	f7fe fdcc 	bl	80001d0 <strcmp>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <pin_config+0x216>
			ADC_select_CH3();
 800163e:	f000 faf1 	bl	8001c24 <ADC_select_CH3>
			adcChnlChecker[2] = 1;
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <pin_config+0x2ac>)
 8001644:	2201      	movs	r2, #1
 8001646:	709a      	strb	r2, [r3, #2]
		break;
 8001648:	e029      	b.n	800169e <pin_config+0x26a>
		else if(strcmp(arr2,"CH4")==0)
 800164a:	4928      	ldr	r1, [pc, #160]	; (80016ec <pin_config+0x2b8>)
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <pin_config+0x298>)
 800164e:	f7fe fdbf 	bl	80001d0 <strcmp>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <pin_config+0x230>
			ADC_select_CH4();
 8001658:	f000 fb0e 	bl	8001c78 <ADC_select_CH4>
			adcChnlChecker[3] = 1;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <pin_config+0x2ac>)
 800165e:	2201      	movs	r2, #1
 8001660:	70da      	strb	r2, [r3, #3]
		break;
 8001662:	e01c      	b.n	800169e <pin_config+0x26a>
		else if(strcmp(arr2,"DB2")==0)
 8001664:	4922      	ldr	r1, [pc, #136]	; (80016f0 <pin_config+0x2bc>)
 8001666:	4819      	ldr	r0, [pc, #100]	; (80016cc <pin_config+0x298>)
 8001668:	f7fe fdb2 	bl	80001d0 <strcmp>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <pin_config+0x258>
			adcChnlChecker[0] = 0;
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <pin_config+0x2ac>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
			adcChnlChecker[1] = 0;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <pin_config+0x2ac>)
 800167a:	2200      	movs	r2, #0
 800167c:	705a      	strb	r2, [r3, #1]
			adcChnlChecker[2] = 0;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <pin_config+0x2ac>)
 8001680:	2200      	movs	r2, #0
 8001682:	709a      	strb	r2, [r3, #2]
			adcChnlChecker[3] = 0;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <pin_config+0x2ac>)
 8001686:	2200      	movs	r2, #0
 8001688:	70da      	strb	r2, [r3, #3]
		break;
 800168a:	e008      	b.n	800169e <pin_config+0x26a>
			__NOP();
 800168c:	bf00      	nop
		break;
 800168e:	e006      	b.n	800169e <pin_config+0x26a>
		break;
 8001690:	bf00      	nop
 8001692:	e004      	b.n	800169e <pin_config+0x26a>
		break;
 8001694:	bf00      	nop
 8001696:	e002      	b.n	800169e <pin_config+0x26a>
		break;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <pin_config+0x26a>
		break;
 800169c:	bf00      	nop
		//			 break;
		//			     case 7:
		//			    	 d.SCANTIME = (uint8_t)atoi(arr2);
		//			    	 DataTOgsm(d);
	}
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800bc54 	.word	0x0800bc54
 80016a8:	200002d8 	.word	0x200002d8
 80016ac:	20000240 	.word	0x20000240
 80016b0:	0800bc58 	.word	0x0800bc58
 80016b4:	0800bc5c 	.word	0x0800bc5c
 80016b8:	0800bc60 	.word	0x0800bc60
 80016bc:	0800bc64 	.word	0x0800bc64
 80016c0:	0800bc6c 	.word	0x0800bc6c
 80016c4:	0800bc70 	.word	0x0800bc70
 80016c8:	0800bc7c 	.word	0x0800bc7c
 80016cc:	200002e4 	.word	0x200002e4
 80016d0:	48000400 	.word	0x48000400
 80016d4:	200002fc 	.word	0x200002fc
 80016d8:	0800bc84 	.word	0x0800bc84
 80016dc:	0800bc8c 	.word	0x0800bc8c
 80016e0:	20000300 	.word	0x20000300
 80016e4:	0800bc90 	.word	0x0800bc90
 80016e8:	0800bc94 	.word	0x0800bc94
 80016ec:	0800bc98 	.word	0x0800bc98
 80016f0:	0800bc9c 	.word	0x0800bc9c

080016f4 <UART2_Init>:

UART_HandleTypeDef huart2;


void UART2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <UART2_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <UART2_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <UART2_Init+0x58>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <UART2_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <UART2_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <UART2_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <UART2_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <UART2_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <UART2_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <UART2_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <UART2_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <UART2_Init+0x58>)
 8001738:	f005 fdb8 	bl	80072ac <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <UART2_Init+0x52>
	{
		Error_Handler();
 8001742:	f000 fda3 	bl	800228c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003a4 	.word	0x200003a4
 8001750:	40004400 	.word	0x40004400

08001754 <DataToUart>:
//{
//	HAL_UART_Transmit(&huart2, (uint8_t*)GPIO, 4,1000);
//}

void DataToUart(struct data *d)
{
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b08d      	sub	sp, #52	; 0x34
 8001758:	af0a      	add	r7, sp, #40	; 0x28
 800175a:	6078      	str	r0, [r7, #4]
//	extern buffer_Time;
//	sprintf(buffer_Time,"%02d:%02d:%02d",d1->hr,d1->min,d1->sec);
//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);

	sprintf(buf,"%02d:%02d:%02d,%s,%s,%s,%s,%s,%s,%s,%s\r\n",d->hr,d->min,d->sec,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461d      	mov	r5, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	461e      	mov	r6, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	789b      	ldrb	r3, [r3, #2]
 800176c:	461c      	mov	r4, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	331d      	adds	r3, #29
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	3227      	adds	r2, #39	; 0x27
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	3131      	adds	r1, #49	; 0x31
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	303b      	adds	r0, #59	; 0x3b
 800177e:	9008      	str	r0, [sp, #32]
 8001780:	9107      	str	r1, [sp, #28]
 8001782:	9206      	str	r2, [sp, #24]
 8001784:	9305      	str	r3, [sp, #20]
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <DataToUart+0x70>)
 8001788:	9304      	str	r3, [sp, #16]
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <DataToUart+0x74>)
 800178c:	9303      	str	r3, [sp, #12]
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <DataToUart+0x78>)
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <DataToUart+0x7c>)
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	9400      	str	r4, [sp, #0]
 8001798:	4633      	mov	r3, r6
 800179a:	462a      	mov	r2, r5
 800179c:	490d      	ldr	r1, [pc, #52]	; (80017d4 <DataToUart+0x80>)
 800179e:	480e      	ldr	r0, [pc, #56]	; (80017d8 <DataToUart+0x84>)
 80017a0:	f008 f848 	bl	8009834 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <DataToUart+0x84>)
 80017a6:	f7fe fd1d 	bl	80001e4 <strlen>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	4909      	ldr	r1, [pc, #36]	; (80017d8 <DataToUart+0x84>)
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <DataToUart+0x88>)
 80017b6:	f005 fdc7 	bl	8007348 <HAL_UART_Transmit>
//	HAL_Delay(1000);

}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000022c 	.word	0x2000022c
 80017c8:	20000220 	.word	0x20000220
 80017cc:	20000214 	.word	0x20000214
 80017d0:	20000208 	.word	0x20000208
 80017d4:	0800bca0 	.word	0x0800bca0
 80017d8:	20000304 	.word	0x20000304
 80017dc:	200003a4 	.word	0x200003a4

080017e0 <GsmCommands>:



void GsmCommands(uint8_t* cmd)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe fcfb 	bl	80001e4 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <GsmCommands+0x38>)
 80017f8:	f005 ff0c 	bl	8007614 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 80017fc:	2264      	movs	r2, #100	; 0x64
 80017fe:	4907      	ldr	r1, [pc, #28]	; (800181c <GsmCommands+0x3c>)
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <GsmCommands+0x38>)
 8001802:	f005 ff75 	bl	80076f0 <HAL_UART_Receive_IT>
	HAL_Delay(500);
 8001806:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180a:	f001 f8b7 	bl	800297c <HAL_Delay>

}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200003a4 	.word	0x200003a4
 800181c:	20000340 	.word	0x20000340

08001820 <Gsm_Init>:



void Gsm_Init()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 8001824:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001828:	f001 f8a8 	bl	800297c <HAL_Delay>


	GsmCommands((uint8_t*)"AT\r\n");
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <Gsm_Init+0x34>)
 800182e:	f7ff ffd7 	bl	80017e0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <Gsm_Init+0x38>)
 8001834:	f7ff ffd4 	bl	80017e0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <Gsm_Init+0x3c>)
 800183a:	f7ff ffd1 	bl	80017e0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <Gsm_Init+0x40>)
 8001840:	f7ff ffce 	bl	80017e0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"airtelgprs.com\"\r\n");
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <Gsm_Init+0x44>)
 8001846:	f7ff ffcb 	bl	80017e0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <Gsm_Init+0x48>)
 800184c:	f7ff ffc8 	bl	80017e0 <GsmCommands>

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	0800bccc 	.word	0x0800bccc
 8001858:	0800bcd4 	.word	0x0800bcd4
 800185c:	0800bce0 	.word	0x0800bce0
 8001860:	0800bcec 	.word	0x0800bcec
 8001864:	0800bcfc 	.word	0x0800bcfc
 8001868:	0800bd24 	.word	0x0800bd24

0800186c <DataToCloud>:


void DataToCloud(uint8_t* Time,uint8_t* Ch1,uint8_t* Ch2,uint8_t* Ch3,uint8_t* Ch4,uint8_t* D1,uint8_t* D2,uint8_t* D3,uint8_t* D4)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8001872:	af08      	add	r7, sp, #32
 8001874:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8001878:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800187c:	6020      	str	r0, [r4, #0]
 800187e:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8001882:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8001886:	6001      	str	r1, [r0, #0]
 8001888:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800188c:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8001890:	600a      	str	r2, [r1, #0]
 8001892:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001896:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800189a:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 800189c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80018a0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	f000 f89b 	bl	80019e0 <url_encode>
 80018aa:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch1 = url_encode(Ch1);
 80018ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80018b2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	f000 f892 	bl	80019e0 <url_encode>
 80018bc:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch2 = url_encode(Ch2);
 80018c0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80018c4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f000 f889 	bl	80019e0 <url_encode>
 80018ce:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch3 = url_encode(Ch3);
 80018d2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80018d6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	f000 f880 	bl	80019e0 <url_encode>
 80018e0:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_Ch4 = url_encode(Ch4);
 80018e4:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 80018e8:	f000 f87a 	bl	80019e0 <url_encode>
 80018ec:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D1 = url_encode(D1);
 80018f0:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 80018f4:	f000 f874 	bl	80019e0 <url_encode>
 80018f8:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D2 = url_encode(D2);
 80018fc:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8001900:	f000 f86e 	bl	80019e0 <url_encode>
 8001904:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D3 = url_encode(D3);
 8001908:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800190c:	f000 f868 	bl	80019e0 <url_encode>
 8001910:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	char* encoded_D4 = url_encode(D4);
 8001914:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8001918:	f000 f862 	bl	80019e0 <url_encode>
 800191c:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8001920:	482b      	ldr	r0, [pc, #172]	; (80019d0 <DataToCloud+0x164>)
 8001922:	f7ff ff5d 	bl	80017e0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 8001926:	482b      	ldr	r0, [pc, #172]	; (80019d4 <DataToCloud+0x168>)
 8001928:	f7ff ff5a 	bl	80017e0 <GsmCommands>


	snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyM2Si83cN_Ieegenl17V6-CFZDiRIFlvHbPW19ydK0MydLo3YrItC4_J7xeOUK8FtQ/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s\"\r\n",encoded_Time, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 800192c:	f107 0010 	add.w	r0, r7, #16
 8001930:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001934:	9307      	str	r3, [sp, #28]
 8001936:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800193a:	9306      	str	r3, [sp, #24]
 800193c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001940:	9305      	str	r3, [sp, #20]
 8001942:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001946:	9304      	str	r3, [sp, #16]
 8001948:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800194c:	9303      	str	r3, [sp, #12]
 800194e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <DataToCloud+0x16c>)
 8001966:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800196a:	f007 ff2f 	bl	80097cc <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff34 	bl	80017e0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8001978:	4818      	ldr	r0, [pc, #96]	; (80019dc <DataToCloud+0x170>)
 800197a:	f7ff ff31 	bl	80017e0 <GsmCommands>

	free(encoded_Time);
 800197e:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8001982:	f007 f9b9 	bl	8008cf8 <free>
	free(encoded_Ch1);
 8001986:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800198a:	f007 f9b5 	bl	8008cf8 <free>
	free(encoded_Ch2);
 800198e:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001992:	f007 f9b1 	bl	8008cf8 <free>
	free(encoded_Ch3);
 8001996:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800199a:	f007 f9ad 	bl	8008cf8 <free>
	free(encoded_Ch4);
 800199e:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80019a2:	f007 f9a9 	bl	8008cf8 <free>
	free(encoded_D1);
 80019a6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80019aa:	f007 f9a5 	bl	8008cf8 <free>
	free(encoded_D2);
 80019ae:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80019b2:	f007 f9a1 	bl	8008cf8 <free>
	free(encoded_D3);
 80019b6:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80019ba:	f007 f99d 	bl	8008cf8 <free>
	free(encoded_D4);
 80019be:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80019c2:	f007 f999 	bl	8008cf8 <free>

}
 80019c6:	bf00      	nop
 80019c8:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	0800bd34 	.word	0x0800bd34
 80019d4:	0800bd44 	.word	0x0800bd44
 80019d8:	0800bd54 	.word	0x0800bd54
 80019dc:	0800be38 	.word	0x0800be38

080019e0 <url_encode>:



char* url_encode(const char* str)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <url_encode+0xc8>)
 80019ea:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe fbf9 	bl	80001e4 <strlen>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	3301      	adds	r3, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f007 f973 	bl	8008ce8 <malloc>
 8001a02:	4603      	mov	r3, r0
 8001a04:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	617b      	str	r3, [r7, #20]

	while (*str) {
 8001a0a:	e040      	b.n	8001a8e <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a26      	ldr	r2, [pc, #152]	; (8001aac <url_encode+0xcc>)
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10f      	bne.n	8001a40 <url_encode+0x60>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b2d      	cmp	r3, #45	; 0x2d
 8001a26:	d00b      	beq.n	8001a40 <url_encode+0x60>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b5f      	cmp	r3, #95	; 0x5f
 8001a2e:	d007      	beq.n	8001a40 <url_encode+0x60>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2e      	cmp	r3, #46	; 0x2e
 8001a36:	d003      	beq.n	8001a40 <url_encode+0x60>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b7e      	cmp	r3, #126	; 0x7e
 8001a3e:	d106      	bne.n	8001a4e <url_encode+0x6e>
			*ptr++ = *str;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	617a      	str	r2, [r7, #20]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e01c      	b.n	8001a88 <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	617a      	str	r2, [r7, #20]
 8001a54:	2225      	movs	r2, #37	; 0x25
 8001a56:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	441a      	add	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	1c59      	adds	r1, r3, #1
 8001a6c:	6179      	str	r1, [r7, #20]
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	1c59      	adds	r1, r3, #1
 8001a82:	6179      	str	r1, [r7, #20]
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	701a      	strb	r2, [r3, #0]
		}
		str++;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
	while (*str) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ba      	bne.n	8001a0c <url_encode+0x2c>
	}
	*ptr = '\0';
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
	return encoded;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	0800be4c 	.word	0x0800be4c
 8001aac:	0800bea8 	.word	0x0800bea8

08001ab0 <USER_ADC1_Init>:
	 */
	HAL_RCCEx_EnableMSIPLLMode();
}

void USER_ADC1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <USER_ADC1_Init+0x80>)
 8001ab8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001abc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ac0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <USER_ADC1_Init+0x7c>)
 8001b18:	f001 f97c 	bl	8002e14 <HAL_ADC_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <USER_ADC1_Init+0x76>
	{
		Error_Handler();
 8001b22:	f000 fbb3 	bl	800228c <Error_Handler>
//	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000428 	.word	0x20000428
 8001b30:	50040000 	.word	0x50040000

08001b34 <USER_GPIO_Init>:

void USER_GPIO_Init(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <USER_GPIO_Init+0x44>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <USER_GPIO_Init+0x44>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <USER_GPIO_Init+0x44>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <USER_GPIO_Init+0x44>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <USER_GPIO_Init+0x44>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <USER_GPIO_Init+0x44>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000

08001b7c <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_5;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <ADC_select_CH1+0x4c>)
 8001b94:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b96:	2306      	movs	r3, #6
 8001b98:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b9e:	237f      	movs	r3, #127	; 0x7f
 8001ba0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <ADC_select_CH1+0x50>)
 8001bb0:	f001 fd7c 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <ADC_select_CH1+0x42>
	{
		Error_Handler();
 8001bba:	f000 fb67 	bl	800228c <Error_Handler>
	}
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	14f00020 	.word	0x14f00020
 8001bcc:	20000428 	.word	0x20000428

08001bd0 <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_6;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <ADC_select_CH2+0x4c>)
 8001be8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bea:	2306      	movs	r3, #6
 8001bec:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001bee:	2306      	movs	r3, #6
 8001bf0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bf2:	237f      	movs	r3, #127	; 0x7f
 8001bf4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4807      	ldr	r0, [pc, #28]	; (8001c20 <ADC_select_CH2+0x50>)
 8001c04:	f001 fd52 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <ADC_select_CH2+0x42>
	{
		Error_Handler();
 8001c0e:	f000 fb3d 	bl	800228c <Error_Handler>
	}
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	19200040 	.word	0x19200040
 8001c20:	20000428 	.word	0x20000428

08001c24 <ADC_select_CH3>:

void ADC_select_CH3(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_9;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <ADC_select_CH3+0x4c>)
 8001c3c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c3e:	2306      	movs	r3, #6
 8001c40:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001c42:	2306      	movs	r3, #6
 8001c44:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c46:	237f      	movs	r3, #127	; 0x7f
 8001c48:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	4619      	mov	r1, r3
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <ADC_select_CH3+0x50>)
 8001c58:	f001 fd28 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <ADC_select_CH3+0x42>
	{
		Error_Handler();
 8001c62:	f000 fb13 	bl	800228c <Error_Handler>
	}
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	25b00200 	.word	0x25b00200
 8001c74:	20000428 	.word	0x20000428

08001c78 <ADC_select_CH4>:

void ADC_select_CH4(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_10;
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <ADC_select_CH4+0x4c>)
 8001c90:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c92:	2306      	movs	r3, #6
 8001c94:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001c96:	2306      	movs	r3, #6
 8001c98:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c9a:	237f      	movs	r3, #127	; 0x7f
 8001c9c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <ADC_select_CH4+0x50>)
 8001cac:	f001 fcfe 	bl	80036ac <HAL_ADC_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <ADC_select_CH4+0x42>
	{
		Error_Handler();
 8001cb6:	f000 fae9 	bl	800228c <Error_Handler>
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2a000400 	.word	0x2a000400
 8001cc8:	20000428 	.word	0x20000428

08001ccc <adc_start>:
//}



void adc_start(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <adc_start+0x10>)
 8001cd2:	f001 f9e7 	bl	80030a4 <HAL_ADC_Start>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000428 	.word	0x20000428

08001ce0 <adc_conversion>:

void adc_conversion(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 8001ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <adc_conversion+0x14>)
 8001cea:	f001 fa71 	bl	80031d0 <HAL_ADC_PollForConversion>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000428 	.word	0x20000428

08001cf8 <adc_value>:

uint16_t adc_value(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <adc_value+0x14>)
 8001cfe:	f001 faf6 	bl	80032ee <HAL_ADC_GetValue>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29b      	uxth	r3, r3
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000428 	.word	0x20000428

08001d10 <adc_stop>:

void adc_stop(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <adc_stop+0x10>)
 8001d16:	f001 fa28 	bl	800316a <HAL_ADC_Stop>
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000428 	.word	0x20000428

08001d24 <user_USART1_UART_Init>:
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

 void user_USART1_UART_Init(void)
 {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
 ////////////////////
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <user_USART1_UART_Init+0x5c>)
 8001d2c:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <user_USART1_UART_Init+0x58>)
 8001d68:	f005 faa0 	bl	80072ac <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <user_USART1_UART_Init+0x52>
   {
     Error_Handler();
 8001d72:	f000 fa8b 	bl	800228c <Error_Handler>
   }

 }
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000254 	.word	0x20000254
 8001d80:	40013800 	.word	0x40013800

08001d84 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <user_GPIO_Init+0xac>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <user_GPIO_Init+0xac>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <user_GPIO_Init+0xac>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <user_GPIO_Init+0xac>)
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <user_GPIO_Init+0xac>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <user_GPIO_Init+0xac>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <user_GPIO_Init+0xac>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <user_GPIO_Init+0xac>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <user_GPIO_Init+0xac>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8001ddc:	787a      	ldrb	r2, [r7, #1]
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f002 fd36 	bl	8004854 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <user_GPIO_Init+0x78>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8001dee:	787a      	ldrb	r2, [r7, #1]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f81f 	bl	8001e38 <gpio_output>
 8001dfa:	e008      	b.n	8001e0e <user_GPIO_Init+0x8a>
     }
     else if(PIN_mode == INPUT)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <user_GPIO_Init+0x8a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 8001e02:	787a      	ldrb	r2, [r7, #1]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4619      	mov	r1, r3
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f837 	bl	8001e7c <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <user_GPIO_Init+0xb0>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <user_GPIO_Init+0xb0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <user_GPIO_Init+0xb0>)
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	60da      	str	r2, [r3, #12]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <user_GPIO_Init+0xb0>)
 8001e22:	2203      	movs	r2, #3
 8001e24:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	2000048c 	.word	0x2000048c

08001e38 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
 8001e44:	4613      	mov	r3, r2
 8001e46:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f002 fb6e 	bl	8004550 <HAL_GPIO_Init>
 }
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f002 fb4e 	bl	8004550 <HAL_GPIO_Init>
 }
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <data_receive>:




void data_receive()
 {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 8001ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec4:	2214      	movs	r2, #20
 8001ec6:	4905      	ldr	r1, [pc, #20]	; (8001edc <data_receive+0x20>)
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <data_receive+0x24>)
 8001eca:	f005 fad1 	bl	8007470 <HAL_UART_Receive>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <data_receive+0x1c>
	 {
			 Error_Handler();
 8001ed4:	f000 f9da 	bl	800228c <Error_Handler>
	 }
 }
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000244 	.word	0x20000244
 8001ee0:	20000254 	.word	0x20000254

08001ee4 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f002 fc95 	bl	8004824 <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0

 }
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8001f14:	787a      	ldrb	r2, [r7, #1]
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f002 fc9a 	bl	8004854 <HAL_GPIO_WritePin>
    return PinState;
 8001f20:	787b      	ldrb	r3, [r7, #1]
 }
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <dec_bcd>:


//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <dec_bcd+0x48>)
 8001f38:	fb82 1203 	smull	r1, r2, r2, r3
 8001f3c:	1092      	asrs	r2, r2, #2
 8001f3e:	17db      	asrs	r3, r3, #31
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	b2d8      	uxtb	r0, r3
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <dec_bcd+0x48>)
 8001f4c:	fb83 1302 	smull	r1, r3, r3, r2
 8001f50:	1099      	asrs	r1, r3, #2
 8001f52:	17d3      	asrs	r3, r2, #31
 8001f54:	1ac9      	subs	r1, r1, r3
 8001f56:	460b      	mov	r3, r1
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	1ad1      	subs	r1, r2, r3
 8001f60:	b2cb      	uxtb	r3, r1
 8001f62:	4403      	add	r3, r0
 8001f64:	b2db      	uxtb	r3, r3
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	66666667 	.word	0x66666667

08001f78 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	461a      	mov	r2, r3
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4413      	add	r3, r2
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fae:	f000 fc70 	bl	8002892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb2:	f000 f829 	bl	8002008 <SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
//  MX_ADC1_Init();
  MX_I2C1_Init();
 8001fb6:	f000 f889 	bl	80020cc <MX_I2C1_Init>
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  UART2_Init();
 8001fba:	f7ff fb9b 	bl	80016f4 <UART2_Init>
  USER_ADC1_Init();
 8001fbe:	f7ff fd77 	bl	8001ab0 <USER_ADC1_Init>
     USER_GPIO_Init();
 8001fc2:	f7ff fdb7 	bl	8001b34 <USER_GPIO_Init>
  user_USART1_UART_Init();
 8001fc6:	f7ff fead 	bl	8001d24 <user_USART1_UART_Init>
  	set_time(00,30,14,9,9,9,24);
 8001fca:	2318      	movs	r3, #24
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2309      	movs	r3, #9
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	2309      	movs	r3, #9
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2309      	movs	r3, #9
 8001fd8:	220e      	movs	r2, #14
 8001fda:	211e      	movs	r1, #30
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f000 f8b5 	bl	800214c <set_time>

  	Gsm_Init();
 8001fe2:	f7ff fc1d 	bl	8001820 <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Configurator();
 8001fe6:	f7ff f90b 	bl	8001200 <Configurator>
	  ADC_handler(&d);
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <main+0x5c>)
 8001fec:	f7ff f8aa 	bl	8001144 <ADC_handler>
	  		get_time();
 8001ff0:	f000 f8fc 	bl	80021ec <get_time>
//	  		d.hr=time.hour;
//	  		d.min=time.minutes;
//	  		d.sec=time.seconds;
	  		DataToGsm(&d);
 8001ff4:	4803      	ldr	r0, [pc, #12]	; (8002004 <main+0x5c>)
 8001ff6:	f7fe ffb9 	bl	8000f6c <DataToGsm>
	  		DataToUart(&d);
 8001ffa:	4802      	ldr	r0, [pc, #8]	; (8002004 <main+0x5c>)
 8001ffc:	f7ff fbaa 	bl	8001754 <DataToUart>
	  Configurator();
 8002000:	e7f1      	b.n	8001fe6 <main+0x3e>
 8002002:	bf00      	nop
 8002004:	200004f4 	.word	0x200004f4

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b096      	sub	sp, #88	; 0x58
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2244      	movs	r2, #68	; 0x44
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f006 fe76 	bl	8008d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	463b      	mov	r3, r7
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800202a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800202e:	f003 ffb7 	bl	8005fa0 <HAL_PWREx_ControlVoltageScaling>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002038:	f000 f928 	bl	800228c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800203c:	f003 ff92 	bl	8005f64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <SystemClock_Config+0xc0>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <SystemClock_Config+0xc0>)
 8002048:	f023 0318 	bic.w	r3, r3, #24
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002050:	2314      	movs	r3, #20
 8002052:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002058:	2301      	movs	r3, #1
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002060:	2360      	movs	r3, #96	; 0x60
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002064:	2302      	movs	r3, #2
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002068:	2301      	movs	r3, #1
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800206c:	2301      	movs	r3, #1
 800206e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002070:	2310      	movs	r3, #16
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002074:	2307      	movs	r3, #7
 8002076:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002078:	2302      	movs	r3, #2
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800207c:	2302      	movs	r3, #2
 800207e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4618      	mov	r0, r3
 8002086:	f003 ffe1 	bl	800604c <HAL_RCC_OscConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002090:	f000 f8fc 	bl	800228c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002094:	230f      	movs	r3, #15
 8002096:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002098:	2303      	movs	r3, #3
 800209a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	2101      	movs	r1, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 fbe1 	bl	8006874 <HAL_RCC_ClockConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80020b8:	f000 f8e8 	bl	800228c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80020bc:	f004 fff4 	bl	80070a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80020c0:	bf00      	nop
 80020c2:	3758      	adds	r7, #88	; 0x58
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000

080020cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <MX_I2C1_Init+0x74>)
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <MX_I2C1_Init+0x78>)
 80020d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_I2C1_Init+0x74>)
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <MX_I2C1_Init+0x7c>)
 80020da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <MX_I2C1_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <MX_I2C1_Init+0x74>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <MX_I2C1_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_I2C1_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <MX_I2C1_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_I2C1_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_I2C1_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <MX_I2C1_Init+0x74>)
 8002108:	f002 fbbc 	bl	8004884 <HAL_I2C_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002112:	f000 f8bb 	bl	800228c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002116:	2100      	movs	r1, #0
 8002118:	4809      	ldr	r0, [pc, #36]	; (8002140 <MX_I2C1_Init+0x74>)
 800211a:	f003 fe8b 	bl	8005e34 <HAL_I2CEx_ConfigAnalogFilter>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002124:	f000 f8b2 	bl	800228c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002128:	2100      	movs	r1, #0
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_I2C1_Init+0x74>)
 800212c:	f003 fecd 	bl	8005eca <HAL_I2CEx_ConfigDigitalFilter>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002136:	f000 f8a9 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200004a0 	.word	0x200004a0
 8002144:	40005400 	.word	0x40005400
 8002148:	00707cbb 	.word	0x00707cbb

0800214c <set_time>:
//}

/* USER CODE BEGIN 4 */

void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af04      	add	r7, sp, #16
 8002152:	4604      	mov	r4, r0
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4623      	mov	r3, r4
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	4603      	mov	r3, r0
 8002160:	71bb      	strb	r3, [r7, #6]
 8002162:	460b      	mov	r3, r1
 8002164:	717b      	strb	r3, [r7, #5]
 8002166:	4613      	mov	r3, r2
 8002168:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fedd 	bl	8001f2c <dec_bcd>
 8002172:	4603      	mov	r3, r0
 8002174:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fed7 	bl	8001f2c <dec_bcd>
 800217e:	4603      	mov	r3, r0
 8002180:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8002182:	797b      	ldrb	r3, [r7, #5]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fed1 	bl	8001f2c <dec_bcd>
 800218a:	4603      	mov	r3, r0
 800218c:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 800218e:	793b      	ldrb	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fecb 	bl	8001f2c <dec_bcd>
 8002196:	4603      	mov	r3, r0
 8002198:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 800219a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fec4 	bl	8001f2c <dec_bcd>
 80021a4:	4603      	mov	r3, r0
 80021a6:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 80021a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff febd 	bl	8001f2c <dec_bcd>
 80021b2:	4603      	mov	r3, r0
 80021b4:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 80021b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff feb6 	bl	8001f2c <dec_bcd>
 80021c0:	4603      	mov	r3, r0
 80021c2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2307      	movs	r3, #7
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	2200      	movs	r2, #0
 80021d8:	21d0      	movs	r1, #208	; 0xd0
 80021da:	4803      	ldr	r0, [pc, #12]	; (80021e8 <set_time+0x9c>)
 80021dc:	f002 fbe2 	bl	80049a4 <HAL_I2C_Mem_Write>
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd90      	pop	{r4, r7, pc}
 80021e8:	200004a0 	.word	0x200004a0

080021ec <get_time>:


void get_time()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	2307      	movs	r3, #7
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	463b      	mov	r3, r7
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	2200      	movs	r2, #0
 8002204:	21d0      	movs	r1, #208	; 0xd0
 8002206:	481f      	ldr	r0, [pc, #124]	; (8002284 <get_time+0x98>)
 8002208:	f002 fce0 	bl	8004bcc <HAL_I2C_Mem_Read>
	d.sec=bcd_dec(get_time[0]);
 800220c:	783b      	ldrb	r3, [r7, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff feb2 	bl	8001f78 <bcd_dec>
 8002214:	4603      	mov	r3, r0
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <get_time+0x9c>)
 800221a:	709a      	strb	r2, [r3, #2]
	d.min=bcd_dec(get_time[1]);
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff feaa 	bl	8001f78 <bcd_dec>
 8002224:	4603      	mov	r3, r0
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <get_time+0x9c>)
 800222a:	705a      	strb	r2, [r3, #1]
	d.hr=bcd_dec(get_time[2]);
 800222c:	78bb      	ldrb	r3, [r7, #2]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fea2 	bl	8001f78 <bcd_dec>
 8002234:	4603      	mov	r3, r0
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <get_time+0x9c>)
 800223a:	701a      	strb	r2, [r3, #0]
	d.day=bcd_dec(get_time[3]);
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fe9a 	bl	8001f78 <bcd_dec>
 8002244:	4603      	mov	r3, r0
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <get_time+0x9c>)
 800224a:	70da      	strb	r2, [r3, #3]
	d.date=bcd_dec(get_time[4]);
 800224c:	793b      	ldrb	r3, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe92 	bl	8001f78 <bcd_dec>
 8002254:	4603      	mov	r3, r0
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <get_time+0x9c>)
 800225a:	711a      	strb	r2, [r3, #4]
	d.month=bcd_dec(get_time[5]);
 800225c:	797b      	ldrb	r3, [r7, #5]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fe8a 	bl	8001f78 <bcd_dec>
 8002264:	4603      	mov	r3, r0
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <get_time+0x9c>)
 800226a:	715a      	strb	r2, [r3, #5]
	d.year=bcd_dec(get_time[6]);
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fe82 	bl	8001f78 <bcd_dec>
 8002274:	4603      	mov	r3, r0
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <get_time+0x9c>)
 800227a:	719a      	strb	r2, [r3, #6]
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200004a0 	.word	0x200004a0
 8002288:	200004f4 	.word	0x200004f4

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002294:	e7fe      	b.n	8002294 <Error_Handler+0x8>
	...

08002298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_MspInit+0x44>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_MspInit+0x44>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6613      	str	r3, [r2, #96]	; 0x60
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_MspInit+0x44>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_MspInit+0x44>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_MspInit+0x44>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	; 0x58
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_MspInit+0x44>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b09e      	sub	sp, #120	; 0x78
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2254      	movs	r2, #84	; 0x54
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f006 fd01 	bl	8008d08 <memset>
  if(hadc->Instance==ADC1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <HAL_ADC_MspInit+0xd0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d14b      	bne.n	80023a8 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002314:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002316:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800231a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800231c:	2301      	movs	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002320:	2301      	movs	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002324:	2308      	movs	r3, #8
 8002326:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002328:	2307      	movs	r3, #7
 800232a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800232c:	2302      	movs	r3, #2
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002330:	2302      	movs	r3, #2
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4618      	mov	r0, r3
 8002340:	f004 fcbc 	bl	8006cbc <HAL_RCCEx_PeriphCLKConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800234a:	f7ff ff9f 	bl	800228c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_ADC_MspInit+0xd4>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_ADC_MspInit+0xd4>)
 8002354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_ADC_MspInit+0xd4>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_ADC_MspInit+0xd4>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_ADC_MspInit+0xd4>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_ADC_MspInit+0xd4>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800237e:	2333      	movs	r3, #51	; 0x33
 8002380:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002382:	230b      	movs	r3, #11
 8002384:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002394:	f002 f8dc 	bl	8004550 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2012      	movs	r0, #18
 800239e:	f002 f814 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80023a2:	2012      	movs	r0, #18
 80023a4:	f002 f82d 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023a8:	bf00      	nop
 80023aa:	3778      	adds	r7, #120	; 0x78
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	50040000 	.word	0x50040000
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09e      	sub	sp, #120	; 0x78
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	2254      	movs	r2, #84	; 0x54
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f006 fc95 	bl	8008d08 <memset>
  if(hi2c->Instance==I2C1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a26      	ldr	r2, [pc, #152]	; (800247c <HAL_I2C_MspInit+0xc4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d145      	bne.n	8002474 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 fc61 	bl	8006cbc <HAL_RCCEx_PeriphCLKConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002400:	f7ff ff44 	bl	800228c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_I2C_MspInit+0xc8>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_I2C_MspInit+0xc8>)
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_I2C_MspInit+0xc8>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800241c:	23c0      	movs	r3, #192	; 0xc0
 800241e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002420:	2312      	movs	r3, #18
 8002422:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002428:	2303      	movs	r3, #3
 800242a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800242c:	2304      	movs	r3, #4
 800242e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002434:	4619      	mov	r1, r3
 8002436:	4813      	ldr	r0, [pc, #76]	; (8002484 <HAL_I2C_MspInit+0xcc>)
 8002438:	f002 f88a 	bl	8004550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_I2C_MspInit+0xc8>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_I2C_MspInit+0xc8>)
 8002442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_I2C_MspInit+0xc8>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	201f      	movs	r0, #31
 800245a:	f001 ffb6 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800245e:	201f      	movs	r0, #31
 8002460:	f001 ffcf 	bl	8004402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	2020      	movs	r0, #32
 800246a:	f001 ffae 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800246e:	2020      	movs	r0, #32
 8002470:	f001 ffc7 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002474:	bf00      	nop
 8002476:	3778      	adds	r7, #120	; 0x78
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40005400 	.word	0x40005400
 8002480:	40021000 	.word	0x40021000
 8002484:	48000400 	.word	0x48000400

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0a0      	sub	sp, #128	; 0x80
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	2254      	movs	r2, #84	; 0x54
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f006 fc2d 	bl	8008d08 <memset>
  if(huart->Instance==USART1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a46      	ldr	r2, [pc, #280]	; (80025cc <HAL_UART_MspInit+0x144>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d140      	bne.n	800253a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024bc:	2300      	movs	r3, #0
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fbf9 	bl	8006cbc <HAL_RCCEx_PeriphCLKConfig>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024d0:	f7ff fedc 	bl	800228c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_UART_MspInit+0x148>)
 80024d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d8:	4a3d      	ldr	r2, [pc, #244]	; (80025d0 <HAL_UART_MspInit+0x148>)
 80024da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024de:	6613      	str	r3, [r2, #96]	; 0x60
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_UART_MspInit+0x148>)
 80024e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_UART_MspInit+0x148>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	4a37      	ldr	r2, [pc, #220]	; (80025d0 <HAL_UART_MspInit+0x148>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <HAL_UART_MspInit+0x148>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002504:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002508:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002516:	2307      	movs	r3, #7
 8002518:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800251e:	4619      	mov	r1, r3
 8002520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002524:	f002 f814 	bl	8004550 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2100      	movs	r1, #0
 800252c:	2025      	movs	r0, #37	; 0x25
 800252e:	f001 ff4c 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002532:	2025      	movs	r0, #37	; 0x25
 8002534:	f001 ff65 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002538:	e043      	b.n	80025c2 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <HAL_UART_MspInit+0x14c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d13e      	bne.n	80025c2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002548:	2300      	movs	r3, #0
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	4618      	mov	r0, r3
 8002552:	f004 fbb3 	bl	8006cbc <HAL_RCCEx_PeriphCLKConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800255c:	f7ff fe96 	bl	800228c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_UART_MspInit+0x148>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <HAL_UART_MspInit+0x148>)
 8002566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256a:	6593      	str	r3, [r2, #88]	; 0x58
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_UART_MspInit+0x148>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_UART_MspInit+0x148>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_UART_MspInit+0x148>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_UART_MspInit+0x148>)
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002590:	230c      	movs	r3, #12
 8002592:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a0:	2307      	movs	r3, #7
 80025a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ae:	f001 ffcf 	bl	8004550 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2026      	movs	r0, #38	; 0x26
 80025b8:	f001 ff07 	bl	80043ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025bc:	2026      	movs	r0, #38	; 0x26
 80025be:	f001 ff20 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3780      	adds	r7, #128	; 0x80
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40004400 	.word	0x40004400

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <NMI_Handler+0x4>

080025de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler+0x4>

080025ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002624:	f000 f98a 	bl	800293c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}

0800262c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <ADC1_IRQHandler+0x10>)
 8002632:	f000 fe69 	bl	8003308 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000428 	.word	0x20000428

08002640 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <I2C1_EV_IRQHandler+0x10>)
 8002646:	f002 fbdb 	bl	8004e00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200004a0 	.word	0x200004a0

08002654 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <I2C1_ER_IRQHandler+0x10>)
 800265a:	f002 fbeb 	bl	8004e34 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200004a0 	.word	0x200004a0

08002668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <USART1_IRQHandler+0x10>)
 800266e:	f005 f895 	bl	800779c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000254 	.word	0x20000254

0800267c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <USART2_IRQHandler+0x10>)
 8002682:	f005 f88b 	bl	800779c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200003a4 	.word	0x200003a4

08002690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_kill>:

int _kill(int pid, int sig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026aa:	f006 faf3 	bl	8008c94 <__errno>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2216      	movs	r2, #22
 80026b2:	601a      	str	r2, [r3, #0]
  return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_exit>:

void _exit (int status)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffe7 	bl	80026a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d2:	e7fe      	b.n	80026d2 <_exit+0x12>

080026d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00a      	b.n	80026fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e6:	f3af 8000 	nop.w
 80026ea:	4601      	mov	r1, r0
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf0      	blt.n	80026e6 <_read+0x12>
  }

  return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e009      	b.n	8002734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf1      	blt.n	8002720 <_write+0x12>
  }
  return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_close>:

int _close(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276e:	605a      	str	r2, [r3, #4]
  return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_isatty>:

int _isatty(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f006 fa58 	bl	8008c94 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20010000 	.word	0x20010000
 8002810:	00000400 	.word	0x00000400
 8002814:	2000053c 	.word	0x2000053c
 8002818:	20000558 	.word	0x20000558

0800281c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002878 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002844:	f7ff ffea 	bl	800281c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopForever+0x6>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopForever+0xe>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopForever+0x16>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f006 fa17 	bl	8008ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002872:	f7ff fb99 	bl	8001fa8 <main>

08002876 <LoopForever>:

LoopForever:
    b LoopForever
 8002876:	e7fe      	b.n	8002876 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002884:	0800c2fc 	.word	0x0800c2fc
  ldr r2, =_sbss
 8002888:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800288c:	20000554 	.word	0x20000554

08002890 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <CAN1_RX0_IRQHandler>

08002892 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289c:	2003      	movs	r0, #3
 800289e:	f001 fd89 	bl	80043b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028a2:	2000      	movs	r0, #0
 80028a4:	f000 f80e 	bl	80028c4 <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	e001      	b.n	80028b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028b4:	f7ff fcf0 	bl	8002298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b8:	79fb      	ldrb	r3, [r7, #7]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_InitTick+0x6c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d023      	beq.n	8002920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_InitTick+0x70>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_InitTick+0x6c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 fd95 	bl	800441e <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d809      	bhi.n	8002914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002900:	2200      	movs	r2, #0
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f001 fd5f 	bl	80043ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_InitTick+0x74>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e007      	b.n	8002924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e004      	b.n	8002924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	e001      	b.n	8002924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000008 	.word	0x20000008
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_IncTick+0x20>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_IncTick+0x24>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4413      	add	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_IncTick+0x24>)
 800294e:	6013      	str	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000008 	.word	0x20000008
 8002960:	20000540 	.word	0x20000540

08002964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTick;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_GetTick+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000540 	.word	0x20000540

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff ffee 	bl	8002964 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_Delay+0x44>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a2:	bf00      	nop
 80029a4:	f7ff ffde 	bl	8002964 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d8f7      	bhi.n	80029a4 <HAL_Delay+0x28>
  {
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000008 	.word	0x20000008

080029c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3360      	adds	r3, #96	; 0x60
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <LL_ADC_SetOffset+0x44>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a64:	bf00      	nop
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	03fff000 	.word	0x03fff000

08002a74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3360      	adds	r3, #96	; 0x60
 8002a82:	461a      	mov	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3360      	adds	r3, #96	; 0x60
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3330      	adds	r3, #48	; 0x30
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	4413      	add	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	211f      	movs	r1, #31
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	401a      	ands	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	f003 011f 	and.w	r1, r3, #31
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b42:	431a      	orrs	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b48:	bf00      	nop
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b087      	sub	sp, #28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0e5b      	lsrs	r3, r3, #25
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	0d1b      	lsrs	r3, r3, #20
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2107      	movs	r1, #7
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	0d1b      	lsrs	r3, r3, #20
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	43db      	mvns	r3, r3
 8002bea:	401a      	ands	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0318 	and.w	r3, r3, #24
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bf4:	40d9      	lsrs	r1, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	0007ffff 	.word	0x0007ffff

08002c18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6093      	str	r3, [r2, #8]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf0:	f043 0202 	orr.w	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <LL_ADC_IsEnabled+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_ADC_IsEnabled+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_IsDisableOngoing+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_IsDisableOngoing+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d64:	f043 0204 	orr.w	r2, r3, #4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d8c:	f043 0210 	orr.w	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d101      	bne.n	8002db8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d101      	bne.n	8002e06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e12c      	b.n	8003088 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fa4f 	bl	80022e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fef1 	bl	8002c3c <LL_ADC_IsDeepPowerDownEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fed7 	bl	8002c18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff0c 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fef0 	bl	8002c64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e84:	4b82      	ldr	r3, [pc, #520]	; (8003090 <HAL_ADC_Init+0x27c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	4a82      	ldr	r2, [pc, #520]	; (8003094 <HAL_ADC_Init+0x280>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff feee 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff62 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 80c5 	bne.w	8003076 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 80c1 	bne.w	8003076 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002efc:	f043 0202 	orr.w	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fefb 	bl	8002d04 <LL_ADC_IsEnabled>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f14:	4860      	ldr	r0, [pc, #384]	; (8003098 <HAL_ADC_Init+0x284>)
 8002f16:	f7ff fef5 	bl	8002d04 <LL_ADC_IsEnabled>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	485d      	ldr	r0, [pc, #372]	; (800309c <HAL_ADC_Init+0x288>)
 8002f28:	f7ff fd4c 	bl	80029c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7e5b      	ldrb	r3, [r3, #25]
 8002f30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d106      	bne.n	8002f68 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	045b      	lsls	r3, r3, #17
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <HAL_ADC_Init+0x28c>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff feff 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 8002fa2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff20 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8002fae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d13d      	bne.n	8003032 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13a      	bne.n	8003032 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fc0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fc8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fd8:	f023 0302 	bic.w	r3, r3, #2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d118      	bne.n	8003022 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003012:	430a      	orrs	r2, r1
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	e007      	b.n	8003032 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d10c      	bne.n	8003054 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f023 010f 	bic.w	r1, r3, #15
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
 8003052:	e007      	b.n	8003064 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 020f 	bic.w	r2, r2, #15
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f023 0303 	bic.w	r3, r3, #3
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
 8003074:	e007      	b.n	8003086 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003086:	7ffb      	ldrb	r3, [r7, #31]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000000 	.word	0x20000000
 8003094:	053e2d63 	.word	0x053e2d63
 8003098:	50040000 	.word	0x50040000
 800309c:	50040300 	.word	0x50040300
 80030a0:	fff0c007 	.word	0xfff0c007

080030a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fe75 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d14f      	bne.n	800315c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Start+0x26>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e04b      	b.n	8003162 <HAL_ADC_Start+0xbe>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 ff86 	bl	8003fe4 <ADC_Enable>
 80030d8:	4603      	mov	r3, r0
 80030da:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d137      	bne.n	8003152 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d106      	bne.n	8003112 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	f023 0206 	bic.w	r2, r3, #6
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	659a      	str	r2, [r3, #88]	; 0x58
 8003110:	e002      	b.n	8003118 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	221c      	movs	r2, #28
 800311e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800313e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fe00 	bl	8002d50 <LL_ADC_REG_StartConversion>
 8003150:	e006      	b.n	8003160 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800315a:	e001      	b.n	8003160 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800315c:	2302      	movs	r3, #2
 800315e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_ADC_Stop+0x16>
 800317c:	2302      	movs	r3, #2
 800317e:	e023      	b.n	80031c8 <HAL_ADC_Stop+0x5e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003188:	2103      	movs	r1, #3
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fe6e 	bl	8003e6c <ADC_ConversionStop>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d111      	bne.n	80031be <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 ffa8 	bl	80040f0 <ADC_Disable>
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	f043 0201 	orr.w	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d102      	bne.n	80031e8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031e2:	2308      	movs	r3, #8
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e010      	b.n	800320a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003206:	2304      	movs	r3, #4
 8003208:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800320a:	f7ff fbab 	bl	8002964 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003210:	e021      	b.n	8003256 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d01d      	beq.n	8003256 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800321a:	f7ff fba3 	bl	8002964 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <HAL_ADC_PollForConversion+0x60>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d112      	bne.n	8003256 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e047      	b.n	80032e6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0d6      	beq.n	8003212 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fc2e 	bl	8002ad6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01c      	beq.n	80032ba <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7e5b      	ldrb	r3, [r3, #25]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d118      	bne.n	80032ba <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b08      	cmp	r3, #8
 8003294:	d111      	bne.n	80032ba <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d104      	bne.n	80032d2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2208      	movs	r2, #8
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e008      	b.n	80032e4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	220c      	movs	r2, #12
 80032e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <HAL_ADC_IRQHandler+0x56>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 ff54 	bl	80041fe <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <HAL_ADC_IRQHandler+0x6a>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05e      	beq.n	800343a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d059      	beq.n	800343a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fb97 	bl	8002ad6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03e      	beq.n	800342c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d135      	bne.n	800342c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d12e      	bne.n	800342c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fce4 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11a      	bne.n	8003414 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020c 	bic.w	r2, r2, #12
 80033ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d112      	bne.n	800342c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
 8003412:	e00b      	b.n	800342c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003418:	f043 0210 	orr.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f91f 	bl	8003670 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	220c      	movs	r2, #12
 8003438:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_ADC_IRQHandler+0x146>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003454:	2b00      	cmp	r3, #0
 8003456:	d072      	beq.n	800353e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d06d      	beq.n	800353e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fb68 	bl	8002b54 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003484:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fb23 	bl	8002ad6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003490:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d047      	beq.n	8003530 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_ADC_IRQHandler+0x1b2>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03f      	beq.n	8003530 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d13a      	bne.n	8003530 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d133      	bne.n	8003530 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d12e      	bne.n	8003530 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fc89 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11a      	bne.n	8003518 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034f0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d112      	bne.n	8003530 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350e:	f043 0201 	orr.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
 8003516:	e00b      	b.n	8003530 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f043 0210 	orr.w	r2, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fe3c 	bl	80041ae <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2260      	movs	r2, #96	; 0x60
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d011      	beq.n	800356c <HAL_ADC_IRQHandler+0x264>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f890 	bl	8003684 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_ADC_IRQHandler+0x294>
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fe22 	bl	80041d6 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d012      	beq.n	80035cc <HAL_ADC_IRQHandler+0x2c4>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fe14 	bl	80041ea <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02a      	beq.n	800362c <HAL_ADC_IRQHandler+0x324>
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d025      	beq.n	800362c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80035e8:	2301      	movs	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	e008      	b.n	8003600 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80035fc:	2301      	movs	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10e      	bne.n	8003624 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f83a 	bl	8003698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2210      	movs	r2, #16
 800362a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d018      	beq.n	8003668 <HAL_ADC_IRQHandler+0x360>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f043 0208 	orr.w	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003660:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fdad 	bl	80041c2 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003668:	bf00      	nop
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b0b6      	sub	sp, #216	; 0xd8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x22>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e3b9      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x796>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fb60 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 839e 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d824      	bhi.n	800373a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	3b02      	subs	r3, #2
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d81b      	bhi.n	8003732 <HAL_ADC_ConfigChannel+0x86>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <HAL_ADC_ConfigChannel+0x54>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003711 	.word	0x08003711
 8003704:	08003719 	.word	0x08003719
 8003708:	08003721 	.word	0x08003721
 800370c:	08003729 	.word	0x08003729
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	220c      	movs	r2, #12
 8003714:	605a      	str	r2, [r3, #4]
          break;
 8003716:	e011      	b.n	800373c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2212      	movs	r2, #18
 800371c:	605a      	str	r2, [r3, #4]
          break;
 800371e:	e00d      	b.n	800373c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2218      	movs	r2, #24
 8003724:	605a      	str	r2, [r3, #4]
          break;
 8003726:	e009      	b.n	800373c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800372e:	605a      	str	r2, [r3, #4]
          break;
 8003730:	e004      	b.n	800373c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2206      	movs	r2, #6
 8003736:	605a      	str	r2, [r3, #4]
          break;
 8003738:	e000      	b.n	800373c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800373a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f7ff f9d7 	bl	8002afc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fb24 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 8003758:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fb44 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8003766:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800376a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 81a6 	bne.w	8003ac0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 81a1 	bne.w	8003ac0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	461a      	mov	r2, r3
 800378c:	f7ff f9f5 	bl	8002b7a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	08db      	lsrs	r3, r3, #3
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00a      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6919      	ldr	r1, [r3, #16]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037c2:	f7ff f933 	bl	8002a2c <LL_ADC_SetOffset>
 80037c6:	e17b      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff f950 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x148>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f945 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	f003 021f 	and.w	r2, r3, #31
 80037f2:	e01e      	b.n	8003832 <HAL_ADC_ConfigChannel+0x186>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f93a 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800381a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e004      	b.n	8003830 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_ADC_ConfigChannel+0x19e>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	e018      	b.n	800387c <HAL_ADC_ConfigChannel+0x1d0>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800385e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e004      	b.n	800387c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f909 	bl	8002aa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f8ed 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x20e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f8e2 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	e01e      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x24c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f8d7 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80038d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80038e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e004      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80038ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x264>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	e018      	b.n	8003942 <HAL_ADC_ConfigChannel+0x296>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800392c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e004      	b.n	8003942 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003942:	429a      	cmp	r2, r3
 8003944:	d106      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff f8a6 	bl	8002aa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2102      	movs	r1, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f88a 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x2d4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f87f 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003976:	4603      	mov	r3, r0
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	e01e      	b.n	80039be <HAL_ADC_ConfigChannel+0x312>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f874 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 800398c:	4603      	mov	r3, r0
 800398e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800399e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80039a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e004      	b.n	80039bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80039b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x32a>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0e9b      	lsrs	r3, r3, #26
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	e016      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x358>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80039e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80039ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80039f6:	2320      	movs	r3, #32
 80039f8:	e004      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80039fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d106      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff f845 	bl	8002aa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff f829 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x396>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2103      	movs	r1, #3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f81e 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	0e9b      	lsrs	r3, r3, #26
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	e017      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x3c6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2103      	movs	r1, #3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f813 	bl	8002a74 <LL_ADC_GetOffsetChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x3de>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0e9b      	lsrs	r3, r3, #26
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	e011      	b.n	8003aae <HAL_ADC_ConfigChannel+0x402>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	e003      	b.n	8003aae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d106      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2103      	movs	r1, #3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fff0 	bl	8002aa0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f91d 	bl	8002d04 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 813f 	bne.w	8003d50 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7ff f876 	bl	8002bd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a8e      	ldr	r2, [pc, #568]	; (8003d24 <HAL_ADC_ConfigChannel+0x678>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f040 8130 	bne.w	8003d50 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x46c>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e9b      	lsrs	r3, r3, #26
 8003b06:	3301      	adds	r3, #1
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e019      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x4a0>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003b30:	2320      	movs	r3, #32
 8003b32:	e003      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2b09      	cmp	r3, #9
 8003b44:	bf94      	ite	ls
 8003b46:	2301      	movls	r3, #1
 8003b48:	2300      	movhi	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d079      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x4c0>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	3301      	adds	r3, #1
 8003b64:	069b      	lsls	r3, r3, #26
 8003b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b6a:	e015      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x4ec>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e003      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	069b      	lsls	r3, r3, #26
 8003b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x50c>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	3301      	adds	r3, #1
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	e017      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x53c>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e003      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	ea42 0103 	orr.w	r1, r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x562>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f003 021f 	and.w	r2, r3, #31
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	051b      	lsls	r3, r3, #20
 8003c0c:	e018      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x594>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003c26:	2320      	movs	r3, #32
 8003c28:	e003      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c40:	430b      	orrs	r3, r1
 8003c42:	e080      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x5b4>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	0e9b      	lsrs	r3, r3, #26
 8003c56:	3301      	adds	r3, #1
 8003c58:	069b      	lsls	r3, r3, #26
 8003c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c5e:	e015      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x5e0>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e003      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	069b      	lsls	r3, r3, #26
 8003c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x600>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	e017      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x630>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e003      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	ea42 0103 	orr.w	r1, r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x65c>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	0e9b      	lsrs	r3, r3, #26
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b1e      	subs	r3, #30
 8003d00:	051b      	lsls	r3, r3, #20
 8003d02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d06:	e01d      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x698>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	613b      	str	r3, [r7, #16]
  return result;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e005      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x684>
 8003d24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	f003 021f 	and.w	r2, r3, #31
 8003d36:	4613      	mov	r3, r2
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3b1e      	subs	r3, #30
 8003d3e:	051b      	lsls	r3, r3, #20
 8003d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d44:	430b      	orrs	r3, r1
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6892      	ldr	r2, [r2, #8]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fe ff15 	bl	8002b7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_ADC_ConfigChannel+0x7a0>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d06c      	beq.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d5c:	483c      	ldr	r0, [pc, #240]	; (8003e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d5e:	f7fe fe57 	bl	8002a10 <LL_ADC_GetCommonPathInternalCh>
 8003d62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_ADC_ConfigChannel+0x7a8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d127      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d121      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <HAL_ADC_ConfigChannel+0x7ac>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d157      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d8e:	4619      	mov	r1, r3
 8003d90:	482f      	ldr	r0, [pc, #188]	; (8003e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d92:	f7fe fe2a 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_ADC_ConfigChannel+0x7b0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <HAL_ADC_ConfigChannel+0x7b4>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003db0:	e002      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f9      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dbe:	e03a      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a27      	ldr	r2, [pc, #156]	; (8003e64 <HAL_ADC_ConfigChannel+0x7b8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d113      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x746>
 8003dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10d      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <HAL_ADC_ConfigChannel+0x7ac>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d12a      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de8:	4619      	mov	r1, r3
 8003dea:	4819      	ldr	r0, [pc, #100]	; (8003e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8003dec:	f7fe fdfd 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003df0:	e021      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <HAL_ADC_ConfigChannel+0x7bc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d11c      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d111      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	480c      	ldr	r0, [pc, #48]	; (8003e50 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e1e:	f7fe fde4 	bl	80029ea <LL_ADC_SetCommonPathInternalCh>
 8003e22:	e008      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	37d8      	adds	r7, #216	; 0xd8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	80080000 	.word	0x80080000
 8003e50:	50040300 	.word	0x50040300
 8003e54:	c7520000 	.word	0xc7520000
 8003e58:	50040000 	.word	0x50040000
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	053e2d63 	.word	0x053e2d63
 8003e64:	cb840000 	.word	0xcb840000
 8003e68:	80000001 	.word	0x80000001

08003e6c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe ff8c 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 8003e88:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe ffad 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8003e94:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8098 	beq.w	8003fd4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02a      	beq.n	8003f08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7e5b      	ldrb	r3, [r3, #25]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d126      	bne.n	8003f08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7e1b      	ldrb	r3, [r3, #24]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d122      	bne.n	8003f08 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ec6:	e014      	b.n	8003ef2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4a45      	ldr	r2, [pc, #276]	; (8003fe0 <ADC_ConversionStop+0x174>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d90d      	bls.n	8003eec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f043 0210 	orr.w	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e074      	b.n	8003fd6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d1e3      	bne.n	8003ec8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2240      	movs	r2, #64	; 0x40
 8003f06:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d014      	beq.n	8003f38 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe ff44 	bl	8002da0 <LL_ADC_REG_IsConversionOngoing>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe ff01 	bl	8002d2a <LL_ADC_IsDisableOngoing>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe ff20 	bl	8002d78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d014      	beq.n	8003f68 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe ff53 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fee9 	bl	8002d2a <LL_ADC_IsDisableOngoing>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe ff2f 	bl	8002dc6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d005      	beq.n	8003f7a <ADC_ConversionStop+0x10e>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d105      	bne.n	8003f80 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003f74:	230c      	movs	r3, #12
 8003f76:	617b      	str	r3, [r7, #20]
        break;
 8003f78:	e005      	b.n	8003f86 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	617b      	str	r3, [r7, #20]
        break;
 8003f7e:	e002      	b.n	8003f86 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f80:	2304      	movs	r3, #4
 8003f82:	617b      	str	r3, [r7, #20]
        break;
 8003f84:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f86:	f7fe fced 	bl	8002964 <HAL_GetTick>
 8003f8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f8c:	e01b      	b.n	8003fc6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f8e:	f7fe fce9 	bl	8002964 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d914      	bls.n	8003fc6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0210 	orr.w	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	f043 0201 	orr.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e007      	b.n	8003fd6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1dc      	bne.n	8003f8e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	a33fffff 	.word	0xa33fffff

08003fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fe85 	bl	8002d04 <LL_ADC_IsEnabled>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d169      	bne.n	80040d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <ADC_Enable+0xfc>)
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f043 0210 	orr.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e055      	b.n	80040d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fe fe40 	bl	8002cb4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004034:	482b      	ldr	r0, [pc, #172]	; (80040e4 <ADC_Enable+0x100>)
 8004036:	f7fe fceb 	bl	8002a10 <LL_ADC_GetCommonPathInternalCh>
 800403a:	4603      	mov	r3, r0
 800403c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d013      	beq.n	800406c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004044:	4b28      	ldr	r3, [pc, #160]	; (80040e8 <ADC_Enable+0x104>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	4a28      	ldr	r2, [pc, #160]	; (80040ec <ADC_Enable+0x108>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	4613      	mov	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800405e:	e002      	b.n	8004066 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	3b01      	subs	r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f9      	bne.n	8004060 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800406c:	f7fe fc7a 	bl	8002964 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004072:	e028      	b.n	80040c6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fe43 	bl	8002d04 <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fe13 	bl	8002cb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800408e:	f7fe fc69 	bl	8002964 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d914      	bls.n	80040c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d00d      	beq.n	80040c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f043 0210 	orr.w	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	f043 0201 	orr.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e007      	b.n	80040d6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d1cf      	bne.n	8004074 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	8000003f 	.word	0x8000003f
 80040e4:	50040300 	.word	0x50040300
 80040e8:	20000000 	.word	0x20000000
 80040ec:	053e2d63 	.word	0x053e2d63

080040f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fe14 	bl	8002d2a <LL_ADC_IsDisableOngoing>
 8004102:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fdfb 	bl	8002d04 <LL_ADC_IsEnabled>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d047      	beq.n	80041a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d144      	bne.n	80041a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030d 	and.w	r3, r3, #13
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10c      	bne.n	8004142 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fdd5 	bl	8002cdc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2203      	movs	r2, #3
 8004138:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800413a:	f7fe fc13 	bl	8002964 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004140:	e029      	b.n	8004196 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e023      	b.n	80041a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800415e:	f7fe fc01 	bl	8002964 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d914      	bls.n	8004196 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0210 	orr.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e007      	b.n	80041a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1dc      	bne.n	800415e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800423c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__NVIC_GetPriorityGrouping+0x18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0307 	and.w	r3, r3, #7
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db0b      	blt.n	80042a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4907      	ldr	r1, [pc, #28]	; (80042b0 <__NVIC_EnableIRQ+0x38>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2001      	movs	r0, #1
 800429a:	fa00 f202 	lsl.w	r2, r0, r2
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db0a      	blt.n	80042de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	490c      	ldr	r1, [pc, #48]	; (8004300 <__NVIC_SetPriority+0x4c>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	0112      	lsls	r2, r2, #4
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042dc:	e00a      	b.n	80042f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4908      	ldr	r1, [pc, #32]	; (8004304 <__NVIC_SetPriority+0x50>)
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	3b04      	subs	r3, #4
 80042ec:	0112      	lsls	r2, r2, #4
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	440b      	add	r3, r1
 80042f2:	761a      	strb	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	bf28      	it	cs
 8004326:	2304      	movcs	r3, #4
 8004328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3304      	adds	r3, #4
 800432e:	2b06      	cmp	r3, #6
 8004330:	d902      	bls.n	8004338 <NVIC_EncodePriority+0x30>
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3b03      	subs	r3, #3
 8004336:	e000      	b.n	800433a <NVIC_EncodePriority+0x32>
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	f04f 32ff 	mov.w	r2, #4294967295
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43da      	mvns	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	401a      	ands	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004350:	f04f 31ff 	mov.w	r1, #4294967295
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43d9      	mvns	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004360:	4313      	orrs	r3, r2
         );
}
 8004362:	4618      	mov	r0, r3
 8004364:	3724      	adds	r7, #36	; 0x24
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004380:	d301      	bcc.n	8004386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004382:	2301      	movs	r3, #1
 8004384:	e00f      	b.n	80043a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <SysTick_Config+0x40>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438e:	210f      	movs	r1, #15
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f7ff ff8e 	bl	80042b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <SysTick_Config+0x40>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <SysTick_Config+0x40>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	e000e010 	.word	0xe000e010

080043b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff29 	bl	8004214 <__NVIC_SetPriorityGrouping>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043dc:	f7ff ff3e 	bl	800425c <__NVIC_GetPriorityGrouping>
 80043e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff ff8e 	bl	8004308 <NVIC_EncodePriority>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff5d 	bl	80042b4 <__NVIC_SetPriority>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff31 	bl	8004278 <__NVIC_EnableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ffa2 	bl	8004370 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d008      	beq.n	8004460 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2204      	movs	r2, #4
 8004452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e022      	b.n	80044a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 020e 	bic.w	r2, r2, #14
 800446e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f003 021c 	and.w	r2, r3, #28
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f202 	lsl.w	r2, r1, r2
 8004492:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d005      	beq.n	80044d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2204      	movs	r2, #4
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	e029      	b.n	800452a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 020e 	bic.w	r2, r2, #14
 80044e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f003 021c 	and.w	r2, r3, #28
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2101      	movs	r1, #1
 8004504:	fa01 f202 	lsl.w	r2, r1, r2
 8004508:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	4798      	blx	r3
    }
  }
  return status;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004542:	b2db      	uxtb	r3, r3
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455e:	e148      	b.n	80047f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2101      	movs	r1, #1
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	4013      	ands	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 813a 	beq.w	80047ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d005      	beq.n	8004590 <HAL_GPIO_Init+0x40>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d130      	bne.n	80045f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045c6:	2201      	movs	r2, #1
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0201 	and.w	r2, r3, #1
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d017      	beq.n	800462e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	2203      	movs	r2, #3
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4013      	ands	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d123      	bne.n	8004682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	08da      	lsrs	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3208      	adds	r2, #8
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8094 	beq.w	80047ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c4:	4b52      	ldr	r3, [pc, #328]	; (8004810 <HAL_GPIO_Init+0x2c0>)
 80046c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c8:	4a51      	ldr	r2, [pc, #324]	; (8004810 <HAL_GPIO_Init+0x2c0>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6613      	str	r3, [r2, #96]	; 0x60
 80046d0:	4b4f      	ldr	r3, [pc, #316]	; (8004810 <HAL_GPIO_Init+0x2c0>)
 80046d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046dc:	4a4d      	ldr	r2, [pc, #308]	; (8004814 <HAL_GPIO_Init+0x2c4>)
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	3302      	adds	r3, #2
 80046e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	220f      	movs	r2, #15
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004706:	d00d      	beq.n	8004724 <HAL_GPIO_Init+0x1d4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a43      	ldr	r2, [pc, #268]	; (8004818 <HAL_GPIO_Init+0x2c8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <HAL_GPIO_Init+0x1d0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a42      	ldr	r2, [pc, #264]	; (800481c <HAL_GPIO_Init+0x2cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_GPIO_Init+0x1cc>
 8004718:	2302      	movs	r3, #2
 800471a:	e004      	b.n	8004726 <HAL_GPIO_Init+0x1d6>
 800471c:	2307      	movs	r3, #7
 800471e:	e002      	b.n	8004726 <HAL_GPIO_Init+0x1d6>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_GPIO_Init+0x1d6>
 8004724:	2300      	movs	r3, #0
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	f002 0203 	and.w	r2, r2, #3
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	4093      	lsls	r3, r2
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004736:	4937      	ldr	r1, [pc, #220]	; (8004814 <HAL_GPIO_Init+0x2c4>)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	3302      	adds	r3, #2
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004744:	4b36      	ldr	r3, [pc, #216]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	43db      	mvns	r3, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004768:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800476e:	4b2c      	ldr	r3, [pc, #176]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43db      	mvns	r3, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004792:	4a23      	ldr	r2, [pc, #140]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004798:	4b21      	ldr	r3, [pc, #132]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047bc:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047e6:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <HAL_GPIO_Init+0x2d0>)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f aeaf 	bne.w	8004560 <HAL_GPIO_Init+0x10>
  }
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40021000 	.word	0x40021000
 8004814:	40010000 	.word	0x40010000
 8004818:	48000400 	.word	0x48000400
 800481c:	48000800 	.word	0x48000800
 8004820:	40010400 	.word	0x40010400

08004824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	887b      	ldrh	r3, [r7, #2]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	e001      	b.n	8004846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004842:	2300      	movs	r3, #0
 8004844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
 8004860:	4613      	mov	r3, r2
 8004862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004864:	787b      	ldrb	r3, [r7, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004870:	e002      	b.n	8004878 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e081      	b.n	800499a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fd fd84 	bl	80023b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	; 0x24
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	e006      	b.n	800490c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800490a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d104      	bne.n	800491e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800491c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800492c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004930:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004940:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69d9      	ldr	r1, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1a      	ldr	r2, [r3, #32]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	817b      	strh	r3, [r7, #10]
 80049b6:	460b      	mov	r3, r1
 80049b8:	813b      	strh	r3, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	f040 80f9 	bne.w	8004bbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x34>
 80049d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0ed      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_I2C_Mem_Write+0x4e>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e0e6      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049fa:	f7fd ffb3 	bl	8002964 <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2319      	movs	r3, #25
 8004a06:	2201      	movs	r2, #1
 8004a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 ffd8 	bl	80059c2 <I2C_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0d1      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2221      	movs	r2, #33	; 0x21
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2240      	movs	r2, #64	; 0x40
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a44:	88f8      	ldrh	r0, [r7, #6]
 8004a46:	893a      	ldrh	r2, [r7, #8]
 8004a48:	8979      	ldrh	r1, [r7, #10]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4603      	mov	r3, r0
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fb91 	bl	800517c <I2C_RequestMemoryWrite>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0a9      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2bff      	cmp	r3, #255	; 0xff
 8004a74:	d90e      	bls.n	8004a94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	22ff      	movs	r2, #255	; 0xff
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	8979      	ldrh	r1, [r7, #10]
 8004a84:	2300      	movs	r3, #0
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f001 f941 	bl	8005d14 <I2C_TransferConfig>
 8004a92:	e00f      	b.n	8004ab4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	8979      	ldrh	r1, [r7, #10]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f001 f930 	bl	8005d14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 ffc2 	bl	8005a42 <I2C_WaitOnTXISFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e07b      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d034      	beq.n	8004b6c <HAL_I2C_Mem_Write+0x1c8>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d130      	bne.n	8004b6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 ff54 	bl	80059c2 <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e04d      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2bff      	cmp	r3, #255	; 0xff
 8004b2c:	d90e      	bls.n	8004b4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	22ff      	movs	r2, #255	; 0xff
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	8979      	ldrh	r1, [r7, #10]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f001 f8e5 	bl	8005d14 <I2C_TransferConfig>
 8004b4a:	e00f      	b.n	8004b6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	8979      	ldrh	r1, [r7, #10]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f001 f8d4 	bl	8005d14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d19e      	bne.n	8004ab4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 ffa1 	bl	8005ac2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e01a      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <HAL_I2C_Mem_Write+0x224>)
 8004b9e:	400b      	ands	r3, r1
 8004ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	fe00e800 	.word	0xfe00e800

08004bcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	817b      	strh	r3, [r7, #10]
 8004bde:	460b      	mov	r3, r1
 8004be0:	813b      	strh	r3, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	f040 80fd 	bne.w	8004dee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_I2C_Mem_Read+0x34>
 8004bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0f1      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x4e>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ea      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c22:	f7fd fe9f 	bl	8002964 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	2319      	movs	r3, #25
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fec4 	bl	80059c2 <I2C_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0d5      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2222      	movs	r2, #34	; 0x22
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2240      	movs	r2, #64	; 0x40
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a3a      	ldr	r2, [r7, #32]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c6c:	88f8      	ldrh	r0, [r7, #6]
 8004c6e:	893a      	ldrh	r2, [r7, #8]
 8004c70:	8979      	ldrh	r1, [r7, #10]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fad1 	bl	8005224 <I2C_RequestMemoryRead>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0ad      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2bff      	cmp	r3, #255	; 0xff
 8004c9c:	d90e      	bls.n	8004cbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	8979      	ldrh	r1, [r7, #10]
 8004cac:	4b52      	ldr	r3, [pc, #328]	; (8004df8 <HAL_I2C_Mem_Read+0x22c>)
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f001 f82d 	bl	8005d14 <I2C_TransferConfig>
 8004cba:	e00f      	b.n	8004cdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	8979      	ldrh	r1, [r7, #10]
 8004cce:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <HAL_I2C_Mem_Read+0x22c>)
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f001 f81c 	bl	8005d14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fe6b 	bl	80059c2 <I2C_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e07c      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d034      	beq.n	8004d9c <HAL_I2C_Mem_Read+0x1d0>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d130      	bne.n	8004d9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fe3c 	bl	80059c2 <I2C_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e04d      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2bff      	cmp	r3, #255	; 0xff
 8004d5c:	d90e      	bls.n	8004d7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	8979      	ldrh	r1, [r7, #10]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 ffcd 	bl	8005d14 <I2C_TransferConfig>
 8004d7a:	e00f      	b.n	8004d9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	8979      	ldrh	r1, [r7, #10]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 ffbc 	bl	8005d14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d19a      	bne.n	8004cdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fe89 	bl	8005ac2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e01a      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_I2C_Mem_Read+0x230>)
 8004dce:	400b      	ands	r3, r1
 8004dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004dee:	2302      	movs	r3, #2
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	80002400 	.word	0x80002400
 8004dfc:	fe00e800 	.word	0xfe00e800

08004e00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	68f9      	ldr	r1, [r7, #12]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d010      	beq.n	8004e7a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	09db      	lsrs	r3, r3, #7
 8004e5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	f043 0201 	orr.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e78:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a9b      	lsrs	r3, r3, #10
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	09db      	lsrs	r3, r3, #7
 8004e8a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f043 0208 	orr.w	r2, r3, #8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ea6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d010      	beq.n	8004ed6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	09db      	lsrs	r3, r3, #7
 8004eb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	f043 0202 	orr.w	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 030b 	and.w	r3, r3, #11
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fc31 	bl	8005750 <I2C_ITError>
  }
}
 8004eee:	bf00      	nop
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	70fb      	strb	r3, [r7, #3]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <I2C_Slave_ISR_IT+0x24>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e0ec      	b.n	8005174 <I2C_Slave_ISR_IT+0x1fe>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004fba:	6939      	ldr	r1, [r7, #16]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fa67 	bl	8005490 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d04d      	beq.n	800506a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d047      	beq.n	800506a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d128      	bne.n	8005036 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b28      	cmp	r3, #40	; 0x28
 8004fee:	d108      	bne.n	8005002 <I2C_Slave_ISR_IT+0x8c>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff6:	d104      	bne.n	8005002 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ff8:	6939      	ldr	r1, [r7, #16]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fb52 	bl	80056a4 <I2C_ITListenCplt>
 8005000:	e032      	b.n	8005068 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b29      	cmp	r3, #41	; 0x29
 800500c:	d10e      	bne.n	800502c <I2C_Slave_ISR_IT+0xb6>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005014:	d00a      	beq.n	800502c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2210      	movs	r2, #16
 800501c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fc8d 	bl	800593e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f9d5 	bl	80053d4 <I2C_ITSlaveSeqCplt>
 800502a:	e01d      	b.n	8005068 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2210      	movs	r2, #16
 8005032:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005034:	e096      	b.n	8005164 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2210      	movs	r2, #16
 800503c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	f043 0204 	orr.w	r2, r3, #4
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <I2C_Slave_ISR_IT+0xe4>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005056:	f040 8085 	bne.w	8005164 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	4619      	mov	r1, r3
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fb75 	bl	8005750 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005066:	e07d      	b.n	8005164 <I2C_Slave_ISR_IT+0x1ee>
 8005068:	e07c      	b.n	8005164 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d030      	beq.n	80050d8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800507e:	2b00      	cmp	r3, #0
 8005080:	d02a      	beq.n	80050d8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d018      	beq.n	80050be <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d14f      	bne.n	8005168 <I2C_Slave_ISR_IT+0x1f2>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ce:	d04b      	beq.n	8005168 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f97f 	bl	80053d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050d6:	e047      	b.n	8005168 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	08db      	lsrs	r3, r3, #3
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	08db      	lsrs	r3, r3, #3
 80050e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050f0:	6939      	ldr	r1, [r7, #16]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f8ea 	bl	80052cc <I2C_ITAddrCplt>
 80050f8:	e037      	b.n	800516a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d031      	beq.n	800516a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800510e:	2b00      	cmp	r3, #0
 8005110:	d02b      	beq.n	800516a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d018      	beq.n	800514e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
 800514c:	e00d      	b.n	800516a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005154:	d002      	beq.n	800515c <I2C_Slave_ISR_IT+0x1e6>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f939 	bl	80053d4 <I2C_ITSlaveSeqCplt>
 8005162:	e002      	b.n	800516a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005164:	bf00      	nop
 8005166:	e000      	b.n	800516a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005168:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	4608      	mov	r0, r1
 8005186:	4611      	mov	r1, r2
 8005188:	461a      	mov	r2, r3
 800518a:	4603      	mov	r3, r0
 800518c:	817b      	strh	r3, [r7, #10]
 800518e:	460b      	mov	r3, r1
 8005190:	813b      	strh	r3, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	8979      	ldrh	r1, [r7, #10]
 800519c:	4b20      	ldr	r3, [pc, #128]	; (8005220 <I2C_RequestMemoryWrite+0xa4>)
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fdb5 	bl	8005d14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	69b9      	ldr	r1, [r7, #24]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fc47 	bl	8005a42 <I2C_WaitOnTXISFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e02c      	b.n	8005218 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051c4:	893b      	ldrh	r3, [r7, #8]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28
 80051ce:	e015      	b.n	80051fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fc2d 	bl	8005a42 <I2C_WaitOnTXISFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e012      	b.n	8005218 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051f2:	893b      	ldrh	r3, [r7, #8]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2200      	movs	r2, #0
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fbdb 	bl	80059c2 <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	80002000 	.word	0x80002000

08005224 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	4608      	mov	r0, r1
 800522e:	4611      	mov	r1, r2
 8005230:	461a      	mov	r2, r3
 8005232:	4603      	mov	r3, r0
 8005234:	817b      	strh	r3, [r7, #10]
 8005236:	460b      	mov	r3, r1
 8005238:	813b      	strh	r3, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	8979      	ldrh	r1, [r7, #10]
 8005244:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <I2C_RequestMemoryRead+0xa4>)
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2300      	movs	r3, #0
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fd62 	bl	8005d14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fbf4 	bl	8005a42 <I2C_WaitOnTXISFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e02c      	b.n	80052be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d105      	bne.n	8005276 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800526a:	893b      	ldrh	r3, [r7, #8]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
 8005274:	e015      	b.n	80052a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	b29b      	uxth	r3, r3
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	69b9      	ldr	r1, [r7, #24]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fbda 	bl	8005a42 <I2C_WaitOnTXISFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e012      	b.n	80052be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005298:	893b      	ldrh	r3, [r7, #8]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2140      	movs	r1, #64	; 0x40
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fb88 	bl	80059c2 <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	80002000 	.word	0x80002000

080052cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052e2:	2b28      	cmp	r3, #40	; 0x28
 80052e4:	d16a      	bne.n	80053bc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005304:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005312:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005320:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d138      	bne.n	800539c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800532a:	897b      	ldrh	r3, [r7, #10]
 800532c:	09db      	lsrs	r3, r3, #7
 800532e:	b29a      	uxth	r2, r3
 8005330:	89bb      	ldrh	r3, [r7, #12]
 8005332:	4053      	eors	r3, r2
 8005334:	b29b      	uxth	r3, r3
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11c      	bne.n	8005378 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800533e:	897b      	ldrh	r3, [r7, #10]
 8005340:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	2b02      	cmp	r3, #2
 8005352:	d13b      	bne.n	80053cc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2208      	movs	r2, #8
 8005360:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800536a:	89ba      	ldrh	r2, [r7, #12]
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fdd4 	bl	8004f1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005376:	e029      	b.n	80053cc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800537c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fcf9 	bl	8005d78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800538e:	89ba      	ldrh	r2, [r7, #12]
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	4619      	mov	r1, r3
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fdc2 	bl	8004f1e <HAL_I2C_AddrCallback>
}
 800539a:	e017      	b.n	80053cc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800539c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fce9 	bl	8005d78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80053ae:	89ba      	ldrh	r2, [r7, #12]
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fdb2 	bl	8004f1e <HAL_I2C_AddrCallback>
}
 80053ba:	e007      	b.n	80053cc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2208      	movs	r2, #8
 80053c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	0b9b      	lsrs	r3, r3, #14
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e00d      	b.n	8005426 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	0bdb      	lsrs	r3, r3, #15
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005424:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b29      	cmp	r3, #41	; 0x29
 8005430:	d112      	bne.n	8005458 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2228      	movs	r2, #40	; 0x28
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2221      	movs	r2, #33	; 0x21
 800543e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005440:	2101      	movs	r1, #1
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fc98 	bl	8005d78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fd50 	bl	8004ef6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005456:	e017      	b.n	8005488 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b2a      	cmp	r3, #42	; 0x2a
 8005462:	d111      	bne.n	8005488 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2228      	movs	r2, #40	; 0x28
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2222      	movs	r2, #34	; 0x22
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005472:	2102      	movs	r1, #2
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fc7f 	bl	8005d78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fd41 	bl	8004f0a <HAL_I2C_SlaveRxCpltCallback>
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ac:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2220      	movs	r2, #32
 80054b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b21      	cmp	r3, #33	; 0x21
 80054ba:	d002      	beq.n	80054c2 <I2C_ITSlaveCplt+0x32>
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b29      	cmp	r3, #41	; 0x29
 80054c0:	d108      	bne.n	80054d4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80054c2:	f248 0101 	movw	r1, #32769	; 0x8001
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fc56 	bl	8005d78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2221      	movs	r2, #33	; 0x21
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
 80054d2:	e00d      	b.n	80054f0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b22      	cmp	r3, #34	; 0x22
 80054d8:	d002      	beq.n	80054e0 <I2C_ITSlaveCplt+0x50>
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b2a      	cmp	r3, #42	; 0x2a
 80054de:	d107      	bne.n	80054f0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80054e0:	f248 0102 	movw	r1, #32770	; 0x8002
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc47 	bl	8005d78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2222      	movs	r2, #34	; 0x22
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b64      	ldr	r3, [pc, #400]	; (800569c <I2C_ITSlaveCplt+0x20c>)
 800550c:	400b      	ands	r3, r1
 800550e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fa14 	bl	800593e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	0b9b      	lsrs	r3, r3, #14
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005530:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005548:	e018      	b.n	800557c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	0bdb      	lsrs	r3, r3, #15
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005564:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d006      	beq.n	800557c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d020      	beq.n	80055ca <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0304 	bic.w	r3, r3, #4
 800558e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	f043 0204 	orr.w	r2, r3, #4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d010      	beq.n	8005618 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8a7 	bl	8005750 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b28      	cmp	r3, #40	; 0x28
 800560c:	d141      	bne.n	8005692 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f847 	bl	80056a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005616:	e03c      	b.n	8005692 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005620:	d014      	beq.n	800564c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fed6 	bl	80053d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <I2C_ITSlaveCplt+0x210>)
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fc78 	bl	8004f3a <HAL_I2C_ListenCpltCallback>
}
 800564a:	e022      	b.n	8005692 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b22      	cmp	r3, #34	; 0x22
 8005656:	d10e      	bne.n	8005676 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fc4b 	bl	8004f0a <HAL_I2C_SlaveRxCpltCallback>
}
 8005674:	e00d      	b.n	8005692 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fc32 	bl	8004ef6 <HAL_I2C_SlaveTxCpltCallback>
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	fe00e800 	.word	0xfe00e800
 80056a0:	ffff0000 	.word	0xffff0000

080056a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a26      	ldr	r2, [pc, #152]	; (800574c <I2C_ITListenCplt+0xa8>)
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d022      	beq.n	8005722 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d012      	beq.n	8005722 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005722:	f248 0103 	movw	r1, #32771	; 0x8003
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb26 	bl	8005d78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2210      	movs	r2, #16
 8005732:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fbfc 	bl	8004f3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	ffff0000 	.word	0xffff0000

08005750 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a5d      	ldr	r2, [pc, #372]	; (80058e4 <I2C_ITError+0x194>)
 800576e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b28      	cmp	r3, #40	; 0x28
 8005786:	d005      	beq.n	8005794 <I2C_ITError+0x44>
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b29      	cmp	r3, #41	; 0x29
 800578c:	d002      	beq.n	8005794 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b2a      	cmp	r3, #42	; 0x2a
 8005792:	d10b      	bne.n	80057ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005794:	2103      	movs	r1, #3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 faee 	bl	8005d78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2228      	movs	r2, #40	; 0x28
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a50      	ldr	r2, [pc, #320]	; (80058e8 <I2C_ITError+0x198>)
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34
 80057aa:	e011      	b.n	80057d0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057ac:	f248 0103 	movw	r1, #32771	; 0x8003
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fae1 	bl	8005d78 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b60      	cmp	r3, #96	; 0x60
 80057c0:	d003      	beq.n	80057ca <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d039      	beq.n	8005852 <I2C_ITError+0x102>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b11      	cmp	r3, #17
 80057e2:	d002      	beq.n	80057ea <I2C_ITError+0x9a>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b21      	cmp	r3, #33	; 0x21
 80057e8:	d133      	bne.n	8005852 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f8:	d107      	bne.n	800580a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005808:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fe90 	bl	8004534 <HAL_DMA_GetState>
 8005814:	4603      	mov	r3, r0
 8005816:	2b01      	cmp	r3, #1
 8005818:	d017      	beq.n	800584a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581e:	4a33      	ldr	r2, [pc, #204]	; (80058ec <I2C_ITError+0x19c>)
 8005820:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fe3f 	bl	80044b2 <HAL_DMA_Abort_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d04d      	beq.n	80058d6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005844:	4610      	mov	r0, r2
 8005846:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005848:	e045      	b.n	80058d6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f850 	bl	80058f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005850:	e041      	b.n	80058d6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d039      	beq.n	80058ce <I2C_ITError+0x17e>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b12      	cmp	r3, #18
 800585e:	d002      	beq.n	8005866 <I2C_ITError+0x116>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b22      	cmp	r3, #34	; 0x22
 8005864:	d133      	bne.n	80058ce <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	d107      	bne.n	8005886 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005884:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fe52 	bl	8004534 <HAL_DMA_GetState>
 8005890:	4603      	mov	r3, r0
 8005892:	2b01      	cmp	r3, #1
 8005894:	d017      	beq.n	80058c6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	4a14      	ldr	r2, [pc, #80]	; (80058ec <I2C_ITError+0x19c>)
 800589c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fe01 	bl	80044b2 <HAL_DMA_Abort_IT>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d011      	beq.n	80058da <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058c4:	e009      	b.n	80058da <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f812 	bl	80058f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058cc:	e005      	b.n	80058da <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f80e 	bl	80058f0 <I2C_TreatErrorCallback>
  }
}
 80058d4:	e002      	b.n	80058dc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058da:	bf00      	nop
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	ffff0000 	.word	0xffff0000
 80058e8:	08004f77 	.word	0x08004f77
 80058ec:	08005987 	.word	0x08005987

080058f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b60      	cmp	r3, #96	; 0x60
 8005902:	d10e      	bne.n	8005922 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fb21 	bl	8004f62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005920:	e009      	b.n	8005936 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fb0c 	bl	8004f4e <HAL_I2C_ErrorCallback>
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d103      	bne.n	800595c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2200      	movs	r2, #0
 800595a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d007      	beq.n	800597a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	619a      	str	r2, [r3, #24]
  }
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2200      	movs	r2, #0
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b0:	2200      	movs	r2, #0
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff ff9b 	bl	80058f0 <I2C_TreatErrorCallback>
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059d2:	e022      	b.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d01e      	beq.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059dc:	f7fc ffc2 	bl	8002964 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d302      	bcc.n	80059f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d113      	bne.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e00f      	b.n	8005a3a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	bf0c      	ite	eq
 8005a2a:	2301      	moveq	r3, #1
 8005a2c:	2300      	movne	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d0cd      	beq.n	80059d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a4e:	e02c      	b.n	8005aaa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f871 	bl	8005b3c <I2C_IsErrorOccurred>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e02a      	b.n	8005aba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6a:	d01e      	beq.n	8005aaa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6c:	f7fc ff7a 	bl	8002964 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d302      	bcc.n	8005a82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d113      	bne.n	8005aaa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	f043 0220 	orr.w	r2, r3, #32
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e007      	b.n	8005aba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d1cb      	bne.n	8005a50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ace:	e028      	b.n	8005b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f831 	bl	8005b3c <I2C_IsErrorOccurred>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e026      	b.n	8005b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae4:	f7fc ff3e 	bl	8002964 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d302      	bcc.n	8005afa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d113      	bne.n	8005b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f043 0220 	orr.w	r2, r3, #32
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e007      	b.n	8005b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d1cf      	bne.n	8005ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d075      	beq.n	8005c54 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b70:	e056      	b.n	8005c20 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d052      	beq.n	8005c20 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b7a:	f7fc fef3 	bl	8002964 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d302      	bcc.n	8005b90 <I2C_IsErrorOccurred+0x54>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d147      	bne.n	8005c20 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ba2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb2:	d12e      	bne.n	8005c12 <I2C_IsErrorOccurred+0xd6>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bba:	d02a      	beq.n	8005c12 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d027      	beq.n	8005c12 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005bd2:	f7fc fec7 	bl	8002964 <HAL_GetTick>
 8005bd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bd8:	e01b      	b.n	8005c12 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bda:	f7fc fec3 	bl	8002964 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b19      	cmp	r3, #25
 8005be6:	d914      	bls.n	8005c12 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bec:	f043 0220 	orr.w	r2, r3, #32
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d1dc      	bne.n	8005bda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d003      	beq.n	8005c36 <I2C_IsErrorOccurred+0xfa>
 8005c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d09d      	beq.n	8005b72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2220      	movs	r2, #32
 8005c44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00b      	beq.n	8005ca0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	f043 0308 	orr.w	r3, r3, #8
 8005c8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	f043 0302 	orr.w	r3, r3, #2
 8005cb0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d01c      	beq.n	8005d04 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff fe37 	bl	800593e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <I2C_IsErrorOccurred+0x1d4>)
 8005cdc:	400b      	ands	r3, r1
 8005cde:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3728      	adds	r7, #40	; 0x28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	fe00e800 	.word	0xfe00e800

08005d14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	4613      	mov	r3, r2
 8005d24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d2c:	7a7b      	ldrb	r3, [r7, #9]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	0d5b      	lsrs	r3, r3, #21
 8005d4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <I2C_TransferConfig+0x60>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	43db      	mvns	r3, r3
 8005d58:	ea02 0103 	and.w	r1, r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	03ff63ff 	.word	0x03ff63ff

08005d78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00f      	beq.n	8005db2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005d98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005da6:	2b28      	cmp	r3, #40	; 0x28
 8005da8:	d003      	beq.n	8005db2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005db0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005db2:	887b      	ldrh	r3, [r7, #2]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00f      	beq.n	8005ddc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005dc2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dd0:	2b28      	cmp	r3, #40	; 0x28
 8005dd2:	d003      	beq.n	8005ddc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005dda:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ddc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da03      	bge.n	8005dec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005dea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d103      	bne.n	8005dfa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005dfa:	887b      	ldrh	r3, [r7, #2]
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d103      	bne.n	8005e08 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f043 0320 	orr.w	r3, r3, #32
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e08:	887b      	ldrh	r3, [r7, #2]
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d103      	bne.n	8005e16 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	400a      	ands	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d138      	bne.n	8005ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e032      	b.n	8005ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2224      	movs	r2, #36	; 0x24
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d139      	bne.n	8005f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e033      	b.n	8005f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2224      	movs	r2, #36	; 0x24
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f68:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f72:	6013      	str	r3, [r2, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40007000 	.word	0x40007000

08005f84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f88:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <HAL_PWREx_GetVoltageRange+0x18>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40007000 	.word	0x40007000

08005fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fae:	d130      	bne.n	8006012 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fbc:	d038      	beq.n	8006030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fbe:	4b20      	ldr	r3, [pc, #128]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fce:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2232      	movs	r2, #50	; 0x32
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	0c9b      	lsrs	r3, r3, #18
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fe4:	e002      	b.n	8005fec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fec:	4b14      	ldr	r3, [pc, #80]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	d102      	bne.n	8006000 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f2      	bne.n	8005fe6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600c:	d110      	bne.n	8006030 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e00f      	b.n	8006032 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006012:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800601a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601e:	d007      	beq.n	8006030 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006028:	4a05      	ldr	r2, [pc, #20]	; (8006040 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800602a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800602e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40007000 	.word	0x40007000
 8006044:	20000000 	.word	0x20000000
 8006048:	431bde83 	.word	0x431bde83

0800604c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f000 bc02 	b.w	8006864 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006060:	4b96      	ldr	r3, [pc, #600]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 030c 	and.w	r3, r3, #12
 8006068:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800606a:	4b94      	ldr	r3, [pc, #592]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80e4 	beq.w	800624a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <HAL_RCC_OscConfig+0x4c>
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b0c      	cmp	r3, #12
 800608c:	f040 808b 	bne.w	80061a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b01      	cmp	r3, #1
 8006094:	f040 8087 	bne.w	80061a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006098:	4b88      	ldr	r3, [pc, #544]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_OscConfig+0x64>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e3d9      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	4b81      	ldr	r3, [pc, #516]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <HAL_RCC_OscConfig+0x7e>
 80060c0:	4b7e      	ldr	r3, [pc, #504]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c8:	e005      	b.n	80060d6 <HAL_RCC_OscConfig+0x8a>
 80060ca:	4b7c      	ldr	r3, [pc, #496]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80060cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d223      	bcs.n	8006122 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fd8c 	bl	8006bfc <RCC_SetFlashLatencyFromMSIRange>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e3ba      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060ee:	4b73      	ldr	r3, [pc, #460]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a72      	ldr	r2, [pc, #456]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80060f4:	f043 0308 	orr.w	r3, r3, #8
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	4b70      	ldr	r3, [pc, #448]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	496d      	ldr	r1, [pc, #436]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006108:	4313      	orrs	r3, r2
 800610a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800610c:	4b6b      	ldr	r3, [pc, #428]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	4968      	ldr	r1, [pc, #416]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800611c:	4313      	orrs	r3, r2
 800611e:	604b      	str	r3, [r1, #4]
 8006120:	e025      	b.n	800616e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006122:	4b66      	ldr	r3, [pc, #408]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a65      	ldr	r2, [pc, #404]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006128:	f043 0308 	orr.w	r3, r3, #8
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4b63      	ldr	r3, [pc, #396]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	4960      	ldr	r1, [pc, #384]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006140:	4b5e      	ldr	r3, [pc, #376]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	495b      	ldr	r1, [pc, #364]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006150:	4313      	orrs	r3, r2
 8006152:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fd4c 	bl	8006bfc <RCC_SetFlashLatencyFromMSIRange>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e37a      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800616e:	f000 fc81 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8006172:	4602      	mov	r2, r0
 8006174:	4b51      	ldr	r3, [pc, #324]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	4950      	ldr	r1, [pc, #320]	; (80062c0 <HAL_RCC_OscConfig+0x274>)
 8006180:	5ccb      	ldrb	r3, [r1, r3]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	fa22 f303 	lsr.w	r3, r2, r3
 800618a:	4a4e      	ldr	r2, [pc, #312]	; (80062c4 <HAL_RCC_OscConfig+0x278>)
 800618c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800618e:	4b4e      	ldr	r3, [pc, #312]	; (80062c8 <HAL_RCC_OscConfig+0x27c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f7fc fb96 	bl	80028c4 <HAL_InitTick>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d052      	beq.n	8006248 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	e35e      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d032      	beq.n	8006214 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061ae:	4b43      	ldr	r3, [pc, #268]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a42      	ldr	r2, [pc, #264]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80061b4:	f043 0301 	orr.w	r3, r3, #1
 80061b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061ba:	f7fc fbd3 	bl	8002964 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061c2:	f7fc fbcf 	bl	8002964 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e347      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061d4:	4b39      	ldr	r3, [pc, #228]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0f0      	beq.n	80061c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061e0:	4b36      	ldr	r3, [pc, #216]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a35      	ldr	r2, [pc, #212]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80061e6:	f043 0308 	orr.w	r3, r3, #8
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	4b33      	ldr	r3, [pc, #204]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	4930      	ldr	r1, [pc, #192]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061fe:	4b2f      	ldr	r3, [pc, #188]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	492b      	ldr	r1, [pc, #172]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800620e:	4313      	orrs	r3, r2
 8006210:	604b      	str	r3, [r1, #4]
 8006212:	e01a      	b.n	800624a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006214:	4b29      	ldr	r3, [pc, #164]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a28      	ldr	r2, [pc, #160]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006220:	f7fc fba0 	bl	8002964 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006228:	f7fc fb9c 	bl	8002964 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e314      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800623a:	4b20      	ldr	r3, [pc, #128]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x1dc>
 8006246:	e000      	b.n	800624a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006248:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d073      	beq.n	800633e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d005      	beq.n	8006268 <HAL_RCC_OscConfig+0x21c>
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b0c      	cmp	r3, #12
 8006260:	d10e      	bne.n	8006280 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d10b      	bne.n	8006280 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006268:	4b14      	ldr	r3, [pc, #80]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d063      	beq.n	800633c <HAL_RCC_OscConfig+0x2f0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d15f      	bne.n	800633c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e2f1      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006288:	d106      	bne.n	8006298 <HAL_RCC_OscConfig+0x24c>
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a0b      	ldr	r2, [pc, #44]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e025      	b.n	80062e4 <HAL_RCC_OscConfig+0x298>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062a0:	d114      	bne.n	80062cc <HAL_RCC_OscConfig+0x280>
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a05      	ldr	r2, [pc, #20]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80062a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	4b03      	ldr	r3, [pc, #12]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a02      	ldr	r2, [pc, #8]	; (80062bc <HAL_RCC_OscConfig+0x270>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e013      	b.n	80062e4 <HAL_RCC_OscConfig+0x298>
 80062bc:	40021000 	.word	0x40021000
 80062c0:	0800be60 	.word	0x0800be60
 80062c4:	20000000 	.word	0x20000000
 80062c8:	20000004 	.word	0x20000004
 80062cc:	4ba0      	ldr	r3, [pc, #640]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a9f      	ldr	r2, [pc, #636]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	4b9d      	ldr	r3, [pc, #628]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a9c      	ldr	r2, [pc, #624]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80062de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d013      	beq.n	8006314 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fc fb3a 	bl	8002964 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f4:	f7fc fb36 	bl	8002964 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b64      	cmp	r3, #100	; 0x64
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e2ae      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006306:	4b92      	ldr	r3, [pc, #584]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCC_OscConfig+0x2a8>
 8006312:	e014      	b.n	800633e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fc fb26 	bl	8002964 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800631c:	f7fc fb22 	bl	8002964 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b64      	cmp	r3, #100	; 0x64
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e29a      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800632e:	4b88      	ldr	r3, [pc, #544]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <HAL_RCC_OscConfig+0x2d0>
 800633a:	e000      	b.n	800633e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d060      	beq.n	800640c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b04      	cmp	r3, #4
 800634e:	d005      	beq.n	800635c <HAL_RCC_OscConfig+0x310>
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2b0c      	cmp	r3, #12
 8006354:	d119      	bne.n	800638a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d116      	bne.n	800638a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800635c:	4b7c      	ldr	r3, [pc, #496]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_OscConfig+0x328>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e277      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006374:	4b76      	ldr	r3, [pc, #472]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	4973      	ldr	r1, [pc, #460]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006384:	4313      	orrs	r3, r2
 8006386:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006388:	e040      	b.n	800640c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d023      	beq.n	80063da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006392:	4b6f      	ldr	r3, [pc, #444]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6e      	ldr	r2, [pc, #440]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639e:	f7fc fae1 	bl	8002964 <HAL_GetTick>
 80063a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a6:	f7fc fadd 	bl	8002964 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e255      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b8:	4b65      	ldr	r3, [pc, #404]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c4:	4b62      	ldr	r3, [pc, #392]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	061b      	lsls	r3, r3, #24
 80063d2:	495f      	ldr	r1, [pc, #380]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
 80063d8:	e018      	b.n	800640c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063da:	4b5d      	ldr	r3, [pc, #372]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5c      	ldr	r2, [pc, #368]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80063e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e6:	f7fc fabd 	bl	8002964 <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063ec:	e008      	b.n	8006400 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ee:	f7fc fab9 	bl	8002964 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e231      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006400:	4b53      	ldr	r3, [pc, #332]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f0      	bne.n	80063ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d03c      	beq.n	8006492 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01c      	beq.n	800645a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006420:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006426:	4a4a      	ldr	r2, [pc, #296]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fc fa98 	bl	8002964 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006438:	f7fc fa94 	bl	8002964 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e20c      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800644a:	4b41      	ldr	r3, [pc, #260]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 800644c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0ef      	beq.n	8006438 <HAL_RCC_OscConfig+0x3ec>
 8006458:	e01b      	b.n	8006492 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800645a:	4b3d      	ldr	r3, [pc, #244]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 800645c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006460:	4a3b      	ldr	r2, [pc, #236]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800646a:	f7fc fa7b 	bl	8002964 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006472:	f7fc fa77 	bl	8002964 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1ef      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006484:	4b32      	ldr	r3, [pc, #200]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1ef      	bne.n	8006472 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 80a6 	beq.w	80065ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80064a4:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10d      	bne.n	80064cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b0:	4b27      	ldr	r3, [pc, #156]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	4a26      	ldr	r2, [pc, #152]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80064b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ba:	6593      	str	r3, [r2, #88]	; 0x58
 80064bc:	4b24      	ldr	r3, [pc, #144]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064c8:	2301      	movs	r3, #1
 80064ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064cc:	4b21      	ldr	r3, [pc, #132]	; (8006554 <HAL_RCC_OscConfig+0x508>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d118      	bne.n	800650a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064d8:	4b1e      	ldr	r3, [pc, #120]	; (8006554 <HAL_RCC_OscConfig+0x508>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <HAL_RCC_OscConfig+0x508>)
 80064de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064e4:	f7fc fa3e 	bl	8002964 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ec:	f7fc fa3a 	bl	8002964 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e1b2      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064fe:	4b15      	ldr	r3, [pc, #84]	; (8006554 <HAL_RCC_OscConfig+0x508>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f0      	beq.n	80064ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d108      	bne.n	8006524 <HAL_RCC_OscConfig+0x4d8>
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006518:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006522:	e029      	b.n	8006578 <HAL_RCC_OscConfig+0x52c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b05      	cmp	r3, #5
 800652a:	d115      	bne.n	8006558 <HAL_RCC_OscConfig+0x50c>
 800652c:	4b08      	ldr	r3, [pc, #32]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006532:	4a07      	ldr	r2, [pc, #28]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006534:	f043 0304 	orr.w	r3, r3, #4
 8006538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800653c:	4b04      	ldr	r3, [pc, #16]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	4a03      	ldr	r2, [pc, #12]	; (8006550 <HAL_RCC_OscConfig+0x504>)
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800654c:	e014      	b.n	8006578 <HAL_RCC_OscConfig+0x52c>
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
 8006554:	40007000 	.word	0x40007000
 8006558:	4b9a      	ldr	r3, [pc, #616]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	4a99      	ldr	r2, [pc, #612]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006568:	4b96      	ldr	r3, [pc, #600]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800656e:	4a95      	ldr	r2, [pc, #596]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006570:	f023 0304 	bic.w	r3, r3, #4
 8006574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d016      	beq.n	80065ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fc f9f0 	bl	8002964 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006586:	e00a      	b.n	800659e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006588:	f7fc f9ec 	bl	8002964 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	; 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e162      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800659e:	4b89      	ldr	r3, [pc, #548]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0ed      	beq.n	8006588 <HAL_RCC_OscConfig+0x53c>
 80065ac:	e015      	b.n	80065da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ae:	f7fc f9d9 	bl	8002964 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065b4:	e00a      	b.n	80065cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b6:	f7fc f9d5 	bl	8002964 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e14b      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065cc:	4b7d      	ldr	r3, [pc, #500]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1ed      	bne.n	80065b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065da:	7ffb      	ldrb	r3, [r7, #31]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d105      	bne.n	80065ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e0:	4b78      	ldr	r3, [pc, #480]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 80065e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e4:	4a77      	ldr	r2, [pc, #476]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 80065e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d03c      	beq.n	8006672 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01c      	beq.n	800663a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006600:	4b70      	ldr	r3, [pc, #448]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006606:	4a6f      	ldr	r2, [pc, #444]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006610:	f7fc f9a8 	bl	8002964 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006618:	f7fc f9a4 	bl	8002964 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e11c      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800662a:	4b66      	ldr	r3, [pc, #408]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800662c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0ef      	beq.n	8006618 <HAL_RCC_OscConfig+0x5cc>
 8006638:	e01b      	b.n	8006672 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800663a:	4b62      	ldr	r3, [pc, #392]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800663c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006640:	4a60      	ldr	r2, [pc, #384]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664a:	f7fc f98b 	bl	8002964 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006652:	f7fc f987 	bl	8002964 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e0ff      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006664:	4b57      	ldr	r3, [pc, #348]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1ef      	bne.n	8006652 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80f3 	beq.w	8006862 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	2b02      	cmp	r3, #2
 8006682:	f040 80c9 	bne.w	8006818 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006686:	4b4f      	ldr	r3, [pc, #316]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f003 0203 	and.w	r2, r3, #3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	429a      	cmp	r2, r3
 8006698:	d12c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	3b01      	subs	r3, #1
 80066a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d123      	bne.n	80066f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d11b      	bne.n	80066f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d113      	bne.n	80066f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	3b01      	subs	r3, #1
 80066da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d109      	bne.n	80066f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	085b      	lsrs	r3, r3, #1
 80066ec:	3b01      	subs	r3, #1
 80066ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d06b      	beq.n	80067cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	2b0c      	cmp	r3, #12
 80066f8:	d062      	beq.n	80067c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80066fa:	4b32      	ldr	r3, [pc, #200]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e0ac      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800670a:	4b2e      	ldr	r3, [pc, #184]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2d      	ldr	r2, [pc, #180]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006714:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006716:	f7fc f925 	bl	8002964 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800671e:	f7fc f921 	bl	8002964 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e099      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006730:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f0      	bne.n	800671e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800673c:	4b21      	ldr	r3, [pc, #132]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	4b21      	ldr	r3, [pc, #132]	; (80067c8 <HAL_RCC_OscConfig+0x77c>)
 8006742:	4013      	ands	r3, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800674c:	3a01      	subs	r2, #1
 800674e:	0112      	lsls	r2, r2, #4
 8006750:	4311      	orrs	r1, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006756:	0212      	lsls	r2, r2, #8
 8006758:	4311      	orrs	r1, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800675e:	0852      	lsrs	r2, r2, #1
 8006760:	3a01      	subs	r2, #1
 8006762:	0552      	lsls	r2, r2, #21
 8006764:	4311      	orrs	r1, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800676a:	0852      	lsrs	r2, r2, #1
 800676c:	3a01      	subs	r2, #1
 800676e:	0652      	lsls	r2, r2, #25
 8006770:	4311      	orrs	r1, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006776:	06d2      	lsls	r2, r2, #27
 8006778:	430a      	orrs	r2, r1
 800677a:	4912      	ldr	r1, [pc, #72]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800677c:	4313      	orrs	r3, r2
 800677e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0f      	ldr	r2, [pc, #60]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800678a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800678c:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 8006792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006798:	f7fc f8e4 	bl	8002964 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a0:	f7fc f8e0 	bl	8002964 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e058      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b2:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <HAL_RCC_OscConfig+0x778>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067be:	e050      	b.n	8006862 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e04f      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
 80067c4:	40021000 	.word	0x40021000
 80067c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067cc:	4b27      	ldr	r3, [pc, #156]	; (800686c <HAL_RCC_OscConfig+0x820>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d144      	bne.n	8006862 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80067d8:	4b24      	ldr	r3, [pc, #144]	; (800686c <HAL_RCC_OscConfig+0x820>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a23      	ldr	r2, [pc, #140]	; (800686c <HAL_RCC_OscConfig+0x820>)
 80067de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067e4:	4b21      	ldr	r3, [pc, #132]	; (800686c <HAL_RCC_OscConfig+0x820>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4a20      	ldr	r2, [pc, #128]	; (800686c <HAL_RCC_OscConfig+0x820>)
 80067ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067f0:	f7fc f8b8 	bl	8002964 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067f8:	f7fc f8b4 	bl	8002964 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e02c      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800680a:	4b18      	ldr	r3, [pc, #96]	; (800686c <HAL_RCC_OscConfig+0x820>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <HAL_RCC_OscConfig+0x7ac>
 8006816:	e024      	b.n	8006862 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b0c      	cmp	r3, #12
 800681c:	d01f      	beq.n	800685e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <HAL_RCC_OscConfig+0x820>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a12      	ldr	r2, [pc, #72]	; (800686c <HAL_RCC_OscConfig+0x820>)
 8006824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682a:	f7fc f89b 	bl	8002964 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006832:	f7fc f897 	bl	8002964 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e00f      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <HAL_RCC_OscConfig+0x820>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f0      	bne.n	8006832 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_OscConfig+0x820>)
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	4905      	ldr	r1, [pc, #20]	; (800686c <HAL_RCC_OscConfig+0x820>)
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <HAL_RCC_OscConfig+0x824>)
 8006858:	4013      	ands	r3, r2
 800685a:	60cb      	str	r3, [r1, #12]
 800685c:	e001      	b.n	8006862 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40021000 	.word	0x40021000
 8006870:	feeefffc 	.word	0xfeeefffc

08006874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0e7      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006888:	4b75      	ldr	r3, [pc, #468]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d910      	bls.n	80068b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006896:	4b72      	ldr	r3, [pc, #456]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f023 0207 	bic.w	r2, r3, #7
 800689e:	4970      	ldr	r1, [pc, #448]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a6:	4b6e      	ldr	r3, [pc, #440]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e0cf      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d010      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	4b66      	ldr	r3, [pc, #408]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d908      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d4:	4b63      	ldr	r3, [pc, #396]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4960      	ldr	r1, [pc, #384]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d04c      	beq.n	800698c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d107      	bne.n	800690a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068fa:	4b5a      	ldr	r3, [pc, #360]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d121      	bne.n	800694a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0a6      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d107      	bne.n	8006922 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006912:	4b54      	ldr	r3, [pc, #336]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d115      	bne.n	800694a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e09a      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d107      	bne.n	800693a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800692a:	4b4e      	ldr	r3, [pc, #312]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e08e      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800693a:	4b4a      	ldr	r3, [pc, #296]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e086      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800694a:	4b46      	ldr	r3, [pc, #280]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4943      	ldr	r1, [pc, #268]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 8006958:	4313      	orrs	r3, r2
 800695a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695c:	f7fc f802 	bl	8002964 <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	e00a      	b.n	800697a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006964:	f7fb fffe 	bl	8002964 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d901      	bls.n	800697a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e06e      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697a:	4b3a      	ldr	r3, [pc, #232]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 020c 	and.w	r2, r3, #12
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	429a      	cmp	r2, r3
 800698a:	d1eb      	bne.n	8006964 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d010      	beq.n	80069ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	4b31      	ldr	r3, [pc, #196]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d208      	bcs.n	80069ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a8:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	492b      	ldr	r1, [pc, #172]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069ba:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d210      	bcs.n	80069ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 0207 	bic.w	r2, r3, #7
 80069d0:	4923      	ldr	r1, [pc, #140]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d8:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <HAL_RCC_ClockConfig+0x1ec>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d001      	beq.n	80069ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e036      	b.n	8006a58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f6:	4b1b      	ldr	r3, [pc, #108]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	4918      	ldr	r1, [pc, #96]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a14:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	4910      	ldr	r1, [pc, #64]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a28:	f000 f824 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <HAL_RCC_ClockConfig+0x1f0>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	091b      	lsrs	r3, r3, #4
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	490b      	ldr	r1, [pc, #44]	; (8006a68 <HAL_RCC_ClockConfig+0x1f4>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <HAL_RCC_ClockConfig+0x1f8>)
 8006a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a48:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <HAL_RCC_ClockConfig+0x1fc>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fb ff39 	bl	80028c4 <HAL_InitTick>
 8006a52:	4603      	mov	r3, r0
 8006a54:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a56:	7afb      	ldrb	r3, [r7, #11]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40022000 	.word	0x40022000
 8006a64:	40021000 	.word	0x40021000
 8006a68:	0800be60 	.word	0x0800be60
 8006a6c:	20000000 	.word	0x20000000
 8006a70:	20000004 	.word	0x20000004

08006a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	; 0x24
 8006a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a82:	4b3e      	ldr	r3, [pc, #248]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a8c:	4b3b      	ldr	r3, [pc, #236]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b0c      	cmp	r3, #12
 8006aa0:	d121      	bne.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d11e      	bne.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006aa8:	4b34      	ldr	r3, [pc, #208]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ab4:	4b31      	ldr	r3, [pc, #196]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	e005      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ac4:	4b2d      	ldr	r3, [pc, #180]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ad0:	4a2b      	ldr	r2, [pc, #172]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10d      	bne.n	8006afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ae4:	e00a      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d102      	bne.n	8006af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006aec:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e004      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d101      	bne.n	8006afc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006af8:	4b23      	ldr	r3, [pc, #140]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8006afa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d134      	bne.n	8006b6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b02:	4b1e      	ldr	r3, [pc, #120]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0303 	and.w	r3, r3, #3
 8006b0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d003      	beq.n	8006b1a <HAL_RCC_GetSysClockFreq+0xa6>
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d003      	beq.n	8006b20 <HAL_RCC_GetSysClockFreq+0xac>
 8006b18:	e005      	b.n	8006b26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b1c:	617b      	str	r3, [r7, #20]
      break;
 8006b1e:	e005      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b20:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8006b22:	617b      	str	r3, [r7, #20]
      break;
 8006b24:	e002      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	617b      	str	r3, [r7, #20]
      break;
 8006b2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b2c:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	3301      	adds	r3, #1
 8006b38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	fb03 f202 	mul.w	r2, r3, r2
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b52:	4b0a      	ldr	r3, [pc, #40]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	0e5b      	lsrs	r3, r3, #25
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b6c:	69bb      	ldr	r3, [r7, #24]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3724      	adds	r7, #36	; 0x24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	0800be78 	.word	0x0800be78
 8006b84:	00f42400 	.word	0x00f42400
 8006b88:	007a1200 	.word	0x007a1200

08006b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b90:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b92:	681b      	ldr	r3, [r3, #0]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000000 	.word	0x20000000

08006ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ba8:	f7ff fff0 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bac:	4602      	mov	r2, r0
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	4904      	ldr	r1, [pc, #16]	; (8006bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bba:	5ccb      	ldrb	r3, [r1, r3]
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	0800be70 	.word	0x0800be70

08006bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bd4:	f7ff ffda 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	0adb      	lsrs	r3, r3, #11
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	4904      	ldr	r1, [pc, #16]	; (8006bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006be6:	5ccb      	ldrb	r3, [r1, r3]
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	0800be70 	.word	0x0800be70

08006bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c04:	2300      	movs	r3, #0
 8006c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c08:	4b2a      	ldr	r3, [pc, #168]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c14:	f7ff f9b6 	bl	8005f84 <HAL_PWREx_GetVoltageRange>
 8006c18:	6178      	str	r0, [r7, #20]
 8006c1a:	e014      	b.n	8006c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c1c:	4b25      	ldr	r3, [pc, #148]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c20:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c26:	6593      	str	r3, [r2, #88]	; 0x58
 8006c28:	4b22      	ldr	r3, [pc, #136]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c34:	f7ff f9a6 	bl	8005f84 <HAL_PWREx_GetVoltageRange>
 8006c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c3a:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4c:	d10b      	bne.n	8006c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b80      	cmp	r3, #128	; 0x80
 8006c52:	d919      	bls.n	8006c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2ba0      	cmp	r3, #160	; 0xa0
 8006c58:	d902      	bls.n	8006c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	e013      	b.n	8006c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c60:	2301      	movs	r3, #1
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	e010      	b.n	8006c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d902      	bls.n	8006c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	e00a      	b.n	8006c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b80      	cmp	r3, #128	; 0x80
 8006c76:	d102      	bne.n	8006c7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c78:	2302      	movs	r3, #2
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	e004      	b.n	8006c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b70      	cmp	r3, #112	; 0x70
 8006c82:	d101      	bne.n	8006c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c84:	2301      	movs	r3, #1
 8006c86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c88:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f023 0207 	bic.w	r2, r3, #7
 8006c90:	4909      	ldr	r1, [pc, #36]	; (8006cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d001      	beq.n	8006caa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	40022000 	.word	0x40022000

08006cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cc8:	2300      	movs	r3, #0
 8006cca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d031      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ce0:	d01a      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ce6:	d814      	bhi.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cf0:	d10f      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006cf2:	4b5d      	ldr	r3, [pc, #372]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	4a5c      	ldr	r2, [pc, #368]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cfe:	e00c      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3304      	adds	r3, #4
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 f9de 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d10:	e003      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	74fb      	strb	r3, [r7, #19]
      break;
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d1a:	7cfb      	ldrb	r3, [r7, #19]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10b      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d20:	4b51      	ldr	r3, [pc, #324]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2e:	494e      	ldr	r1, [pc, #312]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006d36:	e001      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	7cfb      	ldrb	r3, [r7, #19]
 8006d3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 809e 	beq.w	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d4e:	4b46      	ldr	r3, [pc, #280]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00d      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d64:	4b40      	ldr	r3, [pc, #256]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d68:	4a3f      	ldr	r2, [pc, #252]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8006d70:	4b3d      	ldr	r3, [pc, #244]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a39      	ldr	r2, [pc, #228]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d8c:	f7fb fdea 	bl	8002964 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d92:	e009      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d94:	f7fb fde6 	bl	8002964 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d902      	bls.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	74fb      	strb	r3, [r7, #19]
        break;
 8006da6:	e005      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006da8:	4b30      	ldr	r3, [pc, #192]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0ef      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006db4:	7cfb      	ldrb	r3, [r7, #19]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d15a      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006dba:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01e      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d019      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006dd6:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df8:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e02:	4a19      	ldr	r2, [pc, #100]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d016      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fb fda6 	bl	8002964 <HAL_GetTick>
 8006e18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e1a:	e00b      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1c:	f7fb fda2 	bl	8002964 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d902      	bls.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	74fb      	strb	r3, [r7, #19]
            break;
 8006e32:	e006      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e34:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ec      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006e42:	7cfb      	ldrb	r3, [r7, #19]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e56:	4904      	ldr	r1, [pc, #16]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e5e:	e009      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e60:	7cfb      	ldrb	r3, [r7, #19]
 8006e62:	74bb      	strb	r3, [r7, #18]
 8006e64:	e006      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006e66:	bf00      	nop
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	7cfb      	ldrb	r3, [r7, #19]
 8006e72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e74:	7c7b      	ldrb	r3, [r7, #17]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d105      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e7a:	4b8a      	ldr	r3, [pc, #552]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	4a89      	ldr	r2, [pc, #548]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e92:	4b84      	ldr	r3, [pc, #528]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f023 0203 	bic.w	r2, r3, #3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	4980      	ldr	r1, [pc, #512]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006eb4:	4b7b      	ldr	r3, [pc, #492]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eba:	f023 020c 	bic.w	r2, r3, #12
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	4978      	ldr	r1, [pc, #480]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ed6:	4b73      	ldr	r3, [pc, #460]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006edc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	496f      	ldr	r1, [pc, #444]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ef8:	4b6a      	ldr	r3, [pc, #424]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	4967      	ldr	r1, [pc, #412]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f1a:	4b62      	ldr	r3, [pc, #392]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	495e      	ldr	r1, [pc, #376]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f3c:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	4956      	ldr	r1, [pc, #344]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f5e:	4b51      	ldr	r3, [pc, #324]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	494d      	ldr	r1, [pc, #308]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d028      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f80:	4b48      	ldr	r3, [pc, #288]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	4945      	ldr	r1, [pc, #276]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f9e:	d106      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fa0:	4b40      	ldr	r3, [pc, #256]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a3f      	ldr	r2, [pc, #252]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006faa:	60d3      	str	r3, [r2, #12]
 8006fac:	e011      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f882 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006fc8:	7cfb      	ldrb	r3, [r7, #19]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006fce:	7cfb      	ldrb	r3, [r7, #19]
 8006fd0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d028      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fde:	4b31      	ldr	r3, [pc, #196]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	492d      	ldr	r1, [pc, #180]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ffc:	d106      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ffe:	4b29      	ldr	r3, [pc, #164]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	4a28      	ldr	r2, [pc, #160]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007008:	60d3      	str	r3, [r2, #12]
 800700a:	e011      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007014:	d10c      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	2101      	movs	r1, #1
 800701c:	4618      	mov	r0, r3
 800701e:	f000 f853 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007026:	7cfb      	ldrb	r3, [r7, #19]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800702c:	7cfb      	ldrb	r3, [r7, #19]
 800702e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01c      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704a:	4916      	ldr	r1, [pc, #88]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800705a:	d10c      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3304      	adds	r3, #4
 8007060:	2102      	movs	r1, #2
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f830 	bl	80070c8 <RCCEx_PLLSAI1_Config>
 8007068:	4603      	mov	r3, r0
 800706a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800706c:	7cfb      	ldrb	r3, [r7, #19]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007072:	7cfb      	ldrb	r3, [r7, #19]
 8007074:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007082:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007088:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007090:	4904      	ldr	r1, [pc, #16]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007098:	7cbb      	ldrb	r3, [r7, #18]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40021000 	.word	0x40021000

080070a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a04      	ldr	r2, [pc, #16]	; (80070c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80070b2:	f043 0304 	orr.w	r3, r3, #4
 80070b6:	6013      	str	r3, [r2, #0]
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40021000 	.word	0x40021000

080070c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070d6:	4b74      	ldr	r3, [pc, #464]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d018      	beq.n	8007114 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80070e2:	4b71      	ldr	r3, [pc, #452]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f003 0203 	and.w	r2, r3, #3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d10d      	bne.n	800710e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
       ||
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80070fa:	4b6b      	ldr	r3, [pc, #428]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	091b      	lsrs	r3, r3, #4
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
       ||
 800710a:	429a      	cmp	r2, r3
 800710c:	d047      	beq.n	800719e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	73fb      	strb	r3, [r7, #15]
 8007112:	e044      	b.n	800719e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d018      	beq.n	800714e <RCCEx_PLLSAI1_Config+0x86>
 800711c:	2b03      	cmp	r3, #3
 800711e:	d825      	bhi.n	800716c <RCCEx_PLLSAI1_Config+0xa4>
 8007120:	2b01      	cmp	r3, #1
 8007122:	d002      	beq.n	800712a <RCCEx_PLLSAI1_Config+0x62>
 8007124:	2b02      	cmp	r3, #2
 8007126:	d009      	beq.n	800713c <RCCEx_PLLSAI1_Config+0x74>
 8007128:	e020      	b.n	800716c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800712a:	4b5f      	ldr	r3, [pc, #380]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d11d      	bne.n	8007172 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800713a:	e01a      	b.n	8007172 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800713c:	4b5a      	ldr	r3, [pc, #360]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007144:	2b00      	cmp	r3, #0
 8007146:	d116      	bne.n	8007176 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800714c:	e013      	b.n	8007176 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800714e:	4b56      	ldr	r3, [pc, #344]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10f      	bne.n	800717a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800715a:	4b53      	ldr	r3, [pc, #332]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800716a:	e006      	b.n	800717a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
      break;
 8007170:	e004      	b.n	800717c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007172:	bf00      	nop
 8007174:	e002      	b.n	800717c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007176:	bf00      	nop
 8007178:	e000      	b.n	800717c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800717a:	bf00      	nop
    }

    if(status == HAL_OK)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10d      	bne.n	800719e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007182:	4b49      	ldr	r3, [pc, #292]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6819      	ldr	r1, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	3b01      	subs	r3, #1
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	430b      	orrs	r3, r1
 8007198:	4943      	ldr	r1, [pc, #268]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800719a:	4313      	orrs	r3, r2
 800719c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d17c      	bne.n	800729e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80071a4:	4b40      	ldr	r3, [pc, #256]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a3f      	ldr	r2, [pc, #252]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071b0:	f7fb fbd8 	bl	8002964 <HAL_GetTick>
 80071b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071b6:	e009      	b.n	80071cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071b8:	f7fb fbd4 	bl	8002964 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d902      	bls.n	80071cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	73fb      	strb	r3, [r7, #15]
        break;
 80071ca:	e005      	b.n	80071d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071cc:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1ef      	bne.n	80071b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d15f      	bne.n	800729e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d110      	bne.n	8007206 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071e4:	4b30      	ldr	r3, [pc, #192]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80071ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6892      	ldr	r2, [r2, #8]
 80071f4:	0211      	lsls	r1, r2, #8
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	68d2      	ldr	r2, [r2, #12]
 80071fa:	06d2      	lsls	r2, r2, #27
 80071fc:	430a      	orrs	r2, r1
 80071fe:	492a      	ldr	r1, [pc, #168]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007200:	4313      	orrs	r3, r2
 8007202:	610b      	str	r3, [r1, #16]
 8007204:	e027      	b.n	8007256 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d112      	bne.n	8007232 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800720c:	4b26      	ldr	r3, [pc, #152]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007214:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6892      	ldr	r2, [r2, #8]
 800721c:	0211      	lsls	r1, r2, #8
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6912      	ldr	r2, [r2, #16]
 8007222:	0852      	lsrs	r2, r2, #1
 8007224:	3a01      	subs	r2, #1
 8007226:	0552      	lsls	r2, r2, #21
 8007228:	430a      	orrs	r2, r1
 800722a:	491f      	ldr	r1, [pc, #124]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800722c:	4313      	orrs	r3, r2
 800722e:	610b      	str	r3, [r1, #16]
 8007230:	e011      	b.n	8007256 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007232:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800723a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6892      	ldr	r2, [r2, #8]
 8007242:	0211      	lsls	r1, r2, #8
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6952      	ldr	r2, [r2, #20]
 8007248:	0852      	lsrs	r2, r2, #1
 800724a:	3a01      	subs	r2, #1
 800724c:	0652      	lsls	r2, r2, #25
 800724e:	430a      	orrs	r2, r1
 8007250:	4915      	ldr	r1, [pc, #84]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007252:	4313      	orrs	r3, r2
 8007254:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007256:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800725c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007260:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007262:	f7fb fb7f 	bl	8002964 <HAL_GetTick>
 8007266:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007268:	e009      	b.n	800727e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800726a:	f7fb fb7b 	bl	8002964 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d902      	bls.n	800727e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	73fb      	strb	r3, [r7, #15]
          break;
 800727c:	e005      	b.n	800728a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800727e:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ef      	beq.n	800726a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007290:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	4903      	ldr	r1, [pc, #12]	; (80072a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800729a:	4313      	orrs	r3, r2
 800729c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40021000 	.word	0x40021000

080072ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e040      	b.n	8007340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fb f8da 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2224      	movs	r2, #36	; 0x24
 80072d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fd62 	bl	8007db4 <UART_SetConfig>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e022      	b.n	8007340 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 ff82 	bl	800820c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f809 	bl	8008350 <UART_CheckIdleState>
 800733e:	4603      	mov	r3, r0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	; 0x28
 800734c:	af02      	add	r7, sp, #8
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800735c:	2b20      	cmp	r3, #32
 800735e:	f040 8082 	bne.w	8007466 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_UART_Transmit+0x26>
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e07a      	b.n	8007468 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_UART_Transmit+0x38>
 800737c:	2302      	movs	r3, #2
 800737e:	e073      	b.n	8007468 <HAL_UART_Transmit+0x120>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2221      	movs	r2, #33	; 0x21
 8007394:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007396:	f7fb fae5 	bl	8002964 <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	88fa      	ldrh	r2, [r7, #6]
 80073a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b4:	d108      	bne.n	80073c8 <HAL_UART_Transmit+0x80>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d104      	bne.n	80073c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	e003      	b.n	80073d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80073d8:	e02d      	b.n	8007436 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2200      	movs	r2, #0
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fffc 	bl	80083e2 <UART_WaitOnFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e039      	b.n	8007468 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	881a      	ldrh	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007406:	b292      	uxth	r2, r2
 8007408:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	3302      	adds	r3, #2
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	e008      	b.n	8007424 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b292      	uxth	r2, r2
 800741c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	3301      	adds	r3, #1
 8007422:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1cb      	bne.n	80073da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2200      	movs	r2, #0
 800744a:	2140      	movs	r1, #64	; 0x40
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 ffc8 	bl	80083e2 <UART_WaitOnFlagUntilTimeout>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e005      	b.n	8007468 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e000      	b.n	8007468 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007466:	2302      	movs	r3, #2
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	3720      	adds	r7, #32
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08a      	sub	sp, #40	; 0x28
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	4613      	mov	r3, r2
 800747e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007484:	2b20      	cmp	r3, #32
 8007486:	f040 80bf 	bne.w	8007608 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_UART_Receive+0x26>
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e0b7      	b.n	800760a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Receive+0x38>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e0b0      	b.n	800760a <HAL_UART_Receive+0x19a>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2222      	movs	r2, #34	; 0x22
 80074bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074c4:	f7fb fa4e 	bl	8002964 <HAL_GetTick>
 80074c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	88fa      	ldrh	r2, [r7, #6]
 80074d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e2:	d10e      	bne.n	8007502 <HAL_UART_Receive+0x92>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_UART_Receive+0x88>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074f6:	e02d      	b.n	8007554 <HAL_UART_Receive+0xe4>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	22ff      	movs	r2, #255	; 0xff
 80074fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007500:	e028      	b.n	8007554 <HAL_UART_Receive+0xe4>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <HAL_UART_Receive+0xb6>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <HAL_UART_Receive+0xac>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	22ff      	movs	r2, #255	; 0xff
 8007516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800751a:	e01b      	b.n	8007554 <HAL_UART_Receive+0xe4>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	227f      	movs	r2, #127	; 0x7f
 8007520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007524:	e016      	b.n	8007554 <HAL_UART_Receive+0xe4>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800752e:	d10d      	bne.n	800754c <HAL_UART_Receive+0xdc>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <HAL_UART_Receive+0xd2>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	227f      	movs	r2, #127	; 0x7f
 800753c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007540:	e008      	b.n	8007554 <HAL_UART_Receive+0xe4>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	223f      	movs	r2, #63	; 0x3f
 8007546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800754a:	e003      	b.n	8007554 <HAL_UART_Receive+0xe4>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800755a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007564:	d108      	bne.n	8007578 <HAL_UART_Receive+0x108>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d104      	bne.n	8007578 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800756e:	2300      	movs	r3, #0
 8007570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	e003      	b.n	8007580 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007588:	e033      	b.n	80075f2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2200      	movs	r2, #0
 8007592:	2120      	movs	r1, #32
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 ff24 	bl	80083e2 <UART_WaitOnFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e032      	b.n	800760a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10c      	bne.n	80075c4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	8a7b      	ldrh	r3, [r7, #18]
 80075b4:	4013      	ands	r3, r2
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	3302      	adds	r3, #2
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	e00d      	b.n	80075e0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	8a7b      	ldrh	r3, [r7, #18]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	4013      	ands	r3, r2
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	3301      	adds	r3, #1
 80075de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1c5      	bne.n	800758a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	e000      	b.n	800760a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
  }
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007614:	b480      	push	{r7}
 8007616:	b08b      	sub	sp, #44	; 0x2c
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007626:	2b20      	cmp	r3, #32
 8007628:	d156      	bne.n	80076d8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <HAL_UART_Transmit_IT+0x22>
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e04f      	b.n	80076da <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_UART_Transmit_IT+0x34>
 8007644:	2302      	movs	r3, #2
 8007646:	e048      	b.n	80076da <HAL_UART_Transmit_IT+0xc6>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	88fa      	ldrh	r2, [r7, #6]
 8007662:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2221      	movs	r2, #33	; 0x21
 8007678:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007682:	d107      	bne.n	8007694 <HAL_UART_Transmit_IT+0x80>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <HAL_UART_Transmit_IT+0xd4>)
 8007690:	669a      	str	r2, [r3, #104]	; 0x68
 8007692:	e002      	b.n	800769a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4a15      	ldr	r2, [pc, #84]	; (80076ec <HAL_UART_Transmit_IT+0xd8>)
 8007698:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	613b      	str	r3, [r7, #16]
   return(result);
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	623b      	str	r3, [r7, #32]
 80076c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	69f9      	ldr	r1, [r7, #28]
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e000      	b.n	80076da <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80076d8:	2302      	movs	r3, #2
  }
}
 80076da:	4618      	mov	r0, r3
 80076dc:	372c      	adds	r7, #44	; 0x2c
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	080088ab 	.word	0x080088ab
 80076ec:	080087f3 	.word	0x080087f3

080076f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08a      	sub	sp, #40	; 0x28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007702:	2b20      	cmp	r3, #32
 8007704:	d142      	bne.n	800778c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <HAL_UART_Receive_IT+0x22>
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e03b      	b.n	800778e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_UART_Receive_IT+0x34>
 8007720:	2302      	movs	r3, #2
 8007722:	e034      	b.n	800778e <HAL_UART_Receive_IT+0x9e>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a18      	ldr	r2, [pc, #96]	; (8007798 <HAL_UART_Receive_IT+0xa8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d01f      	beq.n	800777c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d018      	beq.n	800777c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	613b      	str	r3, [r7, #16]
   return(result);
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	623b      	str	r3, [r7, #32]
 800776a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	69f9      	ldr	r1, [r7, #28]
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	61bb      	str	r3, [r7, #24]
   return(result);
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e6      	bne.n	800774a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	461a      	mov	r2, r3
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fef2 	bl	800856c <UART_Start_Receive_IT>
 8007788:	4603      	mov	r3, r0
 800778a:	e000      	b.n	800778e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800778c:	2302      	movs	r3, #2
  }
}
 800778e:	4618      	mov	r0, r3
 8007790:	3728      	adds	r7, #40	; 0x28
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	40008000 	.word	0x40008000

0800779c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b0ba      	sub	sp, #232	; 0xe8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80077ca:	4013      	ands	r3, r2
 80077cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d115      	bne.n	8007804 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00f      	beq.n	8007804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 82a6 	beq.w	8007d46 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
      }
      return;
 8007802:	e2a0      	b.n	8007d46 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8117 	beq.w	8007a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800780e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800781a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800781e:	4b85      	ldr	r3, [pc, #532]	; (8007a34 <HAL_UART_IRQHandler+0x298>)
 8007820:	4013      	ands	r3, r2
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 810a 	beq.w	8007a3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d011      	beq.n	8007858 <HAL_UART_IRQHandler+0xbc>
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2201      	movs	r2, #1
 8007846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800784e:	f043 0201 	orr.w	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d011      	beq.n	8007888 <HAL_UART_IRQHandler+0xec>
 8007864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2202      	movs	r2, #2
 8007876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787e:	f043 0204 	orr.w	r2, r3, #4
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d011      	beq.n	80078b8 <HAL_UART_IRQHandler+0x11c>
 8007894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2204      	movs	r2, #4
 80078a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ae:	f043 0202 	orr.w	r2, r3, #2
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d017      	beq.n	80078f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d105      	bne.n	80078dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2208      	movs	r2, #8
 80078e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ea:	f043 0208 	orr.w	r2, r3, #8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d012      	beq.n	8007926 <HAL_UART_IRQHandler+0x18a>
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00c      	beq.n	8007926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800791c:	f043 0220 	orr.w	r2, r3, #32
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 820c 	beq.w	8007d4a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00d      	beq.n	800795a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800793e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d005      	beq.n	800797e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800797a:	2b00      	cmp	r3, #0
 800797c:	d04f      	beq.n	8007a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 febe 	bl	8008700 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d141      	bne.n	8007a16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1d9      	bne.n	8007992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d013      	beq.n	8007a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <HAL_UART_IRQHandler+0x29c>)
 80079ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc fd5d 	bl	80044b2 <HAL_DMA_Abort_IT>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0c:	e00f      	b.n	8007a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f9ba 	bl	8007d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	e00b      	b.n	8007a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9b6 	bl	8007d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1c:	e007      	b.n	8007a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f9b2 	bl	8007d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007a2c:	e18d      	b.n	8007d4a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2e:	bf00      	nop
    return;
 8007a30:	e18b      	b.n	8007d4a <HAL_UART_IRQHandler+0x5ae>
 8007a32:	bf00      	nop
 8007a34:	04000120 	.word	0x04000120
 8007a38:	080087c7 	.word	0x080087c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	f040 8146 	bne.w	8007cd2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 813f 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8138 	beq.w	8007cd2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2210      	movs	r2, #16
 8007a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	f040 80b4 	bne.w	8007be2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 815f 	beq.w	8007d4e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	f080 8157 	bcs.w	8007d4e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f040 8085 	bne.w	8007bc6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1da      	bne.n	8007abc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e1      	bne.n	8007b06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e3      	bne.n	8007b42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b96:	f023 0310 	bic.w	r3, r3, #16
 8007b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007baa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e4      	bne.n	8007b86 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fc fc38 	bl	8004436 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f8de 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007be0:	e0b5      	b.n	8007d4e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80a7 	beq.w	8007d52 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 80a2 	beq.w	8007d52 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c30:	647b      	str	r3, [r7, #68]	; 0x44
 8007c32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e4      	bne.n	8007c0e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	623b      	str	r3, [r7, #32]
   return(result);
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3308      	adds	r3, #8
 8007c64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c68:	633a      	str	r2, [r7, #48]	; 0x30
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e3      	bne.n	8007c44 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0310 	bic.w	r3, r3, #16
 8007ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e4      	bne.n	8007c8e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f866 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cd0:	e03f      	b.n	8007d52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00e      	beq.n	8007cfc <HAL_UART_IRQHandler+0x560>
 8007cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 ffc2 	bl	8008c7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cfa:	e02d      	b.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01c      	beq.n	8007d56 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
    }
    return;
 8007d24:	e017      	b.n	8007d56 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d012      	beq.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
 8007d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00c      	beq.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fe13 	bl	800896a <UART_EndTransmit_IT>
    return;
 8007d44:	e008      	b.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d46:	bf00      	nop
 8007d48:	e006      	b.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d4a:	bf00      	nop
 8007d4c:	e004      	b.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d4e:	bf00      	nop
 8007d50:	e002      	b.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d52:	bf00      	nop
 8007d54:	e000      	b.n	8007d58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d58:	37e8      	adds	r7, #232	; 0xe8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop

08007d60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007db8:	b08a      	sub	sp, #40	; 0x28
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	4bb4      	ldr	r3, [pc, #720]	; (80080b4 <UART_SetConfig+0x300>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4aa9      	ldr	r2, [pc, #676]	; (80080b8 <UART_SetConfig+0x304>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e30:	430a      	orrs	r2, r1
 8007e32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4aa0      	ldr	r2, [pc, #640]	; (80080bc <UART_SetConfig+0x308>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d126      	bne.n	8007e8c <UART_SetConfig+0xd8>
 8007e3e:	4ba0      	ldr	r3, [pc, #640]	; (80080c0 <UART_SetConfig+0x30c>)
 8007e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d81b      	bhi.n	8007e84 <UART_SetConfig+0xd0>
 8007e4c:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <UART_SetConfig+0xa0>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007e65 	.word	0x08007e65
 8007e58:	08007e75 	.word	0x08007e75
 8007e5c:	08007e6d 	.word	0x08007e6d
 8007e60:	08007e7d 	.word	0x08007e7d
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e6a:	e080      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e72:	e07c      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e7a:	e078      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e82:	e074      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e8a:	e070      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a8c      	ldr	r2, [pc, #560]	; (80080c4 <UART_SetConfig+0x310>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d138      	bne.n	8007f08 <UART_SetConfig+0x154>
 8007e96:	4b8a      	ldr	r3, [pc, #552]	; (80080c0 <UART_SetConfig+0x30c>)
 8007e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9c:	f003 030c 	and.w	r3, r3, #12
 8007ea0:	2b0c      	cmp	r3, #12
 8007ea2:	d82d      	bhi.n	8007f00 <UART_SetConfig+0x14c>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0xf8>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007f01 	.word	0x08007f01
 8007eb4:	08007f01 	.word	0x08007f01
 8007eb8:	08007f01 	.word	0x08007f01
 8007ebc:	08007ef1 	.word	0x08007ef1
 8007ec0:	08007f01 	.word	0x08007f01
 8007ec4:	08007f01 	.word	0x08007f01
 8007ec8:	08007f01 	.word	0x08007f01
 8007ecc:	08007ee9 	.word	0x08007ee9
 8007ed0:	08007f01 	.word	0x08007f01
 8007ed4:	08007f01 	.word	0x08007f01
 8007ed8:	08007f01 	.word	0x08007f01
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ee6:	e042      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eee:	e03e      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ef6:	e03a      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007efe:	e036      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f06:	e032      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a6a      	ldr	r2, [pc, #424]	; (80080b8 <UART_SetConfig+0x304>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d12a      	bne.n	8007f68 <UART_SetConfig+0x1b4>
 8007f12:	4b6b      	ldr	r3, [pc, #428]	; (80080c0 <UART_SetConfig+0x30c>)
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f20:	d01a      	beq.n	8007f58 <UART_SetConfig+0x1a4>
 8007f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f26:	d81b      	bhi.n	8007f60 <UART_SetConfig+0x1ac>
 8007f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f2c:	d00c      	beq.n	8007f48 <UART_SetConfig+0x194>
 8007f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f32:	d815      	bhi.n	8007f60 <UART_SetConfig+0x1ac>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <UART_SetConfig+0x18c>
 8007f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f3c:	d008      	beq.n	8007f50 <UART_SetConfig+0x19c>
 8007f3e:	e00f      	b.n	8007f60 <UART_SetConfig+0x1ac>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f46:	e012      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f4e:	e00e      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007f50:	2304      	movs	r3, #4
 8007f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f56:	e00a      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007f58:	2308      	movs	r3, #8
 8007f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f5e:	e006      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007f60:	2310      	movs	r3, #16
 8007f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f66:	e002      	b.n	8007f6e <UART_SetConfig+0x1ba>
 8007f68:	2310      	movs	r3, #16
 8007f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a51      	ldr	r2, [pc, #324]	; (80080b8 <UART_SetConfig+0x304>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d17a      	bne.n	800806e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d824      	bhi.n	8007fca <UART_SetConfig+0x216>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x1d4>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fcb 	.word	0x08007fcb
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fcb 	.word	0x08007fcb
 8007f98:	08007fbb 	.word	0x08007fbb
 8007f9c:	08007fcb 	.word	0x08007fcb
 8007fa0:	08007fcb 	.word	0x08007fcb
 8007fa4:	08007fcb 	.word	0x08007fcb
 8007fa8:	08007fc3 	.word	0x08007fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fac:	f7fe fdfa 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 8007fb0:	61f8      	str	r0, [r7, #28]
        break;
 8007fb2:	e010      	b.n	8007fd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb4:	4b44      	ldr	r3, [pc, #272]	; (80080c8 <UART_SetConfig+0x314>)
 8007fb6:	61fb      	str	r3, [r7, #28]
        break;
 8007fb8:	e00d      	b.n	8007fd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fba:	f7fe fd5b 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8007fbe:	61f8      	str	r0, [r7, #28]
        break;
 8007fc0:	e009      	b.n	8007fd6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc6:	61fb      	str	r3, [r7, #28]
        break;
 8007fc8:	e005      	b.n	8007fd6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8107 	beq.w	80081ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	4413      	add	r3, r2
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d305      	bcc.n	8007ffa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d903      	bls.n	8008002 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008000:	e0f4      	b.n	80081ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	2200      	movs	r2, #0
 8008006:	461c      	mov	r4, r3
 8008008:	4615      	mov	r5, r2
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	022b      	lsls	r3, r5, #8
 8008014:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008018:	0222      	lsls	r2, r4, #8
 800801a:	68f9      	ldr	r1, [r7, #12]
 800801c:	6849      	ldr	r1, [r1, #4]
 800801e:	0849      	lsrs	r1, r1, #1
 8008020:	2000      	movs	r0, #0
 8008022:	4688      	mov	r8, r1
 8008024:	4681      	mov	r9, r0
 8008026:	eb12 0a08 	adds.w	sl, r2, r8
 800802a:	eb43 0b09 	adc.w	fp, r3, r9
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	603b      	str	r3, [r7, #0]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800803c:	4650      	mov	r0, sl
 800803e:	4659      	mov	r1, fp
 8008040:	f7f8 fe12 	bl	8000c68 <__aeabi_uldivmod>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4613      	mov	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008052:	d308      	bcc.n	8008066 <UART_SetConfig+0x2b2>
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800805a:	d204      	bcs.n	8008066 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	60da      	str	r2, [r3, #12]
 8008064:	e0c2      	b.n	80081ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800806c:	e0be      	b.n	80081ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008076:	d16a      	bne.n	800814e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800807c:	2b08      	cmp	r3, #8
 800807e:	d834      	bhi.n	80080ea <UART_SetConfig+0x336>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <UART_SetConfig+0x2d4>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080ad 	.word	0x080080ad
 800808c:	080080cd 	.word	0x080080cd
 8008090:	080080d5 	.word	0x080080d5
 8008094:	080080eb 	.word	0x080080eb
 8008098:	080080db 	.word	0x080080db
 800809c:	080080eb 	.word	0x080080eb
 80080a0:	080080eb 	.word	0x080080eb
 80080a4:	080080eb 	.word	0x080080eb
 80080a8:	080080e3 	.word	0x080080e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ac:	f7fe fd7a 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 80080b0:	61f8      	str	r0, [r7, #28]
        break;
 80080b2:	e020      	b.n	80080f6 <UART_SetConfig+0x342>
 80080b4:	efff69f3 	.word	0xefff69f3
 80080b8:	40008000 	.word	0x40008000
 80080bc:	40013800 	.word	0x40013800
 80080c0:	40021000 	.word	0x40021000
 80080c4:	40004400 	.word	0x40004400
 80080c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080cc:	f7fe fd80 	bl	8006bd0 <HAL_RCC_GetPCLK2Freq>
 80080d0:	61f8      	str	r0, [r7, #28]
        break;
 80080d2:	e010      	b.n	80080f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d4:	4b4c      	ldr	r3, [pc, #304]	; (8008208 <UART_SetConfig+0x454>)
 80080d6:	61fb      	str	r3, [r7, #28]
        break;
 80080d8:	e00d      	b.n	80080f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080da:	f7fe fccb 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 80080de:	61f8      	str	r0, [r7, #28]
        break;
 80080e0:	e009      	b.n	80080f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080e6:	61fb      	str	r3, [r7, #28]
        break;
 80080e8:	e005      	b.n	80080f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d077      	beq.n	80081ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	005a      	lsls	r2, r3, #1
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	441a      	add	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	2b0f      	cmp	r3, #15
 8008116:	d916      	bls.n	8008146 <UART_SetConfig+0x392>
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811e:	d212      	bcs.n	8008146 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f023 030f 	bic.w	r3, r3, #15
 8008128:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	b29b      	uxth	r3, r3
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	b29a      	uxth	r2, r3
 8008136:	8afb      	ldrh	r3, [r7, #22]
 8008138:	4313      	orrs	r3, r2
 800813a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	8afa      	ldrh	r2, [r7, #22]
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	e052      	b.n	80081ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800814c:	e04e      	b.n	80081ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800814e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008152:	2b08      	cmp	r3, #8
 8008154:	d827      	bhi.n	80081a6 <UART_SetConfig+0x3f2>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0x3a8>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008181 	.word	0x08008181
 8008160:	08008189 	.word	0x08008189
 8008164:	08008191 	.word	0x08008191
 8008168:	080081a7 	.word	0x080081a7
 800816c:	08008197 	.word	0x08008197
 8008170:	080081a7 	.word	0x080081a7
 8008174:	080081a7 	.word	0x080081a7
 8008178:	080081a7 	.word	0x080081a7
 800817c:	0800819f 	.word	0x0800819f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fe fd10 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 8008184:	61f8      	str	r0, [r7, #28]
        break;
 8008186:	e014      	b.n	80081b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008188:	f7fe fd22 	bl	8006bd0 <HAL_RCC_GetPCLK2Freq>
 800818c:	61f8      	str	r0, [r7, #28]
        break;
 800818e:	e010      	b.n	80081b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008190:	4b1d      	ldr	r3, [pc, #116]	; (8008208 <UART_SetConfig+0x454>)
 8008192:	61fb      	str	r3, [r7, #28]
        break;
 8008194:	e00d      	b.n	80081b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008196:	f7fe fc6d 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 800819a:	61f8      	str	r0, [r7, #28]
        break;
 800819c:	e009      	b.n	80081b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800819e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a2:	61fb      	str	r3, [r7, #28]
        break;
 80081a4:	e005      	b.n	80081b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80081b0:	bf00      	nop
    }

    if (pclk != 0U)
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d019      	beq.n	80081ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	085a      	lsrs	r2, r3, #1
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	2b0f      	cmp	r3, #15
 80081d0:	d909      	bls.n	80081e6 <UART_SetConfig+0x432>
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d8:	d205      	bcs.n	80081e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60da      	str	r2, [r3, #12]
 80081e4:	e002      	b.n	80081ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80081f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3728      	adds	r7, #40	; 0x28
 8008200:	46bd      	mov	sp, r7
 8008202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008206:	bf00      	nop
 8008208:	00f42400 	.word	0x00f42400

0800820c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01a      	beq.n	8008322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830a:	d10a      	bne.n	8008322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	605a      	str	r2, [r3, #4]
  }
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af02      	add	r7, sp, #8
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008360:	f7fa fb00 	bl	8002964 <HAL_GetTick>
 8008364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b08      	cmp	r3, #8
 8008372:	d10e      	bne.n	8008392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f82d 	bl	80083e2 <UART_WaitOnFlagUntilTimeout>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e023      	b.n	80083da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b04      	cmp	r3, #4
 800839e:	d10e      	bne.n	80083be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f817 	bl	80083e2 <UART_WaitOnFlagUntilTimeout>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e00d      	b.n	80083da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2220      	movs	r2, #32
 80083c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b09c      	sub	sp, #112	; 0x70
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	4613      	mov	r3, r2
 80083f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f2:	e0a5      	b.n	8008540 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	f000 80a1 	beq.w	8008540 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fe:	f7fa fab1 	bl	8002964 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800840a:	429a      	cmp	r2, r3
 800840c:	d302      	bcc.n	8008414 <UART_WaitOnFlagUntilTimeout+0x32>
 800840e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008410:	2b00      	cmp	r3, #0
 8008412:	d13e      	bne.n	8008492 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008428:	667b      	str	r3, [r7, #100]	; 0x64
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e6      	bne.n	8008414 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	f023 0301 	bic.w	r3, r3, #1
 800845c:	663b      	str	r3, [r7, #96]	; 0x60
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3308      	adds	r3, #8
 8008464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008466:	64ba      	str	r2, [r7, #72]	; 0x48
 8008468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800846c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2220      	movs	r2, #32
 800847e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2220      	movs	r2, #32
 8008484:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e067      	b.n	8008562 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d04f      	beq.n	8008540 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ae:	d147      	bne.n	8008540 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
 80084da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e6      	bne.n	80084ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3308      	adds	r3, #8
 80084f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	e853 3f00 	ldrex	r3, [r3]
 80084fa:	613b      	str	r3, [r7, #16]
   return(result);
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	66bb      	str	r3, [r7, #104]	; 0x68
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3308      	adds	r3, #8
 800850a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800850c:	623a      	str	r2, [r7, #32]
 800850e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	69f9      	ldr	r1, [r7, #28]
 8008512:	6a3a      	ldr	r2, [r7, #32]
 8008514:	e841 2300 	strex	r3, r2, [r1]
 8008518:	61bb      	str	r3, [r7, #24]
   return(result);
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e5      	bne.n	80084ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2220      	movs	r2, #32
 8008524:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2220      	movs	r2, #32
 800852a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e010      	b.n	8008562 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69da      	ldr	r2, [r3, #28]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4013      	ands	r3, r2
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	429a      	cmp	r2, r3
 800854e:	bf0c      	ite	eq
 8008550:	2301      	moveq	r3, #1
 8008552:	2300      	movne	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	429a      	cmp	r2, r3
 800855c:	f43f af4a 	beq.w	80083f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3770      	adds	r7, #112	; 0x70
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800856c:	b480      	push	{r7}
 800856e:	b097      	sub	sp, #92	; 0x5c
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859e:	d10e      	bne.n	80085be <UART_Start_Receive_IT+0x52>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <UART_Start_Receive_IT+0x48>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085b2:	e02d      	b.n	8008610 <UART_Start_Receive_IT+0xa4>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	22ff      	movs	r2, #255	; 0xff
 80085b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085bc:	e028      	b.n	8008610 <UART_Start_Receive_IT+0xa4>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10d      	bne.n	80085e2 <UART_Start_Receive_IT+0x76>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <UART_Start_Receive_IT+0x6c>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	22ff      	movs	r2, #255	; 0xff
 80085d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085d6:	e01b      	b.n	8008610 <UART_Start_Receive_IT+0xa4>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	227f      	movs	r2, #127	; 0x7f
 80085dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085e0:	e016      	b.n	8008610 <UART_Start_Receive_IT+0xa4>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085ea:	d10d      	bne.n	8008608 <UART_Start_Receive_IT+0x9c>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <UART_Start_Receive_IT+0x92>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	227f      	movs	r2, #127	; 0x7f
 80085f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085fc:	e008      	b.n	8008610 <UART_Start_Receive_IT+0xa4>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	223f      	movs	r2, #63	; 0x3f
 8008602:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008606:	e003      	b.n	8008610 <UART_Start_Receive_IT+0xa4>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2222      	movs	r2, #34	; 0x22
 800861c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3308      	adds	r3, #8
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	f043 0301 	orr.w	r3, r3, #1
 8008634:	657b      	str	r3, [r7, #84]	; 0x54
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3308      	adds	r3, #8
 800863c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800863e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008640:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800864c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e5      	bne.n	800861e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800865a:	d107      	bne.n	800866c <UART_Start_Receive_IT+0x100>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d103      	bne.n	800866c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4a24      	ldr	r2, [pc, #144]	; (80086f8 <UART_Start_Receive_IT+0x18c>)
 8008668:	665a      	str	r2, [r3, #100]	; 0x64
 800866a:	e002      	b.n	8008672 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4a23      	ldr	r2, [pc, #140]	; (80086fc <UART_Start_Receive_IT+0x190>)
 8008670:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d019      	beq.n	80086b6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
 80086a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e6      	bne.n	8008682 <UART_Start_Receive_IT+0x116>
 80086b4:	e018      	b.n	80086e8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	613b      	str	r3, [r7, #16]
   return(result);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f043 0320 	orr.w	r3, r3, #32
 80086ca:	653b      	str	r3, [r7, #80]	; 0x50
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	69f9      	ldr	r1, [r7, #28]
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e6      	bne.n	80086b6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	375c      	adds	r7, #92	; 0x5c
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	08008b1f 	.word	0x08008b1f
 80086fc:	080089bf 	.word	0x080089bf

08008700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b095      	sub	sp, #84	; 0x54
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800871c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008726:	643b      	str	r3, [r7, #64]	; 0x40
 8008728:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800872c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	61fb      	str	r3, [r7, #28]
   return(result);
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	64bb      	str	r3, [r7, #72]	; 0x48
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800875a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008772:	2b01      	cmp	r3, #1
 8008774:	d118      	bne.n	80087a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	60bb      	str	r3, [r7, #8]
   return(result);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f023 0310 	bic.w	r3, r3, #16
 800878a:	647b      	str	r3, [r7, #68]	; 0x44
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6979      	ldr	r1, [r7, #20]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	613b      	str	r3, [r7, #16]
   return(result);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80087ba:	bf00      	nop
 80087bc:	3754      	adds	r7, #84	; 0x54
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff facf 	bl	8007d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ea:	bf00      	nop
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b08f      	sub	sp, #60	; 0x3c
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087fe:	2b21      	cmp	r3, #33	; 0x21
 8008800:	d14d      	bne.n	800889e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d132      	bne.n	8008874 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	61fb      	str	r3, [r7, #28]
   return(result);
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008822:	637b      	str	r3, [r7, #52]	; 0x34
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800882e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	60bb      	str	r3, [r7, #8]
   return(result);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008854:	633b      	str	r3, [r7, #48]	; 0x30
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	61bb      	str	r3, [r7, #24]
 8008860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6979      	ldr	r1, [r7, #20]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	613b      	str	r3, [r7, #16]
   return(result);
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008872:	e014      	b.n	800889e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	b292      	uxth	r2, r2
 8008880:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008892:	b29b      	uxth	r3, r3
 8008894:	3b01      	subs	r3, #1
 8008896:	b29a      	uxth	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800889e:	bf00      	nop
 80088a0:	373c      	adds	r7, #60	; 0x3c
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b091      	sub	sp, #68	; 0x44
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088b6:	2b21      	cmp	r3, #33	; 0x21
 80088b8:	d151      	bne.n	800895e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d132      	bne.n	800892c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	623b      	str	r3, [r7, #32]
   return(result);
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088da:	63bb      	str	r3, [r7, #56]	; 0x38
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	633b      	str	r3, [r7, #48]	; 0x30
 80088e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e6      	bne.n	80088c6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	60fb      	str	r3, [r7, #12]
   return(result);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	61fb      	str	r3, [r7, #28]
 8008918:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	69b9      	ldr	r1, [r7, #24]
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	617b      	str	r3, [r7, #20]
   return(result);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e6      	bne.n	80088f8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800892a:	e018      	b.n	800895e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008934:	881a      	ldrh	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800893e:	b292      	uxth	r2, r2
 8008940:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008946:	1c9a      	adds	r2, r3, #2
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800895e:	bf00      	nop
 8008960:	3744      	adds	r7, #68	; 0x44
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b088      	sub	sp, #32
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6979      	ldr	r1, [r7, #20]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	613b      	str	r3, [r7, #16]
   return(result);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e6      	bne.n	8008972 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff f9d5 	bl	8007d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b6:	bf00      	nop
 80089b8:	3720      	adds	r7, #32
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b096      	sub	sp, #88	; 0x58
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089d4:	2b22      	cmp	r3, #34	; 0x22
 80089d6:	f040 8094 	bne.w	8008b02 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089e8:	b2d9      	uxtb	r1, r3
 80089ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f4:	400a      	ands	r2, r1
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d179      	bne.n	8008b16 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a36:	653b      	str	r3, [r7, #80]	; 0x50
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a40:	647b      	str	r3, [r7, #68]	; 0x44
 8008a42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e6      	bne.n	8008a22 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3308      	adds	r3, #8
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	623b      	str	r3, [r7, #32]
   return(result);
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	f023 0301 	bic.w	r3, r3, #1
 8008a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3308      	adds	r3, #8
 8008a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a74:	633a      	str	r2, [r7, #48]	; 0x30
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e5      	bne.n	8008a54 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d12e      	bne.n	8008afa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0310 	bic.w	r3, r3, #16
 8008ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e6      	bne.n	8008aa2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f003 0310 	and.w	r3, r3, #16
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d103      	bne.n	8008aea <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7ff f952 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008af8:	e00d      	b.n	8008b16 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff f93a 	bl	8007d74 <HAL_UART_RxCpltCallback>
}
 8008b00:	e009      	b.n	8008b16 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	8b1b      	ldrh	r3, [r3, #24]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f042 0208 	orr.w	r2, r2, #8
 8008b12:	b292      	uxth	r2, r2
 8008b14:	831a      	strh	r2, [r3, #24]
}
 8008b16:	bf00      	nop
 8008b18:	3758      	adds	r7, #88	; 0x58
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b096      	sub	sp, #88	; 0x58
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b34:	2b22      	cmp	r3, #34	; 0x22
 8008b36:	f040 8094 	bne.w	8008c62 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b48:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b4a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b52:	4013      	ands	r3, r2
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	1c9a      	adds	r2, r3, #2
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d179      	bne.n	8008c76 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ba2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e6      	bne.n	8008b82 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	f023 0301 	bic.w	r3, r3, #1
 8008bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e5      	bne.n	8008bb4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d12e      	bne.n	8008c5a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	647b      	str	r3, [r7, #68]	; 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e6      	bne.n	8008c02 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f003 0310 	and.w	r3, r3, #16
 8008c3e:	2b10      	cmp	r3, #16
 8008c40:	d103      	bne.n	8008c4a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2210      	movs	r2, #16
 8008c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff f8a2 	bl	8007d9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c58:	e00d      	b.n	8008c76 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff f88a 	bl	8007d74 <HAL_UART_RxCpltCallback>
}
 8008c60:	e009      	b.n	8008c76 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	8b1b      	ldrh	r3, [r3, #24]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0208 	orr.w	r2, r2, #8
 8008c72:	b292      	uxth	r2, r2
 8008c74:	831a      	strh	r2, [r3, #24]
}
 8008c76:	bf00      	nop
 8008c78:	3758      	adds	r7, #88	; 0x58
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
	...

08008c94 <__errno>:
 8008c94:	4b01      	ldr	r3, [pc, #4]	; (8008c9c <__errno+0x8>)
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	2000000c 	.word	0x2000000c

08008ca0 <__libc_init_array>:
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	4d0d      	ldr	r5, [pc, #52]	; (8008cd8 <__libc_init_array+0x38>)
 8008ca4:	4c0d      	ldr	r4, [pc, #52]	; (8008cdc <__libc_init_array+0x3c>)
 8008ca6:	1b64      	subs	r4, r4, r5
 8008ca8:	10a4      	asrs	r4, r4, #2
 8008caa:	2600      	movs	r6, #0
 8008cac:	42a6      	cmp	r6, r4
 8008cae:	d109      	bne.n	8008cc4 <__libc_init_array+0x24>
 8008cb0:	4d0b      	ldr	r5, [pc, #44]	; (8008ce0 <__libc_init_array+0x40>)
 8008cb2:	4c0c      	ldr	r4, [pc, #48]	; (8008ce4 <__libc_init_array+0x44>)
 8008cb4:	f002 ffae 	bl	800bc14 <_init>
 8008cb8:	1b64      	subs	r4, r4, r5
 8008cba:	10a4      	asrs	r4, r4, #2
 8008cbc:	2600      	movs	r6, #0
 8008cbe:	42a6      	cmp	r6, r4
 8008cc0:	d105      	bne.n	8008cce <__libc_init_array+0x2e>
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc8:	4798      	blx	r3
 8008cca:	3601      	adds	r6, #1
 8008ccc:	e7ee      	b.n	8008cac <__libc_init_array+0xc>
 8008cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd2:	4798      	blx	r3
 8008cd4:	3601      	adds	r6, #1
 8008cd6:	e7f2      	b.n	8008cbe <__libc_init_array+0x1e>
 8008cd8:	0800c2f4 	.word	0x0800c2f4
 8008cdc:	0800c2f4 	.word	0x0800c2f4
 8008ce0:	0800c2f4 	.word	0x0800c2f4
 8008ce4:	0800c2f8 	.word	0x0800c2f8

08008ce8 <malloc>:
 8008ce8:	4b02      	ldr	r3, [pc, #8]	; (8008cf4 <malloc+0xc>)
 8008cea:	4601      	mov	r1, r0
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	f000 b87f 	b.w	8008df0 <_malloc_r>
 8008cf2:	bf00      	nop
 8008cf4:	2000000c 	.word	0x2000000c

08008cf8 <free>:
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <free+0xc>)
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f000 b80b 	b.w	8008d18 <_free_r>
 8008d02:	bf00      	nop
 8008d04:	2000000c 	.word	0x2000000c

08008d08 <memset>:
 8008d08:	4402      	add	r2, r0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d100      	bne.n	8008d12 <memset+0xa>
 8008d10:	4770      	bx	lr
 8008d12:	f803 1b01 	strb.w	r1, [r3], #1
 8008d16:	e7f9      	b.n	8008d0c <memset+0x4>

08008d18 <_free_r>:
 8008d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	d044      	beq.n	8008da8 <_free_r+0x90>
 8008d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d22:	9001      	str	r0, [sp, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f1a1 0404 	sub.w	r4, r1, #4
 8008d2a:	bfb8      	it	lt
 8008d2c:	18e4      	addlt	r4, r4, r3
 8008d2e:	f001 fccd 	bl	800a6cc <__malloc_lock>
 8008d32:	4a1e      	ldr	r2, [pc, #120]	; (8008dac <_free_r+0x94>)
 8008d34:	9801      	ldr	r0, [sp, #4]
 8008d36:	6813      	ldr	r3, [r2, #0]
 8008d38:	b933      	cbnz	r3, 8008d48 <_free_r+0x30>
 8008d3a:	6063      	str	r3, [r4, #4]
 8008d3c:	6014      	str	r4, [r2, #0]
 8008d3e:	b003      	add	sp, #12
 8008d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d44:	f001 bcc8 	b.w	800a6d8 <__malloc_unlock>
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	d908      	bls.n	8008d5e <_free_r+0x46>
 8008d4c:	6825      	ldr	r5, [r4, #0]
 8008d4e:	1961      	adds	r1, r4, r5
 8008d50:	428b      	cmp	r3, r1
 8008d52:	bf01      	itttt	eq
 8008d54:	6819      	ldreq	r1, [r3, #0]
 8008d56:	685b      	ldreq	r3, [r3, #4]
 8008d58:	1949      	addeq	r1, r1, r5
 8008d5a:	6021      	streq	r1, [r4, #0]
 8008d5c:	e7ed      	b.n	8008d3a <_free_r+0x22>
 8008d5e:	461a      	mov	r2, r3
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	b10b      	cbz	r3, 8008d68 <_free_r+0x50>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d9fa      	bls.n	8008d5e <_free_r+0x46>
 8008d68:	6811      	ldr	r1, [r2, #0]
 8008d6a:	1855      	adds	r5, r2, r1
 8008d6c:	42a5      	cmp	r5, r4
 8008d6e:	d10b      	bne.n	8008d88 <_free_r+0x70>
 8008d70:	6824      	ldr	r4, [r4, #0]
 8008d72:	4421      	add	r1, r4
 8008d74:	1854      	adds	r4, r2, r1
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	6011      	str	r1, [r2, #0]
 8008d7a:	d1e0      	bne.n	8008d3e <_free_r+0x26>
 8008d7c:	681c      	ldr	r4, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	6053      	str	r3, [r2, #4]
 8008d82:	4421      	add	r1, r4
 8008d84:	6011      	str	r1, [r2, #0]
 8008d86:	e7da      	b.n	8008d3e <_free_r+0x26>
 8008d88:	d902      	bls.n	8008d90 <_free_r+0x78>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	6003      	str	r3, [r0, #0]
 8008d8e:	e7d6      	b.n	8008d3e <_free_r+0x26>
 8008d90:	6825      	ldr	r5, [r4, #0]
 8008d92:	1961      	adds	r1, r4, r5
 8008d94:	428b      	cmp	r3, r1
 8008d96:	bf04      	itt	eq
 8008d98:	6819      	ldreq	r1, [r3, #0]
 8008d9a:	685b      	ldreq	r3, [r3, #4]
 8008d9c:	6063      	str	r3, [r4, #4]
 8008d9e:	bf04      	itt	eq
 8008da0:	1949      	addeq	r1, r1, r5
 8008da2:	6021      	streq	r1, [r4, #0]
 8008da4:	6054      	str	r4, [r2, #4]
 8008da6:	e7ca      	b.n	8008d3e <_free_r+0x26>
 8008da8:	b003      	add	sp, #12
 8008daa:	bd30      	pop	{r4, r5, pc}
 8008dac:	20000544 	.word	0x20000544

08008db0 <sbrk_aligned>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	4e0e      	ldr	r6, [pc, #56]	; (8008dec <sbrk_aligned+0x3c>)
 8008db4:	460c      	mov	r4, r1
 8008db6:	6831      	ldr	r1, [r6, #0]
 8008db8:	4605      	mov	r5, r0
 8008dba:	b911      	cbnz	r1, 8008dc2 <sbrk_aligned+0x12>
 8008dbc:	f000 fcf6 	bl	80097ac <_sbrk_r>
 8008dc0:	6030      	str	r0, [r6, #0]
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f000 fcf1 	bl	80097ac <_sbrk_r>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	d00a      	beq.n	8008de4 <sbrk_aligned+0x34>
 8008dce:	1cc4      	adds	r4, r0, #3
 8008dd0:	f024 0403 	bic.w	r4, r4, #3
 8008dd4:	42a0      	cmp	r0, r4
 8008dd6:	d007      	beq.n	8008de8 <sbrk_aligned+0x38>
 8008dd8:	1a21      	subs	r1, r4, r0
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f000 fce6 	bl	80097ac <_sbrk_r>
 8008de0:	3001      	adds	r0, #1
 8008de2:	d101      	bne.n	8008de8 <sbrk_aligned+0x38>
 8008de4:	f04f 34ff 	mov.w	r4, #4294967295
 8008de8:	4620      	mov	r0, r4
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	20000548 	.word	0x20000548

08008df0 <_malloc_r>:
 8008df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	1ccd      	adds	r5, r1, #3
 8008df6:	f025 0503 	bic.w	r5, r5, #3
 8008dfa:	3508      	adds	r5, #8
 8008dfc:	2d0c      	cmp	r5, #12
 8008dfe:	bf38      	it	cc
 8008e00:	250c      	movcc	r5, #12
 8008e02:	2d00      	cmp	r5, #0
 8008e04:	4607      	mov	r7, r0
 8008e06:	db01      	blt.n	8008e0c <_malloc_r+0x1c>
 8008e08:	42a9      	cmp	r1, r5
 8008e0a:	d905      	bls.n	8008e18 <_malloc_r+0x28>
 8008e0c:	230c      	movs	r3, #12
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	2600      	movs	r6, #0
 8008e12:	4630      	mov	r0, r6
 8008e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e18:	4e2e      	ldr	r6, [pc, #184]	; (8008ed4 <_malloc_r+0xe4>)
 8008e1a:	f001 fc57 	bl	800a6cc <__malloc_lock>
 8008e1e:	6833      	ldr	r3, [r6, #0]
 8008e20:	461c      	mov	r4, r3
 8008e22:	bb34      	cbnz	r4, 8008e72 <_malloc_r+0x82>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4638      	mov	r0, r7
 8008e28:	f7ff ffc2 	bl	8008db0 <sbrk_aligned>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	4604      	mov	r4, r0
 8008e30:	d14d      	bne.n	8008ece <_malloc_r+0xde>
 8008e32:	6834      	ldr	r4, [r6, #0]
 8008e34:	4626      	mov	r6, r4
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d140      	bne.n	8008ebc <_malloc_r+0xcc>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4638      	mov	r0, r7
 8008e40:	eb04 0803 	add.w	r8, r4, r3
 8008e44:	f000 fcb2 	bl	80097ac <_sbrk_r>
 8008e48:	4580      	cmp	r8, r0
 8008e4a:	d13a      	bne.n	8008ec2 <_malloc_r+0xd2>
 8008e4c:	6821      	ldr	r1, [r4, #0]
 8008e4e:	3503      	adds	r5, #3
 8008e50:	1a6d      	subs	r5, r5, r1
 8008e52:	f025 0503 	bic.w	r5, r5, #3
 8008e56:	3508      	adds	r5, #8
 8008e58:	2d0c      	cmp	r5, #12
 8008e5a:	bf38      	it	cc
 8008e5c:	250c      	movcc	r5, #12
 8008e5e:	4629      	mov	r1, r5
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7ff ffa5 	bl	8008db0 <sbrk_aligned>
 8008e66:	3001      	adds	r0, #1
 8008e68:	d02b      	beq.n	8008ec2 <_malloc_r+0xd2>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	442b      	add	r3, r5
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	e00e      	b.n	8008e90 <_malloc_r+0xa0>
 8008e72:	6822      	ldr	r2, [r4, #0]
 8008e74:	1b52      	subs	r2, r2, r5
 8008e76:	d41e      	bmi.n	8008eb6 <_malloc_r+0xc6>
 8008e78:	2a0b      	cmp	r2, #11
 8008e7a:	d916      	bls.n	8008eaa <_malloc_r+0xba>
 8008e7c:	1961      	adds	r1, r4, r5
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	6025      	str	r5, [r4, #0]
 8008e82:	bf18      	it	ne
 8008e84:	6059      	strne	r1, [r3, #4]
 8008e86:	6863      	ldr	r3, [r4, #4]
 8008e88:	bf08      	it	eq
 8008e8a:	6031      	streq	r1, [r6, #0]
 8008e8c:	5162      	str	r2, [r4, r5]
 8008e8e:	604b      	str	r3, [r1, #4]
 8008e90:	4638      	mov	r0, r7
 8008e92:	f104 060b 	add.w	r6, r4, #11
 8008e96:	f001 fc1f 	bl	800a6d8 <__malloc_unlock>
 8008e9a:	f026 0607 	bic.w	r6, r6, #7
 8008e9e:	1d23      	adds	r3, r4, #4
 8008ea0:	1af2      	subs	r2, r6, r3
 8008ea2:	d0b6      	beq.n	8008e12 <_malloc_r+0x22>
 8008ea4:	1b9b      	subs	r3, r3, r6
 8008ea6:	50a3      	str	r3, [r4, r2]
 8008ea8:	e7b3      	b.n	8008e12 <_malloc_r+0x22>
 8008eaa:	6862      	ldr	r2, [r4, #4]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	bf0c      	ite	eq
 8008eb0:	6032      	streq	r2, [r6, #0]
 8008eb2:	605a      	strne	r2, [r3, #4]
 8008eb4:	e7ec      	b.n	8008e90 <_malloc_r+0xa0>
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	6864      	ldr	r4, [r4, #4]
 8008eba:	e7b2      	b.n	8008e22 <_malloc_r+0x32>
 8008ebc:	4634      	mov	r4, r6
 8008ebe:	6876      	ldr	r6, [r6, #4]
 8008ec0:	e7b9      	b.n	8008e36 <_malloc_r+0x46>
 8008ec2:	230c      	movs	r3, #12
 8008ec4:	603b      	str	r3, [r7, #0]
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f001 fc06 	bl	800a6d8 <__malloc_unlock>
 8008ecc:	e7a1      	b.n	8008e12 <_malloc_r+0x22>
 8008ece:	6025      	str	r5, [r4, #0]
 8008ed0:	e7de      	b.n	8008e90 <_malloc_r+0xa0>
 8008ed2:	bf00      	nop
 8008ed4:	20000544 	.word	0x20000544

08008ed8 <__cvt>:
 8008ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008edc:	ec55 4b10 	vmov	r4, r5, d0
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	460e      	mov	r6, r1
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	462b      	mov	r3, r5
 8008ee8:	bfbb      	ittet	lt
 8008eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008eee:	461d      	movlt	r5, r3
 8008ef0:	2300      	movge	r3, #0
 8008ef2:	232d      	movlt	r3, #45	; 0x2d
 8008ef4:	700b      	strb	r3, [r1, #0]
 8008ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008efc:	4691      	mov	r9, r2
 8008efe:	f023 0820 	bic.w	r8, r3, #32
 8008f02:	bfbc      	itt	lt
 8008f04:	4622      	movlt	r2, r4
 8008f06:	4614      	movlt	r4, r2
 8008f08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f0c:	d005      	beq.n	8008f1a <__cvt+0x42>
 8008f0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f12:	d100      	bne.n	8008f16 <__cvt+0x3e>
 8008f14:	3601      	adds	r6, #1
 8008f16:	2102      	movs	r1, #2
 8008f18:	e000      	b.n	8008f1c <__cvt+0x44>
 8008f1a:	2103      	movs	r1, #3
 8008f1c:	ab03      	add	r3, sp, #12
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	ab02      	add	r3, sp, #8
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	ec45 4b10 	vmov	d0, r4, r5
 8008f28:	4653      	mov	r3, sl
 8008f2a:	4632      	mov	r2, r6
 8008f2c:	f000 fdbc 	bl	8009aa8 <_dtoa_r>
 8008f30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f34:	4607      	mov	r7, r0
 8008f36:	d102      	bne.n	8008f3e <__cvt+0x66>
 8008f38:	f019 0f01 	tst.w	r9, #1
 8008f3c:	d022      	beq.n	8008f84 <__cvt+0xac>
 8008f3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f42:	eb07 0906 	add.w	r9, r7, r6
 8008f46:	d110      	bne.n	8008f6a <__cvt+0x92>
 8008f48:	783b      	ldrb	r3, [r7, #0]
 8008f4a:	2b30      	cmp	r3, #48	; 0x30
 8008f4c:	d10a      	bne.n	8008f64 <__cvt+0x8c>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2300      	movs	r3, #0
 8008f52:	4620      	mov	r0, r4
 8008f54:	4629      	mov	r1, r5
 8008f56:	f7f7 fdc7 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f5a:	b918      	cbnz	r0, 8008f64 <__cvt+0x8c>
 8008f5c:	f1c6 0601 	rsb	r6, r6, #1
 8008f60:	f8ca 6000 	str.w	r6, [sl]
 8008f64:	f8da 3000 	ldr.w	r3, [sl]
 8008f68:	4499      	add	r9, r3
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fdb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f76:	b108      	cbz	r0, 8008f7c <__cvt+0xa4>
 8008f78:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f7c:	2230      	movs	r2, #48	; 0x30
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	454b      	cmp	r3, r9
 8008f82:	d307      	bcc.n	8008f94 <__cvt+0xbc>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f88:	1bdb      	subs	r3, r3, r7
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	b004      	add	sp, #16
 8008f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f94:	1c59      	adds	r1, r3, #1
 8008f96:	9103      	str	r1, [sp, #12]
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	e7f0      	b.n	8008f7e <__cvt+0xa6>

08008f9c <__exponent>:
 8008f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2900      	cmp	r1, #0
 8008fa2:	bfb8      	it	lt
 8008fa4:	4249      	neglt	r1, r1
 8008fa6:	f803 2b02 	strb.w	r2, [r3], #2
 8008faa:	bfb4      	ite	lt
 8008fac:	222d      	movlt	r2, #45	; 0x2d
 8008fae:	222b      	movge	r2, #43	; 0x2b
 8008fb0:	2909      	cmp	r1, #9
 8008fb2:	7042      	strb	r2, [r0, #1]
 8008fb4:	dd2a      	ble.n	800900c <__exponent+0x70>
 8008fb6:	f10d 0407 	add.w	r4, sp, #7
 8008fba:	46a4      	mov	ip, r4
 8008fbc:	270a      	movs	r7, #10
 8008fbe:	46a6      	mov	lr, r4
 8008fc0:	460a      	mov	r2, r1
 8008fc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008fc6:	fb07 1516 	mls	r5, r7, r6, r1
 8008fca:	3530      	adds	r5, #48	; 0x30
 8008fcc:	2a63      	cmp	r2, #99	; 0x63
 8008fce:	f104 34ff 	add.w	r4, r4, #4294967295
 8008fd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	dcf1      	bgt.n	8008fbe <__exponent+0x22>
 8008fda:	3130      	adds	r1, #48	; 0x30
 8008fdc:	f1ae 0502 	sub.w	r5, lr, #2
 8008fe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fe4:	1c44      	adds	r4, r0, #1
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4561      	cmp	r1, ip
 8008fea:	d30a      	bcc.n	8009002 <__exponent+0x66>
 8008fec:	f10d 0209 	add.w	r2, sp, #9
 8008ff0:	eba2 020e 	sub.w	r2, r2, lr
 8008ff4:	4565      	cmp	r5, ip
 8008ff6:	bf88      	it	hi
 8008ff8:	2200      	movhi	r2, #0
 8008ffa:	4413      	add	r3, r2
 8008ffc:	1a18      	subs	r0, r3, r0
 8008ffe:	b003      	add	sp, #12
 8009000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009006:	f804 2f01 	strb.w	r2, [r4, #1]!
 800900a:	e7ed      	b.n	8008fe8 <__exponent+0x4c>
 800900c:	2330      	movs	r3, #48	; 0x30
 800900e:	3130      	adds	r1, #48	; 0x30
 8009010:	7083      	strb	r3, [r0, #2]
 8009012:	70c1      	strb	r1, [r0, #3]
 8009014:	1d03      	adds	r3, r0, #4
 8009016:	e7f1      	b.n	8008ffc <__exponent+0x60>

08009018 <_printf_float>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	ed2d 8b02 	vpush	{d8}
 8009020:	b08d      	sub	sp, #52	; 0x34
 8009022:	460c      	mov	r4, r1
 8009024:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009028:	4616      	mov	r6, r2
 800902a:	461f      	mov	r7, r3
 800902c:	4605      	mov	r5, r0
 800902e:	f001 fb3b 	bl	800a6a8 <_localeconv_r>
 8009032:	f8d0 a000 	ldr.w	sl, [r0]
 8009036:	4650      	mov	r0, sl
 8009038:	f7f7 f8d4 	bl	80001e4 <strlen>
 800903c:	2300      	movs	r3, #0
 800903e:	930a      	str	r3, [sp, #40]	; 0x28
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	f8d8 3000 	ldr.w	r3, [r8]
 8009048:	f894 b018 	ldrb.w	fp, [r4, #24]
 800904c:	3307      	adds	r3, #7
 800904e:	f023 0307 	bic.w	r3, r3, #7
 8009052:	f103 0208 	add.w	r2, r3, #8
 8009056:	f8c8 2000 	str.w	r2, [r8]
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009062:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009066:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800906a:	9307      	str	r3, [sp, #28]
 800906c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009070:	ee08 0a10 	vmov	s16, r0
 8009074:	4b9f      	ldr	r3, [pc, #636]	; (80092f4 <_printf_float+0x2dc>)
 8009076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800907a:	f04f 32ff 	mov.w	r2, #4294967295
 800907e:	f7f7 fd65 	bl	8000b4c <__aeabi_dcmpun>
 8009082:	bb88      	cbnz	r0, 80090e8 <_printf_float+0xd0>
 8009084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009088:	4b9a      	ldr	r3, [pc, #616]	; (80092f4 <_printf_float+0x2dc>)
 800908a:	f04f 32ff 	mov.w	r2, #4294967295
 800908e:	f7f7 fd3f 	bl	8000b10 <__aeabi_dcmple>
 8009092:	bb48      	cbnz	r0, 80090e8 <_printf_float+0xd0>
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	4640      	mov	r0, r8
 800909a:	4649      	mov	r1, r9
 800909c:	f7f7 fd2e 	bl	8000afc <__aeabi_dcmplt>
 80090a0:	b110      	cbz	r0, 80090a8 <_printf_float+0x90>
 80090a2:	232d      	movs	r3, #45	; 0x2d
 80090a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a8:	4b93      	ldr	r3, [pc, #588]	; (80092f8 <_printf_float+0x2e0>)
 80090aa:	4894      	ldr	r0, [pc, #592]	; (80092fc <_printf_float+0x2e4>)
 80090ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090b0:	bf94      	ite	ls
 80090b2:	4698      	movls	r8, r3
 80090b4:	4680      	movhi	r8, r0
 80090b6:	2303      	movs	r3, #3
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	9b05      	ldr	r3, [sp, #20]
 80090bc:	f023 0204 	bic.w	r2, r3, #4
 80090c0:	6022      	str	r2, [r4, #0]
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	9700      	str	r7, [sp, #0]
 80090c8:	4633      	mov	r3, r6
 80090ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80090cc:	4621      	mov	r1, r4
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 f9d8 	bl	8009484 <_printf_common>
 80090d4:	3001      	adds	r0, #1
 80090d6:	f040 8090 	bne.w	80091fa <_printf_float+0x1e2>
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	b00d      	add	sp, #52	; 0x34
 80090e0:	ecbd 8b02 	vpop	{d8}
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	4640      	mov	r0, r8
 80090ee:	4649      	mov	r1, r9
 80090f0:	f7f7 fd2c 	bl	8000b4c <__aeabi_dcmpun>
 80090f4:	b140      	cbz	r0, 8009108 <_printf_float+0xf0>
 80090f6:	464b      	mov	r3, r9
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bfbc      	itt	lt
 80090fc:	232d      	movlt	r3, #45	; 0x2d
 80090fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009102:	487f      	ldr	r0, [pc, #508]	; (8009300 <_printf_float+0x2e8>)
 8009104:	4b7f      	ldr	r3, [pc, #508]	; (8009304 <_printf_float+0x2ec>)
 8009106:	e7d1      	b.n	80090ac <_printf_float+0x94>
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800910e:	9206      	str	r2, [sp, #24]
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	d13f      	bne.n	8009194 <_printf_float+0x17c>
 8009114:	2306      	movs	r3, #6
 8009116:	6063      	str	r3, [r4, #4]
 8009118:	9b05      	ldr	r3, [sp, #20]
 800911a:	6861      	ldr	r1, [r4, #4]
 800911c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009120:	2300      	movs	r3, #0
 8009122:	9303      	str	r3, [sp, #12]
 8009124:	ab0a      	add	r3, sp, #40	; 0x28
 8009126:	e9cd b301 	strd	fp, r3, [sp, #4]
 800912a:	ab09      	add	r3, sp, #36	; 0x24
 800912c:	ec49 8b10 	vmov	d0, r8, r9
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	6022      	str	r2, [r4, #0]
 8009134:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009138:	4628      	mov	r0, r5
 800913a:	f7ff fecd 	bl	8008ed8 <__cvt>
 800913e:	9b06      	ldr	r3, [sp, #24]
 8009140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009142:	2b47      	cmp	r3, #71	; 0x47
 8009144:	4680      	mov	r8, r0
 8009146:	d108      	bne.n	800915a <_printf_float+0x142>
 8009148:	1cc8      	adds	r0, r1, #3
 800914a:	db02      	blt.n	8009152 <_printf_float+0x13a>
 800914c:	6863      	ldr	r3, [r4, #4]
 800914e:	4299      	cmp	r1, r3
 8009150:	dd41      	ble.n	80091d6 <_printf_float+0x1be>
 8009152:	f1ab 0b02 	sub.w	fp, fp, #2
 8009156:	fa5f fb8b 	uxtb.w	fp, fp
 800915a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800915e:	d820      	bhi.n	80091a2 <_printf_float+0x18a>
 8009160:	3901      	subs	r1, #1
 8009162:	465a      	mov	r2, fp
 8009164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009168:	9109      	str	r1, [sp, #36]	; 0x24
 800916a:	f7ff ff17 	bl	8008f9c <__exponent>
 800916e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009170:	1813      	adds	r3, r2, r0
 8009172:	2a01      	cmp	r2, #1
 8009174:	4681      	mov	r9, r0
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	dc02      	bgt.n	8009180 <_printf_float+0x168>
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	07d2      	lsls	r2, r2, #31
 800917e:	d501      	bpl.n	8009184 <_printf_float+0x16c>
 8009180:	3301      	adds	r3, #1
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009188:	2b00      	cmp	r3, #0
 800918a:	d09c      	beq.n	80090c6 <_printf_float+0xae>
 800918c:	232d      	movs	r3, #45	; 0x2d
 800918e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009192:	e798      	b.n	80090c6 <_printf_float+0xae>
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	2a47      	cmp	r2, #71	; 0x47
 8009198:	d1be      	bne.n	8009118 <_printf_float+0x100>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1bc      	bne.n	8009118 <_printf_float+0x100>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7b9      	b.n	8009116 <_printf_float+0xfe>
 80091a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091a6:	d118      	bne.n	80091da <_printf_float+0x1c2>
 80091a8:	2900      	cmp	r1, #0
 80091aa:	6863      	ldr	r3, [r4, #4]
 80091ac:	dd0b      	ble.n	80091c6 <_printf_float+0x1ae>
 80091ae:	6121      	str	r1, [r4, #16]
 80091b0:	b913      	cbnz	r3, 80091b8 <_printf_float+0x1a0>
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	07d0      	lsls	r0, r2, #31
 80091b6:	d502      	bpl.n	80091be <_printf_float+0x1a6>
 80091b8:	3301      	adds	r3, #1
 80091ba:	440b      	add	r3, r1
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	65a1      	str	r1, [r4, #88]	; 0x58
 80091c0:	f04f 0900 	mov.w	r9, #0
 80091c4:	e7de      	b.n	8009184 <_printf_float+0x16c>
 80091c6:	b913      	cbnz	r3, 80091ce <_printf_float+0x1b6>
 80091c8:	6822      	ldr	r2, [r4, #0]
 80091ca:	07d2      	lsls	r2, r2, #31
 80091cc:	d501      	bpl.n	80091d2 <_printf_float+0x1ba>
 80091ce:	3302      	adds	r3, #2
 80091d0:	e7f4      	b.n	80091bc <_printf_float+0x1a4>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e7f2      	b.n	80091bc <_printf_float+0x1a4>
 80091d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091dc:	4299      	cmp	r1, r3
 80091de:	db05      	blt.n	80091ec <_printf_float+0x1d4>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	6121      	str	r1, [r4, #16]
 80091e4:	07d8      	lsls	r0, r3, #31
 80091e6:	d5ea      	bpl.n	80091be <_printf_float+0x1a6>
 80091e8:	1c4b      	adds	r3, r1, #1
 80091ea:	e7e7      	b.n	80091bc <_printf_float+0x1a4>
 80091ec:	2900      	cmp	r1, #0
 80091ee:	bfd4      	ite	le
 80091f0:	f1c1 0202 	rsble	r2, r1, #2
 80091f4:	2201      	movgt	r2, #1
 80091f6:	4413      	add	r3, r2
 80091f8:	e7e0      	b.n	80091bc <_printf_float+0x1a4>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	055a      	lsls	r2, r3, #21
 80091fe:	d407      	bmi.n	8009210 <_printf_float+0x1f8>
 8009200:	6923      	ldr	r3, [r4, #16]
 8009202:	4642      	mov	r2, r8
 8009204:	4631      	mov	r1, r6
 8009206:	4628      	mov	r0, r5
 8009208:	47b8      	blx	r7
 800920a:	3001      	adds	r0, #1
 800920c:	d12c      	bne.n	8009268 <_printf_float+0x250>
 800920e:	e764      	b.n	80090da <_printf_float+0xc2>
 8009210:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009214:	f240 80e0 	bls.w	80093d8 <_printf_float+0x3c0>
 8009218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800921c:	2200      	movs	r2, #0
 800921e:	2300      	movs	r3, #0
 8009220:	f7f7 fc62 	bl	8000ae8 <__aeabi_dcmpeq>
 8009224:	2800      	cmp	r0, #0
 8009226:	d034      	beq.n	8009292 <_printf_float+0x27a>
 8009228:	4a37      	ldr	r2, [pc, #220]	; (8009308 <_printf_float+0x2f0>)
 800922a:	2301      	movs	r3, #1
 800922c:	4631      	mov	r1, r6
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f af51 	beq.w	80090da <_printf_float+0xc2>
 8009238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800923c:	429a      	cmp	r2, r3
 800923e:	db02      	blt.n	8009246 <_printf_float+0x22e>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	07d8      	lsls	r0, r3, #31
 8009244:	d510      	bpl.n	8009268 <_printf_float+0x250>
 8009246:	ee18 3a10 	vmov	r3, s16
 800924a:	4652      	mov	r2, sl
 800924c:	4631      	mov	r1, r6
 800924e:	4628      	mov	r0, r5
 8009250:	47b8      	blx	r7
 8009252:	3001      	adds	r0, #1
 8009254:	f43f af41 	beq.w	80090da <_printf_float+0xc2>
 8009258:	f04f 0800 	mov.w	r8, #0
 800925c:	f104 091a 	add.w	r9, r4, #26
 8009260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009262:	3b01      	subs	r3, #1
 8009264:	4543      	cmp	r3, r8
 8009266:	dc09      	bgt.n	800927c <_printf_float+0x264>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	079b      	lsls	r3, r3, #30
 800926c:	f100 8105 	bmi.w	800947a <_printf_float+0x462>
 8009270:	68e0      	ldr	r0, [r4, #12]
 8009272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009274:	4298      	cmp	r0, r3
 8009276:	bfb8      	it	lt
 8009278:	4618      	movlt	r0, r3
 800927a:	e730      	b.n	80090de <_printf_float+0xc6>
 800927c:	2301      	movs	r3, #1
 800927e:	464a      	mov	r2, r9
 8009280:	4631      	mov	r1, r6
 8009282:	4628      	mov	r0, r5
 8009284:	47b8      	blx	r7
 8009286:	3001      	adds	r0, #1
 8009288:	f43f af27 	beq.w	80090da <_printf_float+0xc2>
 800928c:	f108 0801 	add.w	r8, r8, #1
 8009290:	e7e6      	b.n	8009260 <_printf_float+0x248>
 8009292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	dc39      	bgt.n	800930c <_printf_float+0x2f4>
 8009298:	4a1b      	ldr	r2, [pc, #108]	; (8009308 <_printf_float+0x2f0>)
 800929a:	2301      	movs	r3, #1
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f af19 	beq.w	80090da <_printf_float+0xc2>
 80092a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092ac:	4313      	orrs	r3, r2
 80092ae:	d102      	bne.n	80092b6 <_printf_float+0x29e>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	07d9      	lsls	r1, r3, #31
 80092b4:	d5d8      	bpl.n	8009268 <_printf_float+0x250>
 80092b6:	ee18 3a10 	vmov	r3, s16
 80092ba:	4652      	mov	r2, sl
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	f43f af09 	beq.w	80090da <_printf_float+0xc2>
 80092c8:	f04f 0900 	mov.w	r9, #0
 80092cc:	f104 0a1a 	add.w	sl, r4, #26
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	425b      	negs	r3, r3
 80092d4:	454b      	cmp	r3, r9
 80092d6:	dc01      	bgt.n	80092dc <_printf_float+0x2c4>
 80092d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092da:	e792      	b.n	8009202 <_printf_float+0x1ea>
 80092dc:	2301      	movs	r3, #1
 80092de:	4652      	mov	r2, sl
 80092e0:	4631      	mov	r1, r6
 80092e2:	4628      	mov	r0, r5
 80092e4:	47b8      	blx	r7
 80092e6:	3001      	adds	r0, #1
 80092e8:	f43f aef7 	beq.w	80090da <_printf_float+0xc2>
 80092ec:	f109 0901 	add.w	r9, r9, #1
 80092f0:	e7ee      	b.n	80092d0 <_printf_float+0x2b8>
 80092f2:	bf00      	nop
 80092f4:	7fefffff 	.word	0x7fefffff
 80092f8:	0800bfb0 	.word	0x0800bfb0
 80092fc:	0800bfb4 	.word	0x0800bfb4
 8009300:	0800bfbc 	.word	0x0800bfbc
 8009304:	0800bfb8 	.word	0x0800bfb8
 8009308:	0800bfc0 	.word	0x0800bfc0
 800930c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800930e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009310:	429a      	cmp	r2, r3
 8009312:	bfa8      	it	ge
 8009314:	461a      	movge	r2, r3
 8009316:	2a00      	cmp	r2, #0
 8009318:	4691      	mov	r9, r2
 800931a:	dc37      	bgt.n	800938c <_printf_float+0x374>
 800931c:	f04f 0b00 	mov.w	fp, #0
 8009320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009324:	f104 021a 	add.w	r2, r4, #26
 8009328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800932a:	9305      	str	r3, [sp, #20]
 800932c:	eba3 0309 	sub.w	r3, r3, r9
 8009330:	455b      	cmp	r3, fp
 8009332:	dc33      	bgt.n	800939c <_printf_float+0x384>
 8009334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009338:	429a      	cmp	r2, r3
 800933a:	db3b      	blt.n	80093b4 <_printf_float+0x39c>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	07da      	lsls	r2, r3, #31
 8009340:	d438      	bmi.n	80093b4 <_printf_float+0x39c>
 8009342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009344:	9a05      	ldr	r2, [sp, #20]
 8009346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009348:	1a9a      	subs	r2, r3, r2
 800934a:	eba3 0901 	sub.w	r9, r3, r1
 800934e:	4591      	cmp	r9, r2
 8009350:	bfa8      	it	ge
 8009352:	4691      	movge	r9, r2
 8009354:	f1b9 0f00 	cmp.w	r9, #0
 8009358:	dc35      	bgt.n	80093c6 <_printf_float+0x3ae>
 800935a:	f04f 0800 	mov.w	r8, #0
 800935e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009362:	f104 0a1a 	add.w	sl, r4, #26
 8009366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	eba3 0309 	sub.w	r3, r3, r9
 8009370:	4543      	cmp	r3, r8
 8009372:	f77f af79 	ble.w	8009268 <_printf_float+0x250>
 8009376:	2301      	movs	r3, #1
 8009378:	4652      	mov	r2, sl
 800937a:	4631      	mov	r1, r6
 800937c:	4628      	mov	r0, r5
 800937e:	47b8      	blx	r7
 8009380:	3001      	adds	r0, #1
 8009382:	f43f aeaa 	beq.w	80090da <_printf_float+0xc2>
 8009386:	f108 0801 	add.w	r8, r8, #1
 800938a:	e7ec      	b.n	8009366 <_printf_float+0x34e>
 800938c:	4613      	mov	r3, r2
 800938e:	4631      	mov	r1, r6
 8009390:	4642      	mov	r2, r8
 8009392:	4628      	mov	r0, r5
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	d1c0      	bne.n	800931c <_printf_float+0x304>
 800939a:	e69e      	b.n	80090da <_printf_float+0xc2>
 800939c:	2301      	movs	r3, #1
 800939e:	4631      	mov	r1, r6
 80093a0:	4628      	mov	r0, r5
 80093a2:	9205      	str	r2, [sp, #20]
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f ae97 	beq.w	80090da <_printf_float+0xc2>
 80093ac:	9a05      	ldr	r2, [sp, #20]
 80093ae:	f10b 0b01 	add.w	fp, fp, #1
 80093b2:	e7b9      	b.n	8009328 <_printf_float+0x310>
 80093b4:	ee18 3a10 	vmov	r3, s16
 80093b8:	4652      	mov	r2, sl
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	d1be      	bne.n	8009342 <_printf_float+0x32a>
 80093c4:	e689      	b.n	80090da <_printf_float+0xc2>
 80093c6:	9a05      	ldr	r2, [sp, #20]
 80093c8:	464b      	mov	r3, r9
 80093ca:	4442      	add	r2, r8
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	d1c1      	bne.n	800935a <_printf_float+0x342>
 80093d6:	e680      	b.n	80090da <_printf_float+0xc2>
 80093d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093da:	2a01      	cmp	r2, #1
 80093dc:	dc01      	bgt.n	80093e2 <_printf_float+0x3ca>
 80093de:	07db      	lsls	r3, r3, #31
 80093e0:	d538      	bpl.n	8009454 <_printf_float+0x43c>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4642      	mov	r2, r8
 80093e6:	4631      	mov	r1, r6
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	f43f ae74 	beq.w	80090da <_printf_float+0xc2>
 80093f2:	ee18 3a10 	vmov	r3, s16
 80093f6:	4652      	mov	r2, sl
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	f43f ae6b 	beq.w	80090da <_printf_float+0xc2>
 8009404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009408:	2200      	movs	r2, #0
 800940a:	2300      	movs	r3, #0
 800940c:	f7f7 fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009410:	b9d8      	cbnz	r0, 800944a <_printf_float+0x432>
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	f108 0201 	add.w	r2, r8, #1
 8009418:	3b01      	subs	r3, #1
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	d10e      	bne.n	8009442 <_printf_float+0x42a>
 8009424:	e659      	b.n	80090da <_printf_float+0xc2>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	f43f ae52 	beq.w	80090da <_printf_float+0xc2>
 8009436:	f108 0801 	add.w	r8, r8, #1
 800943a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943c:	3b01      	subs	r3, #1
 800943e:	4543      	cmp	r3, r8
 8009440:	dcf1      	bgt.n	8009426 <_printf_float+0x40e>
 8009442:	464b      	mov	r3, r9
 8009444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009448:	e6dc      	b.n	8009204 <_printf_float+0x1ec>
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	f104 0a1a 	add.w	sl, r4, #26
 8009452:	e7f2      	b.n	800943a <_printf_float+0x422>
 8009454:	2301      	movs	r3, #1
 8009456:	4642      	mov	r2, r8
 8009458:	e7df      	b.n	800941a <_printf_float+0x402>
 800945a:	2301      	movs	r3, #1
 800945c:	464a      	mov	r2, r9
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f ae38 	beq.w	80090da <_printf_float+0xc2>
 800946a:	f108 0801 	add.w	r8, r8, #1
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009472:	1a5b      	subs	r3, r3, r1
 8009474:	4543      	cmp	r3, r8
 8009476:	dcf0      	bgt.n	800945a <_printf_float+0x442>
 8009478:	e6fa      	b.n	8009270 <_printf_float+0x258>
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	f104 0919 	add.w	r9, r4, #25
 8009482:	e7f4      	b.n	800946e <_printf_float+0x456>

08009484 <_printf_common>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	4616      	mov	r6, r2
 800948a:	4699      	mov	r9, r3
 800948c:	688a      	ldr	r2, [r1, #8]
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009494:	4293      	cmp	r3, r2
 8009496:	bfb8      	it	lt
 8009498:	4613      	movlt	r3, r2
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094a0:	4607      	mov	r7, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	b10a      	cbz	r2, 80094aa <_printf_common+0x26>
 80094a6:	3301      	adds	r3, #1
 80094a8:	6033      	str	r3, [r6, #0]
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	0699      	lsls	r1, r3, #26
 80094ae:	bf42      	ittt	mi
 80094b0:	6833      	ldrmi	r3, [r6, #0]
 80094b2:	3302      	addmi	r3, #2
 80094b4:	6033      	strmi	r3, [r6, #0]
 80094b6:	6825      	ldr	r5, [r4, #0]
 80094b8:	f015 0506 	ands.w	r5, r5, #6
 80094bc:	d106      	bne.n	80094cc <_printf_common+0x48>
 80094be:	f104 0a19 	add.w	sl, r4, #25
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	6832      	ldr	r2, [r6, #0]
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dc26      	bgt.n	800951a <_printf_common+0x96>
 80094cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094d0:	1e13      	subs	r3, r2, #0
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	bf18      	it	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	0692      	lsls	r2, r2, #26
 80094da:	d42b      	bmi.n	8009534 <_printf_common+0xb0>
 80094dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094e0:	4649      	mov	r1, r9
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c0      	blx	r8
 80094e6:	3001      	adds	r0, #1
 80094e8:	d01e      	beq.n	8009528 <_printf_common+0xa4>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	68e5      	ldr	r5, [r4, #12]
 80094ee:	6832      	ldr	r2, [r6, #0]
 80094f0:	f003 0306 	and.w	r3, r3, #6
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	bf08      	it	eq
 80094f8:	1aad      	subeq	r5, r5, r2
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	6922      	ldr	r2, [r4, #16]
 80094fe:	bf0c      	ite	eq
 8009500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009504:	2500      	movne	r5, #0
 8009506:	4293      	cmp	r3, r2
 8009508:	bfc4      	itt	gt
 800950a:	1a9b      	subgt	r3, r3, r2
 800950c:	18ed      	addgt	r5, r5, r3
 800950e:	2600      	movs	r6, #0
 8009510:	341a      	adds	r4, #26
 8009512:	42b5      	cmp	r5, r6
 8009514:	d11a      	bne.n	800954c <_printf_common+0xc8>
 8009516:	2000      	movs	r0, #0
 8009518:	e008      	b.n	800952c <_printf_common+0xa8>
 800951a:	2301      	movs	r3, #1
 800951c:	4652      	mov	r2, sl
 800951e:	4649      	mov	r1, r9
 8009520:	4638      	mov	r0, r7
 8009522:	47c0      	blx	r8
 8009524:	3001      	adds	r0, #1
 8009526:	d103      	bne.n	8009530 <_printf_common+0xac>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009530:	3501      	adds	r5, #1
 8009532:	e7c6      	b.n	80094c2 <_printf_common+0x3e>
 8009534:	18e1      	adds	r1, r4, r3
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	2030      	movs	r0, #48	; 0x30
 800953a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800953e:	4422      	add	r2, r4
 8009540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009548:	3302      	adds	r3, #2
 800954a:	e7c7      	b.n	80094dc <_printf_common+0x58>
 800954c:	2301      	movs	r3, #1
 800954e:	4622      	mov	r2, r4
 8009550:	4649      	mov	r1, r9
 8009552:	4638      	mov	r0, r7
 8009554:	47c0      	blx	r8
 8009556:	3001      	adds	r0, #1
 8009558:	d0e6      	beq.n	8009528 <_printf_common+0xa4>
 800955a:	3601      	adds	r6, #1
 800955c:	e7d9      	b.n	8009512 <_printf_common+0x8e>
	...

08009560 <_printf_i>:
 8009560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	7e0f      	ldrb	r7, [r1, #24]
 8009566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009568:	2f78      	cmp	r7, #120	; 0x78
 800956a:	4691      	mov	r9, r2
 800956c:	4680      	mov	r8, r0
 800956e:	460c      	mov	r4, r1
 8009570:	469a      	mov	sl, r3
 8009572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009576:	d807      	bhi.n	8009588 <_printf_i+0x28>
 8009578:	2f62      	cmp	r7, #98	; 0x62
 800957a:	d80a      	bhi.n	8009592 <_printf_i+0x32>
 800957c:	2f00      	cmp	r7, #0
 800957e:	f000 80d8 	beq.w	8009732 <_printf_i+0x1d2>
 8009582:	2f58      	cmp	r7, #88	; 0x58
 8009584:	f000 80a3 	beq.w	80096ce <_printf_i+0x16e>
 8009588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800958c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009590:	e03a      	b.n	8009608 <_printf_i+0xa8>
 8009592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009596:	2b15      	cmp	r3, #21
 8009598:	d8f6      	bhi.n	8009588 <_printf_i+0x28>
 800959a:	a101      	add	r1, pc, #4	; (adr r1, 80095a0 <_printf_i+0x40>)
 800959c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a0:	080095f9 	.word	0x080095f9
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	08009589 	.word	0x08009589
 80095ac:	08009589 	.word	0x08009589
 80095b0:	08009589 	.word	0x08009589
 80095b4:	08009589 	.word	0x08009589
 80095b8:	0800960d 	.word	0x0800960d
 80095bc:	08009589 	.word	0x08009589
 80095c0:	08009589 	.word	0x08009589
 80095c4:	08009589 	.word	0x08009589
 80095c8:	08009589 	.word	0x08009589
 80095cc:	08009719 	.word	0x08009719
 80095d0:	0800963d 	.word	0x0800963d
 80095d4:	080096fb 	.word	0x080096fb
 80095d8:	08009589 	.word	0x08009589
 80095dc:	08009589 	.word	0x08009589
 80095e0:	0800973b 	.word	0x0800973b
 80095e4:	08009589 	.word	0x08009589
 80095e8:	0800963d 	.word	0x0800963d
 80095ec:	08009589 	.word	0x08009589
 80095f0:	08009589 	.word	0x08009589
 80095f4:	08009703 	.word	0x08009703
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	1d1a      	adds	r2, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	602a      	str	r2, [r5, #0]
 8009600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009608:	2301      	movs	r3, #1
 800960a:	e0a3      	b.n	8009754 <_printf_i+0x1f4>
 800960c:	6820      	ldr	r0, [r4, #0]
 800960e:	6829      	ldr	r1, [r5, #0]
 8009610:	0606      	lsls	r6, r0, #24
 8009612:	f101 0304 	add.w	r3, r1, #4
 8009616:	d50a      	bpl.n	800962e <_printf_i+0xce>
 8009618:	680e      	ldr	r6, [r1, #0]
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	2e00      	cmp	r6, #0
 800961e:	da03      	bge.n	8009628 <_printf_i+0xc8>
 8009620:	232d      	movs	r3, #45	; 0x2d
 8009622:	4276      	negs	r6, r6
 8009624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009628:	485e      	ldr	r0, [pc, #376]	; (80097a4 <_printf_i+0x244>)
 800962a:	230a      	movs	r3, #10
 800962c:	e019      	b.n	8009662 <_printf_i+0x102>
 800962e:	680e      	ldr	r6, [r1, #0]
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009636:	bf18      	it	ne
 8009638:	b236      	sxthne	r6, r6
 800963a:	e7ef      	b.n	800961c <_printf_i+0xbc>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	6820      	ldr	r0, [r4, #0]
 8009640:	1d19      	adds	r1, r3, #4
 8009642:	6029      	str	r1, [r5, #0]
 8009644:	0601      	lsls	r1, r0, #24
 8009646:	d501      	bpl.n	800964c <_printf_i+0xec>
 8009648:	681e      	ldr	r6, [r3, #0]
 800964a:	e002      	b.n	8009652 <_printf_i+0xf2>
 800964c:	0646      	lsls	r6, r0, #25
 800964e:	d5fb      	bpl.n	8009648 <_printf_i+0xe8>
 8009650:	881e      	ldrh	r6, [r3, #0]
 8009652:	4854      	ldr	r0, [pc, #336]	; (80097a4 <_printf_i+0x244>)
 8009654:	2f6f      	cmp	r7, #111	; 0x6f
 8009656:	bf0c      	ite	eq
 8009658:	2308      	moveq	r3, #8
 800965a:	230a      	movne	r3, #10
 800965c:	2100      	movs	r1, #0
 800965e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009662:	6865      	ldr	r5, [r4, #4]
 8009664:	60a5      	str	r5, [r4, #8]
 8009666:	2d00      	cmp	r5, #0
 8009668:	bfa2      	ittt	ge
 800966a:	6821      	ldrge	r1, [r4, #0]
 800966c:	f021 0104 	bicge.w	r1, r1, #4
 8009670:	6021      	strge	r1, [r4, #0]
 8009672:	b90e      	cbnz	r6, 8009678 <_printf_i+0x118>
 8009674:	2d00      	cmp	r5, #0
 8009676:	d04d      	beq.n	8009714 <_printf_i+0x1b4>
 8009678:	4615      	mov	r5, r2
 800967a:	fbb6 f1f3 	udiv	r1, r6, r3
 800967e:	fb03 6711 	mls	r7, r3, r1, r6
 8009682:	5dc7      	ldrb	r7, [r0, r7]
 8009684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009688:	4637      	mov	r7, r6
 800968a:	42bb      	cmp	r3, r7
 800968c:	460e      	mov	r6, r1
 800968e:	d9f4      	bls.n	800967a <_printf_i+0x11a>
 8009690:	2b08      	cmp	r3, #8
 8009692:	d10b      	bne.n	80096ac <_printf_i+0x14c>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	07de      	lsls	r6, r3, #31
 8009698:	d508      	bpl.n	80096ac <_printf_i+0x14c>
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	6861      	ldr	r1, [r4, #4]
 800969e:	4299      	cmp	r1, r3
 80096a0:	bfde      	ittt	le
 80096a2:	2330      	movle	r3, #48	; 0x30
 80096a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096ac:	1b52      	subs	r2, r2, r5
 80096ae:	6122      	str	r2, [r4, #16]
 80096b0:	f8cd a000 	str.w	sl, [sp]
 80096b4:	464b      	mov	r3, r9
 80096b6:	aa03      	add	r2, sp, #12
 80096b8:	4621      	mov	r1, r4
 80096ba:	4640      	mov	r0, r8
 80096bc:	f7ff fee2 	bl	8009484 <_printf_common>
 80096c0:	3001      	adds	r0, #1
 80096c2:	d14c      	bne.n	800975e <_printf_i+0x1fe>
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295
 80096c8:	b004      	add	sp, #16
 80096ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ce:	4835      	ldr	r0, [pc, #212]	; (80097a4 <_printf_i+0x244>)
 80096d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80096d4:	6829      	ldr	r1, [r5, #0]
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80096dc:	6029      	str	r1, [r5, #0]
 80096de:	061d      	lsls	r5, r3, #24
 80096e0:	d514      	bpl.n	800970c <_printf_i+0x1ac>
 80096e2:	07df      	lsls	r7, r3, #31
 80096e4:	bf44      	itt	mi
 80096e6:	f043 0320 	orrmi.w	r3, r3, #32
 80096ea:	6023      	strmi	r3, [r4, #0]
 80096ec:	b91e      	cbnz	r6, 80096f6 <_printf_i+0x196>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	f023 0320 	bic.w	r3, r3, #32
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	2310      	movs	r3, #16
 80096f8:	e7b0      	b.n	800965c <_printf_i+0xfc>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	f043 0320 	orr.w	r3, r3, #32
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	2378      	movs	r3, #120	; 0x78
 8009704:	4828      	ldr	r0, [pc, #160]	; (80097a8 <_printf_i+0x248>)
 8009706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800970a:	e7e3      	b.n	80096d4 <_printf_i+0x174>
 800970c:	0659      	lsls	r1, r3, #25
 800970e:	bf48      	it	mi
 8009710:	b2b6      	uxthmi	r6, r6
 8009712:	e7e6      	b.n	80096e2 <_printf_i+0x182>
 8009714:	4615      	mov	r5, r2
 8009716:	e7bb      	b.n	8009690 <_printf_i+0x130>
 8009718:	682b      	ldr	r3, [r5, #0]
 800971a:	6826      	ldr	r6, [r4, #0]
 800971c:	6961      	ldr	r1, [r4, #20]
 800971e:	1d18      	adds	r0, r3, #4
 8009720:	6028      	str	r0, [r5, #0]
 8009722:	0635      	lsls	r5, r6, #24
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	d501      	bpl.n	800972c <_printf_i+0x1cc>
 8009728:	6019      	str	r1, [r3, #0]
 800972a:	e002      	b.n	8009732 <_printf_i+0x1d2>
 800972c:	0670      	lsls	r0, r6, #25
 800972e:	d5fb      	bpl.n	8009728 <_printf_i+0x1c8>
 8009730:	8019      	strh	r1, [r3, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	4615      	mov	r5, r2
 8009738:	e7ba      	b.n	80096b0 <_printf_i+0x150>
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	1d1a      	adds	r2, r3, #4
 800973e:	602a      	str	r2, [r5, #0]
 8009740:	681d      	ldr	r5, [r3, #0]
 8009742:	6862      	ldr	r2, [r4, #4]
 8009744:	2100      	movs	r1, #0
 8009746:	4628      	mov	r0, r5
 8009748:	f7f6 fd5a 	bl	8000200 <memchr>
 800974c:	b108      	cbz	r0, 8009752 <_printf_i+0x1f2>
 800974e:	1b40      	subs	r0, r0, r5
 8009750:	6060      	str	r0, [r4, #4]
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	2300      	movs	r3, #0
 8009758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975c:	e7a8      	b.n	80096b0 <_printf_i+0x150>
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	462a      	mov	r2, r5
 8009762:	4649      	mov	r1, r9
 8009764:	4640      	mov	r0, r8
 8009766:	47d0      	blx	sl
 8009768:	3001      	adds	r0, #1
 800976a:	d0ab      	beq.n	80096c4 <_printf_i+0x164>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	079b      	lsls	r3, r3, #30
 8009770:	d413      	bmi.n	800979a <_printf_i+0x23a>
 8009772:	68e0      	ldr	r0, [r4, #12]
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	4298      	cmp	r0, r3
 8009778:	bfb8      	it	lt
 800977a:	4618      	movlt	r0, r3
 800977c:	e7a4      	b.n	80096c8 <_printf_i+0x168>
 800977e:	2301      	movs	r3, #1
 8009780:	4632      	mov	r2, r6
 8009782:	4649      	mov	r1, r9
 8009784:	4640      	mov	r0, r8
 8009786:	47d0      	blx	sl
 8009788:	3001      	adds	r0, #1
 800978a:	d09b      	beq.n	80096c4 <_printf_i+0x164>
 800978c:	3501      	adds	r5, #1
 800978e:	68e3      	ldr	r3, [r4, #12]
 8009790:	9903      	ldr	r1, [sp, #12]
 8009792:	1a5b      	subs	r3, r3, r1
 8009794:	42ab      	cmp	r3, r5
 8009796:	dcf2      	bgt.n	800977e <_printf_i+0x21e>
 8009798:	e7eb      	b.n	8009772 <_printf_i+0x212>
 800979a:	2500      	movs	r5, #0
 800979c:	f104 0619 	add.w	r6, r4, #25
 80097a0:	e7f5      	b.n	800978e <_printf_i+0x22e>
 80097a2:	bf00      	nop
 80097a4:	0800bfc2 	.word	0x0800bfc2
 80097a8:	0800bfd3 	.word	0x0800bfd3

080097ac <_sbrk_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d06      	ldr	r5, [pc, #24]	; (80097c8 <_sbrk_r+0x1c>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f8 fffa 	bl	80027b0 <_sbrk>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_sbrk_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_sbrk_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	2000054c 	.word	0x2000054c

080097cc <sniprintf>:
 80097cc:	b40c      	push	{r2, r3}
 80097ce:	b530      	push	{r4, r5, lr}
 80097d0:	4b17      	ldr	r3, [pc, #92]	; (8009830 <sniprintf+0x64>)
 80097d2:	1e0c      	subs	r4, r1, #0
 80097d4:	681d      	ldr	r5, [r3, #0]
 80097d6:	b09d      	sub	sp, #116	; 0x74
 80097d8:	da08      	bge.n	80097ec <sniprintf+0x20>
 80097da:	238b      	movs	r3, #139	; 0x8b
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	f04f 30ff 	mov.w	r0, #4294967295
 80097e2:	b01d      	add	sp, #116	; 0x74
 80097e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097e8:	b002      	add	sp, #8
 80097ea:	4770      	bx	lr
 80097ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80097f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80097f4:	bf14      	ite	ne
 80097f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097fa:	4623      	moveq	r3, r4
 80097fc:	9304      	str	r3, [sp, #16]
 80097fe:	9307      	str	r3, [sp, #28]
 8009800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009804:	9002      	str	r0, [sp, #8]
 8009806:	9006      	str	r0, [sp, #24]
 8009808:	f8ad 3016 	strh.w	r3, [sp, #22]
 800980c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800980e:	ab21      	add	r3, sp, #132	; 0x84
 8009810:	a902      	add	r1, sp, #8
 8009812:	4628      	mov	r0, r5
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	f001 fb5b 	bl	800aed0 <_svfiprintf_r>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	bfbc      	itt	lt
 800981e:	238b      	movlt	r3, #139	; 0x8b
 8009820:	602b      	strlt	r3, [r5, #0]
 8009822:	2c00      	cmp	r4, #0
 8009824:	d0dd      	beq.n	80097e2 <sniprintf+0x16>
 8009826:	9b02      	ldr	r3, [sp, #8]
 8009828:	2200      	movs	r2, #0
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e7d9      	b.n	80097e2 <sniprintf+0x16>
 800982e:	bf00      	nop
 8009830:	2000000c 	.word	0x2000000c

08009834 <siprintf>:
 8009834:	b40e      	push	{r1, r2, r3}
 8009836:	b500      	push	{lr}
 8009838:	b09c      	sub	sp, #112	; 0x70
 800983a:	ab1d      	add	r3, sp, #116	; 0x74
 800983c:	9002      	str	r0, [sp, #8]
 800983e:	9006      	str	r0, [sp, #24]
 8009840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009844:	4809      	ldr	r0, [pc, #36]	; (800986c <siprintf+0x38>)
 8009846:	9107      	str	r1, [sp, #28]
 8009848:	9104      	str	r1, [sp, #16]
 800984a:	4909      	ldr	r1, [pc, #36]	; (8009870 <siprintf+0x3c>)
 800984c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009850:	9105      	str	r1, [sp, #20]
 8009852:	6800      	ldr	r0, [r0, #0]
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	a902      	add	r1, sp, #8
 8009858:	f001 fb3a 	bl	800aed0 <_svfiprintf_r>
 800985c:	9b02      	ldr	r3, [sp, #8]
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]
 8009862:	b01c      	add	sp, #112	; 0x70
 8009864:	f85d eb04 	ldr.w	lr, [sp], #4
 8009868:	b003      	add	sp, #12
 800986a:	4770      	bx	lr
 800986c:	2000000c 	.word	0x2000000c
 8009870:	ffff0208 	.word	0xffff0208

08009874 <strncpy>:
 8009874:	b510      	push	{r4, lr}
 8009876:	3901      	subs	r1, #1
 8009878:	4603      	mov	r3, r0
 800987a:	b132      	cbz	r2, 800988a <strncpy+0x16>
 800987c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009880:	f803 4b01 	strb.w	r4, [r3], #1
 8009884:	3a01      	subs	r2, #1
 8009886:	2c00      	cmp	r4, #0
 8009888:	d1f7      	bne.n	800987a <strncpy+0x6>
 800988a:	441a      	add	r2, r3
 800988c:	2100      	movs	r1, #0
 800988e:	4293      	cmp	r3, r2
 8009890:	d100      	bne.n	8009894 <strncpy+0x20>
 8009892:	bd10      	pop	{r4, pc}
 8009894:	f803 1b01 	strb.w	r1, [r3], #1
 8009898:	e7f9      	b.n	800988e <strncpy+0x1a>
	...

0800989c <strtok>:
 800989c:	4b16      	ldr	r3, [pc, #88]	; (80098f8 <strtok+0x5c>)
 800989e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098a0:	681e      	ldr	r6, [r3, #0]
 80098a2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80098a4:	4605      	mov	r5, r0
 80098a6:	b9fc      	cbnz	r4, 80098e8 <strtok+0x4c>
 80098a8:	2050      	movs	r0, #80	; 0x50
 80098aa:	9101      	str	r1, [sp, #4]
 80098ac:	f7ff fa1c 	bl	8008ce8 <malloc>
 80098b0:	9901      	ldr	r1, [sp, #4]
 80098b2:	65b0      	str	r0, [r6, #88]	; 0x58
 80098b4:	4602      	mov	r2, r0
 80098b6:	b920      	cbnz	r0, 80098c2 <strtok+0x26>
 80098b8:	4b10      	ldr	r3, [pc, #64]	; (80098fc <strtok+0x60>)
 80098ba:	4811      	ldr	r0, [pc, #68]	; (8009900 <strtok+0x64>)
 80098bc:	2157      	movs	r1, #87	; 0x57
 80098be:	f000 f849 	bl	8009954 <__assert_func>
 80098c2:	e9c0 4400 	strd	r4, r4, [r0]
 80098c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80098ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80098ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80098d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80098d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80098da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80098de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80098e2:	6184      	str	r4, [r0, #24]
 80098e4:	7704      	strb	r4, [r0, #28]
 80098e6:	6244      	str	r4, [r0, #36]	; 0x24
 80098e8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80098ea:	2301      	movs	r3, #1
 80098ec:	4628      	mov	r0, r5
 80098ee:	b002      	add	sp, #8
 80098f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098f4:	f000 b806 	b.w	8009904 <__strtok_r>
 80098f8:	2000000c 	.word	0x2000000c
 80098fc:	0800bfe4 	.word	0x0800bfe4
 8009900:	0800bffb 	.word	0x0800bffb

08009904 <__strtok_r>:
 8009904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009906:	b908      	cbnz	r0, 800990c <__strtok_r+0x8>
 8009908:	6810      	ldr	r0, [r2, #0]
 800990a:	b188      	cbz	r0, 8009930 <__strtok_r+0x2c>
 800990c:	4604      	mov	r4, r0
 800990e:	4620      	mov	r0, r4
 8009910:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009914:	460f      	mov	r7, r1
 8009916:	f817 6b01 	ldrb.w	r6, [r7], #1
 800991a:	b91e      	cbnz	r6, 8009924 <__strtok_r+0x20>
 800991c:	b965      	cbnz	r5, 8009938 <__strtok_r+0x34>
 800991e:	6015      	str	r5, [r2, #0]
 8009920:	4628      	mov	r0, r5
 8009922:	e005      	b.n	8009930 <__strtok_r+0x2c>
 8009924:	42b5      	cmp	r5, r6
 8009926:	d1f6      	bne.n	8009916 <__strtok_r+0x12>
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1f0      	bne.n	800990e <__strtok_r+0xa>
 800992c:	6014      	str	r4, [r2, #0]
 800992e:	7003      	strb	r3, [r0, #0]
 8009930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009932:	461c      	mov	r4, r3
 8009934:	e00c      	b.n	8009950 <__strtok_r+0x4c>
 8009936:	b915      	cbnz	r5, 800993e <__strtok_r+0x3a>
 8009938:	f814 3b01 	ldrb.w	r3, [r4], #1
 800993c:	460e      	mov	r6, r1
 800993e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009942:	42ab      	cmp	r3, r5
 8009944:	d1f7      	bne.n	8009936 <__strtok_r+0x32>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0f3      	beq.n	8009932 <__strtok_r+0x2e>
 800994a:	2300      	movs	r3, #0
 800994c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009950:	6014      	str	r4, [r2, #0]
 8009952:	e7ed      	b.n	8009930 <__strtok_r+0x2c>

08009954 <__assert_func>:
 8009954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009956:	4614      	mov	r4, r2
 8009958:	461a      	mov	r2, r3
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <__assert_func+0x2c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4605      	mov	r5, r0
 8009960:	68d8      	ldr	r0, [r3, #12]
 8009962:	b14c      	cbz	r4, 8009978 <__assert_func+0x24>
 8009964:	4b07      	ldr	r3, [pc, #28]	; (8009984 <__assert_func+0x30>)
 8009966:	9100      	str	r1, [sp, #0]
 8009968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800996c:	4906      	ldr	r1, [pc, #24]	; (8009988 <__assert_func+0x34>)
 800996e:	462b      	mov	r3, r5
 8009970:	f000 fe88 	bl	800a684 <fiprintf>
 8009974:	f001 fdc6 	bl	800b504 <abort>
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <__assert_func+0x38>)
 800997a:	461c      	mov	r4, r3
 800997c:	e7f3      	b.n	8009966 <__assert_func+0x12>
 800997e:	bf00      	nop
 8009980:	2000000c 	.word	0x2000000c
 8009984:	0800c058 	.word	0x0800c058
 8009988:	0800c065 	.word	0x0800c065
 800998c:	0800c093 	.word	0x0800c093

08009990 <quorem>:
 8009990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	6903      	ldr	r3, [r0, #16]
 8009996:	690c      	ldr	r4, [r1, #16]
 8009998:	42a3      	cmp	r3, r4
 800999a:	4607      	mov	r7, r0
 800999c:	f2c0 8081 	blt.w	8009aa2 <quorem+0x112>
 80099a0:	3c01      	subs	r4, #1
 80099a2:	f101 0814 	add.w	r8, r1, #20
 80099a6:	f100 0514 	add.w	r5, r0, #20
 80099aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80099b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099b8:	3301      	adds	r3, #1
 80099ba:	429a      	cmp	r2, r3
 80099bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80099c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80099c8:	d331      	bcc.n	8009a2e <quorem+0x9e>
 80099ca:	f04f 0e00 	mov.w	lr, #0
 80099ce:	4640      	mov	r0, r8
 80099d0:	46ac      	mov	ip, r5
 80099d2:	46f2      	mov	sl, lr
 80099d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80099d8:	b293      	uxth	r3, r2
 80099da:	fb06 e303 	mla	r3, r6, r3, lr
 80099de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	ebaa 0303 	sub.w	r3, sl, r3
 80099e8:	f8dc a000 	ldr.w	sl, [ip]
 80099ec:	0c12      	lsrs	r2, r2, #16
 80099ee:	fa13 f38a 	uxtah	r3, r3, sl
 80099f2:	fb06 e202 	mla	r2, r6, r2, lr
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	9b00      	ldr	r3, [sp, #0]
 80099fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099fe:	b292      	uxth	r2, r2
 8009a00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a08:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a0c:	4581      	cmp	r9, r0
 8009a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a12:	f84c 3b04 	str.w	r3, [ip], #4
 8009a16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a1a:	d2db      	bcs.n	80099d4 <quorem+0x44>
 8009a1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009a20:	b92b      	cbnz	r3, 8009a2e <quorem+0x9e>
 8009a22:	9b01      	ldr	r3, [sp, #4]
 8009a24:	3b04      	subs	r3, #4
 8009a26:	429d      	cmp	r5, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	d32e      	bcc.n	8009a8a <quorem+0xfa>
 8009a2c:	613c      	str	r4, [r7, #16]
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f001 f8da 	bl	800abe8 <__mcmp>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	db24      	blt.n	8009a82 <quorem+0xf2>
 8009a38:	3601      	adds	r6, #1
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f04f 0c00 	mov.w	ip, #0
 8009a40:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a44:	f8d0 e000 	ldr.w	lr, [r0]
 8009a48:	b293      	uxth	r3, r2
 8009a4a:	ebac 0303 	sub.w	r3, ip, r3
 8009a4e:	0c12      	lsrs	r2, r2, #16
 8009a50:	fa13 f38e 	uxtah	r3, r3, lr
 8009a54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a62:	45c1      	cmp	r9, r8
 8009a64:	f840 3b04 	str.w	r3, [r0], #4
 8009a68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a6c:	d2e8      	bcs.n	8009a40 <quorem+0xb0>
 8009a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a76:	b922      	cbnz	r2, 8009a82 <quorem+0xf2>
 8009a78:	3b04      	subs	r3, #4
 8009a7a:	429d      	cmp	r5, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	d30a      	bcc.n	8009a96 <quorem+0x106>
 8009a80:	613c      	str	r4, [r7, #16]
 8009a82:	4630      	mov	r0, r6
 8009a84:	b003      	add	sp, #12
 8009a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8a:	6812      	ldr	r2, [r2, #0]
 8009a8c:	3b04      	subs	r3, #4
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	d1cc      	bne.n	8009a2c <quorem+0x9c>
 8009a92:	3c01      	subs	r4, #1
 8009a94:	e7c7      	b.n	8009a26 <quorem+0x96>
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	3b04      	subs	r3, #4
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	d1f0      	bne.n	8009a80 <quorem+0xf0>
 8009a9e:	3c01      	subs	r4, #1
 8009aa0:	e7eb      	b.n	8009a7a <quorem+0xea>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e7ee      	b.n	8009a84 <quorem+0xf4>
	...

08009aa8 <_dtoa_r>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	ed2d 8b04 	vpush	{d8-d9}
 8009ab0:	ec57 6b10 	vmov	r6, r7, d0
 8009ab4:	b093      	sub	sp, #76	; 0x4c
 8009ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ab8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009abc:	9106      	str	r1, [sp, #24]
 8009abe:	ee10 aa10 	vmov	sl, s0
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ac8:	46bb      	mov	fp, r7
 8009aca:	b975      	cbnz	r5, 8009aea <_dtoa_r+0x42>
 8009acc:	2010      	movs	r0, #16
 8009ace:	f7ff f90b 	bl	8008ce8 <malloc>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ad6:	b920      	cbnz	r0, 8009ae2 <_dtoa_r+0x3a>
 8009ad8:	4ba7      	ldr	r3, [pc, #668]	; (8009d78 <_dtoa_r+0x2d0>)
 8009ada:	21ea      	movs	r1, #234	; 0xea
 8009adc:	48a7      	ldr	r0, [pc, #668]	; (8009d7c <_dtoa_r+0x2d4>)
 8009ade:	f7ff ff39 	bl	8009954 <__assert_func>
 8009ae2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ae6:	6005      	str	r5, [r0, #0]
 8009ae8:	60c5      	str	r5, [r0, #12]
 8009aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aec:	6819      	ldr	r1, [r3, #0]
 8009aee:	b151      	cbz	r1, 8009b06 <_dtoa_r+0x5e>
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	604a      	str	r2, [r1, #4]
 8009af4:	2301      	movs	r3, #1
 8009af6:	4093      	lsls	r3, r2
 8009af8:	608b      	str	r3, [r1, #8]
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 fe32 	bl	800a764 <_Bfree>
 8009b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	1e3b      	subs	r3, r7, #0
 8009b08:	bfaa      	itet	ge
 8009b0a:	2300      	movge	r3, #0
 8009b0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009b10:	f8c8 3000 	strge.w	r3, [r8]
 8009b14:	4b9a      	ldr	r3, [pc, #616]	; (8009d80 <_dtoa_r+0x2d8>)
 8009b16:	bfbc      	itt	lt
 8009b18:	2201      	movlt	r2, #1
 8009b1a:	f8c8 2000 	strlt.w	r2, [r8]
 8009b1e:	ea33 030b 	bics.w	r3, r3, fp
 8009b22:	d11b      	bne.n	8009b5c <_dtoa_r+0xb4>
 8009b24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b26:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b30:	4333      	orrs	r3, r6
 8009b32:	f000 8592 	beq.w	800a65a <_dtoa_r+0xbb2>
 8009b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b38:	b963      	cbnz	r3, 8009b54 <_dtoa_r+0xac>
 8009b3a:	4b92      	ldr	r3, [pc, #584]	; (8009d84 <_dtoa_r+0x2dc>)
 8009b3c:	e022      	b.n	8009b84 <_dtoa_r+0xdc>
 8009b3e:	4b92      	ldr	r3, [pc, #584]	; (8009d88 <_dtoa_r+0x2e0>)
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	3308      	adds	r3, #8
 8009b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	9801      	ldr	r0, [sp, #4]
 8009b4a:	b013      	add	sp, #76	; 0x4c
 8009b4c:	ecbd 8b04 	vpop	{d8-d9}
 8009b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	4b8b      	ldr	r3, [pc, #556]	; (8009d84 <_dtoa_r+0x2dc>)
 8009b56:	9301      	str	r3, [sp, #4]
 8009b58:	3303      	adds	r3, #3
 8009b5a:	e7f3      	b.n	8009b44 <_dtoa_r+0x9c>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4650      	mov	r0, sl
 8009b62:	4659      	mov	r1, fp
 8009b64:	f7f6 ffc0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b68:	ec4b ab19 	vmov	d9, sl, fp
 8009b6c:	4680      	mov	r8, r0
 8009b6e:	b158      	cbz	r0, 8009b88 <_dtoa_r+0xe0>
 8009b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b72:	2301      	movs	r3, #1
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 856b 	beq.w	800a654 <_dtoa_r+0xbac>
 8009b7e:	4883      	ldr	r0, [pc, #524]	; (8009d8c <_dtoa_r+0x2e4>)
 8009b80:	6018      	str	r0, [r3, #0]
 8009b82:	1e43      	subs	r3, r0, #1
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	e7df      	b.n	8009b48 <_dtoa_r+0xa0>
 8009b88:	ec4b ab10 	vmov	d0, sl, fp
 8009b8c:	aa10      	add	r2, sp, #64	; 0x40
 8009b8e:	a911      	add	r1, sp, #68	; 0x44
 8009b90:	4620      	mov	r0, r4
 8009b92:	f001 f8cf 	bl	800ad34 <__d2b>
 8009b96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b9a:	ee08 0a10 	vmov	s16, r0
 8009b9e:	2d00      	cmp	r5, #0
 8009ba0:	f000 8084 	beq.w	8009cac <_dtoa_r+0x204>
 8009ba4:	ee19 3a90 	vmov	r3, s19
 8009ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009bb0:	4656      	mov	r6, sl
 8009bb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009bb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009bba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009bbe:	4b74      	ldr	r3, [pc, #464]	; (8009d90 <_dtoa_r+0x2e8>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	f7f6 fb6f 	bl	80002a8 <__aeabi_dsub>
 8009bca:	a365      	add	r3, pc, #404	; (adr r3, 8009d60 <_dtoa_r+0x2b8>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 fd22 	bl	8000618 <__aeabi_dmul>
 8009bd4:	a364      	add	r3, pc, #400	; (adr r3, 8009d68 <_dtoa_r+0x2c0>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fb67 	bl	80002ac <__adddf3>
 8009bde:	4606      	mov	r6, r0
 8009be0:	4628      	mov	r0, r5
 8009be2:	460f      	mov	r7, r1
 8009be4:	f7f6 fcae 	bl	8000544 <__aeabi_i2d>
 8009be8:	a361      	add	r3, pc, #388	; (adr r3, 8009d70 <_dtoa_r+0x2c8>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fd13 	bl	8000618 <__aeabi_dmul>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	f7f6 fb57 	bl	80002ac <__adddf3>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	f7f6 ffb9 	bl	8000b78 <__aeabi_d2iz>
 8009c06:	2200      	movs	r2, #0
 8009c08:	9000      	str	r0, [sp, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f7f6 ff74 	bl	8000afc <__aeabi_dcmplt>
 8009c14:	b150      	cbz	r0, 8009c2c <_dtoa_r+0x184>
 8009c16:	9800      	ldr	r0, [sp, #0]
 8009c18:	f7f6 fc94 	bl	8000544 <__aeabi_i2d>
 8009c1c:	4632      	mov	r2, r6
 8009c1e:	463b      	mov	r3, r7
 8009c20:	f7f6 ff62 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c24:	b910      	cbnz	r0, 8009c2c <_dtoa_r+0x184>
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	9b00      	ldr	r3, [sp, #0]
 8009c2e:	2b16      	cmp	r3, #22
 8009c30:	d85a      	bhi.n	8009ce8 <_dtoa_r+0x240>
 8009c32:	9a00      	ldr	r2, [sp, #0]
 8009c34:	4b57      	ldr	r3, [pc, #348]	; (8009d94 <_dtoa_r+0x2ec>)
 8009c36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	ec51 0b19 	vmov	r0, r1, d9
 8009c42:	f7f6 ff5b 	bl	8000afc <__aeabi_dcmplt>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d050      	beq.n	8009cec <_dtoa_r+0x244>
 8009c4a:	9b00      	ldr	r3, [sp, #0]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2300      	movs	r3, #0
 8009c52:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c56:	1b5d      	subs	r5, r3, r5
 8009c58:	1e6b      	subs	r3, r5, #1
 8009c5a:	9305      	str	r3, [sp, #20]
 8009c5c:	bf45      	ittet	mi
 8009c5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009c62:	9304      	strmi	r3, [sp, #16]
 8009c64:	2300      	movpl	r3, #0
 8009c66:	2300      	movmi	r3, #0
 8009c68:	bf4c      	ite	mi
 8009c6a:	9305      	strmi	r3, [sp, #20]
 8009c6c:	9304      	strpl	r3, [sp, #16]
 8009c6e:	9b00      	ldr	r3, [sp, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	db3d      	blt.n	8009cf0 <_dtoa_r+0x248>
 8009c74:	9b05      	ldr	r3, [sp, #20]
 8009c76:	9a00      	ldr	r2, [sp, #0]
 8009c78:	920a      	str	r2, [sp, #40]	; 0x28
 8009c7a:	4413      	add	r3, r2
 8009c7c:	9305      	str	r3, [sp, #20]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9307      	str	r3, [sp, #28]
 8009c82:	9b06      	ldr	r3, [sp, #24]
 8009c84:	2b09      	cmp	r3, #9
 8009c86:	f200 8089 	bhi.w	8009d9c <_dtoa_r+0x2f4>
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	bfc4      	itt	gt
 8009c8e:	3b04      	subgt	r3, #4
 8009c90:	9306      	strgt	r3, [sp, #24]
 8009c92:	9b06      	ldr	r3, [sp, #24]
 8009c94:	f1a3 0302 	sub.w	r3, r3, #2
 8009c98:	bfcc      	ite	gt
 8009c9a:	2500      	movgt	r5, #0
 8009c9c:	2501      	movle	r5, #1
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	f200 8087 	bhi.w	8009db2 <_dtoa_r+0x30a>
 8009ca4:	e8df f003 	tbb	[pc, r3]
 8009ca8:	59383a2d 	.word	0x59383a2d
 8009cac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009cb0:	441d      	add	r5, r3
 8009cb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009cb6:	2b20      	cmp	r3, #32
 8009cb8:	bfc1      	itttt	gt
 8009cba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009cbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009cc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009cc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009cca:	bfda      	itte	le
 8009ccc:	f1c3 0320 	rsble	r3, r3, #32
 8009cd0:	fa06 f003 	lslle.w	r0, r6, r3
 8009cd4:	4318      	orrgt	r0, r3
 8009cd6:	f7f6 fc25 	bl	8000524 <__aeabi_ui2d>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4606      	mov	r6, r0
 8009cde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009ce2:	3d01      	subs	r5, #1
 8009ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8009ce6:	e76a      	b.n	8009bbe <_dtoa_r+0x116>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e7b2      	b.n	8009c52 <_dtoa_r+0x1aa>
 8009cec:	900b      	str	r0, [sp, #44]	; 0x2c
 8009cee:	e7b1      	b.n	8009c54 <_dtoa_r+0x1ac>
 8009cf0:	9b04      	ldr	r3, [sp, #16]
 8009cf2:	9a00      	ldr	r2, [sp, #0]
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	9304      	str	r3, [sp, #16]
 8009cf8:	4253      	negs	r3, r2
 8009cfa:	9307      	str	r3, [sp, #28]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8009d00:	e7bf      	b.n	8009c82 <_dtoa_r+0x1da>
 8009d02:	2300      	movs	r3, #0
 8009d04:	9308      	str	r3, [sp, #32]
 8009d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dc55      	bgt.n	8009db8 <_dtoa_r+0x310>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d12:	461a      	mov	r2, r3
 8009d14:	9209      	str	r2, [sp, #36]	; 0x24
 8009d16:	e00c      	b.n	8009d32 <_dtoa_r+0x28a>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e7f3      	b.n	8009d04 <_dtoa_r+0x25c>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d20:	9308      	str	r3, [sp, #32]
 8009d22:	9b00      	ldr	r3, [sp, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	9302      	str	r3, [sp, #8]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	9303      	str	r3, [sp, #12]
 8009d2e:	bfb8      	it	lt
 8009d30:	2301      	movlt	r3, #1
 8009d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009d34:	2200      	movs	r2, #0
 8009d36:	6042      	str	r2, [r0, #4]
 8009d38:	2204      	movs	r2, #4
 8009d3a:	f102 0614 	add.w	r6, r2, #20
 8009d3e:	429e      	cmp	r6, r3
 8009d40:	6841      	ldr	r1, [r0, #4]
 8009d42:	d93d      	bls.n	8009dc0 <_dtoa_r+0x318>
 8009d44:	4620      	mov	r0, r4
 8009d46:	f000 fccd 	bl	800a6e4 <_Balloc>
 8009d4a:	9001      	str	r0, [sp, #4]
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d13b      	bne.n	8009dc8 <_dtoa_r+0x320>
 8009d50:	4b11      	ldr	r3, [pc, #68]	; (8009d98 <_dtoa_r+0x2f0>)
 8009d52:	4602      	mov	r2, r0
 8009d54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009d58:	e6c0      	b.n	8009adc <_dtoa_r+0x34>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e7df      	b.n	8009d1e <_dtoa_r+0x276>
 8009d5e:	bf00      	nop
 8009d60:	636f4361 	.word	0x636f4361
 8009d64:	3fd287a7 	.word	0x3fd287a7
 8009d68:	8b60c8b3 	.word	0x8b60c8b3
 8009d6c:	3fc68a28 	.word	0x3fc68a28
 8009d70:	509f79fb 	.word	0x509f79fb
 8009d74:	3fd34413 	.word	0x3fd34413
 8009d78:	0800bfe4 	.word	0x0800bfe4
 8009d7c:	0800c0a1 	.word	0x0800c0a1
 8009d80:	7ff00000 	.word	0x7ff00000
 8009d84:	0800c09d 	.word	0x0800c09d
 8009d88:	0800c094 	.word	0x0800c094
 8009d8c:	0800bfc1 	.word	0x0800bfc1
 8009d90:	3ff80000 	.word	0x3ff80000
 8009d94:	0800c198 	.word	0x0800c198
 8009d98:	0800c0fc 	.word	0x0800c0fc
 8009d9c:	2501      	movs	r5, #1
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9306      	str	r3, [sp, #24]
 8009da2:	9508      	str	r5, [sp, #32]
 8009da4:	f04f 33ff 	mov.w	r3, #4294967295
 8009da8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	2312      	movs	r3, #18
 8009db0:	e7b0      	b.n	8009d14 <_dtoa_r+0x26c>
 8009db2:	2301      	movs	r3, #1
 8009db4:	9308      	str	r3, [sp, #32]
 8009db6:	e7f5      	b.n	8009da4 <_dtoa_r+0x2fc>
 8009db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009dbe:	e7b8      	b.n	8009d32 <_dtoa_r+0x28a>
 8009dc0:	3101      	adds	r1, #1
 8009dc2:	6041      	str	r1, [r0, #4]
 8009dc4:	0052      	lsls	r2, r2, #1
 8009dc6:	e7b8      	b.n	8009d3a <_dtoa_r+0x292>
 8009dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dca:	9a01      	ldr	r2, [sp, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	2b0e      	cmp	r3, #14
 8009dd2:	f200 809d 	bhi.w	8009f10 <_dtoa_r+0x468>
 8009dd6:	2d00      	cmp	r5, #0
 8009dd8:	f000 809a 	beq.w	8009f10 <_dtoa_r+0x468>
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dd32      	ble.n	8009e48 <_dtoa_r+0x3a0>
 8009de2:	4ab7      	ldr	r2, [pc, #732]	; (800a0c0 <_dtoa_r+0x618>)
 8009de4:	f003 030f 	and.w	r3, r3, #15
 8009de8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009dec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	05d8      	lsls	r0, r3, #23
 8009df4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009df8:	d516      	bpl.n	8009e28 <_dtoa_r+0x380>
 8009dfa:	4bb2      	ldr	r3, [pc, #712]	; (800a0c4 <_dtoa_r+0x61c>)
 8009dfc:	ec51 0b19 	vmov	r0, r1, d9
 8009e00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e04:	f7f6 fd32 	bl	800086c <__aeabi_ddiv>
 8009e08:	f007 070f 	and.w	r7, r7, #15
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	468b      	mov	fp, r1
 8009e10:	2503      	movs	r5, #3
 8009e12:	4eac      	ldr	r6, [pc, #688]	; (800a0c4 <_dtoa_r+0x61c>)
 8009e14:	b957      	cbnz	r7, 8009e2c <_dtoa_r+0x384>
 8009e16:	4642      	mov	r2, r8
 8009e18:	464b      	mov	r3, r9
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	4659      	mov	r1, fp
 8009e1e:	f7f6 fd25 	bl	800086c <__aeabi_ddiv>
 8009e22:	4682      	mov	sl, r0
 8009e24:	468b      	mov	fp, r1
 8009e26:	e028      	b.n	8009e7a <_dtoa_r+0x3d2>
 8009e28:	2502      	movs	r5, #2
 8009e2a:	e7f2      	b.n	8009e12 <_dtoa_r+0x36a>
 8009e2c:	07f9      	lsls	r1, r7, #31
 8009e2e:	d508      	bpl.n	8009e42 <_dtoa_r+0x39a>
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e38:	f7f6 fbee 	bl	8000618 <__aeabi_dmul>
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	4680      	mov	r8, r0
 8009e40:	4689      	mov	r9, r1
 8009e42:	107f      	asrs	r7, r7, #1
 8009e44:	3608      	adds	r6, #8
 8009e46:	e7e5      	b.n	8009e14 <_dtoa_r+0x36c>
 8009e48:	f000 809b 	beq.w	8009f82 <_dtoa_r+0x4da>
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	4f9d      	ldr	r7, [pc, #628]	; (800a0c4 <_dtoa_r+0x61c>)
 8009e50:	425e      	negs	r6, r3
 8009e52:	4b9b      	ldr	r3, [pc, #620]	; (800a0c0 <_dtoa_r+0x618>)
 8009e54:	f006 020f 	and.w	r2, r6, #15
 8009e58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	ec51 0b19 	vmov	r0, r1, d9
 8009e64:	f7f6 fbd8 	bl	8000618 <__aeabi_dmul>
 8009e68:	1136      	asrs	r6, r6, #4
 8009e6a:	4682      	mov	sl, r0
 8009e6c:	468b      	mov	fp, r1
 8009e6e:	2300      	movs	r3, #0
 8009e70:	2502      	movs	r5, #2
 8009e72:	2e00      	cmp	r6, #0
 8009e74:	d17a      	bne.n	8009f6c <_dtoa_r+0x4c4>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1d3      	bne.n	8009e22 <_dtoa_r+0x37a>
 8009e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 8082 	beq.w	8009f86 <_dtoa_r+0x4de>
 8009e82:	4b91      	ldr	r3, [pc, #580]	; (800a0c8 <_dtoa_r+0x620>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	4650      	mov	r0, sl
 8009e88:	4659      	mov	r1, fp
 8009e8a:	f7f6 fe37 	bl	8000afc <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d079      	beq.n	8009f86 <_dtoa_r+0x4de>
 8009e92:	9b03      	ldr	r3, [sp, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d076      	beq.n	8009f86 <_dtoa_r+0x4de>
 8009e98:	9b02      	ldr	r3, [sp, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dd36      	ble.n	8009f0c <_dtoa_r+0x464>
 8009e9e:	9b00      	ldr	r3, [sp, #0]
 8009ea0:	4650      	mov	r0, sl
 8009ea2:	4659      	mov	r1, fp
 8009ea4:	1e5f      	subs	r7, r3, #1
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	4b88      	ldr	r3, [pc, #544]	; (800a0cc <_dtoa_r+0x624>)
 8009eaa:	f7f6 fbb5 	bl	8000618 <__aeabi_dmul>
 8009eae:	9e02      	ldr	r6, [sp, #8]
 8009eb0:	4682      	mov	sl, r0
 8009eb2:	468b      	mov	fp, r1
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f7f6 fb44 	bl	8000544 <__aeabi_i2d>
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	465b      	mov	r3, fp
 8009ec0:	f7f6 fbaa 	bl	8000618 <__aeabi_dmul>
 8009ec4:	4b82      	ldr	r3, [pc, #520]	; (800a0d0 <_dtoa_r+0x628>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f7f6 f9f0 	bl	80002ac <__adddf3>
 8009ecc:	46d0      	mov	r8, sl
 8009ece:	46d9      	mov	r9, fp
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	d158      	bne.n	8009f8c <_dtoa_r+0x4e4>
 8009eda:	4b7e      	ldr	r3, [pc, #504]	; (800a0d4 <_dtoa_r+0x62c>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	4640      	mov	r0, r8
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	f7f6 f9e1 	bl	80002a8 <__aeabi_dsub>
 8009ee6:	4652      	mov	r2, sl
 8009ee8:	465b      	mov	r3, fp
 8009eea:	4680      	mov	r8, r0
 8009eec:	4689      	mov	r9, r1
 8009eee:	f7f6 fe23 	bl	8000b38 <__aeabi_dcmpgt>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f040 8295 	bne.w	800a422 <_dtoa_r+0x97a>
 8009ef8:	4652      	mov	r2, sl
 8009efa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 fdfb 	bl	8000afc <__aeabi_dcmplt>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f040 8289 	bne.w	800a41e <_dtoa_r+0x976>
 8009f0c:	ec5b ab19 	vmov	sl, fp, d9
 8009f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f2c0 8148 	blt.w	800a1a8 <_dtoa_r+0x700>
 8009f18:	9a00      	ldr	r2, [sp, #0]
 8009f1a:	2a0e      	cmp	r2, #14
 8009f1c:	f300 8144 	bgt.w	800a1a8 <_dtoa_r+0x700>
 8009f20:	4b67      	ldr	r3, [pc, #412]	; (800a0c0 <_dtoa_r+0x618>)
 8009f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f280 80d5 	bge.w	800a0dc <_dtoa_r+0x634>
 8009f32:	9b03      	ldr	r3, [sp, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f300 80d1 	bgt.w	800a0dc <_dtoa_r+0x634>
 8009f3a:	f040 826f 	bne.w	800a41c <_dtoa_r+0x974>
 8009f3e:	4b65      	ldr	r3, [pc, #404]	; (800a0d4 <_dtoa_r+0x62c>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	4640      	mov	r0, r8
 8009f44:	4649      	mov	r1, r9
 8009f46:	f7f6 fb67 	bl	8000618 <__aeabi_dmul>
 8009f4a:	4652      	mov	r2, sl
 8009f4c:	465b      	mov	r3, fp
 8009f4e:	f7f6 fde9 	bl	8000b24 <__aeabi_dcmpge>
 8009f52:	9e03      	ldr	r6, [sp, #12]
 8009f54:	4637      	mov	r7, r6
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f040 8245 	bne.w	800a3e6 <_dtoa_r+0x93e>
 8009f5c:	9d01      	ldr	r5, [sp, #4]
 8009f5e:	2331      	movs	r3, #49	; 0x31
 8009f60:	f805 3b01 	strb.w	r3, [r5], #1
 8009f64:	9b00      	ldr	r3, [sp, #0]
 8009f66:	3301      	adds	r3, #1
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	e240      	b.n	800a3ee <_dtoa_r+0x946>
 8009f6c:	07f2      	lsls	r2, r6, #31
 8009f6e:	d505      	bpl.n	8009f7c <_dtoa_r+0x4d4>
 8009f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f74:	f7f6 fb50 	bl	8000618 <__aeabi_dmul>
 8009f78:	3501      	adds	r5, #1
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	1076      	asrs	r6, r6, #1
 8009f7e:	3708      	adds	r7, #8
 8009f80:	e777      	b.n	8009e72 <_dtoa_r+0x3ca>
 8009f82:	2502      	movs	r5, #2
 8009f84:	e779      	b.n	8009e7a <_dtoa_r+0x3d2>
 8009f86:	9f00      	ldr	r7, [sp, #0]
 8009f88:	9e03      	ldr	r6, [sp, #12]
 8009f8a:	e794      	b.n	8009eb6 <_dtoa_r+0x40e>
 8009f8c:	9901      	ldr	r1, [sp, #4]
 8009f8e:	4b4c      	ldr	r3, [pc, #304]	; (800a0c0 <_dtoa_r+0x618>)
 8009f90:	4431      	add	r1, r6
 8009f92:	910d      	str	r1, [sp, #52]	; 0x34
 8009f94:	9908      	ldr	r1, [sp, #32]
 8009f96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	d043      	beq.n	800a02a <_dtoa_r+0x582>
 8009fa2:	494d      	ldr	r1, [pc, #308]	; (800a0d8 <_dtoa_r+0x630>)
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	f7f6 fc61 	bl	800086c <__aeabi_ddiv>
 8009faa:	4652      	mov	r2, sl
 8009fac:	465b      	mov	r3, fp
 8009fae:	f7f6 f97b 	bl	80002a8 <__aeabi_dsub>
 8009fb2:	9d01      	ldr	r5, [sp, #4]
 8009fb4:	4682      	mov	sl, r0
 8009fb6:	468b      	mov	fp, r1
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4640      	mov	r0, r8
 8009fbc:	f7f6 fddc 	bl	8000b78 <__aeabi_d2iz>
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	f7f6 fabf 	bl	8000544 <__aeabi_i2d>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4640      	mov	r0, r8
 8009fcc:	4649      	mov	r1, r9
 8009fce:	f7f6 f96b 	bl	80002a8 <__aeabi_dsub>
 8009fd2:	3630      	adds	r6, #48	; 0x30
 8009fd4:	f805 6b01 	strb.w	r6, [r5], #1
 8009fd8:	4652      	mov	r2, sl
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4689      	mov	r9, r1
 8009fe0:	f7f6 fd8c 	bl	8000afc <__aeabi_dcmplt>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d163      	bne.n	800a0b0 <_dtoa_r+0x608>
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	4936      	ldr	r1, [pc, #216]	; (800a0c8 <_dtoa_r+0x620>)
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f7f6 f95a 	bl	80002a8 <__aeabi_dsub>
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	465b      	mov	r3, fp
 8009ff8:	f7f6 fd80 	bl	8000afc <__aeabi_dcmplt>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	f040 80b5 	bne.w	800a16c <_dtoa_r+0x6c4>
 800a002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a004:	429d      	cmp	r5, r3
 800a006:	d081      	beq.n	8009f0c <_dtoa_r+0x464>
 800a008:	4b30      	ldr	r3, [pc, #192]	; (800a0cc <_dtoa_r+0x624>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	4650      	mov	r0, sl
 800a00e:	4659      	mov	r1, fp
 800a010:	f7f6 fb02 	bl	8000618 <__aeabi_dmul>
 800a014:	4b2d      	ldr	r3, [pc, #180]	; (800a0cc <_dtoa_r+0x624>)
 800a016:	4682      	mov	sl, r0
 800a018:	468b      	mov	fp, r1
 800a01a:	4640      	mov	r0, r8
 800a01c:	4649      	mov	r1, r9
 800a01e:	2200      	movs	r2, #0
 800a020:	f7f6 fafa 	bl	8000618 <__aeabi_dmul>
 800a024:	4680      	mov	r8, r0
 800a026:	4689      	mov	r9, r1
 800a028:	e7c6      	b.n	8009fb8 <_dtoa_r+0x510>
 800a02a:	4650      	mov	r0, sl
 800a02c:	4659      	mov	r1, fp
 800a02e:	f7f6 faf3 	bl	8000618 <__aeabi_dmul>
 800a032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a034:	9d01      	ldr	r5, [sp, #4]
 800a036:	930f      	str	r3, [sp, #60]	; 0x3c
 800a038:	4682      	mov	sl, r0
 800a03a:	468b      	mov	fp, r1
 800a03c:	4649      	mov	r1, r9
 800a03e:	4640      	mov	r0, r8
 800a040:	f7f6 fd9a 	bl	8000b78 <__aeabi_d2iz>
 800a044:	4606      	mov	r6, r0
 800a046:	f7f6 fa7d 	bl	8000544 <__aeabi_i2d>
 800a04a:	3630      	adds	r6, #48	; 0x30
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4640      	mov	r0, r8
 800a052:	4649      	mov	r1, r9
 800a054:	f7f6 f928 	bl	80002a8 <__aeabi_dsub>
 800a058:	f805 6b01 	strb.w	r6, [r5], #1
 800a05c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a05e:	429d      	cmp	r5, r3
 800a060:	4680      	mov	r8, r0
 800a062:	4689      	mov	r9, r1
 800a064:	f04f 0200 	mov.w	r2, #0
 800a068:	d124      	bne.n	800a0b4 <_dtoa_r+0x60c>
 800a06a:	4b1b      	ldr	r3, [pc, #108]	; (800a0d8 <_dtoa_r+0x630>)
 800a06c:	4650      	mov	r0, sl
 800a06e:	4659      	mov	r1, fp
 800a070:	f7f6 f91c 	bl	80002ac <__adddf3>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4640      	mov	r0, r8
 800a07a:	4649      	mov	r1, r9
 800a07c:	f7f6 fd5c 	bl	8000b38 <__aeabi_dcmpgt>
 800a080:	2800      	cmp	r0, #0
 800a082:	d173      	bne.n	800a16c <_dtoa_r+0x6c4>
 800a084:	4652      	mov	r2, sl
 800a086:	465b      	mov	r3, fp
 800a088:	4913      	ldr	r1, [pc, #76]	; (800a0d8 <_dtoa_r+0x630>)
 800a08a:	2000      	movs	r0, #0
 800a08c:	f7f6 f90c 	bl	80002a8 <__aeabi_dsub>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4640      	mov	r0, r8
 800a096:	4649      	mov	r1, r9
 800a098:	f7f6 fd30 	bl	8000afc <__aeabi_dcmplt>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f43f af35 	beq.w	8009f0c <_dtoa_r+0x464>
 800a0a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a0a4:	1e6b      	subs	r3, r5, #1
 800a0a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0ac:	2b30      	cmp	r3, #48	; 0x30
 800a0ae:	d0f8      	beq.n	800a0a2 <_dtoa_r+0x5fa>
 800a0b0:	9700      	str	r7, [sp, #0]
 800a0b2:	e049      	b.n	800a148 <_dtoa_r+0x6a0>
 800a0b4:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <_dtoa_r+0x624>)
 800a0b6:	f7f6 faaf 	bl	8000618 <__aeabi_dmul>
 800a0ba:	4680      	mov	r8, r0
 800a0bc:	4689      	mov	r9, r1
 800a0be:	e7bd      	b.n	800a03c <_dtoa_r+0x594>
 800a0c0:	0800c198 	.word	0x0800c198
 800a0c4:	0800c170 	.word	0x0800c170
 800a0c8:	3ff00000 	.word	0x3ff00000
 800a0cc:	40240000 	.word	0x40240000
 800a0d0:	401c0000 	.word	0x401c0000
 800a0d4:	40140000 	.word	0x40140000
 800a0d8:	3fe00000 	.word	0x3fe00000
 800a0dc:	9d01      	ldr	r5, [sp, #4]
 800a0de:	4656      	mov	r6, sl
 800a0e0:	465f      	mov	r7, fp
 800a0e2:	4642      	mov	r2, r8
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 fbbf 	bl	800086c <__aeabi_ddiv>
 800a0ee:	f7f6 fd43 	bl	8000b78 <__aeabi_d2iz>
 800a0f2:	4682      	mov	sl, r0
 800a0f4:	f7f6 fa26 	bl	8000544 <__aeabi_i2d>
 800a0f8:	4642      	mov	r2, r8
 800a0fa:	464b      	mov	r3, r9
 800a0fc:	f7f6 fa8c 	bl	8000618 <__aeabi_dmul>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a10c:	f7f6 f8cc 	bl	80002a8 <__aeabi_dsub>
 800a110:	f805 6b01 	strb.w	r6, [r5], #1
 800a114:	9e01      	ldr	r6, [sp, #4]
 800a116:	9f03      	ldr	r7, [sp, #12]
 800a118:	1bae      	subs	r6, r5, r6
 800a11a:	42b7      	cmp	r7, r6
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	d135      	bne.n	800a18e <_dtoa_r+0x6e6>
 800a122:	f7f6 f8c3 	bl	80002ac <__adddf3>
 800a126:	4642      	mov	r2, r8
 800a128:	464b      	mov	r3, r9
 800a12a:	4606      	mov	r6, r0
 800a12c:	460f      	mov	r7, r1
 800a12e:	f7f6 fd03 	bl	8000b38 <__aeabi_dcmpgt>
 800a132:	b9d0      	cbnz	r0, 800a16a <_dtoa_r+0x6c2>
 800a134:	4642      	mov	r2, r8
 800a136:	464b      	mov	r3, r9
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 fcd4 	bl	8000ae8 <__aeabi_dcmpeq>
 800a140:	b110      	cbz	r0, 800a148 <_dtoa_r+0x6a0>
 800a142:	f01a 0f01 	tst.w	sl, #1
 800a146:	d110      	bne.n	800a16a <_dtoa_r+0x6c2>
 800a148:	4620      	mov	r0, r4
 800a14a:	ee18 1a10 	vmov	r1, s16
 800a14e:	f000 fb09 	bl	800a764 <_Bfree>
 800a152:	2300      	movs	r3, #0
 800a154:	9800      	ldr	r0, [sp, #0]
 800a156:	702b      	strb	r3, [r5, #0]
 800a158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a15a:	3001      	adds	r0, #1
 800a15c:	6018      	str	r0, [r3, #0]
 800a15e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a160:	2b00      	cmp	r3, #0
 800a162:	f43f acf1 	beq.w	8009b48 <_dtoa_r+0xa0>
 800a166:	601d      	str	r5, [r3, #0]
 800a168:	e4ee      	b.n	8009b48 <_dtoa_r+0xa0>
 800a16a:	9f00      	ldr	r7, [sp, #0]
 800a16c:	462b      	mov	r3, r5
 800a16e:	461d      	mov	r5, r3
 800a170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a174:	2a39      	cmp	r2, #57	; 0x39
 800a176:	d106      	bne.n	800a186 <_dtoa_r+0x6de>
 800a178:	9a01      	ldr	r2, [sp, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d1f7      	bne.n	800a16e <_dtoa_r+0x6c6>
 800a17e:	9901      	ldr	r1, [sp, #4]
 800a180:	2230      	movs	r2, #48	; 0x30
 800a182:	3701      	adds	r7, #1
 800a184:	700a      	strb	r2, [r1, #0]
 800a186:	781a      	ldrb	r2, [r3, #0]
 800a188:	3201      	adds	r2, #1
 800a18a:	701a      	strb	r2, [r3, #0]
 800a18c:	e790      	b.n	800a0b0 <_dtoa_r+0x608>
 800a18e:	4ba6      	ldr	r3, [pc, #664]	; (800a428 <_dtoa_r+0x980>)
 800a190:	2200      	movs	r2, #0
 800a192:	f7f6 fa41 	bl	8000618 <__aeabi_dmul>
 800a196:	2200      	movs	r2, #0
 800a198:	2300      	movs	r3, #0
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	f7f6 fca3 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d09d      	beq.n	800a0e2 <_dtoa_r+0x63a>
 800a1a6:	e7cf      	b.n	800a148 <_dtoa_r+0x6a0>
 800a1a8:	9a08      	ldr	r2, [sp, #32]
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	f000 80d7 	beq.w	800a35e <_dtoa_r+0x8b6>
 800a1b0:	9a06      	ldr	r2, [sp, #24]
 800a1b2:	2a01      	cmp	r2, #1
 800a1b4:	f300 80ba 	bgt.w	800a32c <_dtoa_r+0x884>
 800a1b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ba:	2a00      	cmp	r2, #0
 800a1bc:	f000 80b2 	beq.w	800a324 <_dtoa_r+0x87c>
 800a1c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a1c4:	9e07      	ldr	r6, [sp, #28]
 800a1c6:	9d04      	ldr	r5, [sp, #16]
 800a1c8:	9a04      	ldr	r2, [sp, #16]
 800a1ca:	441a      	add	r2, r3
 800a1cc:	9204      	str	r2, [sp, #16]
 800a1ce:	9a05      	ldr	r2, [sp, #20]
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	441a      	add	r2, r3
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	9205      	str	r2, [sp, #20]
 800a1d8:	f000 fb7c 	bl	800a8d4 <__i2b>
 800a1dc:	4607      	mov	r7, r0
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	dd0c      	ble.n	800a1fc <_dtoa_r+0x754>
 800a1e2:	9b05      	ldr	r3, [sp, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dd09      	ble.n	800a1fc <_dtoa_r+0x754>
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	9a04      	ldr	r2, [sp, #16]
 800a1ec:	bfa8      	it	ge
 800a1ee:	462b      	movge	r3, r5
 800a1f0:	1ad2      	subs	r2, r2, r3
 800a1f2:	9204      	str	r2, [sp, #16]
 800a1f4:	9a05      	ldr	r2, [sp, #20]
 800a1f6:	1aed      	subs	r5, r5, r3
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	9305      	str	r3, [sp, #20]
 800a1fc:	9b07      	ldr	r3, [sp, #28]
 800a1fe:	b31b      	cbz	r3, 800a248 <_dtoa_r+0x7a0>
 800a200:	9b08      	ldr	r3, [sp, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 80af 	beq.w	800a366 <_dtoa_r+0x8be>
 800a208:	2e00      	cmp	r6, #0
 800a20a:	dd13      	ble.n	800a234 <_dtoa_r+0x78c>
 800a20c:	4639      	mov	r1, r7
 800a20e:	4632      	mov	r2, r6
 800a210:	4620      	mov	r0, r4
 800a212:	f000 fc1f 	bl	800aa54 <__pow5mult>
 800a216:	ee18 2a10 	vmov	r2, s16
 800a21a:	4601      	mov	r1, r0
 800a21c:	4607      	mov	r7, r0
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 fb6e 	bl	800a900 <__multiply>
 800a224:	ee18 1a10 	vmov	r1, s16
 800a228:	4680      	mov	r8, r0
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fa9a 	bl	800a764 <_Bfree>
 800a230:	ee08 8a10 	vmov	s16, r8
 800a234:	9b07      	ldr	r3, [sp, #28]
 800a236:	1b9a      	subs	r2, r3, r6
 800a238:	d006      	beq.n	800a248 <_dtoa_r+0x7a0>
 800a23a:	ee18 1a10 	vmov	r1, s16
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 fc08 	bl	800aa54 <__pow5mult>
 800a244:	ee08 0a10 	vmov	s16, r0
 800a248:	2101      	movs	r1, #1
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 fb42 	bl	800a8d4 <__i2b>
 800a250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a252:	2b00      	cmp	r3, #0
 800a254:	4606      	mov	r6, r0
 800a256:	f340 8088 	ble.w	800a36a <_dtoa_r+0x8c2>
 800a25a:	461a      	mov	r2, r3
 800a25c:	4601      	mov	r1, r0
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 fbf8 	bl	800aa54 <__pow5mult>
 800a264:	9b06      	ldr	r3, [sp, #24]
 800a266:	2b01      	cmp	r3, #1
 800a268:	4606      	mov	r6, r0
 800a26a:	f340 8081 	ble.w	800a370 <_dtoa_r+0x8c8>
 800a26e:	f04f 0800 	mov.w	r8, #0
 800a272:	6933      	ldr	r3, [r6, #16]
 800a274:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a278:	6918      	ldr	r0, [r3, #16]
 800a27a:	f000 fadb 	bl	800a834 <__hi0bits>
 800a27e:	f1c0 0020 	rsb	r0, r0, #32
 800a282:	9b05      	ldr	r3, [sp, #20]
 800a284:	4418      	add	r0, r3
 800a286:	f010 001f 	ands.w	r0, r0, #31
 800a28a:	f000 8092 	beq.w	800a3b2 <_dtoa_r+0x90a>
 800a28e:	f1c0 0320 	rsb	r3, r0, #32
 800a292:	2b04      	cmp	r3, #4
 800a294:	f340 808a 	ble.w	800a3ac <_dtoa_r+0x904>
 800a298:	f1c0 001c 	rsb	r0, r0, #28
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	4403      	add	r3, r0
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	9b05      	ldr	r3, [sp, #20]
 800a2a4:	4403      	add	r3, r0
 800a2a6:	4405      	add	r5, r0
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	dd07      	ble.n	800a2c0 <_dtoa_r+0x818>
 800a2b0:	ee18 1a10 	vmov	r1, s16
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 fc26 	bl	800ab08 <__lshift>
 800a2bc:	ee08 0a10 	vmov	s16, r0
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dd05      	ble.n	800a2d2 <_dtoa_r+0x82a>
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 fc1c 	bl	800ab08 <__lshift>
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d06e      	beq.n	800a3b6 <_dtoa_r+0x90e>
 800a2d8:	ee18 0a10 	vmov	r0, s16
 800a2dc:	4631      	mov	r1, r6
 800a2de:	f000 fc83 	bl	800abe8 <__mcmp>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	da67      	bge.n	800a3b6 <_dtoa_r+0x90e>
 800a2e6:	9b00      	ldr	r3, [sp, #0]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	ee18 1a10 	vmov	r1, s16
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	220a      	movs	r2, #10
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fa57 	bl	800a7a8 <__multadd>
 800a2fa:	9b08      	ldr	r3, [sp, #32]
 800a2fc:	ee08 0a10 	vmov	s16, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 81b1 	beq.w	800a668 <_dtoa_r+0xbc0>
 800a306:	2300      	movs	r3, #0
 800a308:	4639      	mov	r1, r7
 800a30a:	220a      	movs	r2, #10
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 fa4b 	bl	800a7a8 <__multadd>
 800a312:	9b02      	ldr	r3, [sp, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	4607      	mov	r7, r0
 800a318:	f300 808e 	bgt.w	800a438 <_dtoa_r+0x990>
 800a31c:	9b06      	ldr	r3, [sp, #24]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	dc51      	bgt.n	800a3c6 <_dtoa_r+0x91e>
 800a322:	e089      	b.n	800a438 <_dtoa_r+0x990>
 800a324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a32a:	e74b      	b.n	800a1c4 <_dtoa_r+0x71c>
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	1e5e      	subs	r6, r3, #1
 800a330:	9b07      	ldr	r3, [sp, #28]
 800a332:	42b3      	cmp	r3, r6
 800a334:	bfbf      	itttt	lt
 800a336:	9b07      	ldrlt	r3, [sp, #28]
 800a338:	9607      	strlt	r6, [sp, #28]
 800a33a:	1af2      	sublt	r2, r6, r3
 800a33c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a33e:	bfb6      	itet	lt
 800a340:	189b      	addlt	r3, r3, r2
 800a342:	1b9e      	subge	r6, r3, r6
 800a344:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	bfb8      	it	lt
 800a34a:	2600      	movlt	r6, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfb7      	itett	lt
 800a350:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a354:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a358:	1a9d      	sublt	r5, r3, r2
 800a35a:	2300      	movlt	r3, #0
 800a35c:	e734      	b.n	800a1c8 <_dtoa_r+0x720>
 800a35e:	9e07      	ldr	r6, [sp, #28]
 800a360:	9d04      	ldr	r5, [sp, #16]
 800a362:	9f08      	ldr	r7, [sp, #32]
 800a364:	e73b      	b.n	800a1de <_dtoa_r+0x736>
 800a366:	9a07      	ldr	r2, [sp, #28]
 800a368:	e767      	b.n	800a23a <_dtoa_r+0x792>
 800a36a:	9b06      	ldr	r3, [sp, #24]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	dc18      	bgt.n	800a3a2 <_dtoa_r+0x8fa>
 800a370:	f1ba 0f00 	cmp.w	sl, #0
 800a374:	d115      	bne.n	800a3a2 <_dtoa_r+0x8fa>
 800a376:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a37a:	b993      	cbnz	r3, 800a3a2 <_dtoa_r+0x8fa>
 800a37c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a380:	0d1b      	lsrs	r3, r3, #20
 800a382:	051b      	lsls	r3, r3, #20
 800a384:	b183      	cbz	r3, 800a3a8 <_dtoa_r+0x900>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	3301      	adds	r3, #1
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	3301      	adds	r3, #1
 800a390:	9305      	str	r3, [sp, #20]
 800a392:	f04f 0801 	mov.w	r8, #1
 800a396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f47f af6a 	bne.w	800a272 <_dtoa_r+0x7ca>
 800a39e:	2001      	movs	r0, #1
 800a3a0:	e76f      	b.n	800a282 <_dtoa_r+0x7da>
 800a3a2:	f04f 0800 	mov.w	r8, #0
 800a3a6:	e7f6      	b.n	800a396 <_dtoa_r+0x8ee>
 800a3a8:	4698      	mov	r8, r3
 800a3aa:	e7f4      	b.n	800a396 <_dtoa_r+0x8ee>
 800a3ac:	f43f af7d 	beq.w	800a2aa <_dtoa_r+0x802>
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	301c      	adds	r0, #28
 800a3b4:	e772      	b.n	800a29c <_dtoa_r+0x7f4>
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dc37      	bgt.n	800a42c <_dtoa_r+0x984>
 800a3bc:	9b06      	ldr	r3, [sp, #24]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	dd34      	ble.n	800a42c <_dtoa_r+0x984>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	9302      	str	r3, [sp, #8]
 800a3c6:	9b02      	ldr	r3, [sp, #8]
 800a3c8:	b96b      	cbnz	r3, 800a3e6 <_dtoa_r+0x93e>
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	2205      	movs	r2, #5
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 f9ea 	bl	800a7a8 <__multadd>
 800a3d4:	4601      	mov	r1, r0
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	ee18 0a10 	vmov	r0, s16
 800a3dc:	f000 fc04 	bl	800abe8 <__mcmp>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	f73f adbb 	bgt.w	8009f5c <_dtoa_r+0x4b4>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e8:	9d01      	ldr	r5, [sp, #4]
 800a3ea:	43db      	mvns	r3, r3
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	f04f 0800 	mov.w	r8, #0
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 f9b5 	bl	800a764 <_Bfree>
 800a3fa:	2f00      	cmp	r7, #0
 800a3fc:	f43f aea4 	beq.w	800a148 <_dtoa_r+0x6a0>
 800a400:	f1b8 0f00 	cmp.w	r8, #0
 800a404:	d005      	beq.n	800a412 <_dtoa_r+0x96a>
 800a406:	45b8      	cmp	r8, r7
 800a408:	d003      	beq.n	800a412 <_dtoa_r+0x96a>
 800a40a:	4641      	mov	r1, r8
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 f9a9 	bl	800a764 <_Bfree>
 800a412:	4639      	mov	r1, r7
 800a414:	4620      	mov	r0, r4
 800a416:	f000 f9a5 	bl	800a764 <_Bfree>
 800a41a:	e695      	b.n	800a148 <_dtoa_r+0x6a0>
 800a41c:	2600      	movs	r6, #0
 800a41e:	4637      	mov	r7, r6
 800a420:	e7e1      	b.n	800a3e6 <_dtoa_r+0x93e>
 800a422:	9700      	str	r7, [sp, #0]
 800a424:	4637      	mov	r7, r6
 800a426:	e599      	b.n	8009f5c <_dtoa_r+0x4b4>
 800a428:	40240000 	.word	0x40240000
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80ca 	beq.w	800a5c8 <_dtoa_r+0xb20>
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	9302      	str	r3, [sp, #8]
 800a438:	2d00      	cmp	r5, #0
 800a43a:	dd05      	ble.n	800a448 <_dtoa_r+0x9a0>
 800a43c:	4639      	mov	r1, r7
 800a43e:	462a      	mov	r2, r5
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fb61 	bl	800ab08 <__lshift>
 800a446:	4607      	mov	r7, r0
 800a448:	f1b8 0f00 	cmp.w	r8, #0
 800a44c:	d05b      	beq.n	800a506 <_dtoa_r+0xa5e>
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4620      	mov	r0, r4
 800a452:	f000 f947 	bl	800a6e4 <_Balloc>
 800a456:	4605      	mov	r5, r0
 800a458:	b928      	cbnz	r0, 800a466 <_dtoa_r+0x9be>
 800a45a:	4b87      	ldr	r3, [pc, #540]	; (800a678 <_dtoa_r+0xbd0>)
 800a45c:	4602      	mov	r2, r0
 800a45e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a462:	f7ff bb3b 	b.w	8009adc <_dtoa_r+0x34>
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	3202      	adds	r2, #2
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	f107 010c 	add.w	r1, r7, #12
 800a470:	300c      	adds	r0, #12
 800a472:	f000 f91d 	bl	800a6b0 <memcpy>
 800a476:	2201      	movs	r2, #1
 800a478:	4629      	mov	r1, r5
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 fb44 	bl	800ab08 <__lshift>
 800a480:	9b01      	ldr	r3, [sp, #4]
 800a482:	f103 0901 	add.w	r9, r3, #1
 800a486:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	f00a 0301 	and.w	r3, sl, #1
 800a492:	46b8      	mov	r8, r7
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	4607      	mov	r7, r0
 800a498:	4631      	mov	r1, r6
 800a49a:	ee18 0a10 	vmov	r0, s16
 800a49e:	f7ff fa77 	bl	8009990 <quorem>
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	9002      	str	r0, [sp, #8]
 800a4a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4aa:	ee18 0a10 	vmov	r0, s16
 800a4ae:	f000 fb9b 	bl	800abe8 <__mcmp>
 800a4b2:	463a      	mov	r2, r7
 800a4b4:	9003      	str	r0, [sp, #12]
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 fbb1 	bl	800ac20 <__mdiff>
 800a4be:	68c2      	ldr	r2, [r0, #12]
 800a4c0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	bb02      	cbnz	r2, 800a50a <_dtoa_r+0xa62>
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	ee18 0a10 	vmov	r0, s16
 800a4ce:	f000 fb8b 	bl	800abe8 <__mcmp>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	9207      	str	r2, [sp, #28]
 800a4da:	f000 f943 	bl	800a764 <_Bfree>
 800a4de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a4e2:	ea43 0102 	orr.w	r1, r3, r2
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	430b      	orrs	r3, r1
 800a4ea:	464d      	mov	r5, r9
 800a4ec:	d10f      	bne.n	800a50e <_dtoa_r+0xa66>
 800a4ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4f2:	d02a      	beq.n	800a54a <_dtoa_r+0xaa2>
 800a4f4:	9b03      	ldr	r3, [sp, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd02      	ble.n	800a500 <_dtoa_r+0xa58>
 800a4fa:	9b02      	ldr	r3, [sp, #8]
 800a4fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a500:	f88b a000 	strb.w	sl, [fp]
 800a504:	e775      	b.n	800a3f2 <_dtoa_r+0x94a>
 800a506:	4638      	mov	r0, r7
 800a508:	e7ba      	b.n	800a480 <_dtoa_r+0x9d8>
 800a50a:	2201      	movs	r2, #1
 800a50c:	e7e2      	b.n	800a4d4 <_dtoa_r+0xa2c>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	db04      	blt.n	800a51e <_dtoa_r+0xa76>
 800a514:	9906      	ldr	r1, [sp, #24]
 800a516:	430b      	orrs	r3, r1
 800a518:	9904      	ldr	r1, [sp, #16]
 800a51a:	430b      	orrs	r3, r1
 800a51c:	d122      	bne.n	800a564 <_dtoa_r+0xabc>
 800a51e:	2a00      	cmp	r2, #0
 800a520:	ddee      	ble.n	800a500 <_dtoa_r+0xa58>
 800a522:	ee18 1a10 	vmov	r1, s16
 800a526:	2201      	movs	r2, #1
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 faed 	bl	800ab08 <__lshift>
 800a52e:	4631      	mov	r1, r6
 800a530:	ee08 0a10 	vmov	s16, r0
 800a534:	f000 fb58 	bl	800abe8 <__mcmp>
 800a538:	2800      	cmp	r0, #0
 800a53a:	dc03      	bgt.n	800a544 <_dtoa_r+0xa9c>
 800a53c:	d1e0      	bne.n	800a500 <_dtoa_r+0xa58>
 800a53e:	f01a 0f01 	tst.w	sl, #1
 800a542:	d0dd      	beq.n	800a500 <_dtoa_r+0xa58>
 800a544:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a548:	d1d7      	bne.n	800a4fa <_dtoa_r+0xa52>
 800a54a:	2339      	movs	r3, #57	; 0x39
 800a54c:	f88b 3000 	strb.w	r3, [fp]
 800a550:	462b      	mov	r3, r5
 800a552:	461d      	mov	r5, r3
 800a554:	3b01      	subs	r3, #1
 800a556:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a55a:	2a39      	cmp	r2, #57	; 0x39
 800a55c:	d071      	beq.n	800a642 <_dtoa_r+0xb9a>
 800a55e:	3201      	adds	r2, #1
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	e746      	b.n	800a3f2 <_dtoa_r+0x94a>
 800a564:	2a00      	cmp	r2, #0
 800a566:	dd07      	ble.n	800a578 <_dtoa_r+0xad0>
 800a568:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a56c:	d0ed      	beq.n	800a54a <_dtoa_r+0xaa2>
 800a56e:	f10a 0301 	add.w	r3, sl, #1
 800a572:	f88b 3000 	strb.w	r3, [fp]
 800a576:	e73c      	b.n	800a3f2 <_dtoa_r+0x94a>
 800a578:	9b05      	ldr	r3, [sp, #20]
 800a57a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a57e:	4599      	cmp	r9, r3
 800a580:	d047      	beq.n	800a612 <_dtoa_r+0xb6a>
 800a582:	ee18 1a10 	vmov	r1, s16
 800a586:	2300      	movs	r3, #0
 800a588:	220a      	movs	r2, #10
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 f90c 	bl	800a7a8 <__multadd>
 800a590:	45b8      	cmp	r8, r7
 800a592:	ee08 0a10 	vmov	s16, r0
 800a596:	f04f 0300 	mov.w	r3, #0
 800a59a:	f04f 020a 	mov.w	r2, #10
 800a59e:	4641      	mov	r1, r8
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	d106      	bne.n	800a5b2 <_dtoa_r+0xb0a>
 800a5a4:	f000 f900 	bl	800a7a8 <__multadd>
 800a5a8:	4680      	mov	r8, r0
 800a5aa:	4607      	mov	r7, r0
 800a5ac:	f109 0901 	add.w	r9, r9, #1
 800a5b0:	e772      	b.n	800a498 <_dtoa_r+0x9f0>
 800a5b2:	f000 f8f9 	bl	800a7a8 <__multadd>
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	4680      	mov	r8, r0
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	220a      	movs	r2, #10
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 f8f2 	bl	800a7a8 <__multadd>
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	e7f1      	b.n	800a5ac <_dtoa_r+0xb04>
 800a5c8:	9b03      	ldr	r3, [sp, #12]
 800a5ca:	9302      	str	r3, [sp, #8]
 800a5cc:	9d01      	ldr	r5, [sp, #4]
 800a5ce:	ee18 0a10 	vmov	r0, s16
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	f7ff f9dc 	bl	8009990 <quorem>
 800a5d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	f805 ab01 	strb.w	sl, [r5], #1
 800a5e2:	1aea      	subs	r2, r5, r3
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	dd09      	ble.n	800a5fe <_dtoa_r+0xb56>
 800a5ea:	ee18 1a10 	vmov	r1, s16
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	220a      	movs	r2, #10
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f000 f8d8 	bl	800a7a8 <__multadd>
 800a5f8:	ee08 0a10 	vmov	s16, r0
 800a5fc:	e7e7      	b.n	800a5ce <_dtoa_r+0xb26>
 800a5fe:	9b02      	ldr	r3, [sp, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	bfc8      	it	gt
 800a604:	461d      	movgt	r5, r3
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	bfd8      	it	le
 800a60a:	2501      	movle	r5, #1
 800a60c:	441d      	add	r5, r3
 800a60e:	f04f 0800 	mov.w	r8, #0
 800a612:	ee18 1a10 	vmov	r1, s16
 800a616:	2201      	movs	r2, #1
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 fa75 	bl	800ab08 <__lshift>
 800a61e:	4631      	mov	r1, r6
 800a620:	ee08 0a10 	vmov	s16, r0
 800a624:	f000 fae0 	bl	800abe8 <__mcmp>
 800a628:	2800      	cmp	r0, #0
 800a62a:	dc91      	bgt.n	800a550 <_dtoa_r+0xaa8>
 800a62c:	d102      	bne.n	800a634 <_dtoa_r+0xb8c>
 800a62e:	f01a 0f01 	tst.w	sl, #1
 800a632:	d18d      	bne.n	800a550 <_dtoa_r+0xaa8>
 800a634:	462b      	mov	r3, r5
 800a636:	461d      	mov	r5, r3
 800a638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a63c:	2a30      	cmp	r2, #48	; 0x30
 800a63e:	d0fa      	beq.n	800a636 <_dtoa_r+0xb8e>
 800a640:	e6d7      	b.n	800a3f2 <_dtoa_r+0x94a>
 800a642:	9a01      	ldr	r2, [sp, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d184      	bne.n	800a552 <_dtoa_r+0xaaa>
 800a648:	9b00      	ldr	r3, [sp, #0]
 800a64a:	3301      	adds	r3, #1
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	2331      	movs	r3, #49	; 0x31
 800a650:	7013      	strb	r3, [r2, #0]
 800a652:	e6ce      	b.n	800a3f2 <_dtoa_r+0x94a>
 800a654:	4b09      	ldr	r3, [pc, #36]	; (800a67c <_dtoa_r+0xbd4>)
 800a656:	f7ff ba95 	b.w	8009b84 <_dtoa_r+0xdc>
 800a65a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f47f aa6e 	bne.w	8009b3e <_dtoa_r+0x96>
 800a662:	4b07      	ldr	r3, [pc, #28]	; (800a680 <_dtoa_r+0xbd8>)
 800a664:	f7ff ba8e 	b.w	8009b84 <_dtoa_r+0xdc>
 800a668:	9b02      	ldr	r3, [sp, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	dcae      	bgt.n	800a5cc <_dtoa_r+0xb24>
 800a66e:	9b06      	ldr	r3, [sp, #24]
 800a670:	2b02      	cmp	r3, #2
 800a672:	f73f aea8 	bgt.w	800a3c6 <_dtoa_r+0x91e>
 800a676:	e7a9      	b.n	800a5cc <_dtoa_r+0xb24>
 800a678:	0800c0fc 	.word	0x0800c0fc
 800a67c:	0800bfc0 	.word	0x0800bfc0
 800a680:	0800c094 	.word	0x0800c094

0800a684 <fiprintf>:
 800a684:	b40e      	push	{r1, r2, r3}
 800a686:	b503      	push	{r0, r1, lr}
 800a688:	4601      	mov	r1, r0
 800a68a:	ab03      	add	r3, sp, #12
 800a68c:	4805      	ldr	r0, [pc, #20]	; (800a6a4 <fiprintf+0x20>)
 800a68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a692:	6800      	ldr	r0, [r0, #0]
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	f000 fd45 	bl	800b124 <_vfiprintf_r>
 800a69a:	b002      	add	sp, #8
 800a69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a0:	b003      	add	sp, #12
 800a6a2:	4770      	bx	lr
 800a6a4:	2000000c 	.word	0x2000000c

0800a6a8 <_localeconv_r>:
 800a6a8:	4800      	ldr	r0, [pc, #0]	; (800a6ac <_localeconv_r+0x4>)
 800a6aa:	4770      	bx	lr
 800a6ac:	20000160 	.word	0x20000160

0800a6b0 <memcpy>:
 800a6b0:	440a      	add	r2, r1
 800a6b2:	4291      	cmp	r1, r2
 800a6b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6b8:	d100      	bne.n	800a6bc <memcpy+0xc>
 800a6ba:	4770      	bx	lr
 800a6bc:	b510      	push	{r4, lr}
 800a6be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6c6:	4291      	cmp	r1, r2
 800a6c8:	d1f9      	bne.n	800a6be <memcpy+0xe>
 800a6ca:	bd10      	pop	{r4, pc}

0800a6cc <__malloc_lock>:
 800a6cc:	4801      	ldr	r0, [pc, #4]	; (800a6d4 <__malloc_lock+0x8>)
 800a6ce:	f001 b8d9 	b.w	800b884 <__retarget_lock_acquire_recursive>
 800a6d2:	bf00      	nop
 800a6d4:	20000550 	.word	0x20000550

0800a6d8 <__malloc_unlock>:
 800a6d8:	4801      	ldr	r0, [pc, #4]	; (800a6e0 <__malloc_unlock+0x8>)
 800a6da:	f001 b8d4 	b.w	800b886 <__retarget_lock_release_recursive>
 800a6de:	bf00      	nop
 800a6e0:	20000550 	.word	0x20000550

0800a6e4 <_Balloc>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	b976      	cbnz	r6, 800a70c <_Balloc+0x28>
 800a6ee:	2010      	movs	r0, #16
 800a6f0:	f7fe fafa 	bl	8008ce8 <malloc>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a6f8:	b920      	cbnz	r0, 800a704 <_Balloc+0x20>
 800a6fa:	4b18      	ldr	r3, [pc, #96]	; (800a75c <_Balloc+0x78>)
 800a6fc:	4818      	ldr	r0, [pc, #96]	; (800a760 <_Balloc+0x7c>)
 800a6fe:	2166      	movs	r1, #102	; 0x66
 800a700:	f7ff f928 	bl	8009954 <__assert_func>
 800a704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a708:	6006      	str	r6, [r0, #0]
 800a70a:	60c6      	str	r6, [r0, #12]
 800a70c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a70e:	68f3      	ldr	r3, [r6, #12]
 800a710:	b183      	cbz	r3, 800a734 <_Balloc+0x50>
 800a712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a71a:	b9b8      	cbnz	r0, 800a74c <_Balloc+0x68>
 800a71c:	2101      	movs	r1, #1
 800a71e:	fa01 f605 	lsl.w	r6, r1, r5
 800a722:	1d72      	adds	r2, r6, #5
 800a724:	0092      	lsls	r2, r2, #2
 800a726:	4620      	mov	r0, r4
 800a728:	f000 fb60 	bl	800adec <_calloc_r>
 800a72c:	b160      	cbz	r0, 800a748 <_Balloc+0x64>
 800a72e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a732:	e00e      	b.n	800a752 <_Balloc+0x6e>
 800a734:	2221      	movs	r2, #33	; 0x21
 800a736:	2104      	movs	r1, #4
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 fb57 	bl	800adec <_calloc_r>
 800a73e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a740:	60f0      	str	r0, [r6, #12]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e4      	bne.n	800a712 <_Balloc+0x2e>
 800a748:	2000      	movs	r0, #0
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	6802      	ldr	r2, [r0, #0]
 800a74e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a752:	2300      	movs	r3, #0
 800a754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a758:	e7f7      	b.n	800a74a <_Balloc+0x66>
 800a75a:	bf00      	nop
 800a75c:	0800bfe4 	.word	0x0800bfe4
 800a760:	0800c10d 	.word	0x0800c10d

0800a764 <_Bfree>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a768:	4605      	mov	r5, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	b976      	cbnz	r6, 800a78c <_Bfree+0x28>
 800a76e:	2010      	movs	r0, #16
 800a770:	f7fe faba 	bl	8008ce8 <malloc>
 800a774:	4602      	mov	r2, r0
 800a776:	6268      	str	r0, [r5, #36]	; 0x24
 800a778:	b920      	cbnz	r0, 800a784 <_Bfree+0x20>
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <_Bfree+0x3c>)
 800a77c:	4809      	ldr	r0, [pc, #36]	; (800a7a4 <_Bfree+0x40>)
 800a77e:	218a      	movs	r1, #138	; 0x8a
 800a780:	f7ff f8e8 	bl	8009954 <__assert_func>
 800a784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a788:	6006      	str	r6, [r0, #0]
 800a78a:	60c6      	str	r6, [r0, #12]
 800a78c:	b13c      	cbz	r4, 800a79e <_Bfree+0x3a>
 800a78e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a790:	6862      	ldr	r2, [r4, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a798:	6021      	str	r1, [r4, #0]
 800a79a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	0800bfe4 	.word	0x0800bfe4
 800a7a4:	0800c10d 	.word	0x0800c10d

0800a7a8 <__multadd>:
 800a7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ac:	690d      	ldr	r5, [r1, #16]
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	461e      	mov	r6, r3
 800a7b4:	f101 0c14 	add.w	ip, r1, #20
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a7be:	b299      	uxth	r1, r3
 800a7c0:	fb02 6101 	mla	r1, r2, r1, r6
 800a7c4:	0c1e      	lsrs	r6, r3, #16
 800a7c6:	0c0b      	lsrs	r3, r1, #16
 800a7c8:	fb02 3306 	mla	r3, r2, r6, r3
 800a7cc:	b289      	uxth	r1, r1
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7d4:	4285      	cmp	r5, r0
 800a7d6:	f84c 1b04 	str.w	r1, [ip], #4
 800a7da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7de:	dcec      	bgt.n	800a7ba <__multadd+0x12>
 800a7e0:	b30e      	cbz	r6, 800a826 <__multadd+0x7e>
 800a7e2:	68a3      	ldr	r3, [r4, #8]
 800a7e4:	42ab      	cmp	r3, r5
 800a7e6:	dc19      	bgt.n	800a81c <__multadd+0x74>
 800a7e8:	6861      	ldr	r1, [r4, #4]
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	3101      	adds	r1, #1
 800a7ee:	f7ff ff79 	bl	800a6e4 <_Balloc>
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	b928      	cbnz	r0, 800a802 <__multadd+0x5a>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	4b0c      	ldr	r3, [pc, #48]	; (800a82c <__multadd+0x84>)
 800a7fa:	480d      	ldr	r0, [pc, #52]	; (800a830 <__multadd+0x88>)
 800a7fc:	21b5      	movs	r1, #181	; 0xb5
 800a7fe:	f7ff f8a9 	bl	8009954 <__assert_func>
 800a802:	6922      	ldr	r2, [r4, #16]
 800a804:	3202      	adds	r2, #2
 800a806:	f104 010c 	add.w	r1, r4, #12
 800a80a:	0092      	lsls	r2, r2, #2
 800a80c:	300c      	adds	r0, #12
 800a80e:	f7ff ff4f 	bl	800a6b0 <memcpy>
 800a812:	4621      	mov	r1, r4
 800a814:	4638      	mov	r0, r7
 800a816:	f7ff ffa5 	bl	800a764 <_Bfree>
 800a81a:	4644      	mov	r4, r8
 800a81c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a820:	3501      	adds	r5, #1
 800a822:	615e      	str	r6, [r3, #20]
 800a824:	6125      	str	r5, [r4, #16]
 800a826:	4620      	mov	r0, r4
 800a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82c:	0800c0fc 	.word	0x0800c0fc
 800a830:	0800c10d 	.word	0x0800c10d

0800a834 <__hi0bits>:
 800a834:	0c03      	lsrs	r3, r0, #16
 800a836:	041b      	lsls	r3, r3, #16
 800a838:	b9d3      	cbnz	r3, 800a870 <__hi0bits+0x3c>
 800a83a:	0400      	lsls	r0, r0, #16
 800a83c:	2310      	movs	r3, #16
 800a83e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a842:	bf04      	itt	eq
 800a844:	0200      	lsleq	r0, r0, #8
 800a846:	3308      	addeq	r3, #8
 800a848:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a84c:	bf04      	itt	eq
 800a84e:	0100      	lsleq	r0, r0, #4
 800a850:	3304      	addeq	r3, #4
 800a852:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a856:	bf04      	itt	eq
 800a858:	0080      	lsleq	r0, r0, #2
 800a85a:	3302      	addeq	r3, #2
 800a85c:	2800      	cmp	r0, #0
 800a85e:	db05      	blt.n	800a86c <__hi0bits+0x38>
 800a860:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a864:	f103 0301 	add.w	r3, r3, #1
 800a868:	bf08      	it	eq
 800a86a:	2320      	moveq	r3, #32
 800a86c:	4618      	mov	r0, r3
 800a86e:	4770      	bx	lr
 800a870:	2300      	movs	r3, #0
 800a872:	e7e4      	b.n	800a83e <__hi0bits+0xa>

0800a874 <__lo0bits>:
 800a874:	6803      	ldr	r3, [r0, #0]
 800a876:	f013 0207 	ands.w	r2, r3, #7
 800a87a:	4601      	mov	r1, r0
 800a87c:	d00b      	beq.n	800a896 <__lo0bits+0x22>
 800a87e:	07da      	lsls	r2, r3, #31
 800a880:	d423      	bmi.n	800a8ca <__lo0bits+0x56>
 800a882:	0798      	lsls	r0, r3, #30
 800a884:	bf49      	itett	mi
 800a886:	085b      	lsrmi	r3, r3, #1
 800a888:	089b      	lsrpl	r3, r3, #2
 800a88a:	2001      	movmi	r0, #1
 800a88c:	600b      	strmi	r3, [r1, #0]
 800a88e:	bf5c      	itt	pl
 800a890:	600b      	strpl	r3, [r1, #0]
 800a892:	2002      	movpl	r0, #2
 800a894:	4770      	bx	lr
 800a896:	b298      	uxth	r0, r3
 800a898:	b9a8      	cbnz	r0, 800a8c6 <__lo0bits+0x52>
 800a89a:	0c1b      	lsrs	r3, r3, #16
 800a89c:	2010      	movs	r0, #16
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	b90a      	cbnz	r2, 800a8a6 <__lo0bits+0x32>
 800a8a2:	3008      	adds	r0, #8
 800a8a4:	0a1b      	lsrs	r3, r3, #8
 800a8a6:	071a      	lsls	r2, r3, #28
 800a8a8:	bf04      	itt	eq
 800a8aa:	091b      	lsreq	r3, r3, #4
 800a8ac:	3004      	addeq	r0, #4
 800a8ae:	079a      	lsls	r2, r3, #30
 800a8b0:	bf04      	itt	eq
 800a8b2:	089b      	lsreq	r3, r3, #2
 800a8b4:	3002      	addeq	r0, #2
 800a8b6:	07da      	lsls	r2, r3, #31
 800a8b8:	d403      	bmi.n	800a8c2 <__lo0bits+0x4e>
 800a8ba:	085b      	lsrs	r3, r3, #1
 800a8bc:	f100 0001 	add.w	r0, r0, #1
 800a8c0:	d005      	beq.n	800a8ce <__lo0bits+0x5a>
 800a8c2:	600b      	str	r3, [r1, #0]
 800a8c4:	4770      	bx	lr
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	e7e9      	b.n	800a89e <__lo0bits+0x2a>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	4770      	bx	lr
 800a8ce:	2020      	movs	r0, #32
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <__i2b>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	2101      	movs	r1, #1
 800a8da:	f7ff ff03 	bl	800a6e4 <_Balloc>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	b928      	cbnz	r0, 800a8ee <__i2b+0x1a>
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <__i2b+0x24>)
 800a8e4:	4805      	ldr	r0, [pc, #20]	; (800a8fc <__i2b+0x28>)
 800a8e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a8ea:	f7ff f833 	bl	8009954 <__assert_func>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	6144      	str	r4, [r0, #20]
 800a8f2:	6103      	str	r3, [r0, #16]
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	bf00      	nop
 800a8f8:	0800c0fc 	.word	0x0800c0fc
 800a8fc:	0800c10d 	.word	0x0800c10d

0800a900 <__multiply>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	4691      	mov	r9, r2
 800a906:	690a      	ldr	r2, [r1, #16]
 800a908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	bfb8      	it	lt
 800a910:	460b      	movlt	r3, r1
 800a912:	460c      	mov	r4, r1
 800a914:	bfbc      	itt	lt
 800a916:	464c      	movlt	r4, r9
 800a918:	4699      	movlt	r9, r3
 800a91a:	6927      	ldr	r7, [r4, #16]
 800a91c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a920:	68a3      	ldr	r3, [r4, #8]
 800a922:	6861      	ldr	r1, [r4, #4]
 800a924:	eb07 060a 	add.w	r6, r7, sl
 800a928:	42b3      	cmp	r3, r6
 800a92a:	b085      	sub	sp, #20
 800a92c:	bfb8      	it	lt
 800a92e:	3101      	addlt	r1, #1
 800a930:	f7ff fed8 	bl	800a6e4 <_Balloc>
 800a934:	b930      	cbnz	r0, 800a944 <__multiply+0x44>
 800a936:	4602      	mov	r2, r0
 800a938:	4b44      	ldr	r3, [pc, #272]	; (800aa4c <__multiply+0x14c>)
 800a93a:	4845      	ldr	r0, [pc, #276]	; (800aa50 <__multiply+0x150>)
 800a93c:	f240 115d 	movw	r1, #349	; 0x15d
 800a940:	f7ff f808 	bl	8009954 <__assert_func>
 800a944:	f100 0514 	add.w	r5, r0, #20
 800a948:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a94c:	462b      	mov	r3, r5
 800a94e:	2200      	movs	r2, #0
 800a950:	4543      	cmp	r3, r8
 800a952:	d321      	bcc.n	800a998 <__multiply+0x98>
 800a954:	f104 0314 	add.w	r3, r4, #20
 800a958:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a95c:	f109 0314 	add.w	r3, r9, #20
 800a960:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a964:	9202      	str	r2, [sp, #8]
 800a966:	1b3a      	subs	r2, r7, r4
 800a968:	3a15      	subs	r2, #21
 800a96a:	f022 0203 	bic.w	r2, r2, #3
 800a96e:	3204      	adds	r2, #4
 800a970:	f104 0115 	add.w	r1, r4, #21
 800a974:	428f      	cmp	r7, r1
 800a976:	bf38      	it	cc
 800a978:	2204      	movcc	r2, #4
 800a97a:	9201      	str	r2, [sp, #4]
 800a97c:	9a02      	ldr	r2, [sp, #8]
 800a97e:	9303      	str	r3, [sp, #12]
 800a980:	429a      	cmp	r2, r3
 800a982:	d80c      	bhi.n	800a99e <__multiply+0x9e>
 800a984:	2e00      	cmp	r6, #0
 800a986:	dd03      	ble.n	800a990 <__multiply+0x90>
 800a988:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d05a      	beq.n	800aa46 <__multiply+0x146>
 800a990:	6106      	str	r6, [r0, #16]
 800a992:	b005      	add	sp, #20
 800a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a998:	f843 2b04 	str.w	r2, [r3], #4
 800a99c:	e7d8      	b.n	800a950 <__multiply+0x50>
 800a99e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9a2:	f1ba 0f00 	cmp.w	sl, #0
 800a9a6:	d024      	beq.n	800a9f2 <__multiply+0xf2>
 800a9a8:	f104 0e14 	add.w	lr, r4, #20
 800a9ac:	46a9      	mov	r9, r5
 800a9ae:	f04f 0c00 	mov.w	ip, #0
 800a9b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a9b6:	f8d9 1000 	ldr.w	r1, [r9]
 800a9ba:	fa1f fb82 	uxth.w	fp, r2
 800a9be:	b289      	uxth	r1, r1
 800a9c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a9c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a9c8:	f8d9 2000 	ldr.w	r2, [r9]
 800a9cc:	4461      	add	r1, ip
 800a9ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a9d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a9da:	b289      	uxth	r1, r1
 800a9dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9e0:	4577      	cmp	r7, lr
 800a9e2:	f849 1b04 	str.w	r1, [r9], #4
 800a9e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9ea:	d8e2      	bhi.n	800a9b2 <__multiply+0xb2>
 800a9ec:	9a01      	ldr	r2, [sp, #4]
 800a9ee:	f845 c002 	str.w	ip, [r5, r2]
 800a9f2:	9a03      	ldr	r2, [sp, #12]
 800a9f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	f1b9 0f00 	cmp.w	r9, #0
 800a9fe:	d020      	beq.n	800aa42 <__multiply+0x142>
 800aa00:	6829      	ldr	r1, [r5, #0]
 800aa02:	f104 0c14 	add.w	ip, r4, #20
 800aa06:	46ae      	mov	lr, r5
 800aa08:	f04f 0a00 	mov.w	sl, #0
 800aa0c:	f8bc b000 	ldrh.w	fp, [ip]
 800aa10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa14:	fb09 220b 	mla	r2, r9, fp, r2
 800aa18:	4492      	add	sl, r2
 800aa1a:	b289      	uxth	r1, r1
 800aa1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aa20:	f84e 1b04 	str.w	r1, [lr], #4
 800aa24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa28:	f8be 1000 	ldrh.w	r1, [lr]
 800aa2c:	0c12      	lsrs	r2, r2, #16
 800aa2e:	fb09 1102 	mla	r1, r9, r2, r1
 800aa32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aa36:	4567      	cmp	r7, ip
 800aa38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa3c:	d8e6      	bhi.n	800aa0c <__multiply+0x10c>
 800aa3e:	9a01      	ldr	r2, [sp, #4]
 800aa40:	50a9      	str	r1, [r5, r2]
 800aa42:	3504      	adds	r5, #4
 800aa44:	e79a      	b.n	800a97c <__multiply+0x7c>
 800aa46:	3e01      	subs	r6, #1
 800aa48:	e79c      	b.n	800a984 <__multiply+0x84>
 800aa4a:	bf00      	nop
 800aa4c:	0800c0fc 	.word	0x0800c0fc
 800aa50:	0800c10d 	.word	0x0800c10d

0800aa54 <__pow5mult>:
 800aa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa58:	4615      	mov	r5, r2
 800aa5a:	f012 0203 	ands.w	r2, r2, #3
 800aa5e:	4606      	mov	r6, r0
 800aa60:	460f      	mov	r7, r1
 800aa62:	d007      	beq.n	800aa74 <__pow5mult+0x20>
 800aa64:	4c25      	ldr	r4, [pc, #148]	; (800aafc <__pow5mult+0xa8>)
 800aa66:	3a01      	subs	r2, #1
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa6e:	f7ff fe9b 	bl	800a7a8 <__multadd>
 800aa72:	4607      	mov	r7, r0
 800aa74:	10ad      	asrs	r5, r5, #2
 800aa76:	d03d      	beq.n	800aaf4 <__pow5mult+0xa0>
 800aa78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa7a:	b97c      	cbnz	r4, 800aa9c <__pow5mult+0x48>
 800aa7c:	2010      	movs	r0, #16
 800aa7e:	f7fe f933 	bl	8008ce8 <malloc>
 800aa82:	4602      	mov	r2, r0
 800aa84:	6270      	str	r0, [r6, #36]	; 0x24
 800aa86:	b928      	cbnz	r0, 800aa94 <__pow5mult+0x40>
 800aa88:	4b1d      	ldr	r3, [pc, #116]	; (800ab00 <__pow5mult+0xac>)
 800aa8a:	481e      	ldr	r0, [pc, #120]	; (800ab04 <__pow5mult+0xb0>)
 800aa8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa90:	f7fe ff60 	bl	8009954 <__assert_func>
 800aa94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa98:	6004      	str	r4, [r0, #0]
 800aa9a:	60c4      	str	r4, [r0, #12]
 800aa9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aaa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaa4:	b94c      	cbnz	r4, 800aaba <__pow5mult+0x66>
 800aaa6:	f240 2171 	movw	r1, #625	; 0x271
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7ff ff12 	bl	800a8d4 <__i2b>
 800aab0:	2300      	movs	r3, #0
 800aab2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aab6:	4604      	mov	r4, r0
 800aab8:	6003      	str	r3, [r0, #0]
 800aaba:	f04f 0900 	mov.w	r9, #0
 800aabe:	07eb      	lsls	r3, r5, #31
 800aac0:	d50a      	bpl.n	800aad8 <__pow5mult+0x84>
 800aac2:	4639      	mov	r1, r7
 800aac4:	4622      	mov	r2, r4
 800aac6:	4630      	mov	r0, r6
 800aac8:	f7ff ff1a 	bl	800a900 <__multiply>
 800aacc:	4639      	mov	r1, r7
 800aace:	4680      	mov	r8, r0
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7ff fe47 	bl	800a764 <_Bfree>
 800aad6:	4647      	mov	r7, r8
 800aad8:	106d      	asrs	r5, r5, #1
 800aada:	d00b      	beq.n	800aaf4 <__pow5mult+0xa0>
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	b938      	cbnz	r0, 800aaf0 <__pow5mult+0x9c>
 800aae0:	4622      	mov	r2, r4
 800aae2:	4621      	mov	r1, r4
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7ff ff0b 	bl	800a900 <__multiply>
 800aaea:	6020      	str	r0, [r4, #0]
 800aaec:	f8c0 9000 	str.w	r9, [r0]
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	e7e4      	b.n	800aabe <__pow5mult+0x6a>
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafa:	bf00      	nop
 800aafc:	0800c260 	.word	0x0800c260
 800ab00:	0800bfe4 	.word	0x0800bfe4
 800ab04:	0800c10d 	.word	0x0800c10d

0800ab08 <__lshift>:
 800ab08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	6849      	ldr	r1, [r1, #4]
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	4607      	mov	r7, r0
 800ab1a:	4691      	mov	r9, r2
 800ab1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab20:	f108 0601 	add.w	r6, r8, #1
 800ab24:	42b3      	cmp	r3, r6
 800ab26:	db0b      	blt.n	800ab40 <__lshift+0x38>
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7ff fddb 	bl	800a6e4 <_Balloc>
 800ab2e:	4605      	mov	r5, r0
 800ab30:	b948      	cbnz	r0, 800ab46 <__lshift+0x3e>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4b2a      	ldr	r3, [pc, #168]	; (800abe0 <__lshift+0xd8>)
 800ab36:	482b      	ldr	r0, [pc, #172]	; (800abe4 <__lshift+0xdc>)
 800ab38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab3c:	f7fe ff0a 	bl	8009954 <__assert_func>
 800ab40:	3101      	adds	r1, #1
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	e7ee      	b.n	800ab24 <__lshift+0x1c>
 800ab46:	2300      	movs	r3, #0
 800ab48:	f100 0114 	add.w	r1, r0, #20
 800ab4c:	f100 0210 	add.w	r2, r0, #16
 800ab50:	4618      	mov	r0, r3
 800ab52:	4553      	cmp	r3, sl
 800ab54:	db37      	blt.n	800abc6 <__lshift+0xbe>
 800ab56:	6920      	ldr	r0, [r4, #16]
 800ab58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab5c:	f104 0314 	add.w	r3, r4, #20
 800ab60:	f019 091f 	ands.w	r9, r9, #31
 800ab64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab6c:	d02f      	beq.n	800abce <__lshift+0xc6>
 800ab6e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab72:	468a      	mov	sl, r1
 800ab74:	f04f 0c00 	mov.w	ip, #0
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	fa02 f209 	lsl.w	r2, r2, r9
 800ab7e:	ea42 020c 	orr.w	r2, r2, ip
 800ab82:	f84a 2b04 	str.w	r2, [sl], #4
 800ab86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab8a:	4298      	cmp	r0, r3
 800ab8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ab90:	d8f2      	bhi.n	800ab78 <__lshift+0x70>
 800ab92:	1b03      	subs	r3, r0, r4
 800ab94:	3b15      	subs	r3, #21
 800ab96:	f023 0303 	bic.w	r3, r3, #3
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	f104 0215 	add.w	r2, r4, #21
 800aba0:	4290      	cmp	r0, r2
 800aba2:	bf38      	it	cc
 800aba4:	2304      	movcc	r3, #4
 800aba6:	f841 c003 	str.w	ip, [r1, r3]
 800abaa:	f1bc 0f00 	cmp.w	ip, #0
 800abae:	d001      	beq.n	800abb4 <__lshift+0xac>
 800abb0:	f108 0602 	add.w	r6, r8, #2
 800abb4:	3e01      	subs	r6, #1
 800abb6:	4638      	mov	r0, r7
 800abb8:	612e      	str	r6, [r5, #16]
 800abba:	4621      	mov	r1, r4
 800abbc:	f7ff fdd2 	bl	800a764 <_Bfree>
 800abc0:	4628      	mov	r0, r5
 800abc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800abca:	3301      	adds	r3, #1
 800abcc:	e7c1      	b.n	800ab52 <__lshift+0x4a>
 800abce:	3904      	subs	r1, #4
 800abd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800abd8:	4298      	cmp	r0, r3
 800abda:	d8f9      	bhi.n	800abd0 <__lshift+0xc8>
 800abdc:	e7ea      	b.n	800abb4 <__lshift+0xac>
 800abde:	bf00      	nop
 800abe0:	0800c0fc 	.word	0x0800c0fc
 800abe4:	0800c10d 	.word	0x0800c10d

0800abe8 <__mcmp>:
 800abe8:	b530      	push	{r4, r5, lr}
 800abea:	6902      	ldr	r2, [r0, #16]
 800abec:	690c      	ldr	r4, [r1, #16]
 800abee:	1b12      	subs	r2, r2, r4
 800abf0:	d10e      	bne.n	800ac10 <__mcmp+0x28>
 800abf2:	f100 0314 	add.w	r3, r0, #20
 800abf6:	3114      	adds	r1, #20
 800abf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac08:	42a5      	cmp	r5, r4
 800ac0a:	d003      	beq.n	800ac14 <__mcmp+0x2c>
 800ac0c:	d305      	bcc.n	800ac1a <__mcmp+0x32>
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4610      	mov	r0, r2
 800ac12:	bd30      	pop	{r4, r5, pc}
 800ac14:	4283      	cmp	r3, r0
 800ac16:	d3f3      	bcc.n	800ac00 <__mcmp+0x18>
 800ac18:	e7fa      	b.n	800ac10 <__mcmp+0x28>
 800ac1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1e:	e7f7      	b.n	800ac10 <__mcmp+0x28>

0800ac20 <__mdiff>:
 800ac20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	460c      	mov	r4, r1
 800ac26:	4606      	mov	r6, r0
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4690      	mov	r8, r2
 800ac2e:	f7ff ffdb 	bl	800abe8 <__mcmp>
 800ac32:	1e05      	subs	r5, r0, #0
 800ac34:	d110      	bne.n	800ac58 <__mdiff+0x38>
 800ac36:	4629      	mov	r1, r5
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f7ff fd53 	bl	800a6e4 <_Balloc>
 800ac3e:	b930      	cbnz	r0, 800ac4e <__mdiff+0x2e>
 800ac40:	4b3a      	ldr	r3, [pc, #232]	; (800ad2c <__mdiff+0x10c>)
 800ac42:	4602      	mov	r2, r0
 800ac44:	f240 2132 	movw	r1, #562	; 0x232
 800ac48:	4839      	ldr	r0, [pc, #228]	; (800ad30 <__mdiff+0x110>)
 800ac4a:	f7fe fe83 	bl	8009954 <__assert_func>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac58:	bfa4      	itt	ge
 800ac5a:	4643      	movge	r3, r8
 800ac5c:	46a0      	movge	r8, r4
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac64:	bfa6      	itte	ge
 800ac66:	461c      	movge	r4, r3
 800ac68:	2500      	movge	r5, #0
 800ac6a:	2501      	movlt	r5, #1
 800ac6c:	f7ff fd3a 	bl	800a6e4 <_Balloc>
 800ac70:	b920      	cbnz	r0, 800ac7c <__mdiff+0x5c>
 800ac72:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <__mdiff+0x10c>)
 800ac74:	4602      	mov	r2, r0
 800ac76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac7a:	e7e5      	b.n	800ac48 <__mdiff+0x28>
 800ac7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac80:	6926      	ldr	r6, [r4, #16]
 800ac82:	60c5      	str	r5, [r0, #12]
 800ac84:	f104 0914 	add.w	r9, r4, #20
 800ac88:	f108 0514 	add.w	r5, r8, #20
 800ac8c:	f100 0e14 	add.w	lr, r0, #20
 800ac90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac98:	f108 0210 	add.w	r2, r8, #16
 800ac9c:	46f2      	mov	sl, lr
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f859 3b04 	ldr.w	r3, [r9], #4
 800aca4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aca8:	fa1f f883 	uxth.w	r8, r3
 800acac:	fa11 f18b 	uxtah	r1, r1, fp
 800acb0:	0c1b      	lsrs	r3, r3, #16
 800acb2:	eba1 0808 	sub.w	r8, r1, r8
 800acb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800acba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800acbe:	fa1f f888 	uxth.w	r8, r8
 800acc2:	1419      	asrs	r1, r3, #16
 800acc4:	454e      	cmp	r6, r9
 800acc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acca:	f84a 3b04 	str.w	r3, [sl], #4
 800acce:	d8e7      	bhi.n	800aca0 <__mdiff+0x80>
 800acd0:	1b33      	subs	r3, r6, r4
 800acd2:	3b15      	subs	r3, #21
 800acd4:	f023 0303 	bic.w	r3, r3, #3
 800acd8:	3304      	adds	r3, #4
 800acda:	3415      	adds	r4, #21
 800acdc:	42a6      	cmp	r6, r4
 800acde:	bf38      	it	cc
 800ace0:	2304      	movcc	r3, #4
 800ace2:	441d      	add	r5, r3
 800ace4:	4473      	add	r3, lr
 800ace6:	469e      	mov	lr, r3
 800ace8:	462e      	mov	r6, r5
 800acea:	4566      	cmp	r6, ip
 800acec:	d30e      	bcc.n	800ad0c <__mdiff+0xec>
 800acee:	f10c 0203 	add.w	r2, ip, #3
 800acf2:	1b52      	subs	r2, r2, r5
 800acf4:	f022 0203 	bic.w	r2, r2, #3
 800acf8:	3d03      	subs	r5, #3
 800acfa:	45ac      	cmp	ip, r5
 800acfc:	bf38      	it	cc
 800acfe:	2200      	movcc	r2, #0
 800ad00:	441a      	add	r2, r3
 800ad02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad06:	b17b      	cbz	r3, 800ad28 <__mdiff+0x108>
 800ad08:	6107      	str	r7, [r0, #16]
 800ad0a:	e7a3      	b.n	800ac54 <__mdiff+0x34>
 800ad0c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad10:	fa11 f288 	uxtah	r2, r1, r8
 800ad14:	1414      	asrs	r4, r2, #16
 800ad16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ad1a:	b292      	uxth	r2, r2
 800ad1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ad20:	f84e 2b04 	str.w	r2, [lr], #4
 800ad24:	1421      	asrs	r1, r4, #16
 800ad26:	e7e0      	b.n	800acea <__mdiff+0xca>
 800ad28:	3f01      	subs	r7, #1
 800ad2a:	e7ea      	b.n	800ad02 <__mdiff+0xe2>
 800ad2c:	0800c0fc 	.word	0x0800c0fc
 800ad30:	0800c10d 	.word	0x0800c10d

0800ad34 <__d2b>:
 800ad34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad38:	4689      	mov	r9, r1
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	ec57 6b10 	vmov	r6, r7, d0
 800ad40:	4690      	mov	r8, r2
 800ad42:	f7ff fccf 	bl	800a6e4 <_Balloc>
 800ad46:	4604      	mov	r4, r0
 800ad48:	b930      	cbnz	r0, 800ad58 <__d2b+0x24>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4b25      	ldr	r3, [pc, #148]	; (800ade4 <__d2b+0xb0>)
 800ad4e:	4826      	ldr	r0, [pc, #152]	; (800ade8 <__d2b+0xb4>)
 800ad50:	f240 310a 	movw	r1, #778	; 0x30a
 800ad54:	f7fe fdfe 	bl	8009954 <__assert_func>
 800ad58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad60:	bb35      	cbnz	r5, 800adb0 <__d2b+0x7c>
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	d028      	beq.n	800adba <__d2b+0x86>
 800ad68:	4668      	mov	r0, sp
 800ad6a:	9600      	str	r6, [sp, #0]
 800ad6c:	f7ff fd82 	bl	800a874 <__lo0bits>
 800ad70:	9900      	ldr	r1, [sp, #0]
 800ad72:	b300      	cbz	r0, 800adb6 <__d2b+0x82>
 800ad74:	9a01      	ldr	r2, [sp, #4]
 800ad76:	f1c0 0320 	rsb	r3, r0, #32
 800ad7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	40c2      	lsrs	r2, r0
 800ad82:	6163      	str	r3, [r4, #20]
 800ad84:	9201      	str	r2, [sp, #4]
 800ad86:	9b01      	ldr	r3, [sp, #4]
 800ad88:	61a3      	str	r3, [r4, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	bf14      	ite	ne
 800ad8e:	2202      	movne	r2, #2
 800ad90:	2201      	moveq	r2, #1
 800ad92:	6122      	str	r2, [r4, #16]
 800ad94:	b1d5      	cbz	r5, 800adcc <__d2b+0x98>
 800ad96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad9a:	4405      	add	r5, r0
 800ad9c:	f8c9 5000 	str.w	r5, [r9]
 800ada0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ada4:	f8c8 0000 	str.w	r0, [r8]
 800ada8:	4620      	mov	r0, r4
 800adaa:	b003      	add	sp, #12
 800adac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adb4:	e7d5      	b.n	800ad62 <__d2b+0x2e>
 800adb6:	6161      	str	r1, [r4, #20]
 800adb8:	e7e5      	b.n	800ad86 <__d2b+0x52>
 800adba:	a801      	add	r0, sp, #4
 800adbc:	f7ff fd5a 	bl	800a874 <__lo0bits>
 800adc0:	9b01      	ldr	r3, [sp, #4]
 800adc2:	6163      	str	r3, [r4, #20]
 800adc4:	2201      	movs	r2, #1
 800adc6:	6122      	str	r2, [r4, #16]
 800adc8:	3020      	adds	r0, #32
 800adca:	e7e3      	b.n	800ad94 <__d2b+0x60>
 800adcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800add0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800add4:	f8c9 0000 	str.w	r0, [r9]
 800add8:	6918      	ldr	r0, [r3, #16]
 800adda:	f7ff fd2b 	bl	800a834 <__hi0bits>
 800adde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ade2:	e7df      	b.n	800ada4 <__d2b+0x70>
 800ade4:	0800c0fc 	.word	0x0800c0fc
 800ade8:	0800c10d 	.word	0x0800c10d

0800adec <_calloc_r>:
 800adec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adee:	fba1 2402 	umull	r2, r4, r1, r2
 800adf2:	b94c      	cbnz	r4, 800ae08 <_calloc_r+0x1c>
 800adf4:	4611      	mov	r1, r2
 800adf6:	9201      	str	r2, [sp, #4]
 800adf8:	f7fd fffa 	bl	8008df0 <_malloc_r>
 800adfc:	9a01      	ldr	r2, [sp, #4]
 800adfe:	4605      	mov	r5, r0
 800ae00:	b930      	cbnz	r0, 800ae10 <_calloc_r+0x24>
 800ae02:	4628      	mov	r0, r5
 800ae04:	b003      	add	sp, #12
 800ae06:	bd30      	pop	{r4, r5, pc}
 800ae08:	220c      	movs	r2, #12
 800ae0a:	6002      	str	r2, [r0, #0]
 800ae0c:	2500      	movs	r5, #0
 800ae0e:	e7f8      	b.n	800ae02 <_calloc_r+0x16>
 800ae10:	4621      	mov	r1, r4
 800ae12:	f7fd ff79 	bl	8008d08 <memset>
 800ae16:	e7f4      	b.n	800ae02 <_calloc_r+0x16>

0800ae18 <__ssputs_r>:
 800ae18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	688e      	ldr	r6, [r1, #8]
 800ae1e:	429e      	cmp	r6, r3
 800ae20:	4682      	mov	sl, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	4690      	mov	r8, r2
 800ae26:	461f      	mov	r7, r3
 800ae28:	d838      	bhi.n	800ae9c <__ssputs_r+0x84>
 800ae2a:	898a      	ldrh	r2, [r1, #12]
 800ae2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae30:	d032      	beq.n	800ae98 <__ssputs_r+0x80>
 800ae32:	6825      	ldr	r5, [r4, #0]
 800ae34:	6909      	ldr	r1, [r1, #16]
 800ae36:	eba5 0901 	sub.w	r9, r5, r1
 800ae3a:	6965      	ldr	r5, [r4, #20]
 800ae3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae44:	3301      	adds	r3, #1
 800ae46:	444b      	add	r3, r9
 800ae48:	106d      	asrs	r5, r5, #1
 800ae4a:	429d      	cmp	r5, r3
 800ae4c:	bf38      	it	cc
 800ae4e:	461d      	movcc	r5, r3
 800ae50:	0553      	lsls	r3, r2, #21
 800ae52:	d531      	bpl.n	800aeb8 <__ssputs_r+0xa0>
 800ae54:	4629      	mov	r1, r5
 800ae56:	f7fd ffcb 	bl	8008df0 <_malloc_r>
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	b950      	cbnz	r0, 800ae74 <__ssputs_r+0x5c>
 800ae5e:	230c      	movs	r3, #12
 800ae60:	f8ca 3000 	str.w	r3, [sl]
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae6a:	81a3      	strh	r3, [r4, #12]
 800ae6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae74:	6921      	ldr	r1, [r4, #16]
 800ae76:	464a      	mov	r2, r9
 800ae78:	f7ff fc1a 	bl	800a6b0 <memcpy>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	6126      	str	r6, [r4, #16]
 800ae8a:	6165      	str	r5, [r4, #20]
 800ae8c:	444e      	add	r6, r9
 800ae8e:	eba5 0509 	sub.w	r5, r5, r9
 800ae92:	6026      	str	r6, [r4, #0]
 800ae94:	60a5      	str	r5, [r4, #8]
 800ae96:	463e      	mov	r6, r7
 800ae98:	42be      	cmp	r6, r7
 800ae9a:	d900      	bls.n	800ae9e <__ssputs_r+0x86>
 800ae9c:	463e      	mov	r6, r7
 800ae9e:	6820      	ldr	r0, [r4, #0]
 800aea0:	4632      	mov	r2, r6
 800aea2:	4641      	mov	r1, r8
 800aea4:	f000 fd68 	bl	800b978 <memmove>
 800aea8:	68a3      	ldr	r3, [r4, #8]
 800aeaa:	1b9b      	subs	r3, r3, r6
 800aeac:	60a3      	str	r3, [r4, #8]
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	4433      	add	r3, r6
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e7db      	b.n	800ae70 <__ssputs_r+0x58>
 800aeb8:	462a      	mov	r2, r5
 800aeba:	f000 fd77 	bl	800b9ac <_realloc_r>
 800aebe:	4606      	mov	r6, r0
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d1e1      	bne.n	800ae88 <__ssputs_r+0x70>
 800aec4:	6921      	ldr	r1, [r4, #16]
 800aec6:	4650      	mov	r0, sl
 800aec8:	f7fd ff26 	bl	8008d18 <_free_r>
 800aecc:	e7c7      	b.n	800ae5e <__ssputs_r+0x46>
	...

0800aed0 <_svfiprintf_r>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	4698      	mov	r8, r3
 800aed6:	898b      	ldrh	r3, [r1, #12]
 800aed8:	061b      	lsls	r3, r3, #24
 800aeda:	b09d      	sub	sp, #116	; 0x74
 800aedc:	4607      	mov	r7, r0
 800aede:	460d      	mov	r5, r1
 800aee0:	4614      	mov	r4, r2
 800aee2:	d50e      	bpl.n	800af02 <_svfiprintf_r+0x32>
 800aee4:	690b      	ldr	r3, [r1, #16]
 800aee6:	b963      	cbnz	r3, 800af02 <_svfiprintf_r+0x32>
 800aee8:	2140      	movs	r1, #64	; 0x40
 800aeea:	f7fd ff81 	bl	8008df0 <_malloc_r>
 800aeee:	6028      	str	r0, [r5, #0]
 800aef0:	6128      	str	r0, [r5, #16]
 800aef2:	b920      	cbnz	r0, 800aefe <_svfiprintf_r+0x2e>
 800aef4:	230c      	movs	r3, #12
 800aef6:	603b      	str	r3, [r7, #0]
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	e0d1      	b.n	800b0a2 <_svfiprintf_r+0x1d2>
 800aefe:	2340      	movs	r3, #64	; 0x40
 800af00:	616b      	str	r3, [r5, #20]
 800af02:	2300      	movs	r3, #0
 800af04:	9309      	str	r3, [sp, #36]	; 0x24
 800af06:	2320      	movs	r3, #32
 800af08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af10:	2330      	movs	r3, #48	; 0x30
 800af12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0bc <_svfiprintf_r+0x1ec>
 800af16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af1a:	f04f 0901 	mov.w	r9, #1
 800af1e:	4623      	mov	r3, r4
 800af20:	469a      	mov	sl, r3
 800af22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af26:	b10a      	cbz	r2, 800af2c <_svfiprintf_r+0x5c>
 800af28:	2a25      	cmp	r2, #37	; 0x25
 800af2a:	d1f9      	bne.n	800af20 <_svfiprintf_r+0x50>
 800af2c:	ebba 0b04 	subs.w	fp, sl, r4
 800af30:	d00b      	beq.n	800af4a <_svfiprintf_r+0x7a>
 800af32:	465b      	mov	r3, fp
 800af34:	4622      	mov	r2, r4
 800af36:	4629      	mov	r1, r5
 800af38:	4638      	mov	r0, r7
 800af3a:	f7ff ff6d 	bl	800ae18 <__ssputs_r>
 800af3e:	3001      	adds	r0, #1
 800af40:	f000 80aa 	beq.w	800b098 <_svfiprintf_r+0x1c8>
 800af44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af46:	445a      	add	r2, fp
 800af48:	9209      	str	r2, [sp, #36]	; 0x24
 800af4a:	f89a 3000 	ldrb.w	r3, [sl]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 80a2 	beq.w	800b098 <_svfiprintf_r+0x1c8>
 800af54:	2300      	movs	r3, #0
 800af56:	f04f 32ff 	mov.w	r2, #4294967295
 800af5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af5e:	f10a 0a01 	add.w	sl, sl, #1
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	9307      	str	r3, [sp, #28]
 800af66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af6a:	931a      	str	r3, [sp, #104]	; 0x68
 800af6c:	4654      	mov	r4, sl
 800af6e:	2205      	movs	r2, #5
 800af70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af74:	4851      	ldr	r0, [pc, #324]	; (800b0bc <_svfiprintf_r+0x1ec>)
 800af76:	f7f5 f943 	bl	8000200 <memchr>
 800af7a:	9a04      	ldr	r2, [sp, #16]
 800af7c:	b9d8      	cbnz	r0, 800afb6 <_svfiprintf_r+0xe6>
 800af7e:	06d0      	lsls	r0, r2, #27
 800af80:	bf44      	itt	mi
 800af82:	2320      	movmi	r3, #32
 800af84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af88:	0711      	lsls	r1, r2, #28
 800af8a:	bf44      	itt	mi
 800af8c:	232b      	movmi	r3, #43	; 0x2b
 800af8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af92:	f89a 3000 	ldrb.w	r3, [sl]
 800af96:	2b2a      	cmp	r3, #42	; 0x2a
 800af98:	d015      	beq.n	800afc6 <_svfiprintf_r+0xf6>
 800af9a:	9a07      	ldr	r2, [sp, #28]
 800af9c:	4654      	mov	r4, sl
 800af9e:	2000      	movs	r0, #0
 800afa0:	f04f 0c0a 	mov.w	ip, #10
 800afa4:	4621      	mov	r1, r4
 800afa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afaa:	3b30      	subs	r3, #48	; 0x30
 800afac:	2b09      	cmp	r3, #9
 800afae:	d94e      	bls.n	800b04e <_svfiprintf_r+0x17e>
 800afb0:	b1b0      	cbz	r0, 800afe0 <_svfiprintf_r+0x110>
 800afb2:	9207      	str	r2, [sp, #28]
 800afb4:	e014      	b.n	800afe0 <_svfiprintf_r+0x110>
 800afb6:	eba0 0308 	sub.w	r3, r0, r8
 800afba:	fa09 f303 	lsl.w	r3, r9, r3
 800afbe:	4313      	orrs	r3, r2
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	46a2      	mov	sl, r4
 800afc4:	e7d2      	b.n	800af6c <_svfiprintf_r+0x9c>
 800afc6:	9b03      	ldr	r3, [sp, #12]
 800afc8:	1d19      	adds	r1, r3, #4
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	9103      	str	r1, [sp, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	bfbb      	ittet	lt
 800afd2:	425b      	neglt	r3, r3
 800afd4:	f042 0202 	orrlt.w	r2, r2, #2
 800afd8:	9307      	strge	r3, [sp, #28]
 800afda:	9307      	strlt	r3, [sp, #28]
 800afdc:	bfb8      	it	lt
 800afde:	9204      	strlt	r2, [sp, #16]
 800afe0:	7823      	ldrb	r3, [r4, #0]
 800afe2:	2b2e      	cmp	r3, #46	; 0x2e
 800afe4:	d10c      	bne.n	800b000 <_svfiprintf_r+0x130>
 800afe6:	7863      	ldrb	r3, [r4, #1]
 800afe8:	2b2a      	cmp	r3, #42	; 0x2a
 800afea:	d135      	bne.n	800b058 <_svfiprintf_r+0x188>
 800afec:	9b03      	ldr	r3, [sp, #12]
 800afee:	1d1a      	adds	r2, r3, #4
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	9203      	str	r2, [sp, #12]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	bfb8      	it	lt
 800aff8:	f04f 33ff 	movlt.w	r3, #4294967295
 800affc:	3402      	adds	r4, #2
 800affe:	9305      	str	r3, [sp, #20]
 800b000:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0cc <_svfiprintf_r+0x1fc>
 800b004:	7821      	ldrb	r1, [r4, #0]
 800b006:	2203      	movs	r2, #3
 800b008:	4650      	mov	r0, sl
 800b00a:	f7f5 f8f9 	bl	8000200 <memchr>
 800b00e:	b140      	cbz	r0, 800b022 <_svfiprintf_r+0x152>
 800b010:	2340      	movs	r3, #64	; 0x40
 800b012:	eba0 000a 	sub.w	r0, r0, sl
 800b016:	fa03 f000 	lsl.w	r0, r3, r0
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	4303      	orrs	r3, r0
 800b01e:	3401      	adds	r4, #1
 800b020:	9304      	str	r3, [sp, #16]
 800b022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b026:	4826      	ldr	r0, [pc, #152]	; (800b0c0 <_svfiprintf_r+0x1f0>)
 800b028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b02c:	2206      	movs	r2, #6
 800b02e:	f7f5 f8e7 	bl	8000200 <memchr>
 800b032:	2800      	cmp	r0, #0
 800b034:	d038      	beq.n	800b0a8 <_svfiprintf_r+0x1d8>
 800b036:	4b23      	ldr	r3, [pc, #140]	; (800b0c4 <_svfiprintf_r+0x1f4>)
 800b038:	bb1b      	cbnz	r3, 800b082 <_svfiprintf_r+0x1b2>
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	3307      	adds	r3, #7
 800b03e:	f023 0307 	bic.w	r3, r3, #7
 800b042:	3308      	adds	r3, #8
 800b044:	9303      	str	r3, [sp, #12]
 800b046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b048:	4433      	add	r3, r6
 800b04a:	9309      	str	r3, [sp, #36]	; 0x24
 800b04c:	e767      	b.n	800af1e <_svfiprintf_r+0x4e>
 800b04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b052:	460c      	mov	r4, r1
 800b054:	2001      	movs	r0, #1
 800b056:	e7a5      	b.n	800afa4 <_svfiprintf_r+0xd4>
 800b058:	2300      	movs	r3, #0
 800b05a:	3401      	adds	r4, #1
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	4619      	mov	r1, r3
 800b060:	f04f 0c0a 	mov.w	ip, #10
 800b064:	4620      	mov	r0, r4
 800b066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b06a:	3a30      	subs	r2, #48	; 0x30
 800b06c:	2a09      	cmp	r2, #9
 800b06e:	d903      	bls.n	800b078 <_svfiprintf_r+0x1a8>
 800b070:	2b00      	cmp	r3, #0
 800b072:	d0c5      	beq.n	800b000 <_svfiprintf_r+0x130>
 800b074:	9105      	str	r1, [sp, #20]
 800b076:	e7c3      	b.n	800b000 <_svfiprintf_r+0x130>
 800b078:	fb0c 2101 	mla	r1, ip, r1, r2
 800b07c:	4604      	mov	r4, r0
 800b07e:	2301      	movs	r3, #1
 800b080:	e7f0      	b.n	800b064 <_svfiprintf_r+0x194>
 800b082:	ab03      	add	r3, sp, #12
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	462a      	mov	r2, r5
 800b088:	4b0f      	ldr	r3, [pc, #60]	; (800b0c8 <_svfiprintf_r+0x1f8>)
 800b08a:	a904      	add	r1, sp, #16
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7fd ffc3 	bl	8009018 <_printf_float>
 800b092:	1c42      	adds	r2, r0, #1
 800b094:	4606      	mov	r6, r0
 800b096:	d1d6      	bne.n	800b046 <_svfiprintf_r+0x176>
 800b098:	89ab      	ldrh	r3, [r5, #12]
 800b09a:	065b      	lsls	r3, r3, #25
 800b09c:	f53f af2c 	bmi.w	800aef8 <_svfiprintf_r+0x28>
 800b0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0a2:	b01d      	add	sp, #116	; 0x74
 800b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a8:	ab03      	add	r3, sp, #12
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	462a      	mov	r2, r5
 800b0ae:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <_svfiprintf_r+0x1f8>)
 800b0b0:	a904      	add	r1, sp, #16
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	f7fe fa54 	bl	8009560 <_printf_i>
 800b0b8:	e7eb      	b.n	800b092 <_svfiprintf_r+0x1c2>
 800b0ba:	bf00      	nop
 800b0bc:	0800c26c 	.word	0x0800c26c
 800b0c0:	0800c276 	.word	0x0800c276
 800b0c4:	08009019 	.word	0x08009019
 800b0c8:	0800ae19 	.word	0x0800ae19
 800b0cc:	0800c272 	.word	0x0800c272

0800b0d0 <__sfputc_r>:
 800b0d0:	6893      	ldr	r3, [r2, #8]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	b410      	push	{r4}
 800b0d8:	6093      	str	r3, [r2, #8]
 800b0da:	da08      	bge.n	800b0ee <__sfputc_r+0x1e>
 800b0dc:	6994      	ldr	r4, [r2, #24]
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	db01      	blt.n	800b0e6 <__sfputc_r+0x16>
 800b0e2:	290a      	cmp	r1, #10
 800b0e4:	d103      	bne.n	800b0ee <__sfputc_r+0x1e>
 800b0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ea:	f000 b94b 	b.w	800b384 <__swbuf_r>
 800b0ee:	6813      	ldr	r3, [r2, #0]
 800b0f0:	1c58      	adds	r0, r3, #1
 800b0f2:	6010      	str	r0, [r2, #0]
 800b0f4:	7019      	strb	r1, [r3, #0]
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <__sfputs_r>:
 800b0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	4614      	mov	r4, r2
 800b106:	18d5      	adds	r5, r2, r3
 800b108:	42ac      	cmp	r4, r5
 800b10a:	d101      	bne.n	800b110 <__sfputs_r+0x12>
 800b10c:	2000      	movs	r0, #0
 800b10e:	e007      	b.n	800b120 <__sfputs_r+0x22>
 800b110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b114:	463a      	mov	r2, r7
 800b116:	4630      	mov	r0, r6
 800b118:	f7ff ffda 	bl	800b0d0 <__sfputc_r>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d1f3      	bne.n	800b108 <__sfputs_r+0xa>
 800b120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b124 <_vfiprintf_r>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	460d      	mov	r5, r1
 800b12a:	b09d      	sub	sp, #116	; 0x74
 800b12c:	4614      	mov	r4, r2
 800b12e:	4698      	mov	r8, r3
 800b130:	4606      	mov	r6, r0
 800b132:	b118      	cbz	r0, 800b13c <_vfiprintf_r+0x18>
 800b134:	6983      	ldr	r3, [r0, #24]
 800b136:	b90b      	cbnz	r3, 800b13c <_vfiprintf_r+0x18>
 800b138:	f000 fb06 	bl	800b748 <__sinit>
 800b13c:	4b89      	ldr	r3, [pc, #548]	; (800b364 <_vfiprintf_r+0x240>)
 800b13e:	429d      	cmp	r5, r3
 800b140:	d11b      	bne.n	800b17a <_vfiprintf_r+0x56>
 800b142:	6875      	ldr	r5, [r6, #4]
 800b144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b146:	07d9      	lsls	r1, r3, #31
 800b148:	d405      	bmi.n	800b156 <_vfiprintf_r+0x32>
 800b14a:	89ab      	ldrh	r3, [r5, #12]
 800b14c:	059a      	lsls	r2, r3, #22
 800b14e:	d402      	bmi.n	800b156 <_vfiprintf_r+0x32>
 800b150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b152:	f000 fb97 	bl	800b884 <__retarget_lock_acquire_recursive>
 800b156:	89ab      	ldrh	r3, [r5, #12]
 800b158:	071b      	lsls	r3, r3, #28
 800b15a:	d501      	bpl.n	800b160 <_vfiprintf_r+0x3c>
 800b15c:	692b      	ldr	r3, [r5, #16]
 800b15e:	b9eb      	cbnz	r3, 800b19c <_vfiprintf_r+0x78>
 800b160:	4629      	mov	r1, r5
 800b162:	4630      	mov	r0, r6
 800b164:	f000 f960 	bl	800b428 <__swsetup_r>
 800b168:	b1c0      	cbz	r0, 800b19c <_vfiprintf_r+0x78>
 800b16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b16c:	07dc      	lsls	r4, r3, #31
 800b16e:	d50e      	bpl.n	800b18e <_vfiprintf_r+0x6a>
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	b01d      	add	sp, #116	; 0x74
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	4b7b      	ldr	r3, [pc, #492]	; (800b368 <_vfiprintf_r+0x244>)
 800b17c:	429d      	cmp	r5, r3
 800b17e:	d101      	bne.n	800b184 <_vfiprintf_r+0x60>
 800b180:	68b5      	ldr	r5, [r6, #8]
 800b182:	e7df      	b.n	800b144 <_vfiprintf_r+0x20>
 800b184:	4b79      	ldr	r3, [pc, #484]	; (800b36c <_vfiprintf_r+0x248>)
 800b186:	429d      	cmp	r5, r3
 800b188:	bf08      	it	eq
 800b18a:	68f5      	ldreq	r5, [r6, #12]
 800b18c:	e7da      	b.n	800b144 <_vfiprintf_r+0x20>
 800b18e:	89ab      	ldrh	r3, [r5, #12]
 800b190:	0598      	lsls	r0, r3, #22
 800b192:	d4ed      	bmi.n	800b170 <_vfiprintf_r+0x4c>
 800b194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b196:	f000 fb76 	bl	800b886 <__retarget_lock_release_recursive>
 800b19a:	e7e9      	b.n	800b170 <_vfiprintf_r+0x4c>
 800b19c:	2300      	movs	r3, #0
 800b19e:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a0:	2320      	movs	r3, #32
 800b1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1aa:	2330      	movs	r3, #48	; 0x30
 800b1ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b370 <_vfiprintf_r+0x24c>
 800b1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1b4:	f04f 0901 	mov.w	r9, #1
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	469a      	mov	sl, r3
 800b1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c0:	b10a      	cbz	r2, 800b1c6 <_vfiprintf_r+0xa2>
 800b1c2:	2a25      	cmp	r2, #37	; 0x25
 800b1c4:	d1f9      	bne.n	800b1ba <_vfiprintf_r+0x96>
 800b1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ca:	d00b      	beq.n	800b1e4 <_vfiprintf_r+0xc0>
 800b1cc:	465b      	mov	r3, fp
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f7ff ff93 	bl	800b0fe <__sfputs_r>
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f000 80aa 	beq.w	800b332 <_vfiprintf_r+0x20e>
 800b1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1e0:	445a      	add	r2, fp
 800b1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 80a2 	beq.w	800b332 <_vfiprintf_r+0x20e>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1f8:	f10a 0a01 	add.w	sl, sl, #1
 800b1fc:	9304      	str	r3, [sp, #16]
 800b1fe:	9307      	str	r3, [sp, #28]
 800b200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b204:	931a      	str	r3, [sp, #104]	; 0x68
 800b206:	4654      	mov	r4, sl
 800b208:	2205      	movs	r2, #5
 800b20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20e:	4858      	ldr	r0, [pc, #352]	; (800b370 <_vfiprintf_r+0x24c>)
 800b210:	f7f4 fff6 	bl	8000200 <memchr>
 800b214:	9a04      	ldr	r2, [sp, #16]
 800b216:	b9d8      	cbnz	r0, 800b250 <_vfiprintf_r+0x12c>
 800b218:	06d1      	lsls	r1, r2, #27
 800b21a:	bf44      	itt	mi
 800b21c:	2320      	movmi	r3, #32
 800b21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b222:	0713      	lsls	r3, r2, #28
 800b224:	bf44      	itt	mi
 800b226:	232b      	movmi	r3, #43	; 0x2b
 800b228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b22c:	f89a 3000 	ldrb.w	r3, [sl]
 800b230:	2b2a      	cmp	r3, #42	; 0x2a
 800b232:	d015      	beq.n	800b260 <_vfiprintf_r+0x13c>
 800b234:	9a07      	ldr	r2, [sp, #28]
 800b236:	4654      	mov	r4, sl
 800b238:	2000      	movs	r0, #0
 800b23a:	f04f 0c0a 	mov.w	ip, #10
 800b23e:	4621      	mov	r1, r4
 800b240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b244:	3b30      	subs	r3, #48	; 0x30
 800b246:	2b09      	cmp	r3, #9
 800b248:	d94e      	bls.n	800b2e8 <_vfiprintf_r+0x1c4>
 800b24a:	b1b0      	cbz	r0, 800b27a <_vfiprintf_r+0x156>
 800b24c:	9207      	str	r2, [sp, #28]
 800b24e:	e014      	b.n	800b27a <_vfiprintf_r+0x156>
 800b250:	eba0 0308 	sub.w	r3, r0, r8
 800b254:	fa09 f303 	lsl.w	r3, r9, r3
 800b258:	4313      	orrs	r3, r2
 800b25a:	9304      	str	r3, [sp, #16]
 800b25c:	46a2      	mov	sl, r4
 800b25e:	e7d2      	b.n	800b206 <_vfiprintf_r+0xe2>
 800b260:	9b03      	ldr	r3, [sp, #12]
 800b262:	1d19      	adds	r1, r3, #4
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	9103      	str	r1, [sp, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bfbb      	ittet	lt
 800b26c:	425b      	neglt	r3, r3
 800b26e:	f042 0202 	orrlt.w	r2, r2, #2
 800b272:	9307      	strge	r3, [sp, #28]
 800b274:	9307      	strlt	r3, [sp, #28]
 800b276:	bfb8      	it	lt
 800b278:	9204      	strlt	r2, [sp, #16]
 800b27a:	7823      	ldrb	r3, [r4, #0]
 800b27c:	2b2e      	cmp	r3, #46	; 0x2e
 800b27e:	d10c      	bne.n	800b29a <_vfiprintf_r+0x176>
 800b280:	7863      	ldrb	r3, [r4, #1]
 800b282:	2b2a      	cmp	r3, #42	; 0x2a
 800b284:	d135      	bne.n	800b2f2 <_vfiprintf_r+0x1ce>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	1d1a      	adds	r2, r3, #4
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	9203      	str	r2, [sp, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bfb8      	it	lt
 800b292:	f04f 33ff 	movlt.w	r3, #4294967295
 800b296:	3402      	adds	r4, #2
 800b298:	9305      	str	r3, [sp, #20]
 800b29a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b380 <_vfiprintf_r+0x25c>
 800b29e:	7821      	ldrb	r1, [r4, #0]
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	f7f4 ffac 	bl	8000200 <memchr>
 800b2a8:	b140      	cbz	r0, 800b2bc <_vfiprintf_r+0x198>
 800b2aa:	2340      	movs	r3, #64	; 0x40
 800b2ac:	eba0 000a 	sub.w	r0, r0, sl
 800b2b0:	fa03 f000 	lsl.w	r0, r3, r0
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	4303      	orrs	r3, r0
 800b2b8:	3401      	adds	r4, #1
 800b2ba:	9304      	str	r3, [sp, #16]
 800b2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c0:	482c      	ldr	r0, [pc, #176]	; (800b374 <_vfiprintf_r+0x250>)
 800b2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2c6:	2206      	movs	r2, #6
 800b2c8:	f7f4 ff9a 	bl	8000200 <memchr>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d03f      	beq.n	800b350 <_vfiprintf_r+0x22c>
 800b2d0:	4b29      	ldr	r3, [pc, #164]	; (800b378 <_vfiprintf_r+0x254>)
 800b2d2:	bb1b      	cbnz	r3, 800b31c <_vfiprintf_r+0x1f8>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	3307      	adds	r3, #7
 800b2d8:	f023 0307 	bic.w	r3, r3, #7
 800b2dc:	3308      	adds	r3, #8
 800b2de:	9303      	str	r3, [sp, #12]
 800b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e2:	443b      	add	r3, r7
 800b2e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e6:	e767      	b.n	800b1b8 <_vfiprintf_r+0x94>
 800b2e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	e7a5      	b.n	800b23e <_vfiprintf_r+0x11a>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	3401      	adds	r4, #1
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	f04f 0c0a 	mov.w	ip, #10
 800b2fe:	4620      	mov	r0, r4
 800b300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b304:	3a30      	subs	r2, #48	; 0x30
 800b306:	2a09      	cmp	r2, #9
 800b308:	d903      	bls.n	800b312 <_vfiprintf_r+0x1ee>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0c5      	beq.n	800b29a <_vfiprintf_r+0x176>
 800b30e:	9105      	str	r1, [sp, #20]
 800b310:	e7c3      	b.n	800b29a <_vfiprintf_r+0x176>
 800b312:	fb0c 2101 	mla	r1, ip, r1, r2
 800b316:	4604      	mov	r4, r0
 800b318:	2301      	movs	r3, #1
 800b31a:	e7f0      	b.n	800b2fe <_vfiprintf_r+0x1da>
 800b31c:	ab03      	add	r3, sp, #12
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	462a      	mov	r2, r5
 800b322:	4b16      	ldr	r3, [pc, #88]	; (800b37c <_vfiprintf_r+0x258>)
 800b324:	a904      	add	r1, sp, #16
 800b326:	4630      	mov	r0, r6
 800b328:	f7fd fe76 	bl	8009018 <_printf_float>
 800b32c:	4607      	mov	r7, r0
 800b32e:	1c78      	adds	r0, r7, #1
 800b330:	d1d6      	bne.n	800b2e0 <_vfiprintf_r+0x1bc>
 800b332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b334:	07d9      	lsls	r1, r3, #31
 800b336:	d405      	bmi.n	800b344 <_vfiprintf_r+0x220>
 800b338:	89ab      	ldrh	r3, [r5, #12]
 800b33a:	059a      	lsls	r2, r3, #22
 800b33c:	d402      	bmi.n	800b344 <_vfiprintf_r+0x220>
 800b33e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b340:	f000 faa1 	bl	800b886 <__retarget_lock_release_recursive>
 800b344:	89ab      	ldrh	r3, [r5, #12]
 800b346:	065b      	lsls	r3, r3, #25
 800b348:	f53f af12 	bmi.w	800b170 <_vfiprintf_r+0x4c>
 800b34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b34e:	e711      	b.n	800b174 <_vfiprintf_r+0x50>
 800b350:	ab03      	add	r3, sp, #12
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	462a      	mov	r2, r5
 800b356:	4b09      	ldr	r3, [pc, #36]	; (800b37c <_vfiprintf_r+0x258>)
 800b358:	a904      	add	r1, sp, #16
 800b35a:	4630      	mov	r0, r6
 800b35c:	f7fe f900 	bl	8009560 <_printf_i>
 800b360:	e7e4      	b.n	800b32c <_vfiprintf_r+0x208>
 800b362:	bf00      	nop
 800b364:	0800c2a0 	.word	0x0800c2a0
 800b368:	0800c2c0 	.word	0x0800c2c0
 800b36c:	0800c280 	.word	0x0800c280
 800b370:	0800c26c 	.word	0x0800c26c
 800b374:	0800c276 	.word	0x0800c276
 800b378:	08009019 	.word	0x08009019
 800b37c:	0800b0ff 	.word	0x0800b0ff
 800b380:	0800c272 	.word	0x0800c272

0800b384 <__swbuf_r>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	460e      	mov	r6, r1
 800b388:	4614      	mov	r4, r2
 800b38a:	4605      	mov	r5, r0
 800b38c:	b118      	cbz	r0, 800b396 <__swbuf_r+0x12>
 800b38e:	6983      	ldr	r3, [r0, #24]
 800b390:	b90b      	cbnz	r3, 800b396 <__swbuf_r+0x12>
 800b392:	f000 f9d9 	bl	800b748 <__sinit>
 800b396:	4b21      	ldr	r3, [pc, #132]	; (800b41c <__swbuf_r+0x98>)
 800b398:	429c      	cmp	r4, r3
 800b39a:	d12b      	bne.n	800b3f4 <__swbuf_r+0x70>
 800b39c:	686c      	ldr	r4, [r5, #4]
 800b39e:	69a3      	ldr	r3, [r4, #24]
 800b3a0:	60a3      	str	r3, [r4, #8]
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	071a      	lsls	r2, r3, #28
 800b3a6:	d52f      	bpl.n	800b408 <__swbuf_r+0x84>
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	b36b      	cbz	r3, 800b408 <__swbuf_r+0x84>
 800b3ac:	6923      	ldr	r3, [r4, #16]
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	1ac0      	subs	r0, r0, r3
 800b3b2:	6963      	ldr	r3, [r4, #20]
 800b3b4:	b2f6      	uxtb	r6, r6
 800b3b6:	4283      	cmp	r3, r0
 800b3b8:	4637      	mov	r7, r6
 800b3ba:	dc04      	bgt.n	800b3c6 <__swbuf_r+0x42>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f92e 	bl	800b620 <_fflush_r>
 800b3c4:	bb30      	cbnz	r0, 800b414 <__swbuf_r+0x90>
 800b3c6:	68a3      	ldr	r3, [r4, #8]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	60a3      	str	r3, [r4, #8]
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	6022      	str	r2, [r4, #0]
 800b3d2:	701e      	strb	r6, [r3, #0]
 800b3d4:	6963      	ldr	r3, [r4, #20]
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	4283      	cmp	r3, r0
 800b3da:	d004      	beq.n	800b3e6 <__swbuf_r+0x62>
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	07db      	lsls	r3, r3, #31
 800b3e0:	d506      	bpl.n	800b3f0 <__swbuf_r+0x6c>
 800b3e2:	2e0a      	cmp	r6, #10
 800b3e4:	d104      	bne.n	800b3f0 <__swbuf_r+0x6c>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f000 f919 	bl	800b620 <_fflush_r>
 800b3ee:	b988      	cbnz	r0, 800b414 <__swbuf_r+0x90>
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f4:	4b0a      	ldr	r3, [pc, #40]	; (800b420 <__swbuf_r+0x9c>)
 800b3f6:	429c      	cmp	r4, r3
 800b3f8:	d101      	bne.n	800b3fe <__swbuf_r+0x7a>
 800b3fa:	68ac      	ldr	r4, [r5, #8]
 800b3fc:	e7cf      	b.n	800b39e <__swbuf_r+0x1a>
 800b3fe:	4b09      	ldr	r3, [pc, #36]	; (800b424 <__swbuf_r+0xa0>)
 800b400:	429c      	cmp	r4, r3
 800b402:	bf08      	it	eq
 800b404:	68ec      	ldreq	r4, [r5, #12]
 800b406:	e7ca      	b.n	800b39e <__swbuf_r+0x1a>
 800b408:	4621      	mov	r1, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 f80c 	bl	800b428 <__swsetup_r>
 800b410:	2800      	cmp	r0, #0
 800b412:	d0cb      	beq.n	800b3ac <__swbuf_r+0x28>
 800b414:	f04f 37ff 	mov.w	r7, #4294967295
 800b418:	e7ea      	b.n	800b3f0 <__swbuf_r+0x6c>
 800b41a:	bf00      	nop
 800b41c:	0800c2a0 	.word	0x0800c2a0
 800b420:	0800c2c0 	.word	0x0800c2c0
 800b424:	0800c280 	.word	0x0800c280

0800b428 <__swsetup_r>:
 800b428:	4b32      	ldr	r3, [pc, #200]	; (800b4f4 <__swsetup_r+0xcc>)
 800b42a:	b570      	push	{r4, r5, r6, lr}
 800b42c:	681d      	ldr	r5, [r3, #0]
 800b42e:	4606      	mov	r6, r0
 800b430:	460c      	mov	r4, r1
 800b432:	b125      	cbz	r5, 800b43e <__swsetup_r+0x16>
 800b434:	69ab      	ldr	r3, [r5, #24]
 800b436:	b913      	cbnz	r3, 800b43e <__swsetup_r+0x16>
 800b438:	4628      	mov	r0, r5
 800b43a:	f000 f985 	bl	800b748 <__sinit>
 800b43e:	4b2e      	ldr	r3, [pc, #184]	; (800b4f8 <__swsetup_r+0xd0>)
 800b440:	429c      	cmp	r4, r3
 800b442:	d10f      	bne.n	800b464 <__swsetup_r+0x3c>
 800b444:	686c      	ldr	r4, [r5, #4]
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b44c:	0719      	lsls	r1, r3, #28
 800b44e:	d42c      	bmi.n	800b4aa <__swsetup_r+0x82>
 800b450:	06dd      	lsls	r5, r3, #27
 800b452:	d411      	bmi.n	800b478 <__swsetup_r+0x50>
 800b454:	2309      	movs	r3, #9
 800b456:	6033      	str	r3, [r6, #0]
 800b458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	f04f 30ff 	mov.w	r0, #4294967295
 800b462:	e03e      	b.n	800b4e2 <__swsetup_r+0xba>
 800b464:	4b25      	ldr	r3, [pc, #148]	; (800b4fc <__swsetup_r+0xd4>)
 800b466:	429c      	cmp	r4, r3
 800b468:	d101      	bne.n	800b46e <__swsetup_r+0x46>
 800b46a:	68ac      	ldr	r4, [r5, #8]
 800b46c:	e7eb      	b.n	800b446 <__swsetup_r+0x1e>
 800b46e:	4b24      	ldr	r3, [pc, #144]	; (800b500 <__swsetup_r+0xd8>)
 800b470:	429c      	cmp	r4, r3
 800b472:	bf08      	it	eq
 800b474:	68ec      	ldreq	r4, [r5, #12]
 800b476:	e7e6      	b.n	800b446 <__swsetup_r+0x1e>
 800b478:	0758      	lsls	r0, r3, #29
 800b47a:	d512      	bpl.n	800b4a2 <__swsetup_r+0x7a>
 800b47c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b47e:	b141      	cbz	r1, 800b492 <__swsetup_r+0x6a>
 800b480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b484:	4299      	cmp	r1, r3
 800b486:	d002      	beq.n	800b48e <__swsetup_r+0x66>
 800b488:	4630      	mov	r0, r6
 800b48a:	f7fd fc45 	bl	8008d18 <_free_r>
 800b48e:	2300      	movs	r3, #0
 800b490:	6363      	str	r3, [r4, #52]	; 0x34
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	2300      	movs	r3, #0
 800b49c:	6063      	str	r3, [r4, #4]
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0308 	orr.w	r3, r3, #8
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	b94b      	cbnz	r3, 800b4c2 <__swsetup_r+0x9a>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4b8:	d003      	beq.n	800b4c2 <__swsetup_r+0x9a>
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f000 fa09 	bl	800b8d4 <__smakebuf_r>
 800b4c2:	89a0      	ldrh	r0, [r4, #12]
 800b4c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4c8:	f010 0301 	ands.w	r3, r0, #1
 800b4cc:	d00a      	beq.n	800b4e4 <__swsetup_r+0xbc>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60a3      	str	r3, [r4, #8]
 800b4d2:	6963      	ldr	r3, [r4, #20]
 800b4d4:	425b      	negs	r3, r3
 800b4d6:	61a3      	str	r3, [r4, #24]
 800b4d8:	6923      	ldr	r3, [r4, #16]
 800b4da:	b943      	cbnz	r3, 800b4ee <__swsetup_r+0xc6>
 800b4dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4e0:	d1ba      	bne.n	800b458 <__swsetup_r+0x30>
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}
 800b4e4:	0781      	lsls	r1, r0, #30
 800b4e6:	bf58      	it	pl
 800b4e8:	6963      	ldrpl	r3, [r4, #20]
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	e7f4      	b.n	800b4d8 <__swsetup_r+0xb0>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e7f7      	b.n	800b4e2 <__swsetup_r+0xba>
 800b4f2:	bf00      	nop
 800b4f4:	2000000c 	.word	0x2000000c
 800b4f8:	0800c2a0 	.word	0x0800c2a0
 800b4fc:	0800c2c0 	.word	0x0800c2c0
 800b500:	0800c280 	.word	0x0800c280

0800b504 <abort>:
 800b504:	b508      	push	{r3, lr}
 800b506:	2006      	movs	r0, #6
 800b508:	f000 faa8 	bl	800ba5c <raise>
 800b50c:	2001      	movs	r0, #1
 800b50e:	f7f7 f8d7 	bl	80026c0 <_exit>
	...

0800b514 <__sflush_r>:
 800b514:	898a      	ldrh	r2, [r1, #12]
 800b516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51a:	4605      	mov	r5, r0
 800b51c:	0710      	lsls	r0, r2, #28
 800b51e:	460c      	mov	r4, r1
 800b520:	d458      	bmi.n	800b5d4 <__sflush_r+0xc0>
 800b522:	684b      	ldr	r3, [r1, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	dc05      	bgt.n	800b534 <__sflush_r+0x20>
 800b528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	dc02      	bgt.n	800b534 <__sflush_r+0x20>
 800b52e:	2000      	movs	r0, #0
 800b530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b536:	2e00      	cmp	r6, #0
 800b538:	d0f9      	beq.n	800b52e <__sflush_r+0x1a>
 800b53a:	2300      	movs	r3, #0
 800b53c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b540:	682f      	ldr	r7, [r5, #0]
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	d032      	beq.n	800b5ac <__sflush_r+0x98>
 800b546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	075a      	lsls	r2, r3, #29
 800b54c:	d505      	bpl.n	800b55a <__sflush_r+0x46>
 800b54e:	6863      	ldr	r3, [r4, #4]
 800b550:	1ac0      	subs	r0, r0, r3
 800b552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b554:	b10b      	cbz	r3, 800b55a <__sflush_r+0x46>
 800b556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b558:	1ac0      	subs	r0, r0, r3
 800b55a:	2300      	movs	r3, #0
 800b55c:	4602      	mov	r2, r0
 800b55e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b560:	6a21      	ldr	r1, [r4, #32]
 800b562:	4628      	mov	r0, r5
 800b564:	47b0      	blx	r6
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	d106      	bne.n	800b57a <__sflush_r+0x66>
 800b56c:	6829      	ldr	r1, [r5, #0]
 800b56e:	291d      	cmp	r1, #29
 800b570:	d82c      	bhi.n	800b5cc <__sflush_r+0xb8>
 800b572:	4a2a      	ldr	r2, [pc, #168]	; (800b61c <__sflush_r+0x108>)
 800b574:	40ca      	lsrs	r2, r1
 800b576:	07d6      	lsls	r6, r2, #31
 800b578:	d528      	bpl.n	800b5cc <__sflush_r+0xb8>
 800b57a:	2200      	movs	r2, #0
 800b57c:	6062      	str	r2, [r4, #4]
 800b57e:	04d9      	lsls	r1, r3, #19
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	6022      	str	r2, [r4, #0]
 800b584:	d504      	bpl.n	800b590 <__sflush_r+0x7c>
 800b586:	1c42      	adds	r2, r0, #1
 800b588:	d101      	bne.n	800b58e <__sflush_r+0x7a>
 800b58a:	682b      	ldr	r3, [r5, #0]
 800b58c:	b903      	cbnz	r3, 800b590 <__sflush_r+0x7c>
 800b58e:	6560      	str	r0, [r4, #84]	; 0x54
 800b590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b592:	602f      	str	r7, [r5, #0]
 800b594:	2900      	cmp	r1, #0
 800b596:	d0ca      	beq.n	800b52e <__sflush_r+0x1a>
 800b598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b59c:	4299      	cmp	r1, r3
 800b59e:	d002      	beq.n	800b5a6 <__sflush_r+0x92>
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	f7fd fbb9 	bl	8008d18 <_free_r>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5aa:	e7c1      	b.n	800b530 <__sflush_r+0x1c>
 800b5ac:	6a21      	ldr	r1, [r4, #32]
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b0      	blx	r6
 800b5b4:	1c41      	adds	r1, r0, #1
 800b5b6:	d1c7      	bne.n	800b548 <__sflush_r+0x34>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c4      	beq.n	800b548 <__sflush_r+0x34>
 800b5be:	2b1d      	cmp	r3, #29
 800b5c0:	d001      	beq.n	800b5c6 <__sflush_r+0xb2>
 800b5c2:	2b16      	cmp	r3, #22
 800b5c4:	d101      	bne.n	800b5ca <__sflush_r+0xb6>
 800b5c6:	602f      	str	r7, [r5, #0]
 800b5c8:	e7b1      	b.n	800b52e <__sflush_r+0x1a>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	e7ad      	b.n	800b530 <__sflush_r+0x1c>
 800b5d4:	690f      	ldr	r7, [r1, #16]
 800b5d6:	2f00      	cmp	r7, #0
 800b5d8:	d0a9      	beq.n	800b52e <__sflush_r+0x1a>
 800b5da:	0793      	lsls	r3, r2, #30
 800b5dc:	680e      	ldr	r6, [r1, #0]
 800b5de:	bf08      	it	eq
 800b5e0:	694b      	ldreq	r3, [r1, #20]
 800b5e2:	600f      	str	r7, [r1, #0]
 800b5e4:	bf18      	it	ne
 800b5e6:	2300      	movne	r3, #0
 800b5e8:	eba6 0807 	sub.w	r8, r6, r7
 800b5ec:	608b      	str	r3, [r1, #8]
 800b5ee:	f1b8 0f00 	cmp.w	r8, #0
 800b5f2:	dd9c      	ble.n	800b52e <__sflush_r+0x1a>
 800b5f4:	6a21      	ldr	r1, [r4, #32]
 800b5f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5f8:	4643      	mov	r3, r8
 800b5fa:	463a      	mov	r2, r7
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	47b0      	blx	r6
 800b600:	2800      	cmp	r0, #0
 800b602:	dc06      	bgt.n	800b612 <__sflush_r+0xfe>
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	e78e      	b.n	800b530 <__sflush_r+0x1c>
 800b612:	4407      	add	r7, r0
 800b614:	eba8 0800 	sub.w	r8, r8, r0
 800b618:	e7e9      	b.n	800b5ee <__sflush_r+0xda>
 800b61a:	bf00      	nop
 800b61c:	20400001 	.word	0x20400001

0800b620 <_fflush_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	690b      	ldr	r3, [r1, #16]
 800b624:	4605      	mov	r5, r0
 800b626:	460c      	mov	r4, r1
 800b628:	b913      	cbnz	r3, 800b630 <_fflush_r+0x10>
 800b62a:	2500      	movs	r5, #0
 800b62c:	4628      	mov	r0, r5
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	b118      	cbz	r0, 800b63a <_fflush_r+0x1a>
 800b632:	6983      	ldr	r3, [r0, #24]
 800b634:	b90b      	cbnz	r3, 800b63a <_fflush_r+0x1a>
 800b636:	f000 f887 	bl	800b748 <__sinit>
 800b63a:	4b14      	ldr	r3, [pc, #80]	; (800b68c <_fflush_r+0x6c>)
 800b63c:	429c      	cmp	r4, r3
 800b63e:	d11b      	bne.n	800b678 <_fflush_r+0x58>
 800b640:	686c      	ldr	r4, [r5, #4]
 800b642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0ef      	beq.n	800b62a <_fflush_r+0xa>
 800b64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b64c:	07d0      	lsls	r0, r2, #31
 800b64e:	d404      	bmi.n	800b65a <_fflush_r+0x3a>
 800b650:	0599      	lsls	r1, r3, #22
 800b652:	d402      	bmi.n	800b65a <_fflush_r+0x3a>
 800b654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b656:	f000 f915 	bl	800b884 <__retarget_lock_acquire_recursive>
 800b65a:	4628      	mov	r0, r5
 800b65c:	4621      	mov	r1, r4
 800b65e:	f7ff ff59 	bl	800b514 <__sflush_r>
 800b662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b664:	07da      	lsls	r2, r3, #31
 800b666:	4605      	mov	r5, r0
 800b668:	d4e0      	bmi.n	800b62c <_fflush_r+0xc>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	059b      	lsls	r3, r3, #22
 800b66e:	d4dd      	bmi.n	800b62c <_fflush_r+0xc>
 800b670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b672:	f000 f908 	bl	800b886 <__retarget_lock_release_recursive>
 800b676:	e7d9      	b.n	800b62c <_fflush_r+0xc>
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <_fflush_r+0x70>)
 800b67a:	429c      	cmp	r4, r3
 800b67c:	d101      	bne.n	800b682 <_fflush_r+0x62>
 800b67e:	68ac      	ldr	r4, [r5, #8]
 800b680:	e7df      	b.n	800b642 <_fflush_r+0x22>
 800b682:	4b04      	ldr	r3, [pc, #16]	; (800b694 <_fflush_r+0x74>)
 800b684:	429c      	cmp	r4, r3
 800b686:	bf08      	it	eq
 800b688:	68ec      	ldreq	r4, [r5, #12]
 800b68a:	e7da      	b.n	800b642 <_fflush_r+0x22>
 800b68c:	0800c2a0 	.word	0x0800c2a0
 800b690:	0800c2c0 	.word	0x0800c2c0
 800b694:	0800c280 	.word	0x0800c280

0800b698 <std>:
 800b698:	2300      	movs	r3, #0
 800b69a:	b510      	push	{r4, lr}
 800b69c:	4604      	mov	r4, r0
 800b69e:	e9c0 3300 	strd	r3, r3, [r0]
 800b6a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6a6:	6083      	str	r3, [r0, #8]
 800b6a8:	8181      	strh	r1, [r0, #12]
 800b6aa:	6643      	str	r3, [r0, #100]	; 0x64
 800b6ac:	81c2      	strh	r2, [r0, #14]
 800b6ae:	6183      	str	r3, [r0, #24]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	2208      	movs	r2, #8
 800b6b4:	305c      	adds	r0, #92	; 0x5c
 800b6b6:	f7fd fb27 	bl	8008d08 <memset>
 800b6ba:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <std+0x38>)
 800b6bc:	6263      	str	r3, [r4, #36]	; 0x24
 800b6be:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <std+0x3c>)
 800b6c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <std+0x40>)
 800b6c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <std+0x44>)
 800b6c8:	6224      	str	r4, [r4, #32]
 800b6ca:	6323      	str	r3, [r4, #48]	; 0x30
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	bf00      	nop
 800b6d0:	0800ba95 	.word	0x0800ba95
 800b6d4:	0800bab7 	.word	0x0800bab7
 800b6d8:	0800baef 	.word	0x0800baef
 800b6dc:	0800bb13 	.word	0x0800bb13

0800b6e0 <_cleanup_r>:
 800b6e0:	4901      	ldr	r1, [pc, #4]	; (800b6e8 <_cleanup_r+0x8>)
 800b6e2:	f000 b8af 	b.w	800b844 <_fwalk_reent>
 800b6e6:	bf00      	nop
 800b6e8:	0800b621 	.word	0x0800b621

0800b6ec <__sfmoreglue>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	2268      	movs	r2, #104	; 0x68
 800b6f0:	1e4d      	subs	r5, r1, #1
 800b6f2:	4355      	muls	r5, r2
 800b6f4:	460e      	mov	r6, r1
 800b6f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6fa:	f7fd fb79 	bl	8008df0 <_malloc_r>
 800b6fe:	4604      	mov	r4, r0
 800b700:	b140      	cbz	r0, 800b714 <__sfmoreglue+0x28>
 800b702:	2100      	movs	r1, #0
 800b704:	e9c0 1600 	strd	r1, r6, [r0]
 800b708:	300c      	adds	r0, #12
 800b70a:	60a0      	str	r0, [r4, #8]
 800b70c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b710:	f7fd fafa 	bl	8008d08 <memset>
 800b714:	4620      	mov	r0, r4
 800b716:	bd70      	pop	{r4, r5, r6, pc}

0800b718 <__sfp_lock_acquire>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__sfp_lock_acquire+0x8>)
 800b71a:	f000 b8b3 	b.w	800b884 <__retarget_lock_acquire_recursive>
 800b71e:	bf00      	nop
 800b720:	20000551 	.word	0x20000551

0800b724 <__sfp_lock_release>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__sfp_lock_release+0x8>)
 800b726:	f000 b8ae 	b.w	800b886 <__retarget_lock_release_recursive>
 800b72a:	bf00      	nop
 800b72c:	20000551 	.word	0x20000551

0800b730 <__sinit_lock_acquire>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__sinit_lock_acquire+0x8>)
 800b732:	f000 b8a7 	b.w	800b884 <__retarget_lock_acquire_recursive>
 800b736:	bf00      	nop
 800b738:	20000552 	.word	0x20000552

0800b73c <__sinit_lock_release>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__sinit_lock_release+0x8>)
 800b73e:	f000 b8a2 	b.w	800b886 <__retarget_lock_release_recursive>
 800b742:	bf00      	nop
 800b744:	20000552 	.word	0x20000552

0800b748 <__sinit>:
 800b748:	b510      	push	{r4, lr}
 800b74a:	4604      	mov	r4, r0
 800b74c:	f7ff fff0 	bl	800b730 <__sinit_lock_acquire>
 800b750:	69a3      	ldr	r3, [r4, #24]
 800b752:	b11b      	cbz	r3, 800b75c <__sinit+0x14>
 800b754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b758:	f7ff bff0 	b.w	800b73c <__sinit_lock_release>
 800b75c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b760:	6523      	str	r3, [r4, #80]	; 0x50
 800b762:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <__sinit+0x68>)
 800b764:	4a13      	ldr	r2, [pc, #76]	; (800b7b4 <__sinit+0x6c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	62a2      	str	r2, [r4, #40]	; 0x28
 800b76a:	42a3      	cmp	r3, r4
 800b76c:	bf04      	itt	eq
 800b76e:	2301      	moveq	r3, #1
 800b770:	61a3      	streq	r3, [r4, #24]
 800b772:	4620      	mov	r0, r4
 800b774:	f000 f820 	bl	800b7b8 <__sfp>
 800b778:	6060      	str	r0, [r4, #4]
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 f81c 	bl	800b7b8 <__sfp>
 800b780:	60a0      	str	r0, [r4, #8]
 800b782:	4620      	mov	r0, r4
 800b784:	f000 f818 	bl	800b7b8 <__sfp>
 800b788:	2200      	movs	r2, #0
 800b78a:	60e0      	str	r0, [r4, #12]
 800b78c:	2104      	movs	r1, #4
 800b78e:	6860      	ldr	r0, [r4, #4]
 800b790:	f7ff ff82 	bl	800b698 <std>
 800b794:	68a0      	ldr	r0, [r4, #8]
 800b796:	2201      	movs	r2, #1
 800b798:	2109      	movs	r1, #9
 800b79a:	f7ff ff7d 	bl	800b698 <std>
 800b79e:	68e0      	ldr	r0, [r4, #12]
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	2112      	movs	r1, #18
 800b7a4:	f7ff ff78 	bl	800b698 <std>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	61a3      	str	r3, [r4, #24]
 800b7ac:	e7d2      	b.n	800b754 <__sinit+0xc>
 800b7ae:	bf00      	nop
 800b7b0:	0800bfac 	.word	0x0800bfac
 800b7b4:	0800b6e1 	.word	0x0800b6e1

0800b7b8 <__sfp>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	f7ff ffac 	bl	800b718 <__sfp_lock_acquire>
 800b7c0:	4b1e      	ldr	r3, [pc, #120]	; (800b83c <__sfp+0x84>)
 800b7c2:	681e      	ldr	r6, [r3, #0]
 800b7c4:	69b3      	ldr	r3, [r6, #24]
 800b7c6:	b913      	cbnz	r3, 800b7ce <__sfp+0x16>
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7ff ffbd 	bl	800b748 <__sinit>
 800b7ce:	3648      	adds	r6, #72	; 0x48
 800b7d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	d503      	bpl.n	800b7e0 <__sfp+0x28>
 800b7d8:	6833      	ldr	r3, [r6, #0]
 800b7da:	b30b      	cbz	r3, 800b820 <__sfp+0x68>
 800b7dc:	6836      	ldr	r6, [r6, #0]
 800b7de:	e7f7      	b.n	800b7d0 <__sfp+0x18>
 800b7e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7e4:	b9d5      	cbnz	r5, 800b81c <__sfp+0x64>
 800b7e6:	4b16      	ldr	r3, [pc, #88]	; (800b840 <__sfp+0x88>)
 800b7e8:	60e3      	str	r3, [r4, #12]
 800b7ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7ee:	6665      	str	r5, [r4, #100]	; 0x64
 800b7f0:	f000 f847 	bl	800b882 <__retarget_lock_init_recursive>
 800b7f4:	f7ff ff96 	bl	800b724 <__sfp_lock_release>
 800b7f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b800:	6025      	str	r5, [r4, #0]
 800b802:	61a5      	str	r5, [r4, #24]
 800b804:	2208      	movs	r2, #8
 800b806:	4629      	mov	r1, r5
 800b808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b80c:	f7fd fa7c 	bl	8008d08 <memset>
 800b810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b818:	4620      	mov	r0, r4
 800b81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b81c:	3468      	adds	r4, #104	; 0x68
 800b81e:	e7d9      	b.n	800b7d4 <__sfp+0x1c>
 800b820:	2104      	movs	r1, #4
 800b822:	4638      	mov	r0, r7
 800b824:	f7ff ff62 	bl	800b6ec <__sfmoreglue>
 800b828:	4604      	mov	r4, r0
 800b82a:	6030      	str	r0, [r6, #0]
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d1d5      	bne.n	800b7dc <__sfp+0x24>
 800b830:	f7ff ff78 	bl	800b724 <__sfp_lock_release>
 800b834:	230c      	movs	r3, #12
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	e7ee      	b.n	800b818 <__sfp+0x60>
 800b83a:	bf00      	nop
 800b83c:	0800bfac 	.word	0x0800bfac
 800b840:	ffff0001 	.word	0xffff0001

0800b844 <_fwalk_reent>:
 800b844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b848:	4606      	mov	r6, r0
 800b84a:	4688      	mov	r8, r1
 800b84c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b850:	2700      	movs	r7, #0
 800b852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b856:	f1b9 0901 	subs.w	r9, r9, #1
 800b85a:	d505      	bpl.n	800b868 <_fwalk_reent+0x24>
 800b85c:	6824      	ldr	r4, [r4, #0]
 800b85e:	2c00      	cmp	r4, #0
 800b860:	d1f7      	bne.n	800b852 <_fwalk_reent+0xe>
 800b862:	4638      	mov	r0, r7
 800b864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b868:	89ab      	ldrh	r3, [r5, #12]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d907      	bls.n	800b87e <_fwalk_reent+0x3a>
 800b86e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b872:	3301      	adds	r3, #1
 800b874:	d003      	beq.n	800b87e <_fwalk_reent+0x3a>
 800b876:	4629      	mov	r1, r5
 800b878:	4630      	mov	r0, r6
 800b87a:	47c0      	blx	r8
 800b87c:	4307      	orrs	r7, r0
 800b87e:	3568      	adds	r5, #104	; 0x68
 800b880:	e7e9      	b.n	800b856 <_fwalk_reent+0x12>

0800b882 <__retarget_lock_init_recursive>:
 800b882:	4770      	bx	lr

0800b884 <__retarget_lock_acquire_recursive>:
 800b884:	4770      	bx	lr

0800b886 <__retarget_lock_release_recursive>:
 800b886:	4770      	bx	lr

0800b888 <__swhatbuf_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	460e      	mov	r6, r1
 800b88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b890:	2900      	cmp	r1, #0
 800b892:	b096      	sub	sp, #88	; 0x58
 800b894:	4614      	mov	r4, r2
 800b896:	461d      	mov	r5, r3
 800b898:	da08      	bge.n	800b8ac <__swhatbuf_r+0x24>
 800b89a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	602a      	str	r2, [r5, #0]
 800b8a2:	061a      	lsls	r2, r3, #24
 800b8a4:	d410      	bmi.n	800b8c8 <__swhatbuf_r+0x40>
 800b8a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8aa:	e00e      	b.n	800b8ca <__swhatbuf_r+0x42>
 800b8ac:	466a      	mov	r2, sp
 800b8ae:	f000 f963 	bl	800bb78 <_fstat_r>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	dbf1      	blt.n	800b89a <__swhatbuf_r+0x12>
 800b8b6:	9a01      	ldr	r2, [sp, #4]
 800b8b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8c0:	425a      	negs	r2, r3
 800b8c2:	415a      	adcs	r2, r3
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	e7ee      	b.n	800b8a6 <__swhatbuf_r+0x1e>
 800b8c8:	2340      	movs	r3, #64	; 0x40
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	b016      	add	sp, #88	; 0x58
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8d4 <__smakebuf_r>:
 800b8d4:	898b      	ldrh	r3, [r1, #12]
 800b8d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8d8:	079d      	lsls	r5, r3, #30
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	d507      	bpl.n	800b8f0 <__smakebuf_r+0x1c>
 800b8e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	6163      	str	r3, [r4, #20]
 800b8ec:	b002      	add	sp, #8
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	ab01      	add	r3, sp, #4
 800b8f2:	466a      	mov	r2, sp
 800b8f4:	f7ff ffc8 	bl	800b888 <__swhatbuf_r>
 800b8f8:	9900      	ldr	r1, [sp, #0]
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7fd fa77 	bl	8008df0 <_malloc_r>
 800b902:	b948      	cbnz	r0, 800b918 <__smakebuf_r+0x44>
 800b904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b908:	059a      	lsls	r2, r3, #22
 800b90a:	d4ef      	bmi.n	800b8ec <__smakebuf_r+0x18>
 800b90c:	f023 0303 	bic.w	r3, r3, #3
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	e7e3      	b.n	800b8e0 <__smakebuf_r+0xc>
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <__smakebuf_r+0x7c>)
 800b91a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	6020      	str	r0, [r4, #0]
 800b920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	6163      	str	r3, [r4, #20]
 800b92a:	9b01      	ldr	r3, [sp, #4]
 800b92c:	6120      	str	r0, [r4, #16]
 800b92e:	b15b      	cbz	r3, 800b948 <__smakebuf_r+0x74>
 800b930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b934:	4630      	mov	r0, r6
 800b936:	f000 f931 	bl	800bb9c <_isatty_r>
 800b93a:	b128      	cbz	r0, 800b948 <__smakebuf_r+0x74>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f023 0303 	bic.w	r3, r3, #3
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	89a0      	ldrh	r0, [r4, #12]
 800b94a:	4305      	orrs	r5, r0
 800b94c:	81a5      	strh	r5, [r4, #12]
 800b94e:	e7cd      	b.n	800b8ec <__smakebuf_r+0x18>
 800b950:	0800b6e1 	.word	0x0800b6e1

0800b954 <__ascii_mbtowc>:
 800b954:	b082      	sub	sp, #8
 800b956:	b901      	cbnz	r1, 800b95a <__ascii_mbtowc+0x6>
 800b958:	a901      	add	r1, sp, #4
 800b95a:	b142      	cbz	r2, 800b96e <__ascii_mbtowc+0x1a>
 800b95c:	b14b      	cbz	r3, 800b972 <__ascii_mbtowc+0x1e>
 800b95e:	7813      	ldrb	r3, [r2, #0]
 800b960:	600b      	str	r3, [r1, #0]
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	1e10      	subs	r0, r2, #0
 800b966:	bf18      	it	ne
 800b968:	2001      	movne	r0, #1
 800b96a:	b002      	add	sp, #8
 800b96c:	4770      	bx	lr
 800b96e:	4610      	mov	r0, r2
 800b970:	e7fb      	b.n	800b96a <__ascii_mbtowc+0x16>
 800b972:	f06f 0001 	mvn.w	r0, #1
 800b976:	e7f8      	b.n	800b96a <__ascii_mbtowc+0x16>

0800b978 <memmove>:
 800b978:	4288      	cmp	r0, r1
 800b97a:	b510      	push	{r4, lr}
 800b97c:	eb01 0402 	add.w	r4, r1, r2
 800b980:	d902      	bls.n	800b988 <memmove+0x10>
 800b982:	4284      	cmp	r4, r0
 800b984:	4623      	mov	r3, r4
 800b986:	d807      	bhi.n	800b998 <memmove+0x20>
 800b988:	1e43      	subs	r3, r0, #1
 800b98a:	42a1      	cmp	r1, r4
 800b98c:	d008      	beq.n	800b9a0 <memmove+0x28>
 800b98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b996:	e7f8      	b.n	800b98a <memmove+0x12>
 800b998:	4402      	add	r2, r0
 800b99a:	4601      	mov	r1, r0
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d100      	bne.n	800b9a2 <memmove+0x2a>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9aa:	e7f7      	b.n	800b99c <memmove+0x24>

0800b9ac <_realloc_r>:
 800b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4614      	mov	r4, r2
 800b9b4:	460e      	mov	r6, r1
 800b9b6:	b921      	cbnz	r1, 800b9c2 <_realloc_r+0x16>
 800b9b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	4611      	mov	r1, r2
 800b9be:	f7fd ba17 	b.w	8008df0 <_malloc_r>
 800b9c2:	b92a      	cbnz	r2, 800b9d0 <_realloc_r+0x24>
 800b9c4:	f7fd f9a8 	bl	8008d18 <_free_r>
 800b9c8:	4625      	mov	r5, r4
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	f000 f906 	bl	800bbe0 <_malloc_usable_size_r>
 800b9d4:	4284      	cmp	r4, r0
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	d802      	bhi.n	800b9e0 <_realloc_r+0x34>
 800b9da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9de:	d812      	bhi.n	800ba06 <_realloc_r+0x5a>
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7fd fa04 	bl	8008df0 <_malloc_r>
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d0ed      	beq.n	800b9ca <_realloc_r+0x1e>
 800b9ee:	42bc      	cmp	r4, r7
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	bf28      	it	cs
 800b9f6:	463a      	movcs	r2, r7
 800b9f8:	f7fe fe5a 	bl	800a6b0 <memcpy>
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4640      	mov	r0, r8
 800ba00:	f7fd f98a 	bl	8008d18 <_free_r>
 800ba04:	e7e1      	b.n	800b9ca <_realloc_r+0x1e>
 800ba06:	4635      	mov	r5, r6
 800ba08:	e7df      	b.n	800b9ca <_realloc_r+0x1e>

0800ba0a <_raise_r>:
 800ba0a:	291f      	cmp	r1, #31
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4604      	mov	r4, r0
 800ba10:	460d      	mov	r5, r1
 800ba12:	d904      	bls.n	800ba1e <_raise_r+0x14>
 800ba14:	2316      	movs	r3, #22
 800ba16:	6003      	str	r3, [r0, #0]
 800ba18:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1c:	bd38      	pop	{r3, r4, r5, pc}
 800ba1e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba20:	b112      	cbz	r2, 800ba28 <_raise_r+0x1e>
 800ba22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba26:	b94b      	cbnz	r3, 800ba3c <_raise_r+0x32>
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f000 f831 	bl	800ba90 <_getpid_r>
 800ba2e:	462a      	mov	r2, r5
 800ba30:	4601      	mov	r1, r0
 800ba32:	4620      	mov	r0, r4
 800ba34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba38:	f000 b818 	b.w	800ba6c <_kill_r>
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d00a      	beq.n	800ba56 <_raise_r+0x4c>
 800ba40:	1c59      	adds	r1, r3, #1
 800ba42:	d103      	bne.n	800ba4c <_raise_r+0x42>
 800ba44:	2316      	movs	r3, #22
 800ba46:	6003      	str	r3, [r0, #0]
 800ba48:	2001      	movs	r0, #1
 800ba4a:	e7e7      	b.n	800ba1c <_raise_r+0x12>
 800ba4c:	2400      	movs	r4, #0
 800ba4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba52:	4628      	mov	r0, r5
 800ba54:	4798      	blx	r3
 800ba56:	2000      	movs	r0, #0
 800ba58:	e7e0      	b.n	800ba1c <_raise_r+0x12>
	...

0800ba5c <raise>:
 800ba5c:	4b02      	ldr	r3, [pc, #8]	; (800ba68 <raise+0xc>)
 800ba5e:	4601      	mov	r1, r0
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	f7ff bfd2 	b.w	800ba0a <_raise_r>
 800ba66:	bf00      	nop
 800ba68:	2000000c 	.word	0x2000000c

0800ba6c <_kill_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	; (800ba8c <_kill_r+0x20>)
 800ba70:	2300      	movs	r3, #0
 800ba72:	4604      	mov	r4, r0
 800ba74:	4608      	mov	r0, r1
 800ba76:	4611      	mov	r1, r2
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	f7f6 fe11 	bl	80026a0 <_kill>
 800ba7e:	1c43      	adds	r3, r0, #1
 800ba80:	d102      	bne.n	800ba88 <_kill_r+0x1c>
 800ba82:	682b      	ldr	r3, [r5, #0]
 800ba84:	b103      	cbz	r3, 800ba88 <_kill_r+0x1c>
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	bd38      	pop	{r3, r4, r5, pc}
 800ba8a:	bf00      	nop
 800ba8c:	2000054c 	.word	0x2000054c

0800ba90 <_getpid_r>:
 800ba90:	f7f6 bdfe 	b.w	8002690 <_getpid>

0800ba94 <__sread>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	460c      	mov	r4, r1
 800ba98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba9c:	f000 f8a8 	bl	800bbf0 <_read_r>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	bfab      	itete	ge
 800baa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800baa6:	89a3      	ldrhlt	r3, [r4, #12]
 800baa8:	181b      	addge	r3, r3, r0
 800baaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800baae:	bfac      	ite	ge
 800bab0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bab2:	81a3      	strhlt	r3, [r4, #12]
 800bab4:	bd10      	pop	{r4, pc}

0800bab6 <__swrite>:
 800bab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baba:	461f      	mov	r7, r3
 800babc:	898b      	ldrh	r3, [r1, #12]
 800babe:	05db      	lsls	r3, r3, #23
 800bac0:	4605      	mov	r5, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	4616      	mov	r6, r2
 800bac6:	d505      	bpl.n	800bad4 <__swrite+0x1e>
 800bac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bacc:	2302      	movs	r3, #2
 800bace:	2200      	movs	r2, #0
 800bad0:	f000 f874 	bl	800bbbc <_lseek_r>
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	4632      	mov	r2, r6
 800bae2:	463b      	mov	r3, r7
 800bae4:	4628      	mov	r0, r5
 800bae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baea:	f000 b823 	b.w	800bb34 <_write_r>

0800baee <__sseek>:
 800baee:	b510      	push	{r4, lr}
 800baf0:	460c      	mov	r4, r1
 800baf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf6:	f000 f861 	bl	800bbbc <_lseek_r>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	89a3      	ldrh	r3, [r4, #12]
 800bafe:	bf15      	itete	ne
 800bb00:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb0a:	81a3      	strheq	r3, [r4, #12]
 800bb0c:	bf18      	it	ne
 800bb0e:	81a3      	strhne	r3, [r4, #12]
 800bb10:	bd10      	pop	{r4, pc}

0800bb12 <__sclose>:
 800bb12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb16:	f000 b81f 	b.w	800bb58 <_close_r>

0800bb1a <__ascii_wctomb>:
 800bb1a:	b149      	cbz	r1, 800bb30 <__ascii_wctomb+0x16>
 800bb1c:	2aff      	cmp	r2, #255	; 0xff
 800bb1e:	bf85      	ittet	hi
 800bb20:	238a      	movhi	r3, #138	; 0x8a
 800bb22:	6003      	strhi	r3, [r0, #0]
 800bb24:	700a      	strbls	r2, [r1, #0]
 800bb26:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb2a:	bf98      	it	ls
 800bb2c:	2001      	movls	r0, #1
 800bb2e:	4770      	bx	lr
 800bb30:	4608      	mov	r0, r1
 800bb32:	4770      	bx	lr

0800bb34 <_write_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d07      	ldr	r5, [pc, #28]	; (800bb54 <_write_r+0x20>)
 800bb38:	4604      	mov	r4, r0
 800bb3a:	4608      	mov	r0, r1
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	602a      	str	r2, [r5, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f7f6 fde3 	bl	800270e <_write>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_write_r+0x1e>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_write_r+0x1e>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	2000054c 	.word	0x2000054c

0800bb58 <_close_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4d06      	ldr	r5, [pc, #24]	; (800bb74 <_close_r+0x1c>)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	602b      	str	r3, [r5, #0]
 800bb64:	f7f6 fdef 	bl	8002746 <_close>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_close_r+0x1a>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_close_r+0x1a>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	2000054c 	.word	0x2000054c

0800bb78 <_fstat_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4d07      	ldr	r5, [pc, #28]	; (800bb98 <_fstat_r+0x20>)
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	4604      	mov	r4, r0
 800bb80:	4608      	mov	r0, r1
 800bb82:	4611      	mov	r1, r2
 800bb84:	602b      	str	r3, [r5, #0]
 800bb86:	f7f6 fdea 	bl	800275e <_fstat>
 800bb8a:	1c43      	adds	r3, r0, #1
 800bb8c:	d102      	bne.n	800bb94 <_fstat_r+0x1c>
 800bb8e:	682b      	ldr	r3, [r5, #0]
 800bb90:	b103      	cbz	r3, 800bb94 <_fstat_r+0x1c>
 800bb92:	6023      	str	r3, [r4, #0]
 800bb94:	bd38      	pop	{r3, r4, r5, pc}
 800bb96:	bf00      	nop
 800bb98:	2000054c 	.word	0x2000054c

0800bb9c <_isatty_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	; (800bbb8 <_isatty_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f6 fde9 	bl	800277e <_isatty>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_isatty_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_isatty_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	2000054c 	.word	0x2000054c

0800bbbc <_lseek_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d07      	ldr	r5, [pc, #28]	; (800bbdc <_lseek_r+0x20>)
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	4608      	mov	r0, r1
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	602a      	str	r2, [r5, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f7f6 fde2 	bl	8002794 <_lseek>
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	d102      	bne.n	800bbda <_lseek_r+0x1e>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	b103      	cbz	r3, 800bbda <_lseek_r+0x1e>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	2000054c 	.word	0x2000054c

0800bbe0 <_malloc_usable_size_r>:
 800bbe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbe4:	1f18      	subs	r0, r3, #4
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	bfbc      	itt	lt
 800bbea:	580b      	ldrlt	r3, [r1, r0]
 800bbec:	18c0      	addlt	r0, r0, r3
 800bbee:	4770      	bx	lr

0800bbf0 <_read_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4d07      	ldr	r5, [pc, #28]	; (800bc10 <_read_r+0x20>)
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	4608      	mov	r0, r1
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	602a      	str	r2, [r5, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f7f6 fd68 	bl	80026d4 <_read>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_read_r+0x1e>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_read_r+0x1e>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	2000054c 	.word	0x2000054c

0800bc14 <_init>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	bf00      	nop
 800bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	469e      	mov	lr, r3
 800bc1e:	4770      	bx	lr

0800bc20 <_fini>:
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	bf00      	nop
 800bc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc26:	bc08      	pop	{r3}
 800bc28:	469e      	mov	lr, r3
 800bc2a:	4770      	bx	lr


RTC_using_layers_common_i2c_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003150  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003378  08003378  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003378  08003378  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003378  08003378  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800337c  0800337c  0001337c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080033f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080033f0  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad7f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e16  00000000  00000000  0002ae1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002cc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002001b  00000000  00000000  0002dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c91d  00000000  00000000  0004dfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd79e  00000000  00000000  0005a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c04  00000000  00000000  001180e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032c8 	.word	0x080032c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080032c8 	.word	0x080032c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <bcdToDec>:
	return (uint8_t)( (val/10*16) + (val%10) );
}

//Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	return (int)( (val/16*10) + (val%16) );
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	091b      	lsrs	r3, r3, #4
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	4613      	mov	r3, r2
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	4413      	add	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	461a      	mov	r2, r3
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 030f 	and.w	r3, r3, #15
 8000292:	4413      	add	r3, r2
}
 8000294:	4618      	mov	r0, r3
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <Get_Time>:
      I2C_Write(&hi2c1, DS3107_ADDRESS, 0x00, 1, set_time, 7, 1000);


}
void Get_Time (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	uint8_t get_time[7];

	I2C_read(get_time);
 80002a6:	463b      	mov	r3, r7
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f911 	bl	80004d0 <I2C_read>

	time.seconds 	= bcdToDec(get_time[0]);
 80002ae:	783b      	ldrb	r3, [r7, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffdd 	bl	8000270 <bcdToDec>
 80002b6:	4603      	mov	r3, r0
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <Get_Time+0x88>)
 80002bc:	701a      	strb	r2, [r3, #0]
    time.minutes 	= bcdToDec(get_time[1]);
 80002be:	787b      	ldrb	r3, [r7, #1]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ffd5 	bl	8000270 <bcdToDec>
 80002c6:	4603      	mov	r3, r0
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <Get_Time+0x88>)
 80002cc:	705a      	strb	r2, [r3, #1]
	time.hour 		= bcdToDec(get_time[2]);
 80002ce:	78bb      	ldrb	r3, [r7, #2]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ffcd 	bl	8000270 <bcdToDec>
 80002d6:	4603      	mov	r3, r0
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <Get_Time+0x88>)
 80002dc:	709a      	strb	r2, [r3, #2]
	time.dayofweek  = bcdToDec(get_time[3]);
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ffc5 	bl	8000270 <bcdToDec>
 80002e6:	4603      	mov	r3, r0
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <Get_Time+0x88>)
 80002ec:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80002ee:	793b      	ldrb	r3, [r7, #4]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ffbd 	bl	8000270 <bcdToDec>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <Get_Time+0x88>)
 80002fc:	711a      	strb	r2, [r3, #4]
	time.month 		= bcdToDec(get_time[5]);
 80002fe:	797b      	ldrb	r3, [r7, #5]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffb5 	bl	8000270 <bcdToDec>
 8000306:	4603      	mov	r3, r0
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <Get_Time+0x88>)
 800030c:	715a      	strb	r2, [r3, #5]
	time.year 		= bcdToDec(get_time[6]);
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffad 	bl	8000270 <bcdToDec>
 8000316:	4603      	mov	r3, r0
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <Get_Time+0x88>)
 800031c:	719a      	strb	r2, [r3, #6]
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000008c 	.word	0x2000008c

0800032c <app>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void app(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af02      	add	r7, sp, #8
//  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Get_Time();
 8000332:	f7ff ffb5 	bl	80002a0 <Get_Time>
	  	  sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <app+0x50>)
 8000338:	789b      	ldrb	r3, [r3, #2]
 800033a:	461a      	mov	r2, r3
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <app+0x50>)
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	4619      	mov	r1, r3
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <app+0x50>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	460b      	mov	r3, r1
 800034a:	490d      	ldr	r1, [pc, #52]	; (8000380 <app+0x54>)
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <app+0x58>)
 800034e:	f002 fb4d 	bl	80029ec <siprintf>
//	  	  ssd1306_SetCursor(5, 5);
//	  	  ssd1306_WriteString(buffer, Font_7x10, White);
//	  	  ssd1306_UpdateScreen();


	  	  sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <app+0x50>)
 8000354:	791b      	ldrb	r3, [r3, #4]
 8000356:	461a      	mov	r2, r3
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <app+0x50>)
 800035a:	795b      	ldrb	r3, [r3, #5]
 800035c:	4619      	mov	r1, r3
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <app+0x50>)
 8000360:	799b      	ldrb	r3, [r3, #6]
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	460b      	mov	r3, r1
 8000366:	4908      	ldr	r1, [pc, #32]	; (8000388 <app+0x5c>)
 8000368:	4806      	ldr	r0, [pc, #24]	; (8000384 <app+0x58>)
 800036a:	f002 fb3f 	bl	80029ec <siprintf>

//	  	  ssd1306_SetCursor(7, 20);
//	  	  ssd1306_WriteString(buffer, Font_7x10, White);
//	  	  ssd1306_UpdateScreen();

	  	  HAL_Delay(500);
 800036e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000372:	f000 fa95 	bl	80008a0 <HAL_Delay>
  }
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000008c 	.word	0x2000008c
 8000380:	080032e0 	.word	0x080032e0
 8000384:	20000094 	.word	0x20000094
 8000388:	080032f0 	.word	0x080032f0

0800038c <User_SystemClock_Config>:
#include <application_RTC.h>
//#include "ssd1306.h"
extern I2C_HandleTypeDef hi2c1;

void User_SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b096      	sub	sp, #88	; 0x58
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0314 	add.w	r3, r7, #20
 8000396:	2244      	movs	r2, #68	; 0x44
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 fb1e 	bl	80029dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	463b      	mov	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003b2:	f001 f99b 	bl	80016ec <HAL_PWREx_ControlVoltageScaling>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <User_SystemClock_Config+0x34>
  {
    Error_Handler();
 80003bc:	f000 f8de 	bl	800057c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003c0:	f001 f976 	bl	80016b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <User_SystemClock_Config+0xc0>)
 80003c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003ca:	4a20      	ldr	r2, [pc, #128]	; (800044c <User_SystemClock_Config+0xc0>)
 80003cc:	f023 0318 	bic.w	r3, r3, #24
 80003d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80003d4:	2314      	movs	r3, #20
 80003d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003e4:	2360      	movs	r3, #96	; 0x60
 80003e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e8:	2302      	movs	r3, #2
 80003ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003ec:	2301      	movs	r3, #1
 80003ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80003f4:	2310      	movs	r3, #16
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003f8:	2307      	movs	r3, #7
 80003fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003fc:	2302      	movs	r3, #2
 80003fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000400:	2302      	movs	r3, #2
 8000402:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4618      	mov	r0, r3
 800040a:	f001 f9c5 	bl	8001798 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <User_SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000414:	f000 f8b2 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	230f      	movs	r3, #15
 800041a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041c:	2303      	movs	r3, #3
 800041e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042c:	463b      	mov	r3, r7
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fdc5 	bl	8001fc0 <HAL_RCC_ClockConfig>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <User_SystemClock_Config+0xb4>
  {
    Error_Handler();
 800043c:	f000 f89e 	bl	800057c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000440:	f002 f9a0 	bl	8002784 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000444:	bf00      	nop
 8000446:	3758      	adds	r7, #88	; 0x58
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000

08000450 <USER_I2C1_Init>:


void USER_I2C1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <USER_I2C1_Init+0x74>)
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <USER_I2C1_Init+0x78>)
 8000458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <USER_I2C1_Init+0x74>)
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <USER_I2C1_Init+0x7c>)
 800045e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <USER_I2C1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <USER_I2C1_Init+0x74>)
 8000468:	2201      	movs	r2, #1
 800046a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <USER_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <USER_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <USER_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <USER_I2C1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <USER_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <USER_I2C1_Init+0x74>)
 800048c:	f000 fc7c 	bl	8000d88 <HAL_I2C_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <USER_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000496:	f000 f871 	bl	800057c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049a:	2100      	movs	r1, #0
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <USER_I2C1_Init+0x74>)
 800049e:	f001 f86f 	bl	8001580 <HAL_I2CEx_ConfigAnalogFilter>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <USER_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004a8:	f000 f868 	bl	800057c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ac:	2100      	movs	r1, #0
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <USER_I2C1_Init+0x74>)
 80004b0:	f001 f8b1 	bl	8001616 <HAL_I2CEx_ConfigDigitalFilter>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <USER_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f85f 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000a4 	.word	0x200000a4
 80004c8:	40005400 	.word	0x40005400
 80004cc:	00707cbb 	.word	0x00707cbb

080004d0 <I2C_read>:
    HAL_I2C_Mem_Write(hi2c, device_address, mem_address, mem_address_size, data, data_size, timeout);
}

//read function for RTC
void I2C_read(uint8_t *data)
   {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af04      	add	r7, sp, #16
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, DS3107_ADDRESS, 0x00, 1, data, 7, 1000);
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	9302      	str	r3, [sp, #8]
 80004de:	2307      	movs	r3, #7
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2301      	movs	r3, #1
 80004e8:	2200      	movs	r2, #0
 80004ea:	21d0      	movs	r1, #208	; 0xd0
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <I2C_read+0x2c>)
 80004ee:	f000 fcdb 	bl	8000ea8 <HAL_I2C_Mem_Read>
   }
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000a4 	.word	0x200000a4

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 f957 	bl	80007b6 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f808 	bl	800051c <MX_GPIO_Init>
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  User_SystemClock_Config();
 800050c:	f7ff ff3e 	bl	800038c <User_SystemClock_Config>
  USER_I2C1_Init();
 8000510:	f7ff ff9e 	bl	8000450 <USER_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app();
 8000514:	f7ff ff0a 	bl	800032c <app>
 8000518:	e7fc      	b.n	8000514 <main+0x14>
	...

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a14      	ldr	r2, [pc, #80]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_GPIO_Init+0x5c>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_GPIO_Init+0x5c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x44>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_MspInit+0x44>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6613      	str	r3, [r2, #96]	; 0x60
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x44>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_MspInit+0x44>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <HAL_MspInit+0x44>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	6593      	str	r3, [r2, #88]	; 0x58
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_MspInit+0x44>)
 80005b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b09e      	sub	sp, #120	; 0x78
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2254      	movs	r2, #84	; 0x54
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 f9f3 	bl	80029dc <memset>
  if(hi2c->Instance==I2C1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <HAL_I2C_MspInit+0xa4>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d135      	bne.n	800066c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fec3 	bl	8002398 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000618:	f7ff ffb0 	bl	800057c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <HAL_I2C_MspInit+0xa8>)
 800061e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_I2C_MspInit+0xa8>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <HAL_I2C_MspInit+0xa8>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062c:	f003 0302 	and.w	r3, r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000638:	2312      	movs	r3, #18
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000644:	2304      	movs	r3, #4
 8000646:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800064c:	4619      	mov	r1, r3
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <HAL_I2C_MspInit+0xac>)
 8000650:	f000 fa30 	bl	8000ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_I2C_MspInit+0xa8>)
 8000656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_I2C_MspInit+0xa8>)
 800065a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065e:	6593      	str	r3, [r2, #88]	; 0x58
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_I2C_MspInit+0xa8>)
 8000662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800066c:	bf00      	nop
 800066e:	3778      	adds	r7, #120	; 0x78
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40005400 	.word	0x40005400
 8000678:	40021000 	.word	0x40021000
 800067c:	48000400 	.word	0x48000400

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f8c8 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006dc:	4a14      	ldr	r2, [pc, #80]	; (8000730 <_sbrk+0x5c>)
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <_sbrk+0x60>)
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <_sbrk+0x64>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <_sbrk+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	429a      	cmp	r2, r3
 8000702:	d207      	bcs.n	8000714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000704:	f002 f940 	bl	8002988 <__errno>
 8000708:	4603      	mov	r3, r0
 800070a:	220c      	movs	r2, #12
 800070c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	e009      	b.n	8000728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <_sbrk+0x64>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <_sbrk+0x64>)
 8000724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000726:	68fb      	ldr	r3, [r7, #12]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20010000 	.word	0x20010000
 8000734:	00000400 	.word	0x00000400
 8000738:	200000f8 	.word	0x200000f8
 800073c:	20000110 	.word	0x20000110

08000740 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <SystemInit+0x20>)
 8000746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <SystemInit+0x20>)
 800074c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800079c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff ffea 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800076e:	490d      	ldr	r1, [pc, #52]	; (80007a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <LoopForever+0xe>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000784:	4c0a      	ldr	r4, [pc, #40]	; (80007b0 <LoopForever+0x16>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f002 f8ff 	bl	8002994 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000796:	f7ff feb3 	bl	8000500 <main>

0800079a <LoopForever>:

LoopForever:
    b LoopForever
 800079a:	e7fe      	b.n	800079a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800079c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007a8:	08003380 	.word	0x08003380
  ldr r2, =_sbss
 80007ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007b0:	20000110 	.word	0x20000110

080007b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC1_IRQHandler>

080007b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007bc:	2300      	movs	r3, #0
 80007be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f943 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 f80e 	bl	80007e8 <HAL_InitTick>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	e001      	b.n	80007dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007d8:	f7ff fed6 	bl	8000588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_InitTick+0x6c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d023      	beq.n	8000844 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <HAL_InitTick+0x70>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_InitTick+0x6c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f941 	bl	8000a9a <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10f      	bne.n	800083e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d809      	bhi.n	8000838 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 f919 	bl	8000a62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_InitTick+0x74>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	e007      	b.n	8000848 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e004      	b.n	8000848 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	e001      	b.n	8000848 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008
 8000858:	20000000 	.word	0x20000000
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008
 8000884:	200000fc 	.word	0x200000fc

08000888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_GetTick+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	200000fc 	.word	0x200000fc

080008a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff ffee 	bl	8000888 <HAL_GetTick>
 80008ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_Delay+0x44>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffde 	bl	8000888 <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	; (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <__NVIC_SetPriority+0x50>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0112      	lsls	r2, r2, #4
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	; 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf28      	it	cs
 80009be:	2304      	movcs	r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3304      	adds	r3, #4
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b03      	subs	r3, #3
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
         );
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a18:	d301      	bcc.n	8000a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00f      	b.n	8000a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <SysTick_Config+0x40>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a26:	210f      	movs	r1, #15
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f7ff ff8e 	bl	800094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <SysTick_Config+0x40>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SysTick_Config+0x40>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	e000e010 	.word	0xe000e010

08000a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff47 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a74:	f7ff ff5c 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f7ff ff8e 	bl	80009a0 <NVIC_EncodePriority>
 8000a84:	4602      	mov	r2, r0
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff5d 	bl	800094c <__NVIC_SetPriority>
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffb0 	bl	8000a08 <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac2:	e148      	b.n	8000d56 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 813a 	beq.w	8000d50 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d005      	beq.n	8000af4 <HAL_GPIO_Init+0x40>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d130      	bne.n	8000b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	f003 0201 	and.w	r2, r3, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d017      	beq.n	8000b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d123      	bne.n	8000be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0203 	and.w	r2, r3, #3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8094 	beq.w	8000d50 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	4b52      	ldr	r3, [pc, #328]	; (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2c:	4a51      	ldr	r2, [pc, #324]	; (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6613      	str	r3, [r2, #96]	; 0x60
 8000c34:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c40:	4a4d      	ldr	r2, [pc, #308]	; (8000d78 <HAL_GPIO_Init+0x2c4>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1d4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1d0>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a42      	ldr	r2, [pc, #264]	; (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1cc>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1d6>
 8000c80:	2307      	movs	r3, #7
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1d6>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1d6>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2c4>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ccc:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cf6:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d20:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aeaf 	bne.w	8000ac4 <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e081      	b.n	8000e9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fc0e 	bl	80005d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2224      	movs	r2, #36	; 0x24
 8000db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0201 	bic.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000de8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d107      	bne.n	8000e02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	e006      	b.n	8000e10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d104      	bne.n	8000e22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69d9      	ldr	r1, [r3, #28]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1a      	ldr	r2, [r3, #32]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2220      	movs	r2, #32
 8000e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	817b      	strh	r3, [r7, #10]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	813b      	strh	r3, [r7, #8]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b20      	cmp	r3, #32
 8000ecc:	f040 80fd 	bne.w	80010ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <HAL_I2C_Mem_Read+0x34>
 8000ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d105      	bne.n	8000ee8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0f1      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d101      	bne.n	8000ef6 <HAL_I2C_Mem_Read+0x4e>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e0ea      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000efe:	f7ff fcc3 	bl	8000888 <HAL_GetTick>
 8000f02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2319      	movs	r3, #25
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 f95b 	bl	80011cc <I2C_WaitOnFlagUntilTimeout>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0d5      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2222      	movs	r2, #34	; 0x22
 8000f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2240      	movs	r2, #64	; 0x40
 8000f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6a3a      	ldr	r2, [r7, #32]
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f48:	88f8      	ldrh	r0, [r7, #6]
 8000f4a:	893a      	ldrh	r2, [r7, #8]
 8000f4c:	8979      	ldrh	r1, [r7, #10]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	4603      	mov	r3, r0
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f000 f8bf 	bl	80010dc <I2C_RequestMemoryRead>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e0ad      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	2bff      	cmp	r3, #255	; 0xff
 8000f78:	d90e      	bls.n	8000f98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	8979      	ldrh	r1, [r7, #10]
 8000f88:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <HAL_I2C_Mem_Read+0x22c>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fac3 	bl	800151c <I2C_TransferConfig>
 8000f96:	e00f      	b.n	8000fb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	8979      	ldrh	r1, [r7, #10]
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_I2C_Mem_Read+0x22c>)
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 fab2 	bl	800151c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f902 	bl	80011cc <I2C_WaitOnFlagUntilTimeout>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e07c      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001008:	b29b      	uxth	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d034      	beq.n	8001078 <HAL_I2C_Mem_Read+0x1d0>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001012:	2b00      	cmp	r3, #0
 8001014:	d130      	bne.n	8001078 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 f8d3 	bl	80011cc <I2C_WaitOnFlagUntilTimeout>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e04d      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001034:	b29b      	uxth	r3, r3
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d90e      	bls.n	8001058 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	22ff      	movs	r2, #255	; 0xff
 800103e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001044:	b2da      	uxtb	r2, r3
 8001046:	8979      	ldrh	r1, [r7, #10]
 8001048:	2300      	movs	r3, #0
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 fa63 	bl	800151c <I2C_TransferConfig>
 8001056:	e00f      	b.n	8001078 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800105c:	b29a      	uxth	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001066:	b2da      	uxtb	r2, r3
 8001068:	8979      	ldrh	r1, [r7, #10]
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 fa52 	bl	800151c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800107c:	b29b      	uxth	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d19a      	bne.n	8000fb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f920 	bl	80012cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e01a      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2220      	movs	r2, #32
 800109c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6859      	ldr	r1, [r3, #4]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_I2C_Mem_Read+0x230>)
 80010aa:	400b      	ands	r3, r1
 80010ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2220      	movs	r2, #32
 80010b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80010ca:	2302      	movs	r3, #2
  }
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	80002400 	.word	0x80002400
 80010d8:	fe00e800 	.word	0xfe00e800

080010dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	4608      	mov	r0, r1
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	4603      	mov	r3, r0
 80010ec:	817b      	strh	r3, [r7, #10]
 80010ee:	460b      	mov	r3, r1
 80010f0:	813b      	strh	r3, [r7, #8]
 80010f2:	4613      	mov	r3, r2
 80010f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	8979      	ldrh	r1, [r7, #10]
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <I2C_RequestMemoryRead+0xa4>)
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 fa0a 	bl	800151c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 f89d 	bl	800124c <I2C_WaitOnTXISFlagUntilTimeout>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e02c      	b.n	8001176 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001122:	893b      	ldrh	r3, [r7, #8]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
 800112c:	e015      	b.n	800115a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800112e:	893b      	ldrh	r3, [r7, #8]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f000 f883 	bl	800124c <I2C_WaitOnTXISFlagUntilTimeout>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e012      	b.n	8001176 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001150:	893b      	ldrh	r3, [r7, #8]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f831 	bl	80011cc <I2C_WaitOnFlagUntilTimeout>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	80002000 	.word	0x80002000

08001184 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b02      	cmp	r3, #2
 8001198:	d103      	bne.n	80011a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d007      	beq.n	80011c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	619a      	str	r2, [r3, #24]
  }
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011dc:	e022      	b.n	8001224 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d01e      	beq.n	8001224 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011e6:	f7ff fb4f 	bl	8000888 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d302      	bcc.n	80011fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d113      	bne.n	8001224 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	f043 0220 	orr.w	r2, r3, #32
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2220      	movs	r2, #32
 800120c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e00f      	b.n	8001244 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	699a      	ldr	r2, [r3, #24]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	4013      	ands	r3, r2
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	429a      	cmp	r2, r3
 8001240:	d0cd      	beq.n	80011de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001258:	e02c      	b.n	80012b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f870 	bl	8001344 <I2C_IsErrorOccurred>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e02a      	b.n	80012c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d01e      	beq.n	80012b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001276:	f7ff fb07 	bl	8000888 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	429a      	cmp	r2, r3
 8001284:	d302      	bcc.n	800128c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d113      	bne.n	80012b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f043 0220 	orr.w	r2, r3, #32
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2220      	movs	r2, #32
 800129c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e007      	b.n	80012c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d1cb      	bne.n	800125a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012d8:	e028      	b.n	800132c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f830 	bl	8001344 <I2C_IsErrorOccurred>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e026      	b.n	800133c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ee:	f7ff facb 	bl	8000888 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d302      	bcc.n	8001304 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d113      	bne.n	800132c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	f043 0220 	orr.w	r2, r3, #32
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2220      	movs	r2, #32
 8001314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e007      	b.n	800133c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	2b20      	cmp	r3, #32
 8001338:	d1cf      	bne.n	80012da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d075      	beq.n	800145c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2210      	movs	r2, #16
 8001376:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001378:	e056      	b.n	8001428 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d052      	beq.n	8001428 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001382:	f7ff fa81 	bl	8000888 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	429a      	cmp	r2, r3
 8001390:	d302      	bcc.n	8001398 <I2C_IsErrorOccurred+0x54>
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d147      	bne.n	8001428 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80013aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ba:	d12e      	bne.n	800141a <I2C_IsErrorOccurred+0xd6>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013c2:	d02a      	beq.n	800141a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80013c4:	7cfb      	ldrb	r3, [r7, #19]
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d027      	beq.n	800141a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80013da:	f7ff fa55 	bl	8000888 <HAL_GetTick>
 80013de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013e0:	e01b      	b.n	800141a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80013e2:	f7ff fa51 	bl	8000888 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b19      	cmp	r3, #25
 80013ee:	d914      	bls.n	800141a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	f043 0220 	orr.w	r2, r3, #32
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2220      	movs	r2, #32
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	2b20      	cmp	r3, #32
 8001426:	d1dc      	bne.n	80013e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	2b20      	cmp	r3, #32
 8001434:	d003      	beq.n	800143e <I2C_IsErrorOccurred+0xfa>
 8001436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800143a:	2b00      	cmp	r3, #0
 800143c:	d09d      	beq.n	800137a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800143e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2220      	movs	r2, #32
 800144c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80014ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01c      	beq.n	800150c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff fe56 	bl	8001184 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <I2C_IsErrorOccurred+0x1d4>)
 80014e4:	400b      	ands	r3, r1
 80014e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001510:	4618      	mov	r0, r3
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	fe00e800 	.word	0xfe00e800

0800151c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	817b      	strh	r3, [r7, #10]
 800152a:	4613      	mov	r3, r2
 800152c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800152e:	897b      	ldrh	r3, [r7, #10]
 8001530:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001534:	7a7b      	ldrb	r3, [r7, #9]
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800153c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	4313      	orrs	r3, r2
 8001546:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800154a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	0d5b      	lsrs	r3, r3, #21
 8001556:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <I2C_TransferConfig+0x60>)
 800155c:	430b      	orrs	r3, r1
 800155e:	43db      	mvns	r3, r3
 8001560:	ea02 0103 	and.w	r1, r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800156e:	bf00      	nop
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	03ff63ff 	.word	0x03ff63ff

08001580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	d138      	bne.n	8001608 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e032      	b.n	800160a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	; 0x24
 80015b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2220      	movs	r2, #32
 80015f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001608:	2302      	movs	r3, #2
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b20      	cmp	r3, #32
 800162a:	d139      	bne.n	80016a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001636:	2302      	movs	r3, #2
 8001638:	e033      	b.n	80016a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2224      	movs	r2, #36	; 0x24
 8001646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001668:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016a0:	2302      	movs	r3, #2
  }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40007000 	.word	0x40007000

080016d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fa:	d130      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001708:	d038      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2232      	movs	r2, #50	; 0x32
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001730:	e002      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001744:	d102      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f2      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001758:	d110      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e00f      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	d007      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f000 bc02 	b.w	8001fb0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ac:	4b96      	ldr	r3, [pc, #600]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b6:	4b94      	ldr	r3, [pc, #592]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80e4 	beq.w	8001996 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4c>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	f040 808b 	bne.w	80018f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 8087 	bne.w	80018f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x64>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e3d9      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	4b81      	ldr	r3, [pc, #516]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_RCC_OscConfig+0x7e>
 800180c:	4b7e      	ldr	r3, [pc, #504]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001814:	e005      	b.n	8001822 <HAL_RCC_OscConfig+0x8a>
 8001816:	4b7c      	ldr	r3, [pc, #496]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001822:	4293      	cmp	r3, r2
 8001824:	d223      	bcs.n	800186e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fd54 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e3ba      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183a:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a72      	ldr	r2, [pc, #456]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	496d      	ldr	r1, [pc, #436]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001858:	4b6b      	ldr	r3, [pc, #428]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	4968      	ldr	r1, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e025      	b.n	80018ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186e:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4960      	ldr	r1, [pc, #384]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	495b      	ldr	r1, [pc, #364]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fd14 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e37a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ba:	f000 fc81 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	4950      	ldr	r1, [pc, #320]	; (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	4a4e      	ldr	r2, [pc, #312]	; (8001a10 <HAL_RCC_OscConfig+0x278>)
 80018d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018da:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <HAL_RCC_OscConfig+0x27c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe ff82 	bl	80007e8 <HAL_InitTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d052      	beq.n	8001994 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	e35e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d032      	beq.n	8001960 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018fa:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001906:	f7fe ffbf 	bl	8000888 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190e:	f7fe ffbb 	bl	8000888 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e347      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001920:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a35      	ldr	r2, [pc, #212]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4930      	ldr	r1, [pc, #192]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	492b      	ldr	r1, [pc, #172]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
 800195e:	e01a      	b.n	8001996 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196c:	f7fe ff8c 	bl	8000888 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7fe ff88 	bl	8000888 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e314      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x1dc>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d073      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x21c>
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d10e      	bne.n	80019cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d063      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d15f      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e2f1      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x24c>
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e025      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d114      	bne.n	8001a18 <HAL_RCC_OscConfig+0x280>
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a02      	ldr	r2, [pc, #8]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08003304 	.word	0x08003304
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004
 8001a18:	4ba0      	ldr	r3, [pc, #640]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9f      	ldr	r2, [pc, #636]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b9d      	ldr	r3, [pc, #628]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a9c      	ldr	r2, [pc, #624]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7fe ff26 	bl	8000888 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7fe ff22 	bl	8000888 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e2ae      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	4b92      	ldr	r3, [pc, #584]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2a8>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7fe ff12 	bl	8000888 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7fe ff0e 	bl	8000888 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e29a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d0>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d060      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x310>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d116      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x328>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e277      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	4973      	ldr	r1, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e040      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7fe fecd 	bl	8000888 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7fe fec9 	bl	8000888 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e255      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	495f      	ldr	r1, [pc, #380]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e018      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7fe fea9 	bl	8000888 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7fe fea5 	bl	8000888 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e231      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d03c      	beq.n	8001bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7fe fe84 	bl	8000888 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7fe fe80 	bl	8000888 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e20c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ef      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3ec>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bac:	4a3b      	ldr	r2, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7fe fe67 	bl	8000888 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7fe fe63 	bl	8000888 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1ef      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a6 	beq.w	8001d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	; 0x58
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d118      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c30:	f7fe fe2a 	bl	8000888 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7fe fe26 	bl	8000888 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1b2      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d8>
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6e:	e029      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d115      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x50c>
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	4b9a      	ldr	r3, [pc, #616]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a99      	ldr	r2, [pc, #612]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b96      	ldr	r3, [pc, #600]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a95      	ldr	r2, [pc, #596]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fddc 	bl	8000888 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7fe fdd8 	bl	8000888 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e162      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x53c>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7fe fdc5 	bl	8000888 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fdc1 	bl	8000888 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e14b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a77      	ldr	r2, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a6f      	ldr	r2, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7fe fd94 	bl	8000888 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7fe fd90 	bl	8000888 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e11c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5cc>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a60      	ldr	r2, [pc, #384]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7fe fd77 	bl	8000888 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7fe fd73 	bl	8000888 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0ff      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b57      	ldr	r3, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80f3 	beq.w	8001fae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	f040 80c9 	bne.w	8001f64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd2:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0203 	and.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d12c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	3b01      	subs	r3, #1
 8001df2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d123      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d11b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d113      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d109      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d06b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d062      	beq.n	8001f0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0ac      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e62:	f7fe fd11 	bl	8000888 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe fd0d 	bl	8000888 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e099      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x77c>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	4311      	orrs	r1, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ea2:	0212      	lsls	r2, r2, #8
 8001ea4:	4311      	orrs	r1, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eaa:	0852      	lsrs	r2, r2, #1
 8001eac:	3a01      	subs	r2, #1
 8001eae:	0552      	lsls	r2, r2, #21
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eb6:	0852      	lsrs	r2, r2, #1
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	0652      	lsls	r2, r2, #25
 8001ebc:	4311      	orrs	r1, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ec2:	06d2      	lsls	r2, r2, #27
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	4912      	ldr	r1, [pc, #72]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee4:	f7fe fcd0 	bl	8000888 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe fccc 	bl	8000888 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e058      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_RCC_OscConfig+0x778>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0a:	e050      	b.n	8001fae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e04f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d144      	bne.n	8001fae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f3c:	f7fe fca4 	bl	8000888 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe fca0 	bl	8000888 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e02c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x7ac>
 8001f62:	e024      	b.n	8001fae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d01f      	beq.n	8001faa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fc87 	bl	8000888 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe fc83 	bl	8000888 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e00f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4905      	ldr	r1, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x820>)
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
 8001fa8:	e001      	b.n	8001fae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3720      	adds	r7, #32
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	feeefffc 	.word	0xfeeefffc

08001fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0e7      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b75      	ldr	r3, [pc, #468]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b72      	ldr	r3, [pc, #456]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	4970      	ldr	r1, [pc, #448]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b6e      	ldr	r3, [pc, #440]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0cf      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	4b66      	ldr	r3, [pc, #408]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201c:	429a      	cmp	r2, r3
 800201e:	d908      	bls.n	8002032 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4960      	ldr	r1, [pc, #384]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d04c      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	4b5a      	ldr	r3, [pc, #360]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d121      	bne.n	8002096 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0a6      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205e:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e09a      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002076:	4b4e      	ldr	r3, [pc, #312]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e08e      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002086:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e086      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4943      	ldr	r1, [pc, #268]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a8:	f7fe fbee 	bl	8000888 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7fe fbea 	bl	8000888 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e06e      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d010      	beq.n	8002106 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d208      	bcs.n	8002106 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	492b      	ldr	r1, [pc, #172]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d210      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4923      	ldr	r1, [pc, #140]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCC_ClockConfig+0x1ec>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e036      	b.n	80021a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4918      	ldr	r1, [pc, #96]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4910      	ldr	r1, [pc, #64]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002174:	f000 f824 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	490b      	ldr	r1, [pc, #44]	; (80021b4 <HAL_RCC_ClockConfig+0x1f4>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002192:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_ClockConfig+0x1fc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fb25 	bl	80007e8 <HAL_InitTick>
 800219e:	4603      	mov	r3, r0
 80021a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80021a2:	7afb      	ldrb	r3, [r7, #11]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08003304 	.word	0x08003304
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d8:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x34>
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d121      	bne.n	8002232 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d11e      	bne.n	8002232 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e005      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d102      	bne.n	800223e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	e004      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b08      	cmp	r3, #8
 8002242:	d101      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002246:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d134      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0xa6>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d003      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0xac>
 8002264:	e005      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002268:	617b      	str	r3, [r7, #20]
      break;
 800226a:	e005      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800226e:	617b      	str	r3, [r7, #20]
      break;
 8002270:	e002      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	617b      	str	r3, [r7, #20]
      break;
 8002276:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	3301      	adds	r3, #1
 8002284:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	fb03 f202 	mul.w	r2, r3, r2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	0e5b      	lsrs	r3, r3, #25
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	3301      	adds	r3, #1
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022b8:	69bb      	ldr	r3, [r7, #24]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08003314 	.word	0x08003314
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e4:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f9ee 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
 80022f6:	e014      	b.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	; 0x58
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002310:	f7ff f9de 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 8002314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002328:	d10b      	bne.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d919      	bls.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2ba0      	cmp	r3, #160	; 0xa0
 8002334:	d902      	bls.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002336:	2302      	movs	r3, #2
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e013      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800233c:	2301      	movs	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	e010      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b80      	cmp	r3, #128	; 0x80
 8002346:	d902      	bls.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002348:	2303      	movs	r3, #3
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e00a      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d102      	bne.n	800235a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002354:	2302      	movs	r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	e004      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d101      	bne.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 0207 	bic.w	r2, r3, #7
 800236c:	4909      	ldr	r1, [pc, #36]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a0:	2300      	movs	r3, #0
 80023a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a4:	2300      	movs	r3, #0
 80023a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d031      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023bc:	d01a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80023be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023c2:	d814      	bhi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023cc:	d10f      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023da:	e00c      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f9de 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ec:	e003      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	74fb      	strb	r3, [r7, #19]
      break;
 80023f2:	e000      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80023f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023fc:	4b51      	ldr	r3, [pc, #324]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	494e      	ldr	r1, [pc, #312]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002412:	e001      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 809e 	beq.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800243a:	2300      	movs	r3, #0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244a:	6593      	str	r3, [r2, #88]	; 0x58
 800244c:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002458:	2301      	movs	r3, #1
 800245a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a39      	ldr	r2, [pc, #228]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002468:	f7fe fa0e 	bl	8000888 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800246e:	e009      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe fa0a 	bl	8000888 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d902      	bls.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	74fb      	strb	r3, [r7, #19]
        break;
 8002482:	e005      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ef      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d15a      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01e      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d019      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024de:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d016      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe f9ca 	bl	8000888 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f6:	e00b      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe f9c6 	bl	8000888 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d902      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	74fb      	strb	r3, [r7, #19]
            break;
 800250e:	e006      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ec      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	4904      	ldr	r1, [pc, #16]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800253a:	e009      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
 8002540:	e006      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002550:	7c7b      	ldrb	r3, [r7, #17]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b8a      	ldr	r3, [pc, #552]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4a89      	ldr	r2, [pc, #548]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256e:	4b84      	ldr	r3, [pc, #528]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f023 0203 	bic.w	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4980      	ldr	r1, [pc, #512]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002590:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 020c 	bic.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	4978      	ldr	r1, [pc, #480]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	496f      	ldr	r1, [pc, #444]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e2:	4967      	ldr	r1, [pc, #412]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f6:	4b62      	ldr	r3, [pc, #392]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	495e      	ldr	r1, [pc, #376]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	4956      	ldr	r1, [pc, #344]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800263a:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	494d      	ldr	r1, [pc, #308]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d028      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800265c:	4b48      	ldr	r3, [pc, #288]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4945      	ldr	r1, [pc, #276]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800267a:	d106      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800267c:	4b40      	ldr	r3, [pc, #256]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a3f      	ldr	r2, [pc, #252]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002686:	60d3      	str	r3, [r2, #12]
 8002688:	e011      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002692:	d10c      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f882 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d028      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	492d      	ldr	r1, [pc, #180]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026da:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e4:	60d3      	str	r3, [r2, #12]
 80026e6:	e011      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2101      	movs	r1, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f853 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01c      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	4916      	ldr	r1, [pc, #88]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002736:	d10c      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	2102      	movs	r1, #2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f830 	bl	80027a4 <RCCEx_PLLSAI1_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	4904      	ldr	r1, [pc, #16]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002774:	7cbb      	ldrb	r3, [r7, #18]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027b2:	4b74      	ldr	r3, [pc, #464]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d018      	beq.n	80027f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027be:	4b71      	ldr	r3, [pc, #452]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0203 	and.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d10d      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
       ||
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027d6:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
       ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d047      	beq.n	800287a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e044      	b.n	800287a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d018      	beq.n	800282a <RCCEx_PLLSAI1_Config+0x86>
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d825      	bhi.n	8002848 <RCCEx_PLLSAI1_Config+0xa4>
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d002      	beq.n	8002806 <RCCEx_PLLSAI1_Config+0x62>
 8002800:	2b02      	cmp	r3, #2
 8002802:	d009      	beq.n	8002818 <RCCEx_PLLSAI1_Config+0x74>
 8002804:	e020      	b.n	8002848 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002806:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11d      	bne.n	800284e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002816:	e01a      	b.n	800284e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002818:	4b5a      	ldr	r3, [pc, #360]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002828:	e013      	b.n	8002852 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800282a:	4b56      	ldr	r3, [pc, #344]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002836:	4b53      	ldr	r3, [pc, #332]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002846:	e006      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e004      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800284e:	bf00      	nop
 8002850:	e002      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002856:	bf00      	nop
    }

    if(status == HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	430b      	orrs	r3, r1
 8002874:	4943      	ldr	r1, [pc, #268]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d17c      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002880:	4b40      	ldr	r3, [pc, #256]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800288a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288c:	f7fd fffc 	bl	8000888 <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002892:	e009      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002894:	f7fd fff8 	bl	8000888 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d902      	bls.n	80028a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	73fb      	strb	r3, [r7, #15]
        break;
 80028a6:	e005      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ef      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d15f      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6892      	ldr	r2, [r2, #8]
 80028d0:	0211      	lsls	r1, r2, #8
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68d2      	ldr	r2, [r2, #12]
 80028d6:	06d2      	lsls	r2, r2, #27
 80028d8:	430a      	orrs	r2, r1
 80028da:	492a      	ldr	r1, [pc, #168]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	610b      	str	r3, [r1, #16]
 80028e0:	e027      	b.n	8002932 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d112      	bne.n	800290e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	0211      	lsls	r1, r2, #8
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6912      	ldr	r2, [r2, #16]
 80028fe:	0852      	lsrs	r2, r2, #1
 8002900:	3a01      	subs	r2, #1
 8002902:	0552      	lsls	r2, r2, #21
 8002904:	430a      	orrs	r2, r1
 8002906:	491f      	ldr	r1, [pc, #124]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	610b      	str	r3, [r1, #16]
 800290c:	e011      	b.n	8002932 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002916:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6892      	ldr	r2, [r2, #8]
 800291e:	0211      	lsls	r1, r2, #8
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6952      	ldr	r2, [r2, #20]
 8002924:	0852      	lsrs	r2, r2, #1
 8002926:	3a01      	subs	r2, #1
 8002928:	0652      	lsls	r2, r2, #25
 800292a:	430a      	orrs	r2, r1
 800292c:	4915      	ldr	r1, [pc, #84]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002932:	4b14      	ldr	r3, [pc, #80]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800293c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fd ffa3 	bl	8000888 <HAL_GetTick>
 8002942:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002944:	e009      	b.n	800295a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002946:	f7fd ff9f 	bl	8000888 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d902      	bls.n	800295a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	73fb      	strb	r3, [r7, #15]
          break;
 8002958:	e005      	b.n	8002966 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ef      	beq.n	8002946 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000

08002988 <__errno>:
 8002988:	4b01      	ldr	r3, [pc, #4]	; (8002990 <__errno+0x8>)
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	2000000c 	.word	0x2000000c

08002994 <__libc_init_array>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	4d0d      	ldr	r5, [pc, #52]	; (80029cc <__libc_init_array+0x38>)
 8002998:	4c0d      	ldr	r4, [pc, #52]	; (80029d0 <__libc_init_array+0x3c>)
 800299a:	1b64      	subs	r4, r4, r5
 800299c:	10a4      	asrs	r4, r4, #2
 800299e:	2600      	movs	r6, #0
 80029a0:	42a6      	cmp	r6, r4
 80029a2:	d109      	bne.n	80029b8 <__libc_init_array+0x24>
 80029a4:	4d0b      	ldr	r5, [pc, #44]	; (80029d4 <__libc_init_array+0x40>)
 80029a6:	4c0c      	ldr	r4, [pc, #48]	; (80029d8 <__libc_init_array+0x44>)
 80029a8:	f000 fc8e 	bl	80032c8 <_init>
 80029ac:	1b64      	subs	r4, r4, r5
 80029ae:	10a4      	asrs	r4, r4, #2
 80029b0:	2600      	movs	r6, #0
 80029b2:	42a6      	cmp	r6, r4
 80029b4:	d105      	bne.n	80029c2 <__libc_init_array+0x2e>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029bc:	4798      	blx	r3
 80029be:	3601      	adds	r6, #1
 80029c0:	e7ee      	b.n	80029a0 <__libc_init_array+0xc>
 80029c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c6:	4798      	blx	r3
 80029c8:	3601      	adds	r6, #1
 80029ca:	e7f2      	b.n	80029b2 <__libc_init_array+0x1e>
 80029cc:	08003378 	.word	0x08003378
 80029d0:	08003378 	.word	0x08003378
 80029d4:	08003378 	.word	0x08003378
 80029d8:	0800337c 	.word	0x0800337c

080029dc <memset>:
 80029dc:	4402      	add	r2, r0
 80029de:	4603      	mov	r3, r0
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d100      	bne.n	80029e6 <memset+0xa>
 80029e4:	4770      	bx	lr
 80029e6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ea:	e7f9      	b.n	80029e0 <memset+0x4>

080029ec <siprintf>:
 80029ec:	b40e      	push	{r1, r2, r3}
 80029ee:	b500      	push	{lr}
 80029f0:	b09c      	sub	sp, #112	; 0x70
 80029f2:	ab1d      	add	r3, sp, #116	; 0x74
 80029f4:	9002      	str	r0, [sp, #8]
 80029f6:	9006      	str	r0, [sp, #24]
 80029f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029fc:	4809      	ldr	r0, [pc, #36]	; (8002a24 <siprintf+0x38>)
 80029fe:	9107      	str	r1, [sp, #28]
 8002a00:	9104      	str	r1, [sp, #16]
 8002a02:	4909      	ldr	r1, [pc, #36]	; (8002a28 <siprintf+0x3c>)
 8002a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a08:	9105      	str	r1, [sp, #20]
 8002a0a:	6800      	ldr	r0, [r0, #0]
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	a902      	add	r1, sp, #8
 8002a10:	f000 f868 	bl	8002ae4 <_svfiprintf_r>
 8002a14:	9b02      	ldr	r3, [sp, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	b01c      	add	sp, #112	; 0x70
 8002a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a20:	b003      	add	sp, #12
 8002a22:	4770      	bx	lr
 8002a24:	2000000c 	.word	0x2000000c
 8002a28:	ffff0208 	.word	0xffff0208

08002a2c <__ssputs_r>:
 8002a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a30:	688e      	ldr	r6, [r1, #8]
 8002a32:	429e      	cmp	r6, r3
 8002a34:	4682      	mov	sl, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	4690      	mov	r8, r2
 8002a3a:	461f      	mov	r7, r3
 8002a3c:	d838      	bhi.n	8002ab0 <__ssputs_r+0x84>
 8002a3e:	898a      	ldrh	r2, [r1, #12]
 8002a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a44:	d032      	beq.n	8002aac <__ssputs_r+0x80>
 8002a46:	6825      	ldr	r5, [r4, #0]
 8002a48:	6909      	ldr	r1, [r1, #16]
 8002a4a:	eba5 0901 	sub.w	r9, r5, r1
 8002a4e:	6965      	ldr	r5, [r4, #20]
 8002a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a58:	3301      	adds	r3, #1
 8002a5a:	444b      	add	r3, r9
 8002a5c:	106d      	asrs	r5, r5, #1
 8002a5e:	429d      	cmp	r5, r3
 8002a60:	bf38      	it	cc
 8002a62:	461d      	movcc	r5, r3
 8002a64:	0553      	lsls	r3, r2, #21
 8002a66:	d531      	bpl.n	8002acc <__ssputs_r+0xa0>
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f000 fb63 	bl	8003134 <_malloc_r>
 8002a6e:	4606      	mov	r6, r0
 8002a70:	b950      	cbnz	r0, 8002a88 <__ssputs_r+0x5c>
 8002a72:	230c      	movs	r3, #12
 8002a74:	f8ca 3000 	str.w	r3, [sl]
 8002a78:	89a3      	ldrh	r3, [r4, #12]
 8002a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a7e:	81a3      	strh	r3, [r4, #12]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a88:	6921      	ldr	r1, [r4, #16]
 8002a8a:	464a      	mov	r2, r9
 8002a8c:	f000 fabe 	bl	800300c <memcpy>
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	81a3      	strh	r3, [r4, #12]
 8002a9c:	6126      	str	r6, [r4, #16]
 8002a9e:	6165      	str	r5, [r4, #20]
 8002aa0:	444e      	add	r6, r9
 8002aa2:	eba5 0509 	sub.w	r5, r5, r9
 8002aa6:	6026      	str	r6, [r4, #0]
 8002aa8:	60a5      	str	r5, [r4, #8]
 8002aaa:	463e      	mov	r6, r7
 8002aac:	42be      	cmp	r6, r7
 8002aae:	d900      	bls.n	8002ab2 <__ssputs_r+0x86>
 8002ab0:	463e      	mov	r6, r7
 8002ab2:	6820      	ldr	r0, [r4, #0]
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	f000 fab6 	bl	8003028 <memmove>
 8002abc:	68a3      	ldr	r3, [r4, #8]
 8002abe:	1b9b      	subs	r3, r3, r6
 8002ac0:	60a3      	str	r3, [r4, #8]
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	4433      	add	r3, r6
 8002ac6:	6023      	str	r3, [r4, #0]
 8002ac8:	2000      	movs	r0, #0
 8002aca:	e7db      	b.n	8002a84 <__ssputs_r+0x58>
 8002acc:	462a      	mov	r2, r5
 8002ace:	f000 fba5 	bl	800321c <_realloc_r>
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	d1e1      	bne.n	8002a9c <__ssputs_r+0x70>
 8002ad8:	6921      	ldr	r1, [r4, #16]
 8002ada:	4650      	mov	r0, sl
 8002adc:	f000 fabe 	bl	800305c <_free_r>
 8002ae0:	e7c7      	b.n	8002a72 <__ssputs_r+0x46>
	...

08002ae4 <_svfiprintf_r>:
 8002ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae8:	4698      	mov	r8, r3
 8002aea:	898b      	ldrh	r3, [r1, #12]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	b09d      	sub	sp, #116	; 0x74
 8002af0:	4607      	mov	r7, r0
 8002af2:	460d      	mov	r5, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	d50e      	bpl.n	8002b16 <_svfiprintf_r+0x32>
 8002af8:	690b      	ldr	r3, [r1, #16]
 8002afa:	b963      	cbnz	r3, 8002b16 <_svfiprintf_r+0x32>
 8002afc:	2140      	movs	r1, #64	; 0x40
 8002afe:	f000 fb19 	bl	8003134 <_malloc_r>
 8002b02:	6028      	str	r0, [r5, #0]
 8002b04:	6128      	str	r0, [r5, #16]
 8002b06:	b920      	cbnz	r0, 8002b12 <_svfiprintf_r+0x2e>
 8002b08:	230c      	movs	r3, #12
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	e0d1      	b.n	8002cb6 <_svfiprintf_r+0x1d2>
 8002b12:	2340      	movs	r3, #64	; 0x40
 8002b14:	616b      	str	r3, [r5, #20]
 8002b16:	2300      	movs	r3, #0
 8002b18:	9309      	str	r3, [sp, #36]	; 0x24
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b24:	2330      	movs	r3, #48	; 0x30
 8002b26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002cd0 <_svfiprintf_r+0x1ec>
 8002b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b2e:	f04f 0901 	mov.w	r9, #1
 8002b32:	4623      	mov	r3, r4
 8002b34:	469a      	mov	sl, r3
 8002b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b3a:	b10a      	cbz	r2, 8002b40 <_svfiprintf_r+0x5c>
 8002b3c:	2a25      	cmp	r2, #37	; 0x25
 8002b3e:	d1f9      	bne.n	8002b34 <_svfiprintf_r+0x50>
 8002b40:	ebba 0b04 	subs.w	fp, sl, r4
 8002b44:	d00b      	beq.n	8002b5e <_svfiprintf_r+0x7a>
 8002b46:	465b      	mov	r3, fp
 8002b48:	4622      	mov	r2, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	4638      	mov	r0, r7
 8002b4e:	f7ff ff6d 	bl	8002a2c <__ssputs_r>
 8002b52:	3001      	adds	r0, #1
 8002b54:	f000 80aa 	beq.w	8002cac <_svfiprintf_r+0x1c8>
 8002b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b5a:	445a      	add	r2, fp
 8002b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8002b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80a2 	beq.w	8002cac <_svfiprintf_r+0x1c8>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b72:	f10a 0a01 	add.w	sl, sl, #1
 8002b76:	9304      	str	r3, [sp, #16]
 8002b78:	9307      	str	r3, [sp, #28]
 8002b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8002b80:	4654      	mov	r4, sl
 8002b82:	2205      	movs	r2, #5
 8002b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b88:	4851      	ldr	r0, [pc, #324]	; (8002cd0 <_svfiprintf_r+0x1ec>)
 8002b8a:	f7fd fb21 	bl	80001d0 <memchr>
 8002b8e:	9a04      	ldr	r2, [sp, #16]
 8002b90:	b9d8      	cbnz	r0, 8002bca <_svfiprintf_r+0xe6>
 8002b92:	06d0      	lsls	r0, r2, #27
 8002b94:	bf44      	itt	mi
 8002b96:	2320      	movmi	r3, #32
 8002b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b9c:	0711      	lsls	r1, r2, #28
 8002b9e:	bf44      	itt	mi
 8002ba0:	232b      	movmi	r3, #43	; 0x2b
 8002ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8002baa:	2b2a      	cmp	r3, #42	; 0x2a
 8002bac:	d015      	beq.n	8002bda <_svfiprintf_r+0xf6>
 8002bae:	9a07      	ldr	r2, [sp, #28]
 8002bb0:	4654      	mov	r4, sl
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f04f 0c0a 	mov.w	ip, #10
 8002bb8:	4621      	mov	r1, r4
 8002bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bbe:	3b30      	subs	r3, #48	; 0x30
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	d94e      	bls.n	8002c62 <_svfiprintf_r+0x17e>
 8002bc4:	b1b0      	cbz	r0, 8002bf4 <_svfiprintf_r+0x110>
 8002bc6:	9207      	str	r2, [sp, #28]
 8002bc8:	e014      	b.n	8002bf4 <_svfiprintf_r+0x110>
 8002bca:	eba0 0308 	sub.w	r3, r0, r8
 8002bce:	fa09 f303 	lsl.w	r3, r9, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	9304      	str	r3, [sp, #16]
 8002bd6:	46a2      	mov	sl, r4
 8002bd8:	e7d2      	b.n	8002b80 <_svfiprintf_r+0x9c>
 8002bda:	9b03      	ldr	r3, [sp, #12]
 8002bdc:	1d19      	adds	r1, r3, #4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	9103      	str	r1, [sp, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bfbb      	ittet	lt
 8002be6:	425b      	neglt	r3, r3
 8002be8:	f042 0202 	orrlt.w	r2, r2, #2
 8002bec:	9307      	strge	r3, [sp, #28]
 8002bee:	9307      	strlt	r3, [sp, #28]
 8002bf0:	bfb8      	it	lt
 8002bf2:	9204      	strlt	r2, [sp, #16]
 8002bf4:	7823      	ldrb	r3, [r4, #0]
 8002bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8002bf8:	d10c      	bne.n	8002c14 <_svfiprintf_r+0x130>
 8002bfa:	7863      	ldrb	r3, [r4, #1]
 8002bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bfe:	d135      	bne.n	8002c6c <_svfiprintf_r+0x188>
 8002c00:	9b03      	ldr	r3, [sp, #12]
 8002c02:	1d1a      	adds	r2, r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	9203      	str	r2, [sp, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bfb8      	it	lt
 8002c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c10:	3402      	adds	r4, #2
 8002c12:	9305      	str	r3, [sp, #20]
 8002c14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002ce0 <_svfiprintf_r+0x1fc>
 8002c18:	7821      	ldrb	r1, [r4, #0]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4650      	mov	r0, sl
 8002c1e:	f7fd fad7 	bl	80001d0 <memchr>
 8002c22:	b140      	cbz	r0, 8002c36 <_svfiprintf_r+0x152>
 8002c24:	2340      	movs	r3, #64	; 0x40
 8002c26:	eba0 000a 	sub.w	r0, r0, sl
 8002c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c2e:	9b04      	ldr	r3, [sp, #16]
 8002c30:	4303      	orrs	r3, r0
 8002c32:	3401      	adds	r4, #1
 8002c34:	9304      	str	r3, [sp, #16]
 8002c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c3a:	4826      	ldr	r0, [pc, #152]	; (8002cd4 <_svfiprintf_r+0x1f0>)
 8002c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c40:	2206      	movs	r2, #6
 8002c42:	f7fd fac5 	bl	80001d0 <memchr>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d038      	beq.n	8002cbc <_svfiprintf_r+0x1d8>
 8002c4a:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <_svfiprintf_r+0x1f4>)
 8002c4c:	bb1b      	cbnz	r3, 8002c96 <_svfiprintf_r+0x1b2>
 8002c4e:	9b03      	ldr	r3, [sp, #12]
 8002c50:	3307      	adds	r3, #7
 8002c52:	f023 0307 	bic.w	r3, r3, #7
 8002c56:	3308      	adds	r3, #8
 8002c58:	9303      	str	r3, [sp, #12]
 8002c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c5c:	4433      	add	r3, r6
 8002c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c60:	e767      	b.n	8002b32 <_svfiprintf_r+0x4e>
 8002c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c66:	460c      	mov	r4, r1
 8002c68:	2001      	movs	r0, #1
 8002c6a:	e7a5      	b.n	8002bb8 <_svfiprintf_r+0xd4>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	3401      	adds	r4, #1
 8002c70:	9305      	str	r3, [sp, #20]
 8002c72:	4619      	mov	r1, r3
 8002c74:	f04f 0c0a 	mov.w	ip, #10
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c7e:	3a30      	subs	r2, #48	; 0x30
 8002c80:	2a09      	cmp	r2, #9
 8002c82:	d903      	bls.n	8002c8c <_svfiprintf_r+0x1a8>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0c5      	beq.n	8002c14 <_svfiprintf_r+0x130>
 8002c88:	9105      	str	r1, [sp, #20]
 8002c8a:	e7c3      	b.n	8002c14 <_svfiprintf_r+0x130>
 8002c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c90:	4604      	mov	r4, r0
 8002c92:	2301      	movs	r3, #1
 8002c94:	e7f0      	b.n	8002c78 <_svfiprintf_r+0x194>
 8002c96:	ab03      	add	r3, sp, #12
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	462a      	mov	r2, r5
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <_svfiprintf_r+0x1f8>)
 8002c9e:	a904      	add	r1, sp, #16
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f3af 8000 	nop.w
 8002ca6:	1c42      	adds	r2, r0, #1
 8002ca8:	4606      	mov	r6, r0
 8002caa:	d1d6      	bne.n	8002c5a <_svfiprintf_r+0x176>
 8002cac:	89ab      	ldrh	r3, [r5, #12]
 8002cae:	065b      	lsls	r3, r3, #25
 8002cb0:	f53f af2c 	bmi.w	8002b0c <_svfiprintf_r+0x28>
 8002cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cb6:	b01d      	add	sp, #116	; 0x74
 8002cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbc:	ab03      	add	r3, sp, #12
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	462a      	mov	r2, r5
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <_svfiprintf_r+0x1f8>)
 8002cc4:	a904      	add	r1, sp, #16
 8002cc6:	4638      	mov	r0, r7
 8002cc8:	f000 f87a 	bl	8002dc0 <_printf_i>
 8002ccc:	e7eb      	b.n	8002ca6 <_svfiprintf_r+0x1c2>
 8002cce:	bf00      	nop
 8002cd0:	08003344 	.word	0x08003344
 8002cd4:	0800334e 	.word	0x0800334e
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	08002a2d 	.word	0x08002a2d
 8002ce0:	0800334a 	.word	0x0800334a

08002ce4 <_printf_common>:
 8002ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce8:	4616      	mov	r6, r2
 8002cea:	4699      	mov	r9, r3
 8002cec:	688a      	ldr	r2, [r1, #8]
 8002cee:	690b      	ldr	r3, [r1, #16]
 8002cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	bfb8      	it	lt
 8002cf8:	4613      	movlt	r3, r2
 8002cfa:	6033      	str	r3, [r6, #0]
 8002cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d00:	4607      	mov	r7, r0
 8002d02:	460c      	mov	r4, r1
 8002d04:	b10a      	cbz	r2, 8002d0a <_printf_common+0x26>
 8002d06:	3301      	adds	r3, #1
 8002d08:	6033      	str	r3, [r6, #0]
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	0699      	lsls	r1, r3, #26
 8002d0e:	bf42      	ittt	mi
 8002d10:	6833      	ldrmi	r3, [r6, #0]
 8002d12:	3302      	addmi	r3, #2
 8002d14:	6033      	strmi	r3, [r6, #0]
 8002d16:	6825      	ldr	r5, [r4, #0]
 8002d18:	f015 0506 	ands.w	r5, r5, #6
 8002d1c:	d106      	bne.n	8002d2c <_printf_common+0x48>
 8002d1e:	f104 0a19 	add.w	sl, r4, #25
 8002d22:	68e3      	ldr	r3, [r4, #12]
 8002d24:	6832      	ldr	r2, [r6, #0]
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	42ab      	cmp	r3, r5
 8002d2a:	dc26      	bgt.n	8002d7a <_printf_common+0x96>
 8002d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d30:	1e13      	subs	r3, r2, #0
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	bf18      	it	ne
 8002d36:	2301      	movne	r3, #1
 8002d38:	0692      	lsls	r2, r2, #26
 8002d3a:	d42b      	bmi.n	8002d94 <_printf_common+0xb0>
 8002d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d40:	4649      	mov	r1, r9
 8002d42:	4638      	mov	r0, r7
 8002d44:	47c0      	blx	r8
 8002d46:	3001      	adds	r0, #1
 8002d48:	d01e      	beq.n	8002d88 <_printf_common+0xa4>
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	68e5      	ldr	r5, [r4, #12]
 8002d4e:	6832      	ldr	r2, [r6, #0]
 8002d50:	f003 0306 	and.w	r3, r3, #6
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	bf08      	it	eq
 8002d58:	1aad      	subeq	r5, r5, r2
 8002d5a:	68a3      	ldr	r3, [r4, #8]
 8002d5c:	6922      	ldr	r2, [r4, #16]
 8002d5e:	bf0c      	ite	eq
 8002d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d64:	2500      	movne	r5, #0
 8002d66:	4293      	cmp	r3, r2
 8002d68:	bfc4      	itt	gt
 8002d6a:	1a9b      	subgt	r3, r3, r2
 8002d6c:	18ed      	addgt	r5, r5, r3
 8002d6e:	2600      	movs	r6, #0
 8002d70:	341a      	adds	r4, #26
 8002d72:	42b5      	cmp	r5, r6
 8002d74:	d11a      	bne.n	8002dac <_printf_common+0xc8>
 8002d76:	2000      	movs	r0, #0
 8002d78:	e008      	b.n	8002d8c <_printf_common+0xa8>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4652      	mov	r2, sl
 8002d7e:	4649      	mov	r1, r9
 8002d80:	4638      	mov	r0, r7
 8002d82:	47c0      	blx	r8
 8002d84:	3001      	adds	r0, #1
 8002d86:	d103      	bne.n	8002d90 <_printf_common+0xac>
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d90:	3501      	adds	r5, #1
 8002d92:	e7c6      	b.n	8002d22 <_printf_common+0x3e>
 8002d94:	18e1      	adds	r1, r4, r3
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	2030      	movs	r0, #48	; 0x30
 8002d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d9e:	4422      	add	r2, r4
 8002da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002da8:	3302      	adds	r3, #2
 8002daa:	e7c7      	b.n	8002d3c <_printf_common+0x58>
 8002dac:	2301      	movs	r3, #1
 8002dae:	4622      	mov	r2, r4
 8002db0:	4649      	mov	r1, r9
 8002db2:	4638      	mov	r0, r7
 8002db4:	47c0      	blx	r8
 8002db6:	3001      	adds	r0, #1
 8002db8:	d0e6      	beq.n	8002d88 <_printf_common+0xa4>
 8002dba:	3601      	adds	r6, #1
 8002dbc:	e7d9      	b.n	8002d72 <_printf_common+0x8e>
	...

08002dc0 <_printf_i>:
 8002dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc4:	7e0f      	ldrb	r7, [r1, #24]
 8002dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002dc8:	2f78      	cmp	r7, #120	; 0x78
 8002dca:	4691      	mov	r9, r2
 8002dcc:	4680      	mov	r8, r0
 8002dce:	460c      	mov	r4, r1
 8002dd0:	469a      	mov	sl, r3
 8002dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002dd6:	d807      	bhi.n	8002de8 <_printf_i+0x28>
 8002dd8:	2f62      	cmp	r7, #98	; 0x62
 8002dda:	d80a      	bhi.n	8002df2 <_printf_i+0x32>
 8002ddc:	2f00      	cmp	r7, #0
 8002dde:	f000 80d8 	beq.w	8002f92 <_printf_i+0x1d2>
 8002de2:	2f58      	cmp	r7, #88	; 0x58
 8002de4:	f000 80a3 	beq.w	8002f2e <_printf_i+0x16e>
 8002de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002df0:	e03a      	b.n	8002e68 <_printf_i+0xa8>
 8002df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002df6:	2b15      	cmp	r3, #21
 8002df8:	d8f6      	bhi.n	8002de8 <_printf_i+0x28>
 8002dfa:	a101      	add	r1, pc, #4	; (adr r1, 8002e00 <_printf_i+0x40>)
 8002dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e00:	08002e59 	.word	0x08002e59
 8002e04:	08002e6d 	.word	0x08002e6d
 8002e08:	08002de9 	.word	0x08002de9
 8002e0c:	08002de9 	.word	0x08002de9
 8002e10:	08002de9 	.word	0x08002de9
 8002e14:	08002de9 	.word	0x08002de9
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08002de9 	.word	0x08002de9
 8002e20:	08002de9 	.word	0x08002de9
 8002e24:	08002de9 	.word	0x08002de9
 8002e28:	08002de9 	.word	0x08002de9
 8002e2c:	08002f79 	.word	0x08002f79
 8002e30:	08002e9d 	.word	0x08002e9d
 8002e34:	08002f5b 	.word	0x08002f5b
 8002e38:	08002de9 	.word	0x08002de9
 8002e3c:	08002de9 	.word	0x08002de9
 8002e40:	08002f9b 	.word	0x08002f9b
 8002e44:	08002de9 	.word	0x08002de9
 8002e48:	08002e9d 	.word	0x08002e9d
 8002e4c:	08002de9 	.word	0x08002de9
 8002e50:	08002de9 	.word	0x08002de9
 8002e54:	08002f63 	.word	0x08002f63
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	1d1a      	adds	r2, r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	602a      	str	r2, [r5, #0]
 8002e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0a3      	b.n	8002fb4 <_printf_i+0x1f4>
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	6829      	ldr	r1, [r5, #0]
 8002e70:	0606      	lsls	r6, r0, #24
 8002e72:	f101 0304 	add.w	r3, r1, #4
 8002e76:	d50a      	bpl.n	8002e8e <_printf_i+0xce>
 8002e78:	680e      	ldr	r6, [r1, #0]
 8002e7a:	602b      	str	r3, [r5, #0]
 8002e7c:	2e00      	cmp	r6, #0
 8002e7e:	da03      	bge.n	8002e88 <_printf_i+0xc8>
 8002e80:	232d      	movs	r3, #45	; 0x2d
 8002e82:	4276      	negs	r6, r6
 8002e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e88:	485e      	ldr	r0, [pc, #376]	; (8003004 <_printf_i+0x244>)
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	e019      	b.n	8002ec2 <_printf_i+0x102>
 8002e8e:	680e      	ldr	r6, [r1, #0]
 8002e90:	602b      	str	r3, [r5, #0]
 8002e92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e96:	bf18      	it	ne
 8002e98:	b236      	sxthne	r6, r6
 8002e9a:	e7ef      	b.n	8002e7c <_printf_i+0xbc>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	6820      	ldr	r0, [r4, #0]
 8002ea0:	1d19      	adds	r1, r3, #4
 8002ea2:	6029      	str	r1, [r5, #0]
 8002ea4:	0601      	lsls	r1, r0, #24
 8002ea6:	d501      	bpl.n	8002eac <_printf_i+0xec>
 8002ea8:	681e      	ldr	r6, [r3, #0]
 8002eaa:	e002      	b.n	8002eb2 <_printf_i+0xf2>
 8002eac:	0646      	lsls	r6, r0, #25
 8002eae:	d5fb      	bpl.n	8002ea8 <_printf_i+0xe8>
 8002eb0:	881e      	ldrh	r6, [r3, #0]
 8002eb2:	4854      	ldr	r0, [pc, #336]	; (8003004 <_printf_i+0x244>)
 8002eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2308      	moveq	r3, #8
 8002eba:	230a      	movne	r3, #10
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ec2:	6865      	ldr	r5, [r4, #4]
 8002ec4:	60a5      	str	r5, [r4, #8]
 8002ec6:	2d00      	cmp	r5, #0
 8002ec8:	bfa2      	ittt	ge
 8002eca:	6821      	ldrge	r1, [r4, #0]
 8002ecc:	f021 0104 	bicge.w	r1, r1, #4
 8002ed0:	6021      	strge	r1, [r4, #0]
 8002ed2:	b90e      	cbnz	r6, 8002ed8 <_printf_i+0x118>
 8002ed4:	2d00      	cmp	r5, #0
 8002ed6:	d04d      	beq.n	8002f74 <_printf_i+0x1b4>
 8002ed8:	4615      	mov	r5, r2
 8002eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ede:	fb03 6711 	mls	r7, r3, r1, r6
 8002ee2:	5dc7      	ldrb	r7, [r0, r7]
 8002ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002ee8:	4637      	mov	r7, r6
 8002eea:	42bb      	cmp	r3, r7
 8002eec:	460e      	mov	r6, r1
 8002eee:	d9f4      	bls.n	8002eda <_printf_i+0x11a>
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d10b      	bne.n	8002f0c <_printf_i+0x14c>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	07de      	lsls	r6, r3, #31
 8002ef8:	d508      	bpl.n	8002f0c <_printf_i+0x14c>
 8002efa:	6923      	ldr	r3, [r4, #16]
 8002efc:	6861      	ldr	r1, [r4, #4]
 8002efe:	4299      	cmp	r1, r3
 8002f00:	bfde      	ittt	le
 8002f02:	2330      	movle	r3, #48	; 0x30
 8002f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f0c:	1b52      	subs	r2, r2, r5
 8002f0e:	6122      	str	r2, [r4, #16]
 8002f10:	f8cd a000 	str.w	sl, [sp]
 8002f14:	464b      	mov	r3, r9
 8002f16:	aa03      	add	r2, sp, #12
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	f7ff fee2 	bl	8002ce4 <_printf_common>
 8002f20:	3001      	adds	r0, #1
 8002f22:	d14c      	bne.n	8002fbe <_printf_i+0x1fe>
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	b004      	add	sp, #16
 8002f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f2e:	4835      	ldr	r0, [pc, #212]	; (8003004 <_printf_i+0x244>)
 8002f30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f34:	6829      	ldr	r1, [r5, #0]
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f3c:	6029      	str	r1, [r5, #0]
 8002f3e:	061d      	lsls	r5, r3, #24
 8002f40:	d514      	bpl.n	8002f6c <_printf_i+0x1ac>
 8002f42:	07df      	lsls	r7, r3, #31
 8002f44:	bf44      	itt	mi
 8002f46:	f043 0320 	orrmi.w	r3, r3, #32
 8002f4a:	6023      	strmi	r3, [r4, #0]
 8002f4c:	b91e      	cbnz	r6, 8002f56 <_printf_i+0x196>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	f023 0320 	bic.w	r3, r3, #32
 8002f54:	6023      	str	r3, [r4, #0]
 8002f56:	2310      	movs	r3, #16
 8002f58:	e7b0      	b.n	8002ebc <_printf_i+0xfc>
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	f043 0320 	orr.w	r3, r3, #32
 8002f60:	6023      	str	r3, [r4, #0]
 8002f62:	2378      	movs	r3, #120	; 0x78
 8002f64:	4828      	ldr	r0, [pc, #160]	; (8003008 <_printf_i+0x248>)
 8002f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f6a:	e7e3      	b.n	8002f34 <_printf_i+0x174>
 8002f6c:	0659      	lsls	r1, r3, #25
 8002f6e:	bf48      	it	mi
 8002f70:	b2b6      	uxthmi	r6, r6
 8002f72:	e7e6      	b.n	8002f42 <_printf_i+0x182>
 8002f74:	4615      	mov	r5, r2
 8002f76:	e7bb      	b.n	8002ef0 <_printf_i+0x130>
 8002f78:	682b      	ldr	r3, [r5, #0]
 8002f7a:	6826      	ldr	r6, [r4, #0]
 8002f7c:	6961      	ldr	r1, [r4, #20]
 8002f7e:	1d18      	adds	r0, r3, #4
 8002f80:	6028      	str	r0, [r5, #0]
 8002f82:	0635      	lsls	r5, r6, #24
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	d501      	bpl.n	8002f8c <_printf_i+0x1cc>
 8002f88:	6019      	str	r1, [r3, #0]
 8002f8a:	e002      	b.n	8002f92 <_printf_i+0x1d2>
 8002f8c:	0670      	lsls	r0, r6, #25
 8002f8e:	d5fb      	bpl.n	8002f88 <_printf_i+0x1c8>
 8002f90:	8019      	strh	r1, [r3, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	6123      	str	r3, [r4, #16]
 8002f96:	4615      	mov	r5, r2
 8002f98:	e7ba      	b.n	8002f10 <_printf_i+0x150>
 8002f9a:	682b      	ldr	r3, [r5, #0]
 8002f9c:	1d1a      	adds	r2, r3, #4
 8002f9e:	602a      	str	r2, [r5, #0]
 8002fa0:	681d      	ldr	r5, [r3, #0]
 8002fa2:	6862      	ldr	r2, [r4, #4]
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	f7fd f912 	bl	80001d0 <memchr>
 8002fac:	b108      	cbz	r0, 8002fb2 <_printf_i+0x1f2>
 8002fae:	1b40      	subs	r0, r0, r5
 8002fb0:	6060      	str	r0, [r4, #4]
 8002fb2:	6863      	ldr	r3, [r4, #4]
 8002fb4:	6123      	str	r3, [r4, #16]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fbc:	e7a8      	b.n	8002f10 <_printf_i+0x150>
 8002fbe:	6923      	ldr	r3, [r4, #16]
 8002fc0:	462a      	mov	r2, r5
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	4640      	mov	r0, r8
 8002fc6:	47d0      	blx	sl
 8002fc8:	3001      	adds	r0, #1
 8002fca:	d0ab      	beq.n	8002f24 <_printf_i+0x164>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	079b      	lsls	r3, r3, #30
 8002fd0:	d413      	bmi.n	8002ffa <_printf_i+0x23a>
 8002fd2:	68e0      	ldr	r0, [r4, #12]
 8002fd4:	9b03      	ldr	r3, [sp, #12]
 8002fd6:	4298      	cmp	r0, r3
 8002fd8:	bfb8      	it	lt
 8002fda:	4618      	movlt	r0, r3
 8002fdc:	e7a4      	b.n	8002f28 <_printf_i+0x168>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4632      	mov	r2, r6
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	4640      	mov	r0, r8
 8002fe6:	47d0      	blx	sl
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d09b      	beq.n	8002f24 <_printf_i+0x164>
 8002fec:	3501      	adds	r5, #1
 8002fee:	68e3      	ldr	r3, [r4, #12]
 8002ff0:	9903      	ldr	r1, [sp, #12]
 8002ff2:	1a5b      	subs	r3, r3, r1
 8002ff4:	42ab      	cmp	r3, r5
 8002ff6:	dcf2      	bgt.n	8002fde <_printf_i+0x21e>
 8002ff8:	e7eb      	b.n	8002fd2 <_printf_i+0x212>
 8002ffa:	2500      	movs	r5, #0
 8002ffc:	f104 0619 	add.w	r6, r4, #25
 8003000:	e7f5      	b.n	8002fee <_printf_i+0x22e>
 8003002:	bf00      	nop
 8003004:	08003355 	.word	0x08003355
 8003008:	08003366 	.word	0x08003366

0800300c <memcpy>:
 800300c:	440a      	add	r2, r1
 800300e:	4291      	cmp	r1, r2
 8003010:	f100 33ff 	add.w	r3, r0, #4294967295
 8003014:	d100      	bne.n	8003018 <memcpy+0xc>
 8003016:	4770      	bx	lr
 8003018:	b510      	push	{r4, lr}
 800301a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800301e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003022:	4291      	cmp	r1, r2
 8003024:	d1f9      	bne.n	800301a <memcpy+0xe>
 8003026:	bd10      	pop	{r4, pc}

08003028 <memmove>:
 8003028:	4288      	cmp	r0, r1
 800302a:	b510      	push	{r4, lr}
 800302c:	eb01 0402 	add.w	r4, r1, r2
 8003030:	d902      	bls.n	8003038 <memmove+0x10>
 8003032:	4284      	cmp	r4, r0
 8003034:	4623      	mov	r3, r4
 8003036:	d807      	bhi.n	8003048 <memmove+0x20>
 8003038:	1e43      	subs	r3, r0, #1
 800303a:	42a1      	cmp	r1, r4
 800303c:	d008      	beq.n	8003050 <memmove+0x28>
 800303e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003046:	e7f8      	b.n	800303a <memmove+0x12>
 8003048:	4402      	add	r2, r0
 800304a:	4601      	mov	r1, r0
 800304c:	428a      	cmp	r2, r1
 800304e:	d100      	bne.n	8003052 <memmove+0x2a>
 8003050:	bd10      	pop	{r4, pc}
 8003052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800305a:	e7f7      	b.n	800304c <memmove+0x24>

0800305c <_free_r>:
 800305c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800305e:	2900      	cmp	r1, #0
 8003060:	d044      	beq.n	80030ec <_free_r+0x90>
 8003062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003066:	9001      	str	r0, [sp, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f1a1 0404 	sub.w	r4, r1, #4
 800306e:	bfb8      	it	lt
 8003070:	18e4      	addlt	r4, r4, r3
 8003072:	f000 f913 	bl	800329c <__malloc_lock>
 8003076:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <_free_r+0x94>)
 8003078:	9801      	ldr	r0, [sp, #4]
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	b933      	cbnz	r3, 800308c <_free_r+0x30>
 800307e:	6063      	str	r3, [r4, #4]
 8003080:	6014      	str	r4, [r2, #0]
 8003082:	b003      	add	sp, #12
 8003084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003088:	f000 b90e 	b.w	80032a8 <__malloc_unlock>
 800308c:	42a3      	cmp	r3, r4
 800308e:	d908      	bls.n	80030a2 <_free_r+0x46>
 8003090:	6825      	ldr	r5, [r4, #0]
 8003092:	1961      	adds	r1, r4, r5
 8003094:	428b      	cmp	r3, r1
 8003096:	bf01      	itttt	eq
 8003098:	6819      	ldreq	r1, [r3, #0]
 800309a:	685b      	ldreq	r3, [r3, #4]
 800309c:	1949      	addeq	r1, r1, r5
 800309e:	6021      	streq	r1, [r4, #0]
 80030a0:	e7ed      	b.n	800307e <_free_r+0x22>
 80030a2:	461a      	mov	r2, r3
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b10b      	cbz	r3, 80030ac <_free_r+0x50>
 80030a8:	42a3      	cmp	r3, r4
 80030aa:	d9fa      	bls.n	80030a2 <_free_r+0x46>
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	1855      	adds	r5, r2, r1
 80030b0:	42a5      	cmp	r5, r4
 80030b2:	d10b      	bne.n	80030cc <_free_r+0x70>
 80030b4:	6824      	ldr	r4, [r4, #0]
 80030b6:	4421      	add	r1, r4
 80030b8:	1854      	adds	r4, r2, r1
 80030ba:	42a3      	cmp	r3, r4
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	d1e0      	bne.n	8003082 <_free_r+0x26>
 80030c0:	681c      	ldr	r4, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	6053      	str	r3, [r2, #4]
 80030c6:	4421      	add	r1, r4
 80030c8:	6011      	str	r1, [r2, #0]
 80030ca:	e7da      	b.n	8003082 <_free_r+0x26>
 80030cc:	d902      	bls.n	80030d4 <_free_r+0x78>
 80030ce:	230c      	movs	r3, #12
 80030d0:	6003      	str	r3, [r0, #0]
 80030d2:	e7d6      	b.n	8003082 <_free_r+0x26>
 80030d4:	6825      	ldr	r5, [r4, #0]
 80030d6:	1961      	adds	r1, r4, r5
 80030d8:	428b      	cmp	r3, r1
 80030da:	bf04      	itt	eq
 80030dc:	6819      	ldreq	r1, [r3, #0]
 80030de:	685b      	ldreq	r3, [r3, #4]
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	bf04      	itt	eq
 80030e4:	1949      	addeq	r1, r1, r5
 80030e6:	6021      	streq	r1, [r4, #0]
 80030e8:	6054      	str	r4, [r2, #4]
 80030ea:	e7ca      	b.n	8003082 <_free_r+0x26>
 80030ec:	b003      	add	sp, #12
 80030ee:	bd30      	pop	{r4, r5, pc}
 80030f0:	20000100 	.word	0x20000100

080030f4 <sbrk_aligned>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	4e0e      	ldr	r6, [pc, #56]	; (8003130 <sbrk_aligned+0x3c>)
 80030f8:	460c      	mov	r4, r1
 80030fa:	6831      	ldr	r1, [r6, #0]
 80030fc:	4605      	mov	r5, r0
 80030fe:	b911      	cbnz	r1, 8003106 <sbrk_aligned+0x12>
 8003100:	f000 f8bc 	bl	800327c <_sbrk_r>
 8003104:	6030      	str	r0, [r6, #0]
 8003106:	4621      	mov	r1, r4
 8003108:	4628      	mov	r0, r5
 800310a:	f000 f8b7 	bl	800327c <_sbrk_r>
 800310e:	1c43      	adds	r3, r0, #1
 8003110:	d00a      	beq.n	8003128 <sbrk_aligned+0x34>
 8003112:	1cc4      	adds	r4, r0, #3
 8003114:	f024 0403 	bic.w	r4, r4, #3
 8003118:	42a0      	cmp	r0, r4
 800311a:	d007      	beq.n	800312c <sbrk_aligned+0x38>
 800311c:	1a21      	subs	r1, r4, r0
 800311e:	4628      	mov	r0, r5
 8003120:	f000 f8ac 	bl	800327c <_sbrk_r>
 8003124:	3001      	adds	r0, #1
 8003126:	d101      	bne.n	800312c <sbrk_aligned+0x38>
 8003128:	f04f 34ff 	mov.w	r4, #4294967295
 800312c:	4620      	mov	r0, r4
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	20000104 	.word	0x20000104

08003134 <_malloc_r>:
 8003134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003138:	1ccd      	adds	r5, r1, #3
 800313a:	f025 0503 	bic.w	r5, r5, #3
 800313e:	3508      	adds	r5, #8
 8003140:	2d0c      	cmp	r5, #12
 8003142:	bf38      	it	cc
 8003144:	250c      	movcc	r5, #12
 8003146:	2d00      	cmp	r5, #0
 8003148:	4607      	mov	r7, r0
 800314a:	db01      	blt.n	8003150 <_malloc_r+0x1c>
 800314c:	42a9      	cmp	r1, r5
 800314e:	d905      	bls.n	800315c <_malloc_r+0x28>
 8003150:	230c      	movs	r3, #12
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	2600      	movs	r6, #0
 8003156:	4630      	mov	r0, r6
 8003158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800315c:	4e2e      	ldr	r6, [pc, #184]	; (8003218 <_malloc_r+0xe4>)
 800315e:	f000 f89d 	bl	800329c <__malloc_lock>
 8003162:	6833      	ldr	r3, [r6, #0]
 8003164:	461c      	mov	r4, r3
 8003166:	bb34      	cbnz	r4, 80031b6 <_malloc_r+0x82>
 8003168:	4629      	mov	r1, r5
 800316a:	4638      	mov	r0, r7
 800316c:	f7ff ffc2 	bl	80030f4 <sbrk_aligned>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	4604      	mov	r4, r0
 8003174:	d14d      	bne.n	8003212 <_malloc_r+0xde>
 8003176:	6834      	ldr	r4, [r6, #0]
 8003178:	4626      	mov	r6, r4
 800317a:	2e00      	cmp	r6, #0
 800317c:	d140      	bne.n	8003200 <_malloc_r+0xcc>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	4631      	mov	r1, r6
 8003182:	4638      	mov	r0, r7
 8003184:	eb04 0803 	add.w	r8, r4, r3
 8003188:	f000 f878 	bl	800327c <_sbrk_r>
 800318c:	4580      	cmp	r8, r0
 800318e:	d13a      	bne.n	8003206 <_malloc_r+0xd2>
 8003190:	6821      	ldr	r1, [r4, #0]
 8003192:	3503      	adds	r5, #3
 8003194:	1a6d      	subs	r5, r5, r1
 8003196:	f025 0503 	bic.w	r5, r5, #3
 800319a:	3508      	adds	r5, #8
 800319c:	2d0c      	cmp	r5, #12
 800319e:	bf38      	it	cc
 80031a0:	250c      	movcc	r5, #12
 80031a2:	4629      	mov	r1, r5
 80031a4:	4638      	mov	r0, r7
 80031a6:	f7ff ffa5 	bl	80030f4 <sbrk_aligned>
 80031aa:	3001      	adds	r0, #1
 80031ac:	d02b      	beq.n	8003206 <_malloc_r+0xd2>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	442b      	add	r3, r5
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	e00e      	b.n	80031d4 <_malloc_r+0xa0>
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	1b52      	subs	r2, r2, r5
 80031ba:	d41e      	bmi.n	80031fa <_malloc_r+0xc6>
 80031bc:	2a0b      	cmp	r2, #11
 80031be:	d916      	bls.n	80031ee <_malloc_r+0xba>
 80031c0:	1961      	adds	r1, r4, r5
 80031c2:	42a3      	cmp	r3, r4
 80031c4:	6025      	str	r5, [r4, #0]
 80031c6:	bf18      	it	ne
 80031c8:	6059      	strne	r1, [r3, #4]
 80031ca:	6863      	ldr	r3, [r4, #4]
 80031cc:	bf08      	it	eq
 80031ce:	6031      	streq	r1, [r6, #0]
 80031d0:	5162      	str	r2, [r4, r5]
 80031d2:	604b      	str	r3, [r1, #4]
 80031d4:	4638      	mov	r0, r7
 80031d6:	f104 060b 	add.w	r6, r4, #11
 80031da:	f000 f865 	bl	80032a8 <__malloc_unlock>
 80031de:	f026 0607 	bic.w	r6, r6, #7
 80031e2:	1d23      	adds	r3, r4, #4
 80031e4:	1af2      	subs	r2, r6, r3
 80031e6:	d0b6      	beq.n	8003156 <_malloc_r+0x22>
 80031e8:	1b9b      	subs	r3, r3, r6
 80031ea:	50a3      	str	r3, [r4, r2]
 80031ec:	e7b3      	b.n	8003156 <_malloc_r+0x22>
 80031ee:	6862      	ldr	r2, [r4, #4]
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	bf0c      	ite	eq
 80031f4:	6032      	streq	r2, [r6, #0]
 80031f6:	605a      	strne	r2, [r3, #4]
 80031f8:	e7ec      	b.n	80031d4 <_malloc_r+0xa0>
 80031fa:	4623      	mov	r3, r4
 80031fc:	6864      	ldr	r4, [r4, #4]
 80031fe:	e7b2      	b.n	8003166 <_malloc_r+0x32>
 8003200:	4634      	mov	r4, r6
 8003202:	6876      	ldr	r6, [r6, #4]
 8003204:	e7b9      	b.n	800317a <_malloc_r+0x46>
 8003206:	230c      	movs	r3, #12
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4638      	mov	r0, r7
 800320c:	f000 f84c 	bl	80032a8 <__malloc_unlock>
 8003210:	e7a1      	b.n	8003156 <_malloc_r+0x22>
 8003212:	6025      	str	r5, [r4, #0]
 8003214:	e7de      	b.n	80031d4 <_malloc_r+0xa0>
 8003216:	bf00      	nop
 8003218:	20000100 	.word	0x20000100

0800321c <_realloc_r>:
 800321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003220:	4680      	mov	r8, r0
 8003222:	4614      	mov	r4, r2
 8003224:	460e      	mov	r6, r1
 8003226:	b921      	cbnz	r1, 8003232 <_realloc_r+0x16>
 8003228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800322c:	4611      	mov	r1, r2
 800322e:	f7ff bf81 	b.w	8003134 <_malloc_r>
 8003232:	b92a      	cbnz	r2, 8003240 <_realloc_r+0x24>
 8003234:	f7ff ff12 	bl	800305c <_free_r>
 8003238:	4625      	mov	r5, r4
 800323a:	4628      	mov	r0, r5
 800323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003240:	f000 f838 	bl	80032b4 <_malloc_usable_size_r>
 8003244:	4284      	cmp	r4, r0
 8003246:	4607      	mov	r7, r0
 8003248:	d802      	bhi.n	8003250 <_realloc_r+0x34>
 800324a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800324e:	d812      	bhi.n	8003276 <_realloc_r+0x5a>
 8003250:	4621      	mov	r1, r4
 8003252:	4640      	mov	r0, r8
 8003254:	f7ff ff6e 	bl	8003134 <_malloc_r>
 8003258:	4605      	mov	r5, r0
 800325a:	2800      	cmp	r0, #0
 800325c:	d0ed      	beq.n	800323a <_realloc_r+0x1e>
 800325e:	42bc      	cmp	r4, r7
 8003260:	4622      	mov	r2, r4
 8003262:	4631      	mov	r1, r6
 8003264:	bf28      	it	cs
 8003266:	463a      	movcs	r2, r7
 8003268:	f7ff fed0 	bl	800300c <memcpy>
 800326c:	4631      	mov	r1, r6
 800326e:	4640      	mov	r0, r8
 8003270:	f7ff fef4 	bl	800305c <_free_r>
 8003274:	e7e1      	b.n	800323a <_realloc_r+0x1e>
 8003276:	4635      	mov	r5, r6
 8003278:	e7df      	b.n	800323a <_realloc_r+0x1e>
	...

0800327c <_sbrk_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	4d06      	ldr	r5, [pc, #24]	; (8003298 <_sbrk_r+0x1c>)
 8003280:	2300      	movs	r3, #0
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	f7fd fa24 	bl	80006d4 <_sbrk>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_sbrk_r+0x1a>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_sbrk_r+0x1a>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	20000108 	.word	0x20000108

0800329c <__malloc_lock>:
 800329c:	4801      	ldr	r0, [pc, #4]	; (80032a4 <__malloc_lock+0x8>)
 800329e:	f000 b811 	b.w	80032c4 <__retarget_lock_acquire_recursive>
 80032a2:	bf00      	nop
 80032a4:	2000010c 	.word	0x2000010c

080032a8 <__malloc_unlock>:
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <__malloc_unlock+0x8>)
 80032aa:	f000 b80c 	b.w	80032c6 <__retarget_lock_release_recursive>
 80032ae:	bf00      	nop
 80032b0:	2000010c 	.word	0x2000010c

080032b4 <_malloc_usable_size_r>:
 80032b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032b8:	1f18      	subs	r0, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bfbc      	itt	lt
 80032be:	580b      	ldrlt	r3, [r1, r0]
 80032c0:	18c0      	addlt	r0, r0, r3
 80032c2:	4770      	bx	lr

080032c4 <__retarget_lock_acquire_recursive>:
 80032c4:	4770      	bx	lr

080032c6 <__retarget_lock_release_recursive>:
 80032c6:	4770      	bx	lr

080032c8 <_init>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	bf00      	nop
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr

080032d4 <_fini>:
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	bf00      	nop
 80032d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032da:	bc08      	pop	{r3}
 80032dc:	469e      	mov	lr, r3
 80032de:	4770      	bx	lr

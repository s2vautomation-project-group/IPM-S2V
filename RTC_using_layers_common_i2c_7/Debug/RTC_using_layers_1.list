
RTC_using_layers_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004258  08004258  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004258  08004258  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004258  08004258  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  080042d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080042d0  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc42  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021dd  00000000  00000000  0002bce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209fe  00000000  00000000  0002f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2be  00000000  00000000  0004fe1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be74e  00000000  00000000  0005e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe4  00000000  00000000  0011c87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a30 	.word	0x08003a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003a30 	.word	0x08003a30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <bcdToDec>:
{
	return (uint8_t)( (val/10*16) + (val%10) );
}
//Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	return (int)( (val/16*10) + (val%16) );
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	091b      	lsrs	r3, r3, #4
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	4613      	mov	r3, r2
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	4413      	add	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	461a      	mov	r2, r3
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 030f 	and.w	r3, r3, #15
 8000292:	4413      	add	r3, r2
}
 8000294:	4618      	mov	r0, r3
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <Get_Time>:
//	HAL_I2C_Mem_Write(&hi2c1, DS3107_ADDRESS, 0x00, 1, set_time, 7, 1000);
//  }

}
void Get_Time (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	uint8_t get_time[7];
	I2C_read(get_time);
 80002a6:	463b      	mov	r3, r7
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f8cb 	bl	8000444 <I2C_read>
//   {
//	HAL_I2C_Mem_Read(&hi2c1, DS3107_ADDRESS, 0x00, 1, get_time, 7, 1000);
//   }
	time.seconds 	= bcdToDec(get_time[0]);
 80002ae:	783b      	ldrb	r3, [r7, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffdd 	bl	8000270 <bcdToDec>
 80002b6:	4603      	mov	r3, r0
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <Get_Time+0x88>)
 80002bc:	701a      	strb	r2, [r3, #0]
	time.minutes 	= bcdToDec(get_time[1]);
 80002be:	787b      	ldrb	r3, [r7, #1]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f7ff ffd5 	bl	8000270 <bcdToDec>
 80002c6:	4603      	mov	r3, r0
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <Get_Time+0x88>)
 80002cc:	705a      	strb	r2, [r3, #1]
	time.hour 		= bcdToDec(get_time[2]);
 80002ce:	78bb      	ldrb	r3, [r7, #2]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ffcd 	bl	8000270 <bcdToDec>
 80002d6:	4603      	mov	r3, r0
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <Get_Time+0x88>)
 80002dc:	709a      	strb	r2, [r3, #2]
	time.dayofweek  = bcdToDec(get_time[3]);
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ffc5 	bl	8000270 <bcdToDec>
 80002e6:	4603      	mov	r3, r0
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <Get_Time+0x88>)
 80002ec:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80002ee:	793b      	ldrb	r3, [r7, #4]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ffbd 	bl	8000270 <bcdToDec>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <Get_Time+0x88>)
 80002fc:	711a      	strb	r2, [r3, #4]
	time.month 		= bcdToDec(get_time[5]);
 80002fe:	797b      	ldrb	r3, [r7, #5]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffb5 	bl	8000270 <bcdToDec>
 8000306:	4603      	mov	r3, r0
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <Get_Time+0x88>)
 800030c:	715a      	strb	r2, [r3, #5]
	time.year 		= bcdToDec(get_time[6]);
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffad 	bl	8000270 <bcdToDec>
 8000316:	4603      	mov	r3, r0
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <Get_Time+0x88>)
 800031c:	719a      	strb	r2, [r3, #6]
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000008c 	.word	0x2000008c

0800032c <app>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void app(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af02      	add	r7, sp, #8
//  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Get_Time();
 8000332:	f7ff ffb5 	bl	80002a0 <Get_Time>
	  	  sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000336:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <app+0x84>)
 8000338:	789b      	ldrb	r3, [r3, #2]
 800033a:	461a      	mov	r2, r3
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <app+0x84>)
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	4619      	mov	r1, r3
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <app+0x84>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	460b      	mov	r3, r1
 800034a:	491a      	ldr	r1, [pc, #104]	; (80003b4 <app+0x88>)
 800034c:	481a      	ldr	r0, [pc, #104]	; (80003b8 <app+0x8c>)
 800034e:	f002 ff0f 	bl	8003170 <siprintf>

//	  	  lcd_put_cur(0,0);
//	  	  lcd_send_string(buffer);

	  	  ssd1306_SetCursor(5, 5);
 8000352:	2105      	movs	r1, #5
 8000354:	2005      	movs	r0, #5
 8000356:	f000 fa7d 	bl	8000854 <ssd1306_SetCursor>
	  	  ssd1306_WriteString(buffer, Font_7x10, White);
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <app+0x90>)
 800035c:	2201      	movs	r2, #1
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000362:	4815      	ldr	r0, [pc, #84]	; (80003b8 <app+0x8c>)
 8000364:	f000 fa50 	bl	8000808 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000368:	f000 f940 	bl	80005ec <ssd1306_UpdateScreen>


	  	  sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <app+0x84>)
 800036e:	791b      	ldrb	r3, [r3, #4]
 8000370:	461a      	mov	r2, r3
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <app+0x84>)
 8000374:	795b      	ldrb	r3, [r3, #5]
 8000376:	4619      	mov	r1, r3
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <app+0x84>)
 800037a:	799b      	ldrb	r3, [r3, #6]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	460b      	mov	r3, r1
 8000380:	490f      	ldr	r1, [pc, #60]	; (80003c0 <app+0x94>)
 8000382:	480d      	ldr	r0, [pc, #52]	; (80003b8 <app+0x8c>)
 8000384:	f002 fef4 	bl	8003170 <siprintf>
//	  	  lcd_put_cur(1,0);
//	  	  lcd_send_string(buffer);
	  	 ssd1306_SetCursor(7, 20);
 8000388:	2114      	movs	r1, #20
 800038a:	2007      	movs	r0, #7
 800038c:	f000 fa62 	bl	8000854 <ssd1306_SetCursor>
	  		  	  ssd1306_WriteString(buffer, Font_7x10, White);
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <app+0x90>)
 8000392:	2201      	movs	r2, #1
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <app+0x8c>)
 800039a:	f000 fa35 	bl	8000808 <ssd1306_WriteString>
	  		  	  ssd1306_UpdateScreen();
 800039e:	f000 f925 	bl	80005ec <ssd1306_UpdateScreen>

	  	  HAL_Delay(500);
 80003a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a6:	f000 fcc7 	bl	8000d38 <HAL_Delay>
  }
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000008c 	.word	0x2000008c
 80003b4:	08003a48 	.word	0x08003a48
 80003b8:	20000094 	.word	0x20000094
 80003bc:	080041d8 	.word	0x080041d8
 80003c0:	08003a58 	.word	0x08003a58

080003c4 <USER_I2C1_Init>:
extern I2C_HandleTypeDef hi2c1;



void USER_I2C1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <USER_I2C1_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	; (800043c <USER_I2C1_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <USER_I2C1_Init+0x74>)
 80003d0:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <USER_I2C1_Init+0x7c>)
 80003d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <USER_I2C1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <USER_I2C1_Init+0x74>)
 80003dc:	2201      	movs	r2, #1
 80003de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <USER_I2C1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <USER_I2C1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <USER_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f2:	4b11      	ldr	r3, [pc, #68]	; (8000438 <USER_I2C1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <USER_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003fe:	480e      	ldr	r0, [pc, #56]	; (8000438 <USER_I2C1_Init+0x74>)
 8000400:	f000 ff0e 	bl	8001220 <HAL_I2C_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <USER_I2C1_Init+0x4a>
  {
    Error_Handler();
 800040a:	f000 fb03 	bl	8000a14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800040e:	2100      	movs	r1, #0
 8000410:	4809      	ldr	r0, [pc, #36]	; (8000438 <USER_I2C1_Init+0x74>)
 8000412:	f001 fc69 	bl	8001ce8 <HAL_I2CEx_ConfigAnalogFilter>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <USER_I2C1_Init+0x5c>
  {
    Error_Handler();
 800041c:	f000 fafa 	bl	8000a14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000420:	2100      	movs	r1, #0
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <USER_I2C1_Init+0x74>)
 8000424:	f001 fcab 	bl	8001d7e <HAL_I2CEx_ConfigDigitalFilter>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <USER_I2C1_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 faf1 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200002ac 	.word	0x200002ac
 800043c:	40005400 	.word	0x40005400
 8000440:	00707cbb 	.word	0x00707cbb

08000444 <I2C_read>:
  {
	HAL_I2C_Mem_Write(&hi2c1, DS3107_ADDRESS, 0x00, 1, arr, 7, 1000);
  }

void I2C_read(uint8_t *data)
   {
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af04      	add	r7, sp, #16
 800044a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, DS3107_ADDRESS, 0x00, 1, data, 7, 1000);
 800044c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000450:	9302      	str	r3, [sp, #8]
 8000452:	2307      	movs	r3, #7
 8000454:	9301      	str	r3, [sp, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2301      	movs	r3, #1
 800045c:	2200      	movs	r2, #0
 800045e:	21d0      	movs	r1, #208	; 0xd0
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <I2C_read+0x2c>)
 8000462:	f001 f881 	bl	8001568 <HAL_I2C_Mem_Read>
   }
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200002ac 	.word	0x200002ac

08000474 <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af04      	add	r7, sp, #16
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	9302      	str	r3, [sp, #8]
 8000494:	2301      	movs	r3, #1
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2301      	movs	r3, #1
 800049e:	2200      	movs	r2, #0
 80004a0:	2178      	movs	r1, #120	; 0x78
 80004a2:	4803      	ldr	r0, [pc, #12]	; (80004b0 <ssd1306_WriteCommand+0x2c>)
 80004a4:	f000 ff4c 	bl	8001340 <HAL_I2C_Mem_Write>
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200002ac 	.word	0x200002ac

080004b4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af04      	add	r7, sp, #16
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	f04f 32ff 	mov.w	r2, #4294967295
 80004c6:	9202      	str	r2, [sp, #8]
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2301      	movs	r3, #1
 80004d0:	2240      	movs	r2, #64	; 0x40
 80004d2:	2178      	movs	r1, #120	; 0x78
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <ssd1306_WriteData+0x30>)
 80004d6:	f000 ff33 	bl	8001340 <HAL_I2C_Mem_Write>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	200002ac 	.word	0x200002ac

080004e8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80004ec:	f7ff ffc2 	bl	8000474 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80004f0:	2064      	movs	r0, #100	; 0x64
 80004f2:	f000 fc21 	bl	8000d38 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f9d8 	bl	80008ac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80004fc:	2020      	movs	r0, #32
 80004fe:	f7ff ffc1 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff ffbe 	bl	8000484 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000508:	20b0      	movs	r0, #176	; 0xb0
 800050a:	f7ff ffbb 	bl	8000484 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800050e:	20c8      	movs	r0, #200	; 0xc8
 8000510:	f7ff ffb8 	bl	8000484 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ffb5 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800051a:	2010      	movs	r0, #16
 800051c:	f7ff ffb2 	bl	8000484 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000520:	2040      	movs	r0, #64	; 0x40
 8000522:	f7ff ffaf 	bl	8000484 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000526:	20ff      	movs	r0, #255	; 0xff
 8000528:	f000 f9ac 	bl	8000884 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800052c:	20a1      	movs	r0, #161	; 0xa1
 800052e:	f7ff ffa9 	bl	8000484 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000532:	20a6      	movs	r0, #166	; 0xa6
 8000534:	f7ff ffa6 	bl	8000484 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000538:	20a8      	movs	r0, #168	; 0xa8
 800053a:	f7ff ffa3 	bl	8000484 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800053e:	201f      	movs	r0, #31
 8000540:	f7ff ffa0 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000544:	20a4      	movs	r0, #164	; 0xa4
 8000546:	f7ff ff9d 	bl	8000484 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800054a:	20d3      	movs	r0, #211	; 0xd3
 800054c:	f7ff ff9a 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff ff97 	bl	8000484 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000556:	20d5      	movs	r0, #213	; 0xd5
 8000558:	f7ff ff94 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800055c:	20f0      	movs	r0, #240	; 0xf0
 800055e:	f7ff ff91 	bl	8000484 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000562:	20d9      	movs	r0, #217	; 0xd9
 8000564:	f7ff ff8e 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000568:	2022      	movs	r0, #34	; 0x22
 800056a:	f7ff ff8b 	bl	8000484 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800056e:	20da      	movs	r0, #218	; 0xda
 8000570:	f7ff ff88 	bl	8000484 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000574:	2002      	movs	r0, #2
 8000576:	f7ff ff85 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800057a:	20db      	movs	r0, #219	; 0xdb
 800057c:	f7ff ff82 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000580:	2020      	movs	r0, #32
 8000582:	f7ff ff7f 	bl	8000484 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000586:	208d      	movs	r0, #141	; 0x8d
 8000588:	f7ff ff7c 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800058c:	2014      	movs	r0, #20
 800058e:	f7ff ff79 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000592:	2001      	movs	r0, #1
 8000594:	f000 f98a 	bl	80008ac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 f80f 	bl	80005bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800059e:	f000 f825 	bl	80005ec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <ssd1306_Init+0xd0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <ssd1306_Init+0xd0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80005ae:	4b02      	ldr	r3, [pc, #8]	; (80005b8 <ssd1306_Init+0xd0>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	711a      	strb	r2, [r3, #4]
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200002a4 	.word	0x200002a4

080005bc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d101      	bne.n	80005d0 <ssd1306_Fill+0x14>
 80005cc:	2300      	movs	r3, #0
 80005ce:	e000      	b.n	80005d2 <ssd1306_Fill+0x16>
 80005d0:	23ff      	movs	r3, #255	; 0xff
 80005d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d6:	4619      	mov	r1, r3
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <ssd1306_Fill+0x2c>)
 80005da:	f002 fdc1 	bl	8003160 <memset>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000a4 	.word	0x200000a4

080005ec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e016      	b.n	8000626 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	3b50      	subs	r3, #80	; 0x50
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff40 	bl	8000484 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff3d 	bl	8000484 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800060a:	2010      	movs	r0, #16
 800060c:	f7ff ff3a 	bl	8000484 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	01db      	lsls	r3, r3, #7
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <ssd1306_UpdateScreen+0x4c>)
 8000616:	4413      	add	r3, r2
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff4a 	bl	80004b4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3301      	adds	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d9e5      	bls.n	80005f8 <ssd1306_UpdateScreen+0xc>
    }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000a4 	.word	0x200000a4

0800063c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	460b      	mov	r3, r1
 8000648:	71bb      	strb	r3, [r7, #6]
 800064a:	4613      	mov	r3, r2
 800064c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db3d      	blt.n	80006d2 <ssd1306_DrawPixel+0x96>
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	2b1f      	cmp	r3, #31
 800065a:	d83a      	bhi.n	80006d2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800065c:	797b      	ldrb	r3, [r7, #5]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d11a      	bne.n	8000698 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	08db      	lsrs	r3, r3, #3
 8000668:	b2d8      	uxtb	r0, r3
 800066a:	4603      	mov	r3, r0
 800066c:	01db      	lsls	r3, r3, #7
 800066e:	4413      	add	r3, r2
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <ssd1306_DrawPixel+0xa4>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	b25a      	sxtb	r2, r3
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	2101      	movs	r1, #1
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	b25b      	sxtb	r3, r3
 8000684:	4313      	orrs	r3, r2
 8000686:	b259      	sxtb	r1, r3
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	4603      	mov	r3, r0
 800068c:	01db      	lsls	r3, r3, #7
 800068e:	4413      	add	r3, r2
 8000690:	b2c9      	uxtb	r1, r1
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <ssd1306_DrawPixel+0xa4>)
 8000694:	54d1      	strb	r1, [r2, r3]
 8000696:	e01d      	b.n	80006d4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000698:	79fa      	ldrb	r2, [r7, #7]
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	08db      	lsrs	r3, r3, #3
 800069e:	b2d8      	uxtb	r0, r3
 80006a0:	4603      	mov	r3, r0
 80006a2:	01db      	lsls	r3, r3, #7
 80006a4:	4413      	add	r3, r2
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <ssd1306_DrawPixel+0xa4>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	b25a      	sxtb	r2, r3
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	43db      	mvns	r3, r3
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	4013      	ands	r3, r2
 80006c0:	b259      	sxtb	r1, r3
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	4603      	mov	r3, r0
 80006c6:	01db      	lsls	r3, r3, #7
 80006c8:	4413      	add	r3, r2
 80006ca:	b2c9      	uxtb	r1, r1
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <ssd1306_DrawPixel+0xa4>)
 80006ce:	54d1      	strb	r1, [r2, r3]
 80006d0:	e000      	b.n	80006d4 <ssd1306_DrawPixel+0x98>
        return;
 80006d2:	bf00      	nop
    }
}
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	200000a4 	.word	0x200000a4

080006e4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4604      	mov	r4, r0
 80006ec:	4638      	mov	r0, r7
 80006ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80006f2:	4623      	mov	r3, r4
 80006f4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b1f      	cmp	r3, #31
 80006fa:	d902      	bls.n	8000702 <ssd1306_WriteChar+0x1e>
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2b7e      	cmp	r3, #126	; 0x7e
 8000700:	d901      	bls.n	8000706 <ssd1306_WriteChar+0x22>
        return 0;
 8000702:	2300      	movs	r3, #0
 8000704:	e079      	b.n	80007fa <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000706:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <ssd1306_WriteChar+0x120>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	783b      	ldrb	r3, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	2b80      	cmp	r3, #128	; 0x80
 8000712:	dc06      	bgt.n	8000722 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000714:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <ssd1306_WriteChar+0x120>)
 8000716:	885b      	ldrh	r3, [r3, #2]
 8000718:	461a      	mov	r2, r3
 800071a:	787b      	ldrb	r3, [r7, #1]
 800071c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800071e:	2b20      	cmp	r3, #32
 8000720:	dd01      	ble.n	8000726 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000722:	2300      	movs	r3, #0
 8000724:	e069      	b.n	80007fa <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
 800072a:	e04e      	b.n	80007ca <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3b20      	subs	r3, #32
 8000732:	7879      	ldrb	r1, [r7, #1]
 8000734:	fb01 f303 	mul.w	r3, r1, r3
 8000738:	4619      	mov	r1, r3
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	440b      	add	r3, r1
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	e036      	b.n	80007ba <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000758:	2b00      	cmp	r3, #0
 800075a:	d013      	beq.n	8000784 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <ssd1306_WriteChar+0x120>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4413      	add	r3, r2
 8000768:	b2d8      	uxtb	r0, r3
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <ssd1306_WriteChar+0x120>)
 800076c:	885b      	ldrh	r3, [r3, #2]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	4413      	add	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800077c:	4619      	mov	r1, r3
 800077e:	f7ff ff5d 	bl	800063c <ssd1306_DrawPixel>
 8000782:	e017      	b.n	80007b4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <ssd1306_WriteChar+0x120>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b2da      	uxtb	r2, r3
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	b2d8      	uxtb	r0, r3
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <ssd1306_WriteChar+0x120>)
 8000794:	885b      	ldrh	r3, [r3, #2]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4413      	add	r3, r2
 800079e:	b2d9      	uxtb	r1, r3
 80007a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf0c      	ite	eq
 80007a8:	2301      	moveq	r3, #1
 80007aa:	2300      	movne	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	f7ff ff44 	bl	800063c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	3301      	adds	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	783b      	ldrb	r3, [r7, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d3c3      	bcc.n	800074c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	3301      	adds	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
 80007ca:	787b      	ldrb	r3, [r7, #1]
 80007cc:	461a      	mov	r2, r3
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d3ab      	bcc.n	800072c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <ssd1306_WriteChar+0x120>)
 80007d6:	881a      	ldrh	r2, [r3, #0]
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d006      	beq.n	80007ec <ssd1306_WriteChar+0x108>
 80007de:	68b9      	ldr	r1, [r7, #8]
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	3b20      	subs	r3, #32
 80007e4:	440b      	add	r3, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	e001      	b.n	80007f0 <ssd1306_WriteChar+0x10c>
 80007ec:	783b      	ldrb	r3, [r7, #0]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	4413      	add	r3, r2
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <ssd1306_WriteChar+0x120>)
 80007f6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	bf00      	nop
 8000804:	200002a4 	.word	0x200002a4

08000808 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af02      	add	r7, sp, #8
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	4638      	mov	r0, r7
 8000812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000816:	e013      	b.n	8000840 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	7818      	ldrb	r0, [r3, #0]
 800081c:	7e3b      	ldrb	r3, [r7, #24]
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	463b      	mov	r3, r7
 8000822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000824:	f7ff ff5e 	bl	80006e4 <ssd1306_WriteChar>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d002      	beq.n	800083a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	e008      	b.n	800084c <ssd1306_WriteString+0x44>
        }
        str++;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3301      	adds	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e7      	bne.n	8000818 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	781b      	ldrb	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	460a      	mov	r2, r1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <ssd1306_SetCursor+0x2c>)
 800086a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <ssd1306_SetCursor+0x2c>)
 8000872:	805a      	strh	r2, [r3, #2]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	200002a4 	.word	0x200002a4

08000884 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800088e:	2381      	movs	r3, #129	; 0x81
 8000890:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fdf5 	bl	8000484 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fdf1 	bl	8000484 <ssd1306_WriteCommand>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d005      	beq.n	80008c8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80008bc:	23af      	movs	r3, #175	; 0xaf
 80008be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <ssd1306_SetDisplayOn+0x38>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	715a      	strb	r2, [r3, #5]
 80008c6:	e004      	b.n	80008d2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80008c8:	23ae      	movs	r3, #174	; 0xae
 80008ca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <ssd1306_SetDisplayOn+0x38>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fdd5 	bl	8000484 <ssd1306_WriteCommand>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200002a4 	.word	0x200002a4

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f000 f9af 	bl	8000c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f80a 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 f86a 	bl	80009cc <MX_GPIO_Init>
 // MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  USER_I2C1_Init();
 80008f8:	f7ff fd64 	bl	80003c4 <USER_I2C1_Init>
  ssd1306_Init();
 80008fc:	f7ff fdf4 	bl	80004e8 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app();
 8000900:	f7ff fd14 	bl	800032c <app>
 8000904:	e7fc      	b.n	8000900 <main+0x18>
	...

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b096      	sub	sp, #88	; 0x58
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2244      	movs	r2, #68	; 0x44
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fc22 	bl	8003160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800092a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800092e:	f001 fa91 	bl	8001e54 <HAL_PWREx_ControlVoltageScaling>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000938:	f000 f86c 	bl	8000a14 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800093c:	f001 fa6c 	bl	8001e18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <SystemClock_Config+0xc0>)
 8000942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <SystemClock_Config+0xc0>)
 8000948:	f023 0318 	bic.w	r3, r3, #24
 800094c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000950:	2314      	movs	r3, #20
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000968:	2301      	movs	r3, #1
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000970:	2310      	movs	r3, #16
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000974:	2307      	movs	r3, #7
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fabb 	bl	8001f00 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000990:	f000 f840 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000998:	2303      	movs	r3, #3
 800099a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2101      	movs	r1, #1
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 febb 	bl	8002728 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009b8:	f000 f82c 	bl	8000a14 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009bc:	f002 fa96 	bl	8002eec <HAL_RCCEx_EnableMSIPLLMode>
}
 80009c0:	bf00      	nop
 80009c2:	3758      	adds	r7, #88	; 0x58
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6613      	str	r3, [r2, #96]	; 0x60
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09e      	sub	sp, #120	; 0x78
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2254      	movs	r2, #84	; 0x54
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fb69 	bl	8003160 <memset>
  if(hi2c->Instance==I2C1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_I2C_MspInit+0xa8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d137      	bne.n	8000b08 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a98:	2340      	movs	r3, #64	; 0x40
 8000a9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 f82b 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ab0:	f7ff ffb0 	bl	8000a14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_I2C_MspInit+0xac>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <HAL_I2C_MspInit+0xac>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_I2C_MspInit+0xac>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000acc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ad0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad2:	2312      	movs	r3, #18
 8000ad4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fa2e 	bl	8000f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_I2C_MspInit+0xac>)
 8000af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_I2C_MspInit+0xac>)
 8000af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afa:	6593      	str	r3, [r2, #88]	; 0x58
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_I2C_MspInit+0xac>)
 8000afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	3778      	adds	r7, #120	; 0x78
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40021000 	.word	0x40021000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f8c8 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f002 faa8 	bl	80030f0 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20010000 	.word	0x20010000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	20000300 	.word	0x20000300
 8000bd4:	20000318 	.word	0x20000318

08000bd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f002 fa67 	bl	80030fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2e:	f7ff fe5b 	bl	80008e8 <main>

08000c32 <LoopForever>:

LoopForever:
    b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c40:	08004260 	.word	0x08004260
  ldr r2, =_sbss
 8000c44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c48:	20000318 	.word	0x20000318

08000c4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_IRQHandler>

08000c4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f943 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f80e 	bl	8000c80 <HAL_InitTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	e001      	b.n	8000c74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c70:	f7ff fed6 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_InitTick+0x6c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d023      	beq.n	8000cdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_InitTick+0x70>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f941 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10f      	bne.n	8000cd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d809      	bhi.n	8000cd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f919 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_InitTick+0x74>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e007      	b.n	8000ce0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e004      	b.n	8000ce0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e001      	b.n	8000ce0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000304 	.word	0x20000304

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000304 	.word	0x20000304

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff47 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5c 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb0 	bl	8000ea0 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e148      	b.n	80011ee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 813a 	beq.w	80011e8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d005      	beq.n	8000f8c <HAL_GPIO_Init+0x40>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d130      	bne.n	8000fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	f003 0201 	and.w	r2, r3, #1
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d017      	beq.n	800102a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d123      	bne.n	800107e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	6939      	ldr	r1, [r7, #16]
 800107a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0203 	and.w	r2, r3, #3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8094 	beq.w	80011e8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80010c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6613      	str	r3, [r2, #96]	; 0x60
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80010ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x2c4>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001102:	d00d      	beq.n	8001120 <HAL_GPIO_Init+0x1d4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a43      	ldr	r2, [pc, #268]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d007      	beq.n	800111c <HAL_GPIO_Init+0x1d0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a42      	ldr	r2, [pc, #264]	; (8001218 <HAL_GPIO_Init+0x2cc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d101      	bne.n	8001118 <HAL_GPIO_Init+0x1cc>
 8001114:	2302      	movs	r3, #2
 8001116:	e004      	b.n	8001122 <HAL_GPIO_Init+0x1d6>
 8001118:	2307      	movs	r3, #7
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x1d6>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_GPIO_Init+0x1d6>
 8001120:	2300      	movs	r3, #0
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4093      	lsls	r3, r2
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001132:	4937      	ldr	r1, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x2c4>)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_GPIO_Init+0x2d0>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001164:	4a2d      	ldr	r2, [pc, #180]	; (800121c <HAL_GPIO_Init+0x2d0>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <HAL_GPIO_Init+0x2d0>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_GPIO_Init+0x2d0>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <HAL_GPIO_Init+0x2d0>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b8:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f aeaf 	bne.w	8000f5c <HAL_GPIO_Init+0x10>
  }
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e081      	b.n	8001336 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fc0e 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2224      	movs	r2, #36	; 0x24
 8001250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d107      	bne.n	800129a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e006      	b.n	80012a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d104      	bne.n	80012ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69d9      	ldr	r1, [r3, #28]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2220      	movs	r2, #32
 8001322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	4608      	mov	r0, r1
 800134a:	4611      	mov	r1, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4603      	mov	r3, r0
 8001350:	817b      	strh	r3, [r7, #10]
 8001352:	460b      	mov	r3, r1
 8001354:	813b      	strh	r3, [r7, #8]
 8001356:	4613      	mov	r3, r2
 8001358:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b20      	cmp	r3, #32
 8001364:	f040 80f9 	bne.w	800155a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001368:	6a3b      	ldr	r3, [r7, #32]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_I2C_Mem_Write+0x34>
 800136e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001370:	2b00      	cmp	r3, #0
 8001372:	d105      	bne.n	8001380 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0ed      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_I2C_Mem_Write+0x4e>
 800138a:	2302      	movs	r3, #2
 800138c:	e0e6      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001396:	f7ff fcc3 	bl	8000d20 <HAL_GetTick>
 800139a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2319      	movs	r3, #25
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 fac3 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0d1      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2221      	movs	r2, #33	; 0x21
 80013bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a3a      	ldr	r2, [r7, #32]
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e0:	88f8      	ldrh	r0, [r7, #6]
 80013e2:	893a      	ldrh	r2, [r7, #8]
 80013e4:	8979      	ldrh	r1, [r7, #10]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 f9d3 	bl	800179c <I2C_RequestMemoryWrite>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0a9      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	2bff      	cmp	r3, #255	; 0xff
 8001410:	d90e      	bls.n	8001430 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	22ff      	movs	r2, #255	; 0xff
 8001416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141c:	b2da      	uxtb	r2, r3
 800141e:	8979      	ldrh	r1, [r7, #10]
 8001420:	2300      	movs	r3, #0
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 fc2b 	bl	8001c84 <I2C_TransferConfig>
 800142e:	e00f      	b.n	8001450 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001434:	b29a      	uxth	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143e:	b2da      	uxtb	r2, r3
 8001440:	8979      	ldrh	r1, [r7, #10]
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 fc1a 	bl	8001c84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 faad 	bl	80019b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e07b      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29b      	uxth	r3, r3
 8001480:	3b01      	subs	r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148c:	3b01      	subs	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001498:	b29b      	uxth	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d034      	beq.n	8001508 <HAL_I2C_Mem_Write+0x1c8>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d130      	bne.n	8001508 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	2200      	movs	r2, #0
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fa3f 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e04d      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	2bff      	cmp	r3, #255	; 0xff
 80014c8:	d90e      	bls.n	80014e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	22ff      	movs	r2, #255	; 0xff
 80014ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	8979      	ldrh	r1, [r7, #10]
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fbcf 	bl	8001c84 <I2C_TransferConfig>
 80014e6:	e00f      	b.n	8001508 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	8979      	ldrh	r1, [r7, #10]
 80014fa:	2300      	movs	r3, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 fbbe 	bl	8001c84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150c:	b29b      	uxth	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d19e      	bne.n	8001450 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fa8c 	bl	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e01a      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2220      	movs	r2, #32
 800152c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_I2C_Mem_Write+0x224>)
 800153a:	400b      	ands	r3, r1
 800153c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800155a:	2302      	movs	r3, #2
  }
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	fe00e800 	.word	0xfe00e800

08001568 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	817b      	strh	r3, [r7, #10]
 800157a:	460b      	mov	r3, r1
 800157c:	813b      	strh	r3, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b20      	cmp	r3, #32
 800158c:	f040 80fd 	bne.w	800178a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_I2C_Mem_Read+0x34>
 8001596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0f1      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_I2C_Mem_Read+0x4e>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e0ea      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015be:	f7ff fbaf 	bl	8000d20 <HAL_GetTick>
 80015c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2319      	movs	r3, #25
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f9af 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0d5      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2222      	movs	r2, #34	; 0x22
 80015e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001608:	88f8      	ldrh	r0, [r7, #6]
 800160a:	893a      	ldrh	r2, [r7, #8]
 800160c:	8979      	ldrh	r1, [r7, #10]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4603      	mov	r3, r0
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f913 	bl	8001844 <I2C_RequestMemoryRead>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0ad      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d90e      	bls.n	8001658 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	b2da      	uxtb	r2, r3
 8001646:	8979      	ldrh	r1, [r7, #10]
 8001648:	4b52      	ldr	r3, [pc, #328]	; (8001794 <HAL_I2C_Mem_Read+0x22c>)
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fb17 	bl	8001c84 <I2C_TransferConfig>
 8001656:	e00f      	b.n	8001678 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	8979      	ldrh	r1, [r7, #10]
 800166a:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <HAL_I2C_Mem_Read+0x22c>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fb06 	bl	8001c84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	2200      	movs	r2, #0
 8001680:	2104      	movs	r1, #4
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f956 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07c      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d034      	beq.n	8001738 <HAL_I2C_Mem_Read+0x1d0>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d130      	bne.n	8001738 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016dc:	2200      	movs	r2, #0
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f927 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e04d      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d90e      	bls.n	8001718 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	22ff      	movs	r2, #255	; 0xff
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	b2da      	uxtb	r2, r3
 8001706:	8979      	ldrh	r1, [r7, #10]
 8001708:	2300      	movs	r3, #0
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fab7 	bl	8001c84 <I2C_TransferConfig>
 8001716:	e00f      	b.n	8001738 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	b2da      	uxtb	r2, r3
 8001728:	8979      	ldrh	r1, [r7, #10]
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 faa6 	bl	8001c84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d19a      	bne.n	8001678 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f974 	bl	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e01a      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2220      	movs	r2, #32
 800175c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_I2C_Mem_Read+0x230>)
 800176a:	400b      	ands	r3, r1
 800176c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800178a:	2302      	movs	r3, #2
  }
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	80002400 	.word	0x80002400
 8001798:	fe00e800 	.word	0xfe00e800

0800179c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	817b      	strh	r3, [r7, #10]
 80017ae:	460b      	mov	r3, r1
 80017b0:	813b      	strh	r3, [r7, #8]
 80017b2:	4613      	mov	r3, r2
 80017b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	8979      	ldrh	r1, [r7, #10]
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <I2C_RequestMemoryWrite+0xa4>)
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fa5d 	bl	8001c84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	69b9      	ldr	r1, [r7, #24]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f8f0 	bl	80019b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e02c      	b.n	8001838 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017e4:	893b      	ldrh	r3, [r7, #8]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
 80017ee:	e015      	b.n	800181c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017f0:	893b      	ldrh	r3, [r7, #8]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	69b9      	ldr	r1, [r7, #24]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f8d6 	bl	80019b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e012      	b.n	8001838 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001812:	893b      	ldrh	r3, [r7, #8]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2200      	movs	r2, #0
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f884 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	80002000 	.word	0x80002000

08001844 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4603      	mov	r3, r0
 8001854:	817b      	strh	r3, [r7, #10]
 8001856:	460b      	mov	r3, r1
 8001858:	813b      	strh	r3, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	8979      	ldrh	r1, [r7, #10]
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <I2C_RequestMemoryRead+0xa4>)
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fa0a 	bl	8001c84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f89d 	bl	80019b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e02c      	b.n	80018de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d105      	bne.n	8001896 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800188a:	893b      	ldrh	r3, [r7, #8]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
 8001894:	e015      	b.n	80018c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001896:	893b      	ldrh	r3, [r7, #8]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	b29b      	uxth	r3, r3
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f883 	bl	80019b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e012      	b.n	80018de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018b8:	893b      	ldrh	r3, [r7, #8]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2200      	movs	r2, #0
 80018ca:	2140      	movs	r1, #64	; 0x40
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f831 	bl	8001934 <I2C_WaitOnFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	80002000 	.word	0x80002000

080018ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d103      	bne.n	800190a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d007      	beq.n	8001928 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	619a      	str	r2, [r3, #24]
  }
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001944:	e022      	b.n	800198c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d01e      	beq.n	800198c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194e:	f7ff f9e7 	bl	8000d20 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d302      	bcc.n	8001964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d113      	bne.n	800198c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f043 0220 	orr.w	r2, r3, #32
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e00f      	b.n	80019ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	4013      	ands	r3, r2
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	429a      	cmp	r2, r3
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d0cd      	beq.n	8001946 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019c0:	e02c      	b.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f870 	bl	8001aac <I2C_IsErrorOccurred>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e02a      	b.n	8001a2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d01e      	beq.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019de:	f7ff f99f 	bl	8000d20 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d302      	bcc.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d113      	bne.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e007      	b.n	8001a2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d1cb      	bne.n	80019c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a40:	e028      	b.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f830 	bl	8001aac <I2C_IsErrorOccurred>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e026      	b.n	8001aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff f963 	bl	8000d20 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d113      	bne.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e007      	b.n	8001aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d1cf      	bne.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d075      	beq.n	8001bc4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ae0:	e056      	b.n	8001b90 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d052      	beq.n	8001b90 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7ff f919 	bl	8000d20 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <I2C_IsErrorOccurred+0x54>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d147      	bne.n	8001b90 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b22:	d12e      	bne.n	8001b82 <I2C_IsErrorOccurred+0xd6>
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b2a:	d02a      	beq.n	8001b82 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001b2c:	7cfb      	ldrb	r3, [r7, #19]
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d027      	beq.n	8001b82 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b42:	f7ff f8ed 	bl	8000d20 <HAL_GetTick>
 8001b46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b48:	e01b      	b.n	8001b82 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b4a:	f7ff f8e9 	bl	8000d20 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b19      	cmp	r3, #25
 8001b56:	d914      	bls.n	8001b82 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d1dc      	bne.n	8001b4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d003      	beq.n	8001ba6 <I2C_IsErrorOccurred+0xfa>
 8001b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d09d      	beq.n	8001ae2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00b      	beq.n	8001c10 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d01c      	beq.n	8001c74 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fe56 	bl	80018ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <I2C_IsErrorOccurred+0x1d4>)
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	fe00e800 	.word	0xfe00e800

08001c84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	817b      	strh	r3, [r7, #10]
 8001c92:	4613      	mov	r3, r2
 8001c94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c96:	897b      	ldrh	r3, [r7, #10]
 8001c98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c9c:	7a7b      	ldrb	r3, [r7, #9]
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ca4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cb2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	0d5b      	lsrs	r3, r3, #21
 8001cbe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <I2C_TransferConfig+0x60>)
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	ea02 0103 	and.w	r1, r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	03ff63ff 	.word	0x03ff63ff

08001ce8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d138      	bne.n	8001d70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e032      	b.n	8001d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e000      	b.n	8001d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d70:	2302      	movs	r3, #2
  }
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b085      	sub	sp, #20
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d139      	bne.n	8001e08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e033      	b.n	8001e0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2224      	movs	r2, #36	; 0x24
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40007000 	.word	0x40007000

08001e54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e62:	d130      	bne.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e70:	d038      	beq.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e72:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2232      	movs	r2, #50	; 0x32
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	3301      	adds	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e98:	e002      	b.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d102      	bne.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f2      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	d110      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e00f      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed2:	d007      	beq.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001edc:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f000 bc02 	b.w	8002718 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	4b96      	ldr	r3, [pc, #600]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1e:	4b94      	ldr	r3, [pc, #592]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80e4 	beq.w	80020fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4c>
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	f040 808b 	bne.w	800205a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	f040 8087 	bne.w	800205a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4c:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x64>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e3d9      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_RCC_OscConfig+0x7e>
 8001f74:	4b7e      	ldr	r3, [pc, #504]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f7c:	e005      	b.n	8001f8a <HAL_RCC_OscConfig+0x8a>
 8001f7e:	4b7c      	ldr	r3, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d223      	bcs.n	8001fd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fd54 	bl	8002a40 <RCC_SetFlashLatencyFromMSIRange>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e3ba      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa2:	4b73      	ldr	r3, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a72      	ldr	r2, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b70      	ldr	r3, [pc, #448]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	496d      	ldr	r1, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc0:	4b6b      	ldr	r3, [pc, #428]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	4968      	ldr	r1, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
 8001fd4:	e025      	b.n	8002022 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4960      	ldr	r1, [pc, #384]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff4:	4b5e      	ldr	r3, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	495b      	ldr	r1, [pc, #364]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fd14 	bl	8002a40 <RCC_SetFlashLatencyFromMSIRange>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e37a      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002022:	f000 fc81 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 8002026:	4602      	mov	r2, r0
 8002028:	4b51      	ldr	r3, [pc, #324]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	4950      	ldr	r1, [pc, #320]	; (8002174 <HAL_RCC_OscConfig+0x274>)
 8002034:	5ccb      	ldrb	r3, [r1, r3]
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a4e      	ldr	r2, [pc, #312]	; (8002178 <HAL_RCC_OscConfig+0x278>)
 8002040:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_OscConfig+0x27c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fe1a 	bl	8000c80 <HAL_InitTick>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d052      	beq.n	80020fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	e35e      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d032      	beq.n	80020c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800206e:	f7fe fe57 	bl	8000d20 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002076:	f7fe fe53 	bl	8000d20 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e347      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002094:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a35      	ldr	r2, [pc, #212]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b33      	ldr	r3, [pc, #204]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4930      	ldr	r1, [pc, #192]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	492b      	ldr	r1, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
 80020c6:	e01a      	b.n	80020fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fe24 	bl	8000d20 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020dc:	f7fe fe20 	bl	8000d20 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e314      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x1dc>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d073      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b08      	cmp	r3, #8
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x21c>
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d10e      	bne.n	8002134 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d10b      	bne.n	8002134 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d063      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d15f      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e2f1      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x24c>
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e025      	b.n	8002198 <HAL_RCC_OscConfig+0x298>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d114      	bne.n	8002180 <HAL_RCC_OscConfig+0x280>
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a02      	ldr	r2, [pc, #8]	; (8002170 <HAL_RCC_OscConfig+0x270>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e013      	b.n	8002198 <HAL_RCC_OscConfig+0x298>
 8002170:	40021000 	.word	0x40021000
 8002174:	080041e4 	.word	0x080041e4
 8002178:	20000000 	.word	0x20000000
 800217c:	20000004 	.word	0x20000004
 8002180:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a9f      	ldr	r2, [pc, #636]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b9d      	ldr	r3, [pc, #628]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a9c      	ldr	r2, [pc, #624]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fdbe 	bl	8000d20 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fdba 	bl	8000d20 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e2ae      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	4b92      	ldr	r3, [pc, #584]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2a8>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fdaa 	bl	8000d20 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe fda6 	bl	8000d20 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e29a      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2d0>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d060      	beq.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x310>
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d119      	bne.n	800223e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d116      	bne.n	800223e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002210:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_OscConfig+0x328>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e277      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b76      	ldr	r3, [pc, #472]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	4973      	ldr	r1, [pc, #460]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223c:	e040      	b.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d023      	beq.n	800228e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002246:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6e      	ldr	r2, [pc, #440]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe fd65 	bl	8000d20 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225a:	f7fe fd61 	bl	8000d20 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e255      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	4b65      	ldr	r3, [pc, #404]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b62      	ldr	r3, [pc, #392]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	495f      	ldr	r1, [pc, #380]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
 800228c:	e018      	b.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228e:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5c      	ldr	r2, [pc, #368]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fd41 	bl	8000d20 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7fe fd3d 	bl	8000d20 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e231      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d03c      	beq.n	8002346 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01c      	beq.n	800230e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022da:	4a4a      	ldr	r2, [pc, #296]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe fd1c 	bl	8000d20 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7fe fd18 	bl	8000d20 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e20c      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ef      	beq.n	80022ec <HAL_RCC_OscConfig+0x3ec>
 800230c:	e01b      	b.n	8002346 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002314:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231e:	f7fe fcff 	bl	8000d20 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002326:	f7fe fcfb 	bl	8000d20 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1ef      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1ef      	bne.n	8002326 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a6 	beq.w	80024a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002358:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	4a26      	ldr	r2, [pc, #152]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6593      	str	r3, [r2, #88]	; 0x58
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237c:	2301      	movs	r3, #1
 800237e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_OscConfig+0x508>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d118      	bne.n	80023be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800238c:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x508>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x508>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002398:	f7fe fcc2 	bl	8000d20 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7fe fcbe 	bl	8000d20 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e1b2      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_RCC_OscConfig+0x508>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x4d8>
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d6:	e029      	b.n	800242c <HAL_RCC_OscConfig+0x52c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d115      	bne.n	800240c <HAL_RCC_OscConfig+0x50c>
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	4a03      	ldr	r2, [pc, #12]	; (8002404 <HAL_RCC_OscConfig+0x504>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x52c>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	40007000 	.word	0x40007000
 800240c:	4b9a      	ldr	r3, [pc, #616]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	4a99      	ldr	r2, [pc, #612]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800241c:	4b96      	ldr	r3, [pc, #600]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a95      	ldr	r2, [pc, #596]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d016      	beq.n	8002462 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fc74 	bl	8000d20 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fc70 	bl	8000d20 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e162      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b89      	ldr	r3, [pc, #548]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ed      	beq.n	800243c <HAL_RCC_OscConfig+0x53c>
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fc5d 	bl	8000d20 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fc59 	bl	8000d20 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e14b      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002480:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ed      	bne.n	800246a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248e:	7ffb      	ldrb	r3, [r7, #31]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b78      	ldr	r3, [pc, #480]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	4a77      	ldr	r2, [pc, #476]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03c      	beq.n	8002526 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b4:	4b70      	ldr	r3, [pc, #448]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80024b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ba:	4a6f      	ldr	r2, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe fc2c 	bl	8000d20 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024cc:	f7fe fc28 	bl	8000d20 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e11c      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024de:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80024e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ef      	beq.n	80024cc <HAL_RCC_OscConfig+0x5cc>
 80024ec:	e01b      	b.n	8002526 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ee:	4b62      	ldr	r3, [pc, #392]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80024f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f4:	4a60      	ldr	r2, [pc, #384]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fc0f 	bl	8000d20 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002506:	f7fe fc0b 	bl	8000d20 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0ff      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 800251a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1ef      	bne.n	8002506 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80f3 	beq.w	8002716 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2b02      	cmp	r3, #2
 8002536:	f040 80c9 	bne.w	80026cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800253a:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	429a      	cmp	r2, r3
 800254c:	d12c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	3b01      	subs	r3, #1
 800255a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d123      	bne.n	80025a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d11b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d113      	bne.n	80025a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d109      	bne.n	80025a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d06b      	beq.n	8002680 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d062      	beq.n	8002674 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0ac      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80025c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025ca:	f7fe fba9 	bl	8000d20 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d2:	f7fe fba5 	bl	8000d20 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e099      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	4b21      	ldr	r3, [pc, #132]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x77c>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002600:	3a01      	subs	r2, #1
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800260a:	0212      	lsls	r2, r2, #8
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002612:	0852      	lsrs	r2, r2, #1
 8002614:	3a01      	subs	r2, #1
 8002616:	0552      	lsls	r2, r2, #21
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800261e:	0852      	lsrs	r2, r2, #1
 8002620:	3a01      	subs	r2, #1
 8002622:	0652      	lsls	r2, r2, #25
 8002624:	4311      	orrs	r1, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800262a:	06d2      	lsls	r2, r2, #27
 800262c:	430a      	orrs	r2, r1
 800262e:	4912      	ldr	r1, [pc, #72]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002630:	4313      	orrs	r3, r2
 8002632:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800264c:	f7fe fb68 	bl	8000d20 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fb64 	bl	8000d20 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e058      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_RCC_OscConfig+0x778>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002672:	e050      	b.n	8002716 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e04f      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
 8002678:	40021000 	.word	0x40021000
 800267c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d144      	bne.n	8002716 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a4:	f7fe fb3c 	bl	8000d20 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fb38 	bl	8000d20 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e02c      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x7ac>
 80026ca:	e024      	b.n	8002716 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d01f      	beq.n	8002712 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fe fb1f 	bl	8000d20 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fb1b 	bl	8000d20 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e00f      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4905      	ldr	r1, [pc, #20]	; (8002720 <HAL_RCC_OscConfig+0x820>)
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x824>)
 800270c:	4013      	ands	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
 8002710:	e001      	b.n	8002716 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	feeefffc 	.word	0xfeeefffc

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0e7      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b75      	ldr	r3, [pc, #468]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d910      	bls.n	800276c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b72      	ldr	r3, [pc, #456]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4970      	ldr	r1, [pc, #448]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b6e      	ldr	r3, [pc, #440]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0cf      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002784:	429a      	cmp	r2, r3
 8002786:	d908      	bls.n	800279a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4960      	ldr	r1, [pc, #384]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04c      	beq.n	8002840 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d121      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0a6      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e09a      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027de:	4b4e      	ldr	r3, [pc, #312]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e08e      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ee:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e086      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4943      	ldr	r1, [pc, #268]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fa86 	bl	8000d20 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fa82 	bl	8000d20 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e06e      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002858:	429a      	cmp	r2, r3
 800285a:	d208      	bcs.n	800286e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	492b      	ldr	r1, [pc, #172]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d210      	bcs.n	800289e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 0207 	bic.w	r2, r3, #7
 8002884:	4923      	ldr	r1, [pc, #140]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCC_ClockConfig+0x1ec>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e036      	b.n	800290c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4918      	ldr	r1, [pc, #96]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4910      	ldr	r1, [pc, #64]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028dc:	f000 f824 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	490b      	ldr	r1, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x1f4>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	4a09      	ldr	r2, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1f8>)
 80028fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x1fc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe f9bd 	bl	8000c80 <HAL_InitTick>
 8002906:	4603      	mov	r3, r0
 8002908:	72fb      	strb	r3, [r7, #11]

  return status;
 800290a:	7afb      	ldrb	r3, [r7, #11]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40022000 	.word	0x40022000
 8002918:	40021000 	.word	0x40021000
 800291c:	080041e4 	.word	0x080041e4
 8002920:	20000000 	.word	0x20000000
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002936:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x34>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d121      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d11e      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e005      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002984:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d102      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	e004      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80029ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d134      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0xa6>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d003      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0xac>
 80029cc:	e005      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80029d0:	617b      	str	r3, [r7, #20]
      break;
 80029d2:	e005      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80029d6:	617b      	str	r3, [r7, #20]
      break;
 80029d8:	e002      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	617b      	str	r3, [r7, #20]
      break;
 80029de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	3301      	adds	r3, #1
 80029ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	fb03 f202 	mul.w	r2, r3, r2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	0e5b      	lsrs	r3, r3, #25
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	3301      	adds	r3, #1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a20:	69bb      	ldr	r3, [r7, #24]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	080041f4 	.word	0x080041f4
 8002a38:	00f42400 	.word	0x00f42400
 8002a3c:	007a1200 	.word	0x007a1200

08002a40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a58:	f7ff f9ee 	bl	8001e38 <HAL_PWREx_GetVoltageRange>
 8002a5c:	6178      	str	r0, [r7, #20]
 8002a5e:	e014      	b.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a78:	f7ff f9de 	bl	8001e38 <HAL_PWREx_GetVoltageRange>
 8002a7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a90:	d10b      	bne.n	8002aaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d919      	bls.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a9c:	d902      	bls.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	e013      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e010      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d902      	bls.n	8002ab6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e00a      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b80      	cmp	r3, #128	; 0x80
 8002aba:	d102      	bne.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002abc:	2302      	movs	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	e004      	b.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b70      	cmp	r3, #112	; 0x70
 8002ac6:	d101      	bne.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 0207 	bic.w	r2, r3, #7
 8002ad4:	4909      	ldr	r1, [pc, #36]	; (8002afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002adc:	4b07      	ldr	r3, [pc, #28]	; (8002afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40022000 	.word	0x40022000

08002b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d031      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b24:	d01a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b2a:	d814      	bhi.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b34:	d10f      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b36:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4a5c      	ldr	r2, [pc, #368]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b42:	e00c      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f9de 	bl	8002f0c <RCCEx_PLLSAI1_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b54:	e003      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	74fb      	strb	r3, [r7, #19]
      break;
 8002b5a:	e000      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b64:	4b51      	ldr	r3, [pc, #324]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	494e      	ldr	r1, [pc, #312]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b7a:	e001      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 809e 	beq.w	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b92:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	4a3f      	ldr	r2, [pc, #252]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb4:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe f8a6 	bl	8000d20 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bd6:	e009      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd8:	f7fe f8a2 	bl	8000d20 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d902      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	74fb      	strb	r3, [r7, #19]
        break;
 8002bea:	e005      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ef      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d15a      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01e      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d019      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c46:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d016      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe f862 	bl	8000d20 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe f85e 	bl	8000d20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d902      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	74fb      	strb	r3, [r7, #19]
            break;
 8002c76:	e006      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0ec      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9a:	4904      	ldr	r1, [pc, #16]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ca2:	e009      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	74bb      	strb	r3, [r7, #18]
 8002ca8:	e006      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb8:	7c7b      	ldrb	r3, [r7, #17]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d105      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbe:	4b8a      	ldr	r3, [pc, #552]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	4a89      	ldr	r2, [pc, #548]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd6:	4b84      	ldr	r3, [pc, #528]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f023 0203 	bic.w	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4980      	ldr	r1, [pc, #512]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 020c 	bic.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	4978      	ldr	r1, [pc, #480]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d1a:	4b73      	ldr	r3, [pc, #460]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	496f      	ldr	r1, [pc, #444]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	4967      	ldr	r1, [pc, #412]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d5e:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	495e      	ldr	r1, [pc, #376]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	4956      	ldr	r1, [pc, #344]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d028      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc4:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4945      	ldr	r1, [pc, #276]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de2:	d106      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a3f      	ldr	r2, [pc, #252]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dee:	60d3      	str	r3, [r2, #12]
 8002df0:	e011      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f882 	bl	8002f0c <RCCEx_PLLSAI1_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d028      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	492d      	ldr	r1, [pc, #180]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e42:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4c:	60d3      	str	r3, [r2, #12]
 8002e4e:	e011      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f853 	bl	8002f0c <RCCEx_PLLSAI1_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01c      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8e:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9e:	d10c      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f830 	bl	8002f0c <RCCEx_PLLSAI1_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed4:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002edc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000

08002f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f1a:	4b74      	ldr	r3, [pc, #464]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d018      	beq.n	8002f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f26:	4b71      	ldr	r3, [pc, #452]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0203 	and.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d10d      	bne.n	8002f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
       ||
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f3e:	4b6b      	ldr	r3, [pc, #428]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d047      	beq.n	8002fe2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e044      	b.n	8002fe2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d018      	beq.n	8002f92 <RCCEx_PLLSAI1_Config+0x86>
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d825      	bhi.n	8002fb0 <RCCEx_PLLSAI1_Config+0xa4>
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d002      	beq.n	8002f6e <RCCEx_PLLSAI1_Config+0x62>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d009      	beq.n	8002f80 <RCCEx_PLLSAI1_Config+0x74>
 8002f6c:	e020      	b.n	8002fb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11d      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7e:	e01a      	b.n	8002fb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f80:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d116      	bne.n	8002fba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e013      	b.n	8002fba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f92:	4b56      	ldr	r3, [pc, #344]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f9e:	4b53      	ldr	r3, [pc, #332]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fae:	e006      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb4:	e004      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10d      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fc6:	4b49      	ldr	r3, [pc, #292]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	4943      	ldr	r1, [pc, #268]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d17c      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fe8:	4b40      	ldr	r3, [pc, #256]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fd fe94 	bl	8000d20 <HAL_GetTick>
 8002ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ffa:	e009      	b.n	8003010 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ffc:	f7fd fe90 	bl	8000d20 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d902      	bls.n	8003010 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	73fb      	strb	r3, [r7, #15]
        break;
 800300e:	e005      	b.n	800301c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ef      	bne.n	8002ffc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d15f      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d110      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003030:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	0211      	lsls	r1, r2, #8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	06d2      	lsls	r2, r2, #27
 8003040:	430a      	orrs	r2, r1
 8003042:	492a      	ldr	r1, [pc, #168]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	610b      	str	r3, [r1, #16]
 8003048:	e027      	b.n	800309a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d112      	bne.n	8003076 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003058:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6892      	ldr	r2, [r2, #8]
 8003060:	0211      	lsls	r1, r2, #8
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6912      	ldr	r2, [r2, #16]
 8003066:	0852      	lsrs	r2, r2, #1
 8003068:	3a01      	subs	r2, #1
 800306a:	0552      	lsls	r2, r2, #21
 800306c:	430a      	orrs	r2, r1
 800306e:	491f      	ldr	r1, [pc, #124]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003070:	4313      	orrs	r3, r2
 8003072:	610b      	str	r3, [r1, #16]
 8003074:	e011      	b.n	800309a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800307e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	0211      	lsls	r1, r2, #8
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6952      	ldr	r2, [r2, #20]
 800308c:	0852      	lsrs	r2, r2, #1
 800308e:	3a01      	subs	r2, #1
 8003090:	0652      	lsls	r2, r2, #25
 8003092:	430a      	orrs	r2, r1
 8003094:	4915      	ldr	r1, [pc, #84]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003096:	4313      	orrs	r3, r2
 8003098:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a13      	ldr	r2, [pc, #76]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fd fe3b 	bl	8000d20 <HAL_GetTick>
 80030aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ac:	e009      	b.n	80030c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ae:	f7fd fe37 	bl	8000d20 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d902      	bls.n	80030c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	73fb      	strb	r3, [r7, #15]
          break;
 80030c0:	e005      	b.n	80030ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ef      	beq.n	80030ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	4903      	ldr	r1, [pc, #12]	; (80030ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <__errno>:
 80030f0:	4b01      	ldr	r3, [pc, #4]	; (80030f8 <__errno+0x8>)
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	2000000c 	.word	0x2000000c

080030fc <__libc_init_array>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	4d0d      	ldr	r5, [pc, #52]	; (8003134 <__libc_init_array+0x38>)
 8003100:	4c0d      	ldr	r4, [pc, #52]	; (8003138 <__libc_init_array+0x3c>)
 8003102:	1b64      	subs	r4, r4, r5
 8003104:	10a4      	asrs	r4, r4, #2
 8003106:	2600      	movs	r6, #0
 8003108:	42a6      	cmp	r6, r4
 800310a:	d109      	bne.n	8003120 <__libc_init_array+0x24>
 800310c:	4d0b      	ldr	r5, [pc, #44]	; (800313c <__libc_init_array+0x40>)
 800310e:	4c0c      	ldr	r4, [pc, #48]	; (8003140 <__libc_init_array+0x44>)
 8003110:	f000 fc8e 	bl	8003a30 <_init>
 8003114:	1b64      	subs	r4, r4, r5
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	2600      	movs	r6, #0
 800311a:	42a6      	cmp	r6, r4
 800311c:	d105      	bne.n	800312a <__libc_init_array+0x2e>
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	f855 3b04 	ldr.w	r3, [r5], #4
 8003124:	4798      	blx	r3
 8003126:	3601      	adds	r6, #1
 8003128:	e7ee      	b.n	8003108 <__libc_init_array+0xc>
 800312a:	f855 3b04 	ldr.w	r3, [r5], #4
 800312e:	4798      	blx	r3
 8003130:	3601      	adds	r6, #1
 8003132:	e7f2      	b.n	800311a <__libc_init_array+0x1e>
 8003134:	08004258 	.word	0x08004258
 8003138:	08004258 	.word	0x08004258
 800313c:	08004258 	.word	0x08004258
 8003140:	0800425c 	.word	0x0800425c

08003144 <memcpy>:
 8003144:	440a      	add	r2, r1
 8003146:	4291      	cmp	r1, r2
 8003148:	f100 33ff 	add.w	r3, r0, #4294967295
 800314c:	d100      	bne.n	8003150 <memcpy+0xc>
 800314e:	4770      	bx	lr
 8003150:	b510      	push	{r4, lr}
 8003152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800315a:	4291      	cmp	r1, r2
 800315c:	d1f9      	bne.n	8003152 <memcpy+0xe>
 800315e:	bd10      	pop	{r4, pc}

08003160 <memset>:
 8003160:	4402      	add	r2, r0
 8003162:	4603      	mov	r3, r0
 8003164:	4293      	cmp	r3, r2
 8003166:	d100      	bne.n	800316a <memset+0xa>
 8003168:	4770      	bx	lr
 800316a:	f803 1b01 	strb.w	r1, [r3], #1
 800316e:	e7f9      	b.n	8003164 <memset+0x4>

08003170 <siprintf>:
 8003170:	b40e      	push	{r1, r2, r3}
 8003172:	b500      	push	{lr}
 8003174:	b09c      	sub	sp, #112	; 0x70
 8003176:	ab1d      	add	r3, sp, #116	; 0x74
 8003178:	9002      	str	r0, [sp, #8]
 800317a:	9006      	str	r0, [sp, #24]
 800317c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003180:	4809      	ldr	r0, [pc, #36]	; (80031a8 <siprintf+0x38>)
 8003182:	9107      	str	r1, [sp, #28]
 8003184:	9104      	str	r1, [sp, #16]
 8003186:	4909      	ldr	r1, [pc, #36]	; (80031ac <siprintf+0x3c>)
 8003188:	f853 2b04 	ldr.w	r2, [r3], #4
 800318c:	9105      	str	r1, [sp, #20]
 800318e:	6800      	ldr	r0, [r0, #0]
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	a902      	add	r1, sp, #8
 8003194:	f000 f868 	bl	8003268 <_svfiprintf_r>
 8003198:	9b02      	ldr	r3, [sp, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	b01c      	add	sp, #112	; 0x70
 80031a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031a4:	b003      	add	sp, #12
 80031a6:	4770      	bx	lr
 80031a8:	2000000c 	.word	0x2000000c
 80031ac:	ffff0208 	.word	0xffff0208

080031b0 <__ssputs_r>:
 80031b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b4:	688e      	ldr	r6, [r1, #8]
 80031b6:	429e      	cmp	r6, r3
 80031b8:	4682      	mov	sl, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4690      	mov	r8, r2
 80031be:	461f      	mov	r7, r3
 80031c0:	d838      	bhi.n	8003234 <__ssputs_r+0x84>
 80031c2:	898a      	ldrh	r2, [r1, #12]
 80031c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031c8:	d032      	beq.n	8003230 <__ssputs_r+0x80>
 80031ca:	6825      	ldr	r5, [r4, #0]
 80031cc:	6909      	ldr	r1, [r1, #16]
 80031ce:	eba5 0901 	sub.w	r9, r5, r1
 80031d2:	6965      	ldr	r5, [r4, #20]
 80031d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031dc:	3301      	adds	r3, #1
 80031de:	444b      	add	r3, r9
 80031e0:	106d      	asrs	r5, r5, #1
 80031e2:	429d      	cmp	r5, r3
 80031e4:	bf38      	it	cc
 80031e6:	461d      	movcc	r5, r3
 80031e8:	0553      	lsls	r3, r2, #21
 80031ea:	d531      	bpl.n	8003250 <__ssputs_r+0xa0>
 80031ec:	4629      	mov	r1, r5
 80031ee:	f000 fb55 	bl	800389c <_malloc_r>
 80031f2:	4606      	mov	r6, r0
 80031f4:	b950      	cbnz	r0, 800320c <__ssputs_r+0x5c>
 80031f6:	230c      	movs	r3, #12
 80031f8:	f8ca 3000 	str.w	r3, [sl]
 80031fc:	89a3      	ldrh	r3, [r4, #12]
 80031fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003202:	81a3      	strh	r3, [r4, #12]
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800320c:	6921      	ldr	r1, [r4, #16]
 800320e:	464a      	mov	r2, r9
 8003210:	f7ff ff98 	bl	8003144 <memcpy>
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	81a3      	strh	r3, [r4, #12]
 8003220:	6126      	str	r6, [r4, #16]
 8003222:	6165      	str	r5, [r4, #20]
 8003224:	444e      	add	r6, r9
 8003226:	eba5 0509 	sub.w	r5, r5, r9
 800322a:	6026      	str	r6, [r4, #0]
 800322c:	60a5      	str	r5, [r4, #8]
 800322e:	463e      	mov	r6, r7
 8003230:	42be      	cmp	r6, r7
 8003232:	d900      	bls.n	8003236 <__ssputs_r+0x86>
 8003234:	463e      	mov	r6, r7
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	4632      	mov	r2, r6
 800323a:	4641      	mov	r1, r8
 800323c:	f000 faa8 	bl	8003790 <memmove>
 8003240:	68a3      	ldr	r3, [r4, #8]
 8003242:	1b9b      	subs	r3, r3, r6
 8003244:	60a3      	str	r3, [r4, #8]
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	4433      	add	r3, r6
 800324a:	6023      	str	r3, [r4, #0]
 800324c:	2000      	movs	r0, #0
 800324e:	e7db      	b.n	8003208 <__ssputs_r+0x58>
 8003250:	462a      	mov	r2, r5
 8003252:	f000 fb97 	bl	8003984 <_realloc_r>
 8003256:	4606      	mov	r6, r0
 8003258:	2800      	cmp	r0, #0
 800325a:	d1e1      	bne.n	8003220 <__ssputs_r+0x70>
 800325c:	6921      	ldr	r1, [r4, #16]
 800325e:	4650      	mov	r0, sl
 8003260:	f000 fab0 	bl	80037c4 <_free_r>
 8003264:	e7c7      	b.n	80031f6 <__ssputs_r+0x46>
	...

08003268 <_svfiprintf_r>:
 8003268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326c:	4698      	mov	r8, r3
 800326e:	898b      	ldrh	r3, [r1, #12]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	b09d      	sub	sp, #116	; 0x74
 8003274:	4607      	mov	r7, r0
 8003276:	460d      	mov	r5, r1
 8003278:	4614      	mov	r4, r2
 800327a:	d50e      	bpl.n	800329a <_svfiprintf_r+0x32>
 800327c:	690b      	ldr	r3, [r1, #16]
 800327e:	b963      	cbnz	r3, 800329a <_svfiprintf_r+0x32>
 8003280:	2140      	movs	r1, #64	; 0x40
 8003282:	f000 fb0b 	bl	800389c <_malloc_r>
 8003286:	6028      	str	r0, [r5, #0]
 8003288:	6128      	str	r0, [r5, #16]
 800328a:	b920      	cbnz	r0, 8003296 <_svfiprintf_r+0x2e>
 800328c:	230c      	movs	r3, #12
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	e0d1      	b.n	800343a <_svfiprintf_r+0x1d2>
 8003296:	2340      	movs	r3, #64	; 0x40
 8003298:	616b      	str	r3, [r5, #20]
 800329a:	2300      	movs	r3, #0
 800329c:	9309      	str	r3, [sp, #36]	; 0x24
 800329e:	2320      	movs	r3, #32
 80032a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032a8:	2330      	movs	r3, #48	; 0x30
 80032aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003454 <_svfiprintf_r+0x1ec>
 80032ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032b2:	f04f 0901 	mov.w	r9, #1
 80032b6:	4623      	mov	r3, r4
 80032b8:	469a      	mov	sl, r3
 80032ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032be:	b10a      	cbz	r2, 80032c4 <_svfiprintf_r+0x5c>
 80032c0:	2a25      	cmp	r2, #37	; 0x25
 80032c2:	d1f9      	bne.n	80032b8 <_svfiprintf_r+0x50>
 80032c4:	ebba 0b04 	subs.w	fp, sl, r4
 80032c8:	d00b      	beq.n	80032e2 <_svfiprintf_r+0x7a>
 80032ca:	465b      	mov	r3, fp
 80032cc:	4622      	mov	r2, r4
 80032ce:	4629      	mov	r1, r5
 80032d0:	4638      	mov	r0, r7
 80032d2:	f7ff ff6d 	bl	80031b0 <__ssputs_r>
 80032d6:	3001      	adds	r0, #1
 80032d8:	f000 80aa 	beq.w	8003430 <_svfiprintf_r+0x1c8>
 80032dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032de:	445a      	add	r2, fp
 80032e0:	9209      	str	r2, [sp, #36]	; 0x24
 80032e2:	f89a 3000 	ldrb.w	r3, [sl]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a2 	beq.w	8003430 <_svfiprintf_r+0x1c8>
 80032ec:	2300      	movs	r3, #0
 80032ee:	f04f 32ff 	mov.w	r2, #4294967295
 80032f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032f6:	f10a 0a01 	add.w	sl, sl, #1
 80032fa:	9304      	str	r3, [sp, #16]
 80032fc:	9307      	str	r3, [sp, #28]
 80032fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003302:	931a      	str	r3, [sp, #104]	; 0x68
 8003304:	4654      	mov	r4, sl
 8003306:	2205      	movs	r2, #5
 8003308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800330c:	4851      	ldr	r0, [pc, #324]	; (8003454 <_svfiprintf_r+0x1ec>)
 800330e:	f7fc ff5f 	bl	80001d0 <memchr>
 8003312:	9a04      	ldr	r2, [sp, #16]
 8003314:	b9d8      	cbnz	r0, 800334e <_svfiprintf_r+0xe6>
 8003316:	06d0      	lsls	r0, r2, #27
 8003318:	bf44      	itt	mi
 800331a:	2320      	movmi	r3, #32
 800331c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003320:	0711      	lsls	r1, r2, #28
 8003322:	bf44      	itt	mi
 8003324:	232b      	movmi	r3, #43	; 0x2b
 8003326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800332a:	f89a 3000 	ldrb.w	r3, [sl]
 800332e:	2b2a      	cmp	r3, #42	; 0x2a
 8003330:	d015      	beq.n	800335e <_svfiprintf_r+0xf6>
 8003332:	9a07      	ldr	r2, [sp, #28]
 8003334:	4654      	mov	r4, sl
 8003336:	2000      	movs	r0, #0
 8003338:	f04f 0c0a 	mov.w	ip, #10
 800333c:	4621      	mov	r1, r4
 800333e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003342:	3b30      	subs	r3, #48	; 0x30
 8003344:	2b09      	cmp	r3, #9
 8003346:	d94e      	bls.n	80033e6 <_svfiprintf_r+0x17e>
 8003348:	b1b0      	cbz	r0, 8003378 <_svfiprintf_r+0x110>
 800334a:	9207      	str	r2, [sp, #28]
 800334c:	e014      	b.n	8003378 <_svfiprintf_r+0x110>
 800334e:	eba0 0308 	sub.w	r3, r0, r8
 8003352:	fa09 f303 	lsl.w	r3, r9, r3
 8003356:	4313      	orrs	r3, r2
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	46a2      	mov	sl, r4
 800335c:	e7d2      	b.n	8003304 <_svfiprintf_r+0x9c>
 800335e:	9b03      	ldr	r3, [sp, #12]
 8003360:	1d19      	adds	r1, r3, #4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	9103      	str	r1, [sp, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	bfbb      	ittet	lt
 800336a:	425b      	neglt	r3, r3
 800336c:	f042 0202 	orrlt.w	r2, r2, #2
 8003370:	9307      	strge	r3, [sp, #28]
 8003372:	9307      	strlt	r3, [sp, #28]
 8003374:	bfb8      	it	lt
 8003376:	9204      	strlt	r2, [sp, #16]
 8003378:	7823      	ldrb	r3, [r4, #0]
 800337a:	2b2e      	cmp	r3, #46	; 0x2e
 800337c:	d10c      	bne.n	8003398 <_svfiprintf_r+0x130>
 800337e:	7863      	ldrb	r3, [r4, #1]
 8003380:	2b2a      	cmp	r3, #42	; 0x2a
 8003382:	d135      	bne.n	80033f0 <_svfiprintf_r+0x188>
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	1d1a      	adds	r2, r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	9203      	str	r2, [sp, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	bfb8      	it	lt
 8003390:	f04f 33ff 	movlt.w	r3, #4294967295
 8003394:	3402      	adds	r4, #2
 8003396:	9305      	str	r3, [sp, #20]
 8003398:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003464 <_svfiprintf_r+0x1fc>
 800339c:	7821      	ldrb	r1, [r4, #0]
 800339e:	2203      	movs	r2, #3
 80033a0:	4650      	mov	r0, sl
 80033a2:	f7fc ff15 	bl	80001d0 <memchr>
 80033a6:	b140      	cbz	r0, 80033ba <_svfiprintf_r+0x152>
 80033a8:	2340      	movs	r3, #64	; 0x40
 80033aa:	eba0 000a 	sub.w	r0, r0, sl
 80033ae:	fa03 f000 	lsl.w	r0, r3, r0
 80033b2:	9b04      	ldr	r3, [sp, #16]
 80033b4:	4303      	orrs	r3, r0
 80033b6:	3401      	adds	r4, #1
 80033b8:	9304      	str	r3, [sp, #16]
 80033ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033be:	4826      	ldr	r0, [pc, #152]	; (8003458 <_svfiprintf_r+0x1f0>)
 80033c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033c4:	2206      	movs	r2, #6
 80033c6:	f7fc ff03 	bl	80001d0 <memchr>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d038      	beq.n	8003440 <_svfiprintf_r+0x1d8>
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <_svfiprintf_r+0x1f4>)
 80033d0:	bb1b      	cbnz	r3, 800341a <_svfiprintf_r+0x1b2>
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	3307      	adds	r3, #7
 80033d6:	f023 0307 	bic.w	r3, r3, #7
 80033da:	3308      	adds	r3, #8
 80033dc:	9303      	str	r3, [sp, #12]
 80033de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e0:	4433      	add	r3, r6
 80033e2:	9309      	str	r3, [sp, #36]	; 0x24
 80033e4:	e767      	b.n	80032b6 <_svfiprintf_r+0x4e>
 80033e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80033ea:	460c      	mov	r4, r1
 80033ec:	2001      	movs	r0, #1
 80033ee:	e7a5      	b.n	800333c <_svfiprintf_r+0xd4>
 80033f0:	2300      	movs	r3, #0
 80033f2:	3401      	adds	r4, #1
 80033f4:	9305      	str	r3, [sp, #20]
 80033f6:	4619      	mov	r1, r3
 80033f8:	f04f 0c0a 	mov.w	ip, #10
 80033fc:	4620      	mov	r0, r4
 80033fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003402:	3a30      	subs	r2, #48	; 0x30
 8003404:	2a09      	cmp	r2, #9
 8003406:	d903      	bls.n	8003410 <_svfiprintf_r+0x1a8>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0c5      	beq.n	8003398 <_svfiprintf_r+0x130>
 800340c:	9105      	str	r1, [sp, #20]
 800340e:	e7c3      	b.n	8003398 <_svfiprintf_r+0x130>
 8003410:	fb0c 2101 	mla	r1, ip, r1, r2
 8003414:	4604      	mov	r4, r0
 8003416:	2301      	movs	r3, #1
 8003418:	e7f0      	b.n	80033fc <_svfiprintf_r+0x194>
 800341a:	ab03      	add	r3, sp, #12
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	462a      	mov	r2, r5
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <_svfiprintf_r+0x1f8>)
 8003422:	a904      	add	r1, sp, #16
 8003424:	4638      	mov	r0, r7
 8003426:	f3af 8000 	nop.w
 800342a:	1c42      	adds	r2, r0, #1
 800342c:	4606      	mov	r6, r0
 800342e:	d1d6      	bne.n	80033de <_svfiprintf_r+0x176>
 8003430:	89ab      	ldrh	r3, [r5, #12]
 8003432:	065b      	lsls	r3, r3, #25
 8003434:	f53f af2c 	bmi.w	8003290 <_svfiprintf_r+0x28>
 8003438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800343a:	b01d      	add	sp, #116	; 0x74
 800343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003440:	ab03      	add	r3, sp, #12
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	462a      	mov	r2, r5
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <_svfiprintf_r+0x1f8>)
 8003448:	a904      	add	r1, sp, #16
 800344a:	4638      	mov	r0, r7
 800344c:	f000 f87a 	bl	8003544 <_printf_i>
 8003450:	e7eb      	b.n	800342a <_svfiprintf_r+0x1c2>
 8003452:	bf00      	nop
 8003454:	08004224 	.word	0x08004224
 8003458:	0800422e 	.word	0x0800422e
 800345c:	00000000 	.word	0x00000000
 8003460:	080031b1 	.word	0x080031b1
 8003464:	0800422a 	.word	0x0800422a

08003468 <_printf_common>:
 8003468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800346c:	4616      	mov	r6, r2
 800346e:	4699      	mov	r9, r3
 8003470:	688a      	ldr	r2, [r1, #8]
 8003472:	690b      	ldr	r3, [r1, #16]
 8003474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003478:	4293      	cmp	r3, r2
 800347a:	bfb8      	it	lt
 800347c:	4613      	movlt	r3, r2
 800347e:	6033      	str	r3, [r6, #0]
 8003480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003484:	4607      	mov	r7, r0
 8003486:	460c      	mov	r4, r1
 8003488:	b10a      	cbz	r2, 800348e <_printf_common+0x26>
 800348a:	3301      	adds	r3, #1
 800348c:	6033      	str	r3, [r6, #0]
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	0699      	lsls	r1, r3, #26
 8003492:	bf42      	ittt	mi
 8003494:	6833      	ldrmi	r3, [r6, #0]
 8003496:	3302      	addmi	r3, #2
 8003498:	6033      	strmi	r3, [r6, #0]
 800349a:	6825      	ldr	r5, [r4, #0]
 800349c:	f015 0506 	ands.w	r5, r5, #6
 80034a0:	d106      	bne.n	80034b0 <_printf_common+0x48>
 80034a2:	f104 0a19 	add.w	sl, r4, #25
 80034a6:	68e3      	ldr	r3, [r4, #12]
 80034a8:	6832      	ldr	r2, [r6, #0]
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	42ab      	cmp	r3, r5
 80034ae:	dc26      	bgt.n	80034fe <_printf_common+0x96>
 80034b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034b4:	1e13      	subs	r3, r2, #0
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	bf18      	it	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	0692      	lsls	r2, r2, #26
 80034be:	d42b      	bmi.n	8003518 <_printf_common+0xb0>
 80034c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034c4:	4649      	mov	r1, r9
 80034c6:	4638      	mov	r0, r7
 80034c8:	47c0      	blx	r8
 80034ca:	3001      	adds	r0, #1
 80034cc:	d01e      	beq.n	800350c <_printf_common+0xa4>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	68e5      	ldr	r5, [r4, #12]
 80034d2:	6832      	ldr	r2, [r6, #0]
 80034d4:	f003 0306 	and.w	r3, r3, #6
 80034d8:	2b04      	cmp	r3, #4
 80034da:	bf08      	it	eq
 80034dc:	1aad      	subeq	r5, r5, r2
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	6922      	ldr	r2, [r4, #16]
 80034e2:	bf0c      	ite	eq
 80034e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034e8:	2500      	movne	r5, #0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfc4      	itt	gt
 80034ee:	1a9b      	subgt	r3, r3, r2
 80034f0:	18ed      	addgt	r5, r5, r3
 80034f2:	2600      	movs	r6, #0
 80034f4:	341a      	adds	r4, #26
 80034f6:	42b5      	cmp	r5, r6
 80034f8:	d11a      	bne.n	8003530 <_printf_common+0xc8>
 80034fa:	2000      	movs	r0, #0
 80034fc:	e008      	b.n	8003510 <_printf_common+0xa8>
 80034fe:	2301      	movs	r3, #1
 8003500:	4652      	mov	r2, sl
 8003502:	4649      	mov	r1, r9
 8003504:	4638      	mov	r0, r7
 8003506:	47c0      	blx	r8
 8003508:	3001      	adds	r0, #1
 800350a:	d103      	bne.n	8003514 <_printf_common+0xac>
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003514:	3501      	adds	r5, #1
 8003516:	e7c6      	b.n	80034a6 <_printf_common+0x3e>
 8003518:	18e1      	adds	r1, r4, r3
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	2030      	movs	r0, #48	; 0x30
 800351e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003522:	4422      	add	r2, r4
 8003524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800352c:	3302      	adds	r3, #2
 800352e:	e7c7      	b.n	80034c0 <_printf_common+0x58>
 8003530:	2301      	movs	r3, #1
 8003532:	4622      	mov	r2, r4
 8003534:	4649      	mov	r1, r9
 8003536:	4638      	mov	r0, r7
 8003538:	47c0      	blx	r8
 800353a:	3001      	adds	r0, #1
 800353c:	d0e6      	beq.n	800350c <_printf_common+0xa4>
 800353e:	3601      	adds	r6, #1
 8003540:	e7d9      	b.n	80034f6 <_printf_common+0x8e>
	...

08003544 <_printf_i>:
 8003544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	7e0f      	ldrb	r7, [r1, #24]
 800354a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800354c:	2f78      	cmp	r7, #120	; 0x78
 800354e:	4691      	mov	r9, r2
 8003550:	4680      	mov	r8, r0
 8003552:	460c      	mov	r4, r1
 8003554:	469a      	mov	sl, r3
 8003556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800355a:	d807      	bhi.n	800356c <_printf_i+0x28>
 800355c:	2f62      	cmp	r7, #98	; 0x62
 800355e:	d80a      	bhi.n	8003576 <_printf_i+0x32>
 8003560:	2f00      	cmp	r7, #0
 8003562:	f000 80d8 	beq.w	8003716 <_printf_i+0x1d2>
 8003566:	2f58      	cmp	r7, #88	; 0x58
 8003568:	f000 80a3 	beq.w	80036b2 <_printf_i+0x16e>
 800356c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003574:	e03a      	b.n	80035ec <_printf_i+0xa8>
 8003576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800357a:	2b15      	cmp	r3, #21
 800357c:	d8f6      	bhi.n	800356c <_printf_i+0x28>
 800357e:	a101      	add	r1, pc, #4	; (adr r1, 8003584 <_printf_i+0x40>)
 8003580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003584:	080035dd 	.word	0x080035dd
 8003588:	080035f1 	.word	0x080035f1
 800358c:	0800356d 	.word	0x0800356d
 8003590:	0800356d 	.word	0x0800356d
 8003594:	0800356d 	.word	0x0800356d
 8003598:	0800356d 	.word	0x0800356d
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	0800356d 	.word	0x0800356d
 80035a4:	0800356d 	.word	0x0800356d
 80035a8:	0800356d 	.word	0x0800356d
 80035ac:	0800356d 	.word	0x0800356d
 80035b0:	080036fd 	.word	0x080036fd
 80035b4:	08003621 	.word	0x08003621
 80035b8:	080036df 	.word	0x080036df
 80035bc:	0800356d 	.word	0x0800356d
 80035c0:	0800356d 	.word	0x0800356d
 80035c4:	0800371f 	.word	0x0800371f
 80035c8:	0800356d 	.word	0x0800356d
 80035cc:	08003621 	.word	0x08003621
 80035d0:	0800356d 	.word	0x0800356d
 80035d4:	0800356d 	.word	0x0800356d
 80035d8:	080036e7 	.word	0x080036e7
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	1d1a      	adds	r2, r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	602a      	str	r2, [r5, #0]
 80035e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0a3      	b.n	8003738 <_printf_i+0x1f4>
 80035f0:	6820      	ldr	r0, [r4, #0]
 80035f2:	6829      	ldr	r1, [r5, #0]
 80035f4:	0606      	lsls	r6, r0, #24
 80035f6:	f101 0304 	add.w	r3, r1, #4
 80035fa:	d50a      	bpl.n	8003612 <_printf_i+0xce>
 80035fc:	680e      	ldr	r6, [r1, #0]
 80035fe:	602b      	str	r3, [r5, #0]
 8003600:	2e00      	cmp	r6, #0
 8003602:	da03      	bge.n	800360c <_printf_i+0xc8>
 8003604:	232d      	movs	r3, #45	; 0x2d
 8003606:	4276      	negs	r6, r6
 8003608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360c:	485e      	ldr	r0, [pc, #376]	; (8003788 <_printf_i+0x244>)
 800360e:	230a      	movs	r3, #10
 8003610:	e019      	b.n	8003646 <_printf_i+0x102>
 8003612:	680e      	ldr	r6, [r1, #0]
 8003614:	602b      	str	r3, [r5, #0]
 8003616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800361a:	bf18      	it	ne
 800361c:	b236      	sxthne	r6, r6
 800361e:	e7ef      	b.n	8003600 <_printf_i+0xbc>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	1d19      	adds	r1, r3, #4
 8003626:	6029      	str	r1, [r5, #0]
 8003628:	0601      	lsls	r1, r0, #24
 800362a:	d501      	bpl.n	8003630 <_printf_i+0xec>
 800362c:	681e      	ldr	r6, [r3, #0]
 800362e:	e002      	b.n	8003636 <_printf_i+0xf2>
 8003630:	0646      	lsls	r6, r0, #25
 8003632:	d5fb      	bpl.n	800362c <_printf_i+0xe8>
 8003634:	881e      	ldrh	r6, [r3, #0]
 8003636:	4854      	ldr	r0, [pc, #336]	; (8003788 <_printf_i+0x244>)
 8003638:	2f6f      	cmp	r7, #111	; 0x6f
 800363a:	bf0c      	ite	eq
 800363c:	2308      	moveq	r3, #8
 800363e:	230a      	movne	r3, #10
 8003640:	2100      	movs	r1, #0
 8003642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003646:	6865      	ldr	r5, [r4, #4]
 8003648:	60a5      	str	r5, [r4, #8]
 800364a:	2d00      	cmp	r5, #0
 800364c:	bfa2      	ittt	ge
 800364e:	6821      	ldrge	r1, [r4, #0]
 8003650:	f021 0104 	bicge.w	r1, r1, #4
 8003654:	6021      	strge	r1, [r4, #0]
 8003656:	b90e      	cbnz	r6, 800365c <_printf_i+0x118>
 8003658:	2d00      	cmp	r5, #0
 800365a:	d04d      	beq.n	80036f8 <_printf_i+0x1b4>
 800365c:	4615      	mov	r5, r2
 800365e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003662:	fb03 6711 	mls	r7, r3, r1, r6
 8003666:	5dc7      	ldrb	r7, [r0, r7]
 8003668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800366c:	4637      	mov	r7, r6
 800366e:	42bb      	cmp	r3, r7
 8003670:	460e      	mov	r6, r1
 8003672:	d9f4      	bls.n	800365e <_printf_i+0x11a>
 8003674:	2b08      	cmp	r3, #8
 8003676:	d10b      	bne.n	8003690 <_printf_i+0x14c>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	07de      	lsls	r6, r3, #31
 800367c:	d508      	bpl.n	8003690 <_printf_i+0x14c>
 800367e:	6923      	ldr	r3, [r4, #16]
 8003680:	6861      	ldr	r1, [r4, #4]
 8003682:	4299      	cmp	r1, r3
 8003684:	bfde      	ittt	le
 8003686:	2330      	movle	r3, #48	; 0x30
 8003688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800368c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003690:	1b52      	subs	r2, r2, r5
 8003692:	6122      	str	r2, [r4, #16]
 8003694:	f8cd a000 	str.w	sl, [sp]
 8003698:	464b      	mov	r3, r9
 800369a:	aa03      	add	r2, sp, #12
 800369c:	4621      	mov	r1, r4
 800369e:	4640      	mov	r0, r8
 80036a0:	f7ff fee2 	bl	8003468 <_printf_common>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d14c      	bne.n	8003742 <_printf_i+0x1fe>
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	b004      	add	sp, #16
 80036ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b2:	4835      	ldr	r0, [pc, #212]	; (8003788 <_printf_i+0x244>)
 80036b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036b8:	6829      	ldr	r1, [r5, #0]
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80036c0:	6029      	str	r1, [r5, #0]
 80036c2:	061d      	lsls	r5, r3, #24
 80036c4:	d514      	bpl.n	80036f0 <_printf_i+0x1ac>
 80036c6:	07df      	lsls	r7, r3, #31
 80036c8:	bf44      	itt	mi
 80036ca:	f043 0320 	orrmi.w	r3, r3, #32
 80036ce:	6023      	strmi	r3, [r4, #0]
 80036d0:	b91e      	cbnz	r6, 80036da <_printf_i+0x196>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	f023 0320 	bic.w	r3, r3, #32
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	2310      	movs	r3, #16
 80036dc:	e7b0      	b.n	8003640 <_printf_i+0xfc>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	f043 0320 	orr.w	r3, r3, #32
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	2378      	movs	r3, #120	; 0x78
 80036e8:	4828      	ldr	r0, [pc, #160]	; (800378c <_printf_i+0x248>)
 80036ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ee:	e7e3      	b.n	80036b8 <_printf_i+0x174>
 80036f0:	0659      	lsls	r1, r3, #25
 80036f2:	bf48      	it	mi
 80036f4:	b2b6      	uxthmi	r6, r6
 80036f6:	e7e6      	b.n	80036c6 <_printf_i+0x182>
 80036f8:	4615      	mov	r5, r2
 80036fa:	e7bb      	b.n	8003674 <_printf_i+0x130>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	6826      	ldr	r6, [r4, #0]
 8003700:	6961      	ldr	r1, [r4, #20]
 8003702:	1d18      	adds	r0, r3, #4
 8003704:	6028      	str	r0, [r5, #0]
 8003706:	0635      	lsls	r5, r6, #24
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	d501      	bpl.n	8003710 <_printf_i+0x1cc>
 800370c:	6019      	str	r1, [r3, #0]
 800370e:	e002      	b.n	8003716 <_printf_i+0x1d2>
 8003710:	0670      	lsls	r0, r6, #25
 8003712:	d5fb      	bpl.n	800370c <_printf_i+0x1c8>
 8003714:	8019      	strh	r1, [r3, #0]
 8003716:	2300      	movs	r3, #0
 8003718:	6123      	str	r3, [r4, #16]
 800371a:	4615      	mov	r5, r2
 800371c:	e7ba      	b.n	8003694 <_printf_i+0x150>
 800371e:	682b      	ldr	r3, [r5, #0]
 8003720:	1d1a      	adds	r2, r3, #4
 8003722:	602a      	str	r2, [r5, #0]
 8003724:	681d      	ldr	r5, [r3, #0]
 8003726:	6862      	ldr	r2, [r4, #4]
 8003728:	2100      	movs	r1, #0
 800372a:	4628      	mov	r0, r5
 800372c:	f7fc fd50 	bl	80001d0 <memchr>
 8003730:	b108      	cbz	r0, 8003736 <_printf_i+0x1f2>
 8003732:	1b40      	subs	r0, r0, r5
 8003734:	6060      	str	r0, [r4, #4]
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	6123      	str	r3, [r4, #16]
 800373a:	2300      	movs	r3, #0
 800373c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003740:	e7a8      	b.n	8003694 <_printf_i+0x150>
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	462a      	mov	r2, r5
 8003746:	4649      	mov	r1, r9
 8003748:	4640      	mov	r0, r8
 800374a:	47d0      	blx	sl
 800374c:	3001      	adds	r0, #1
 800374e:	d0ab      	beq.n	80036a8 <_printf_i+0x164>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	079b      	lsls	r3, r3, #30
 8003754:	d413      	bmi.n	800377e <_printf_i+0x23a>
 8003756:	68e0      	ldr	r0, [r4, #12]
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	4298      	cmp	r0, r3
 800375c:	bfb8      	it	lt
 800375e:	4618      	movlt	r0, r3
 8003760:	e7a4      	b.n	80036ac <_printf_i+0x168>
 8003762:	2301      	movs	r3, #1
 8003764:	4632      	mov	r2, r6
 8003766:	4649      	mov	r1, r9
 8003768:	4640      	mov	r0, r8
 800376a:	47d0      	blx	sl
 800376c:	3001      	adds	r0, #1
 800376e:	d09b      	beq.n	80036a8 <_printf_i+0x164>
 8003770:	3501      	adds	r5, #1
 8003772:	68e3      	ldr	r3, [r4, #12]
 8003774:	9903      	ldr	r1, [sp, #12]
 8003776:	1a5b      	subs	r3, r3, r1
 8003778:	42ab      	cmp	r3, r5
 800377a:	dcf2      	bgt.n	8003762 <_printf_i+0x21e>
 800377c:	e7eb      	b.n	8003756 <_printf_i+0x212>
 800377e:	2500      	movs	r5, #0
 8003780:	f104 0619 	add.w	r6, r4, #25
 8003784:	e7f5      	b.n	8003772 <_printf_i+0x22e>
 8003786:	bf00      	nop
 8003788:	08004235 	.word	0x08004235
 800378c:	08004246 	.word	0x08004246

08003790 <memmove>:
 8003790:	4288      	cmp	r0, r1
 8003792:	b510      	push	{r4, lr}
 8003794:	eb01 0402 	add.w	r4, r1, r2
 8003798:	d902      	bls.n	80037a0 <memmove+0x10>
 800379a:	4284      	cmp	r4, r0
 800379c:	4623      	mov	r3, r4
 800379e:	d807      	bhi.n	80037b0 <memmove+0x20>
 80037a0:	1e43      	subs	r3, r0, #1
 80037a2:	42a1      	cmp	r1, r4
 80037a4:	d008      	beq.n	80037b8 <memmove+0x28>
 80037a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037ae:	e7f8      	b.n	80037a2 <memmove+0x12>
 80037b0:	4402      	add	r2, r0
 80037b2:	4601      	mov	r1, r0
 80037b4:	428a      	cmp	r2, r1
 80037b6:	d100      	bne.n	80037ba <memmove+0x2a>
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037c2:	e7f7      	b.n	80037b4 <memmove+0x24>

080037c4 <_free_r>:
 80037c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037c6:	2900      	cmp	r1, #0
 80037c8:	d044      	beq.n	8003854 <_free_r+0x90>
 80037ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ce:	9001      	str	r0, [sp, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f1a1 0404 	sub.w	r4, r1, #4
 80037d6:	bfb8      	it	lt
 80037d8:	18e4      	addlt	r4, r4, r3
 80037da:	f000 f913 	bl	8003a04 <__malloc_lock>
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <_free_r+0x94>)
 80037e0:	9801      	ldr	r0, [sp, #4]
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	b933      	cbnz	r3, 80037f4 <_free_r+0x30>
 80037e6:	6063      	str	r3, [r4, #4]
 80037e8:	6014      	str	r4, [r2, #0]
 80037ea:	b003      	add	sp, #12
 80037ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037f0:	f000 b90e 	b.w	8003a10 <__malloc_unlock>
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	d908      	bls.n	800380a <_free_r+0x46>
 80037f8:	6825      	ldr	r5, [r4, #0]
 80037fa:	1961      	adds	r1, r4, r5
 80037fc:	428b      	cmp	r3, r1
 80037fe:	bf01      	itttt	eq
 8003800:	6819      	ldreq	r1, [r3, #0]
 8003802:	685b      	ldreq	r3, [r3, #4]
 8003804:	1949      	addeq	r1, r1, r5
 8003806:	6021      	streq	r1, [r4, #0]
 8003808:	e7ed      	b.n	80037e6 <_free_r+0x22>
 800380a:	461a      	mov	r2, r3
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	b10b      	cbz	r3, 8003814 <_free_r+0x50>
 8003810:	42a3      	cmp	r3, r4
 8003812:	d9fa      	bls.n	800380a <_free_r+0x46>
 8003814:	6811      	ldr	r1, [r2, #0]
 8003816:	1855      	adds	r5, r2, r1
 8003818:	42a5      	cmp	r5, r4
 800381a:	d10b      	bne.n	8003834 <_free_r+0x70>
 800381c:	6824      	ldr	r4, [r4, #0]
 800381e:	4421      	add	r1, r4
 8003820:	1854      	adds	r4, r2, r1
 8003822:	42a3      	cmp	r3, r4
 8003824:	6011      	str	r1, [r2, #0]
 8003826:	d1e0      	bne.n	80037ea <_free_r+0x26>
 8003828:	681c      	ldr	r4, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	6053      	str	r3, [r2, #4]
 800382e:	4421      	add	r1, r4
 8003830:	6011      	str	r1, [r2, #0]
 8003832:	e7da      	b.n	80037ea <_free_r+0x26>
 8003834:	d902      	bls.n	800383c <_free_r+0x78>
 8003836:	230c      	movs	r3, #12
 8003838:	6003      	str	r3, [r0, #0]
 800383a:	e7d6      	b.n	80037ea <_free_r+0x26>
 800383c:	6825      	ldr	r5, [r4, #0]
 800383e:	1961      	adds	r1, r4, r5
 8003840:	428b      	cmp	r3, r1
 8003842:	bf04      	itt	eq
 8003844:	6819      	ldreq	r1, [r3, #0]
 8003846:	685b      	ldreq	r3, [r3, #4]
 8003848:	6063      	str	r3, [r4, #4]
 800384a:	bf04      	itt	eq
 800384c:	1949      	addeq	r1, r1, r5
 800384e:	6021      	streq	r1, [r4, #0]
 8003850:	6054      	str	r4, [r2, #4]
 8003852:	e7ca      	b.n	80037ea <_free_r+0x26>
 8003854:	b003      	add	sp, #12
 8003856:	bd30      	pop	{r4, r5, pc}
 8003858:	20000308 	.word	0x20000308

0800385c <sbrk_aligned>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4e0e      	ldr	r6, [pc, #56]	; (8003898 <sbrk_aligned+0x3c>)
 8003860:	460c      	mov	r4, r1
 8003862:	6831      	ldr	r1, [r6, #0]
 8003864:	4605      	mov	r5, r0
 8003866:	b911      	cbnz	r1, 800386e <sbrk_aligned+0x12>
 8003868:	f000 f8bc 	bl	80039e4 <_sbrk_r>
 800386c:	6030      	str	r0, [r6, #0]
 800386e:	4621      	mov	r1, r4
 8003870:	4628      	mov	r0, r5
 8003872:	f000 f8b7 	bl	80039e4 <_sbrk_r>
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	d00a      	beq.n	8003890 <sbrk_aligned+0x34>
 800387a:	1cc4      	adds	r4, r0, #3
 800387c:	f024 0403 	bic.w	r4, r4, #3
 8003880:	42a0      	cmp	r0, r4
 8003882:	d007      	beq.n	8003894 <sbrk_aligned+0x38>
 8003884:	1a21      	subs	r1, r4, r0
 8003886:	4628      	mov	r0, r5
 8003888:	f000 f8ac 	bl	80039e4 <_sbrk_r>
 800388c:	3001      	adds	r0, #1
 800388e:	d101      	bne.n	8003894 <sbrk_aligned+0x38>
 8003890:	f04f 34ff 	mov.w	r4, #4294967295
 8003894:	4620      	mov	r0, r4
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	2000030c 	.word	0x2000030c

0800389c <_malloc_r>:
 800389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a0:	1ccd      	adds	r5, r1, #3
 80038a2:	f025 0503 	bic.w	r5, r5, #3
 80038a6:	3508      	adds	r5, #8
 80038a8:	2d0c      	cmp	r5, #12
 80038aa:	bf38      	it	cc
 80038ac:	250c      	movcc	r5, #12
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	4607      	mov	r7, r0
 80038b2:	db01      	blt.n	80038b8 <_malloc_r+0x1c>
 80038b4:	42a9      	cmp	r1, r5
 80038b6:	d905      	bls.n	80038c4 <_malloc_r+0x28>
 80038b8:	230c      	movs	r3, #12
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	2600      	movs	r6, #0
 80038be:	4630      	mov	r0, r6
 80038c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c4:	4e2e      	ldr	r6, [pc, #184]	; (8003980 <_malloc_r+0xe4>)
 80038c6:	f000 f89d 	bl	8003a04 <__malloc_lock>
 80038ca:	6833      	ldr	r3, [r6, #0]
 80038cc:	461c      	mov	r4, r3
 80038ce:	bb34      	cbnz	r4, 800391e <_malloc_r+0x82>
 80038d0:	4629      	mov	r1, r5
 80038d2:	4638      	mov	r0, r7
 80038d4:	f7ff ffc2 	bl	800385c <sbrk_aligned>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	4604      	mov	r4, r0
 80038dc:	d14d      	bne.n	800397a <_malloc_r+0xde>
 80038de:	6834      	ldr	r4, [r6, #0]
 80038e0:	4626      	mov	r6, r4
 80038e2:	2e00      	cmp	r6, #0
 80038e4:	d140      	bne.n	8003968 <_malloc_r+0xcc>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	4631      	mov	r1, r6
 80038ea:	4638      	mov	r0, r7
 80038ec:	eb04 0803 	add.w	r8, r4, r3
 80038f0:	f000 f878 	bl	80039e4 <_sbrk_r>
 80038f4:	4580      	cmp	r8, r0
 80038f6:	d13a      	bne.n	800396e <_malloc_r+0xd2>
 80038f8:	6821      	ldr	r1, [r4, #0]
 80038fa:	3503      	adds	r5, #3
 80038fc:	1a6d      	subs	r5, r5, r1
 80038fe:	f025 0503 	bic.w	r5, r5, #3
 8003902:	3508      	adds	r5, #8
 8003904:	2d0c      	cmp	r5, #12
 8003906:	bf38      	it	cc
 8003908:	250c      	movcc	r5, #12
 800390a:	4629      	mov	r1, r5
 800390c:	4638      	mov	r0, r7
 800390e:	f7ff ffa5 	bl	800385c <sbrk_aligned>
 8003912:	3001      	adds	r0, #1
 8003914:	d02b      	beq.n	800396e <_malloc_r+0xd2>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	442b      	add	r3, r5
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	e00e      	b.n	800393c <_malloc_r+0xa0>
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	1b52      	subs	r2, r2, r5
 8003922:	d41e      	bmi.n	8003962 <_malloc_r+0xc6>
 8003924:	2a0b      	cmp	r2, #11
 8003926:	d916      	bls.n	8003956 <_malloc_r+0xba>
 8003928:	1961      	adds	r1, r4, r5
 800392a:	42a3      	cmp	r3, r4
 800392c:	6025      	str	r5, [r4, #0]
 800392e:	bf18      	it	ne
 8003930:	6059      	strne	r1, [r3, #4]
 8003932:	6863      	ldr	r3, [r4, #4]
 8003934:	bf08      	it	eq
 8003936:	6031      	streq	r1, [r6, #0]
 8003938:	5162      	str	r2, [r4, r5]
 800393a:	604b      	str	r3, [r1, #4]
 800393c:	4638      	mov	r0, r7
 800393e:	f104 060b 	add.w	r6, r4, #11
 8003942:	f000 f865 	bl	8003a10 <__malloc_unlock>
 8003946:	f026 0607 	bic.w	r6, r6, #7
 800394a:	1d23      	adds	r3, r4, #4
 800394c:	1af2      	subs	r2, r6, r3
 800394e:	d0b6      	beq.n	80038be <_malloc_r+0x22>
 8003950:	1b9b      	subs	r3, r3, r6
 8003952:	50a3      	str	r3, [r4, r2]
 8003954:	e7b3      	b.n	80038be <_malloc_r+0x22>
 8003956:	6862      	ldr	r2, [r4, #4]
 8003958:	42a3      	cmp	r3, r4
 800395a:	bf0c      	ite	eq
 800395c:	6032      	streq	r2, [r6, #0]
 800395e:	605a      	strne	r2, [r3, #4]
 8003960:	e7ec      	b.n	800393c <_malloc_r+0xa0>
 8003962:	4623      	mov	r3, r4
 8003964:	6864      	ldr	r4, [r4, #4]
 8003966:	e7b2      	b.n	80038ce <_malloc_r+0x32>
 8003968:	4634      	mov	r4, r6
 800396a:	6876      	ldr	r6, [r6, #4]
 800396c:	e7b9      	b.n	80038e2 <_malloc_r+0x46>
 800396e:	230c      	movs	r3, #12
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4638      	mov	r0, r7
 8003974:	f000 f84c 	bl	8003a10 <__malloc_unlock>
 8003978:	e7a1      	b.n	80038be <_malloc_r+0x22>
 800397a:	6025      	str	r5, [r4, #0]
 800397c:	e7de      	b.n	800393c <_malloc_r+0xa0>
 800397e:	bf00      	nop
 8003980:	20000308 	.word	0x20000308

08003984 <_realloc_r>:
 8003984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003988:	4680      	mov	r8, r0
 800398a:	4614      	mov	r4, r2
 800398c:	460e      	mov	r6, r1
 800398e:	b921      	cbnz	r1, 800399a <_realloc_r+0x16>
 8003990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003994:	4611      	mov	r1, r2
 8003996:	f7ff bf81 	b.w	800389c <_malloc_r>
 800399a:	b92a      	cbnz	r2, 80039a8 <_realloc_r+0x24>
 800399c:	f7ff ff12 	bl	80037c4 <_free_r>
 80039a0:	4625      	mov	r5, r4
 80039a2:	4628      	mov	r0, r5
 80039a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a8:	f000 f838 	bl	8003a1c <_malloc_usable_size_r>
 80039ac:	4284      	cmp	r4, r0
 80039ae:	4607      	mov	r7, r0
 80039b0:	d802      	bhi.n	80039b8 <_realloc_r+0x34>
 80039b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039b6:	d812      	bhi.n	80039de <_realloc_r+0x5a>
 80039b8:	4621      	mov	r1, r4
 80039ba:	4640      	mov	r0, r8
 80039bc:	f7ff ff6e 	bl	800389c <_malloc_r>
 80039c0:	4605      	mov	r5, r0
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d0ed      	beq.n	80039a2 <_realloc_r+0x1e>
 80039c6:	42bc      	cmp	r4, r7
 80039c8:	4622      	mov	r2, r4
 80039ca:	4631      	mov	r1, r6
 80039cc:	bf28      	it	cs
 80039ce:	463a      	movcs	r2, r7
 80039d0:	f7ff fbb8 	bl	8003144 <memcpy>
 80039d4:	4631      	mov	r1, r6
 80039d6:	4640      	mov	r0, r8
 80039d8:	f7ff fef4 	bl	80037c4 <_free_r>
 80039dc:	e7e1      	b.n	80039a2 <_realloc_r+0x1e>
 80039de:	4635      	mov	r5, r6
 80039e0:	e7df      	b.n	80039a2 <_realloc_r+0x1e>
	...

080039e4 <_sbrk_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4d06      	ldr	r5, [pc, #24]	; (8003a00 <_sbrk_r+0x1c>)
 80039e8:	2300      	movs	r3, #0
 80039ea:	4604      	mov	r4, r0
 80039ec:	4608      	mov	r0, r1
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	f7fd f8bc 	bl	8000b6c <_sbrk>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_sbrk_r+0x1a>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_sbrk_r+0x1a>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	20000310 	.word	0x20000310

08003a04 <__malloc_lock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__malloc_lock+0x8>)
 8003a06:	f000 b811 	b.w	8003a2c <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000314 	.word	0x20000314

08003a10 <__malloc_unlock>:
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <__malloc_unlock+0x8>)
 8003a12:	f000 b80c 	b.w	8003a2e <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	20000314 	.word	0x20000314

08003a1c <_malloc_usable_size_r>:
 8003a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a20:	1f18      	subs	r0, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bfbc      	itt	lt
 8003a26:	580b      	ldrlt	r3, [r1, r0]
 8003a28:	18c0      	addlt	r0, r0, r3
 8003a2a:	4770      	bx	lr

08003a2c <__retarget_lock_acquire_recursive>:
 8003a2c:	4770      	bx	lr

08003a2e <__retarget_lock_release_recursive>:
 8003a2e:	4770      	bx	lr

08003a30 <_init>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr

08003a3c <_fini>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr

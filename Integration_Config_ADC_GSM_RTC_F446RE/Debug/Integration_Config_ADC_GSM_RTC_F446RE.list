
Integration_Config_ADC_GSM_RTC_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007624  08007624  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800762c  0800762c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800762c  0800762c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000070  080076a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080076a4  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113b9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cab  00000000  00000000  00031459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00034108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00034e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260b0  00000000  00000000  00035a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ee6  00000000  00000000  0005bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d96d2  00000000  00000000  000719ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b0a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004140  00000000  00000000  0014b0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800711c 	.word	0x0800711c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800711c 	.word	0x0800711c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	; 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__aeabi_d2f>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008b4:	bf24      	itt	cs
 80008b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008be:	d90d      	bls.n	80008dc <__aeabi_d2f+0x30>
 80008c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008d4:	bf08      	it	eq
 80008d6:	f020 0001 	biceq.w	r0, r0, #1
 80008da:	4770      	bx	lr
 80008dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e0:	d121      	bne.n	8000926 <__aeabi_d2f+0x7a>
 80008e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008e6:	bfbc      	itt	lt
 80008e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ec:	4770      	bxlt	lr
 80008ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008f6:	f1c2 0218 	rsb	r2, r2, #24
 80008fa:	f1c2 0c20 	rsb	ip, r2, #32
 80008fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	bf18      	it	ne
 8000908:	f040 0001 	orrne.w	r0, r0, #1
 800090c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000914:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000918:	ea40 000c 	orr.w	r0, r0, ip
 800091c:	fa23 f302 	lsr.w	r3, r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x14>
 8000926:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800092a:	d107      	bne.n	800093c <__aeabi_d2f+0x90>
 800092c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000930:	bf1e      	ittt	ne
 8000932:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000936:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800093a:	4770      	bxne	lr
 800093c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000940:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000944:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b974 	b.w	8000c4c <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	4604      	mov	r4, r0
 8000984:	468e      	mov	lr, r1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d14d      	bne.n	8000a26 <__udivmoddi4+0xaa>
 800098a:	428a      	cmp	r2, r1
 800098c:	4694      	mov	ip, r2
 800098e:	d969      	bls.n	8000a64 <__udivmoddi4+0xe8>
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	b152      	cbz	r2, 80009ac <__udivmoddi4+0x30>
 8000996:	fa01 f302 	lsl.w	r3, r1, r2
 800099a:	f1c2 0120 	rsb	r1, r2, #32
 800099e:	fa20 f101 	lsr.w	r1, r0, r1
 80009a2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009a6:	ea41 0e03 	orr.w	lr, r1, r3
 80009aa:	4094      	lsls	r4, r2
 80009ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b0:	0c21      	lsrs	r1, r4, #16
 80009b2:	fbbe f6f8 	udiv	r6, lr, r8
 80009b6:	fa1f f78c 	uxth.w	r7, ip
 80009ba:	fb08 e316 	mls	r3, r8, r6, lr
 80009be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009c2:	fb06 f107 	mul.w	r1, r6, r7
 80009c6:	4299      	cmp	r1, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x64>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80009d2:	f080 811f 	bcs.w	8000c14 <__udivmoddi4+0x298>
 80009d6:	4299      	cmp	r1, r3
 80009d8:	f240 811c 	bls.w	8000c14 <__udivmoddi4+0x298>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	1a5b      	subs	r3, r3, r1
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f0:	fb00 f707 	mul.w	r7, r0, r7
 80009f4:	42a7      	cmp	r7, r4
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x92>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a00:	f080 810a 	bcs.w	8000c18 <__udivmoddi4+0x29c>
 8000a04:	42a7      	cmp	r7, r4
 8000a06:	f240 8107 	bls.w	8000c18 <__udivmoddi4+0x29c>
 8000a0a:	4464      	add	r4, ip
 8000a0c:	3802      	subs	r0, #2
 8000a0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a12:	1be4      	subs	r4, r4, r7
 8000a14:	2600      	movs	r6, #0
 8000a16:	b11d      	cbz	r5, 8000a20 <__udivmoddi4+0xa4>
 8000a18:	40d4      	lsrs	r4, r2
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a20:	4631      	mov	r1, r6
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d909      	bls.n	8000a3e <__udivmoddi4+0xc2>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	f000 80ef 	beq.w	8000c0e <__udivmoddi4+0x292>
 8000a30:	2600      	movs	r6, #0
 8000a32:	e9c5 0100 	strd	r0, r1, [r5]
 8000a36:	4630      	mov	r0, r6
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	fab3 f683 	clz	r6, r3
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d14a      	bne.n	8000adc <__udivmoddi4+0x160>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d302      	bcc.n	8000a50 <__udivmoddi4+0xd4>
 8000a4a:	4282      	cmp	r2, r0
 8000a4c:	f200 80f9 	bhi.w	8000c42 <__udivmoddi4+0x2c6>
 8000a50:	1a84      	subs	r4, r0, r2
 8000a52:	eb61 0303 	sbc.w	r3, r1, r3
 8000a56:	2001      	movs	r0, #1
 8000a58:	469e      	mov	lr, r3
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d0e0      	beq.n	8000a20 <__udivmoddi4+0xa4>
 8000a5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a62:	e7dd      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000a64:	b902      	cbnz	r2, 8000a68 <__udivmoddi4+0xec>
 8000a66:	deff      	udf	#255	; 0xff
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	f040 8092 	bne.w	8000b96 <__udivmoddi4+0x21a>
 8000a72:	eba1 010c 	sub.w	r1, r1, ip
 8000a76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7a:	fa1f fe8c 	uxth.w	lr, ip
 8000a7e:	2601      	movs	r6, #1
 8000a80:	0c20      	lsrs	r0, r4, #16
 8000a82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a86:	fb07 1113 	mls	r1, r7, r3, r1
 8000a8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a8e:	fb0e f003 	mul.w	r0, lr, r3
 8000a92:	4288      	cmp	r0, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x12c>
 8000a96:	eb1c 0101 	adds.w	r1, ip, r1
 8000a9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x12a>
 8000aa0:	4288      	cmp	r0, r1
 8000aa2:	f200 80cb 	bhi.w	8000c3c <__udivmoddi4+0x2c0>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	1a09      	subs	r1, r1, r0
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ab8:	fb0e fe00 	mul.w	lr, lr, r0
 8000abc:	45a6      	cmp	lr, r4
 8000abe:	d908      	bls.n	8000ad2 <__udivmoddi4+0x156>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac8:	d202      	bcs.n	8000ad0 <__udivmoddi4+0x154>
 8000aca:	45a6      	cmp	lr, r4
 8000acc:	f200 80bb 	bhi.w	8000c46 <__udivmoddi4+0x2ca>
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	eba4 040e 	sub.w	r4, r4, lr
 8000ad6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ada:	e79c      	b.n	8000a16 <__udivmoddi4+0x9a>
 8000adc:	f1c6 0720 	rsb	r7, r6, #32
 8000ae0:	40b3      	lsls	r3, r6
 8000ae2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ae6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aea:	fa20 f407 	lsr.w	r4, r0, r7
 8000aee:	fa01 f306 	lsl.w	r3, r1, r6
 8000af2:	431c      	orrs	r4, r3
 8000af4:	40f9      	lsrs	r1, r7
 8000af6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000afa:	fa00 f306 	lsl.w	r3, r0, r6
 8000afe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b02:	0c20      	lsrs	r0, r4, #16
 8000b04:	fa1f fe8c 	uxth.w	lr, ip
 8000b08:	fb09 1118 	mls	r1, r9, r8, r1
 8000b0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b10:	fb08 f00e 	mul.w	r0, r8, lr
 8000b14:	4288      	cmp	r0, r1
 8000b16:	fa02 f206 	lsl.w	r2, r2, r6
 8000b1a:	d90b      	bls.n	8000b34 <__udivmoddi4+0x1b8>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b24:	f080 8088 	bcs.w	8000c38 <__udivmoddi4+0x2bc>
 8000b28:	4288      	cmp	r0, r1
 8000b2a:	f240 8085 	bls.w	8000c38 <__udivmoddi4+0x2bc>
 8000b2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b32:	4461      	add	r1, ip
 8000b34:	1a09      	subs	r1, r1, r0
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b48:	458e      	cmp	lr, r1
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x1e2>
 8000b4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b54:	d26c      	bcs.n	8000c30 <__udivmoddi4+0x2b4>
 8000b56:	458e      	cmp	lr, r1
 8000b58:	d96a      	bls.n	8000c30 <__udivmoddi4+0x2b4>
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	4461      	add	r1, ip
 8000b5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b62:	fba0 9402 	umull	r9, r4, r0, r2
 8000b66:	eba1 010e 	sub.w	r1, r1, lr
 8000b6a:	42a1      	cmp	r1, r4
 8000b6c:	46c8      	mov	r8, r9
 8000b6e:	46a6      	mov	lr, r4
 8000b70:	d356      	bcc.n	8000c20 <__udivmoddi4+0x2a4>
 8000b72:	d053      	beq.n	8000c1c <__udivmoddi4+0x2a0>
 8000b74:	b15d      	cbz	r5, 8000b8e <__udivmoddi4+0x212>
 8000b76:	ebb3 0208 	subs.w	r2, r3, r8
 8000b7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b82:	fa22 f306 	lsr.w	r3, r2, r6
 8000b86:	40f1      	lsrs	r1, r6
 8000b88:	431f      	orrs	r7, r3
 8000b8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b8e:	2600      	movs	r6, #0
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	40d8      	lsrs	r0, r3
 8000b9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4301      	orrs	r1, r0
 8000ba8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000bb8:	0c0b      	lsrs	r3, r1, #16
 8000bba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000bc2:	429e      	cmp	r6, r3
 8000bc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x260>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bd2:	d22f      	bcs.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd4:	429e      	cmp	r6, r3
 8000bd6:	d92d      	bls.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1b9b      	subs	r3, r3, r6
 8000bde:	b289      	uxth	r1, r1
 8000be0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000be4:	fb07 3316 	mls	r3, r7, r6, r3
 8000be8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bec:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x28a>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bfc:	d216      	bcs.n	8000c2c <__udivmoddi4+0x2b0>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d914      	bls.n	8000c2c <__udivmoddi4+0x2b0>
 8000c02:	3e02      	subs	r6, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	1ac9      	subs	r1, r1, r3
 8000c08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c0c:	e738      	b.n	8000a80 <__udivmoddi4+0x104>
 8000c0e:	462e      	mov	r6, r5
 8000c10:	4628      	mov	r0, r5
 8000c12:	e705      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000c14:	4606      	mov	r6, r0
 8000c16:	e6e3      	b.n	80009e0 <__udivmoddi4+0x64>
 8000c18:	4618      	mov	r0, r3
 8000c1a:	e6f8      	b.n	8000a0e <__udivmoddi4+0x92>
 8000c1c:	454b      	cmp	r3, r9
 8000c1e:	d2a9      	bcs.n	8000b74 <__udivmoddi4+0x1f8>
 8000c20:	ebb9 0802 	subs.w	r8, r9, r2
 8000c24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e7a3      	b.n	8000b74 <__udivmoddi4+0x1f8>
 8000c2c:	4646      	mov	r6, r8
 8000c2e:	e7ea      	b.n	8000c06 <__udivmoddi4+0x28a>
 8000c30:	4620      	mov	r0, r4
 8000c32:	e794      	b.n	8000b5e <__udivmoddi4+0x1e2>
 8000c34:	4640      	mov	r0, r8
 8000c36:	e7d1      	b.n	8000bdc <__udivmoddi4+0x260>
 8000c38:	46d0      	mov	r8, sl
 8000c3a:	e77b      	b.n	8000b34 <__udivmoddi4+0x1b8>
 8000c3c:	3b02      	subs	r3, #2
 8000c3e:	4461      	add	r1, ip
 8000c40:	e732      	b.n	8000aa8 <__udivmoddi4+0x12c>
 8000c42:	4630      	mov	r0, r6
 8000c44:	e709      	b.n	8000a5a <__udivmoddi4+0xde>
 8000c46:	4464      	add	r4, ip
 8000c48:	3802      	subs	r0, #2
 8000c4a:	e742      	b.n	8000ad2 <__udivmoddi4+0x156>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fb04 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f004 fd68 	bl	800572c <SystemClock_Config>
//  MX_UART4_Init();
//  MX_USART1_UART_Init();
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
//  MX_GPIO_Init();
    USER_GPIO_Init();
 8000c5c:	f004 fad4 	bl	8005208 <USER_GPIO_Init>
    USER_I2C1_Init();
 8000c60:	f004 fd36 	bl	80056d0 <USER_I2C1_Init>
    USER_USART3_UART_Init();
 8000c64:	f004 feec 	bl	8005a40 <USER_USART3_UART_Init>
    user_USART1_UART_Init();
 8000c68:	f004 fdce 	bl	8005808 <user_USART1_UART_Init>
    UART4_Init();
 8000c6c:	f004 fb96 	bl	800539c <UART4_Init>
    USER_ADC1_Init();
 8000c70:	f004 fa90 	bl	8005194 <USER_ADC1_Init>

    Gsm_Init();
 8000c74:	f004 fbda 	bl	800542c <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  application();
 8000c78:	f003 fd02 	bl	8004680 <application>
 8000c7c:	e7fc      	b.n	8000c78 <main+0x28>

08000c7e <Error_Handler>:
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
void Error_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c82:	b672      	cpsid	i
}
 8000c84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <Error_Handler+0x8>

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f001 f822 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a31      	ldr	r2, [pc, #196]	; (8000dbc <HAL_ADC_MspInit+0xe4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d15b      	bne.n	8000db2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <HAL_ADC_MspInit+0xec>)
 8000d7e:	f000 fffb 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d82:	2360      	movs	r3, #96	; 0x60
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0xf0>)
 8000d96:	f000 ffef 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4807      	ldr	r0, [pc, #28]	; (8000dcc <HAL_ADC_MspInit+0xf4>)
 8000dae:	f000 ffe3 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40012000 	.word	0x40012000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_I2C_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12c      	bne.n	8000e4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_I2C_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_I2C_MspInit+0x88>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e20:	2304      	movs	r3, #4
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <HAL_I2C_MspInit+0x8c>)
 8000e2c:	f000 ffa4 	bl	8001d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_I2C_MspInit+0x88>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40005400 	.word	0x40005400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020400 	.word	0x40020400

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a5b      	ldr	r2, [pc, #364]	; (8000fec <HAL_UART_MspInit+0x18c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12c      	bne.n	8000edc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
 8000e86:	4b5a      	ldr	r3, [pc, #360]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a59      	ldr	r2, [pc, #356]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b57      	ldr	r3, [pc, #348]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	4b53      	ldr	r3, [pc, #332]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a52      	ldr	r2, [pc, #328]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b50      	ldr	r3, [pc, #320]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4847      	ldr	r0, [pc, #284]	; (8000ff4 <HAL_UART_MspInit+0x194>)
 8000ed6:	f000 ff4f 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eda:	e082      	b.n	8000fe2 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a45      	ldr	r2, [pc, #276]	; (8000ff8 <HAL_UART_MspInit+0x198>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d12d      	bne.n	8000f42 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f30:	2307      	movs	r3, #7
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482e      	ldr	r0, [pc, #184]	; (8000ff4 <HAL_UART_MspInit+0x194>)
 8000f3c:	f000 ff1c 	bl	8001d78 <HAL_GPIO_Init>
}
 8000f40:	e04f      	b.n	8000fe2 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <HAL_UART_MspInit+0x19c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d14a      	bne.n	8000fe2 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_UART_MspInit+0x190>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4811      	ldr	r0, [pc, #68]	; (8001000 <HAL_UART_MspInit+0x1a0>)
 8000fbc:	f000 fedc 	bl	8001d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <HAL_UART_MspInit+0x1a4>)
 8000fde:	f000 fecb 	bl	8001d78 <HAL_GPIO_Init>
}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	; 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40004c00 	.word	0x40004c00
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40004800 	.word	0x40004800
 8001000:	40020800 	.word	0x40020800
 8001004:	40020400 	.word	0x40020400

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f956 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_kill>:

int _kill(int pid, int sig)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001076:	f004 fd11 	bl	8005a9c <__errno>
 800107a:	4603      	mov	r3, r0
 800107c:	2216      	movs	r2, #22
 800107e:	601a      	str	r2, [r3, #0]
  return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_exit>:

void _exit (int status)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffe7 	bl	800106c <_kill>
  while (1) {}    /* Make sure we hang here */
 800109e:	e7fe      	b.n	800109e <_exit+0x12>

080010a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
  }

  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x12>
  }
  return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113a:	605a      	str	r2, [r3, #4]
  return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_isatty>:

int _isatty(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f004 fc76 	bl	8005a9c <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20020000 	.word	0x20020000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	20000168 	.word	0x20000168
 80011e4:	20000438 	.word	0x20000438

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffd7 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f004 fc35 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff fd07 	bl	8000c50 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001250:	08007634 	.word	0x08007634
  ldr r2, =_sbss
 8001254:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001258:	20000438 	.word	0x20000438

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 fd41 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fcf8 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fd4b 	bl	8001d5e <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f000 fd21 	bl	8001d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	2000016c 	.word	0x2000016c

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000016c 	.word	0x2000016c

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008

0800138c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e033      	b.n	800140a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fc94 	bl	8000cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d118      	bne.n	80013fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d2:	f023 0302 	bic.w	r3, r3, #2
 80013d6:	f043 0202 	orr.w	r2, r3, #2
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fae8 	bl	80019b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f023 0303 	bic.w	r3, r3, #3
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
 80013fa:	e001      	b.n	8001400 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_ADC_Start+0x1a>
 800142a:	2302      	movs	r3, #2
 800142c:	e0b2      	b.n	8001594 <HAL_ADC_Start+0x180>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b01      	cmp	r3, #1
 8001442:	d018      	beq.n	8001476 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001454:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <HAL_ADC_Start+0x18c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_ADC_Start+0x190>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9a      	lsrs	r2, r3, #18
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001468:	e002      	b.n	8001470 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3b01      	subs	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f9      	bne.n	800146a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d17a      	bne.n	800157a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c2:	d106      	bne.n	80014d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	f023 0206 	bic.w	r2, r3, #6
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44
 80014d0:	e002      	b.n	80014d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_ADC_Start+0x194>)
 80014e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 031f 	and.w	r3, r3, #31
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d12a      	bne.n	8001550 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <HAL_ADC_Start+0x198>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d015      	beq.n	8001530 <HAL_ADC_Start+0x11c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <HAL_ADC_Start+0x19c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d105      	bne.n	800151a <HAL_ADC_Start+0x106>
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_ADC_Start+0x194>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_ADC_Start+0x1a0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d136      	bne.n	8001592 <HAL_ADC_Start+0x17e>
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_ADC_Start+0x194>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b00      	cmp	r3, #0
 800152e:	d130      	bne.n	8001592 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d129      	bne.n	8001592 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e020      	b.n	8001592 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_ADC_Start+0x198>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11b      	bne.n	8001592 <HAL_ADC_Start+0x17e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d114      	bne.n	8001592 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	e00b      	b.n	8001592 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f043 0210 	orr.w	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83
 80015a8:	40012300 	.word	0x40012300
 80015ac:	40012000 	.word	0x40012000
 80015b0:	40012100 	.word	0x40012100
 80015b4:	40012200 	.word	0x40012200

080015b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_Stop+0x16>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e021      	b.n	8001612 <HAL_ADC_Stop+0x5a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0201 	bic.w	r2, r2, #1
 80015e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d113      	bne.n	8001664 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800164a:	d10b      	bne.n	8001664 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f043 0220 	orr.w	r2, r3, #32
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e063      	b.n	800172c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001664:	f7ff fe62 	bl	800132c <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800166a:	e021      	b.n	80016b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001672:	d01d      	beq.n	80016b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_ADC_PollForConversion+0x6c>
 800167a:	f7ff fe57 	bl	800132c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d212      	bcs.n	80016b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b02      	cmp	r3, #2
 8001696:	d00b      	beq.n	80016b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f043 0204 	orr.w	r2, r3, #4
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e03d      	b.n	800172c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d1d6      	bne.n	800166c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0212 	mvn.w	r2, #18
 80016c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d123      	bne.n	800172a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11f      	bne.n	800172a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001702:	2b00      	cmp	r3, #0
 8001704:	d111      	bne.n	800172a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1c>
 8001768:	2302      	movs	r3, #2
 800176a:	e113      	b.n	8001994 <HAL_ADC_ConfigChannel+0x244>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b09      	cmp	r3, #9
 800177a:	d925      	bls.n	80017c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68d9      	ldr	r1, [r3, #12]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	3b1e      	subs	r3, #30
 8001792:	2207      	movs	r2, #7
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43da      	mvns	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	400a      	ands	r2, r1
 80017a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4403      	add	r3, r0
 80017ba:	3b1e      	subs	r3, #30
 80017bc:	409a      	lsls	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	e022      	b.n	800180e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6919      	ldr	r1, [r3, #16]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	2207      	movs	r2, #7
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6919      	ldr	r1, [r3, #16]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4403      	add	r3, r0
 8001804:	409a      	lsls	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b06      	cmp	r3, #6
 8001814:	d824      	bhi.n	8001860 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b05      	subs	r3, #5
 8001828:	221f      	movs	r2, #31
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	400a      	ands	r2, r1
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b05      	subs	r3, #5
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
 800185e:	e04c      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d824      	bhi.n	80018b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b23      	subs	r3, #35	; 0x23
 800187a:	221f      	movs	r2, #31
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43da      	mvns	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	400a      	ands	r2, r1
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3b23      	subs	r3, #35	; 0x23
 80018a4:	fa00 f203 	lsl.w	r2, r0, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
 80018b0:	e023      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b41      	subs	r3, #65	; 0x41
 80018c4:	221f      	movs	r2, #31
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b41      	subs	r3, #65	; 0x41
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_ADC_ConfigChannel+0x250>)
 80018fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_ADC_ConfigChannel+0x254>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d10f      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d8>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b12      	cmp	r3, #18
 800190e:	d10b      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_ADC_ConfigChannel+0x254>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_ADC_ConfigChannel+0x23a>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <HAL_ADC_ConfigChannel+0x258>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d003      	beq.n	8001944 <HAL_ADC_ConfigChannel+0x1f4>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b11      	cmp	r3, #17
 8001942:	d122      	bne.n	800198a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <HAL_ADC_ConfigChannel+0x258>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d111      	bne.n	800198a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_ADC_ConfigChannel+0x25c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_ADC_ConfigChannel+0x260>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	0c9a      	lsrs	r2, r3, #18
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800197c:	e002      	b.n	8001984 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3b01      	subs	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40012300 	.word	0x40012300
 80019a4:	40012000 	.word	0x40012000
 80019a8:	10000012 	.word	0x10000012
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019bc:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <ADC_Init+0x1f0>)
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	021a      	lsls	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6899      	ldr	r1, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <ADC_Init+0x1f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	e00f      	b.n	8001ab2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0202 	bic.w	r2, r2, #2
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7e1b      	ldrb	r3, [r3, #24]
 8001acc:	005a      	lsls	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001afe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	035a      	lsls	r2, r3, #13
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e007      	b.n	8001b28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	051a      	lsls	r2, r3, #20
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6899      	ldr	r1, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b6a:	025a      	lsls	r2, r3, #9
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6899      	ldr	r1, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	029a      	lsls	r2, r3, #10
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40012300 	.word	0x40012300
 8001ba8:	0f000001 	.word	0x0f000001

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff47 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff5c 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff8e 	bl	8001c64 <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffb0 	bl	8001ccc <SysTick_Config>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e165      	b.n	8002060 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	f040 8154 	bne.w	800205a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d005      	beq.n	8001dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d130      	bne.n	8001e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e00:	2201      	movs	r2, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 0201 	and.w	r2, r3, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d017      	beq.n	8001e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80ae 	beq.w	800205a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_GPIO_Init+0x300>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_GPIO_Init+0x300>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_GPIO_Init+0x300>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1a:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_GPIO_Init+0x304>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4f      	ldr	r2, [pc, #316]	; (8002080 <HAL_GPIO_Init+0x308>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d025      	beq.n	8001f92 <HAL_GPIO_Init+0x21a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4e      	ldr	r2, [pc, #312]	; (8002084 <HAL_GPIO_Init+0x30c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01f      	beq.n	8001f8e <HAL_GPIO_Init+0x216>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <HAL_GPIO_Init+0x310>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d019      	beq.n	8001f8a <HAL_GPIO_Init+0x212>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	; (800208c <HAL_GPIO_Init+0x314>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0x20e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_GPIO_Init+0x318>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00d      	beq.n	8001f82 <HAL_GPIO_Init+0x20a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4a      	ldr	r2, [pc, #296]	; (8002094 <HAL_GPIO_Init+0x31c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_Init+0x206>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a49      	ldr	r2, [pc, #292]	; (8002098 <HAL_GPIO_Init+0x320>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_GPIO_Init+0x202>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e00c      	b.n	8001f94 <HAL_GPIO_Init+0x21c>
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	e00a      	b.n	8001f94 <HAL_GPIO_Init+0x21c>
 8001f7e:	2305      	movs	r3, #5
 8001f80:	e008      	b.n	8001f94 <HAL_GPIO_Init+0x21c>
 8001f82:	2304      	movs	r3, #4
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x21c>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e004      	b.n	8001f94 <HAL_GPIO_Init+0x21c>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_Init+0x21c>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x21c>
 8001f92:	2300      	movs	r3, #0
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	f002 0203 	and.w	r2, r2, #3
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	4093      	lsls	r3, r2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa4:	4935      	ldr	r1, [pc, #212]	; (800207c <HAL_GPIO_Init+0x304>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_GPIO_Init+0x324>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a31      	ldr	r2, [pc, #196]	; (800209c <HAL_GPIO_Init+0x324>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <HAL_GPIO_Init+0x324>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <HAL_GPIO_Init+0x324>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_GPIO_Init+0x324>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202a:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_GPIO_Init+0x324>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_GPIO_Init+0x324>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002054:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_GPIO_Init+0x324>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3301      	adds	r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	f67f ae96 	bls.w	8001d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40013800 	.word	0x40013800
 8002080:	40020000 	.word	0x40020000
 8002084:	40020400 	.word	0x40020400
 8002088:	40020800 	.word	0x40020800
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40021000 	.word	0x40021000
 8002094:	40021400 	.word	0x40021400
 8002098:	40021800 	.word	0x40021800
 800209c:	40013c00 	.word	0x40013c00

080020a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e001      	b.n	80020c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
 80020dc:	4613      	mov	r3, r2
 80020de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e0:	787b      	ldrb	r3, [r7, #1]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ec:	e003      	b.n	80020f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e12b      	b.n	800236e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fe50 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002168:	f001 f87e 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 800216c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a81      	ldr	r2, [pc, #516]	; (8002378 <HAL_I2C_Init+0x274>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d807      	bhi.n	8002188 <HAL_I2C_Init+0x84>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a80      	ldr	r2, [pc, #512]	; (800237c <HAL_I2C_Init+0x278>)
 800217c:	4293      	cmp	r3, r2
 800217e:	bf94      	ite	ls
 8002180:	2301      	movls	r3, #1
 8002182:	2300      	movhi	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e006      	b.n	8002196 <HAL_I2C_Init+0x92>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a7d      	ldr	r2, [pc, #500]	; (8002380 <HAL_I2C_Init+0x27c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0e7      	b.n	800236e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a78      	ldr	r2, [pc, #480]	; (8002384 <HAL_I2C_Init+0x280>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	; (8002378 <HAL_I2C_Init+0x274>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d802      	bhi.n	80021d8 <HAL_I2C_Init+0xd4>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	3301      	adds	r3, #1
 80021d6:	e009      	b.n	80021ec <HAL_I2C_Init+0xe8>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	4a69      	ldr	r2, [pc, #420]	; (8002388 <HAL_I2C_Init+0x284>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	3301      	adds	r3, #1
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	495c      	ldr	r1, [pc, #368]	; (8002378 <HAL_I2C_Init+0x274>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d819      	bhi.n	8002240 <HAL_I2C_Init+0x13c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e59      	subs	r1, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fbb1 f3f3 	udiv	r3, r1, r3
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002220:	400b      	ands	r3, r1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_I2C_Init+0x138>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e59      	subs	r1, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fbb1 f3f3 	udiv	r3, r1, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223a:	e051      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800223c:	2304      	movs	r3, #4
 800223e:	e04f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_I2C_Init+0x168>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e012      	b.n	8002292 <HAL_I2C_Init+0x18e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	0099      	lsls	r1, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Init+0x196>
 8002296:	2301      	movs	r3, #1
 8002298:	e022      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <HAL_I2C_Init+0x1bc>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e58      	subs	r0, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	440b      	add	r3, r1
 80022b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022be:	e00f      	b.n	80022e0 <HAL_I2C_Init+0x1dc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	6809      	ldr	r1, [r1, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800230e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6911      	ldr	r1, [r2, #16]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68d2      	ldr	r2, [r2, #12]
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	000186a0 	.word	0x000186a0
 800237c:	001e847f 	.word	0x001e847f
 8002380:	003d08ff 	.word	0x003d08ff
 8002384:	431bde83 	.word	0x431bde83
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	461a      	mov	r2, r3
 800239a:	4603      	mov	r3, r0
 800239c:	817b      	strh	r3, [r7, #10]
 800239e:	460b      	mov	r3, r1
 80023a0:	813b      	strh	r3, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a6:	f7fe ffc1 	bl	800132c <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	f040 80d9 	bne.w	800256c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	496d      	ldr	r1, [pc, #436]	; (8002578 <HAL_I2C_Mem_Write+0x1ec>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fc7f 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
 80023d2:	e0cc      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_I2C_Mem_Write+0x56>
 80023de:	2302      	movs	r3, #2
 80023e0:	e0c5      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d007      	beq.n	8002408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2221      	movs	r2, #33	; 0x21
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a3a      	ldr	r2, [r7, #32]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a4d      	ldr	r2, [pc, #308]	; (800257c <HAL_I2C_Mem_Write+0x1f0>)
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800244a:	88f8      	ldrh	r0, [r7, #6]
 800244c:	893a      	ldrh	r2, [r7, #8]
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fab6 	bl	80029cc <I2C_RequestMemoryWrite>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d052      	beq.n	800250c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e081      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fd00 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b04      	cmp	r3, #4
 8002480:	d107      	bne.n	8002492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06b      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d11b      	bne.n	800250c <HAL_I2C_Mem_Write+0x180>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1aa      	bne.n	800246a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fcec 	bl	8002ef6 <I2C_WaitOnBTFFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00d      	beq.n	8002540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2b04      	cmp	r3, #4
 800252a:	d107      	bne.n	800253c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e016      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e000      	b.n	800256e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	00100002 	.word	0x00100002
 800257c:	ffff0000 	.word	0xffff0000

08002580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	; 0x30
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	460b      	mov	r3, r1
 8002594:	813b      	strh	r3, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7fe fec7 	bl	800132c <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	f040 8208 	bne.w	80029be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2319      	movs	r3, #25
 80025b4:	2201      	movs	r2, #1
 80025b6:	497b      	ldr	r1, [pc, #492]	; (80027a4 <HAL_I2C_Mem_Read+0x224>)
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fb85 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	e1fb      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Mem_Read+0x56>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e1f4      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d007      	beq.n	80025fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2222      	movs	r2, #34	; 0x22
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2240      	movs	r2, #64	; 0x40
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a5b      	ldr	r2, [pc, #364]	; (80027a8 <HAL_I2C_Mem_Read+0x228>)
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800263e:	88f8      	ldrh	r0, [r7, #6]
 8002640:	893a      	ldrh	r2, [r7, #8]
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fa52 	bl	8002af8 <I2C_RequestMemoryRead>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1b0      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d113      	bne.n	800268e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e184      	b.n	8002998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	2b01      	cmp	r3, #1
 8002694:	d11b      	bne.n	80026ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e164      	b.n	8002998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11b      	bne.n	800270e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	e144      	b.n	8002998 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002724:	e138      	b.n	8002998 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b03      	cmp	r3, #3
 800272c:	f200 80f1 	bhi.w	8002912 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b01      	cmp	r3, #1
 8002736:	d123      	bne.n	8002780 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fc1b 	bl	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e139      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800277e:	e10b      	b.n	8002998 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b02      	cmp	r3, #2
 8002786:	d14e      	bne.n	8002826 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	2200      	movs	r2, #0
 8002790:	4906      	ldr	r1, [pc, #24]	; (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fa98 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e10e      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
 80027a2:	bf00      	nop
 80027a4:	00100002 	.word	0x00100002
 80027a8:	ffff0000 	.word	0xffff0000
 80027ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002824:	e0b8      	b.n	8002998 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	2200      	movs	r2, #0
 800282e:	4966      	ldr	r1, [pc, #408]	; (80029c8 <HAL_I2C_Mem_Read+0x448>)
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fa49 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0bf      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2200      	movs	r2, #0
 800288a:	494f      	ldr	r1, [pc, #316]	; (80029c8 <HAL_I2C_Mem_Read+0x448>)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fa1b 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e091      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002910:	e042      	b.n	8002998 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fb2e 	bl	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e04c      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d118      	bne.n	8002998 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f aec2 	bne.w	8002726 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00010004 	.word	0x00010004

080029cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f960 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1c:	d103      	bne.n	8002a26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e05f      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	492d      	ldr	r1, [pc, #180]	; (8002af4 <I2C_RequestMemoryWrite+0x128>)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f998 	bl	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e04c      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa02 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d107      	bne.n	8002a8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e02b      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a98:	893b      	ldrh	r3, [r7, #8]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	e021      	b.n	8002ae8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa4:	893b      	ldrh	r3, [r7, #8]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab4:	6a39      	ldr	r1, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f9dc 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e005      	b.n	8002aea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ade:	893b      	ldrh	r3, [r7, #8]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	00010002 	.word	0x00010002

08002af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8c2 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	d103      	bne.n	8002b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0aa      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	4952      	ldr	r1, [pc, #328]	; (8002cc4 <I2C_RequestMemoryRead+0x1cc>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f8fa 	bl	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e097      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f964 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e076      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e021      	b.n	8002c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002be0:	893b      	ldrh	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f93e 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e050      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1a:	893b      	ldrh	r3, [r7, #8]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f923 	bl	8002e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e035      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f82b 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c86:	d103      	bne.n	8002c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e013      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	6a3a      	ldr	r2, [r7, #32]
 8002ca8:	4906      	ldr	r1, [pc, #24]	; (8002cc4 <I2C_RequestMemoryRead+0x1cc>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f863 	bl	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010002 	.word	0x00010002

08002cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	e025      	b.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d021      	beq.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7fe fb23 	bl	800132c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d116      	bne.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e023      	b.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10d      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	e00c      	b.n	8002d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d0b6      	beq.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d84:	e051      	b.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d94:	d123      	bne.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f043 0204 	orr.w	r2, r3, #4
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e046      	b.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe faa1 	bl	800132c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e020      	b.n	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10c      	bne.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	e00b      	b.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d18d      	bne.n	8002d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e80:	e02d      	b.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f8ce 	bl	8003024 <I2C_IsAcknowledgeFailed>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e02d      	b.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d021      	beq.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9a:	f7fe fa47 	bl	800132c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e007      	b.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d1ca      	bne.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f02:	e02d      	b.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f88d 	bl	8003024 <I2C_IsAcknowledgeFailed>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e02d      	b.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d021      	beq.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1c:	f7fe fa06 	bl	800132c <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e007      	b.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d1ca      	bne.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f84:	e042      	b.n	800300c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d119      	bne.n	8002fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0210 	mvn.w	r2, #16
 8002f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e029      	b.n	800301c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7fe f9b0 	bl	800132c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d116      	bne.n	800300c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f043 0220 	orr.w	r2, r3, #32
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d1b5      	bne.n	8002f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d11b      	bne.n	8003074 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003044:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f043 0204 	orr.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe f8da 	bl	800132c <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe f8d6 	bl	800132c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f855 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe f83a 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	080073c0 	.word	0x080073c0
 8003248:	20000000 	.word	0x20000000
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	080073d0 	.word	0x080073d0

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003294:	f7ff ffdc 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	080073d0 	.word	0x080073d0

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b0ae      	sub	sp, #184	; 0xb8
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032de:	4bcb      	ldr	r3, [pc, #812]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	f200 8206 	bhi.w	80036f8 <HAL_RCC_GetSysClockFreq+0x440>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003329 	.word	0x08003329
 80032f8:	080036f9 	.word	0x080036f9
 80032fc:	080036f9 	.word	0x080036f9
 8003300:	080036f9 	.word	0x080036f9
 8003304:	08003331 	.word	0x08003331
 8003308:	080036f9 	.word	0x080036f9
 800330c:	080036f9 	.word	0x080036f9
 8003310:	080036f9 	.word	0x080036f9
 8003314:	08003339 	.word	0x08003339
 8003318:	080036f9 	.word	0x080036f9
 800331c:	080036f9 	.word	0x080036f9
 8003320:	080036f9 	.word	0x080036f9
 8003324:	08003529 	.word	0x08003529
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4bb9      	ldr	r3, [pc, #740]	; (8003610 <HAL_RCC_GetSysClockFreq+0x358>)
 800332a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800332e:	e1e7      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003330:	4bb8      	ldr	r3, [pc, #736]	; (8003614 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003336:	e1e3      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4bb4      	ldr	r3, [pc, #720]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003344:	4bb1      	ldr	r3, [pc, #708]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d071      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4bae      	ldr	r3, [pc, #696]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800335c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003376:	4622      	mov	r2, r4
 8003378:	462b      	mov	r3, r5
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003388:	0150      	lsls	r0, r2, #5
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4621      	mov	r1, r4
 8003390:	1a51      	subs	r1, r2, r1
 8003392:	6439      	str	r1, [r7, #64]	; 0x40
 8003394:	4629      	mov	r1, r5
 8003396:	eb63 0301 	sbc.w	r3, r3, r1
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80033a8:	4649      	mov	r1, r9
 80033aa:	018b      	lsls	r3, r1, #6
 80033ac:	4641      	mov	r1, r8
 80033ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b2:	4641      	mov	r1, r8
 80033b4:	018a      	lsls	r2, r1, #6
 80033b6:	4641      	mov	r1, r8
 80033b8:	1a51      	subs	r1, r2, r1
 80033ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80033bc:	4649      	mov	r1, r9
 80033be:	eb63 0301 	sbc.w	r3, r3, r1
 80033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80033d0:	4649      	mov	r1, r9
 80033d2:	00cb      	lsls	r3, r1, #3
 80033d4:	4641      	mov	r1, r8
 80033d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033da:	4641      	mov	r1, r8
 80033dc:	00ca      	lsls	r2, r1, #3
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	4622      	mov	r2, r4
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ea:	462b      	mov	r3, r5
 80033ec:	460a      	mov	r2, r1
 80033ee:	eb42 0303 	adc.w	r3, r2, r3
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003400:	4629      	mov	r1, r5
 8003402:	024b      	lsls	r3, r1, #9
 8003404:	4621      	mov	r1, r4
 8003406:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800340a:	4621      	mov	r1, r4
 800340c:	024a      	lsls	r2, r1, #9
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800341c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003420:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003424:	f7fd fa92 	bl	800094c <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003432:	e067      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b75      	ldr	r3, [pc, #468]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003440:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003444:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344c:	67bb      	str	r3, [r7, #120]	; 0x78
 800344e:	2300      	movs	r3, #0
 8003450:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003452:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003456:	4622      	mov	r2, r4
 8003458:	462b      	mov	r3, r5
 800345a:	f04f 0000 	mov.w	r0, #0
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003468:	0150      	lsls	r0, r2, #5
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4621      	mov	r1, r4
 8003470:	1a51      	subs	r1, r2, r1
 8003472:	62b9      	str	r1, [r7, #40]	; 0x28
 8003474:	4629      	mov	r1, r5
 8003476:	eb63 0301 	sbc.w	r3, r3, r1
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003488:	4649      	mov	r1, r9
 800348a:	018b      	lsls	r3, r1, #6
 800348c:	4641      	mov	r1, r8
 800348e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003492:	4641      	mov	r1, r8
 8003494:	018a      	lsls	r2, r1, #6
 8003496:	4641      	mov	r1, r8
 8003498:	ebb2 0a01 	subs.w	sl, r2, r1
 800349c:	4649      	mov	r1, r9
 800349e:	eb63 0b01 	sbc.w	fp, r3, r1
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b6:	4692      	mov	sl, r2
 80034b8:	469b      	mov	fp, r3
 80034ba:	4623      	mov	r3, r4
 80034bc:	eb1a 0303 	adds.w	r3, sl, r3
 80034c0:	623b      	str	r3, [r7, #32]
 80034c2:	462b      	mov	r3, r5
 80034c4:	eb4b 0303 	adc.w	r3, fp, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034d6:	4629      	mov	r1, r5
 80034d8:	028b      	lsls	r3, r1, #10
 80034da:	4621      	mov	r1, r4
 80034dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e0:	4621      	mov	r1, r4
 80034e2:	028a      	lsls	r2, r1, #10
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ec:	2200      	movs	r2, #0
 80034ee:	673b      	str	r3, [r7, #112]	; 0x70
 80034f0:	677a      	str	r2, [r7, #116]	; 0x74
 80034f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80034f6:	f7fd fa29 	bl	800094c <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4613      	mov	r3, r2
 8003500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003504:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	3301      	adds	r3, #1
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800351a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003526:	e0eb      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d06b      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_GetSysClockFreq+0x354>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	2200      	movs	r2, #0
 8003548:	66bb      	str	r3, [r7, #104]	; 0x68
 800354a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800354c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003552:	663b      	str	r3, [r7, #96]	; 0x60
 8003554:	2300      	movs	r3, #0
 8003556:	667b      	str	r3, [r7, #100]	; 0x64
 8003558:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800355c:	4622      	mov	r2, r4
 800355e:	462b      	mov	r3, r5
 8003560:	f04f 0000 	mov.w	r0, #0
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356e:	0150      	lsls	r0, r2, #5
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4621      	mov	r1, r4
 8003576:	1a51      	subs	r1, r2, r1
 8003578:	61b9      	str	r1, [r7, #24]
 800357a:	4629      	mov	r1, r5
 800357c:	eb63 0301 	sbc.w	r3, r3, r1
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800358e:	4659      	mov	r1, fp
 8003590:	018b      	lsls	r3, r1, #6
 8003592:	4651      	mov	r1, sl
 8003594:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003598:	4651      	mov	r1, sl
 800359a:	018a      	lsls	r2, r1, #6
 800359c:	4651      	mov	r1, sl
 800359e:	ebb2 0801 	subs.w	r8, r2, r1
 80035a2:	4659      	mov	r1, fp
 80035a4:	eb63 0901 	sbc.w	r9, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035bc:	4690      	mov	r8, r2
 80035be:	4699      	mov	r9, r3
 80035c0:	4623      	mov	r3, r4
 80035c2:	eb18 0303 	adds.w	r3, r8, r3
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	462b      	mov	r3, r5
 80035ca:	eb49 0303 	adc.w	r3, r9, r3
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035dc:	4629      	mov	r1, r5
 80035de:	024b      	lsls	r3, r1, #9
 80035e0:	4621      	mov	r1, r4
 80035e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035e6:	4621      	mov	r1, r4
 80035e8:	024a      	lsls	r2, r1, #9
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035f2:	2200      	movs	r2, #0
 80035f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80035f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035fc:	f7fd f9a6 	bl	800094c <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4613      	mov	r3, r2
 8003606:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800360a:	e065      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x420>
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCC_GetSysClockFreq+0x458>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	2200      	movs	r2, #0
 8003620:	4618      	mov	r0, r3
 8003622:	4611      	mov	r1, r2
 8003624:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
 800362a:	2300      	movs	r3, #0
 800362c:	657b      	str	r3, [r7, #84]	; 0x54
 800362e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003632:	4642      	mov	r2, r8
 8003634:	464b      	mov	r3, r9
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	0159      	lsls	r1, r3, #5
 8003640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003644:	0150      	lsls	r0, r2, #5
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4641      	mov	r1, r8
 800364c:	1a51      	subs	r1, r2, r1
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	4649      	mov	r1, r9
 8003652:	eb63 0301 	sbc.w	r3, r3, r1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003664:	4659      	mov	r1, fp
 8003666:	018b      	lsls	r3, r1, #6
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800366e:	4651      	mov	r1, sl
 8003670:	018a      	lsls	r2, r1, #6
 8003672:	4651      	mov	r1, sl
 8003674:	1a54      	subs	r4, r2, r1
 8003676:	4659      	mov	r1, fp
 8003678:	eb63 0501 	sbc.w	r5, r3, r1
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	00eb      	lsls	r3, r5, #3
 8003686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	4643      	mov	r3, r8
 8003692:	18e3      	adds	r3, r4, r3
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	464b      	mov	r3, r9
 8003698:	eb45 0303 	adc.w	r3, r5, r3
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036aa:	4629      	mov	r1, r5
 80036ac:	028b      	lsls	r3, r1, #10
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b4:	4621      	mov	r1, r4
 80036b6:	028a      	lsls	r2, r1, #10
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c0:	2200      	movs	r2, #0
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036ca:	f7fd f93f 	bl	800094c <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4613      	mov	r3, r2
 80036d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_GetSysClockFreq+0x458>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	0f1b      	lsrs	r3, r3, #28
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80036e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036f6:	e003      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_GetSysClockFreq+0x45c>)
 80036fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003704:	4618      	mov	r0, r3
 8003706:	37b8      	adds	r7, #184	; 0xb8
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400

08003718 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e28d      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8083 	beq.w	800383e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003738:	4b94      	ldr	r3, [pc, #592]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b04      	cmp	r3, #4
 8003742:	d019      	beq.n	8003778 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003744:	4b91      	ldr	r3, [pc, #580]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800374c:	2b08      	cmp	r3, #8
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003750:	4b8e      	ldr	r3, [pc, #568]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375c:	d00c      	beq.n	8003778 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4b8b      	ldr	r3, [pc, #556]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003766:	2b0c      	cmp	r3, #12
 8003768:	d112      	bne.n	8003790 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376a:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003776:	d10b      	bne.n	8003790 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	4b84      	ldr	r3, [pc, #528]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05b      	beq.n	800383c <HAL_RCC_OscConfig+0x124>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d157      	bne.n	800383c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e25a      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x90>
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7b      	ldr	r2, [pc, #492]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xcc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0xb4>
 80037b2:	4b76      	ldr	r3, [pc, #472]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a75      	ldr	r2, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a72      	ldr	r2, [pc, #456]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xcc>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6e      	ldr	r2, [pc, #440]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b6c      	ldr	r3, [pc, #432]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6b      	ldr	r2, [pc, #428]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fd fd9e 	bl	800132c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd fd9a 	bl	800132c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e21f      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xdc>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fd8a 	bl	800132c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd fd86 	bl	800132c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e20b      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x104>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d06f      	beq.n	800392a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800384a:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d017      	beq.n	8003886 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003856:	4b4d      	ldr	r3, [pc, #308]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800385e:	2b08      	cmp	r3, #8
 8003860:	d105      	bne.n	800386e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003876:	2b0c      	cmp	r3, #12
 8003878:	d11c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387a:	4b44      	ldr	r3, [pc, #272]	; (800398c <HAL_RCC_OscConfig+0x274>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x186>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1d3      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4937      	ldr	r1, [pc, #220]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	e03a      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x278>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd fd33 	bl	800132c <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd fd2f 	bl	800132c <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1b4      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4925      	ldr	r1, [pc, #148]	; (800398c <HAL_RCC_OscConfig+0x274>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	e015      	b.n	800392a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x278>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd fd12 	bl	800132c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390c:	f7fd fd0e 	bl	800132c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e193      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d036      	beq.n	80039a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_RCC_OscConfig+0x27c>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd fcf2 	bl	800132c <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394c:	f7fd fcee 	bl	800132c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e173      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_OscConfig+0x274>)
 8003960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x234>
 800396a:	e01b      	b.n	80039a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_OscConfig+0x27c>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fd fcdb 	bl	800132c <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	e00e      	b.n	8003998 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397a:	f7fd fcd7 	bl	800132c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d907      	bls.n	8003998 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e15c      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
 800398c:	40023800 	.word	0x40023800
 8003990:	42470000 	.word	0x42470000
 8003994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	4b8a      	ldr	r3, [pc, #552]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ea      	bne.n	800397a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8097 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b6:	4b83      	ldr	r3, [pc, #524]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a7e      	ldr	r2, [pc, #504]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b7c      	ldr	r3, [pc, #496]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b79      	ldr	r3, [pc, #484]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a75      	ldr	r2, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fd fc97 	bl	800132c <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fd fc93 	bl	800132c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e118      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b6c      	ldr	r3, [pc, #432]	; (8003bc8 <HAL_RCC_OscConfig+0x4b0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x31e>
 8003a28:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2c:	4a65      	ldr	r2, [pc, #404]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6713      	str	r3, [r2, #112]	; 0x70
 8003a34:	e01c      	b.n	8003a70 <HAL_RCC_OscConfig+0x358>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x340>
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a60      	ldr	r2, [pc, #384]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a5d      	ldr	r2, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0x358>
 8003a58:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	f023 0304 	bic.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fd fc58 	bl	800132c <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fd fc54 	bl	800132c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0d7      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ee      	beq.n	8003a80 <HAL_RCC_OscConfig+0x368>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fc42 	bl	800132c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd fc3e 	bl	800132c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0c1      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ee      	bne.n	8003aac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ade:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80ad 	beq.w	8003c44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d060      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d145      	bne.n	8003b8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x4b4>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fc12 	bl	800132c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fd fc0e 	bl	800132c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e093      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	019b      	lsls	r3, r3, #6
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	071b      	lsls	r3, r3, #28
 8003b56:	491b      	ldr	r1, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x4b4>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fd fbe3 	bl	800132c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fd fbdf 	bl	800132c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e064      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x452>
 8003b88:	e05c      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_RCC_OscConfig+0x4b4>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd fbcc 	bl	800132c <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fd fbc8 	bl	800132c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e04d      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x480>
 8003bb6:	e045      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e040      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x538>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d129      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d122      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d119      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d10f      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e03f      	b.n	8003ce6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd f8f0 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa7d 	bl	8004198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08a      	sub	sp, #40	; 0x28
 8003cf2:	af02      	add	r7, sp, #8
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d17c      	bne.n	8003e08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_UART_Transmit+0x2c>
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e075      	b.n	8003e0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_UART_Transmit+0x3e>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e06e      	b.n	8003e0a <HAL_UART_Transmit+0x11c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2221      	movs	r2, #33	; 0x21
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d42:	f7fd faf3 	bl	800132c <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	d108      	bne.n	8003d70 <HAL_UART_Transmit+0x82>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e003      	b.n	8003d78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d80:	e02a      	b.n	8003dd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2180      	movs	r1, #128	; 0x80
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f957 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e036      	b.n	8003e0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	3302      	adds	r3, #2
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e007      	b.n	8003dca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1cf      	bne.n	8003d82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2140      	movs	r1, #64	; 0x40
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f927 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	; 0x28
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f040 808c 	bne.w	8003f4c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Receive+0x2e>
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e084      	b.n	8003f4e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Receive+0x40>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e07d      	b.n	8003f4e <HAL_UART_Receive+0x13c>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2222      	movs	r2, #34	; 0x22
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e6e:	f7fd fa5d 	bl	800132c <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e88:	d108      	bne.n	8003e9c <HAL_UART_Receive+0x8a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	e003      	b.n	8003ea4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003eac:	e043      	b.n	8003f36 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2120      	movs	r1, #32
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f8c1 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e042      	b.n	8003f4e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	e01f      	b.n	8003f28 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d007      	beq.n	8003f02 <HAL_UART_Receive+0xf0>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_UART_Receive+0xfe>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e008      	b.n	8003f22 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3301      	adds	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1b6      	bne.n	8003eae <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
  }
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	4613      	mov	r3, r2
 8003f62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d130      	bne.n	8003fd2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Transmit_IT+0x26>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e029      	b.n	8003fd4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Transmit_IT+0x38>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e022      	b.n	8003fd4 <HAL_UART_Transmit_IT+0x7e>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	88fa      	ldrh	r2, [r7, #6]
 8003fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2221      	movs	r2, #33	; 0x21
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fcc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d11d      	bne.n	8004036 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_UART_Receive_IT+0x26>
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e016      	b.n	8004038 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_UART_Receive_IT+0x38>
 8004014:	2302      	movs	r3, #2
 8004016:	e00f      	b.n	8004038 <HAL_UART_Receive_IT+0x58>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	461a      	mov	r2, r3
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f875 	bl	800411c <UART_Start_Receive_IT>
 8004032:	4603      	mov	r3, r0
 8004034:	e000      	b.n	8004038 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b090      	sub	sp, #64	; 0x40
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	e050      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d04c      	beq.n	80040f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800405a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x30>
 8004060:	f7fd f964 	bl	800132c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800406c:	429a      	cmp	r2, r3
 800406e:	d241      	bcs.n	80040f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004090:	637a      	str	r2, [r7, #52]	; 0x34
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	613b      	str	r3, [r7, #16]
   return(result);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c4:	623a      	str	r2, [r7, #32]
 80040c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	e841 2300 	strex	r3, r2, [r1]
 80040d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e5      	bne.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e00f      	b.n	8004114 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	429a      	cmp	r2, r3
 8004110:	d09f      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3740      	adds	r7, #64	; 0x40
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2222      	movs	r2, #34	; 0x22
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004168:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0220 	orr.w	r2, r2, #32
 8004188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800419c:	b0c0      	sub	sp, #256	; 0x100
 800419e:	af00      	add	r7, sp, #0
 80041a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	68d9      	ldr	r1, [r3, #12]
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	ea40 0301 	orr.w	r3, r0, r1
 80041c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041f0:	f021 010c 	bic.w	r1, r1, #12
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041fe:	430b      	orrs	r3, r1
 8004200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004212:	6999      	ldr	r1, [r3, #24]
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	ea40 0301 	orr.w	r3, r0, r1
 800421e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b8f      	ldr	r3, [pc, #572]	; (8004464 <UART_SetConfig+0x2cc>)
 8004228:	429a      	cmp	r2, r3
 800422a:	d005      	beq.n	8004238 <UART_SetConfig+0xa0>
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b8d      	ldr	r3, [pc, #564]	; (8004468 <UART_SetConfig+0x2d0>)
 8004234:	429a      	cmp	r2, r3
 8004236:	d104      	bne.n	8004242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004238:	f7ff f82a 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 800423c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004240:	e003      	b.n	800424a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004242:	f7ff f811 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004246:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	f040 810c 	bne.w	8004470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004262:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800426a:	4622      	mov	r2, r4
 800426c:	462b      	mov	r3, r5
 800426e:	1891      	adds	r1, r2, r2
 8004270:	65b9      	str	r1, [r7, #88]	; 0x58
 8004272:	415b      	adcs	r3, r3
 8004274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800427a:	4621      	mov	r1, r4
 800427c:	eb12 0801 	adds.w	r8, r2, r1
 8004280:	4629      	mov	r1, r5
 8004282:	eb43 0901 	adc.w	r9, r3, r1
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800429a:	4690      	mov	r8, r2
 800429c:	4699      	mov	r9, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	eb18 0303 	adds.w	r3, r8, r3
 80042a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042a8:	462b      	mov	r3, r5
 80042aa:	eb49 0303 	adc.w	r3, r9, r3
 80042ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042c6:	460b      	mov	r3, r1
 80042c8:	18db      	adds	r3, r3, r3
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
 80042cc:	4613      	mov	r3, r2
 80042ce:	eb42 0303 	adc.w	r3, r2, r3
 80042d2:	657b      	str	r3, [r7, #84]	; 0x54
 80042d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042dc:	f7fc fb36 	bl	800094c <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <UART_SetConfig+0x2d4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	64b9      	str	r1, [r7, #72]	; 0x48
 8004308:	415b      	adcs	r3, r3
 800430a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800430c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004310:	4641      	mov	r1, r8
 8004312:	eb12 0a01 	adds.w	sl, r2, r1
 8004316:	4649      	mov	r1, r9
 8004318:	eb43 0b01 	adc.w	fp, r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800432c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004330:	4692      	mov	sl, r2
 8004332:	469b      	mov	fp, r3
 8004334:	4643      	mov	r3, r8
 8004336:	eb1a 0303 	adds.w	r3, sl, r3
 800433a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800433e:	464b      	mov	r3, r9
 8004340:	eb4b 0303 	adc.w	r3, fp, r3
 8004344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004354:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800435c:	460b      	mov	r3, r1
 800435e:	18db      	adds	r3, r3, r3
 8004360:	643b      	str	r3, [r7, #64]	; 0x40
 8004362:	4613      	mov	r3, r2
 8004364:	eb42 0303 	adc.w	r3, r2, r3
 8004368:	647b      	str	r3, [r7, #68]	; 0x44
 800436a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800436e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004372:	f7fc faeb 	bl	800094c <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4611      	mov	r1, r2
 800437c:	4b3b      	ldr	r3, [pc, #236]	; (800446c <UART_SetConfig+0x2d4>)
 800437e:	fba3 2301 	umull	r2, r3, r3, r1
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2264      	movs	r2, #100	; 0x64
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	1acb      	subs	r3, r1, r3
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004392:	4b36      	ldr	r3, [pc, #216]	; (800446c <UART_SetConfig+0x2d4>)
 8004394:	fba3 2302 	umull	r2, r3, r3, r2
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043a0:	441c      	add	r4, r3
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80043bc:	415b      	adcs	r3, r3
 80043be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6339      	str	r1, [r7, #48]	; 0x30
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043f8:	464b      	mov	r3, r9
 80043fa:	460a      	mov	r2, r1
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004410:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004418:	460b      	mov	r3, r1
 800441a:	18db      	adds	r3, r3, r3
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
 800441e:	4613      	mov	r3, r2
 8004420:	eb42 0303 	adc.w	r3, r2, r3
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800442a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800442e:	f7fc fa8d 	bl	800094c <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <UART_SetConfig+0x2d4>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	; 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	3332      	adds	r3, #50	; 0x32
 800444a:	4a08      	ldr	r2, [pc, #32]	; (800446c <UART_SetConfig+0x2d4>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	f003 0207 	and.w	r2, r3, #7
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4422      	add	r2, r4
 800445e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004460:	e105      	b.n	800466e <UART_SetConfig+0x4d6>
 8004462:	bf00      	nop
 8004464:	40011000 	.word	0x40011000
 8004468:	40011400 	.word	0x40011400
 800446c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800447a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800447e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004482:	4642      	mov	r2, r8
 8004484:	464b      	mov	r3, r9
 8004486:	1891      	adds	r1, r2, r2
 8004488:	6239      	str	r1, [r7, #32]
 800448a:	415b      	adcs	r3, r3
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
 800448e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004492:	4641      	mov	r1, r8
 8004494:	1854      	adds	r4, r2, r1
 8004496:	4649      	mov	r1, r9
 8004498:	eb43 0501 	adc.w	r5, r3, r1
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	00eb      	lsls	r3, r5, #3
 80044a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044aa:	00e2      	lsls	r2, r4, #3
 80044ac:	4614      	mov	r4, r2
 80044ae:	461d      	mov	r5, r3
 80044b0:	4643      	mov	r3, r8
 80044b2:	18e3      	adds	r3, r4, r3
 80044b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044b8:	464b      	mov	r3, r9
 80044ba:	eb45 0303 	adc.w	r3, r5, r3
 80044be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044de:	4629      	mov	r1, r5
 80044e0:	008b      	lsls	r3, r1, #2
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e8:	4621      	mov	r1, r4
 80044ea:	008a      	lsls	r2, r1, #2
 80044ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044f0:	f7fc fa2c 	bl	800094c <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4b60      	ldr	r3, [pc, #384]	; (800467c <UART_SetConfig+0x4e4>)
 80044fa:	fba3 2302 	umull	r2, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	011c      	lsls	r4, r3, #4
 8004502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004506:	2200      	movs	r2, #0
 8004508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800450c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	1891      	adds	r1, r2, r2
 800451a:	61b9      	str	r1, [r7, #24]
 800451c:	415b      	adcs	r3, r3
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004524:	4641      	mov	r1, r8
 8004526:	1851      	adds	r1, r2, r1
 8004528:	6139      	str	r1, [r7, #16]
 800452a:	4649      	mov	r1, r9
 800452c:	414b      	adcs	r3, r1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800453c:	4659      	mov	r1, fp
 800453e:	00cb      	lsls	r3, r1, #3
 8004540:	4651      	mov	r1, sl
 8004542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004546:	4651      	mov	r1, sl
 8004548:	00ca      	lsls	r2, r1, #3
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	4603      	mov	r3, r0
 8004550:	4642      	mov	r2, r8
 8004552:	189b      	adds	r3, r3, r2
 8004554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004558:	464b      	mov	r3, r9
 800455a:	460a      	mov	r2, r1
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	67bb      	str	r3, [r7, #120]	; 0x78
 800456e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800457c:	4649      	mov	r1, r9
 800457e:	008b      	lsls	r3, r1, #2
 8004580:	4641      	mov	r1, r8
 8004582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004586:	4641      	mov	r1, r8
 8004588:	008a      	lsls	r2, r1, #2
 800458a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800458e:	f7fc f9dd 	bl	800094c <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4b39      	ldr	r3, [pc, #228]	; (800467c <UART_SetConfig+0x4e4>)
 8004598:	fba3 1302 	umull	r1, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	2164      	movs	r1, #100	; 0x64
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	3332      	adds	r3, #50	; 0x32
 80045aa:	4a34      	ldr	r2, [pc, #208]	; (800467c <UART_SetConfig+0x4e4>)
 80045ac:	fba2 2303 	umull	r2, r3, r2, r3
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b6:	441c      	add	r4, r3
 80045b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045bc:	2200      	movs	r2, #0
 80045be:	673b      	str	r3, [r7, #112]	; 0x70
 80045c0:	677a      	str	r2, [r7, #116]	; 0x74
 80045c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045c6:	4642      	mov	r2, r8
 80045c8:	464b      	mov	r3, r9
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	415b      	adcs	r3, r3
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d6:	4641      	mov	r1, r8
 80045d8:	1851      	adds	r1, r2, r1
 80045da:	6039      	str	r1, [r7, #0]
 80045dc:	4649      	mov	r1, r9
 80045de:	414b      	adcs	r3, r1
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045ee:	4659      	mov	r1, fp
 80045f0:	00cb      	lsls	r3, r1, #3
 80045f2:	4651      	mov	r1, sl
 80045f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f8:	4651      	mov	r1, sl
 80045fa:	00ca      	lsls	r2, r1, #3
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	4603      	mov	r3, r0
 8004602:	4642      	mov	r2, r8
 8004604:	189b      	adds	r3, r3, r2
 8004606:	66bb      	str	r3, [r7, #104]	; 0x68
 8004608:	464b      	mov	r3, r9
 800460a:	460a      	mov	r2, r1
 800460c:	eb42 0303 	adc.w	r3, r2, r3
 8004610:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	663b      	str	r3, [r7, #96]	; 0x60
 800461c:	667a      	str	r2, [r7, #100]	; 0x64
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800462a:	4649      	mov	r1, r9
 800462c:	008b      	lsls	r3, r1, #2
 800462e:	4641      	mov	r1, r8
 8004630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004634:	4641      	mov	r1, r8
 8004636:	008a      	lsls	r2, r1, #2
 8004638:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800463c:	f7fc f986 	bl	800094c <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <UART_SetConfig+0x4e4>)
 8004646:	fba3 1302 	umull	r1, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2164      	movs	r1, #100	; 0x64
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	3332      	adds	r3, #50	; 0x32
 8004658:	4a08      	ldr	r2, [pc, #32]	; (800467c <UART_SetConfig+0x4e4>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	f003 020f 	and.w	r2, r3, #15
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4422      	add	r2, r4
 800466c:	609a      	str	r2, [r3, #8]
}
 800466e:	bf00      	nop
 8004670:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467a:	bf00      	nop
 800467c:	51eb851f 	.word	0x51eb851f

08004680 <application>:
#include "app_config.h"
#include "com_config.h"
struct data d;

void application(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
	Configurator();
 8004684:	f000 fa4a 	bl	8004b1c <Configurator>
//	strcpy(d.CH4, "ADC4");
//	strcpy(d.Status1, "GPIO1");
//	strcpy(d.Status2, "GPIO2");
//	strcpy(d.Status3, "GPIO3");
//	strcpy(d.Status4, "GPIO4");
	get_time(&d);
 8004688:	4806      	ldr	r0, [pc, #24]	; (80046a4 <application+0x24>)
 800468a:	f000 f9f7 	bl	8004a7c <get_time>
    ADC_handler(&d);
 800468e:	4805      	ldr	r0, [pc, #20]	; (80046a4 <application+0x24>)
 8004690:	f000 f830 	bl	80046f4 <ADC_handler>
	DataToGsm(&d);
 8004694:	4803      	ldr	r0, [pc, #12]	; (80046a4 <application+0x24>)
 8004696:	f000 f88b 	bl	80047b0 <DataToGsm>
	terminal(&d);
 800469a:	4802      	ldr	r0, [pc, #8]	; (80046a4 <application+0x24>)
 800469c:	f000 fd32 	bl	8005104 <terminal>


}
 80046a0:	bf00      	nop
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20000170 	.word	0x20000170

080046a8 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 80046ac:	f000 fe60 	bl	8005370 <adc_value>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <voltage_cal+0x48>)
 80046b6:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <voltage_cal+0x48>)
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fc f88b 	bl	80007d8 <__aeabi_i2d>
 80046c2:	a309      	add	r3, pc, #36	; (adr r3, 80046e8 <voltage_cal+0x40>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fb fe0a 	bl	80002e0 <__aeabi_dmul>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7fc f8ea 	bl	80008ac <__aeabi_d2f>
 80046d8:	4603      	mov	r3, r0
 80046da:	ee07 3a90 	vmov	s15, r3
}
 80046de:	eeb0 0a67 	vmov.f32	s0, s15
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	f3af 8000 	nop.w
 80046e8:	e734d9b4 	.word	0xe734d9b4
 80046ec:	3f4a680c 	.word	0x3f4a680c
 80046f0:	200001b8 	.word	0x200001b8

080046f4 <ADC_handler>:

void ADC_handler(struct data *d)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <ADC_handler+0xb8>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10f      	bne.n	8004724 <ADC_handler+0x30>
	{
		ADC_select_CH1();
 8004704:	f000 fdb6 	bl	8005274 <ADC_select_CH1>
		adc_start();
 8004708:	f000 fe1c 	bl	8005344 <adc_start>
		adc_conversion();
 800470c:	f000 fe24 	bl	8005358 <adc_conversion>
		d->adc1_value = voltage_cal();
 8004710:	f7ff ffca 	bl	80046a8 <voltage_cal>
 8004714:	eef0 7a40 	vmov.f32	s15, s0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	edc3 7a02 	vstr	s15, [r3, #8]
		adc_stop();
 800471e:	f000 fe33 	bl	8005388 <adc_stop>
 8004722:	e000      	b.n	8004726 <ADC_handler+0x32>
	}
	else
	{
		__NOP();
 8004724:	bf00      	nop
	}
	if(adcChnlChecker[1] == 1)
 8004726:	4b21      	ldr	r3, [pc, #132]	; (80047ac <ADC_handler+0xb8>)
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d10f      	bne.n	800474e <ADC_handler+0x5a>
	{
		ADC_select_CH2();
 800472e:	f000 fdbb 	bl	80052a8 <ADC_select_CH2>
		adc_start();
 8004732:	f000 fe07 	bl	8005344 <adc_start>
		adc_conversion();
 8004736:	f000 fe0f 	bl	8005358 <adc_conversion>
		d->adc2_value = voltage_cal();
 800473a:	f7ff ffb5 	bl	80046a8 <voltage_cal>
 800473e:	eef0 7a40 	vmov.f32	s15, s0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	edc3 7a03 	vstr	s15, [r3, #12]
		adc_stop();
 8004748:	f000 fe1e 	bl	8005388 <adc_stop>
 800474c:	e000      	b.n	8004750 <ADC_handler+0x5c>
	}
	else
	{
		__NOP();
 800474e:	bf00      	nop
	}
	if(adcChnlChecker[2] == 1)
 8004750:	4b16      	ldr	r3, [pc, #88]	; (80047ac <ADC_handler+0xb8>)
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10f      	bne.n	8004778 <ADC_handler+0x84>
	{
		ADC_select_CH3();
 8004758:	f000 fdc0 	bl	80052dc <ADC_select_CH3>
		adc_start();
 800475c:	f000 fdf2 	bl	8005344 <adc_start>
		adc_conversion();
 8004760:	f000 fdfa 	bl	8005358 <adc_conversion>
		d->adc3_value = voltage_cal();
 8004764:	f7ff ffa0 	bl	80046a8 <voltage_cal>
 8004768:	eef0 7a40 	vmov.f32	s15, s0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	edc3 7a04 	vstr	s15, [r3, #16]
		adc_stop();
 8004772:	f000 fe09 	bl	8005388 <adc_stop>
 8004776:	e000      	b.n	800477a <ADC_handler+0x86>
	}
	else
	{
		__NOP();
 8004778:	bf00      	nop
	}
	if(adcChnlChecker[3] == 1)
 800477a:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <ADC_handler+0xb8>)
 800477c:	78db      	ldrb	r3, [r3, #3]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10f      	bne.n	80047a2 <ADC_handler+0xae>
	{
		ADC_select_CH4();
 8004782:	f000 fdc5 	bl	8005310 <ADC_select_CH4>
		adc_start();
 8004786:	f000 fddd 	bl	8005344 <adc_start>
		adc_conversion();
 800478a:	f000 fde5 	bl	8005358 <adc_conversion>
		d->adc4_value = voltage_cal();
 800478e:	f7ff ff8b 	bl	80046a8 <voltage_cal>
 8004792:	eef0 7a40 	vmov.f32	s15, s0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	edc3 7a05 	vstr	s15, [r3, #20]
		adc_stop();
 800479c:	f000 fdf4 	bl	8005388 <adc_stop>
	{
		__NOP();
	}
//	adc_stop();

}
 80047a0:	e000      	b.n	80047a4 <ADC_handler+0xb0>
		__NOP();
 80047a2:	bf00      	nop
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	2000028c 	.word	0x2000028c

080047b0 <DataToGsm>:
int count=0;

UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af06      	add	r7, sp, #24
 80047b6:	6078      	str	r0, [r7, #4]
	uint8_t sec=d->seconds;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	73fb      	strb	r3, [r7, #15]
		//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf((char*)buffer_Time,"%02d:%02d:%02d",d->hour,d->minutes,d->seconds);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	789b      	ldrb	r3, [r3, #2]
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	4619      	mov	r1, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	460b      	mov	r3, r1
 80047d2:	4957      	ldr	r1, [pc, #348]	; (8004930 <DataToGsm+0x180>)
 80047d4:	4857      	ldr	r0, [pc, #348]	; (8004934 <DataToGsm+0x184>)
 80047d6:	f001 fac7 	bl	8005d68 <siprintf>
	sprintf((char*)buffer_Date,"%02d/%02d/%02d",d->dayofmonth,d->month,d->year);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	791b      	ldrb	r3, [r3, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	795b      	ldrb	r3, [r3, #5]
 80047e4:	4619      	mov	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	799b      	ldrb	r3, [r3, #6]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	460b      	mov	r3, r1
 80047ee:	4952      	ldr	r1, [pc, #328]	; (8004938 <DataToGsm+0x188>)
 80047f0:	4852      	ldr	r0, [pc, #328]	; (800493c <DataToGsm+0x18c>)
 80047f2:	f001 fab9 	bl	8005d68 <siprintf>

//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf((char*)CH1,"%f",d->adc1_value);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fffe 	bl	80007fc <__aeabi_f2d>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	494e      	ldr	r1, [pc, #312]	; (8004940 <DataToGsm+0x190>)
 8004806:	484f      	ldr	r0, [pc, #316]	; (8004944 <DataToGsm+0x194>)
 8004808:	f001 faae 	bl	8005d68 <siprintf>
	sprintf((char*)CH2,"%f",d->adc2_value);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4618      	mov	r0, r3
 8004812:	f7fb fff3 	bl	80007fc <__aeabi_f2d>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4949      	ldr	r1, [pc, #292]	; (8004940 <DataToGsm+0x190>)
 800481c:	484a      	ldr	r0, [pc, #296]	; (8004948 <DataToGsm+0x198>)
 800481e:	f001 faa3 	bl	8005d68 <siprintf>
	sprintf((char*)CH3,"%f",d->adc3_value);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	4618      	mov	r0, r3
 8004828:	f7fb ffe8 	bl	80007fc <__aeabi_f2d>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4943      	ldr	r1, [pc, #268]	; (8004940 <DataToGsm+0x190>)
 8004832:	4846      	ldr	r0, [pc, #280]	; (800494c <DataToGsm+0x19c>)
 8004834:	f001 fa98 	bl	8005d68 <siprintf>
	sprintf((char*)CH4,"%f",d->adc4_value);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	4618      	mov	r0, r3
 800483e:	f7fb ffdd 	bl	80007fc <__aeabi_f2d>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	493e      	ldr	r1, [pc, #248]	; (8004940 <DataToGsm+0x190>)
 8004848:	4841      	ldr	r0, [pc, #260]	; (8004950 <DataToGsm+0x1a0>)
 800484a:	f001 fa8d 	bl	8005d68 <siprintf>

	if(d->GPIO[0]==1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7e1b      	ldrb	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d107      	bne.n	8004866 <DataToGsm+0xb6>
	{
		strcpy(d->Status1, "High");
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	331d      	adds	r3, #29
 800485a:	4a3e      	ldr	r2, [pc, #248]	; (8004954 <DataToGsm+0x1a4>)
 800485c:	6810      	ldr	r0, [r2, #0]
 800485e:	6018      	str	r0, [r3, #0]
 8004860:	7912      	ldrb	r2, [r2, #4]
 8004862:	711a      	strb	r2, [r3, #4]
 8004864:	e004      	b.n	8004870 <DataToGsm+0xc0>
	}
	else
	{
		strcpy(d->Status1, "Low");
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	331d      	adds	r3, #29
 800486a:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <DataToGsm+0x1a8>)
 800486c:	6810      	ldr	r0, [r2, #0]
 800486e:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7e5b      	ldrb	r3, [r3, #25]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <DataToGsm+0xd8>
	{
		strcpy(d->Status2, "High");
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3327      	adds	r3, #39	; 0x27
 800487c:	4a35      	ldr	r2, [pc, #212]	; (8004954 <DataToGsm+0x1a4>)
 800487e:	6810      	ldr	r0, [r2, #0]
 8004880:	6018      	str	r0, [r3, #0]
 8004882:	7912      	ldrb	r2, [r2, #4]
 8004884:	711a      	strb	r2, [r3, #4]
 8004886:	e004      	b.n	8004892 <DataToGsm+0xe2>
	}
	else
	{
		strcpy(d->Status2, "Low");
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3327      	adds	r3, #39	; 0x27
 800488c:	4a32      	ldr	r2, [pc, #200]	; (8004958 <DataToGsm+0x1a8>)
 800488e:	6810      	ldr	r0, [r2, #0]
 8004890:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	7e9b      	ldrb	r3, [r3, #26]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <DataToGsm+0xfa>
	{
		strcpy(d->Status3, "High");
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3331      	adds	r3, #49	; 0x31
 800489e:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <DataToGsm+0x1a4>)
 80048a0:	6810      	ldr	r0, [r2, #0]
 80048a2:	6018      	str	r0, [r3, #0]
 80048a4:	7912      	ldrb	r2, [r2, #4]
 80048a6:	711a      	strb	r2, [r3, #4]
 80048a8:	e004      	b.n	80048b4 <DataToGsm+0x104>
	}
	else
	{
		strcpy(d->Status3, "Low");
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3331      	adds	r3, #49	; 0x31
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <DataToGsm+0x1a8>)
 80048b0:	6810      	ldr	r0, [r2, #0]
 80048b2:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	7edb      	ldrb	r3, [r3, #27]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <DataToGsm+0x11c>
	{
		strcpy(d->Status4, "High");
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	333b      	adds	r3, #59	; 0x3b
 80048c0:	4a24      	ldr	r2, [pc, #144]	; (8004954 <DataToGsm+0x1a4>)
 80048c2:	6810      	ldr	r0, [r2, #0]
 80048c4:	6018      	str	r0, [r3, #0]
 80048c6:	7912      	ldrb	r2, [r2, #4]
 80048c8:	711a      	strb	r2, [r3, #4]
 80048ca:	e004      	b.n	80048d6 <DataToGsm+0x126>
	}
	else
	{
		strcpy(d->Status4, "Low");
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	333b      	adds	r3, #59	; 0x3b
 80048d0:	4a21      	ldr	r2, [pc, #132]	; (8004958 <DataToGsm+0x1a8>)
 80048d2:	6810      	ldr	r0, [r2, #0]
 80048d4:	6018      	str	r0, [r3, #0]


//	DataToCloud(buffer_Time,buffer_Date,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);


	if(sec==59)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b3b      	cmp	r3, #59	; 0x3b
 80048da:	d104      	bne.n	80048e6 <DataToGsm+0x136>
	{
		count=count+1;
 80048dc:	4b1f      	ldr	r3, [pc, #124]	; (800495c <DataToGsm+0x1ac>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <DataToGsm+0x1ac>)
 80048e4:	6013      	str	r3, [r2, #0]

	}


	if(count==d->scan_time)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7f1b      	ldrb	r3, [r3, #28]
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <DataToGsm+0x1ac>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d118      	bne.n	8004926 <DataToGsm+0x176>
	{
		DataToCloud(buffer_Time,buffer_Date,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	331d      	adds	r3, #29
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	3227      	adds	r2, #39	; 0x27
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	3131      	adds	r1, #49	; 0x31
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	303b      	adds	r0, #59	; 0x3b
 8004904:	9005      	str	r0, [sp, #20]
 8004906:	9104      	str	r1, [sp, #16]
 8004908:	9203      	str	r2, [sp, #12]
 800490a:	9302      	str	r3, [sp, #8]
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <DataToGsm+0x1a0>)
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <DataToGsm+0x19c>)
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <DataToGsm+0x198>)
 8004916:	4a0b      	ldr	r2, [pc, #44]	; (8004944 <DataToGsm+0x194>)
 8004918:	4908      	ldr	r1, [pc, #32]	; (800493c <DataToGsm+0x18c>)
 800491a:	4806      	ldr	r0, [pc, #24]	; (8004934 <DataToGsm+0x184>)
 800491c:	f000 fda8 	bl	8005470 <DataToCloud>
		count=0;
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <DataToGsm+0x1ac>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
	}

//	count=0;
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	08007134 	.word	0x08007134
 8004934:	200001bc 	.word	0x200001bc
 8004938:	08007144 	.word	0x08007144
 800493c:	200001cc 	.word	0x200001cc
 8004940:	08007154 	.word	0x08007154
 8004944:	200001dc 	.word	0x200001dc
 8004948:	200001e8 	.word	0x200001e8
 800494c:	200001f4 	.word	0x200001f4
 8004950:	20000200 	.word	0x20000200
 8004954:	08007158 	.word	0x08007158
 8004958:	08007160 	.word	0x08007160
 800495c:	2000020c 	.word	0x2000020c

08004960 <dec_bcd>:
#define RTC_add 0xD0

//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0f      	ldr	r2, [pc, #60]	; (80049a8 <dec_bcd+0x48>)
 800496c:	fb82 1203 	smull	r1, r2, r2, r3
 8004970:	1092      	asrs	r2, r2, #2
 8004972:	17db      	asrs	r3, r3, #31
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	b2d8      	uxtb	r0, r3
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <dec_bcd+0x48>)
 8004980:	fb83 1302 	smull	r1, r3, r3, r2
 8004984:	1099      	asrs	r1, r3, #2
 8004986:	17d3      	asrs	r3, r2, #31
 8004988:	1ac9      	subs	r1, r1, r3
 800498a:	460b      	mov	r3, r1
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	1ad1      	subs	r1, r2, r3
 8004994:	b2cb      	uxtb	r3, r1
 8004996:	4403      	add	r3, r0
 8004998:	b2db      	uxtb	r3, r3
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	66666667 	.word	0x66666667

080049ac <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	461a      	mov	r2, r3
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	4413      	add	r3, r2
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <set_time>:




void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b089      	sub	sp, #36	; 0x24
 80049e0:	af04      	add	r7, sp, #16
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	461a      	mov	r2, r3
 80049ea:	4623      	mov	r3, r4
 80049ec:	71fb      	strb	r3, [r7, #7]
 80049ee:	4603      	mov	r3, r0
 80049f0:	71bb      	strb	r3, [r7, #6]
 80049f2:	460b      	mov	r3, r1
 80049f4:	717b      	strb	r3, [r7, #5]
 80049f6:	4613      	mov	r3, r2
 80049f8:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ffaf 	bl	8004960 <dec_bcd>
 8004a02:	4603      	mov	r3, r0
 8004a04:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 8004a06:	79bb      	ldrb	r3, [r7, #6]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff ffa9 	bl	8004960 <dec_bcd>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8004a12:	797b      	ldrb	r3, [r7, #5]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff ffa3 	bl	8004960 <dec_bcd>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 8004a1e:	793b      	ldrb	r3, [r7, #4]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff9d 	bl	8004960 <dec_bcd>
 8004a26:	4603      	mov	r3, r0
 8004a28:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 8004a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ff96 	bl	8004960 <dec_bcd>
 8004a34:	4603      	mov	r3, r0
 8004a36:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8004a38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff8f 	bl	8004960 <dec_bcd>
 8004a42:	4603      	mov	r3, r0
 8004a44:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 8004a46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff88 	bl	8004960 <dec_bcd>
 8004a50:	4603      	mov	r3, r0
 8004a52:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
 8004a58:	9302      	str	r3, [sp, #8]
 8004a5a:	2307      	movs	r3, #7
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2301      	movs	r3, #1
 8004a66:	2200      	movs	r2, #0
 8004a68:	21d0      	movs	r1, #208	; 0xd0
 8004a6a:	4803      	ldr	r0, [pc, #12]	; (8004a78 <set_time+0x9c>)
 8004a6c:	f7fd fc8e 	bl	800238c <HAL_I2C_Mem_Write>
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd90      	pop	{r4, r7, pc}
 8004a78:	2000008c 	.word	0x2000008c

08004a7c <get_time>:



void get_time(struct data *d)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af04      	add	r7, sp, #16
 8004a82:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 8004a84:	f04f 33ff 	mov.w	r3, #4294967295
 8004a88:	9302      	str	r3, [sp, #8]
 8004a8a:	2307      	movs	r3, #7
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2301      	movs	r3, #1
 8004a96:	2200      	movs	r2, #0
 8004a98:	21d0      	movs	r1, #208	; 0xd0
 8004a9a:	481f      	ldr	r0, [pc, #124]	; (8004b18 <get_time+0x9c>)
 8004a9c:	f7fd fd70 	bl	8002580 <HAL_I2C_Mem_Read>
	d->seconds=bcd_dec(get_time[0]);
 8004aa0:	7a3b      	ldrb	r3, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ff82 	bl	80049ac <bcd_dec>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	701a      	strb	r2, [r3, #0]
	d->minutes=bcd_dec(get_time[1]);
 8004ab0:	7a7b      	ldrb	r3, [r7, #9]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ff7a 	bl	80049ac <bcd_dec>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	705a      	strb	r2, [r3, #1]
	d->hour=bcd_dec(get_time[2]);
 8004ac0:	7abb      	ldrb	r3, [r7, #10]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff72 	bl	80049ac <bcd_dec>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	709a      	strb	r2, [r3, #2]
	d->dayofweek=bcd_dec(get_time[3]);
 8004ad0:	7afb      	ldrb	r3, [r7, #11]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ff6a 	bl	80049ac <bcd_dec>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	70da      	strb	r2, [r3, #3]
	d->dayofmonth=bcd_dec(get_time[4]);
 8004ae0:	7b3b      	ldrb	r3, [r7, #12]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff ff62 	bl	80049ac <bcd_dec>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	711a      	strb	r2, [r3, #4]
	d->month=bcd_dec(get_time[5]);
 8004af0:	7b7b      	ldrb	r3, [r7, #13]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff ff5a 	bl	80049ac <bcd_dec>
 8004af8:	4603      	mov	r3, r0
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	715a      	strb	r2, [r3, #5]
	d->year=bcd_dec(get_time[6]);
 8004b00:	7bbb      	ldrb	r3, [r7, #14]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff52 	bl	80049ac <bcd_dec>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	719a      	strb	r2, [r3, #6]
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	2000008c 	.word	0x2000008c

08004b1c <Configurator>:
uint8_t s[4];
extern struct data d;
uint8_t adcChnlChecker[4];

 void Configurator()
 {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	 data_receive();
 8004b20:	f000 ff3e 	bl	80059a0 <data_receive>

		  if (tx_data[0] != '\0')
 8004b24:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <Configurator+0x48>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <Configurator+0x18>
		   {
		     flag = 1; // Set flag to indicate data has been received
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <Configurator+0x4c>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <Configurator+0x1e>
		   }
		   else
		   {
			   flag=0;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <Configurator+0x4c>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
		   }

           if (flag)
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <Configurator+0x4c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <Configurator+0x32>
           {
	        extract_data();
 8004b42:	f000 f8e3 	bl	8004d0c <extract_data>
	        pin_config();
 8004b46:	f000 f919 	bl	8004d7c <pin_config>
	        clear_buffer();
 8004b4a:	f000 f811 	bl	8004b70 <clear_buffer>
           }

           set_output(&d);
 8004b4e:	4807      	ldr	r0, [pc, #28]	; (8004b6c <Configurator+0x50>)
 8004b50:	f000 f81a 	bl	8004b88 <set_output>
           reset_output(&d);
 8004b54:	4805      	ldr	r0, [pc, #20]	; (8004b6c <Configurator+0x50>)
 8004b56:	f000 f859 	bl	8004c0c <reset_output>
//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

           read_pinstatus(&d);
 8004b5a:	4804      	ldr	r0, [pc, #16]	; (8004b6c <Configurator+0x50>)
 8004b5c:	f000 f898 	bl	8004c90 <read_pinstatus>
           // status_transmit();
            //DataTOgsm(d);


 }
 8004b60:	bf00      	nop
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000214 	.word	0x20000214
 8004b68:	20000284 	.word	0x20000284
 8004b6c:	20000170 	.word	0x20000170

08004b70 <clear_buffer>:

 void clear_buffer()
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 8004b74:	220f      	movs	r2, #15
 8004b76:	2100      	movs	r1, #0
 8004b78:	4802      	ldr	r0, [pc, #8]	; (8004b84 <clear_buffer+0x14>)
 8004b7a:	f000 ffc9 	bl	8005b10 <memset>
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000214 	.word	0x20000214

08004b88 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

 void set_output(struct data *d)
 {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	 if(config[0] == 0)
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <set_output+0x78>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <set_output+0x22>
	{
		 d->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_SET);
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2104      	movs	r1, #4
 8004b9c:	4819      	ldr	r0, [pc, #100]	; (8004c04 <set_output+0x7c>)
 8004b9e:	f000 ff23 	bl	80059e8 <write_gpio>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	761a      	strb	r2, [r3, #24]
	}

	if(config[1] == 0)
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <set_output+0x78>)
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <set_output+0x3c>
	{
		d->GPIO[1] = write_gpio(GPIOC,GPIO_PIN_1, PIN_SET);
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	4814      	ldr	r0, [pc, #80]	; (8004c08 <set_output+0x80>)
 8004bb8:	f000 ff16 	bl	80059e8 <write_gpio>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	765a      	strb	r2, [r3, #25]
	}

	if(config[2] == 0)
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <set_output+0x78>)
 8004bc6:	789b      	ldrb	r3, [r3, #2]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d108      	bne.n	8004bde <set_output+0x56>
	{
		d->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 8004bcc:	2201      	movs	r2, #1
 8004bce:	2110      	movs	r1, #16
 8004bd0:	480c      	ldr	r0, [pc, #48]	; (8004c04 <set_output+0x7c>)
 8004bd2:	f000 ff09 	bl	80059e8 <write_gpio>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	769a      	strb	r2, [r3, #26]
	}

	if(config[3] == 0)
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <set_output+0x78>)
 8004be0:	78db      	ldrb	r3, [r3, #3]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <set_output+0x70>
	{
		d->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8004be6:	2201      	movs	r2, #1
 8004be8:	2120      	movs	r1, #32
 8004bea:	4806      	ldr	r0, [pc, #24]	; (8004c04 <set_output+0x7c>)
 8004bec:	f000 fefc 	bl	80059e8 <write_gpio>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	76da      	strb	r2, [r3, #27]
	}
//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
 }
 8004bf8:	bf00      	nop
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000288 	.word	0x20000288
 8004c04:	40020400 	.word	0x40020400
 8004c08:	40020800 	.word	0x40020800

08004c0c <reset_output>:

 void reset_output(struct data *d1)
  {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 	 if(config[0] == 0)
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <reset_output+0x78>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d108      	bne.n	8004c2e <reset_output+0x22>
 	{
 		d1->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_RESET);
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2104      	movs	r1, #4
 8004c20:	4819      	ldr	r0, [pc, #100]	; (8004c88 <reset_output+0x7c>)
 8004c22:	f000 fee1 	bl	80059e8 <write_gpio>
 8004c26:	4603      	mov	r3, r0
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	761a      	strb	r2, [r3, #24]
 	}

 	if(config[1] == 0)
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <reset_output+0x78>)
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d108      	bne.n	8004c48 <reset_output+0x3c>
 	{
 		d1->GPIO[1]=write_gpio(GPIOC,GPIO_PIN_1, PIN_RESET);
 8004c36:	2200      	movs	r2, #0
 8004c38:	2102      	movs	r1, #2
 8004c3a:	4814      	ldr	r0, [pc, #80]	; (8004c8c <reset_output+0x80>)
 8004c3c:	f000 fed4 	bl	80059e8 <write_gpio>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	765a      	strb	r2, [r3, #25]
 	}

 	if(config[2] == 0)
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <reset_output+0x78>)
 8004c4a:	789b      	ldrb	r3, [r3, #2]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <reset_output+0x56>
 	{
 		d1->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 8004c50:	2200      	movs	r2, #0
 8004c52:	2110      	movs	r1, #16
 8004c54:	480c      	ldr	r0, [pc, #48]	; (8004c88 <reset_output+0x7c>)
 8004c56:	f000 fec7 	bl	80059e8 <write_gpio>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	769a      	strb	r2, [r3, #26]
 	}

 	if(config[3] == 0)
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <reset_output+0x78>)
 8004c64:	78db      	ldrb	r3, [r3, #3]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <reset_output+0x70>
 	{
 		d1->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2120      	movs	r1, #32
 8004c6e:	4806      	ldr	r0, [pc, #24]	; (8004c88 <reset_output+0x7c>)
 8004c70:	f000 feba 	bl	80059e8 <write_gpio>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	76da      	strb	r2, [r3, #27]
 	}
  }
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000288 	.word	0x20000288
 8004c88:	40020400 	.word	0x40020400
 8004c8c:	40020800 	.word	0x40020800

08004c90 <read_pinstatus>:

 void read_pinstatus(struct data *d2)
 {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	 if(config[0]==1)
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <read_pinstatus+0x70>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d107      	bne.n	8004cb0 <read_pinstatus+0x20>
	 {
	     d2->GPIO[0]=read_gpio( GPIOB,GPIO_PIN_2);
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	4818      	ldr	r0, [pc, #96]	; (8004d04 <read_pinstatus+0x74>)
 8004ca4:	f000 fe90 	bl	80059c8 <read_gpio>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	761a      	strb	r2, [r3, #24]
	 }
	 if(config[1]==1)
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <read_pinstatus+0x70>)
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <read_pinstatus+0x38>
	 {
		 d2->GPIO[1]=read_gpio(GPIOC,GPIO_PIN_1);
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4813      	ldr	r0, [pc, #76]	; (8004d08 <read_pinstatus+0x78>)
 8004cbc:	f000 fe84 	bl	80059c8 <read_gpio>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	765a      	strb	r2, [r3, #25]
	 }
	 if(config[2]==1)
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <read_pinstatus+0x70>)
 8004cca:	789b      	ldrb	r3, [r3, #2]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <read_pinstatus+0x50>
	 {
	    d2->GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 8004cd0:	2110      	movs	r1, #16
 8004cd2:	480c      	ldr	r0, [pc, #48]	; (8004d04 <read_pinstatus+0x74>)
 8004cd4:	f000 fe78 	bl	80059c8 <read_gpio>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	769a      	strb	r2, [r3, #26]
	 }
	if(config[3]==1)
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <read_pinstatus+0x70>)
 8004ce2:	78db      	ldrb	r3, [r3, #3]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <read_pinstatus+0x68>
	{
	   d2->GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 8004ce8:	2120      	movs	r1, #32
 8004cea:	4806      	ldr	r0, [pc, #24]	; (8004d04 <read_pinstatus+0x74>)
 8004cec:	f000 fe6c 	bl	80059c8 <read_gpio>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	76da      	strb	r2, [r3, #27]
    }
//	 return d->GPIO;
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000288 	.word	0x20000288
 8004d04:	40020400 	.word	0x40020400
 8004d08:	40020800 	.word	0x40020800

08004d0c <extract_data>:


void extract_data()
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 8004d10:	4915      	ldr	r1, [pc, #84]	; (8004d68 <extract_data+0x5c>)
 8004d12:	4816      	ldr	r0, [pc, #88]	; (8004d6c <extract_data+0x60>)
 8004d14:	f001 f85c 	bl	8005dd0 <strtok>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <extract_data+0x64>)
 8004d1c:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <extract_data+0x64>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <extract_data+0x64>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2209      	movs	r2, #9
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4811      	ldr	r0, [pc, #68]	; (8004d74 <extract_data+0x68>)
 8004d30:	f001 f83a 	bl	8005da8 <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <extract_data+0x68>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	725a      	strb	r2, [r3, #9]
		         token = strtok(NULL, ",");
 8004d3a:	490b      	ldr	r1, [pc, #44]	; (8004d68 <extract_data+0x5c>)
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f001 f847 	bl	8005dd0 <strtok>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <extract_data+0x64>)
 8004d46:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <extract_data+0x64>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <extract_data+0x64>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2209      	movs	r2, #9
 8004d56:	4619      	mov	r1, r3
 8004d58:	4807      	ldr	r0, [pc, #28]	; (8004d78 <extract_data+0x6c>)
 8004d5a:	f001 f825 	bl	8005da8 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8004d5e:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <extract_data+0x6c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	725a      	strb	r2, [r3, #9]
		         //token = strtok(NULL, ",");
		     }


}
 8004d64:	bf00      	nop
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	08007164 	.word	0x08007164
 8004d6c:	20000214 	.word	0x20000214
 8004d70:	20000280 	.word	0x20000280
 8004d74:	20000268 	.word	0x20000268
 8004d78:	20000274 	.word	0x20000274

08004d7c <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af04      	add	r7, sp, #16

	            if(strcmp(arr1,"B2")==0)
 8004d82:	4998      	ldr	r1, [pc, #608]	; (8004fe4 <pin_config+0x268>)
 8004d84:	4898      	ldr	r0, [pc, #608]	; (8004fe8 <pin_config+0x26c>)
 8004d86:	f7fb fa43 	bl	8000210 <strcmp>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <pin_config+0x1c>
			     {
			       switch_val=1;
 8004d90:	4b96      	ldr	r3, [pc, #600]	; (8004fec <pin_config+0x270>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e040      	b.n	8004e1a <pin_config+0x9e>
			     }

	            else if(strcmp(arr1,"C1")==0)
 8004d98:	4995      	ldr	r1, [pc, #596]	; (8004ff0 <pin_config+0x274>)
 8004d9a:	4893      	ldr	r0, [pc, #588]	; (8004fe8 <pin_config+0x26c>)
 8004d9c:	f7fb fa38 	bl	8000210 <strcmp>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <pin_config+0x32>
				 {
				   switch_val=2;
 8004da6:	4b91      	ldr	r3, [pc, #580]	; (8004fec <pin_config+0x270>)
 8004da8:	2202      	movs	r2, #2
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e035      	b.n	8004e1a <pin_config+0x9e>
				 }

	            else if(strcmp(arr1,"B4")==0)
 8004dae:	4991      	ldr	r1, [pc, #580]	; (8004ff4 <pin_config+0x278>)
 8004db0:	488d      	ldr	r0, [pc, #564]	; (8004fe8 <pin_config+0x26c>)
 8004db2:	f7fb fa2d 	bl	8000210 <strcmp>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <pin_config+0x48>
	           	 {
	           		switch_val=3;
 8004dbc:	4b8b      	ldr	r3, [pc, #556]	; (8004fec <pin_config+0x270>)
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e02a      	b.n	8004e1a <pin_config+0x9e>
	           	 }

	            else if(strcmp(arr1,"B5")==0)
 8004dc4:	498c      	ldr	r1, [pc, #560]	; (8004ff8 <pin_config+0x27c>)
 8004dc6:	4888      	ldr	r0, [pc, #544]	; (8004fe8 <pin_config+0x26c>)
 8004dc8:	f7fb fa22 	bl	8000210 <strcmp>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <pin_config+0x5e>
                 {
				    switch_val=4;
 8004dd2:	4b86      	ldr	r3, [pc, #536]	; (8004fec <pin_config+0x270>)
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e01f      	b.n	8004e1a <pin_config+0x9e>
				 }

	            else if(strcmp(arr1,"ADC1")==0)
 8004dda:	4988      	ldr	r1, [pc, #544]	; (8004ffc <pin_config+0x280>)
 8004ddc:	4882      	ldr	r0, [pc, #520]	; (8004fe8 <pin_config+0x26c>)
 8004dde:	f7fb fa17 	bl	8000210 <strcmp>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <pin_config+0x74>
				 {
					switch_val=5;
 8004de8:	4b80      	ldr	r3, [pc, #512]	; (8004fec <pin_config+0x270>)
 8004dea:	2205      	movs	r2, #5
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e014      	b.n	8004e1a <pin_config+0x9e>
				 }

	            else if(strcmp(arr1,"RTC")==0)
 8004df0:	4983      	ldr	r1, [pc, #524]	; (8005000 <pin_config+0x284>)
 8004df2:	487d      	ldr	r0, [pc, #500]	; (8004fe8 <pin_config+0x26c>)
 8004df4:	f7fb fa0c 	bl	8000210 <strcmp>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <pin_config+0x8a>
	             {
	            	switch_val=6;
 8004dfe:	4b7b      	ldr	r3, [pc, #492]	; (8004fec <pin_config+0x270>)
 8004e00:	2206      	movs	r2, #6
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e009      	b.n	8004e1a <pin_config+0x9e>
	             }

	            else if(strcmp(arr1,"SCANTIME")==0)
 8004e06:	497f      	ldr	r1, [pc, #508]	; (8005004 <pin_config+0x288>)
 8004e08:	4877      	ldr	r0, [pc, #476]	; (8004fe8 <pin_config+0x26c>)
 8004e0a:	f7fb fa01 	bl	8000210 <strcmp>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <pin_config+0x9e>
				 {
					switch_val=7;
 8004e14:	4b75      	ldr	r3, [pc, #468]	; (8004fec <pin_config+0x270>)
 8004e16:	2207      	movs	r2, #7
 8004e18:	601a      	str	r2, [r3, #0]
				 }


			     switch(switch_val)
 8004e1a:	4b74      	ldr	r3, [pc, #464]	; (8004fec <pin_config+0x270>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	f200 8164 	bhi.w	80050ee <pin_config+0x372>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <pin_config+0xb0>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e49 	.word	0x08004e49
 8004e30:	08004e8b 	.word	0x08004e8b
 8004e34:	08004ecd 	.word	0x08004ecd
 8004e38:	08004f0f 	.word	0x08004f0f
 8004e3c:	08004f51 	.word	0x08004f51
 8004e40:	08005039 	.word	0x08005039
 8004e44:	080050d1 	.word	0x080050d1
			     {

			     case 1:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8004e48:	496f      	ldr	r1, [pc, #444]	; (8005008 <pin_config+0x28c>)
 8004e4a:	4870      	ldr	r0, [pc, #448]	; (800500c <pin_config+0x290>)
 8004e4c:	f7fb f9e0 	bl	8000210 <strcmp>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <pin_config+0xec>
						{
			              user_GPIO_Init(GPIOB,GPIO_PIN_2,OUTPUT);
 8004e56:	2200      	movs	r2, #0
 8004e58:	2104      	movs	r1, #4
 8004e5a:	486d      	ldr	r0, [pc, #436]	; (8005010 <pin_config+0x294>)
 8004e5c:	f000 fcfe 	bl	800585c <user_GPIO_Init>
					      config[0] = 0;
 8004e60:	4b6c      	ldr	r3, [pc, #432]	; (8005014 <pin_config+0x298>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
			              else if(strcmp(arr2,"INPUT")==0)
					    {
						   user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
						   config[0] = 1;
					    }
			     break;
 8004e66:	e13b      	b.n	80050e0 <pin_config+0x364>
			              else if(strcmp(arr2,"INPUT")==0)
 8004e68:	496b      	ldr	r1, [pc, #428]	; (8005018 <pin_config+0x29c>)
 8004e6a:	4868      	ldr	r0, [pc, #416]	; (800500c <pin_config+0x290>)
 8004e6c:	f7fb f9d0 	bl	8000210 <strcmp>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f040 8134 	bne.w	80050e0 <pin_config+0x364>
						   user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	4864      	ldr	r0, [pc, #400]	; (8005010 <pin_config+0x294>)
 8004e7e:	f000 fced 	bl	800585c <user_GPIO_Init>
						   config[0] = 1;
 8004e82:	4b64      	ldr	r3, [pc, #400]	; (8005014 <pin_config+0x298>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
			     break;
 8004e88:	e12a      	b.n	80050e0 <pin_config+0x364>

			   case 2:
				    	if(strcmp(arr2,"OUTPUT")==0)
 8004e8a:	495f      	ldr	r1, [pc, #380]	; (8005008 <pin_config+0x28c>)
 8004e8c:	485f      	ldr	r0, [pc, #380]	; (800500c <pin_config+0x290>)
 8004e8e:	f7fb f9bf 	bl	8000210 <strcmp>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <pin_config+0x12e>
			    		{
			    	      user_GPIO_Init(GPIOC,GPIO_PIN_1,OUTPUT);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	485f      	ldr	r0, [pc, #380]	; (800501c <pin_config+0x2a0>)
 8004e9e:	f000 fcdd 	bl	800585c <user_GPIO_Init>
			    	      config[1]=0;
 8004ea2:	4b5c      	ldr	r3, [pc, #368]	; (8005014 <pin_config+0x298>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	705a      	strb	r2, [r3, #1]
			    	     else if(strcmp(arr2,"INPUT")==0)
			    		{
			    		  user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
			    		  config[1]=1;
			    		}
	    	    break;
 8004ea8:	e11c      	b.n	80050e4 <pin_config+0x368>
			    	     else if(strcmp(arr2,"INPUT")==0)
 8004eaa:	495b      	ldr	r1, [pc, #364]	; (8005018 <pin_config+0x29c>)
 8004eac:	4857      	ldr	r0, [pc, #348]	; (800500c <pin_config+0x290>)
 8004eae:	f7fb f9af 	bl	8000210 <strcmp>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 8115 	bne.w	80050e4 <pin_config+0x368>
			    		  user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
 8004eba:	2201      	movs	r2, #1
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4857      	ldr	r0, [pc, #348]	; (800501c <pin_config+0x2a0>)
 8004ec0:	f000 fccc 	bl	800585c <user_GPIO_Init>
			    		  config[1]=1;
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <pin_config+0x298>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	705a      	strb	r2, [r3, #1]
	    	    break;
 8004eca:	e10b      	b.n	80050e4 <pin_config+0x368>

			     case 3:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8004ecc:	494e      	ldr	r1, [pc, #312]	; (8005008 <pin_config+0x28c>)
 8004ece:	484f      	ldr	r0, [pc, #316]	; (800500c <pin_config+0x290>)
 8004ed0:	f7fb f99e 	bl	8000210 <strcmp>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d108      	bne.n	8004eec <pin_config+0x170>
			     		{
			    	 	  user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8004eda:	2200      	movs	r2, #0
 8004edc:	2110      	movs	r1, #16
 8004ede:	484c      	ldr	r0, [pc, #304]	; (8005010 <pin_config+0x294>)
 8004ee0:	f000 fcbc 	bl	800585c <user_GPIO_Init>
			     		  config[2]=0;
 8004ee4:	4b4b      	ldr	r3, [pc, #300]	; (8005014 <pin_config+0x298>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	709a      	strb	r2, [r3, #2]
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			     		  config[2]=1;
			     		}

			     break;
 8004eea:	e0fd      	b.n	80050e8 <pin_config+0x36c>
			     		 else if(strcmp(arr2,"INPUT")==0)
 8004eec:	494a      	ldr	r1, [pc, #296]	; (8005018 <pin_config+0x29c>)
 8004eee:	4847      	ldr	r0, [pc, #284]	; (800500c <pin_config+0x290>)
 8004ef0:	f7fb f98e 	bl	8000210 <strcmp>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 80f6 	bne.w	80050e8 <pin_config+0x36c>
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8004efc:	2201      	movs	r2, #1
 8004efe:	2110      	movs	r1, #16
 8004f00:	4843      	ldr	r0, [pc, #268]	; (8005010 <pin_config+0x294>)
 8004f02:	f000 fcab 	bl	800585c <user_GPIO_Init>
			     		  config[2]=1;
 8004f06:	4b43      	ldr	r3, [pc, #268]	; (8005014 <pin_config+0x298>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	709a      	strb	r2, [r3, #2]
			     break;
 8004f0c:	e0ec      	b.n	80050e8 <pin_config+0x36c>

			     case 4:
			    	 	 if(strcmp(arr2,"OUTPUT")==0)
 8004f0e:	493e      	ldr	r1, [pc, #248]	; (8005008 <pin_config+0x28c>)
 8004f10:	483e      	ldr	r0, [pc, #248]	; (800500c <pin_config+0x290>)
 8004f12:	f7fb f97d 	bl	8000210 <strcmp>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d108      	bne.n	8004f2e <pin_config+0x1b2>
			    		{
			    	 	  user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2120      	movs	r1, #32
 8004f20:	483b      	ldr	r0, [pc, #236]	; (8005010 <pin_config+0x294>)
 8004f22:	f000 fc9b 	bl	800585c <user_GPIO_Init>
			    		  config[3]=0;
 8004f26:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <pin_config+0x298>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	70da      	strb	r2, [r3, #3]
			    		  else if(strcmp(arr2,"INPUT")==0)
			    	    {
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			              config[3]=1;
			    	    }
			     break;
 8004f2c:	e0de      	b.n	80050ec <pin_config+0x370>
			    		  else if(strcmp(arr2,"INPUT")==0)
 8004f2e:	493a      	ldr	r1, [pc, #232]	; (8005018 <pin_config+0x29c>)
 8004f30:	4836      	ldr	r0, [pc, #216]	; (800500c <pin_config+0x290>)
 8004f32:	f7fb f96d 	bl	8000210 <strcmp>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 80d7 	bne.w	80050ec <pin_config+0x370>
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2120      	movs	r1, #32
 8004f42:	4833      	ldr	r0, [pc, #204]	; (8005010 <pin_config+0x294>)
 8004f44:	f000 fc8a 	bl	800585c <user_GPIO_Init>
			              config[3]=1;
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <pin_config+0x298>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	70da      	strb	r2, [r3, #3]
			     break;
 8004f4e:	e0cd      	b.n	80050ec <pin_config+0x370>

			    case 5:
					if(strcmp(arr2,"CH1")==0)
 8004f50:	4933      	ldr	r1, [pc, #204]	; (8005020 <pin_config+0x2a4>)
 8004f52:	482e      	ldr	r0, [pc, #184]	; (800500c <pin_config+0x290>)
 8004f54:	f7fb f95c 	bl	8000210 <strcmp>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <pin_config+0x1ee>
					{
						ADC_select_CH1();
 8004f5e:	f000 f989 	bl	8005274 <ADC_select_CH1>
						adcChnlChecker[0] = 1;
 8004f62:	4b30      	ldr	r3, [pc, #192]	; (8005024 <pin_config+0x2a8>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						__NOP();
					}
					break;
 8004f68:	e0c1      	b.n	80050ee <pin_config+0x372>
					else if(strcmp(arr2,"CH2")==0)
 8004f6a:	492f      	ldr	r1, [pc, #188]	; (8005028 <pin_config+0x2ac>)
 8004f6c:	4827      	ldr	r0, [pc, #156]	; (800500c <pin_config+0x290>)
 8004f6e:	f7fb f94f 	bl	8000210 <strcmp>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <pin_config+0x208>
						ADC_select_CH2();
 8004f78:	f000 f996 	bl	80052a8 <ADC_select_CH2>
						adcChnlChecker[1] = 1;
 8004f7c:	4b29      	ldr	r3, [pc, #164]	; (8005024 <pin_config+0x2a8>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	705a      	strb	r2, [r3, #1]
					break;
 8004f82:	e0b4      	b.n	80050ee <pin_config+0x372>
					else if(strcmp(arr2,"CH3")==0)
 8004f84:	4929      	ldr	r1, [pc, #164]	; (800502c <pin_config+0x2b0>)
 8004f86:	4821      	ldr	r0, [pc, #132]	; (800500c <pin_config+0x290>)
 8004f88:	f7fb f942 	bl	8000210 <strcmp>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d105      	bne.n	8004f9e <pin_config+0x222>
						ADC_select_CH3();
 8004f92:	f000 f9a3 	bl	80052dc <ADC_select_CH3>
						adcChnlChecker[2] = 1;
 8004f96:	4b23      	ldr	r3, [pc, #140]	; (8005024 <pin_config+0x2a8>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	709a      	strb	r2, [r3, #2]
					break;
 8004f9c:	e0a7      	b.n	80050ee <pin_config+0x372>
					else if(strcmp(arr2,"CH4")==0)
 8004f9e:	4924      	ldr	r1, [pc, #144]	; (8005030 <pin_config+0x2b4>)
 8004fa0:	481a      	ldr	r0, [pc, #104]	; (800500c <pin_config+0x290>)
 8004fa2:	f7fb f935 	bl	8000210 <strcmp>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <pin_config+0x23c>
						ADC_select_CH4();
 8004fac:	f000 f9b0 	bl	8005310 <ADC_select_CH4>
						adcChnlChecker[3] = 1;
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <pin_config+0x2a8>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	70da      	strb	r2, [r3, #3]
					break;
 8004fb6:	e09a      	b.n	80050ee <pin_config+0x372>
					else if(strcmp(arr2,"DB2")==0)
 8004fb8:	491e      	ldr	r1, [pc, #120]	; (8005034 <pin_config+0x2b8>)
 8004fba:	4814      	ldr	r0, [pc, #80]	; (800500c <pin_config+0x290>)
 8004fbc:	f7fb f928 	bl	8000210 <strcmp>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10c      	bne.n	8004fe0 <pin_config+0x264>
						adcChnlChecker[0] = 0;
 8004fc6:	4b17      	ldr	r3, [pc, #92]	; (8005024 <pin_config+0x2a8>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
						adcChnlChecker[1] = 0;
 8004fcc:	4b15      	ldr	r3, [pc, #84]	; (8005024 <pin_config+0x2a8>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	705a      	strb	r2, [r3, #1]
						adcChnlChecker[2] = 0;
 8004fd2:	4b14      	ldr	r3, [pc, #80]	; (8005024 <pin_config+0x2a8>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	709a      	strb	r2, [r3, #2]
						adcChnlChecker[3] = 0;
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <pin_config+0x2a8>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	70da      	strb	r2, [r3, #3]
					break;
 8004fde:	e086      	b.n	80050ee <pin_config+0x372>
						__NOP();
 8004fe0:	bf00      	nop
					break;
 8004fe2:	e084      	b.n	80050ee <pin_config+0x372>
 8004fe4:	08007168 	.word	0x08007168
 8004fe8:	20000268 	.word	0x20000268
 8004fec:	20000210 	.word	0x20000210
 8004ff0:	0800716c 	.word	0x0800716c
 8004ff4:	08007170 	.word	0x08007170
 8004ff8:	08007174 	.word	0x08007174
 8004ffc:	08007178 	.word	0x08007178
 8005000:	08007180 	.word	0x08007180
 8005004:	08007184 	.word	0x08007184
 8005008:	08007190 	.word	0x08007190
 800500c:	20000274 	.word	0x20000274
 8005010:	40020400 	.word	0x40020400
 8005014:	20000288 	.word	0x20000288
 8005018:	08007198 	.word	0x08007198
 800501c:	40020800 	.word	0x40020800
 8005020:	080071a0 	.word	0x080071a0
 8005024:	2000028c 	.word	0x2000028c
 8005028:	080071a4 	.word	0x080071a4
 800502c:	080071a8 	.word	0x080071a8
 8005030:	080071ac 	.word	0x080071ac
 8005034:	080071b0 	.word	0x080071b0

			     case 6:

				  token = strtok(arr2, ":");
 8005038:	492e      	ldr	r1, [pc, #184]	; (80050f4 <pin_config+0x378>)
 800503a:	482f      	ldr	r0, [pc, #188]	; (80050f8 <pin_config+0x37c>)
 800503c:	f000 fec8 	bl	8005dd0 <strtok>
 8005040:	4603      	mov	r3, r0
 8005042:	4a2e      	ldr	r2, [pc, #184]	; (80050fc <pin_config+0x380>)
 8005044:	6013      	str	r3, [r2, #0]

				 // Get the first token and convert to integer
				 if (token != NULL)
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <pin_config+0x380>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00f      	beq.n	800506e <pin_config+0x2f2>
				 {
					 d.hour = atoi(token);
 800504e:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <pin_config+0x380>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fd1e 	bl	8005a94 <atoi>
 8005058:	4603      	mov	r3, r0
 800505a:	b2da      	uxtb	r2, r3
 800505c:	4b28      	ldr	r3, [pc, #160]	; (8005100 <pin_config+0x384>)
 800505e:	709a      	strb	r2, [r3, #2]
					 token = strtok(NULL, ":");
 8005060:	4924      	ldr	r1, [pc, #144]	; (80050f4 <pin_config+0x378>)
 8005062:	2000      	movs	r0, #0
 8005064:	f000 feb4 	bl	8005dd0 <strtok>
 8005068:	4603      	mov	r3, r0
 800506a:	4a24      	ldr	r2, [pc, #144]	; (80050fc <pin_config+0x380>)
 800506c:	6013      	str	r3, [r2, #0]
				 }

				 // Get the second token and convert to integer
				 if (token != NULL)
 800506e:	4b23      	ldr	r3, [pc, #140]	; (80050fc <pin_config+0x380>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00f      	beq.n	8005096 <pin_config+0x31a>
				 {
					 d.minutes = atoi(token);
 8005076:	4b21      	ldr	r3, [pc, #132]	; (80050fc <pin_config+0x380>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fd0a 	bl	8005a94 <atoi>
 8005080:	4603      	mov	r3, r0
 8005082:	b2da      	uxtb	r2, r3
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <pin_config+0x384>)
 8005086:	705a      	strb	r2, [r3, #1]
					 token = strtok(NULL, ":");
 8005088:	491a      	ldr	r1, [pc, #104]	; (80050f4 <pin_config+0x378>)
 800508a:	2000      	movs	r0, #0
 800508c:	f000 fea0 	bl	8005dd0 <strtok>
 8005090:	4603      	mov	r3, r0
 8005092:	4a1a      	ldr	r2, [pc, #104]	; (80050fc <pin_config+0x380>)
 8005094:	6013      	str	r3, [r2, #0]
				 }

				 // Get the third token and convert to integer
				 if (token != NULL)
 8005096:	4b19      	ldr	r3, [pc, #100]	; (80050fc <pin_config+0x380>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <pin_config+0x334>
				 {
					 d.seconds = atoi(token);
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <pin_config+0x380>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fcf6 	bl	8005a94 <atoi>
 80050a8:	4603      	mov	r3, r0
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <pin_config+0x384>)
 80050ae:	701a      	strb	r2, [r3, #0]
				 }
//				 Set_Time(time);

				 set_time(d.seconds,d.minutes,d.hour,3,11,9,24);
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <pin_config+0x384>)
 80050b2:	7818      	ldrb	r0, [r3, #0]
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <pin_config+0x384>)
 80050b6:	7859      	ldrb	r1, [r3, #1]
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <pin_config+0x384>)
 80050ba:	789a      	ldrb	r2, [r3, #2]
 80050bc:	2318      	movs	r3, #24
 80050be:	9302      	str	r3, [sp, #8]
 80050c0:	2309      	movs	r3, #9
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	230b      	movs	r3, #11
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2303      	movs	r3, #3
 80050ca:	f7ff fc87 	bl	80049dc <set_time>

			 break;
 80050ce:	e00e      	b.n	80050ee <pin_config+0x372>

			     case 7:
			    	 d.scan_time = (uint8_t)atoi(arr2);
 80050d0:	4809      	ldr	r0, [pc, #36]	; (80050f8 <pin_config+0x37c>)
 80050d2:	f000 fcdf 	bl	8005a94 <atoi>
 80050d6:	4603      	mov	r3, r0
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <pin_config+0x384>)
 80050dc:	771a      	strb	r2, [r3, #28]
			    	 break;
 80050de:	e006      	b.n	80050ee <pin_config+0x372>
			     break;
 80050e0:	bf00      	nop
 80050e2:	e004      	b.n	80050ee <pin_config+0x372>
	    	    break;
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <pin_config+0x372>
			     break;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <pin_config+0x372>
			     break;
 80050ec:	bf00      	nop

			     }
}
 80050ee:	bf00      	nop
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	080071b4 	.word	0x080071b4
 80050f8:	20000274 	.word	0x20000274
 80050fc:	20000280 	.word	0x20000280
 8005100:	20000170 	.word	0x20000170

08005104 <terminal>:
extern char CH4[10];



void terminal(struct data *d)
{
 8005104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005106:	b08f      	sub	sp, #60	; 0x3c
 8005108:	af0c      	add	r7, sp, #48	; 0x30
 800510a:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"TIME:%02d:%02d:%02d DATE:%02d/%02d/%02d CH1:%s CH2:%s CH3:%s CH4:%s GPIO1:%s GPIO2:%s GPIO3:%s GPIO4:%s\r\n",d->hour,d->minutes,d->seconds,d->dayofmonth,d->month,d->year,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	789b      	ldrb	r3, [r3, #2]
 8005110:	469c      	mov	ip, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	785b      	ldrb	r3, [r3, #1]
 8005116:	469e      	mov	lr, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	461c      	mov	r4, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	791b      	ldrb	r3, [r3, #4]
 8005122:	461d      	mov	r5, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	795b      	ldrb	r3, [r3, #5]
 8005128:	461e      	mov	r6, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	799b      	ldrb	r3, [r3, #6]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	331d      	adds	r3, #29
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	3227      	adds	r2, #39	; 0x27
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	3131      	adds	r1, #49	; 0x31
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	303b      	adds	r0, #59	; 0x3b
 8005140:	900b      	str	r0, [sp, #44]	; 0x2c
 8005142:	910a      	str	r1, [sp, #40]	; 0x28
 8005144:	9209      	str	r2, [sp, #36]	; 0x24
 8005146:	9308      	str	r3, [sp, #32]
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <terminal+0x78>)
 800514a:	9307      	str	r3, [sp, #28]
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <terminal+0x7c>)
 800514e:	9306      	str	r3, [sp, #24]
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <terminal+0x80>)
 8005152:	9305      	str	r3, [sp, #20]
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <terminal+0x84>)
 8005156:	9304      	str	r3, [sp, #16]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	9602      	str	r6, [sp, #8]
 800515e:	9501      	str	r5, [sp, #4]
 8005160:	9400      	str	r4, [sp, #0]
 8005162:	4673      	mov	r3, lr
 8005164:	4662      	mov	r2, ip
 8005166:	4909      	ldr	r1, [pc, #36]	; (800518c <terminal+0x88>)
 8005168:	4809      	ldr	r0, [pc, #36]	; (8005190 <terminal+0x8c>)
 800516a:	f000 fdfd 	bl	8005d68 <siprintf>
//	sprintf((char*)buf2,"%02d:%02d:%02d\r\n",d->dayofmonth,d->month,d->year);
	uart3_tx(buf);
 800516e:	4808      	ldr	r0, [pc, #32]	; (8005190 <terminal+0x8c>)
 8005170:	f000 fc4e 	bl	8005a10 <uart3_tx>
//	HAL_Delay(100);

}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517c:	20000200 	.word	0x20000200
 8005180:	200001f4 	.word	0x200001f4
 8005184:	200001e8 	.word	0x200001e8
 8005188:	200001dc 	.word	0x200001dc
 800518c:	080071b8 	.word	0x080071b8
 8005190:	20000290 	.word	0x20000290

08005194 <USER_ADC1_Init>:
//	 */
//	HAL_RCCEx_EnableMSIPLLMode();
//}

void USER_ADC1_Init(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
	//
	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	 hadc1.Instance = ADC1;
 8005198:	4b18      	ldr	r3, [pc, #96]	; (80051fc <USER_ADC1_Init+0x68>)
 800519a:	4a19      	ldr	r2, [pc, #100]	; (8005200 <USER_ADC1_Init+0x6c>)
 800519c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800519e:	4b17      	ldr	r3, [pc, #92]	; (80051fc <USER_ADC1_Init+0x68>)
 80051a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051a4:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <USER_ADC1_Init+0x68>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <USER_ADC1_Init+0x68>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <USER_ADC1_Init+0x68>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <USER_ADC1_Init+0x68>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <USER_ADC1_Init+0x68>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80051c6:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <USER_ADC1_Init+0x68>)
 80051c8:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <USER_ADC1_Init+0x70>)
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <USER_ADC1_Init+0x68>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 4;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <USER_ADC1_Init+0x68>)
 80051d4:	2204      	movs	r2, #4
 80051d6:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <USER_ADC1_Init+0x68>)
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <USER_ADC1_Init+0x68>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80051e6:	4805      	ldr	r0, [pc, #20]	; (80051fc <USER_ADC1_Init+0x68>)
 80051e8:	f7fc f8d0 	bl	800138c <HAL_ADC_Init>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <USER_ADC1_Init+0x62>
	  {
	    Error_Handler();
 80051f2:	f7fb fd44 	bl	8000c7e <Error_Handler>
	  }


	}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000368 	.word	0x20000368
 8005200:	40012000 	.word	0x40012000
 8005204:	0f000001 	.word	0x0f000001

08005208 <USER_GPIO_Init>:


void USER_GPIO_Init(void)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <USER_GPIO_Init+0x68>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <USER_GPIO_Init+0x68>)
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	6313      	str	r3, [r2, #48]	; 0x30
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <USER_GPIO_Init+0x68>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <USER_GPIO_Init+0x68>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <USER_GPIO_Init+0x68>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6313      	str	r3, [r2, #48]	; 0x30
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <USER_GPIO_Init+0x68>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <USER_GPIO_Init+0x68>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	4a08      	ldr	r2, [pc, #32]	; (8005270 <USER_GPIO_Init+0x68>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	6313      	str	r3, [r2, #48]	; 0x30
 8005256:	4b06      	ldr	r3, [pc, #24]	; (8005270 <USER_GPIO_Init+0x68>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800

08005274 <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_5;
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <ADC_select_CH1+0x2c>)
 800527a:	2205      	movs	r2, #5
 800527c:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <ADC_select_CH1+0x2c>)
 8005280:	2201      	movs	r2, #1
 8005282:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <ADC_select_CH1+0x2c>)
 8005286:	2205      	movs	r2, #5
 8005288:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800528a:	4905      	ldr	r1, [pc, #20]	; (80052a0 <ADC_select_CH1+0x2c>)
 800528c:	4805      	ldr	r0, [pc, #20]	; (80052a4 <ADC_select_CH1+0x30>)
 800528e:	f7fc fa5f 	bl	8001750 <HAL_ADC_ConfigChannel>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <ADC_select_CH1+0x28>
	  {
	    Error_Handler();
 8005298:	f7fb fcf1 	bl	8000c7e <Error_Handler>
	  }
}
 800529c:	bf00      	nop
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000358 	.word	0x20000358
 80052a4:	20000368 	.word	0x20000368

080052a8 <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
	 sConfig.Channel = ADC_CHANNEL_6;
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <ADC_select_CH2+0x2c>)
 80052ae:	2206      	movs	r2, #6
 80052b0:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <ADC_select_CH2+0x2c>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80052b8:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <ADC_select_CH2+0x2c>)
 80052ba:	2205      	movs	r2, #5
 80052bc:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80052be:	4905      	ldr	r1, [pc, #20]	; (80052d4 <ADC_select_CH2+0x2c>)
 80052c0:	4805      	ldr	r0, [pc, #20]	; (80052d8 <ADC_select_CH2+0x30>)
 80052c2:	f7fc fa45 	bl	8001750 <HAL_ADC_ConfigChannel>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <ADC_select_CH2+0x28>
	  {
	    Error_Handler();
 80052cc:	f7fb fcd7 	bl	8000c7e <Error_Handler>
	  }
}
 80052d0:	bf00      	nop
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000358 	.word	0x20000358
 80052d8:	20000368 	.word	0x20000368

080052dc <ADC_select_CH3>:

void ADC_select_CH3(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
	 sConfig.Channel = ADC_CHANNEL_9;
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <ADC_select_CH3+0x2c>)
 80052e2:	2209      	movs	r2, #9
 80052e4:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <ADC_select_CH3+0x2c>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <ADC_select_CH3+0x2c>)
 80052ee:	2205      	movs	r2, #5
 80052f0:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80052f2:	4905      	ldr	r1, [pc, #20]	; (8005308 <ADC_select_CH3+0x2c>)
 80052f4:	4805      	ldr	r0, [pc, #20]	; (800530c <ADC_select_CH3+0x30>)
 80052f6:	f7fc fa2b 	bl	8001750 <HAL_ADC_ConfigChannel>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <ADC_select_CH3+0x28>
	  {
	    Error_Handler();
 8005300:	f7fb fcbd 	bl	8000c7e <Error_Handler>
	  }
}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000358 	.word	0x20000358
 800530c:	20000368 	.word	0x20000368

08005310 <ADC_select_CH4>:

void ADC_select_CH4(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_10;
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <ADC_select_CH4+0x2c>)
 8005316:	220a      	movs	r2, #10
 8005318:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 800531a:	4b08      	ldr	r3, [pc, #32]	; (800533c <ADC_select_CH4+0x2c>)
 800531c:	2201      	movs	r2, #1
 800531e:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <ADC_select_CH4+0x2c>)
 8005322:	2205      	movs	r2, #5
 8005324:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005326:	4905      	ldr	r1, [pc, #20]	; (800533c <ADC_select_CH4+0x2c>)
 8005328:	4805      	ldr	r0, [pc, #20]	; (8005340 <ADC_select_CH4+0x30>)
 800532a:	f7fc fa11 	bl	8001750 <HAL_ADC_ConfigChannel>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <ADC_select_CH4+0x28>
	  {
	    Error_Handler();
 8005334:	f7fb fca3 	bl	8000c7e <Error_Handler>
	  }
}
 8005338:	bf00      	nop
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20000358 	.word	0x20000358
 8005340:	20000368 	.word	0x20000368

08005344 <adc_start>:
//}



void adc_start(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8005348:	4802      	ldr	r0, [pc, #8]	; (8005354 <adc_start+0x10>)
 800534a:	f7fc f863 	bl	8001414 <HAL_ADC_Start>
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000368 	.word	0x20000368

08005358 <adc_conversion>:

void adc_conversion(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 800535c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005360:	4802      	ldr	r0, [pc, #8]	; (800536c <adc_conversion+0x14>)
 8005362:	f7fc f95c 	bl	800161e <HAL_ADC_PollForConversion>
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000368 	.word	0x20000368

08005370 <adc_value>:

uint16_t adc_value(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8005374:	4803      	ldr	r0, [pc, #12]	; (8005384 <adc_value+0x14>)
 8005376:	f7fc f9dd 	bl	8001734 <HAL_ADC_GetValue>
 800537a:	4603      	mov	r3, r0
 800537c:	b29b      	uxth	r3, r3
}
 800537e:	4618      	mov	r0, r3
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000368 	.word	0x20000368

08005388 <adc_stop>:

void adc_stop(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <adc_stop+0x10>)
 800538e:	f7fc f913 	bl	80015b8 <HAL_ADC_Stop>
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000368 	.word	0x20000368

0800539c <UART4_Init>:

extern UART_HandleTypeDef huart4;


void UART4_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
	  /* USER CODE END UART4_Init 0 */

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  huart4.Instance = UART4;
 80053a0:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <UART4_Init+0x4c>)
 80053a2:	4a12      	ldr	r2, [pc, #72]	; (80053ec <UART4_Init+0x50>)
 80053a4:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 115200;
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <UART4_Init+0x4c>)
 80053a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053ac:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80053ae:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <UART4_Init+0x4c>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <UART4_Init+0x4c>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 80053ba:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <UART4_Init+0x4c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 80053c0:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <UART4_Init+0x4c>)
 80053c2:	220c      	movs	r2, #12
 80053c4:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <UART4_Init+0x4c>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <UART4_Init+0x4c>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 80053d2:	4805      	ldr	r0, [pc, #20]	; (80053e8 <UART4_Init+0x4c>)
 80053d4:	f7fe fc3e 	bl	8003c54 <HAL_UART_Init>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <UART4_Init+0x46>
	  {
	    Error_Handler();
 80053de:	f7fb fc4e 	bl	8000c7e <Error_Handler>
	  }
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */

	}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200000e0 	.word	0x200000e0
 80053ec:	40004c00 	.word	0x40004c00

080053f0 <GsmCommands>:




void GsmCommands(uint8_t* cmd)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart4, cmd, strlen((char*)cmd));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fa ff13 	bl	8000224 <strlen>
 80053fe:	4603      	mov	r3, r0
 8005400:	b29b      	uxth	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4807      	ldr	r0, [pc, #28]	; (8005424 <GsmCommands+0x34>)
 8005408:	f7fe fda5 	bl	8003f56 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart4, Reply, max_buf_len);
 800540c:	2264      	movs	r2, #100	; 0x64
 800540e:	4906      	ldr	r1, [pc, #24]	; (8005428 <GsmCommands+0x38>)
 8005410:	4804      	ldr	r0, [pc, #16]	; (8005424 <GsmCommands+0x34>)
 8005412:	f7fe fde5 	bl	8003fe0 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8005416:	2064      	movs	r0, #100	; 0x64
 8005418:	f7fb ff94 	bl	8001344 <HAL_Delay>

}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200000e0 	.word	0x200000e0
 8005428:	200003b0 	.word	0x200003b0

0800542c <Gsm_Init>:



void Gsm_Init()
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0

//	HAL_Delay(2000);


	GsmCommands((uint8_t*)"AT\r\n");
 8005430:	4809      	ldr	r0, [pc, #36]	; (8005458 <Gsm_Init+0x2c>)
 8005432:	f7ff ffdd 	bl	80053f0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8005436:	4809      	ldr	r0, [pc, #36]	; (800545c <Gsm_Init+0x30>)
 8005438:	f7ff ffda 	bl	80053f0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 800543c:	4808      	ldr	r0, [pc, #32]	; (8005460 <Gsm_Init+0x34>)
 800543e:	f7ff ffd7 	bl	80053f0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8005442:	4808      	ldr	r0, [pc, #32]	; (8005464 <Gsm_Init+0x38>)
 8005444:	f7ff ffd4 	bl	80053f0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"airtelgprs.com\"\r\n");
 8005448:	4807      	ldr	r0, [pc, #28]	; (8005468 <Gsm_Init+0x3c>)
 800544a:	f7ff ffd1 	bl	80053f0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 800544e:	4807      	ldr	r0, [pc, #28]	; (800546c <Gsm_Init+0x40>)
 8005450:	f7ff ffce 	bl	80053f0 <GsmCommands>

}
 8005454:	bf00      	nop
 8005456:	bd80      	pop	{r7, pc}
 8005458:	08007224 	.word	0x08007224
 800545c:	0800722c 	.word	0x0800722c
 8005460:	08007238 	.word	0x08007238
 8005464:	08007244 	.word	0x08007244
 8005468:	08007254 	.word	0x08007254
 800546c:	0800727c 	.word	0x0800727c

08005470 <DataToCloud>:


void DataToCloud(char* Time,char* Date,char* Ch1,char* Ch2,char* Ch3,char* Ch4,char* D1,char* D2,char* D3,char* D4)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8005476:	af0a      	add	r7, sp, #40	; 0x28
 8005478:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800547c:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 8005480:	6020      	str	r0, [r4, #0]
 8005482:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8005486:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 800548a:	6001      	str	r1, [r0, #0]
 800548c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005490:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8005494:	600a      	str	r2, [r1, #0]
 8005496:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800549a:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 800549e:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 80054a0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80054a4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f000 f8a9 	bl	8005600 <url_encode>
 80054ae:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	char* encoded_Date = url_encode(Date);
 80054b2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80054b6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	f000 f8a0 	bl	8005600 <url_encode>
 80054c0:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	char* encoded_Ch1 = url_encode(Ch1);
 80054c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80054c8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	f000 f897 	bl	8005600 <url_encode>
 80054d2:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch2 = url_encode(Ch2);
 80054d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80054da:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	f000 f88e 	bl	8005600 <url_encode>
 80054e4:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch3 = url_encode(Ch3);
 80054e8:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 80054ec:	f000 f888 	bl	8005600 <url_encode>
 80054f0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch4 = url_encode(Ch4);
 80054f4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80054f8:	f000 f882 	bl	8005600 <url_encode>
 80054fc:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_D1 = url_encode(D1);
 8005500:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8005504:	f000 f87c 	bl	8005600 <url_encode>
 8005508:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D2 = url_encode(D2);
 800550c:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8005510:	f000 f876 	bl	8005600 <url_encode>
 8005514:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D3 = url_encode(D3);
 8005518:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800551c:	f000 f870 	bl	8005600 <url_encode>
 8005520:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D4 = url_encode(D4);
 8005524:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8005528:	f000 f86a 	bl	8005600 <url_encode>
 800552c:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8005530:	482f      	ldr	r0, [pc, #188]	; (80055f0 <DataToCloud+0x180>)
 8005532:	f7ff ff5d 	bl	80053f0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 8005536:	482f      	ldr	r0, [pc, #188]	; (80055f4 <DataToCloud+0x184>)
 8005538:	f7ff ff5a 	bl	80053f0 <GsmCommands>


	snprintf((char*)AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbz6D7NQfywY6noMZRLp9HMPNZhQykwC1xSHxD2-VwgPqBtG1Ltj4A32S228G33SFji0/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s&field10=%s\"\r\n",encoded_Time, encoded_Date, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 800553c:	f107 0014 	add.w	r0, r7, #20
 8005540:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005544:	9308      	str	r3, [sp, #32]
 8005546:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800554a:	9307      	str	r3, [sp, #28]
 800554c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005550:	9306      	str	r3, [sp, #24]
 8005552:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005556:	9305      	str	r3, [sp, #20]
 8005558:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005568:	9302      	str	r3, [sp, #8]
 800556a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800557a:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <DataToCloud+0x188>)
 800557c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005580:	f000 fbbe 	bl	8005d00 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff31 	bl	80053f0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 800558e:	481b      	ldr	r0, [pc, #108]	; (80055fc <DataToCloud+0x18c>)
 8005590:	f7ff ff2e 	bl	80053f0 <GsmCommands>

	free(encoded_Time);
 8005594:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8005598:	f000 fab2 	bl	8005b00 <free>
	free(encoded_Date);
 800559c:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80055a0:	f000 faae 	bl	8005b00 <free>
	free(encoded_Ch1);
 80055a4:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80055a8:	f000 faaa 	bl	8005b00 <free>
	free(encoded_Ch2);
 80055ac:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80055b0:	f000 faa6 	bl	8005b00 <free>
	free(encoded_Ch3);
 80055b4:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80055b8:	f000 faa2 	bl	8005b00 <free>
	free(encoded_Ch4);
 80055bc:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80055c0:	f000 fa9e 	bl	8005b00 <free>
	free(encoded_D1);
 80055c4:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80055c8:	f000 fa9a 	bl	8005b00 <free>
	free(encoded_D2);
 80055cc:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80055d0:	f000 fa96 	bl	8005b00 <free>
	free(encoded_D3);
 80055d4:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80055d8:	f000 fa92 	bl	8005b00 <free>
	free(encoded_D4);
 80055dc:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80055e0:	f000 fa8e 	bl	8005b00 <free>

}
 80055e4:	bf00      	nop
 80055e6:	f507 770d 	add.w	r7, r7, #564	; 0x234
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd90      	pop	{r4, r7, pc}
 80055ee:	bf00      	nop
 80055f0:	0800728c 	.word	0x0800728c
 80055f4:	0800729c 	.word	0x0800729c
 80055f8:	080072ac 	.word	0x080072ac
 80055fc:	08007398 	.word	0x08007398

08005600 <url_encode>:



char* url_encode(const char* str)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 8005608:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <url_encode+0xc8>)
 800560a:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fa fe09 	bl	8000224 <strlen>
 8005612:	4602      	mov	r2, r0
 8005614:	4613      	mov	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4413      	add	r3, r2
 800561a:	3301      	adds	r3, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fa67 	bl	8005af0 <malloc>
 8005622:	4603      	mov	r3, r0
 8005624:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	617b      	str	r3, [r7, #20]

	while (*str) {
 800562a:	e040      	b.n	80056ae <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	4a26      	ldr	r2, [pc, #152]	; (80056cc <url_encode+0xcc>)
 8005634:	4413      	add	r3, r2
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <url_encode+0x60>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b2d      	cmp	r3, #45	; 0x2d
 8005646:	d00b      	beq.n	8005660 <url_encode+0x60>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b5f      	cmp	r3, #95	; 0x5f
 800564e:	d007      	beq.n	8005660 <url_encode+0x60>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b2e      	cmp	r3, #46	; 0x2e
 8005656:	d003      	beq.n	8005660 <url_encode+0x60>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b7e      	cmp	r3, #126	; 0x7e
 800565e:	d106      	bne.n	800566e <url_encode+0x6e>
			*ptr++ = *str;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	617a      	str	r2, [r7, #20]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e01c      	b.n	80056a8 <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	617a      	str	r2, [r7, #20]
 8005674:	2225      	movs	r2, #37	; 0x25
 8005676:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	441a      	add	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	6179      	str	r1, [r7, #20]
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	441a      	add	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	1c59      	adds	r1, r3, #1
 80056a2:	6179      	str	r1, [r7, #20]
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	701a      	strb	r2, [r3, #0]
		}
		str++;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3301      	adds	r3, #1
 80056ac:	607b      	str	r3, [r7, #4]
	while (*str) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ba      	bne.n	800562c <url_encode+0x2c>
	}
	*ptr = '\0';
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
	return encoded;
 80056bc:	68fb      	ldr	r3, [r7, #12]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	080073ac 	.word	0x080073ac
 80056cc:	080073d8 	.word	0x080073d8

080056d0 <USER_I2C1_Init>:




void USER_I2C1_Init()
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <USER_I2C1_Init+0x50>)
 80056d6:	4a13      	ldr	r2, [pc, #76]	; (8005724 <USER_I2C1_Init+0x54>)
 80056d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80056da:	4b11      	ldr	r3, [pc, #68]	; (8005720 <USER_I2C1_Init+0x50>)
 80056dc:	4a12      	ldr	r2, [pc, #72]	; (8005728 <USER_I2C1_Init+0x58>)
 80056de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <USER_I2C1_Init+0x50>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <USER_I2C1_Init+0x50>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <USER_I2C1_Init+0x50>)
 80056ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <USER_I2C1_Init+0x50>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <USER_I2C1_Init+0x50>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <USER_I2C1_Init+0x50>)
 8005702:	2200      	movs	r2, #0
 8005704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <USER_I2C1_Init+0x50>)
 8005708:	2200      	movs	r2, #0
 800570a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800570c:	4804      	ldr	r0, [pc, #16]	; (8005720 <USER_I2C1_Init+0x50>)
 800570e:	f7fc fcf9 	bl	8002104 <HAL_I2C_Init>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <USER_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005718:	f7fb fab1 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800571c:	bf00      	nop
 800571e:	bd80      	pop	{r7, pc}
 8005720:	2000008c 	.word	0x2000008c
 8005724:	40005400 	.word	0x40005400
 8005728:	000186a0 	.word	0x000186a0

0800572c <SystemClock_Config>:
 extern UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t GPIO[4];

void SystemClock_Config(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b094      	sub	sp, #80	; 0x50
 8005730:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005732:	f107 031c 	add.w	r3, r7, #28
 8005736:	2234      	movs	r2, #52	; 0x34
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f9e8 	bl	8005b10 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005740:	f107 0308 	add.w	r3, r7, #8
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	60da      	str	r2, [r3, #12]
 800574e:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8005750:	2300      	movs	r3, #0
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	4b2a      	ldr	r3, [pc, #168]	; (8005800 <SystemClock_Config+0xd4>)
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	4a29      	ldr	r2, [pc, #164]	; (8005800 <SystemClock_Config+0xd4>)
 800575a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575e:	6413      	str	r3, [r2, #64]	; 0x40
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <SystemClock_Config+0xd4>)
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800576c:	2300      	movs	r3, #0
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4b24      	ldr	r3, [pc, #144]	; (8005804 <SystemClock_Config+0xd8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005778:	4a22      	ldr	r2, [pc, #136]	; (8005804 <SystemClock_Config+0xd8>)
 800577a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b20      	ldr	r3, [pc, #128]	; (8005804 <SystemClock_Config+0xd8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800578c:	2302      	movs	r3, #2
 800578e:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005790:	2301      	movs	r3, #1
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005794:	2310      	movs	r3, #16
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005798:	2302      	movs	r3, #2
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800579c:	2300      	movs	r3, #0
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 80057a0:	2310      	movs	r3, #16
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 80057a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80057a8:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80057aa:	2304      	movs	r3, #4
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 80057ae:	2302      	movs	r3, #2
 80057b0:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 80057b2:	2302      	movs	r3, #2
 80057b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b6:	f107 031c 	add.w	r3, r7, #28
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fd ffac 	bl	8003718 <HAL_RCC_OscConfig>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 80057c6:	f7fb fa5a 	bl	8000c7e <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057ca:	230f      	movs	r3, #15
 80057cc:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057ce:	2302      	movs	r3, #2
 80057d0:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80057d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057da:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057dc:	2300      	movs	r3, #0
 80057de:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	2102      	movs	r1, #2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fc4c 	bl	8003084 <HAL_RCC_ClockConfig>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 80057f2:	f7fb fa44 	bl	8000c7e <Error_Handler>
	  }
	}
 80057f6:	bf00      	nop
 80057f8:	3750      	adds	r7, #80	; 0x50
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800
 8005804:	40007000 	.word	0x40007000

08005808 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
	   /* USER CODE END USART1_Init 0 */

	   /* USER CODE BEGIN USART1_Init 1 */

	   /* USER CODE END USART1_Init 1 */
	   huart1.Instance = USART1;
 800580c:	4b11      	ldr	r3, [pc, #68]	; (8005854 <user_USART1_UART_Init+0x4c>)
 800580e:	4a12      	ldr	r2, [pc, #72]	; (8005858 <user_USART1_UART_Init+0x50>)
 8005810:	601a      	str	r2, [r3, #0]
	   huart1.Init.BaudRate = 115200;
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <user_USART1_UART_Init+0x4c>)
 8005814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005818:	605a      	str	r2, [r3, #4]
	   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800581a:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <user_USART1_UART_Init+0x4c>)
 800581c:	2200      	movs	r2, #0
 800581e:	609a      	str	r2, [r3, #8]
	   huart1.Init.StopBits = UART_STOPBITS_1;
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <user_USART1_UART_Init+0x4c>)
 8005822:	2200      	movs	r2, #0
 8005824:	60da      	str	r2, [r3, #12]
	   huart1.Init.Parity = UART_PARITY_NONE;
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <user_USART1_UART_Init+0x4c>)
 8005828:	2200      	movs	r2, #0
 800582a:	611a      	str	r2, [r3, #16]
	   huart1.Init.Mode = UART_MODE_TX_RX;
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <user_USART1_UART_Init+0x4c>)
 800582e:	220c      	movs	r2, #12
 8005830:	615a      	str	r2, [r3, #20]
	   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <user_USART1_UART_Init+0x4c>)
 8005834:	2200      	movs	r2, #0
 8005836:	619a      	str	r2, [r3, #24]
	   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <user_USART1_UART_Init+0x4c>)
 800583a:	2200      	movs	r2, #0
 800583c:	61da      	str	r2, [r3, #28]
	   if (HAL_UART_Init(&huart1) != HAL_OK)
 800583e:	4805      	ldr	r0, [pc, #20]	; (8005854 <user_USART1_UART_Init+0x4c>)
 8005840:	f7fe fa08 	bl	8003c54 <HAL_UART_Init>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <user_USART1_UART_Init+0x46>
	   {
	     Error_Handler();
 800584a:	f7fb fa18 	bl	8000c7e <Error_Handler>
	   }
	   /* USER CODE BEGIN USART1_Init 2 */

	   /* USER CODE END USART1_Init 2 */

	 }
 800584e:	bf00      	nop
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000224 	.word	0x20000224
 8005858:	40011000 	.word	0x40011000

0800585c <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	807b      	strh	r3, [r7, #2]
 8005868:	4613      	mov	r3, r2
 800586a:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	4b28      	ldr	r3, [pc, #160]	; (8005914 <user_GPIO_Init+0xb8>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	4a27      	ldr	r2, [pc, #156]	; (8005914 <user_GPIO_Init+0xb8>)
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	6313      	str	r3, [r2, #48]	; 0x30
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <user_GPIO_Init+0xb8>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	4b21      	ldr	r3, [pc, #132]	; (8005914 <user_GPIO_Init+0xb8>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	4a20      	ldr	r2, [pc, #128]	; (8005914 <user_GPIO_Init+0xb8>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6313      	str	r3, [r2, #48]	; 0x30
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <user_GPIO_Init+0xb8>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <user_GPIO_Init+0xb8>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	4a19      	ldr	r2, [pc, #100]	; (8005914 <user_GPIO_Init+0xb8>)
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	6313      	str	r3, [r2, #48]	; 0x30
 80058b4:	4b17      	ldr	r3, [pc, #92]	; (8005914 <user_GPIO_Init+0xb8>)
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 80058c0:	787a      	ldrb	r2, [r7, #1]
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fc fc02 	bl	80020d0 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 80058cc:	787b      	ldrb	r3, [r7, #1]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <user_GPIO_Init+0x84>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 80058d2:	787a      	ldrb	r2, [r7, #1]
 80058d4:	887b      	ldrh	r3, [r7, #2]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f81f 	bl	800591c <gpio_output>
 80058de:	e008      	b.n	80058f2 <user_GPIO_Init+0x96>
     }
     else if(PIN_mode == INPUT)
 80058e0:	787b      	ldrb	r3, [r7, #1]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <user_GPIO_Init+0x96>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 80058e6:	787a      	ldrb	r2, [r7, #1]
 80058e8:	887b      	ldrh	r3, [r7, #2]
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f837 	bl	8005960 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <user_GPIO_Init+0xbc>)
 80058f4:	2202      	movs	r2, #2
 80058f6:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <user_GPIO_Init+0xbc>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <user_GPIO_Init+0xbc>)
 8005900:	2203      	movs	r2, #3
 8005902:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <user_GPIO_Init+0xbc>)
 8005906:	2207      	movs	r2, #7
 8005908:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 800590a:	bf00      	nop
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40023800 	.word	0x40023800
 8005918:	20000414 	.word	0x20000414

0800591c <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	807b      	strh	r3, [r7, #2]
 8005928:	4613      	mov	r3, r2
 800592a:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592c:	f107 030c 	add.w	r3, r7, #12
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 800593c:	887b      	ldrh	r3, [r7, #2]
 800593e:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005940:	2301      	movs	r3, #1
 8005942:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	2300      	movs	r3, #0
 8005946:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005948:	2300      	movs	r3, #0
 800594a:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800594c:	f107 030c 	add.w	r3, r7, #12
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc fa10 	bl	8001d78 <HAL_GPIO_Init>
 }
 8005958:	bf00      	nop
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	807b      	strh	r3, [r7, #2]
 800596c:	4613      	mov	r3, r2
 800596e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800598c:	f107 030c 	add.w	r3, r7, #12
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fc f9f0 	bl	8001d78 <HAL_GPIO_Init>
 }
 8005998:	bf00      	nop
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <data_receive>:




void data_receive()
 {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,15,1000) == HAL_ERROR)
 80059a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059a8:	220f      	movs	r2, #15
 80059aa:	4905      	ldr	r1, [pc, #20]	; (80059c0 <data_receive+0x20>)
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <data_receive+0x24>)
 80059ae:	f7fe fa30 	bl	8003e12 <HAL_UART_Receive>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <data_receive+0x1c>
	 {
			 Error_Handler();
 80059b8:	f7fb f961 	bl	8000c7e <Error_Handler>
	 }
 }
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000214 	.word	0x20000214
 80059c4:	20000224 	.word	0x20000224

080059c8 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80059d4:	887b      	ldrh	r3, [r7, #2]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fc fb61 	bl	80020a0 <HAL_GPIO_ReadPin>
 80059de:	4603      	mov	r3, r0

 }
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
 80059f4:	4613      	mov	r3, r2
 80059f6:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 80059f8:	787a      	ldrb	r2, [r7, #1]
 80059fa:	887b      	ldrh	r3, [r7, #2]
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fb66 	bl	80020d0 <HAL_GPIO_WritePin>
    return PinState;
 8005a04:	787b      	ldrb	r3, [r7, #1]
 }
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <uart3_tx>:


extern UART_HandleTypeDef huart3;

void uart3_tx(uint8_t* buf)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fa fc03 	bl	8000224 <strlen>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4804      	ldr	r0, [pc, #16]	; (8005a3c <uart3_tx+0x2c>)
 8005a2a:	f7fe f960 	bl	8003cee <HAL_UART_Transmit>
	 HAL_Delay(100);
 8005a2e:	2064      	movs	r0, #100	; 0x64
 8005a30:	f7fb fc88 	bl	8001344 <HAL_Delay>
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000124 	.word	0x20000124

08005a40 <USER_USART3_UART_Init>:


void USER_USART3_UART_Init()
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a46:	4a12      	ldr	r2, [pc, #72]	; (8005a90 <USER_USART3_UART_Init+0x50>)
 8005a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a52:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a66:	220c      	movs	r2, #12
 8005a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a6a:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a76:	4805      	ldr	r0, [pc, #20]	; (8005a8c <USER_USART3_UART_Init+0x4c>)
 8005a78:	f7fe f8ec 	bl	8003c54 <HAL_UART_Init>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <USER_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005a82:	f7fb f8fc 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000124 	.word	0x20000124
 8005a90:	40004800 	.word	0x40004800

08005a94 <atoi>:
 8005a94:	220a      	movs	r2, #10
 8005a96:	2100      	movs	r1, #0
 8005a98:	f000 ba78 	b.w	8005f8c <strtol>

08005a9c <__errno>:
 8005a9c:	4b01      	ldr	r3, [pc, #4]	; (8005aa4 <__errno+0x8>)
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4d0d      	ldr	r5, [pc, #52]	; (8005ae0 <__libc_init_array+0x38>)
 8005aac:	4c0d      	ldr	r4, [pc, #52]	; (8005ae4 <__libc_init_array+0x3c>)
 8005aae:	1b64      	subs	r4, r4, r5
 8005ab0:	10a4      	asrs	r4, r4, #2
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	42a6      	cmp	r6, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	4d0b      	ldr	r5, [pc, #44]	; (8005ae8 <__libc_init_array+0x40>)
 8005aba:	4c0c      	ldr	r4, [pc, #48]	; (8005aec <__libc_init_array+0x44>)
 8005abc:	f001 fb2e 	bl	800711c <_init>
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	42a6      	cmp	r6, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad0:	4798      	blx	r3
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ada:	4798      	blx	r3
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	0800762c 	.word	0x0800762c
 8005ae4:	0800762c 	.word	0x0800762c
 8005ae8:	0800762c 	.word	0x0800762c
 8005aec:	08007630 	.word	0x08007630

08005af0 <malloc>:
 8005af0:	4b02      	ldr	r3, [pc, #8]	; (8005afc <malloc+0xc>)
 8005af2:	4601      	mov	r1, r0
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	f000 b87f 	b.w	8005bf8 <_malloc_r>
 8005afa:	bf00      	nop
 8005afc:	2000000c 	.word	0x2000000c

08005b00 <free>:
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <free+0xc>)
 8005b02:	4601      	mov	r1, r0
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	f000 b80b 	b.w	8005b20 <_free_r>
 8005b0a:	bf00      	nop
 8005b0c:	2000000c 	.word	0x2000000c

08005b10 <memset>:
 8005b10:	4402      	add	r2, r0
 8005b12:	4603      	mov	r3, r0
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d100      	bne.n	8005b1a <memset+0xa>
 8005b18:	4770      	bx	lr
 8005b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1e:	e7f9      	b.n	8005b14 <memset+0x4>

08005b20 <_free_r>:
 8005b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b22:	2900      	cmp	r1, #0
 8005b24:	d044      	beq.n	8005bb0 <_free_r+0x90>
 8005b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b2a:	9001      	str	r0, [sp, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b32:	bfb8      	it	lt
 8005b34:	18e4      	addlt	r4, r4, r3
 8005b36:	f000 fa63 	bl	8006000 <__malloc_lock>
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <_free_r+0x94>)
 8005b3c:	9801      	ldr	r0, [sp, #4]
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	b933      	cbnz	r3, 8005b50 <_free_r+0x30>
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	b003      	add	sp, #12
 8005b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b4c:	f000 ba5e 	b.w	800600c <__malloc_unlock>
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d908      	bls.n	8005b66 <_free_r+0x46>
 8005b54:	6825      	ldr	r5, [r4, #0]
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	bf01      	itttt	eq
 8005b5c:	6819      	ldreq	r1, [r3, #0]
 8005b5e:	685b      	ldreq	r3, [r3, #4]
 8005b60:	1949      	addeq	r1, r1, r5
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	e7ed      	b.n	8005b42 <_free_r+0x22>
 8005b66:	461a      	mov	r2, r3
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b10b      	cbz	r3, 8005b70 <_free_r+0x50>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d9fa      	bls.n	8005b66 <_free_r+0x46>
 8005b70:	6811      	ldr	r1, [r2, #0]
 8005b72:	1855      	adds	r5, r2, r1
 8005b74:	42a5      	cmp	r5, r4
 8005b76:	d10b      	bne.n	8005b90 <_free_r+0x70>
 8005b78:	6824      	ldr	r4, [r4, #0]
 8005b7a:	4421      	add	r1, r4
 8005b7c:	1854      	adds	r4, r2, r1
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	d1e0      	bne.n	8005b46 <_free_r+0x26>
 8005b84:	681c      	ldr	r4, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	6053      	str	r3, [r2, #4]
 8005b8a:	4421      	add	r1, r4
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	e7da      	b.n	8005b46 <_free_r+0x26>
 8005b90:	d902      	bls.n	8005b98 <_free_r+0x78>
 8005b92:	230c      	movs	r3, #12
 8005b94:	6003      	str	r3, [r0, #0]
 8005b96:	e7d6      	b.n	8005b46 <_free_r+0x26>
 8005b98:	6825      	ldr	r5, [r4, #0]
 8005b9a:	1961      	adds	r1, r4, r5
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf04      	itt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	6063      	str	r3, [r4, #4]
 8005ba6:	bf04      	itt	eq
 8005ba8:	1949      	addeq	r1, r1, r5
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	6054      	str	r4, [r2, #4]
 8005bae:	e7ca      	b.n	8005b46 <_free_r+0x26>
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	20000428 	.word	0x20000428

08005bb8 <sbrk_aligned>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4e0e      	ldr	r6, [pc, #56]	; (8005bf4 <sbrk_aligned+0x3c>)
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	6831      	ldr	r1, [r6, #0]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	b911      	cbnz	r1, 8005bca <sbrk_aligned+0x12>
 8005bc4:	f000 f88c 	bl	8005ce0 <_sbrk_r>
 8005bc8:	6030      	str	r0, [r6, #0]
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f887 	bl	8005ce0 <_sbrk_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d00a      	beq.n	8005bec <sbrk_aligned+0x34>
 8005bd6:	1cc4      	adds	r4, r0, #3
 8005bd8:	f024 0403 	bic.w	r4, r4, #3
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d007      	beq.n	8005bf0 <sbrk_aligned+0x38>
 8005be0:	1a21      	subs	r1, r4, r0
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f87c 	bl	8005ce0 <_sbrk_r>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d101      	bne.n	8005bf0 <sbrk_aligned+0x38>
 8005bec:	f04f 34ff 	mov.w	r4, #4294967295
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	2000042c 	.word	0x2000042c

08005bf8 <_malloc_r>:
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	1ccd      	adds	r5, r1, #3
 8005bfe:	f025 0503 	bic.w	r5, r5, #3
 8005c02:	3508      	adds	r5, #8
 8005c04:	2d0c      	cmp	r5, #12
 8005c06:	bf38      	it	cc
 8005c08:	250c      	movcc	r5, #12
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	4607      	mov	r7, r0
 8005c0e:	db01      	blt.n	8005c14 <_malloc_r+0x1c>
 8005c10:	42a9      	cmp	r1, r5
 8005c12:	d905      	bls.n	8005c20 <_malloc_r+0x28>
 8005c14:	230c      	movs	r3, #12
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	2600      	movs	r6, #0
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c20:	4e2e      	ldr	r6, [pc, #184]	; (8005cdc <_malloc_r+0xe4>)
 8005c22:	f000 f9ed 	bl	8006000 <__malloc_lock>
 8005c26:	6833      	ldr	r3, [r6, #0]
 8005c28:	461c      	mov	r4, r3
 8005c2a:	bb34      	cbnz	r4, 8005c7a <_malloc_r+0x82>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff ffc2 	bl	8005bb8 <sbrk_aligned>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	4604      	mov	r4, r0
 8005c38:	d14d      	bne.n	8005cd6 <_malloc_r+0xde>
 8005c3a:	6834      	ldr	r4, [r6, #0]
 8005c3c:	4626      	mov	r6, r4
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d140      	bne.n	8005cc4 <_malloc_r+0xcc>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	4631      	mov	r1, r6
 8005c46:	4638      	mov	r0, r7
 8005c48:	eb04 0803 	add.w	r8, r4, r3
 8005c4c:	f000 f848 	bl	8005ce0 <_sbrk_r>
 8005c50:	4580      	cmp	r8, r0
 8005c52:	d13a      	bne.n	8005cca <_malloc_r+0xd2>
 8005c54:	6821      	ldr	r1, [r4, #0]
 8005c56:	3503      	adds	r5, #3
 8005c58:	1a6d      	subs	r5, r5, r1
 8005c5a:	f025 0503 	bic.w	r5, r5, #3
 8005c5e:	3508      	adds	r5, #8
 8005c60:	2d0c      	cmp	r5, #12
 8005c62:	bf38      	it	cc
 8005c64:	250c      	movcc	r5, #12
 8005c66:	4629      	mov	r1, r5
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f7ff ffa5 	bl	8005bb8 <sbrk_aligned>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d02b      	beq.n	8005cca <_malloc_r+0xd2>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	442b      	add	r3, r5
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	e00e      	b.n	8005c98 <_malloc_r+0xa0>
 8005c7a:	6822      	ldr	r2, [r4, #0]
 8005c7c:	1b52      	subs	r2, r2, r5
 8005c7e:	d41e      	bmi.n	8005cbe <_malloc_r+0xc6>
 8005c80:	2a0b      	cmp	r2, #11
 8005c82:	d916      	bls.n	8005cb2 <_malloc_r+0xba>
 8005c84:	1961      	adds	r1, r4, r5
 8005c86:	42a3      	cmp	r3, r4
 8005c88:	6025      	str	r5, [r4, #0]
 8005c8a:	bf18      	it	ne
 8005c8c:	6059      	strne	r1, [r3, #4]
 8005c8e:	6863      	ldr	r3, [r4, #4]
 8005c90:	bf08      	it	eq
 8005c92:	6031      	streq	r1, [r6, #0]
 8005c94:	5162      	str	r2, [r4, r5]
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f104 060b 	add.w	r6, r4, #11
 8005c9e:	f000 f9b5 	bl	800600c <__malloc_unlock>
 8005ca2:	f026 0607 	bic.w	r6, r6, #7
 8005ca6:	1d23      	adds	r3, r4, #4
 8005ca8:	1af2      	subs	r2, r6, r3
 8005caa:	d0b6      	beq.n	8005c1a <_malloc_r+0x22>
 8005cac:	1b9b      	subs	r3, r3, r6
 8005cae:	50a3      	str	r3, [r4, r2]
 8005cb0:	e7b3      	b.n	8005c1a <_malloc_r+0x22>
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	bf0c      	ite	eq
 8005cb8:	6032      	streq	r2, [r6, #0]
 8005cba:	605a      	strne	r2, [r3, #4]
 8005cbc:	e7ec      	b.n	8005c98 <_malloc_r+0xa0>
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	6864      	ldr	r4, [r4, #4]
 8005cc2:	e7b2      	b.n	8005c2a <_malloc_r+0x32>
 8005cc4:	4634      	mov	r4, r6
 8005cc6:	6876      	ldr	r6, [r6, #4]
 8005cc8:	e7b9      	b.n	8005c3e <_malloc_r+0x46>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	603b      	str	r3, [r7, #0]
 8005cce:	4638      	mov	r0, r7
 8005cd0:	f000 f99c 	bl	800600c <__malloc_unlock>
 8005cd4:	e7a1      	b.n	8005c1a <_malloc_r+0x22>
 8005cd6:	6025      	str	r5, [r4, #0]
 8005cd8:	e7de      	b.n	8005c98 <_malloc_r+0xa0>
 8005cda:	bf00      	nop
 8005cdc:	20000428 	.word	0x20000428

08005ce0 <_sbrk_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d06      	ldr	r5, [pc, #24]	; (8005cfc <_sbrk_r+0x1c>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	f7fb fa46 	bl	800117c <_sbrk>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_sbrk_r+0x1a>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_sbrk_r+0x1a>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000430 	.word	0x20000430

08005d00 <sniprintf>:
 8005d00:	b40c      	push	{r2, r3}
 8005d02:	b530      	push	{r4, r5, lr}
 8005d04:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <sniprintf+0x64>)
 8005d06:	1e0c      	subs	r4, r1, #0
 8005d08:	681d      	ldr	r5, [r3, #0]
 8005d0a:	b09d      	sub	sp, #116	; 0x74
 8005d0c:	da08      	bge.n	8005d20 <sniprintf+0x20>
 8005d0e:	238b      	movs	r3, #139	; 0x8b
 8005d10:	602b      	str	r3, [r5, #0]
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295
 8005d16:	b01d      	add	sp, #116	; 0x74
 8005d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d1c:	b002      	add	sp, #8
 8005d1e:	4770      	bx	lr
 8005d20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d28:	bf14      	ite	ne
 8005d2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d2e:	4623      	moveq	r3, r4
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	9006      	str	r0, [sp, #24]
 8005d3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d42:	ab21      	add	r3, sp, #132	; 0x84
 8005d44:	a902      	add	r1, sp, #8
 8005d46:	4628      	mov	r0, r5
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	f000 f9c1 	bl	80060d0 <_svfiprintf_r>
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	bfbc      	itt	lt
 8005d52:	238b      	movlt	r3, #139	; 0x8b
 8005d54:	602b      	strlt	r3, [r5, #0]
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	d0dd      	beq.n	8005d16 <sniprintf+0x16>
 8005d5a:	9b02      	ldr	r3, [sp, #8]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e7d9      	b.n	8005d16 <sniprintf+0x16>
 8005d62:	bf00      	nop
 8005d64:	2000000c 	.word	0x2000000c

08005d68 <siprintf>:
 8005d68:	b40e      	push	{r1, r2, r3}
 8005d6a:	b500      	push	{lr}
 8005d6c:	b09c      	sub	sp, #112	; 0x70
 8005d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d70:	9002      	str	r0, [sp, #8]
 8005d72:	9006      	str	r0, [sp, #24]
 8005d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d78:	4809      	ldr	r0, [pc, #36]	; (8005da0 <siprintf+0x38>)
 8005d7a:	9107      	str	r1, [sp, #28]
 8005d7c:	9104      	str	r1, [sp, #16]
 8005d7e:	4909      	ldr	r1, [pc, #36]	; (8005da4 <siprintf+0x3c>)
 8005d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d84:	9105      	str	r1, [sp, #20]
 8005d86:	6800      	ldr	r0, [r0, #0]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	a902      	add	r1, sp, #8
 8005d8c:	f000 f9a0 	bl	80060d0 <_svfiprintf_r>
 8005d90:	9b02      	ldr	r3, [sp, #8]
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	b01c      	add	sp, #112	; 0x70
 8005d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d9c:	b003      	add	sp, #12
 8005d9e:	4770      	bx	lr
 8005da0:	2000000c 	.word	0x2000000c
 8005da4:	ffff0208 	.word	0xffff0208

08005da8 <strncpy>:
 8005da8:	b510      	push	{r4, lr}
 8005daa:	3901      	subs	r1, #1
 8005dac:	4603      	mov	r3, r0
 8005dae:	b132      	cbz	r2, 8005dbe <strncpy+0x16>
 8005db0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005db4:	f803 4b01 	strb.w	r4, [r3], #1
 8005db8:	3a01      	subs	r2, #1
 8005dba:	2c00      	cmp	r4, #0
 8005dbc:	d1f7      	bne.n	8005dae <strncpy+0x6>
 8005dbe:	441a      	add	r2, r3
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d100      	bne.n	8005dc8 <strncpy+0x20>
 8005dc6:	bd10      	pop	{r4, pc}
 8005dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dcc:	e7f9      	b.n	8005dc2 <strncpy+0x1a>
	...

08005dd0 <strtok>:
 8005dd0:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <strtok+0x5c>)
 8005dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dd4:	681e      	ldr	r6, [r3, #0]
 8005dd6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005dd8:	4605      	mov	r5, r0
 8005dda:	b9fc      	cbnz	r4, 8005e1c <strtok+0x4c>
 8005ddc:	2050      	movs	r0, #80	; 0x50
 8005dde:	9101      	str	r1, [sp, #4]
 8005de0:	f7ff fe86 	bl	8005af0 <malloc>
 8005de4:	9901      	ldr	r1, [sp, #4]
 8005de6:	65b0      	str	r0, [r6, #88]	; 0x58
 8005de8:	4602      	mov	r2, r0
 8005dea:	b920      	cbnz	r0, 8005df6 <strtok+0x26>
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <strtok+0x60>)
 8005dee:	4811      	ldr	r0, [pc, #68]	; (8005e34 <strtok+0x64>)
 8005df0:	2157      	movs	r1, #87	; 0x57
 8005df2:	f000 f8d5 	bl	8005fa0 <__assert_func>
 8005df6:	e9c0 4400 	strd	r4, r4, [r0]
 8005dfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005dfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005e02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005e06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005e0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005e0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005e12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005e16:	6184      	str	r4, [r0, #24]
 8005e18:	7704      	strb	r4, [r0, #28]
 8005e1a:	6244      	str	r4, [r0, #36]	; 0x24
 8005e1c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4628      	mov	r0, r5
 8005e22:	b002      	add	sp, #8
 8005e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e28:	f000 b806 	b.w	8005e38 <__strtok_r>
 8005e2c:	2000000c 	.word	0x2000000c
 8005e30:	080074e0 	.word	0x080074e0
 8005e34:	080074f7 	.word	0x080074f7

08005e38 <__strtok_r>:
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3a:	b908      	cbnz	r0, 8005e40 <__strtok_r+0x8>
 8005e3c:	6810      	ldr	r0, [r2, #0]
 8005e3e:	b188      	cbz	r0, 8005e64 <__strtok_r+0x2c>
 8005e40:	4604      	mov	r4, r0
 8005e42:	4620      	mov	r0, r4
 8005e44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005e48:	460f      	mov	r7, r1
 8005e4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e4e:	b91e      	cbnz	r6, 8005e58 <__strtok_r+0x20>
 8005e50:	b965      	cbnz	r5, 8005e6c <__strtok_r+0x34>
 8005e52:	6015      	str	r5, [r2, #0]
 8005e54:	4628      	mov	r0, r5
 8005e56:	e005      	b.n	8005e64 <__strtok_r+0x2c>
 8005e58:	42b5      	cmp	r5, r6
 8005e5a:	d1f6      	bne.n	8005e4a <__strtok_r+0x12>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <__strtok_r+0xa>
 8005e60:	6014      	str	r4, [r2, #0]
 8005e62:	7003      	strb	r3, [r0, #0]
 8005e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e66:	461c      	mov	r4, r3
 8005e68:	e00c      	b.n	8005e84 <__strtok_r+0x4c>
 8005e6a:	b915      	cbnz	r5, 8005e72 <__strtok_r+0x3a>
 8005e6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e70:	460e      	mov	r6, r1
 8005e72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005e76:	42ab      	cmp	r3, r5
 8005e78:	d1f7      	bne.n	8005e6a <__strtok_r+0x32>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f3      	beq.n	8005e66 <__strtok_r+0x2e>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005e84:	6014      	str	r4, [r2, #0]
 8005e86:	e7ed      	b.n	8005e64 <__strtok_r+0x2c>

08005e88 <_strtol_l.constprop.0>:
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8e:	d001      	beq.n	8005e94 <_strtol_l.constprop.0+0xc>
 8005e90:	2b24      	cmp	r3, #36	; 0x24
 8005e92:	d906      	bls.n	8005ea2 <_strtol_l.constprop.0+0x1a>
 8005e94:	f7ff fe02 	bl	8005a9c <__errno>
 8005e98:	2316      	movs	r3, #22
 8005e9a:	6003      	str	r3, [r0, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005f88 <_strtol_l.constprop.0+0x100>
 8005ea6:	460d      	mov	r5, r1
 8005ea8:	462e      	mov	r6, r5
 8005eaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005eb2:	f017 0708 	ands.w	r7, r7, #8
 8005eb6:	d1f7      	bne.n	8005ea8 <_strtol_l.constprop.0+0x20>
 8005eb8:	2c2d      	cmp	r4, #45	; 0x2d
 8005eba:	d132      	bne.n	8005f22 <_strtol_l.constprop.0+0x9a>
 8005ebc:	782c      	ldrb	r4, [r5, #0]
 8005ebe:	2701      	movs	r7, #1
 8005ec0:	1cb5      	adds	r5, r6, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d05b      	beq.n	8005f7e <_strtol_l.constprop.0+0xf6>
 8005ec6:	2b10      	cmp	r3, #16
 8005ec8:	d109      	bne.n	8005ede <_strtol_l.constprop.0+0x56>
 8005eca:	2c30      	cmp	r4, #48	; 0x30
 8005ecc:	d107      	bne.n	8005ede <_strtol_l.constprop.0+0x56>
 8005ece:	782c      	ldrb	r4, [r5, #0]
 8005ed0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005ed4:	2c58      	cmp	r4, #88	; 0x58
 8005ed6:	d14d      	bne.n	8005f74 <_strtol_l.constprop.0+0xec>
 8005ed8:	786c      	ldrb	r4, [r5, #1]
 8005eda:	2310      	movs	r3, #16
 8005edc:	3502      	adds	r5, #2
 8005ede:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005ee2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ee6:	f04f 0c00 	mov.w	ip, #0
 8005eea:	fbb8 f9f3 	udiv	r9, r8, r3
 8005eee:	4666      	mov	r6, ip
 8005ef0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ef4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005ef8:	f1be 0f09 	cmp.w	lr, #9
 8005efc:	d816      	bhi.n	8005f2c <_strtol_l.constprop.0+0xa4>
 8005efe:	4674      	mov	r4, lr
 8005f00:	42a3      	cmp	r3, r4
 8005f02:	dd24      	ble.n	8005f4e <_strtol_l.constprop.0+0xc6>
 8005f04:	f1bc 0f00 	cmp.w	ip, #0
 8005f08:	db1e      	blt.n	8005f48 <_strtol_l.constprop.0+0xc0>
 8005f0a:	45b1      	cmp	r9, r6
 8005f0c:	d31c      	bcc.n	8005f48 <_strtol_l.constprop.0+0xc0>
 8005f0e:	d101      	bne.n	8005f14 <_strtol_l.constprop.0+0x8c>
 8005f10:	45a2      	cmp	sl, r4
 8005f12:	db19      	blt.n	8005f48 <_strtol_l.constprop.0+0xc0>
 8005f14:	fb06 4603 	mla	r6, r6, r3, r4
 8005f18:	f04f 0c01 	mov.w	ip, #1
 8005f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f20:	e7e8      	b.n	8005ef4 <_strtol_l.constprop.0+0x6c>
 8005f22:	2c2b      	cmp	r4, #43	; 0x2b
 8005f24:	bf04      	itt	eq
 8005f26:	782c      	ldrbeq	r4, [r5, #0]
 8005f28:	1cb5      	addeq	r5, r6, #2
 8005f2a:	e7ca      	b.n	8005ec2 <_strtol_l.constprop.0+0x3a>
 8005f2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005f30:	f1be 0f19 	cmp.w	lr, #25
 8005f34:	d801      	bhi.n	8005f3a <_strtol_l.constprop.0+0xb2>
 8005f36:	3c37      	subs	r4, #55	; 0x37
 8005f38:	e7e2      	b.n	8005f00 <_strtol_l.constprop.0+0x78>
 8005f3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005f3e:	f1be 0f19 	cmp.w	lr, #25
 8005f42:	d804      	bhi.n	8005f4e <_strtol_l.constprop.0+0xc6>
 8005f44:	3c57      	subs	r4, #87	; 0x57
 8005f46:	e7db      	b.n	8005f00 <_strtol_l.constprop.0+0x78>
 8005f48:	f04f 3cff 	mov.w	ip, #4294967295
 8005f4c:	e7e6      	b.n	8005f1c <_strtol_l.constprop.0+0x94>
 8005f4e:	f1bc 0f00 	cmp.w	ip, #0
 8005f52:	da05      	bge.n	8005f60 <_strtol_l.constprop.0+0xd8>
 8005f54:	2322      	movs	r3, #34	; 0x22
 8005f56:	6003      	str	r3, [r0, #0]
 8005f58:	4646      	mov	r6, r8
 8005f5a:	b942      	cbnz	r2, 8005f6e <_strtol_l.constprop.0+0xe6>
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	e79e      	b.n	8005e9e <_strtol_l.constprop.0+0x16>
 8005f60:	b107      	cbz	r7, 8005f64 <_strtol_l.constprop.0+0xdc>
 8005f62:	4276      	negs	r6, r6
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d0f9      	beq.n	8005f5c <_strtol_l.constprop.0+0xd4>
 8005f68:	f1bc 0f00 	cmp.w	ip, #0
 8005f6c:	d000      	beq.n	8005f70 <_strtol_l.constprop.0+0xe8>
 8005f6e:	1e69      	subs	r1, r5, #1
 8005f70:	6011      	str	r1, [r2, #0]
 8005f72:	e7f3      	b.n	8005f5c <_strtol_l.constprop.0+0xd4>
 8005f74:	2430      	movs	r4, #48	; 0x30
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1b1      	bne.n	8005ede <_strtol_l.constprop.0+0x56>
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	e7af      	b.n	8005ede <_strtol_l.constprop.0+0x56>
 8005f7e:	2c30      	cmp	r4, #48	; 0x30
 8005f80:	d0a5      	beq.n	8005ece <_strtol_l.constprop.0+0x46>
 8005f82:	230a      	movs	r3, #10
 8005f84:	e7ab      	b.n	8005ede <_strtol_l.constprop.0+0x56>
 8005f86:	bf00      	nop
 8005f88:	080073d9 	.word	0x080073d9

08005f8c <strtol>:
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	460a      	mov	r2, r1
 8005f90:	4601      	mov	r1, r0
 8005f92:	4802      	ldr	r0, [pc, #8]	; (8005f9c <strtol+0x10>)
 8005f94:	6800      	ldr	r0, [r0, #0]
 8005f96:	f7ff bf77 	b.w	8005e88 <_strtol_l.constprop.0>
 8005f9a:	bf00      	nop
 8005f9c:	2000000c 	.word	0x2000000c

08005fa0 <__assert_func>:
 8005fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fa2:	4614      	mov	r4, r2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <__assert_func+0x2c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4605      	mov	r5, r0
 8005fac:	68d8      	ldr	r0, [r3, #12]
 8005fae:	b14c      	cbz	r4, 8005fc4 <__assert_func+0x24>
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <__assert_func+0x30>)
 8005fb2:	9100      	str	r1, [sp, #0]
 8005fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fb8:	4906      	ldr	r1, [pc, #24]	; (8005fd4 <__assert_func+0x34>)
 8005fba:	462b      	mov	r3, r5
 8005fbc:	f000 f80e 	bl	8005fdc <fiprintf>
 8005fc0:	f000 fd34 	bl	8006a2c <abort>
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <__assert_func+0x38>)
 8005fc6:	461c      	mov	r4, r3
 8005fc8:	e7f3      	b.n	8005fb2 <__assert_func+0x12>
 8005fca:	bf00      	nop
 8005fcc:	2000000c 	.word	0x2000000c
 8005fd0:	08007554 	.word	0x08007554
 8005fd4:	08007561 	.word	0x08007561
 8005fd8:	0800758f 	.word	0x0800758f

08005fdc <fiprintf>:
 8005fdc:	b40e      	push	{r1, r2, r3}
 8005fde:	b503      	push	{r0, r1, lr}
 8005fe0:	4601      	mov	r1, r0
 8005fe2:	ab03      	add	r3, sp, #12
 8005fe4:	4805      	ldr	r0, [pc, #20]	; (8005ffc <fiprintf+0x20>)
 8005fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fea:	6800      	ldr	r0, [r0, #0]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	f000 f999 	bl	8006324 <_vfiprintf_r>
 8005ff2:	b002      	add	sp, #8
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	b003      	add	sp, #12
 8005ffa:	4770      	bx	lr
 8005ffc:	2000000c 	.word	0x2000000c

08006000 <__malloc_lock>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__malloc_lock+0x8>)
 8006002:	f000 bed3 	b.w	8006dac <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	20000434 	.word	0x20000434

0800600c <__malloc_unlock>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__malloc_unlock+0x8>)
 800600e:	f000 bece 	b.w	8006dae <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	20000434 	.word	0x20000434

08006018 <__ssputs_r>:
 8006018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	688e      	ldr	r6, [r1, #8]
 800601e:	429e      	cmp	r6, r3
 8006020:	4682      	mov	sl, r0
 8006022:	460c      	mov	r4, r1
 8006024:	4690      	mov	r8, r2
 8006026:	461f      	mov	r7, r3
 8006028:	d838      	bhi.n	800609c <__ssputs_r+0x84>
 800602a:	898a      	ldrh	r2, [r1, #12]
 800602c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006030:	d032      	beq.n	8006098 <__ssputs_r+0x80>
 8006032:	6825      	ldr	r5, [r4, #0]
 8006034:	6909      	ldr	r1, [r1, #16]
 8006036:	eba5 0901 	sub.w	r9, r5, r1
 800603a:	6965      	ldr	r5, [r4, #20]
 800603c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006044:	3301      	adds	r3, #1
 8006046:	444b      	add	r3, r9
 8006048:	106d      	asrs	r5, r5, #1
 800604a:	429d      	cmp	r5, r3
 800604c:	bf38      	it	cc
 800604e:	461d      	movcc	r5, r3
 8006050:	0553      	lsls	r3, r2, #21
 8006052:	d531      	bpl.n	80060b8 <__ssputs_r+0xa0>
 8006054:	4629      	mov	r1, r5
 8006056:	f7ff fdcf 	bl	8005bf8 <_malloc_r>
 800605a:	4606      	mov	r6, r0
 800605c:	b950      	cbnz	r0, 8006074 <__ssputs_r+0x5c>
 800605e:	230c      	movs	r3, #12
 8006060:	f8ca 3000 	str.w	r3, [sl]
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006074:	6921      	ldr	r1, [r4, #16]
 8006076:	464a      	mov	r2, r9
 8006078:	f000 ff00 	bl	8006e7c <memcpy>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	6126      	str	r6, [r4, #16]
 800608a:	6165      	str	r5, [r4, #20]
 800608c:	444e      	add	r6, r9
 800608e:	eba5 0509 	sub.w	r5, r5, r9
 8006092:	6026      	str	r6, [r4, #0]
 8006094:	60a5      	str	r5, [r4, #8]
 8006096:	463e      	mov	r6, r7
 8006098:	42be      	cmp	r6, r7
 800609a:	d900      	bls.n	800609e <__ssputs_r+0x86>
 800609c:	463e      	mov	r6, r7
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	4632      	mov	r2, r6
 80060a2:	4641      	mov	r1, r8
 80060a4:	f000 fef8 	bl	8006e98 <memmove>
 80060a8:	68a3      	ldr	r3, [r4, #8]
 80060aa:	1b9b      	subs	r3, r3, r6
 80060ac:	60a3      	str	r3, [r4, #8]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	4433      	add	r3, r6
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	2000      	movs	r0, #0
 80060b6:	e7db      	b.n	8006070 <__ssputs_r+0x58>
 80060b8:	462a      	mov	r2, r5
 80060ba:	f000 ff07 	bl	8006ecc <_realloc_r>
 80060be:	4606      	mov	r6, r0
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d1e1      	bne.n	8006088 <__ssputs_r+0x70>
 80060c4:	6921      	ldr	r1, [r4, #16]
 80060c6:	4650      	mov	r0, sl
 80060c8:	f7ff fd2a 	bl	8005b20 <_free_r>
 80060cc:	e7c7      	b.n	800605e <__ssputs_r+0x46>
	...

080060d0 <_svfiprintf_r>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	4698      	mov	r8, r3
 80060d6:	898b      	ldrh	r3, [r1, #12]
 80060d8:	061b      	lsls	r3, r3, #24
 80060da:	b09d      	sub	sp, #116	; 0x74
 80060dc:	4607      	mov	r7, r0
 80060de:	460d      	mov	r5, r1
 80060e0:	4614      	mov	r4, r2
 80060e2:	d50e      	bpl.n	8006102 <_svfiprintf_r+0x32>
 80060e4:	690b      	ldr	r3, [r1, #16]
 80060e6:	b963      	cbnz	r3, 8006102 <_svfiprintf_r+0x32>
 80060e8:	2140      	movs	r1, #64	; 0x40
 80060ea:	f7ff fd85 	bl	8005bf8 <_malloc_r>
 80060ee:	6028      	str	r0, [r5, #0]
 80060f0:	6128      	str	r0, [r5, #16]
 80060f2:	b920      	cbnz	r0, 80060fe <_svfiprintf_r+0x2e>
 80060f4:	230c      	movs	r3, #12
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	e0d1      	b.n	80062a2 <_svfiprintf_r+0x1d2>
 80060fe:	2340      	movs	r3, #64	; 0x40
 8006100:	616b      	str	r3, [r5, #20]
 8006102:	2300      	movs	r3, #0
 8006104:	9309      	str	r3, [sp, #36]	; 0x24
 8006106:	2320      	movs	r3, #32
 8006108:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800610c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006110:	2330      	movs	r3, #48	; 0x30
 8006112:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062bc <_svfiprintf_r+0x1ec>
 8006116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800611a:	f04f 0901 	mov.w	r9, #1
 800611e:	4623      	mov	r3, r4
 8006120:	469a      	mov	sl, r3
 8006122:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006126:	b10a      	cbz	r2, 800612c <_svfiprintf_r+0x5c>
 8006128:	2a25      	cmp	r2, #37	; 0x25
 800612a:	d1f9      	bne.n	8006120 <_svfiprintf_r+0x50>
 800612c:	ebba 0b04 	subs.w	fp, sl, r4
 8006130:	d00b      	beq.n	800614a <_svfiprintf_r+0x7a>
 8006132:	465b      	mov	r3, fp
 8006134:	4622      	mov	r2, r4
 8006136:	4629      	mov	r1, r5
 8006138:	4638      	mov	r0, r7
 800613a:	f7ff ff6d 	bl	8006018 <__ssputs_r>
 800613e:	3001      	adds	r0, #1
 8006140:	f000 80aa 	beq.w	8006298 <_svfiprintf_r+0x1c8>
 8006144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006146:	445a      	add	r2, fp
 8006148:	9209      	str	r2, [sp, #36]	; 0x24
 800614a:	f89a 3000 	ldrb.w	r3, [sl]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80a2 	beq.w	8006298 <_svfiprintf_r+0x1c8>
 8006154:	2300      	movs	r3, #0
 8006156:	f04f 32ff 	mov.w	r2, #4294967295
 800615a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800615e:	f10a 0a01 	add.w	sl, sl, #1
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	9307      	str	r3, [sp, #28]
 8006166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800616a:	931a      	str	r3, [sp, #104]	; 0x68
 800616c:	4654      	mov	r4, sl
 800616e:	2205      	movs	r2, #5
 8006170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006174:	4851      	ldr	r0, [pc, #324]	; (80062bc <_svfiprintf_r+0x1ec>)
 8006176:	f7fa f863 	bl	8000240 <memchr>
 800617a:	9a04      	ldr	r2, [sp, #16]
 800617c:	b9d8      	cbnz	r0, 80061b6 <_svfiprintf_r+0xe6>
 800617e:	06d0      	lsls	r0, r2, #27
 8006180:	bf44      	itt	mi
 8006182:	2320      	movmi	r3, #32
 8006184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006188:	0711      	lsls	r1, r2, #28
 800618a:	bf44      	itt	mi
 800618c:	232b      	movmi	r3, #43	; 0x2b
 800618e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006192:	f89a 3000 	ldrb.w	r3, [sl]
 8006196:	2b2a      	cmp	r3, #42	; 0x2a
 8006198:	d015      	beq.n	80061c6 <_svfiprintf_r+0xf6>
 800619a:	9a07      	ldr	r2, [sp, #28]
 800619c:	4654      	mov	r4, sl
 800619e:	2000      	movs	r0, #0
 80061a0:	f04f 0c0a 	mov.w	ip, #10
 80061a4:	4621      	mov	r1, r4
 80061a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061aa:	3b30      	subs	r3, #48	; 0x30
 80061ac:	2b09      	cmp	r3, #9
 80061ae:	d94e      	bls.n	800624e <_svfiprintf_r+0x17e>
 80061b0:	b1b0      	cbz	r0, 80061e0 <_svfiprintf_r+0x110>
 80061b2:	9207      	str	r2, [sp, #28]
 80061b4:	e014      	b.n	80061e0 <_svfiprintf_r+0x110>
 80061b6:	eba0 0308 	sub.w	r3, r0, r8
 80061ba:	fa09 f303 	lsl.w	r3, r9, r3
 80061be:	4313      	orrs	r3, r2
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	46a2      	mov	sl, r4
 80061c4:	e7d2      	b.n	800616c <_svfiprintf_r+0x9c>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	1d19      	adds	r1, r3, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	9103      	str	r1, [sp, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfbb      	ittet	lt
 80061d2:	425b      	neglt	r3, r3
 80061d4:	f042 0202 	orrlt.w	r2, r2, #2
 80061d8:	9307      	strge	r3, [sp, #28]
 80061da:	9307      	strlt	r3, [sp, #28]
 80061dc:	bfb8      	it	lt
 80061de:	9204      	strlt	r2, [sp, #16]
 80061e0:	7823      	ldrb	r3, [r4, #0]
 80061e2:	2b2e      	cmp	r3, #46	; 0x2e
 80061e4:	d10c      	bne.n	8006200 <_svfiprintf_r+0x130>
 80061e6:	7863      	ldrb	r3, [r4, #1]
 80061e8:	2b2a      	cmp	r3, #42	; 0x2a
 80061ea:	d135      	bne.n	8006258 <_svfiprintf_r+0x188>
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	9203      	str	r2, [sp, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bfb8      	it	lt
 80061f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80061fc:	3402      	adds	r4, #2
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062cc <_svfiprintf_r+0x1fc>
 8006204:	7821      	ldrb	r1, [r4, #0]
 8006206:	2203      	movs	r2, #3
 8006208:	4650      	mov	r0, sl
 800620a:	f7fa f819 	bl	8000240 <memchr>
 800620e:	b140      	cbz	r0, 8006222 <_svfiprintf_r+0x152>
 8006210:	2340      	movs	r3, #64	; 0x40
 8006212:	eba0 000a 	sub.w	r0, r0, sl
 8006216:	fa03 f000 	lsl.w	r0, r3, r0
 800621a:	9b04      	ldr	r3, [sp, #16]
 800621c:	4303      	orrs	r3, r0
 800621e:	3401      	adds	r4, #1
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006226:	4826      	ldr	r0, [pc, #152]	; (80062c0 <_svfiprintf_r+0x1f0>)
 8006228:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800622c:	2206      	movs	r2, #6
 800622e:	f7fa f807 	bl	8000240 <memchr>
 8006232:	2800      	cmp	r0, #0
 8006234:	d038      	beq.n	80062a8 <_svfiprintf_r+0x1d8>
 8006236:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <_svfiprintf_r+0x1f4>)
 8006238:	bb1b      	cbnz	r3, 8006282 <_svfiprintf_r+0x1b2>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	3307      	adds	r3, #7
 800623e:	f023 0307 	bic.w	r3, r3, #7
 8006242:	3308      	adds	r3, #8
 8006244:	9303      	str	r3, [sp, #12]
 8006246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006248:	4433      	add	r3, r6
 800624a:	9309      	str	r3, [sp, #36]	; 0x24
 800624c:	e767      	b.n	800611e <_svfiprintf_r+0x4e>
 800624e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006252:	460c      	mov	r4, r1
 8006254:	2001      	movs	r0, #1
 8006256:	e7a5      	b.n	80061a4 <_svfiprintf_r+0xd4>
 8006258:	2300      	movs	r3, #0
 800625a:	3401      	adds	r4, #1
 800625c:	9305      	str	r3, [sp, #20]
 800625e:	4619      	mov	r1, r3
 8006260:	f04f 0c0a 	mov.w	ip, #10
 8006264:	4620      	mov	r0, r4
 8006266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626a:	3a30      	subs	r2, #48	; 0x30
 800626c:	2a09      	cmp	r2, #9
 800626e:	d903      	bls.n	8006278 <_svfiprintf_r+0x1a8>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0c5      	beq.n	8006200 <_svfiprintf_r+0x130>
 8006274:	9105      	str	r1, [sp, #20]
 8006276:	e7c3      	b.n	8006200 <_svfiprintf_r+0x130>
 8006278:	fb0c 2101 	mla	r1, ip, r1, r2
 800627c:	4604      	mov	r4, r0
 800627e:	2301      	movs	r3, #1
 8006280:	e7f0      	b.n	8006264 <_svfiprintf_r+0x194>
 8006282:	ab03      	add	r3, sp, #12
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	462a      	mov	r2, r5
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <_svfiprintf_r+0x1f8>)
 800628a:	a904      	add	r1, sp, #16
 800628c:	4638      	mov	r0, r7
 800628e:	f3af 8000 	nop.w
 8006292:	1c42      	adds	r2, r0, #1
 8006294:	4606      	mov	r6, r0
 8006296:	d1d6      	bne.n	8006246 <_svfiprintf_r+0x176>
 8006298:	89ab      	ldrh	r3, [r5, #12]
 800629a:	065b      	lsls	r3, r3, #25
 800629c:	f53f af2c 	bmi.w	80060f8 <_svfiprintf_r+0x28>
 80062a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a2:	b01d      	add	sp, #116	; 0x74
 80062a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a8:	ab03      	add	r3, sp, #12
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	462a      	mov	r2, r5
 80062ae:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <_svfiprintf_r+0x1f8>)
 80062b0:	a904      	add	r1, sp, #16
 80062b2:	4638      	mov	r0, r7
 80062b4:	f000 f9d4 	bl	8006660 <_printf_i>
 80062b8:	e7eb      	b.n	8006292 <_svfiprintf_r+0x1c2>
 80062ba:	bf00      	nop
 80062bc:	08007590 	.word	0x08007590
 80062c0:	0800759a 	.word	0x0800759a
 80062c4:	00000000 	.word	0x00000000
 80062c8:	08006019 	.word	0x08006019
 80062cc:	08007596 	.word	0x08007596

080062d0 <__sfputc_r>:
 80062d0:	6893      	ldr	r3, [r2, #8]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	b410      	push	{r4}
 80062d8:	6093      	str	r3, [r2, #8]
 80062da:	da08      	bge.n	80062ee <__sfputc_r+0x1e>
 80062dc:	6994      	ldr	r4, [r2, #24]
 80062de:	42a3      	cmp	r3, r4
 80062e0:	db01      	blt.n	80062e6 <__sfputc_r+0x16>
 80062e2:	290a      	cmp	r1, #10
 80062e4:	d103      	bne.n	80062ee <__sfputc_r+0x1e>
 80062e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ea:	f000 badf 	b.w	80068ac <__swbuf_r>
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	1c58      	adds	r0, r3, #1
 80062f2:	6010      	str	r0, [r2, #0]
 80062f4:	7019      	strb	r1, [r3, #0]
 80062f6:	4608      	mov	r0, r1
 80062f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <__sfputs_r>:
 80062fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	4614      	mov	r4, r2
 8006306:	18d5      	adds	r5, r2, r3
 8006308:	42ac      	cmp	r4, r5
 800630a:	d101      	bne.n	8006310 <__sfputs_r+0x12>
 800630c:	2000      	movs	r0, #0
 800630e:	e007      	b.n	8006320 <__sfputs_r+0x22>
 8006310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006314:	463a      	mov	r2, r7
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ffda 	bl	80062d0 <__sfputc_r>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d1f3      	bne.n	8006308 <__sfputs_r+0xa>
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006324 <_vfiprintf_r>:
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	460d      	mov	r5, r1
 800632a:	b09d      	sub	sp, #116	; 0x74
 800632c:	4614      	mov	r4, r2
 800632e:	4698      	mov	r8, r3
 8006330:	4606      	mov	r6, r0
 8006332:	b118      	cbz	r0, 800633c <_vfiprintf_r+0x18>
 8006334:	6983      	ldr	r3, [r0, #24]
 8006336:	b90b      	cbnz	r3, 800633c <_vfiprintf_r+0x18>
 8006338:	f000 fc9a 	bl	8006c70 <__sinit>
 800633c:	4b89      	ldr	r3, [pc, #548]	; (8006564 <_vfiprintf_r+0x240>)
 800633e:	429d      	cmp	r5, r3
 8006340:	d11b      	bne.n	800637a <_vfiprintf_r+0x56>
 8006342:	6875      	ldr	r5, [r6, #4]
 8006344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006346:	07d9      	lsls	r1, r3, #31
 8006348:	d405      	bmi.n	8006356 <_vfiprintf_r+0x32>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	059a      	lsls	r2, r3, #22
 800634e:	d402      	bmi.n	8006356 <_vfiprintf_r+0x32>
 8006350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006352:	f000 fd2b 	bl	8006dac <__retarget_lock_acquire_recursive>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	071b      	lsls	r3, r3, #28
 800635a:	d501      	bpl.n	8006360 <_vfiprintf_r+0x3c>
 800635c:	692b      	ldr	r3, [r5, #16]
 800635e:	b9eb      	cbnz	r3, 800639c <_vfiprintf_r+0x78>
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f000 faf4 	bl	8006950 <__swsetup_r>
 8006368:	b1c0      	cbz	r0, 800639c <_vfiprintf_r+0x78>
 800636a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800636c:	07dc      	lsls	r4, r3, #31
 800636e:	d50e      	bpl.n	800638e <_vfiprintf_r+0x6a>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	b01d      	add	sp, #116	; 0x74
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	4b7b      	ldr	r3, [pc, #492]	; (8006568 <_vfiprintf_r+0x244>)
 800637c:	429d      	cmp	r5, r3
 800637e:	d101      	bne.n	8006384 <_vfiprintf_r+0x60>
 8006380:	68b5      	ldr	r5, [r6, #8]
 8006382:	e7df      	b.n	8006344 <_vfiprintf_r+0x20>
 8006384:	4b79      	ldr	r3, [pc, #484]	; (800656c <_vfiprintf_r+0x248>)
 8006386:	429d      	cmp	r5, r3
 8006388:	bf08      	it	eq
 800638a:	68f5      	ldreq	r5, [r6, #12]
 800638c:	e7da      	b.n	8006344 <_vfiprintf_r+0x20>
 800638e:	89ab      	ldrh	r3, [r5, #12]
 8006390:	0598      	lsls	r0, r3, #22
 8006392:	d4ed      	bmi.n	8006370 <_vfiprintf_r+0x4c>
 8006394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006396:	f000 fd0a 	bl	8006dae <__retarget_lock_release_recursive>
 800639a:	e7e9      	b.n	8006370 <_vfiprintf_r+0x4c>
 800639c:	2300      	movs	r3, #0
 800639e:	9309      	str	r3, [sp, #36]	; 0x24
 80063a0:	2320      	movs	r3, #32
 80063a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80063aa:	2330      	movs	r3, #48	; 0x30
 80063ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006570 <_vfiprintf_r+0x24c>
 80063b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063b4:	f04f 0901 	mov.w	r9, #1
 80063b8:	4623      	mov	r3, r4
 80063ba:	469a      	mov	sl, r3
 80063bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c0:	b10a      	cbz	r2, 80063c6 <_vfiprintf_r+0xa2>
 80063c2:	2a25      	cmp	r2, #37	; 0x25
 80063c4:	d1f9      	bne.n	80063ba <_vfiprintf_r+0x96>
 80063c6:	ebba 0b04 	subs.w	fp, sl, r4
 80063ca:	d00b      	beq.n	80063e4 <_vfiprintf_r+0xc0>
 80063cc:	465b      	mov	r3, fp
 80063ce:	4622      	mov	r2, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff ff93 	bl	80062fe <__sfputs_r>
 80063d8:	3001      	adds	r0, #1
 80063da:	f000 80aa 	beq.w	8006532 <_vfiprintf_r+0x20e>
 80063de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e0:	445a      	add	r2, fp
 80063e2:	9209      	str	r2, [sp, #36]	; 0x24
 80063e4:	f89a 3000 	ldrb.w	r3, [sl]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80a2 	beq.w	8006532 <_vfiprintf_r+0x20e>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295
 80063f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f8:	f10a 0a01 	add.w	sl, sl, #1
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006404:	931a      	str	r3, [sp, #104]	; 0x68
 8006406:	4654      	mov	r4, sl
 8006408:	2205      	movs	r2, #5
 800640a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640e:	4858      	ldr	r0, [pc, #352]	; (8006570 <_vfiprintf_r+0x24c>)
 8006410:	f7f9 ff16 	bl	8000240 <memchr>
 8006414:	9a04      	ldr	r2, [sp, #16]
 8006416:	b9d8      	cbnz	r0, 8006450 <_vfiprintf_r+0x12c>
 8006418:	06d1      	lsls	r1, r2, #27
 800641a:	bf44      	itt	mi
 800641c:	2320      	movmi	r3, #32
 800641e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006422:	0713      	lsls	r3, r2, #28
 8006424:	bf44      	itt	mi
 8006426:	232b      	movmi	r3, #43	; 0x2b
 8006428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642c:	f89a 3000 	ldrb.w	r3, [sl]
 8006430:	2b2a      	cmp	r3, #42	; 0x2a
 8006432:	d015      	beq.n	8006460 <_vfiprintf_r+0x13c>
 8006434:	9a07      	ldr	r2, [sp, #28]
 8006436:	4654      	mov	r4, sl
 8006438:	2000      	movs	r0, #0
 800643a:	f04f 0c0a 	mov.w	ip, #10
 800643e:	4621      	mov	r1, r4
 8006440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006444:	3b30      	subs	r3, #48	; 0x30
 8006446:	2b09      	cmp	r3, #9
 8006448:	d94e      	bls.n	80064e8 <_vfiprintf_r+0x1c4>
 800644a:	b1b0      	cbz	r0, 800647a <_vfiprintf_r+0x156>
 800644c:	9207      	str	r2, [sp, #28]
 800644e:	e014      	b.n	800647a <_vfiprintf_r+0x156>
 8006450:	eba0 0308 	sub.w	r3, r0, r8
 8006454:	fa09 f303 	lsl.w	r3, r9, r3
 8006458:	4313      	orrs	r3, r2
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	46a2      	mov	sl, r4
 800645e:	e7d2      	b.n	8006406 <_vfiprintf_r+0xe2>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	1d19      	adds	r1, r3, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	9103      	str	r1, [sp, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	bfbb      	ittet	lt
 800646c:	425b      	neglt	r3, r3
 800646e:	f042 0202 	orrlt.w	r2, r2, #2
 8006472:	9307      	strge	r3, [sp, #28]
 8006474:	9307      	strlt	r3, [sp, #28]
 8006476:	bfb8      	it	lt
 8006478:	9204      	strlt	r2, [sp, #16]
 800647a:	7823      	ldrb	r3, [r4, #0]
 800647c:	2b2e      	cmp	r3, #46	; 0x2e
 800647e:	d10c      	bne.n	800649a <_vfiprintf_r+0x176>
 8006480:	7863      	ldrb	r3, [r4, #1]
 8006482:	2b2a      	cmp	r3, #42	; 0x2a
 8006484:	d135      	bne.n	80064f2 <_vfiprintf_r+0x1ce>
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	1d1a      	adds	r2, r3, #4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	9203      	str	r2, [sp, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfb8      	it	lt
 8006492:	f04f 33ff 	movlt.w	r3, #4294967295
 8006496:	3402      	adds	r4, #2
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006580 <_vfiprintf_r+0x25c>
 800649e:	7821      	ldrb	r1, [r4, #0]
 80064a0:	2203      	movs	r2, #3
 80064a2:	4650      	mov	r0, sl
 80064a4:	f7f9 fecc 	bl	8000240 <memchr>
 80064a8:	b140      	cbz	r0, 80064bc <_vfiprintf_r+0x198>
 80064aa:	2340      	movs	r3, #64	; 0x40
 80064ac:	eba0 000a 	sub.w	r0, r0, sl
 80064b0:	fa03 f000 	lsl.w	r0, r3, r0
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	4303      	orrs	r3, r0
 80064b8:	3401      	adds	r4, #1
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c0:	482c      	ldr	r0, [pc, #176]	; (8006574 <_vfiprintf_r+0x250>)
 80064c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064c6:	2206      	movs	r2, #6
 80064c8:	f7f9 feba 	bl	8000240 <memchr>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d03f      	beq.n	8006550 <_vfiprintf_r+0x22c>
 80064d0:	4b29      	ldr	r3, [pc, #164]	; (8006578 <_vfiprintf_r+0x254>)
 80064d2:	bb1b      	cbnz	r3, 800651c <_vfiprintf_r+0x1f8>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	3307      	adds	r3, #7
 80064d8:	f023 0307 	bic.w	r3, r3, #7
 80064dc:	3308      	adds	r3, #8
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e2:	443b      	add	r3, r7
 80064e4:	9309      	str	r3, [sp, #36]	; 0x24
 80064e6:	e767      	b.n	80063b8 <_vfiprintf_r+0x94>
 80064e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ec:	460c      	mov	r4, r1
 80064ee:	2001      	movs	r0, #1
 80064f0:	e7a5      	b.n	800643e <_vfiprintf_r+0x11a>
 80064f2:	2300      	movs	r3, #0
 80064f4:	3401      	adds	r4, #1
 80064f6:	9305      	str	r3, [sp, #20]
 80064f8:	4619      	mov	r1, r3
 80064fa:	f04f 0c0a 	mov.w	ip, #10
 80064fe:	4620      	mov	r0, r4
 8006500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006504:	3a30      	subs	r2, #48	; 0x30
 8006506:	2a09      	cmp	r2, #9
 8006508:	d903      	bls.n	8006512 <_vfiprintf_r+0x1ee>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0c5      	beq.n	800649a <_vfiprintf_r+0x176>
 800650e:	9105      	str	r1, [sp, #20]
 8006510:	e7c3      	b.n	800649a <_vfiprintf_r+0x176>
 8006512:	fb0c 2101 	mla	r1, ip, r1, r2
 8006516:	4604      	mov	r4, r0
 8006518:	2301      	movs	r3, #1
 800651a:	e7f0      	b.n	80064fe <_vfiprintf_r+0x1da>
 800651c:	ab03      	add	r3, sp, #12
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	462a      	mov	r2, r5
 8006522:	4b16      	ldr	r3, [pc, #88]	; (800657c <_vfiprintf_r+0x258>)
 8006524:	a904      	add	r1, sp, #16
 8006526:	4630      	mov	r0, r6
 8006528:	f3af 8000 	nop.w
 800652c:	4607      	mov	r7, r0
 800652e:	1c78      	adds	r0, r7, #1
 8006530:	d1d6      	bne.n	80064e0 <_vfiprintf_r+0x1bc>
 8006532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006534:	07d9      	lsls	r1, r3, #31
 8006536:	d405      	bmi.n	8006544 <_vfiprintf_r+0x220>
 8006538:	89ab      	ldrh	r3, [r5, #12]
 800653a:	059a      	lsls	r2, r3, #22
 800653c:	d402      	bmi.n	8006544 <_vfiprintf_r+0x220>
 800653e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006540:	f000 fc35 	bl	8006dae <__retarget_lock_release_recursive>
 8006544:	89ab      	ldrh	r3, [r5, #12]
 8006546:	065b      	lsls	r3, r3, #25
 8006548:	f53f af12 	bmi.w	8006370 <_vfiprintf_r+0x4c>
 800654c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800654e:	e711      	b.n	8006374 <_vfiprintf_r+0x50>
 8006550:	ab03      	add	r3, sp, #12
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	462a      	mov	r2, r5
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <_vfiprintf_r+0x258>)
 8006558:	a904      	add	r1, sp, #16
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f880 	bl	8006660 <_printf_i>
 8006560:	e7e4      	b.n	800652c <_vfiprintf_r+0x208>
 8006562:	bf00      	nop
 8006564:	080075e4 	.word	0x080075e4
 8006568:	08007604 	.word	0x08007604
 800656c:	080075c4 	.word	0x080075c4
 8006570:	08007590 	.word	0x08007590
 8006574:	0800759a 	.word	0x0800759a
 8006578:	00000000 	.word	0x00000000
 800657c:	080062ff 	.word	0x080062ff
 8006580:	08007596 	.word	0x08007596

08006584 <_printf_common>:
 8006584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006588:	4616      	mov	r6, r2
 800658a:	4699      	mov	r9, r3
 800658c:	688a      	ldr	r2, [r1, #8]
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006594:	4293      	cmp	r3, r2
 8006596:	bfb8      	it	lt
 8006598:	4613      	movlt	r3, r2
 800659a:	6033      	str	r3, [r6, #0]
 800659c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a0:	4607      	mov	r7, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	b10a      	cbz	r2, 80065aa <_printf_common+0x26>
 80065a6:	3301      	adds	r3, #1
 80065a8:	6033      	str	r3, [r6, #0]
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	0699      	lsls	r1, r3, #26
 80065ae:	bf42      	ittt	mi
 80065b0:	6833      	ldrmi	r3, [r6, #0]
 80065b2:	3302      	addmi	r3, #2
 80065b4:	6033      	strmi	r3, [r6, #0]
 80065b6:	6825      	ldr	r5, [r4, #0]
 80065b8:	f015 0506 	ands.w	r5, r5, #6
 80065bc:	d106      	bne.n	80065cc <_printf_common+0x48>
 80065be:	f104 0a19 	add.w	sl, r4, #25
 80065c2:	68e3      	ldr	r3, [r4, #12]
 80065c4:	6832      	ldr	r2, [r6, #0]
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	42ab      	cmp	r3, r5
 80065ca:	dc26      	bgt.n	800661a <_printf_common+0x96>
 80065cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d0:	1e13      	subs	r3, r2, #0
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	bf18      	it	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	0692      	lsls	r2, r2, #26
 80065da:	d42b      	bmi.n	8006634 <_printf_common+0xb0>
 80065dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e0:	4649      	mov	r1, r9
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	3001      	adds	r0, #1
 80065e8:	d01e      	beq.n	8006628 <_printf_common+0xa4>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	68e5      	ldr	r5, [r4, #12]
 80065ee:	6832      	ldr	r2, [r6, #0]
 80065f0:	f003 0306 	and.w	r3, r3, #6
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	bf08      	it	eq
 80065f8:	1aad      	subeq	r5, r5, r2
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	6922      	ldr	r2, [r4, #16]
 80065fe:	bf0c      	ite	eq
 8006600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006604:	2500      	movne	r5, #0
 8006606:	4293      	cmp	r3, r2
 8006608:	bfc4      	itt	gt
 800660a:	1a9b      	subgt	r3, r3, r2
 800660c:	18ed      	addgt	r5, r5, r3
 800660e:	2600      	movs	r6, #0
 8006610:	341a      	adds	r4, #26
 8006612:	42b5      	cmp	r5, r6
 8006614:	d11a      	bne.n	800664c <_printf_common+0xc8>
 8006616:	2000      	movs	r0, #0
 8006618:	e008      	b.n	800662c <_printf_common+0xa8>
 800661a:	2301      	movs	r3, #1
 800661c:	4652      	mov	r2, sl
 800661e:	4649      	mov	r1, r9
 8006620:	4638      	mov	r0, r7
 8006622:	47c0      	blx	r8
 8006624:	3001      	adds	r0, #1
 8006626:	d103      	bne.n	8006630 <_printf_common+0xac>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	3501      	adds	r5, #1
 8006632:	e7c6      	b.n	80065c2 <_printf_common+0x3e>
 8006634:	18e1      	adds	r1, r4, r3
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	2030      	movs	r0, #48	; 0x30
 800663a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800663e:	4422      	add	r2, r4
 8006640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006648:	3302      	adds	r3, #2
 800664a:	e7c7      	b.n	80065dc <_printf_common+0x58>
 800664c:	2301      	movs	r3, #1
 800664e:	4622      	mov	r2, r4
 8006650:	4649      	mov	r1, r9
 8006652:	4638      	mov	r0, r7
 8006654:	47c0      	blx	r8
 8006656:	3001      	adds	r0, #1
 8006658:	d0e6      	beq.n	8006628 <_printf_common+0xa4>
 800665a:	3601      	adds	r6, #1
 800665c:	e7d9      	b.n	8006612 <_printf_common+0x8e>
	...

08006660 <_printf_i>:
 8006660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	7e0f      	ldrb	r7, [r1, #24]
 8006666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006668:	2f78      	cmp	r7, #120	; 0x78
 800666a:	4691      	mov	r9, r2
 800666c:	4680      	mov	r8, r0
 800666e:	460c      	mov	r4, r1
 8006670:	469a      	mov	sl, r3
 8006672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006676:	d807      	bhi.n	8006688 <_printf_i+0x28>
 8006678:	2f62      	cmp	r7, #98	; 0x62
 800667a:	d80a      	bhi.n	8006692 <_printf_i+0x32>
 800667c:	2f00      	cmp	r7, #0
 800667e:	f000 80d8 	beq.w	8006832 <_printf_i+0x1d2>
 8006682:	2f58      	cmp	r7, #88	; 0x58
 8006684:	f000 80a3 	beq.w	80067ce <_printf_i+0x16e>
 8006688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800668c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006690:	e03a      	b.n	8006708 <_printf_i+0xa8>
 8006692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006696:	2b15      	cmp	r3, #21
 8006698:	d8f6      	bhi.n	8006688 <_printf_i+0x28>
 800669a:	a101      	add	r1, pc, #4	; (adr r1, 80066a0 <_printf_i+0x40>)
 800669c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a0:	080066f9 	.word	0x080066f9
 80066a4:	0800670d 	.word	0x0800670d
 80066a8:	08006689 	.word	0x08006689
 80066ac:	08006689 	.word	0x08006689
 80066b0:	08006689 	.word	0x08006689
 80066b4:	08006689 	.word	0x08006689
 80066b8:	0800670d 	.word	0x0800670d
 80066bc:	08006689 	.word	0x08006689
 80066c0:	08006689 	.word	0x08006689
 80066c4:	08006689 	.word	0x08006689
 80066c8:	08006689 	.word	0x08006689
 80066cc:	08006819 	.word	0x08006819
 80066d0:	0800673d 	.word	0x0800673d
 80066d4:	080067fb 	.word	0x080067fb
 80066d8:	08006689 	.word	0x08006689
 80066dc:	08006689 	.word	0x08006689
 80066e0:	0800683b 	.word	0x0800683b
 80066e4:	08006689 	.word	0x08006689
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	08006689 	.word	0x08006689
 80066f0:	08006689 	.word	0x08006689
 80066f4:	08006803 	.word	0x08006803
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	602a      	str	r2, [r5, #0]
 8006700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006708:	2301      	movs	r3, #1
 800670a:	e0a3      	b.n	8006854 <_printf_i+0x1f4>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	6829      	ldr	r1, [r5, #0]
 8006710:	0606      	lsls	r6, r0, #24
 8006712:	f101 0304 	add.w	r3, r1, #4
 8006716:	d50a      	bpl.n	800672e <_printf_i+0xce>
 8006718:	680e      	ldr	r6, [r1, #0]
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	2e00      	cmp	r6, #0
 800671e:	da03      	bge.n	8006728 <_printf_i+0xc8>
 8006720:	232d      	movs	r3, #45	; 0x2d
 8006722:	4276      	negs	r6, r6
 8006724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006728:	485e      	ldr	r0, [pc, #376]	; (80068a4 <_printf_i+0x244>)
 800672a:	230a      	movs	r3, #10
 800672c:	e019      	b.n	8006762 <_printf_i+0x102>
 800672e:	680e      	ldr	r6, [r1, #0]
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006736:	bf18      	it	ne
 8006738:	b236      	sxthne	r6, r6
 800673a:	e7ef      	b.n	800671c <_printf_i+0xbc>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	6820      	ldr	r0, [r4, #0]
 8006740:	1d19      	adds	r1, r3, #4
 8006742:	6029      	str	r1, [r5, #0]
 8006744:	0601      	lsls	r1, r0, #24
 8006746:	d501      	bpl.n	800674c <_printf_i+0xec>
 8006748:	681e      	ldr	r6, [r3, #0]
 800674a:	e002      	b.n	8006752 <_printf_i+0xf2>
 800674c:	0646      	lsls	r6, r0, #25
 800674e:	d5fb      	bpl.n	8006748 <_printf_i+0xe8>
 8006750:	881e      	ldrh	r6, [r3, #0]
 8006752:	4854      	ldr	r0, [pc, #336]	; (80068a4 <_printf_i+0x244>)
 8006754:	2f6f      	cmp	r7, #111	; 0x6f
 8006756:	bf0c      	ite	eq
 8006758:	2308      	moveq	r3, #8
 800675a:	230a      	movne	r3, #10
 800675c:	2100      	movs	r1, #0
 800675e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006762:	6865      	ldr	r5, [r4, #4]
 8006764:	60a5      	str	r5, [r4, #8]
 8006766:	2d00      	cmp	r5, #0
 8006768:	bfa2      	ittt	ge
 800676a:	6821      	ldrge	r1, [r4, #0]
 800676c:	f021 0104 	bicge.w	r1, r1, #4
 8006770:	6021      	strge	r1, [r4, #0]
 8006772:	b90e      	cbnz	r6, 8006778 <_printf_i+0x118>
 8006774:	2d00      	cmp	r5, #0
 8006776:	d04d      	beq.n	8006814 <_printf_i+0x1b4>
 8006778:	4615      	mov	r5, r2
 800677a:	fbb6 f1f3 	udiv	r1, r6, r3
 800677e:	fb03 6711 	mls	r7, r3, r1, r6
 8006782:	5dc7      	ldrb	r7, [r0, r7]
 8006784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006788:	4637      	mov	r7, r6
 800678a:	42bb      	cmp	r3, r7
 800678c:	460e      	mov	r6, r1
 800678e:	d9f4      	bls.n	800677a <_printf_i+0x11a>
 8006790:	2b08      	cmp	r3, #8
 8006792:	d10b      	bne.n	80067ac <_printf_i+0x14c>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	07de      	lsls	r6, r3, #31
 8006798:	d508      	bpl.n	80067ac <_printf_i+0x14c>
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	6861      	ldr	r1, [r4, #4]
 800679e:	4299      	cmp	r1, r3
 80067a0:	bfde      	ittt	le
 80067a2:	2330      	movle	r3, #48	; 0x30
 80067a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067ac:	1b52      	subs	r2, r2, r5
 80067ae:	6122      	str	r2, [r4, #16]
 80067b0:	f8cd a000 	str.w	sl, [sp]
 80067b4:	464b      	mov	r3, r9
 80067b6:	aa03      	add	r2, sp, #12
 80067b8:	4621      	mov	r1, r4
 80067ba:	4640      	mov	r0, r8
 80067bc:	f7ff fee2 	bl	8006584 <_printf_common>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d14c      	bne.n	800685e <_printf_i+0x1fe>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	b004      	add	sp, #16
 80067ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ce:	4835      	ldr	r0, [pc, #212]	; (80068a4 <_printf_i+0x244>)
 80067d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067d4:	6829      	ldr	r1, [r5, #0]
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067dc:	6029      	str	r1, [r5, #0]
 80067de:	061d      	lsls	r5, r3, #24
 80067e0:	d514      	bpl.n	800680c <_printf_i+0x1ac>
 80067e2:	07df      	lsls	r7, r3, #31
 80067e4:	bf44      	itt	mi
 80067e6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ea:	6023      	strmi	r3, [r4, #0]
 80067ec:	b91e      	cbnz	r6, 80067f6 <_printf_i+0x196>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	f023 0320 	bic.w	r3, r3, #32
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	2310      	movs	r3, #16
 80067f8:	e7b0      	b.n	800675c <_printf_i+0xfc>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	2378      	movs	r3, #120	; 0x78
 8006804:	4828      	ldr	r0, [pc, #160]	; (80068a8 <_printf_i+0x248>)
 8006806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800680a:	e7e3      	b.n	80067d4 <_printf_i+0x174>
 800680c:	0659      	lsls	r1, r3, #25
 800680e:	bf48      	it	mi
 8006810:	b2b6      	uxthmi	r6, r6
 8006812:	e7e6      	b.n	80067e2 <_printf_i+0x182>
 8006814:	4615      	mov	r5, r2
 8006816:	e7bb      	b.n	8006790 <_printf_i+0x130>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	6826      	ldr	r6, [r4, #0]
 800681c:	6961      	ldr	r1, [r4, #20]
 800681e:	1d18      	adds	r0, r3, #4
 8006820:	6028      	str	r0, [r5, #0]
 8006822:	0635      	lsls	r5, r6, #24
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	d501      	bpl.n	800682c <_printf_i+0x1cc>
 8006828:	6019      	str	r1, [r3, #0]
 800682a:	e002      	b.n	8006832 <_printf_i+0x1d2>
 800682c:	0670      	lsls	r0, r6, #25
 800682e:	d5fb      	bpl.n	8006828 <_printf_i+0x1c8>
 8006830:	8019      	strh	r1, [r3, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	4615      	mov	r5, r2
 8006838:	e7ba      	b.n	80067b0 <_printf_i+0x150>
 800683a:	682b      	ldr	r3, [r5, #0]
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	602a      	str	r2, [r5, #0]
 8006840:	681d      	ldr	r5, [r3, #0]
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	2100      	movs	r1, #0
 8006846:	4628      	mov	r0, r5
 8006848:	f7f9 fcfa 	bl	8000240 <memchr>
 800684c:	b108      	cbz	r0, 8006852 <_printf_i+0x1f2>
 800684e:	1b40      	subs	r0, r0, r5
 8006850:	6060      	str	r0, [r4, #4]
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	2300      	movs	r3, #0
 8006858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685c:	e7a8      	b.n	80067b0 <_printf_i+0x150>
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	462a      	mov	r2, r5
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d0ab      	beq.n	80067c4 <_printf_i+0x164>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	079b      	lsls	r3, r3, #30
 8006870:	d413      	bmi.n	800689a <_printf_i+0x23a>
 8006872:	68e0      	ldr	r0, [r4, #12]
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	4298      	cmp	r0, r3
 8006878:	bfb8      	it	lt
 800687a:	4618      	movlt	r0, r3
 800687c:	e7a4      	b.n	80067c8 <_printf_i+0x168>
 800687e:	2301      	movs	r3, #1
 8006880:	4632      	mov	r2, r6
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	47d0      	blx	sl
 8006888:	3001      	adds	r0, #1
 800688a:	d09b      	beq.n	80067c4 <_printf_i+0x164>
 800688c:	3501      	adds	r5, #1
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	9903      	ldr	r1, [sp, #12]
 8006892:	1a5b      	subs	r3, r3, r1
 8006894:	42ab      	cmp	r3, r5
 8006896:	dcf2      	bgt.n	800687e <_printf_i+0x21e>
 8006898:	e7eb      	b.n	8006872 <_printf_i+0x212>
 800689a:	2500      	movs	r5, #0
 800689c:	f104 0619 	add.w	r6, r4, #25
 80068a0:	e7f5      	b.n	800688e <_printf_i+0x22e>
 80068a2:	bf00      	nop
 80068a4:	080075a1 	.word	0x080075a1
 80068a8:	080075b2 	.word	0x080075b2

080068ac <__swbuf_r>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	460e      	mov	r6, r1
 80068b0:	4614      	mov	r4, r2
 80068b2:	4605      	mov	r5, r0
 80068b4:	b118      	cbz	r0, 80068be <__swbuf_r+0x12>
 80068b6:	6983      	ldr	r3, [r0, #24]
 80068b8:	b90b      	cbnz	r3, 80068be <__swbuf_r+0x12>
 80068ba:	f000 f9d9 	bl	8006c70 <__sinit>
 80068be:	4b21      	ldr	r3, [pc, #132]	; (8006944 <__swbuf_r+0x98>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	d12b      	bne.n	800691c <__swbuf_r+0x70>
 80068c4:	686c      	ldr	r4, [r5, #4]
 80068c6:	69a3      	ldr	r3, [r4, #24]
 80068c8:	60a3      	str	r3, [r4, #8]
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	071a      	lsls	r2, r3, #28
 80068ce:	d52f      	bpl.n	8006930 <__swbuf_r+0x84>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	b36b      	cbz	r3, 8006930 <__swbuf_r+0x84>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	6820      	ldr	r0, [r4, #0]
 80068d8:	1ac0      	subs	r0, r0, r3
 80068da:	6963      	ldr	r3, [r4, #20]
 80068dc:	b2f6      	uxtb	r6, r6
 80068de:	4283      	cmp	r3, r0
 80068e0:	4637      	mov	r7, r6
 80068e2:	dc04      	bgt.n	80068ee <__swbuf_r+0x42>
 80068e4:	4621      	mov	r1, r4
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 f92e 	bl	8006b48 <_fflush_r>
 80068ec:	bb30      	cbnz	r0, 800693c <__swbuf_r+0x90>
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	60a3      	str	r3, [r4, #8]
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	6022      	str	r2, [r4, #0]
 80068fa:	701e      	strb	r6, [r3, #0]
 80068fc:	6963      	ldr	r3, [r4, #20]
 80068fe:	3001      	adds	r0, #1
 8006900:	4283      	cmp	r3, r0
 8006902:	d004      	beq.n	800690e <__swbuf_r+0x62>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	07db      	lsls	r3, r3, #31
 8006908:	d506      	bpl.n	8006918 <__swbuf_r+0x6c>
 800690a:	2e0a      	cmp	r6, #10
 800690c:	d104      	bne.n	8006918 <__swbuf_r+0x6c>
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	f000 f919 	bl	8006b48 <_fflush_r>
 8006916:	b988      	cbnz	r0, 800693c <__swbuf_r+0x90>
 8006918:	4638      	mov	r0, r7
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <__swbuf_r+0x9c>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d101      	bne.n	8006926 <__swbuf_r+0x7a>
 8006922:	68ac      	ldr	r4, [r5, #8]
 8006924:	e7cf      	b.n	80068c6 <__swbuf_r+0x1a>
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <__swbuf_r+0xa0>)
 8006928:	429c      	cmp	r4, r3
 800692a:	bf08      	it	eq
 800692c:	68ec      	ldreq	r4, [r5, #12]
 800692e:	e7ca      	b.n	80068c6 <__swbuf_r+0x1a>
 8006930:	4621      	mov	r1, r4
 8006932:	4628      	mov	r0, r5
 8006934:	f000 f80c 	bl	8006950 <__swsetup_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	d0cb      	beq.n	80068d4 <__swbuf_r+0x28>
 800693c:	f04f 37ff 	mov.w	r7, #4294967295
 8006940:	e7ea      	b.n	8006918 <__swbuf_r+0x6c>
 8006942:	bf00      	nop
 8006944:	080075e4 	.word	0x080075e4
 8006948:	08007604 	.word	0x08007604
 800694c:	080075c4 	.word	0x080075c4

08006950 <__swsetup_r>:
 8006950:	4b32      	ldr	r3, [pc, #200]	; (8006a1c <__swsetup_r+0xcc>)
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	4606      	mov	r6, r0
 8006958:	460c      	mov	r4, r1
 800695a:	b125      	cbz	r5, 8006966 <__swsetup_r+0x16>
 800695c:	69ab      	ldr	r3, [r5, #24]
 800695e:	b913      	cbnz	r3, 8006966 <__swsetup_r+0x16>
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f985 	bl	8006c70 <__sinit>
 8006966:	4b2e      	ldr	r3, [pc, #184]	; (8006a20 <__swsetup_r+0xd0>)
 8006968:	429c      	cmp	r4, r3
 800696a:	d10f      	bne.n	800698c <__swsetup_r+0x3c>
 800696c:	686c      	ldr	r4, [r5, #4]
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006974:	0719      	lsls	r1, r3, #28
 8006976:	d42c      	bmi.n	80069d2 <__swsetup_r+0x82>
 8006978:	06dd      	lsls	r5, r3, #27
 800697a:	d411      	bmi.n	80069a0 <__swsetup_r+0x50>
 800697c:	2309      	movs	r3, #9
 800697e:	6033      	str	r3, [r6, #0]
 8006980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	e03e      	b.n	8006a0a <__swsetup_r+0xba>
 800698c:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <__swsetup_r+0xd4>)
 800698e:	429c      	cmp	r4, r3
 8006990:	d101      	bne.n	8006996 <__swsetup_r+0x46>
 8006992:	68ac      	ldr	r4, [r5, #8]
 8006994:	e7eb      	b.n	800696e <__swsetup_r+0x1e>
 8006996:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <__swsetup_r+0xd8>)
 8006998:	429c      	cmp	r4, r3
 800699a:	bf08      	it	eq
 800699c:	68ec      	ldreq	r4, [r5, #12]
 800699e:	e7e6      	b.n	800696e <__swsetup_r+0x1e>
 80069a0:	0758      	lsls	r0, r3, #29
 80069a2:	d512      	bpl.n	80069ca <__swsetup_r+0x7a>
 80069a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069a6:	b141      	cbz	r1, 80069ba <__swsetup_r+0x6a>
 80069a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069ac:	4299      	cmp	r1, r3
 80069ae:	d002      	beq.n	80069b6 <__swsetup_r+0x66>
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff f8b5 	bl	8005b20 <_free_r>
 80069b6:	2300      	movs	r3, #0
 80069b8:	6363      	str	r3, [r4, #52]	; 0x34
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f043 0308 	orr.w	r3, r3, #8
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	b94b      	cbnz	r3, 80069ea <__swsetup_r+0x9a>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d003      	beq.n	80069ea <__swsetup_r+0x9a>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 fa09 	bl	8006dfc <__smakebuf_r>
 80069ea:	89a0      	ldrh	r0, [r4, #12]
 80069ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069f0:	f010 0301 	ands.w	r3, r0, #1
 80069f4:	d00a      	beq.n	8006a0c <__swsetup_r+0xbc>
 80069f6:	2300      	movs	r3, #0
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	6963      	ldr	r3, [r4, #20]
 80069fc:	425b      	negs	r3, r3
 80069fe:	61a3      	str	r3, [r4, #24]
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	b943      	cbnz	r3, 8006a16 <__swsetup_r+0xc6>
 8006a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a08:	d1ba      	bne.n	8006980 <__swsetup_r+0x30>
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
 8006a0c:	0781      	lsls	r1, r0, #30
 8006a0e:	bf58      	it	pl
 8006a10:	6963      	ldrpl	r3, [r4, #20]
 8006a12:	60a3      	str	r3, [r4, #8]
 8006a14:	e7f4      	b.n	8006a00 <__swsetup_r+0xb0>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e7f7      	b.n	8006a0a <__swsetup_r+0xba>
 8006a1a:	bf00      	nop
 8006a1c:	2000000c 	.word	0x2000000c
 8006a20:	080075e4 	.word	0x080075e4
 8006a24:	08007604 	.word	0x08007604
 8006a28:	080075c4 	.word	0x080075c4

08006a2c <abort>:
 8006a2c:	b508      	push	{r3, lr}
 8006a2e:	2006      	movs	r0, #6
 8006a30:	f000 faa4 	bl	8006f7c <raise>
 8006a34:	2001      	movs	r0, #1
 8006a36:	f7fa fb29 	bl	800108c <_exit>
	...

08006a3c <__sflush_r>:
 8006a3c:	898a      	ldrh	r2, [r1, #12]
 8006a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	4605      	mov	r5, r0
 8006a44:	0710      	lsls	r0, r2, #28
 8006a46:	460c      	mov	r4, r1
 8006a48:	d458      	bmi.n	8006afc <__sflush_r+0xc0>
 8006a4a:	684b      	ldr	r3, [r1, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dc05      	bgt.n	8006a5c <__sflush_r+0x20>
 8006a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dc02      	bgt.n	8006a5c <__sflush_r+0x20>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	d0f9      	beq.n	8006a56 <__sflush_r+0x1a>
 8006a62:	2300      	movs	r3, #0
 8006a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a68:	682f      	ldr	r7, [r5, #0]
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	d032      	beq.n	8006ad4 <__sflush_r+0x98>
 8006a6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	075a      	lsls	r2, r3, #29
 8006a74:	d505      	bpl.n	8006a82 <__sflush_r+0x46>
 8006a76:	6863      	ldr	r3, [r4, #4]
 8006a78:	1ac0      	subs	r0, r0, r3
 8006a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a7c:	b10b      	cbz	r3, 8006a82 <__sflush_r+0x46>
 8006a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a80:	1ac0      	subs	r0, r0, r3
 8006a82:	2300      	movs	r3, #0
 8006a84:	4602      	mov	r2, r0
 8006a86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a88:	6a21      	ldr	r1, [r4, #32]
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b0      	blx	r6
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	d106      	bne.n	8006aa2 <__sflush_r+0x66>
 8006a94:	6829      	ldr	r1, [r5, #0]
 8006a96:	291d      	cmp	r1, #29
 8006a98:	d82c      	bhi.n	8006af4 <__sflush_r+0xb8>
 8006a9a:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <__sflush_r+0x108>)
 8006a9c:	40ca      	lsrs	r2, r1
 8006a9e:	07d6      	lsls	r6, r2, #31
 8006aa0:	d528      	bpl.n	8006af4 <__sflush_r+0xb8>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	6062      	str	r2, [r4, #4]
 8006aa6:	04d9      	lsls	r1, r3, #19
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	d504      	bpl.n	8006ab8 <__sflush_r+0x7c>
 8006aae:	1c42      	adds	r2, r0, #1
 8006ab0:	d101      	bne.n	8006ab6 <__sflush_r+0x7a>
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	b903      	cbnz	r3, 8006ab8 <__sflush_r+0x7c>
 8006ab6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aba:	602f      	str	r7, [r5, #0]
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d0ca      	beq.n	8006a56 <__sflush_r+0x1a>
 8006ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	d002      	beq.n	8006ace <__sflush_r+0x92>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f7ff f829 	bl	8005b20 <_free_r>
 8006ace:	2000      	movs	r0, #0
 8006ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ad2:	e7c1      	b.n	8006a58 <__sflush_r+0x1c>
 8006ad4:	6a21      	ldr	r1, [r4, #32]
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4628      	mov	r0, r5
 8006ada:	47b0      	blx	r6
 8006adc:	1c41      	adds	r1, r0, #1
 8006ade:	d1c7      	bne.n	8006a70 <__sflush_r+0x34>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0c4      	beq.n	8006a70 <__sflush_r+0x34>
 8006ae6:	2b1d      	cmp	r3, #29
 8006ae8:	d001      	beq.n	8006aee <__sflush_r+0xb2>
 8006aea:	2b16      	cmp	r3, #22
 8006aec:	d101      	bne.n	8006af2 <__sflush_r+0xb6>
 8006aee:	602f      	str	r7, [r5, #0]
 8006af0:	e7b1      	b.n	8006a56 <__sflush_r+0x1a>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	e7ad      	b.n	8006a58 <__sflush_r+0x1c>
 8006afc:	690f      	ldr	r7, [r1, #16]
 8006afe:	2f00      	cmp	r7, #0
 8006b00:	d0a9      	beq.n	8006a56 <__sflush_r+0x1a>
 8006b02:	0793      	lsls	r3, r2, #30
 8006b04:	680e      	ldr	r6, [r1, #0]
 8006b06:	bf08      	it	eq
 8006b08:	694b      	ldreq	r3, [r1, #20]
 8006b0a:	600f      	str	r7, [r1, #0]
 8006b0c:	bf18      	it	ne
 8006b0e:	2300      	movne	r3, #0
 8006b10:	eba6 0807 	sub.w	r8, r6, r7
 8006b14:	608b      	str	r3, [r1, #8]
 8006b16:	f1b8 0f00 	cmp.w	r8, #0
 8006b1a:	dd9c      	ble.n	8006a56 <__sflush_r+0x1a>
 8006b1c:	6a21      	ldr	r1, [r4, #32]
 8006b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b20:	4643      	mov	r3, r8
 8006b22:	463a      	mov	r2, r7
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b0      	blx	r6
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	dc06      	bgt.n	8006b3a <__sflush_r+0xfe>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e78e      	b.n	8006a58 <__sflush_r+0x1c>
 8006b3a:	4407      	add	r7, r0
 8006b3c:	eba8 0800 	sub.w	r8, r8, r0
 8006b40:	e7e9      	b.n	8006b16 <__sflush_r+0xda>
 8006b42:	bf00      	nop
 8006b44:	20400001 	.word	0x20400001

08006b48 <_fflush_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	690b      	ldr	r3, [r1, #16]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	b913      	cbnz	r3, 8006b58 <_fflush_r+0x10>
 8006b52:	2500      	movs	r5, #0
 8006b54:	4628      	mov	r0, r5
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	b118      	cbz	r0, 8006b62 <_fflush_r+0x1a>
 8006b5a:	6983      	ldr	r3, [r0, #24]
 8006b5c:	b90b      	cbnz	r3, 8006b62 <_fflush_r+0x1a>
 8006b5e:	f000 f887 	bl	8006c70 <__sinit>
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <_fflush_r+0x6c>)
 8006b64:	429c      	cmp	r4, r3
 8006b66:	d11b      	bne.n	8006ba0 <_fflush_r+0x58>
 8006b68:	686c      	ldr	r4, [r5, #4]
 8006b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0ef      	beq.n	8006b52 <_fflush_r+0xa>
 8006b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b74:	07d0      	lsls	r0, r2, #31
 8006b76:	d404      	bmi.n	8006b82 <_fflush_r+0x3a>
 8006b78:	0599      	lsls	r1, r3, #22
 8006b7a:	d402      	bmi.n	8006b82 <_fflush_r+0x3a>
 8006b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7e:	f000 f915 	bl	8006dac <__retarget_lock_acquire_recursive>
 8006b82:	4628      	mov	r0, r5
 8006b84:	4621      	mov	r1, r4
 8006b86:	f7ff ff59 	bl	8006a3c <__sflush_r>
 8006b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b8c:	07da      	lsls	r2, r3, #31
 8006b8e:	4605      	mov	r5, r0
 8006b90:	d4e0      	bmi.n	8006b54 <_fflush_r+0xc>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	059b      	lsls	r3, r3, #22
 8006b96:	d4dd      	bmi.n	8006b54 <_fflush_r+0xc>
 8006b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9a:	f000 f908 	bl	8006dae <__retarget_lock_release_recursive>
 8006b9e:	e7d9      	b.n	8006b54 <_fflush_r+0xc>
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <_fflush_r+0x70>)
 8006ba2:	429c      	cmp	r4, r3
 8006ba4:	d101      	bne.n	8006baa <_fflush_r+0x62>
 8006ba6:	68ac      	ldr	r4, [r5, #8]
 8006ba8:	e7df      	b.n	8006b6a <_fflush_r+0x22>
 8006baa:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <_fflush_r+0x74>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	bf08      	it	eq
 8006bb0:	68ec      	ldreq	r4, [r5, #12]
 8006bb2:	e7da      	b.n	8006b6a <_fflush_r+0x22>
 8006bb4:	080075e4 	.word	0x080075e4
 8006bb8:	08007604 	.word	0x08007604
 8006bbc:	080075c4 	.word	0x080075c4

08006bc0 <std>:
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bce:	6083      	str	r3, [r0, #8]
 8006bd0:	8181      	strh	r1, [r0, #12]
 8006bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bd4:	81c2      	strh	r2, [r0, #14]
 8006bd6:	6183      	str	r3, [r0, #24]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	2208      	movs	r2, #8
 8006bdc:	305c      	adds	r0, #92	; 0x5c
 8006bde:	f7fe ff97 	bl	8005b10 <memset>
 8006be2:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <std+0x38>)
 8006be4:	6263      	str	r3, [r4, #36]	; 0x24
 8006be6:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <std+0x3c>)
 8006be8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <std+0x40>)
 8006bec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <std+0x44>)
 8006bf0:	6224      	str	r4, [r4, #32]
 8006bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08006fb5 	.word	0x08006fb5
 8006bfc:	08006fd7 	.word	0x08006fd7
 8006c00:	0800700f 	.word	0x0800700f
 8006c04:	08007033 	.word	0x08007033

08006c08 <_cleanup_r>:
 8006c08:	4901      	ldr	r1, [pc, #4]	; (8006c10 <_cleanup_r+0x8>)
 8006c0a:	f000 b8af 	b.w	8006d6c <_fwalk_reent>
 8006c0e:	bf00      	nop
 8006c10:	08006b49 	.word	0x08006b49

08006c14 <__sfmoreglue>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	2268      	movs	r2, #104	; 0x68
 8006c18:	1e4d      	subs	r5, r1, #1
 8006c1a:	4355      	muls	r5, r2
 8006c1c:	460e      	mov	r6, r1
 8006c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c22:	f7fe ffe9 	bl	8005bf8 <_malloc_r>
 8006c26:	4604      	mov	r4, r0
 8006c28:	b140      	cbz	r0, 8006c3c <__sfmoreglue+0x28>
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c30:	300c      	adds	r0, #12
 8006c32:	60a0      	str	r0, [r4, #8]
 8006c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c38:	f7fe ff6a 	bl	8005b10 <memset>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}

08006c40 <__sfp_lock_acquire>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__sfp_lock_acquire+0x8>)
 8006c42:	f000 b8b3 	b.w	8006dac <__retarget_lock_acquire_recursive>
 8006c46:	bf00      	nop
 8006c48:	20000435 	.word	0x20000435

08006c4c <__sfp_lock_release>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__sfp_lock_release+0x8>)
 8006c4e:	f000 b8ae 	b.w	8006dae <__retarget_lock_release_recursive>
 8006c52:	bf00      	nop
 8006c54:	20000435 	.word	0x20000435

08006c58 <__sinit_lock_acquire>:
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <__sinit_lock_acquire+0x8>)
 8006c5a:	f000 b8a7 	b.w	8006dac <__retarget_lock_acquire_recursive>
 8006c5e:	bf00      	nop
 8006c60:	20000436 	.word	0x20000436

08006c64 <__sinit_lock_release>:
 8006c64:	4801      	ldr	r0, [pc, #4]	; (8006c6c <__sinit_lock_release+0x8>)
 8006c66:	f000 b8a2 	b.w	8006dae <__retarget_lock_release_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	20000436 	.word	0x20000436

08006c70 <__sinit>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4604      	mov	r4, r0
 8006c74:	f7ff fff0 	bl	8006c58 <__sinit_lock_acquire>
 8006c78:	69a3      	ldr	r3, [r4, #24]
 8006c7a:	b11b      	cbz	r3, 8006c84 <__sinit+0x14>
 8006c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c80:	f7ff bff0 	b.w	8006c64 <__sinit_lock_release>
 8006c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c88:	6523      	str	r3, [r4, #80]	; 0x50
 8006c8a:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <__sinit+0x68>)
 8006c8c:	4a13      	ldr	r2, [pc, #76]	; (8006cdc <__sinit+0x6c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	bf04      	itt	eq
 8006c96:	2301      	moveq	r3, #1
 8006c98:	61a3      	streq	r3, [r4, #24]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f820 	bl	8006ce0 <__sfp>
 8006ca0:	6060      	str	r0, [r4, #4]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f81c 	bl	8006ce0 <__sfp>
 8006ca8:	60a0      	str	r0, [r4, #8]
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 f818 	bl	8006ce0 <__sfp>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	60e0      	str	r0, [r4, #12]
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	6860      	ldr	r0, [r4, #4]
 8006cb8:	f7ff ff82 	bl	8006bc0 <std>
 8006cbc:	68a0      	ldr	r0, [r4, #8]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	2109      	movs	r1, #9
 8006cc2:	f7ff ff7d 	bl	8006bc0 <std>
 8006cc6:	68e0      	ldr	r0, [r4, #12]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	2112      	movs	r1, #18
 8006ccc:	f7ff ff78 	bl	8006bc0 <std>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	61a3      	str	r3, [r4, #24]
 8006cd4:	e7d2      	b.n	8006c7c <__sinit+0xc>
 8006cd6:	bf00      	nop
 8006cd8:	080074dc 	.word	0x080074dc
 8006cdc:	08006c09 	.word	0x08006c09

08006ce0 <__sfp>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	4607      	mov	r7, r0
 8006ce4:	f7ff ffac 	bl	8006c40 <__sfp_lock_acquire>
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <__sfp+0x84>)
 8006cea:	681e      	ldr	r6, [r3, #0]
 8006cec:	69b3      	ldr	r3, [r6, #24]
 8006cee:	b913      	cbnz	r3, 8006cf6 <__sfp+0x16>
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff ffbd 	bl	8006c70 <__sinit>
 8006cf6:	3648      	adds	r6, #72	; 0x48
 8006cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	d503      	bpl.n	8006d08 <__sfp+0x28>
 8006d00:	6833      	ldr	r3, [r6, #0]
 8006d02:	b30b      	cbz	r3, 8006d48 <__sfp+0x68>
 8006d04:	6836      	ldr	r6, [r6, #0]
 8006d06:	e7f7      	b.n	8006cf8 <__sfp+0x18>
 8006d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d0c:	b9d5      	cbnz	r5, 8006d44 <__sfp+0x64>
 8006d0e:	4b16      	ldr	r3, [pc, #88]	; (8006d68 <__sfp+0x88>)
 8006d10:	60e3      	str	r3, [r4, #12]
 8006d12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d16:	6665      	str	r5, [r4, #100]	; 0x64
 8006d18:	f000 f847 	bl	8006daa <__retarget_lock_init_recursive>
 8006d1c:	f7ff ff96 	bl	8006c4c <__sfp_lock_release>
 8006d20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d28:	6025      	str	r5, [r4, #0]
 8006d2a:	61a5      	str	r5, [r4, #24]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	4629      	mov	r1, r5
 8006d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d34:	f7fe feec 	bl	8005b10 <memset>
 8006d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d40:	4620      	mov	r0, r4
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d44:	3468      	adds	r4, #104	; 0x68
 8006d46:	e7d9      	b.n	8006cfc <__sfp+0x1c>
 8006d48:	2104      	movs	r1, #4
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	f7ff ff62 	bl	8006c14 <__sfmoreglue>
 8006d50:	4604      	mov	r4, r0
 8006d52:	6030      	str	r0, [r6, #0]
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d1d5      	bne.n	8006d04 <__sfp+0x24>
 8006d58:	f7ff ff78 	bl	8006c4c <__sfp_lock_release>
 8006d5c:	230c      	movs	r3, #12
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	e7ee      	b.n	8006d40 <__sfp+0x60>
 8006d62:	bf00      	nop
 8006d64:	080074dc 	.word	0x080074dc
 8006d68:	ffff0001 	.word	0xffff0001

08006d6c <_fwalk_reent>:
 8006d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	4606      	mov	r6, r0
 8006d72:	4688      	mov	r8, r1
 8006d74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d78:	2700      	movs	r7, #0
 8006d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8006d82:	d505      	bpl.n	8006d90 <_fwalk_reent+0x24>
 8006d84:	6824      	ldr	r4, [r4, #0]
 8006d86:	2c00      	cmp	r4, #0
 8006d88:	d1f7      	bne.n	8006d7a <_fwalk_reent+0xe>
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d90:	89ab      	ldrh	r3, [r5, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d907      	bls.n	8006da6 <_fwalk_reent+0x3a>
 8006d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	d003      	beq.n	8006da6 <_fwalk_reent+0x3a>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4630      	mov	r0, r6
 8006da2:	47c0      	blx	r8
 8006da4:	4307      	orrs	r7, r0
 8006da6:	3568      	adds	r5, #104	; 0x68
 8006da8:	e7e9      	b.n	8006d7e <_fwalk_reent+0x12>

08006daa <__retarget_lock_init_recursive>:
 8006daa:	4770      	bx	lr

08006dac <__retarget_lock_acquire_recursive>:
 8006dac:	4770      	bx	lr

08006dae <__retarget_lock_release_recursive>:
 8006dae:	4770      	bx	lr

08006db0 <__swhatbuf_r>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	460e      	mov	r6, r1
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	2900      	cmp	r1, #0
 8006dba:	b096      	sub	sp, #88	; 0x58
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	461d      	mov	r5, r3
 8006dc0:	da08      	bge.n	8006dd4 <__swhatbuf_r+0x24>
 8006dc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	061a      	lsls	r2, r3, #24
 8006dcc:	d410      	bmi.n	8006df0 <__swhatbuf_r+0x40>
 8006dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd2:	e00e      	b.n	8006df2 <__swhatbuf_r+0x42>
 8006dd4:	466a      	mov	r2, sp
 8006dd6:	f000 f953 	bl	8007080 <_fstat_r>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	dbf1      	blt.n	8006dc2 <__swhatbuf_r+0x12>
 8006dde:	9a01      	ldr	r2, [sp, #4]
 8006de0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006de4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006de8:	425a      	negs	r2, r3
 8006dea:	415a      	adcs	r2, r3
 8006dec:	602a      	str	r2, [r5, #0]
 8006dee:	e7ee      	b.n	8006dce <__swhatbuf_r+0x1e>
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	2000      	movs	r0, #0
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	b016      	add	sp, #88	; 0x58
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dfc <__smakebuf_r>:
 8006dfc:	898b      	ldrh	r3, [r1, #12]
 8006dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e00:	079d      	lsls	r5, r3, #30
 8006e02:	4606      	mov	r6, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	d507      	bpl.n	8006e18 <__smakebuf_r+0x1c>
 8006e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	6123      	str	r3, [r4, #16]
 8006e10:	2301      	movs	r3, #1
 8006e12:	6163      	str	r3, [r4, #20]
 8006e14:	b002      	add	sp, #8
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	ab01      	add	r3, sp, #4
 8006e1a:	466a      	mov	r2, sp
 8006e1c:	f7ff ffc8 	bl	8006db0 <__swhatbuf_r>
 8006e20:	9900      	ldr	r1, [sp, #0]
 8006e22:	4605      	mov	r5, r0
 8006e24:	4630      	mov	r0, r6
 8006e26:	f7fe fee7 	bl	8005bf8 <_malloc_r>
 8006e2a:	b948      	cbnz	r0, 8006e40 <__smakebuf_r+0x44>
 8006e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d4ef      	bmi.n	8006e14 <__smakebuf_r+0x18>
 8006e34:	f023 0303 	bic.w	r3, r3, #3
 8006e38:	f043 0302 	orr.w	r3, r3, #2
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	e7e3      	b.n	8006e08 <__smakebuf_r+0xc>
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <__smakebuf_r+0x7c>)
 8006e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	6020      	str	r0, [r4, #0]
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	6120      	str	r0, [r4, #16]
 8006e56:	b15b      	cbz	r3, 8006e70 <__smakebuf_r+0x74>
 8006e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 f921 	bl	80070a4 <_isatty_r>
 8006e62:	b128      	cbz	r0, 8006e70 <__smakebuf_r+0x74>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	89a0      	ldrh	r0, [r4, #12]
 8006e72:	4305      	orrs	r5, r0
 8006e74:	81a5      	strh	r5, [r4, #12]
 8006e76:	e7cd      	b.n	8006e14 <__smakebuf_r+0x18>
 8006e78:	08006c09 	.word	0x08006c09

08006e7c <memcpy>:
 8006e7c:	440a      	add	r2, r1
 8006e7e:	4291      	cmp	r1, r2
 8006e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e84:	d100      	bne.n	8006e88 <memcpy+0xc>
 8006e86:	4770      	bx	lr
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e92:	4291      	cmp	r1, r2
 8006e94:	d1f9      	bne.n	8006e8a <memcpy+0xe>
 8006e96:	bd10      	pop	{r4, pc}

08006e98 <memmove>:
 8006e98:	4288      	cmp	r0, r1
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	eb01 0402 	add.w	r4, r1, r2
 8006ea0:	d902      	bls.n	8006ea8 <memmove+0x10>
 8006ea2:	4284      	cmp	r4, r0
 8006ea4:	4623      	mov	r3, r4
 8006ea6:	d807      	bhi.n	8006eb8 <memmove+0x20>
 8006ea8:	1e43      	subs	r3, r0, #1
 8006eaa:	42a1      	cmp	r1, r4
 8006eac:	d008      	beq.n	8006ec0 <memmove+0x28>
 8006eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eb6:	e7f8      	b.n	8006eaa <memmove+0x12>
 8006eb8:	4402      	add	r2, r0
 8006eba:	4601      	mov	r1, r0
 8006ebc:	428a      	cmp	r2, r1
 8006ebe:	d100      	bne.n	8006ec2 <memmove+0x2a>
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eca:	e7f7      	b.n	8006ebc <memmove+0x24>

08006ecc <_realloc_r>:
 8006ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	460e      	mov	r6, r1
 8006ed6:	b921      	cbnz	r1, 8006ee2 <_realloc_r+0x16>
 8006ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006edc:	4611      	mov	r1, r2
 8006ede:	f7fe be8b 	b.w	8005bf8 <_malloc_r>
 8006ee2:	b92a      	cbnz	r2, 8006ef0 <_realloc_r+0x24>
 8006ee4:	f7fe fe1c 	bl	8005b20 <_free_r>
 8006ee8:	4625      	mov	r5, r4
 8006eea:	4628      	mov	r0, r5
 8006eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef0:	f000 f8fa 	bl	80070e8 <_malloc_usable_size_r>
 8006ef4:	4284      	cmp	r4, r0
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	d802      	bhi.n	8006f00 <_realloc_r+0x34>
 8006efa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006efe:	d812      	bhi.n	8006f26 <_realloc_r+0x5a>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7fe fe78 	bl	8005bf8 <_malloc_r>
 8006f08:	4605      	mov	r5, r0
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0ed      	beq.n	8006eea <_realloc_r+0x1e>
 8006f0e:	42bc      	cmp	r4, r7
 8006f10:	4622      	mov	r2, r4
 8006f12:	4631      	mov	r1, r6
 8006f14:	bf28      	it	cs
 8006f16:	463a      	movcs	r2, r7
 8006f18:	f7ff ffb0 	bl	8006e7c <memcpy>
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7fe fdfe 	bl	8005b20 <_free_r>
 8006f24:	e7e1      	b.n	8006eea <_realloc_r+0x1e>
 8006f26:	4635      	mov	r5, r6
 8006f28:	e7df      	b.n	8006eea <_realloc_r+0x1e>

08006f2a <_raise_r>:
 8006f2a:	291f      	cmp	r1, #31
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4604      	mov	r4, r0
 8006f30:	460d      	mov	r5, r1
 8006f32:	d904      	bls.n	8006f3e <_raise_r+0x14>
 8006f34:	2316      	movs	r3, #22
 8006f36:	6003      	str	r3, [r0, #0]
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f40:	b112      	cbz	r2, 8006f48 <_raise_r+0x1e>
 8006f42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f46:	b94b      	cbnz	r3, 8006f5c <_raise_r+0x32>
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 f831 	bl	8006fb0 <_getpid_r>
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4601      	mov	r1, r0
 8006f52:	4620      	mov	r0, r4
 8006f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f58:	f000 b818 	b.w	8006f8c <_kill_r>
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d00a      	beq.n	8006f76 <_raise_r+0x4c>
 8006f60:	1c59      	adds	r1, r3, #1
 8006f62:	d103      	bne.n	8006f6c <_raise_r+0x42>
 8006f64:	2316      	movs	r3, #22
 8006f66:	6003      	str	r3, [r0, #0]
 8006f68:	2001      	movs	r0, #1
 8006f6a:	e7e7      	b.n	8006f3c <_raise_r+0x12>
 8006f6c:	2400      	movs	r4, #0
 8006f6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f72:	4628      	mov	r0, r5
 8006f74:	4798      	blx	r3
 8006f76:	2000      	movs	r0, #0
 8006f78:	e7e0      	b.n	8006f3c <_raise_r+0x12>
	...

08006f7c <raise>:
 8006f7c:	4b02      	ldr	r3, [pc, #8]	; (8006f88 <raise+0xc>)
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f7ff bfd2 	b.w	8006f2a <_raise_r>
 8006f86:	bf00      	nop
 8006f88:	2000000c 	.word	0x2000000c

08006f8c <_kill_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d07      	ldr	r5, [pc, #28]	; (8006fac <_kill_r+0x20>)
 8006f90:	2300      	movs	r3, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	4608      	mov	r0, r1
 8006f96:	4611      	mov	r1, r2
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	f7fa f867 	bl	800106c <_kill>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	d102      	bne.n	8006fa8 <_kill_r+0x1c>
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	b103      	cbz	r3, 8006fa8 <_kill_r+0x1c>
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	20000430 	.word	0x20000430

08006fb0 <_getpid_r>:
 8006fb0:	f7fa b854 	b.w	800105c <_getpid>

08006fb4 <__sread>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	f000 f89c 	bl	80070f8 <_read_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	bfab      	itete	ge
 8006fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fc8:	181b      	addge	r3, r3, r0
 8006fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fce:	bfac      	ite	ge
 8006fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fd2:	81a3      	strhlt	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__swrite>:
 8006fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	461f      	mov	r7, r3
 8006fdc:	898b      	ldrh	r3, [r1, #12]
 8006fde:	05db      	lsls	r3, r3, #23
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	d505      	bpl.n	8006ff4 <__swrite+0x1e>
 8006fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fec:	2302      	movs	r3, #2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f000 f868 	bl	80070c4 <_lseek_r>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	4632      	mov	r2, r6
 8007002:	463b      	mov	r3, r7
 8007004:	4628      	mov	r0, r5
 8007006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800700a:	f000 b817 	b.w	800703c <_write_r>

0800700e <__sseek>:
 800700e:	b510      	push	{r4, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007016:	f000 f855 	bl	80070c4 <_lseek_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	bf15      	itete	ne
 8007020:	6560      	strne	r0, [r4, #84]	; 0x54
 8007022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800702a:	81a3      	strheq	r3, [r4, #12]
 800702c:	bf18      	it	ne
 800702e:	81a3      	strhne	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__sclose>:
 8007032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007036:	f000 b813 	b.w	8007060 <_close_r>
	...

0800703c <_write_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d07      	ldr	r5, [pc, #28]	; (800705c <_write_r+0x20>)
 8007040:	4604      	mov	r4, r0
 8007042:	4608      	mov	r0, r1
 8007044:	4611      	mov	r1, r2
 8007046:	2200      	movs	r2, #0
 8007048:	602a      	str	r2, [r5, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	f7fa f845 	bl	80010da <_write>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_write_r+0x1e>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_write_r+0x1e>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20000430 	.word	0x20000430

08007060 <_close_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d06      	ldr	r5, [pc, #24]	; (800707c <_close_r+0x1c>)
 8007064:	2300      	movs	r3, #0
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	f7fa f851 	bl	8001112 <_close>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_close_r+0x1a>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_close_r+0x1a>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	20000430 	.word	0x20000430

08007080 <_fstat_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d07      	ldr	r5, [pc, #28]	; (80070a0 <_fstat_r+0x20>)
 8007084:	2300      	movs	r3, #0
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	f7fa f84c 	bl	800112a <_fstat>
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	d102      	bne.n	800709c <_fstat_r+0x1c>
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	b103      	cbz	r3, 800709c <_fstat_r+0x1c>
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	bf00      	nop
 80070a0:	20000430 	.word	0x20000430

080070a4 <_isatty_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d06      	ldr	r5, [pc, #24]	; (80070c0 <_isatty_r+0x1c>)
 80070a8:	2300      	movs	r3, #0
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	602b      	str	r3, [r5, #0]
 80070b0:	f7fa f84b 	bl	800114a <_isatty>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_isatty_r+0x1a>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_isatty_r+0x1a>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20000430 	.word	0x20000430

080070c4 <_lseek_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d07      	ldr	r5, [pc, #28]	; (80070e4 <_lseek_r+0x20>)
 80070c8:	4604      	mov	r4, r0
 80070ca:	4608      	mov	r0, r1
 80070cc:	4611      	mov	r1, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f7fa f844 	bl	8001160 <_lseek>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_lseek_r+0x1e>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_lseek_r+0x1e>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20000430 	.word	0x20000430

080070e8 <_malloc_usable_size_r>:
 80070e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ec:	1f18      	subs	r0, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfbc      	itt	lt
 80070f2:	580b      	ldrlt	r3, [r1, r0]
 80070f4:	18c0      	addlt	r0, r0, r3
 80070f6:	4770      	bx	lr

080070f8 <_read_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4d07      	ldr	r5, [pc, #28]	; (8007118 <_read_r+0x20>)
 80070fc:	4604      	mov	r4, r0
 80070fe:	4608      	mov	r0, r1
 8007100:	4611      	mov	r1, r2
 8007102:	2200      	movs	r2, #0
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f7f9 ffca 	bl	80010a0 <_read>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d102      	bne.n	8007116 <_read_r+0x1e>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	b103      	cbz	r3, 8007116 <_read_r+0x1e>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	20000430 	.word	0x20000430

0800711c <_init>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	bf00      	nop
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr

08007128 <_fini>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

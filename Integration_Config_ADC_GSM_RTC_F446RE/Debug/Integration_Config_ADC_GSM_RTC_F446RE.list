
Integration_Config_ADC_GSM_RTC_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a880  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800aa50  0800aa50  0001aa50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b218  0800b218  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b220  0800b220  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b220  0800b220  0001b220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b224  0800b224  0001b224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  200001e0  0800b408  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800b408  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011470  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cab  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00034330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00035070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260b0  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f2f  00000000  00000000  0005bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d96ac  00000000  00000000  00071c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b2eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac0  00000000  00000000  0014b33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa38 	.word	0x0800aa38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800aa38 	.word	0x0800aa38

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fb04 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f004 fdd4 	bl	8005c0c <SystemClock_Config>
//  MX_UART4_Init();
//  MX_USART1_UART_Init();
//  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
//  MX_GPIO_Init();
    USER_GPIO_Init();
 8001064:	f004 fb40 	bl	80056e8 <USER_GPIO_Init>
    USER_I2C1_Init();
 8001068:	f004 fda2 	bl	8005bb0 <USER_I2C1_Init>
    USER_USART3_UART_Init();
 800106c:	f004 ff58 	bl	8005f20 <USER_USART3_UART_Init>
    user_USART1_UART_Init();
 8001070:	f004 fe3a 	bl	8005ce8 <user_USART1_UART_Init>
    UART4_Init();
 8001074:	f004 fc02 	bl	800587c <UART4_Init>
    USER_ADC1_Init();
 8001078:	f004 fafc 	bl	8005674 <USER_ADC1_Init>

    Gsm_Init();
 800107c:	f004 fc46 	bl	800590c <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  application();
 8001080:	f003 fd02 	bl	8004a88 <application>
 8001084:	e7fc      	b.n	8001080 <main+0x28>

08001086 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108a:	b672      	cpsid	i
}
 800108c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108e:	e7fe      	b.n	800108e <Error_Handler+0x8>

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_MspInit+0x4c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x4c>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ce:	2007      	movs	r0, #7
 80010d0:	f001 f822 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <HAL_ADC_MspInit+0xe4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d15b      	bne.n	80011ba <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_ADC_MspInit+0xe8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4811      	ldr	r0, [pc, #68]	; (80011cc <HAL_ADC_MspInit+0xec>)
 8001186:	f000 fffb 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800118a:	2360      	movs	r3, #96	; 0x60
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0xf0>)
 800119e:	f000 ffef 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	; (80011d4 <HAL_ADC_MspInit+0xf4>)
 80011b6:	f000 ffe3 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3730      	adds	r7, #48	; 0x30
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400

080011d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_I2C_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12c      	bne.n	8001254 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_I2C_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_I2C_MspInit+0x88>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_I2C_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001216:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121c:	2312      	movs	r3, #18
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001228:	2304      	movs	r3, #4
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <HAL_I2C_MspInit+0x8c>)
 8001234:	f000 ffa4 	bl	8002180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_I2C_MspInit+0x88>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_I2C_MspInit+0x88>)
 8001242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_I2C_MspInit+0x88>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40005400 	.word	0x40005400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020400 	.word	0x40020400

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	; 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a5b      	ldr	r2, [pc, #364]	; (80013f4 <HAL_UART_MspInit+0x18c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12c      	bne.n	80012e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a59      	ldr	r2, [pc, #356]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <HAL_UART_MspInit+0x190>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a2:	623b      	str	r3, [r7, #32]
 80012a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <HAL_UART_MspInit+0x190>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_UART_MspInit+0x190>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <HAL_UART_MspInit+0x190>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c2:	2303      	movs	r3, #3
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012d2:	2308      	movs	r3, #8
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	4847      	ldr	r0, [pc, #284]	; (80013fc <HAL_UART_MspInit+0x194>)
 80012de:	f000 ff4f 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012e2:	e082      	b.n	80013ea <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a45      	ldr	r2, [pc, #276]	; (8001400 <HAL_UART_MspInit+0x198>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12d      	bne.n	800134a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_UART_MspInit+0x190>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a40      	ldr	r2, [pc, #256]	; (80013f8 <HAL_UART_MspInit+0x190>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a39      	ldr	r2, [pc, #228]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_UART_MspInit+0x190>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001326:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001338:	2307      	movs	r3, #7
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	482e      	ldr	r0, [pc, #184]	; (80013fc <HAL_UART_MspInit+0x194>)
 8001344:	f000 ff1c 	bl	8002180 <HAL_GPIO_Init>
}
 8001348:	e04f      	b.n	80013ea <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <HAL_UART_MspInit+0x19c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d14a      	bne.n	80013ea <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_UART_MspInit+0x190>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_UART_MspInit+0x190>)
 800135e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <HAL_UART_MspInit+0x190>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <HAL_UART_MspInit+0x190>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_UART_MspInit+0x190>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013a8:	2320      	movs	r3, #32
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b8:	2307      	movs	r3, #7
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <HAL_UART_MspInit+0x1a0>)
 80013c4:	f000 fedc 	bl	8002180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013da:	2307      	movs	r3, #7
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4809      	ldr	r0, [pc, #36]	; (800140c <HAL_UART_MspInit+0x1a4>)
 80013e6:	f000 fecb 	bl	8002180 <HAL_GPIO_Init>
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40004c00 	.word	0x40004c00
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40011000 	.word	0x40011000
 8001404:	40004800 	.word	0x40004800
 8001408:	40020800 	.word	0x40020800
 800140c:	40020400 	.word	0x40020400

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 f956 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return 1;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_kill>:

int _kill(int pid, int sig)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800147e:	f004 fd7d 	bl	8005f7c <__errno>
 8001482:	4603      	mov	r3, r0
 8001484:	2216      	movs	r2, #22
 8001486:	601a      	str	r2, [r3, #0]
  return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_exit>:

void _exit (int status)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ffe7 	bl	8001474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a6:	e7fe      	b.n	80014a6 <_exit+0x12>

080014a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
  }
  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	605a      	str	r2, [r3, #4]
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f004 fce2 	bl	8005f7c <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20020000 	.word	0x20020000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	200002d8 	.word	0x200002d8
 80015ec:	200005c0 	.word	0x200005c0

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f004 fca1 	bl	8005f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fd07 	bl	8001058 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001658:	0800b228 	.word	0x0800b228
  ldr r2, =_sbss
 800165c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001660:	200005bc 	.word	0x200005bc

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 fd41 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fcf8 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd4b 	bl	8002166 <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 fd21 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	20000008 	.word	0x20000008
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008
 8001730:	200002dc 	.word	0x200002dc

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200002dc 	.word	0x200002dc

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008

08001794 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e033      	b.n	8001812 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fc94 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017da:	f023 0302 	bic.w	r3, r3, #2
 80017de:	f043 0202 	orr.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fae8 	bl	8001dbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
 8001802:	e001      	b.n	8001808 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Start+0x1a>
 8001832:	2302      	movs	r3, #2
 8001834:	e0b2      	b.n	800199c <HAL_ADC_Start+0x180>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d018      	beq.n	800187e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800185c:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_ADC_Start+0x18c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_ADC_Start+0x190>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9a      	lsrs	r2, r3, #18
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001870:	e002      	b.n	8001878 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3b01      	subs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f9      	bne.n	8001872 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d17a      	bne.n	8001982 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ca:	d106      	bne.n	80018da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f023 0206 	bic.w	r2, r3, #6
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_ADC_Start+0x194>)
 80018ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d12a      	bne.n	8001958 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <HAL_ADC_Start+0x198>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d015      	beq.n	8001938 <HAL_ADC_Start+0x11c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_ADC_Start+0x19c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d105      	bne.n	8001922 <HAL_ADC_Start+0x106>
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_ADC_Start+0x194>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a25      	ldr	r2, [pc, #148]	; (80019bc <HAL_ADC_Start+0x1a0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d136      	bne.n	800199a <HAL_ADC_Start+0x17e>
 800192c:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_ADC_Start+0x194>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	d130      	bne.n	800199a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d129      	bne.n	800199a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	e020      	b.n	800199a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <HAL_ADC_Start+0x198>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d11b      	bne.n	800199a <HAL_ADC_Start+0x17e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d114      	bne.n	800199a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	e00b      	b.n	800199a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f043 0210 	orr.w	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	20000000 	.word	0x20000000
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	40012300 	.word	0x40012300
 80019b4:	40012000 	.word	0x40012000
 80019b8:	40012100 	.word	0x40012100
 80019bc:	40012200 	.word	0x40012200

080019c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Stop+0x16>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e021      	b.n	8001a1a <HAL_ADC_Stop+0x5a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d113      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a52:	d10b      	bne.n	8001a6c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f043 0220 	orr.w	r2, r3, #32
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e063      	b.n	8001b34 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a6c:	f7ff fe62 	bl	8001734 <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a72:	e021      	b.n	8001ab8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_ADC_PollForConversion+0x6c>
 8001a82:	f7ff fe57 	bl	8001734 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d212      	bcs.n	8001ab8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d00b      	beq.n	8001ab8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f043 0204 	orr.w	r2, r3, #4
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e03d      	b.n	8001b34 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d1d6      	bne.n	8001a74 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0212 	mvn.w	r2, #18
 8001ace:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d123      	bne.n	8001b32 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11f      	bne.n	8001b32 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d111      	bne.n	8001b32 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x1c>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e113      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x244>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d925      	bls.n	8001bd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68d9      	ldr	r1, [r3, #12]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3b1e      	subs	r3, #30
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68d9      	ldr	r1, [r3, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4403      	add	r3, r0
 8001bc2:	3b1e      	subs	r3, #30
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	e022      	b.n	8001c16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	2207      	movs	r2, #7
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6919      	ldr	r1, [r3, #16]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4403      	add	r3, r0
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d824      	bhi.n	8001c68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b05      	subs	r3, #5
 8001c30:	221f      	movs	r2, #31
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b05      	subs	r3, #5
 8001c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
 8001c66:	e04c      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d824      	bhi.n	8001cba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b23      	subs	r3, #35	; 0x23
 8001c82:	221f      	movs	r2, #31
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b23      	subs	r3, #35	; 0x23
 8001cac:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb8:	e023      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b41      	subs	r3, #65	; 0x41
 8001ccc:	221f      	movs	r2, #31
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	400a      	ands	r2, r1
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b41      	subs	r3, #65	; 0x41
 8001cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_ADC_ConfigChannel+0x250>)
 8001d04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_ADC_ConfigChannel+0x254>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d10f      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d8>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b12      	cmp	r3, #18
 8001d16:	d10b      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_ADC_ConfigChannel+0x254>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d12b      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x23a>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_ADC_ConfigChannel+0x258>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d003      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x1f4>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b11      	cmp	r3, #17
 8001d4a:	d122      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <HAL_ADC_ConfigChannel+0x258>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d111      	bne.n	8001d92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_ADC_ConfigChannel+0x25c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_ADC_ConfigChannel+0x260>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9a      	lsrs	r2, r3, #18
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	40012300 	.word	0x40012300
 8001dac:	40012000 	.word	0x40012000
 8001db0:	10000012 	.word	0x10000012
 8001db4:	20000000 	.word	0x20000000
 8001db8:	431bde83 	.word	0x431bde83

08001dbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc4:	4b79      	ldr	r3, [pc, #484]	; (8001fac <ADC_Init+0x1f0>)
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	021a      	lsls	r2, r3, #8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6859      	ldr	r1, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <ADC_Init+0x1f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	e00f      	b.n	8001eba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0202 	bic.w	r2, r2, #2
 8001ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6899      	ldr	r1, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e1b      	ldrb	r3, [r3, #24]
 8001ed4:	005a      	lsls	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01b      	beq.n	8001f20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	3b01      	subs	r3, #1
 8001f14:	035a      	lsls	r2, r3, #13
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	e007      	b.n	8001f30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	051a      	lsls	r2, r3, #20
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6899      	ldr	r1, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f72:	025a      	lsls	r2, r3, #9
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6899      	ldr	r1, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	029a      	lsls	r2, r3, #10
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40012300 	.word	0x40012300
 8001fb0:	0f000001 	.word	0x0f000001

08001fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe6:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	60d3      	str	r3, [r2, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <__NVIC_GetPriorityGrouping+0x18>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	f003 0307 	and.w	r3, r3, #7
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff47 	bl	8001fb4 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff5c 	bl	8001ffc <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffb0 	bl	80020d4 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e165      	b.n	8002468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 8154 	bne.w	8002462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d005      	beq.n	80021d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d130      	bne.n	8002234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0201 	and.w	r2, r3, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b03      	cmp	r3, #3
 800223e:	d017      	beq.n	8002270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d123      	bne.n	80022c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	220f      	movs	r2, #15
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80ae 	beq.w	8002462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_GPIO_Init+0x300>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a5c      	ldr	r2, [pc, #368]	; (8002480 <HAL_GPIO_Init+0x300>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b5a      	ldr	r3, [pc, #360]	; (8002480 <HAL_GPIO_Init+0x300>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002322:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_GPIO_Init+0x304>)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4f      	ldr	r2, [pc, #316]	; (8002488 <HAL_GPIO_Init+0x308>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x21a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_GPIO_Init+0x30c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x216>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <HAL_GPIO_Init+0x310>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x212>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <HAL_GPIO_Init+0x314>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x20e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <HAL_GPIO_Init+0x318>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x20a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4a      	ldr	r2, [pc, #296]	; (800249c <HAL_GPIO_Init+0x31c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x206>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a49      	ldr	r2, [pc, #292]	; (80024a0 <HAL_GPIO_Init+0x320>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x202>
 800237e:	2306      	movs	r3, #6
 8002380:	e00c      	b.n	800239c <HAL_GPIO_Init+0x21c>
 8002382:	2307      	movs	r3, #7
 8002384:	e00a      	b.n	800239c <HAL_GPIO_Init+0x21c>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x21c>
 800238a:	2304      	movs	r3, #4
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x21c>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x21c>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x21c>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x21c>
 800239a:	2300      	movs	r3, #0
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	; (8002484 <HAL_GPIO_Init+0x304>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_GPIO_Init+0x324>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023de:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <HAL_GPIO_Init+0x324>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e4:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <HAL_GPIO_Init+0x324>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_GPIO_Init+0x324>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_GPIO_Init+0x324>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_GPIO_Init+0x324>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_GPIO_Init+0x324>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245c:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <HAL_GPIO_Init+0x324>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	f67f ae96 	bls.w	800219c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3724      	adds	r7, #36	; 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40021400 	.word	0x40021400
 80024a0:	40021800 	.word	0x40021800
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e001      	b.n	80024ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f4:	e003      	b.n	80024fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	041a      	lsls	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e12b      	b.n	8002776 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fe50 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2224      	movs	r2, #36	; 0x24
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800255e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800256e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002570:	f001 f87e 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8002574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a81      	ldr	r2, [pc, #516]	; (8002780 <HAL_I2C_Init+0x274>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d807      	bhi.n	8002590 <HAL_I2C_Init+0x84>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a80      	ldr	r2, [pc, #512]	; (8002784 <HAL_I2C_Init+0x278>)
 8002584:	4293      	cmp	r3, r2
 8002586:	bf94      	ite	ls
 8002588:	2301      	movls	r3, #1
 800258a:	2300      	movhi	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e006      	b.n	800259e <HAL_I2C_Init+0x92>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a7d      	ldr	r2, [pc, #500]	; (8002788 <HAL_I2C_Init+0x27c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	bf94      	ite	ls
 8002598:	2301      	movls	r3, #1
 800259a:	2300      	movhi	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0e7      	b.n	8002776 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a78      	ldr	r2, [pc, #480]	; (800278c <HAL_I2C_Init+0x280>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a6a      	ldr	r2, [pc, #424]	; (8002780 <HAL_I2C_Init+0x274>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d802      	bhi.n	80025e0 <HAL_I2C_Init+0xd4>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	3301      	adds	r3, #1
 80025de:	e009      	b.n	80025f4 <HAL_I2C_Init+0xe8>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	4a69      	ldr	r2, [pc, #420]	; (8002790 <HAL_I2C_Init+0x284>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	3301      	adds	r3, #1
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002606:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	495c      	ldr	r1, [pc, #368]	; (8002780 <HAL_I2C_Init+0x274>)
 8002610:	428b      	cmp	r3, r1
 8002612:	d819      	bhi.n	8002648 <HAL_I2C_Init+0x13c>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e59      	subs	r1, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002622:	1c59      	adds	r1, r3, #1
 8002624:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002628:	400b      	ands	r3, r1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_I2C_Init+0x138>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e59      	subs	r1, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fbb1 f3f3 	udiv	r3, r1, r3
 800263c:	3301      	adds	r3, #1
 800263e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002642:	e051      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 8002644:	2304      	movs	r3, #4
 8002646:	e04f      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d111      	bne.n	8002674 <HAL_I2C_Init+0x168>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e58      	subs	r0, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e012      	b.n	800269a <HAL_I2C_Init+0x18e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1e58      	subs	r0, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	0099      	lsls	r1, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	fbb0 f3f3 	udiv	r3, r0, r3
 800268a:	3301      	adds	r3, #1
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf0c      	ite	eq
 8002694:	2301      	moveq	r3, #1
 8002696:	2300      	movne	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Init+0x196>
 800269e:	2301      	movs	r3, #1
 80026a0:	e022      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10e      	bne.n	80026c8 <HAL_I2C_Init+0x1bc>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e58      	subs	r0, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	440b      	add	r3, r1
 80026b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c6:	e00f      	b.n	80026e8 <HAL_I2C_Init+0x1dc>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	0099      	lsls	r1, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	6809      	ldr	r1, [r1, #0]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6911      	ldr	r1, [r2, #16]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68d2      	ldr	r2, [r2, #12]
 8002722:	4311      	orrs	r1, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	430b      	orrs	r3, r1
 800272a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	000186a0 	.word	0x000186a0
 8002784:	001e847f 	.word	0x001e847f
 8002788:	003d08ff 	.word	0x003d08ff
 800278c:	431bde83 	.word	0x431bde83
 8002790:	10624dd3 	.word	0x10624dd3

08002794 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	4608      	mov	r0, r1
 800279e:	4611      	mov	r1, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	817b      	strh	r3, [r7, #10]
 80027a6:	460b      	mov	r3, r1
 80027a8:	813b      	strh	r3, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ae:	f7fe ffc1 	bl	8001734 <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b20      	cmp	r3, #32
 80027be:	f040 80d9 	bne.w	8002974 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2319      	movs	r3, #25
 80027c8:	2201      	movs	r2, #1
 80027ca:	496d      	ldr	r1, [pc, #436]	; (8002980 <HAL_I2C_Mem_Write+0x1ec>)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fc7f 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
 80027da:	e0cc      	b.n	8002976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Mem_Write+0x56>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0c5      	b.n	8002976 <HAL_I2C_Mem_Write+0x1e2>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d007      	beq.n	8002810 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2221      	movs	r2, #33	; 0x21
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a3a      	ldr	r2, [r7, #32]
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002840:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_I2C_Mem_Write+0x1f0>)
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002852:	88f8      	ldrh	r0, [r7, #6]
 8002854:	893a      	ldrh	r2, [r7, #8]
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	9301      	str	r3, [sp, #4]
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	4603      	mov	r3, r0
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fab6 	bl	8002dd4 <I2C_RequestMemoryWrite>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d052      	beq.n	8002914 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e081      	b.n	8002976 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fd00 	bl	800327c <I2C_WaitOnTXEFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2b04      	cmp	r3, #4
 8002888:	d107      	bne.n	800289a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d11b      	bne.n	8002914 <HAL_I2C_Mem_Write+0x180>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d017      	beq.n	8002914 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1aa      	bne.n	8002872 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fcec 	bl	80032fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2b04      	cmp	r3, #4
 8002932:	d107      	bne.n	8002944 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002942:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e016      	b.n	8002976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
  }
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	00100002 	.word	0x00100002
 8002984:	ffff0000 	.word	0xffff0000

08002988 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	460b      	mov	r3, r1
 800299c:	813b      	strh	r3, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029a2:	f7fe fec7 	bl	8001734 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	f040 8208 	bne.w	8002dc6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2319      	movs	r3, #25
 80029bc:	2201      	movs	r2, #1
 80029be:	497b      	ldr	r1, [pc, #492]	; (8002bac <HAL_I2C_Mem_Read+0x224>)
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fb85 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
 80029ce:	e1fb      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_I2C_Mem_Read+0x56>
 80029da:	2302      	movs	r3, #2
 80029dc:	e1f4      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d007      	beq.n	8002a04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2222      	movs	r2, #34	; 0x22
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2240      	movs	r2, #64	; 0x40
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a5b      	ldr	r2, [pc, #364]	; (8002bb0 <HAL_I2C_Mem_Read+0x228>)
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a46:	88f8      	ldrh	r0, [r7, #6]
 8002a48:	893a      	ldrh	r2, [r7, #8]
 8002a4a:	8979      	ldrh	r1, [r7, #10]
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4603      	mov	r3, r0
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fa52 	bl	8002f00 <I2C_RequestMemoryRead>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1b0      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d113      	bne.n	8002a96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	623b      	str	r3, [r7, #32]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e184      	b.n	8002da0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d11b      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e164      	b.n	8002da0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d11b      	bne.n	8002b16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	e144      	b.n	8002da0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b2c:	e138      	b.n	8002da0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	f200 80f1 	bhi.w	8002d1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d123      	bne.n	8002b88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fc1b 	bl	8003380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e139      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b86:	e10b      	b.n	8002da0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d14e      	bne.n	8002c2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	2200      	movs	r2, #0
 8002b98:	4906      	ldr	r1, [pc, #24]	; (8002bb4 <HAL_I2C_Mem_Read+0x22c>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa98 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e10e      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
 8002baa:	bf00      	nop
 8002bac:	00100002 	.word	0x00100002
 8002bb0:	ffff0000 	.word	0xffff0000
 8002bb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c2c:	e0b8      	b.n	8002da0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	2200      	movs	r2, #0
 8002c36:	4966      	ldr	r1, [pc, #408]	; (8002dd0 <HAL_I2C_Mem_Read+0x448>)
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fa49 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0bf      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2200      	movs	r2, #0
 8002c92:	494f      	ldr	r1, [pc, #316]	; (8002dd0 <HAL_I2C_Mem_Read+0x448>)
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fa1b 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e091      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d18:	e042      	b.n	8002da0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fb2e 	bl	8003380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e04c      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d118      	bne.n	8002da0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f aec2 	bne.w	8002b2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3728      	adds	r7, #40	; 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	00010004 	.word	0x00010004

08002dd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f960 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00d      	beq.n	8002e32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e24:	d103      	bne.n	8002e2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e05f      	b.n	8002ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	6a3a      	ldr	r2, [r7, #32]
 8002e46:	492d      	ldr	r1, [pc, #180]	; (8002efc <I2C_RequestMemoryWrite+0x128>)
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f998 	bl	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e04c      	b.n	8002ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	6a39      	ldr	r1, [r7, #32]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fa02 	bl	800327c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00d      	beq.n	8002e9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d107      	bne.n	8002e96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e02b      	b.n	8002ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	e021      	b.n	8002ef0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eac:	893b      	ldrh	r3, [r7, #8]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f9dc 	bl	800327c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d107      	bne.n	8002ee2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e005      	b.n	8002ef2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee6:	893b      	ldrh	r3, [r7, #8]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	00010002 	.word	0x00010002

08002f00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	4608      	mov	r0, r1
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4603      	mov	r3, r0
 8002f10:	817b      	strh	r3, [r7, #10]
 8002f12:	460b      	mov	r3, r1
 8002f14:	813b      	strh	r3, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f8c2 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f60:	d103      	bne.n	8002f6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0aa      	b.n	80030c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	6a3a      	ldr	r2, [r7, #32]
 8002f82:	4952      	ldr	r1, [pc, #328]	; (80030cc <I2C_RequestMemoryRead+0x1cc>)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f8fa 	bl	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e097      	b.n	80030c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	6a39      	ldr	r1, [r7, #32]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f964 	bl	800327c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d107      	bne.n	8002fd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e076      	b.n	80030c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	611a      	str	r2, [r3, #16]
 8002fe6:	e021      	b.n	800302c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fe8:	893b      	ldrh	r3, [r7, #8]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f93e 	bl	800327c <I2C_WaitOnTXEFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b04      	cmp	r3, #4
 800300c:	d107      	bne.n	800301e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e050      	b.n	80030c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003022:	893b      	ldrh	r3, [r7, #8]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	6a39      	ldr	r1, [r7, #32]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f923 	bl	800327c <I2C_WaitOnTXEFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00d      	beq.n	8003058 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2b04      	cmp	r3, #4
 8003042:	d107      	bne.n	8003054 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e035      	b.n	80030c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003066:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	2200      	movs	r2, #0
 8003070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f82b 	bl	80030d0 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308e:	d103      	bne.n	8003098 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e013      	b.n	80030c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800309c:	897b      	ldrh	r3, [r7, #10]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	6a3a      	ldr	r2, [r7, #32]
 80030b0:	4906      	ldr	r1, [pc, #24]	; (80030cc <I2C_RequestMemoryRead+0x1cc>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f863 	bl	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	00010002 	.word	0x00010002

080030d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e0:	e025      	b.n	800312e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d021      	beq.n	800312e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fb23 	bl	8001734 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e023      	b.n	8003176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10d      	bne.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	e00c      	b.n	800316e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4013      	ands	r3, r2
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	429a      	cmp	r2, r3
 8003172:	d0b6      	beq.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800318c:	e051      	b.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319c:	d123      	bne.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e046      	b.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d021      	beq.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ee:	f7fe faa1 	bl	8001734 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d302      	bcc.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d116      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e020      	b.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d10c      	bne.n	8003256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e00b      	b.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d18d      	bne.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003288:	e02d      	b.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f8ce 	bl	800342c <I2C_IsAcknowledgeFailed>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e02d      	b.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d021      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe fa47 	bl	8001734 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d116      	bne.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e007      	b.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d1ca      	bne.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800330a:	e02d      	b.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f88d 	bl	800342c <I2C_IsAcknowledgeFailed>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e02d      	b.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d021      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003324:	f7fe fa06 	bl	8001734 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	429a      	cmp	r2, r3
 8003332:	d302      	bcc.n	800333a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d1ca      	bne.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800338c:	e042      	b.n	8003414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b10      	cmp	r3, #16
 800339a:	d119      	bne.n	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0210 	mvn.w	r2, #16
 80033a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e029      	b.n	8003424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d0:	f7fe f9b0 	bl	8001734 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d302      	bcc.n	80033e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e007      	b.n	8003424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d1b5      	bne.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d11b      	bne.n	800347c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cc      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d90c      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b8      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	494d      	ldr	r1, [pc, #308]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d044      	beq.n	80035ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d119      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d003      	beq.n	800354a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003546:	2b03      	cmp	r3, #3
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e06f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e067      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f023 0203 	bic.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4934      	ldr	r1, [pc, #208]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800357c:	f7fe f8da 	bl	8001734 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7fe f8d6 	bl	8001734 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e04f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 020c 	and.w	r2, r3, #12
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1eb      	bne.n	8003584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d20c      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e032      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4916      	ldr	r1, [pc, #88]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003612:	f000 f855 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8003616:	4602      	mov	r2, r0
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	490a      	ldr	r1, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	5ccb      	ldrb	r3, [r1, r3]
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe f83a 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00
 8003648:	40023800 	.word	0x40023800
 800364c:	0800acf8 	.word	0x0800acf8
 8003650:	20000000 	.word	0x20000000
 8003654:	20000004 	.word	0x20000004

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_GetHCLKFreq+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000000 	.word	0x20000000

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003674:	f7ff fff0 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	0800ad08 	.word	0x0800ad08

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800369c:	f7ff ffdc 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0b5b      	lsrs	r3, r3, #13
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	0800ad08 	.word	0x0800ad08

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b0ae      	sub	sp, #184	; 0xb8
 80036c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e6:	4bcb      	ldr	r3, [pc, #812]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	f200 8206 	bhi.w	8003b00 <HAL_RCC_GetSysClockFreq+0x440>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003b01 	.word	0x08003b01
 8003704:	08003b01 	.word	0x08003b01
 8003708:	08003b01 	.word	0x08003b01
 800370c:	08003739 	.word	0x08003739
 8003710:	08003b01 	.word	0x08003b01
 8003714:	08003b01 	.word	0x08003b01
 8003718:	08003b01 	.word	0x08003b01
 800371c:	08003741 	.word	0x08003741
 8003720:	08003b01 	.word	0x08003b01
 8003724:	08003b01 	.word	0x08003b01
 8003728:	08003b01 	.word	0x08003b01
 800372c:	08003931 	.word	0x08003931
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4bb9      	ldr	r3, [pc, #740]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8003732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003736:	e1e7      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003738:	4bb8      	ldr	r3, [pc, #736]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x35c>)
 800373a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800373e:	e1e3      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003740:	4bb4      	ldr	r3, [pc, #720]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374c:	4bb1      	ldr	r3, [pc, #708]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d071      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003758:	4bae      	ldr	r3, [pc, #696]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	099b      	lsrs	r3, r3, #6
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003764:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800376c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800377a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800377e:	4622      	mov	r2, r4
 8003780:	462b      	mov	r3, r5
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003790:	0150      	lsls	r0, r2, #5
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4621      	mov	r1, r4
 8003798:	1a51      	subs	r1, r2, r1
 800379a:	6439      	str	r1, [r7, #64]	; 0x40
 800379c:	4629      	mov	r1, r5
 800379e:	eb63 0301 	sbc.w	r3, r3, r1
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037b0:	4649      	mov	r1, r9
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	4641      	mov	r1, r8
 80037b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ba:	4641      	mov	r1, r8
 80037bc:	018a      	lsls	r2, r1, #6
 80037be:	4641      	mov	r1, r8
 80037c0:	1a51      	subs	r1, r2, r1
 80037c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037c4:	4649      	mov	r1, r9
 80037c6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037d8:	4649      	mov	r1, r9
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4641      	mov	r1, r8
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4641      	mov	r1, r8
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4622      	mov	r2, r4
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
 80037f2:	462b      	mov	r3, r5
 80037f4:	460a      	mov	r2, r1
 80037f6:	eb42 0303 	adc.w	r3, r2, r3
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003808:	4629      	mov	r1, r5
 800380a:	024b      	lsls	r3, r1, #9
 800380c:	4621      	mov	r1, r4
 800380e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003812:	4621      	mov	r1, r4
 8003814:	024a      	lsls	r2, r1, #9
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800381e:	2200      	movs	r2, #0
 8003820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003824:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003828:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800382c:	f7fd fa5c 	bl	8000ce8 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800383a:	e067      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003848:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800384c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003854:	67bb      	str	r3, [r7, #120]	; 0x78
 8003856:	2300      	movs	r3, #0
 8003858:	67fb      	str	r3, [r7, #124]	; 0x7c
 800385a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	0159      	lsls	r1, r3, #5
 800386c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003870:	0150      	lsls	r0, r2, #5
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4621      	mov	r1, r4
 8003878:	1a51      	subs	r1, r2, r1
 800387a:	62b9      	str	r1, [r7, #40]	; 0x28
 800387c:	4629      	mov	r1, r5
 800387e:	eb63 0301 	sbc.w	r3, r3, r1
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003890:	4649      	mov	r1, r9
 8003892:	018b      	lsls	r3, r1, #6
 8003894:	4641      	mov	r1, r8
 8003896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389a:	4641      	mov	r1, r8
 800389c:	018a      	lsls	r2, r1, #6
 800389e:	4641      	mov	r1, r8
 80038a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80038a4:	4649      	mov	r1, r9
 80038a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038be:	4692      	mov	sl, r2
 80038c0:	469b      	mov	fp, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	eb1a 0303 	adds.w	r3, sl, r3
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	462b      	mov	r3, r5
 80038cc:	eb4b 0303 	adc.w	r3, fp, r3
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80038de:	4629      	mov	r1, r5
 80038e0:	028b      	lsls	r3, r1, #10
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e8:	4621      	mov	r1, r4
 80038ea:	028a      	lsls	r2, r1, #10
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038f4:	2200      	movs	r2, #0
 80038f6:	673b      	str	r3, [r7, #112]	; 0x70
 80038f8:	677a      	str	r2, [r7, #116]	; 0x74
 80038fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80038fe:	f7fd f9f3 	bl	8000ce8 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4613      	mov	r3, r2
 8003908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	3301      	adds	r3, #1
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800391e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800392e:	e0eb      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003930:	4b38      	ldr	r3, [pc, #224]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393c:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d06b      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	2200      	movs	r2, #0
 8003950:	66bb      	str	r3, [r7, #104]	; 0x68
 8003952:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395a:	663b      	str	r3, [r7, #96]	; 0x60
 800395c:	2300      	movs	r3, #0
 800395e:	667b      	str	r3, [r7, #100]	; 0x64
 8003960:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	f04f 0000 	mov.w	r0, #0
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	0159      	lsls	r1, r3, #5
 8003972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003976:	0150      	lsls	r0, r2, #5
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4621      	mov	r1, r4
 800397e:	1a51      	subs	r1, r2, r1
 8003980:	61b9      	str	r1, [r7, #24]
 8003982:	4629      	mov	r1, r5
 8003984:	eb63 0301 	sbc.w	r3, r3, r1
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003996:	4659      	mov	r1, fp
 8003998:	018b      	lsls	r3, r1, #6
 800399a:	4651      	mov	r1, sl
 800399c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039a0:	4651      	mov	r1, sl
 80039a2:	018a      	lsls	r2, r1, #6
 80039a4:	4651      	mov	r1, sl
 80039a6:	ebb2 0801 	subs.w	r8, r2, r1
 80039aa:	4659      	mov	r1, fp
 80039ac:	eb63 0901 	sbc.w	r9, r3, r1
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c4:	4690      	mov	r8, r2
 80039c6:	4699      	mov	r9, r3
 80039c8:	4623      	mov	r3, r4
 80039ca:	eb18 0303 	adds.w	r3, r8, r3
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	462b      	mov	r3, r5
 80039d2:	eb49 0303 	adc.w	r3, r9, r3
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039e4:	4629      	mov	r1, r5
 80039e6:	024b      	lsls	r3, r1, #9
 80039e8:	4621      	mov	r1, r4
 80039ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039ee:	4621      	mov	r1, r4
 80039f0:	024a      	lsls	r2, r1, #9
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039fa:	2200      	movs	r2, #0
 80039fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80039fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a04:	f7fd f970 	bl	8000ce8 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a12:	e065      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x420>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a20:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	2200      	movs	r2, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a30:	653b      	str	r3, [r7, #80]	; 0x50
 8003a32:	2300      	movs	r3, #0
 8003a34:	657b      	str	r3, [r7, #84]	; 0x54
 8003a36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a3a:	4642      	mov	r2, r8
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	f04f 0000 	mov.w	r0, #0
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	0159      	lsls	r1, r3, #5
 8003a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4c:	0150      	lsls	r0, r2, #5
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4641      	mov	r1, r8
 8003a54:	1a51      	subs	r1, r2, r1
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	4649      	mov	r1, r9
 8003a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	018b      	lsls	r3, r1, #6
 8003a70:	4651      	mov	r1, sl
 8003a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a76:	4651      	mov	r1, sl
 8003a78:	018a      	lsls	r2, r1, #6
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	1a54      	subs	r4, r2, r1
 8003a7e:	4659      	mov	r1, fp
 8003a80:	eb63 0501 	sbc.w	r5, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	00eb      	lsls	r3, r5, #3
 8003a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a92:	00e2      	lsls	r2, r4, #3
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	18e3      	adds	r3, r4, r3
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	eb45 0303 	adc.w	r3, r5, r3
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	028b      	lsls	r3, r1, #10
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003abc:	4621      	mov	r1, r4
 8003abe:	028a      	lsls	r2, r1, #10
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ac8:	2200      	movs	r2, #0
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003acc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ace:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ad2:	f7fd f909 	bl	8000ce8 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4613      	mov	r3, r2
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0f1b      	lsrs	r3, r3, #28
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003afe:	e003      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	37b8      	adds	r7, #184	; 0xb8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400

08003b20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e28d      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8083 	beq.w	8003c46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b40:	4b94      	ldr	r3, [pc, #592]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d019      	beq.n	8003b80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b4c:	4b91      	ldr	r3, [pc, #580]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b58:	4b8e      	ldr	r3, [pc, #568]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d00c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4b8b      	ldr	r3, [pc, #556]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d112      	bne.n	8003b98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05b      	beq.n	8003c44 <HAL_RCC_OscConfig+0x124>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d157      	bne.n	8003c44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e25a      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x90>
 8003ba2:	4b7c      	ldr	r3, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7b      	ldr	r2, [pc, #492]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e01d      	b.n	8003bec <HAL_RCC_OscConfig+0xcc>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xb4>
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a72      	ldr	r2, [pc, #456]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xcc>
 8003bd4:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6e      	ldr	r2, [pc, #440]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6b      	ldr	r2, [pc, #428]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fd9e 	bl	8001734 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fd9a 	bl	8001734 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e21f      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0xdc>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fd8a 	bl	8001734 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd fd86 	bl	8001734 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e20b      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x104>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d06f      	beq.n	8003d32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c52:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c5e:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d105      	bne.n	8003c76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d11c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d116      	bne.n	8003cbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x186>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1d3      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4937      	ldr	r1, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	e03a      	b.n	8003d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCC_OscConfig+0x278>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fd fd33 	bl	8001734 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fd fd2f 	bl	8001734 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1b4      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4925      	ldr	r1, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_RCC_OscConfig+0x278>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fd12 	bl	8001734 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fd fd0e 	bl	8001734 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e193      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d036      	beq.n	8003dac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <HAL_RCC_OscConfig+0x27c>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fd fcf2 	bl	8001734 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fd fcee 	bl	8001734 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e173      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_OscConfig+0x274>)
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x234>
 8003d72:	e01b      	b.n	8003dac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_OscConfig+0x27c>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd fcdb 	bl	8001734 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	e00e      	b.n	8003da0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fd fcd7 	bl	8001734 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d907      	bls.n	8003da0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e15c      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470000 	.word	0x42470000
 8003d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b8a      	ldr	r3, [pc, #552]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ea      	bne.n	8003d82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b83      	ldr	r3, [pc, #524]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b7f      	ldr	r3, [pc, #508]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a7e      	ldr	r2, [pc, #504]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b7c      	ldr	r3, [pc, #496]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b79      	ldr	r3, [pc, #484]	; (8003fd0 <HAL_RCC_OscConfig+0x4b0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b76      	ldr	r3, [pc, #472]	; (8003fd0 <HAL_RCC_OscConfig+0x4b0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a75      	ldr	r2, [pc, #468]	; (8003fd0 <HAL_RCC_OscConfig+0x4b0>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fd fc97 	bl	8001734 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fd fc93 	bl	8001734 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e118      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	4b6c      	ldr	r3, [pc, #432]	; (8003fd0 <HAL_RCC_OscConfig+0x4b0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x31e>
 8003e30:	4b66      	ldr	r3, [pc, #408]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a65      	ldr	r2, [pc, #404]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x358>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x340>
 8003e46:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a60      	ldr	r2, [pc, #384]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	4b5e      	ldr	r3, [pc, #376]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a5d      	ldr	r2, [pc, #372]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0x358>
 8003e60:	4b5a      	ldr	r3, [pc, #360]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a59      	ldr	r2, [pc, #356]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	4b57      	ldr	r3, [pc, #348]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a56      	ldr	r2, [pc, #344]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fd fc58 	bl	8001734 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fd fc54 	bl	8001734 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0d7      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	4b4b      	ldr	r3, [pc, #300]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ee      	beq.n	8003e88 <HAL_RCC_OscConfig+0x368>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fd fc42 	bl	8001734 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fd fc3e 	bl	8001734 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0c1      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	4b40      	ldr	r3, [pc, #256]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ee      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003edc:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	4a3a      	ldr	r2, [pc, #232]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80ad 	beq.w	800404c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef2:	4b36      	ldr	r3, [pc, #216]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d060      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d145      	bne.n	8003f92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b33      	ldr	r3, [pc, #204]	; (8003fd4 <HAL_RCC_OscConfig+0x4b4>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd fc12 	bl	8001734 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd fc0e 	bl	8001734 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e093      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	491b      	ldr	r1, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_RCC_OscConfig+0x4b4>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fd fbe3 	bl	8001734 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f72:	f7fd fbdf 	bl	8001734 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e064      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x452>
 8003f90:	e05c      	b.n	800404c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCC_OscConfig+0x4b4>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd fbcc 	bl	8001734 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd fbc8 	bl	8001734 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e04d      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x480>
 8003fbe:	e045      	b.n	800404c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e040      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40007000 	.word	0x40007000
 8003fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd8:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCC_OscConfig+0x538>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d030      	beq.n	8004048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d129      	bne.n	8004048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d122      	bne.n	8004048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800400e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004010:	4293      	cmp	r3, r2
 8004012:	d119      	bne.n	8004048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d10f      	bne.n	8004048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e03f      	b.n	80040ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd f8f0 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fa7d 	bl	80045a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b08a      	sub	sp, #40	; 0x28
 80040fa:	af02      	add	r7, sp, #8
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	d17c      	bne.n	8004210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_UART_Transmit+0x2c>
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e075      	b.n	8004212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_UART_Transmit+0x3e>
 8004130:	2302      	movs	r3, #2
 8004132:	e06e      	b.n	8004212 <HAL_UART_Transmit+0x11c>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2221      	movs	r2, #33	; 0x21
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800414a:	f7fd faf3 	bl	8001734 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d108      	bne.n	8004178 <HAL_UART_Transmit+0x82>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e003      	b.n	8004180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004188:	e02a      	b.n	80041e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2200      	movs	r2, #0
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f957 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e036      	b.n	8004212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	3302      	adds	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e007      	b.n	80041d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1cf      	bne.n	800418a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2140      	movs	r1, #64	; 0x40
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f927 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e006      	b.n	8004212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b08a      	sub	sp, #40	; 0x28
 800421e:	af02      	add	r7, sp, #8
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b20      	cmp	r3, #32
 8004238:	f040 808c 	bne.w	8004354 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <HAL_UART_Receive+0x2e>
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e084      	b.n	8004356 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_UART_Receive+0x40>
 8004256:	2302      	movs	r3, #2
 8004258:	e07d      	b.n	8004356 <HAL_UART_Receive+0x13c>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2222      	movs	r2, #34	; 0x22
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004276:	f7fd fa5d 	bl	8001734 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	88fa      	ldrh	r2, [r7, #6]
 8004286:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	d108      	bne.n	80042a4 <HAL_UART_Receive+0x8a>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d104      	bne.n	80042a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e003      	b.n	80042ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042b4:	e043      	b.n	800433e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	2120      	movs	r1, #32
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f8c1 	bl	8004448 <UART_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e042      	b.n	8004356 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	3302      	adds	r3, #2
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e01f      	b.n	8004330 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d007      	beq.n	800430a <HAL_UART_Receive+0xf0>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <HAL_UART_Receive+0xfe>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e008      	b.n	800432a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004324:	b2da      	uxtb	r2, r3
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3301      	adds	r3, #1
 800432e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1b6      	bne.n	80042b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b20      	cmp	r3, #32
 8004376:	d130      	bne.n	80043da <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_UART_Transmit_IT+0x26>
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e029      	b.n	80043dc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_UART_Transmit_IT+0x38>
 8004392:	2302      	movs	r3, #2
 8004394:	e022      	b.n	80043dc <HAL_UART_Transmit_IT+0x7e>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2221      	movs	r2, #33	; 0x21
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043d4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d11d      	bne.n	800443e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_UART_Receive_IT+0x26>
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e016      	b.n	8004440 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_UART_Receive_IT+0x38>
 800441c:	2302      	movs	r3, #2
 800441e:	e00f      	b.n	8004440 <HAL_UART_Receive_IT+0x58>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	461a      	mov	r2, r3
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f875 	bl	8004524 <UART_Start_Receive_IT>
 800443a:	4603      	mov	r3, r0
 800443c:	e000      	b.n	8004440 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b090      	sub	sp, #64	; 0x40
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004458:	e050      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d04c      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0x30>
 8004468:	f7fd f964 	bl	8001734 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004474:	429a      	cmp	r2, r3
 8004476:	d241      	bcs.n	80044fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004498:	637a      	str	r2, [r7, #52]	; 0x34
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800449e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e5      	bne.n	8004478 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	613b      	str	r3, [r7, #16]
   return(result);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044cc:	623a      	str	r2, [r7, #32]
 80044ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	69f9      	ldr	r1, [r7, #28]
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e00f      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4013      	ands	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	429a      	cmp	r2, r3
 8004518:	d09f      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3740      	adds	r7, #64	; 0x40
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2222      	movs	r2, #34	; 0x22
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004570:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0220 	orr.w	r2, r2, #32
 8004590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b0c0      	sub	sp, #256	; 0x100
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	68d9      	ldr	r1, [r3, #12]
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	ea40 0301 	orr.w	r3, r0, r1
 80045c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	431a      	orrs	r2, r3
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045f8:	f021 010c 	bic.w	r1, r1, #12
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004606:	430b      	orrs	r3, r1
 8004608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461a:	6999      	ldr	r1, [r3, #24]
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	ea40 0301 	orr.w	r3, r0, r1
 8004626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b8f      	ldr	r3, [pc, #572]	; (800486c <UART_SetConfig+0x2cc>)
 8004630:	429a      	cmp	r2, r3
 8004632:	d005      	beq.n	8004640 <UART_SetConfig+0xa0>
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b8d      	ldr	r3, [pc, #564]	; (8004870 <UART_SetConfig+0x2d0>)
 800463c:	429a      	cmp	r2, r3
 800463e:	d104      	bne.n	800464a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7ff f82a 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8004644:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004648:	e003      	b.n	8004652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800464a:	f7ff f811 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 800464e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465c:	f040 810c 	bne.w	8004878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800466a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800466e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	1891      	adds	r1, r2, r2
 8004678:	65b9      	str	r1, [r7, #88]	; 0x58
 800467a:	415b      	adcs	r3, r3
 800467c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800467e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004682:	4621      	mov	r1, r4
 8004684:	eb12 0801 	adds.w	r8, r2, r1
 8004688:	4629      	mov	r1, r5
 800468a:	eb43 0901 	adc.w	r9, r3, r1
 800468e:	f04f 0200 	mov.w	r2, #0
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800469e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a2:	4690      	mov	r8, r2
 80046a4:	4699      	mov	r9, r3
 80046a6:	4623      	mov	r3, r4
 80046a8:	eb18 0303 	adds.w	r3, r8, r3
 80046ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046b0:	462b      	mov	r3, r5
 80046b2:	eb49 0303 	adc.w	r3, r9, r3
 80046b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046ce:	460b      	mov	r3, r1
 80046d0:	18db      	adds	r3, r3, r3
 80046d2:	653b      	str	r3, [r7, #80]	; 0x50
 80046d4:	4613      	mov	r3, r2
 80046d6:	eb42 0303 	adc.w	r3, r2, r3
 80046da:	657b      	str	r3, [r7, #84]	; 0x54
 80046dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046e4:	f7fc fb00 	bl	8000ce8 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b61      	ldr	r3, [pc, #388]	; (8004874 <UART_SetConfig+0x2d4>)
 80046ee:	fba3 2302 	umull	r2, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	011c      	lsls	r4, r3, #4
 80046f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004700:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004708:	4642      	mov	r2, r8
 800470a:	464b      	mov	r3, r9
 800470c:	1891      	adds	r1, r2, r2
 800470e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004710:	415b      	adcs	r3, r3
 8004712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004718:	4641      	mov	r1, r8
 800471a:	eb12 0a01 	adds.w	sl, r2, r1
 800471e:	4649      	mov	r1, r9
 8004720:	eb43 0b01 	adc.w	fp, r3, r1
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004738:	4692      	mov	sl, r2
 800473a:	469b      	mov	fp, r3
 800473c:	4643      	mov	r3, r8
 800473e:	eb1a 0303 	adds.w	r3, sl, r3
 8004742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004746:	464b      	mov	r3, r9
 8004748:	eb4b 0303 	adc.w	r3, fp, r3
 800474c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800475c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004764:	460b      	mov	r3, r1
 8004766:	18db      	adds	r3, r3, r3
 8004768:	643b      	str	r3, [r7, #64]	; 0x40
 800476a:	4613      	mov	r3, r2
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	647b      	str	r3, [r7, #68]	; 0x44
 8004772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800477a:	f7fc fab5 	bl	8000ce8 <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4611      	mov	r1, r2
 8004784:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <UART_SetConfig+0x2d4>)
 8004786:	fba3 2301 	umull	r2, r3, r3, r1
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2264      	movs	r2, #100	; 0x64
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	1acb      	subs	r3, r1, r3
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800479a:	4b36      	ldr	r3, [pc, #216]	; (8004874 <UART_SetConfig+0x2d4>)
 800479c:	fba3 2302 	umull	r2, r3, r3, r2
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a8:	441c      	add	r4, r3
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047bc:	4642      	mov	r2, r8
 80047be:	464b      	mov	r3, r9
 80047c0:	1891      	adds	r1, r2, r2
 80047c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80047c4:	415b      	adcs	r3, r3
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047cc:	4641      	mov	r1, r8
 80047ce:	1851      	adds	r1, r2, r1
 80047d0:	6339      	str	r1, [r7, #48]	; 0x30
 80047d2:	4649      	mov	r1, r9
 80047d4:	414b      	adcs	r3, r1
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047e4:	4659      	mov	r1, fp
 80047e6:	00cb      	lsls	r3, r1, #3
 80047e8:	4651      	mov	r1, sl
 80047ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ee:	4651      	mov	r1, sl
 80047f0:	00ca      	lsls	r2, r1, #3
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	4642      	mov	r2, r8
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004800:	464b      	mov	r3, r9
 8004802:	460a      	mov	r2, r1
 8004804:	eb42 0303 	adc.w	r3, r2, r3
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004818:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800481c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004820:	460b      	mov	r3, r1
 8004822:	18db      	adds	r3, r3, r3
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
 8004826:	4613      	mov	r3, r2
 8004828:	eb42 0303 	adc.w	r3, r2, r3
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004836:	f7fc fa57 	bl	8000ce8 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <UART_SetConfig+0x2d4>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	; 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	3332      	adds	r3, #50	; 0x32
 8004852:	4a08      	ldr	r2, [pc, #32]	; (8004874 <UART_SetConfig+0x2d4>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 0207 	and.w	r2, r3, #7
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4422      	add	r2, r4
 8004866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004868:	e105      	b.n	8004a76 <UART_SetConfig+0x4d6>
 800486a:	bf00      	nop
 800486c:	40011000 	.word	0x40011000
 8004870:	40011400 	.word	0x40011400
 8004874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487c:	2200      	movs	r2, #0
 800487e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800488a:	4642      	mov	r2, r8
 800488c:	464b      	mov	r3, r9
 800488e:	1891      	adds	r1, r2, r2
 8004890:	6239      	str	r1, [r7, #32]
 8004892:	415b      	adcs	r3, r3
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
 8004896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800489a:	4641      	mov	r1, r8
 800489c:	1854      	adds	r4, r2, r1
 800489e:	4649      	mov	r1, r9
 80048a0:	eb43 0501 	adc.w	r5, r3, r1
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	00eb      	lsls	r3, r5, #3
 80048ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b2:	00e2      	lsls	r2, r4, #3
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
 80048b8:	4643      	mov	r3, r8
 80048ba:	18e3      	adds	r3, r4, r3
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048c0:	464b      	mov	r3, r9
 80048c2:	eb45 0303 	adc.w	r3, r5, r3
 80048c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048e6:	4629      	mov	r1, r5
 80048e8:	008b      	lsls	r3, r1, #2
 80048ea:	4621      	mov	r1, r4
 80048ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f0:	4621      	mov	r1, r4
 80048f2:	008a      	lsls	r2, r1, #2
 80048f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048f8:	f7fc f9f6 	bl	8000ce8 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b60      	ldr	r3, [pc, #384]	; (8004a84 <UART_SetConfig+0x4e4>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	011c      	lsls	r4, r3, #4
 800490a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	61b9      	str	r1, [r7, #24]
 8004924:	415b      	adcs	r3, r3
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492c:	4641      	mov	r1, r8
 800492e:	1851      	adds	r1, r2, r1
 8004930:	6139      	str	r1, [r7, #16]
 8004932:	4649      	mov	r1, r9
 8004934:	414b      	adcs	r3, r1
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004944:	4659      	mov	r1, fp
 8004946:	00cb      	lsls	r3, r1, #3
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494e:	4651      	mov	r1, sl
 8004950:	00ca      	lsls	r2, r1, #3
 8004952:	4610      	mov	r0, r2
 8004954:	4619      	mov	r1, r3
 8004956:	4603      	mov	r3, r0
 8004958:	4642      	mov	r2, r8
 800495a:	189b      	adds	r3, r3, r2
 800495c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004960:	464b      	mov	r3, r9
 8004962:	460a      	mov	r2, r1
 8004964:	eb42 0303 	adc.w	r3, r2, r3
 8004968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	67bb      	str	r3, [r7, #120]	; 0x78
 8004976:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004984:	4649      	mov	r1, r9
 8004986:	008b      	lsls	r3, r1, #2
 8004988:	4641      	mov	r1, r8
 800498a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498e:	4641      	mov	r1, r8
 8004990:	008a      	lsls	r2, r1, #2
 8004992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004996:	f7fc f9a7 	bl	8000ce8 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <UART_SetConfig+0x4e4>)
 80049a0:	fba3 1302 	umull	r1, r3, r3, r2
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	2164      	movs	r1, #100	; 0x64
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	3332      	adds	r3, #50	; 0x32
 80049b2:	4a34      	ldr	r2, [pc, #208]	; (8004a84 <UART_SetConfig+0x4e4>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049be:	441c      	add	r4, r3
 80049c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c4:	2200      	movs	r2, #0
 80049c6:	673b      	str	r3, [r7, #112]	; 0x70
 80049c8:	677a      	str	r2, [r7, #116]	; 0x74
 80049ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049ce:	4642      	mov	r2, r8
 80049d0:	464b      	mov	r3, r9
 80049d2:	1891      	adds	r1, r2, r2
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	415b      	adcs	r3, r3
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049de:	4641      	mov	r1, r8
 80049e0:	1851      	adds	r1, r2, r1
 80049e2:	6039      	str	r1, [r7, #0]
 80049e4:	4649      	mov	r1, r9
 80049e6:	414b      	adcs	r3, r1
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f6:	4659      	mov	r1, fp
 80049f8:	00cb      	lsls	r3, r1, #3
 80049fa:	4651      	mov	r1, sl
 80049fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a00:	4651      	mov	r1, sl
 8004a02:	00ca      	lsls	r2, r1, #3
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a10:	464b      	mov	r3, r9
 8004a12:	460a      	mov	r2, r1
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	663b      	str	r3, [r7, #96]	; 0x60
 8004a24:	667a      	str	r2, [r7, #100]	; 0x64
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a32:	4649      	mov	r1, r9
 8004a34:	008b      	lsls	r3, r1, #2
 8004a36:	4641      	mov	r1, r8
 8004a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	008a      	lsls	r2, r1, #2
 8004a40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a44:	f7fc f950 	bl	8000ce8 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <UART_SetConfig+0x4e4>)
 8004a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	2164      	movs	r1, #100	; 0x64
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	3332      	adds	r3, #50	; 0x32
 8004a60:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <UART_SetConfig+0x4e4>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	f003 020f 	and.w	r2, r3, #15
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4422      	add	r2, r4
 8004a74:	609a      	str	r2, [r3, #8]
}
 8004a76:	bf00      	nop
 8004a78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a82:	bf00      	nop
 8004a84:	51eb851f 	.word	0x51eb851f

08004a88 <application>:
#include "app_config.h"
#include "com_config.h"
struct data d;

void application(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
	Configurator();
 8004a8c:	f000 fa4a 	bl	8004f24 <Configurator>
//	strcpy(d.CH4, "ADC4");
//	strcpy(d.Status1, "GPIO1");
//	strcpy(d.Status2, "GPIO2");
//	strcpy(d.Status3, "GPIO3");
//	strcpy(d.Status4, "GPIO4");
	get_time(&d);
 8004a90:	4806      	ldr	r0, [pc, #24]	; (8004aac <application+0x24>)
 8004a92:	f000 f9f7 	bl	8004e84 <get_time>
    ADC_handler(&d);
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <application+0x24>)
 8004a98:	f000 f830 	bl	8004afc <ADC_handler>
	DataToGsm(&d);
 8004a9c:	4803      	ldr	r0, [pc, #12]	; (8004aac <application+0x24>)
 8004a9e:	f000 f88b 	bl	8004bb8 <DataToGsm>
	terminal(&d);
 8004aa2:	4802      	ldr	r0, [pc, #8]	; (8004aac <application+0x24>)
 8004aa4:	f000 fd9e 	bl	80055e4 <terminal>


}
 8004aa8:	bf00      	nop
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	200002e0 	.word	0x200002e0

08004ab0 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 8004ab4:	f000 fecc 	bl	8005850 <adc_value>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <voltage_cal+0x48>)
 8004abe:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <voltage_cal+0x48>)
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb fd5d 	bl	8000584 <__aeabi_i2d>
 8004aca:	a309      	add	r3, pc, #36	; (adr r3, 8004af0 <voltage_cal+0x40>)
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f7fb fdc2 	bl	8000658 <__aeabi_dmul>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7fc f8b4 	bl	8000c48 <__aeabi_d2f>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	ee07 3a90 	vmov	s15, r3
}
 8004ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	f3af 8000 	nop.w
 8004af0:	e734d9b4 	.word	0xe734d9b4
 8004af4:	3f4a680c 	.word	0x3f4a680c
 8004af8:	2000033c 	.word	0x2000033c

08004afc <ADC_handler>:

void ADC_handler(struct data *d)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <ADC_handler+0xb8>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10f      	bne.n	8004b2c <ADC_handler+0x30>
	{
		ADC_select_CH1();
 8004b0c:	f000 fe22 	bl	8005754 <ADC_select_CH1>
		adc_start();
 8004b10:	f000 fe88 	bl	8005824 <adc_start>
		adc_conversion();
 8004b14:	f000 fe90 	bl	8005838 <adc_conversion>
		d->adc1_value = voltage_cal();
 8004b18:	f7ff ffca 	bl	8004ab0 <voltage_cal>
 8004b1c:	eef0 7a40 	vmov.f32	s15, s0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	edc3 7a02 	vstr	s15, [r3, #8]
		adc_stop();
 8004b26:	f000 fe9f 	bl	8005868 <adc_stop>
 8004b2a:	e000      	b.n	8004b2e <ADC_handler+0x32>
	}
	else
	{
		__NOP();
 8004b2c:	bf00      	nop
	}
	if(adcChnlChecker[1] == 1)
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <ADC_handler+0xb8>)
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10f      	bne.n	8004b56 <ADC_handler+0x5a>
	{
		ADC_select_CH2();
 8004b36:	f000 fe27 	bl	8005788 <ADC_select_CH2>
		adc_start();
 8004b3a:	f000 fe73 	bl	8005824 <adc_start>
		adc_conversion();
 8004b3e:	f000 fe7b 	bl	8005838 <adc_conversion>
		d->adc2_value = voltage_cal();
 8004b42:	f7ff ffb5 	bl	8004ab0 <voltage_cal>
 8004b46:	eef0 7a40 	vmov.f32	s15, s0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	edc3 7a03 	vstr	s15, [r3, #12]
		adc_stop();
 8004b50:	f000 fe8a 	bl	8005868 <adc_stop>
 8004b54:	e000      	b.n	8004b58 <ADC_handler+0x5c>
	}
	else
	{
		__NOP();
 8004b56:	bf00      	nop
	}
	if(adcChnlChecker[2] == 1)
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <ADC_handler+0xb8>)
 8004b5a:	789b      	ldrb	r3, [r3, #2]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d10f      	bne.n	8004b80 <ADC_handler+0x84>
	{
		ADC_select_CH3();
 8004b60:	f000 fe2c 	bl	80057bc <ADC_select_CH3>
		adc_start();
 8004b64:	f000 fe5e 	bl	8005824 <adc_start>
		adc_conversion();
 8004b68:	f000 fe66 	bl	8005838 <adc_conversion>
		d->adc3_value = voltage_cal();
 8004b6c:	f7ff ffa0 	bl	8004ab0 <voltage_cal>
 8004b70:	eef0 7a40 	vmov.f32	s15, s0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	edc3 7a04 	vstr	s15, [r3, #16]
		adc_stop();
 8004b7a:	f000 fe75 	bl	8005868 <adc_stop>
 8004b7e:	e000      	b.n	8004b82 <ADC_handler+0x86>
	}
	else
	{
		__NOP();
 8004b80:	bf00      	nop
	}
	if(adcChnlChecker[3] == 1)
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <ADC_handler+0xb8>)
 8004b84:	78db      	ldrb	r3, [r3, #3]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10f      	bne.n	8004baa <ADC_handler+0xae>
	{
		ADC_select_CH4();
 8004b8a:	f000 fe31 	bl	80057f0 <ADC_select_CH4>
		adc_start();
 8004b8e:	f000 fe49 	bl	8005824 <adc_start>
		adc_conversion();
 8004b92:	f000 fe51 	bl	8005838 <adc_conversion>
		d->adc4_value = voltage_cal();
 8004b96:	f7ff ff8b 	bl	8004ab0 <voltage_cal>
 8004b9a:	eef0 7a40 	vmov.f32	s15, s0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	edc3 7a05 	vstr	s15, [r3, #20]
		adc_stop();
 8004ba4:	f000 fe60 	bl	8005868 <adc_stop>
	{
		__NOP();
	}
//	adc_stop();

}
 8004ba8:	e000      	b.n	8004bac <ADC_handler+0xb0>
		__NOP();
 8004baa:	bf00      	nop
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000410 	.word	0x20000410

08004bb8 <DataToGsm>:
int count=0;

UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af06      	add	r7, sp, #24
 8004bbe:	6078      	str	r0, [r7, #4]
	unsigned char sec=d->seconds;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	73fb      	strb	r3, [r7, #15]
		//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf((char*)buffer_Time,"%02d:%02d:%02d",d->hour,d->minutes,d->seconds);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	789b      	ldrb	r3, [r3, #2]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	785b      	ldrb	r3, [r3, #1]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4957      	ldr	r1, [pc, #348]	; (8004d38 <DataToGsm+0x180>)
 8004bdc:	4857      	ldr	r0, [pc, #348]	; (8004d3c <DataToGsm+0x184>)
 8004bde:	f002 f9b3 	bl	8006f48 <siprintf>
	sprintf((char*)buffer_Date,"%02d/%02d/%02d",d->dayofmonth,d->month,d->year);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	791b      	ldrb	r3, [r3, #4]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	795b      	ldrb	r3, [r3, #5]
 8004bec:	4619      	mov	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	799b      	ldrb	r3, [r3, #6]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4952      	ldr	r1, [pc, #328]	; (8004d40 <DataToGsm+0x188>)
 8004bf8:	4852      	ldr	r0, [pc, #328]	; (8004d44 <DataToGsm+0x18c>)
 8004bfa:	f002 f9a5 	bl	8006f48 <siprintf>

//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf((char*)CH1,"%f",d->adc1_value);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fb fcd0 	bl	80005a8 <__aeabi_f2d>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	494e      	ldr	r1, [pc, #312]	; (8004d48 <DataToGsm+0x190>)
 8004c0e:	484f      	ldr	r0, [pc, #316]	; (8004d4c <DataToGsm+0x194>)
 8004c10:	f002 f99a 	bl	8006f48 <siprintf>
	sprintf((char*)CH2,"%f",d->adc2_value);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fb fcc5 	bl	80005a8 <__aeabi_f2d>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4949      	ldr	r1, [pc, #292]	; (8004d48 <DataToGsm+0x190>)
 8004c24:	484a      	ldr	r0, [pc, #296]	; (8004d50 <DataToGsm+0x198>)
 8004c26:	f002 f98f 	bl	8006f48 <siprintf>
	sprintf((char*)CH3,"%f",d->adc3_value);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fcba 	bl	80005a8 <__aeabi_f2d>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4943      	ldr	r1, [pc, #268]	; (8004d48 <DataToGsm+0x190>)
 8004c3a:	4846      	ldr	r0, [pc, #280]	; (8004d54 <DataToGsm+0x19c>)
 8004c3c:	f002 f984 	bl	8006f48 <siprintf>
	sprintf((char*)CH4,"%f",d->adc4_value);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fb fcaf 	bl	80005a8 <__aeabi_f2d>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	493e      	ldr	r1, [pc, #248]	; (8004d48 <DataToGsm+0x190>)
 8004c50:	4841      	ldr	r0, [pc, #260]	; (8004d58 <DataToGsm+0x1a0>)
 8004c52:	f002 f979 	bl	8006f48 <siprintf>

	if(d->GPIO[0]==1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7e1b      	ldrb	r3, [r3, #24]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <DataToGsm+0xb6>
	{
		strcpy(d->Status1, "High");
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	331d      	adds	r3, #29
 8004c62:	4a3e      	ldr	r2, [pc, #248]	; (8004d5c <DataToGsm+0x1a4>)
 8004c64:	6810      	ldr	r0, [r2, #0]
 8004c66:	6018      	str	r0, [r3, #0]
 8004c68:	7912      	ldrb	r2, [r2, #4]
 8004c6a:	711a      	strb	r2, [r3, #4]
 8004c6c:	e004      	b.n	8004c78 <DataToGsm+0xc0>
	}
	else
	{
		strcpy(d->Status1, "Low");
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	331d      	adds	r3, #29
 8004c72:	4a3b      	ldr	r2, [pc, #236]	; (8004d60 <DataToGsm+0x1a8>)
 8004c74:	6810      	ldr	r0, [r2, #0]
 8004c76:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7e5b      	ldrb	r3, [r3, #25]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d107      	bne.n	8004c90 <DataToGsm+0xd8>
	{
		strcpy(d->Status2, "High");
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3327      	adds	r3, #39	; 0x27
 8004c84:	4a35      	ldr	r2, [pc, #212]	; (8004d5c <DataToGsm+0x1a4>)
 8004c86:	6810      	ldr	r0, [r2, #0]
 8004c88:	6018      	str	r0, [r3, #0]
 8004c8a:	7912      	ldrb	r2, [r2, #4]
 8004c8c:	711a      	strb	r2, [r3, #4]
 8004c8e:	e004      	b.n	8004c9a <DataToGsm+0xe2>
	}
	else
	{
		strcpy(d->Status2, "Low");
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3327      	adds	r3, #39	; 0x27
 8004c94:	4a32      	ldr	r2, [pc, #200]	; (8004d60 <DataToGsm+0x1a8>)
 8004c96:	6810      	ldr	r0, [r2, #0]
 8004c98:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	7e9b      	ldrb	r3, [r3, #26]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d107      	bne.n	8004cb2 <DataToGsm+0xfa>
	{
		strcpy(d->Status3, "High");
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3331      	adds	r3, #49	; 0x31
 8004ca6:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <DataToGsm+0x1a4>)
 8004ca8:	6810      	ldr	r0, [r2, #0]
 8004caa:	6018      	str	r0, [r3, #0]
 8004cac:	7912      	ldrb	r2, [r2, #4]
 8004cae:	711a      	strb	r2, [r3, #4]
 8004cb0:	e004      	b.n	8004cbc <DataToGsm+0x104>
	}
	else
	{
		strcpy(d->Status3, "Low");
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3331      	adds	r3, #49	; 0x31
 8004cb6:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <DataToGsm+0x1a8>)
 8004cb8:	6810      	ldr	r0, [r2, #0]
 8004cba:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7edb      	ldrb	r3, [r3, #27]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d107      	bne.n	8004cd4 <DataToGsm+0x11c>
	{
		strcpy(d->Status4, "High");
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	333b      	adds	r3, #59	; 0x3b
 8004cc8:	4a24      	ldr	r2, [pc, #144]	; (8004d5c <DataToGsm+0x1a4>)
 8004cca:	6810      	ldr	r0, [r2, #0]
 8004ccc:	6018      	str	r0, [r3, #0]
 8004cce:	7912      	ldrb	r2, [r2, #4]
 8004cd0:	711a      	strb	r2, [r3, #4]
 8004cd2:	e004      	b.n	8004cde <DataToGsm+0x126>
	}
	else
	{
		strcpy(d->Status4, "Low");
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	333b      	adds	r3, #59	; 0x3b
 8004cd8:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <DataToGsm+0x1a8>)
 8004cda:	6810      	ldr	r0, [r2, #0]
 8004cdc:	6018      	str	r0, [r3, #0]


//	DataToCloud(buffer_Time,buffer_Date,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);


	if(sec==59)
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b3b      	cmp	r3, #59	; 0x3b
 8004ce2:	d104      	bne.n	8004cee <DataToGsm+0x136>
	{
		count=count+1;
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <DataToGsm+0x1ac>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <DataToGsm+0x1ac>)
 8004cec:	6013      	str	r3, [r2, #0]

	}


	if(count==d->scan_time)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	7f1b      	ldrb	r3, [r3, #28]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <DataToGsm+0x1ac>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d118      	bne.n	8004d2e <DataToGsm+0x176>
	{
		DataToCloud(buffer_Time,buffer_Date,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	331d      	adds	r3, #29
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	3227      	adds	r2, #39	; 0x27
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	3131      	adds	r1, #49	; 0x31
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	303b      	adds	r0, #59	; 0x3b
 8004d0c:	9005      	str	r0, [sp, #20]
 8004d0e:	9104      	str	r1, [sp, #16]
 8004d10:	9203      	str	r2, [sp, #12]
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <DataToGsm+0x1a0>)
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <DataToGsm+0x19c>)
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <DataToGsm+0x198>)
 8004d1e:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <DataToGsm+0x194>)
 8004d20:	4908      	ldr	r1, [pc, #32]	; (8004d44 <DataToGsm+0x18c>)
 8004d22:	4806      	ldr	r0, [pc, #24]	; (8004d3c <DataToGsm+0x184>)
 8004d24:	f000 fe14 	bl	8005950 <DataToCloud>
		count=0;
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <DataToGsm+0x1ac>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
	}

//	count=0;
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	0800aa50 	.word	0x0800aa50
 8004d3c:	20000340 	.word	0x20000340
 8004d40:	0800aa60 	.word	0x0800aa60
 8004d44:	20000350 	.word	0x20000350
 8004d48:	0800aa70 	.word	0x0800aa70
 8004d4c:	20000360 	.word	0x20000360
 8004d50:	2000036c 	.word	0x2000036c
 8004d54:	20000378 	.word	0x20000378
 8004d58:	20000384 	.word	0x20000384
 8004d5c:	0800aa74 	.word	0x0800aa74
 8004d60:	0800aa7c 	.word	0x0800aa7c
 8004d64:	20000390 	.word	0x20000390

08004d68 <dec_bcd>:
#define RTC_add 0xD0

//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <dec_bcd+0x48>)
 8004d74:	fb82 1203 	smull	r1, r2, r2, r3
 8004d78:	1092      	asrs	r2, r2, #2
 8004d7a:	17db      	asrs	r3, r3, #31
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	b2d8      	uxtb	r0, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <dec_bcd+0x48>)
 8004d88:	fb83 1302 	smull	r1, r3, r3, r2
 8004d8c:	1099      	asrs	r1, r3, #2
 8004d8e:	17d3      	asrs	r3, r2, #31
 8004d90:	1ac9      	subs	r1, r1, r3
 8004d92:	460b      	mov	r3, r1
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	1ad1      	subs	r1, r2, r3
 8004d9c:	b2cb      	uxtb	r3, r1
 8004d9e:	4403      	add	r3, r0
 8004da0:	b2db      	uxtb	r3, r3
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	66666667 	.word	0x66666667

08004db4 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	461a      	mov	r2, r3
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	4413      	add	r3, r2
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <set_time>:




void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b089      	sub	sp, #36	; 0x24
 8004de8:	af04      	add	r7, sp, #16
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	71fb      	strb	r3, [r7, #7]
 8004df6:	4603      	mov	r3, r0
 8004df8:	71bb      	strb	r3, [r7, #6]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	717b      	strb	r3, [r7, #5]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ffaf 	bl	8004d68 <dec_bcd>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 8004e0e:	79bb      	ldrb	r3, [r7, #6]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff ffa9 	bl	8004d68 <dec_bcd>
 8004e16:	4603      	mov	r3, r0
 8004e18:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8004e1a:	797b      	ldrb	r3, [r7, #5]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff ffa3 	bl	8004d68 <dec_bcd>
 8004e22:	4603      	mov	r3, r0
 8004e24:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 8004e26:	793b      	ldrb	r3, [r7, #4]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff ff9d 	bl	8004d68 <dec_bcd>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 8004e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ff96 	bl	8004d68 <dec_bcd>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8004e40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ff8f 	bl	8004d68 <dec_bcd>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 8004e4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7ff ff88 	bl	8004d68 <dec_bcd>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	2307      	movs	r3, #7
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2200      	movs	r2, #0
 8004e70:	21d0      	movs	r1, #208	; 0xd0
 8004e72:	4803      	ldr	r0, [pc, #12]	; (8004e80 <set_time+0x9c>)
 8004e74:	f7fd fc8e 	bl	8002794 <HAL_I2C_Mem_Write>
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	200001fc 	.word	0x200001fc

08004e84 <get_time>:



void get_time(struct data *d)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af04      	add	r7, sp, #16
 8004e8a:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	9302      	str	r3, [sp, #8]
 8004e92:	2307      	movs	r3, #7
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	21d0      	movs	r1, #208	; 0xd0
 8004ea2:	481f      	ldr	r0, [pc, #124]	; (8004f20 <get_time+0x9c>)
 8004ea4:	f7fd fd70 	bl	8002988 <HAL_I2C_Mem_Read>
	d->seconds=bcd_dec(get_time[0]);
 8004ea8:	7a3b      	ldrb	r3, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff ff82 	bl	8004db4 <bcd_dec>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	701a      	strb	r2, [r3, #0]
	d->minutes=bcd_dec(get_time[1]);
 8004eb8:	7a7b      	ldrb	r3, [r7, #9]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff ff7a 	bl	8004db4 <bcd_dec>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	705a      	strb	r2, [r3, #1]
	d->hour=bcd_dec(get_time[2]);
 8004ec8:	7abb      	ldrb	r3, [r7, #10]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff72 	bl	8004db4 <bcd_dec>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	709a      	strb	r2, [r3, #2]
	d->dayofweek=bcd_dec(get_time[3]);
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff ff6a 	bl	8004db4 <bcd_dec>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	70da      	strb	r2, [r3, #3]
	d->dayofmonth=bcd_dec(get_time[4]);
 8004ee8:	7b3b      	ldrb	r3, [r7, #12]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ff62 	bl	8004db4 <bcd_dec>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	711a      	strb	r2, [r3, #4]
	d->month=bcd_dec(get_time[5]);
 8004ef8:	7b7b      	ldrb	r3, [r7, #13]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff ff5a 	bl	8004db4 <bcd_dec>
 8004f00:	4603      	mov	r3, r0
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	715a      	strb	r2, [r3, #5]
	d->year=bcd_dec(get_time[6]);
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff ff52 	bl	8004db4 <bcd_dec>
 8004f10:	4603      	mov	r3, r0
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	719a      	strb	r2, [r3, #6]
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	200001fc 	.word	0x200001fc

08004f24 <Configurator>:
uint8_t s[4];
extern struct data d;
uint8_t adcChnlChecker[4];

void Configurator()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	data_receive();
 8004f28:	f000 ffaa 	bl	8005e80 <data_receive>

	if (tx_data[0] != '\0')
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <Configurator+0x48>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <Configurator+0x18>
	{
		flag = 1; // Set flag to indicate data has been received
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <Configurator+0x4c>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <Configurator+0x1e>
	}
	else
	{
		flag=0;
 8004f3c:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <Configurator+0x4c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
	}

	if (flag)
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <Configurator+0x4c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <Configurator+0x32>
	{
		extract_data();
 8004f4a:	f000 f8e3 	bl	8005114 <extract_data>
		pin_config();
 8004f4e:	f000 f925 	bl	800519c <pin_config>
		clear_buffer();
 8004f52:	f000 f811 	bl	8004f78 <clear_buffer>
	}
	reset_output(&d);
 8004f56:	4807      	ldr	r0, [pc, #28]	; (8004f74 <Configurator+0x50>)
 8004f58:	f000 f85c 	bl	8005014 <reset_output>
	set_output(&d);
 8004f5c:	4805      	ldr	r0, [pc, #20]	; (8004f74 <Configurator+0x50>)
 8004f5e:	f000 f817 	bl	8004f90 <set_output>

	//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

	read_pinstatus(&d);
 8004f62:	4804      	ldr	r0, [pc, #16]	; (8004f74 <Configurator+0x50>)
 8004f64:	f000 f898 	bl	8005098 <read_pinstatus>
	// status_transmit();
	//DataTOgsm(d);


}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000398 	.word	0x20000398
 8004f70:	20000408 	.word	0x20000408
 8004f74:	200002e0 	.word	0x200002e0

08004f78 <clear_buffer>:

void clear_buffer()
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4802      	ldr	r0, [pc, #8]	; (8004f8c <clear_buffer+0x14>)
 8004f82:	f001 f835 	bl	8005ff0 <memset>
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000398 	.word	0x20000398

08004f90 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

void set_output(struct data *d)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <set_output+0x78>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d108      	bne.n	8004fb2 <set_output+0x22>
	{
		d->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_SET);
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	2104      	movs	r1, #4
 8004fa4:	4819      	ldr	r0, [pc, #100]	; (800500c <set_output+0x7c>)
 8004fa6:	f000 ff8f 	bl	8005ec8 <write_gpio>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	761a      	strb	r2, [r3, #24]
	}

	if(config[1] == 0)
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <set_output+0x78>)
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <set_output+0x3c>
	{
		d->GPIO[1] = write_gpio(GPIOC,GPIO_PIN_1, PIN_SET);
 8004fba:	2201      	movs	r2, #1
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4814      	ldr	r0, [pc, #80]	; (8005010 <set_output+0x80>)
 8004fc0:	f000 ff82 	bl	8005ec8 <write_gpio>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	765a      	strb	r2, [r3, #25]
	}

	if(config[2] == 0)
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <set_output+0x78>)
 8004fce:	789b      	ldrb	r3, [r3, #2]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d108      	bne.n	8004fe6 <set_output+0x56>
	{
		d->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	2110      	movs	r1, #16
 8004fd8:	480c      	ldr	r0, [pc, #48]	; (800500c <set_output+0x7c>)
 8004fda:	f000 ff75 	bl	8005ec8 <write_gpio>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	769a      	strb	r2, [r3, #26]
	}

	if(config[3] == 0)
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <set_output+0x78>)
 8004fe8:	78db      	ldrb	r3, [r3, #3]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <set_output+0x70>
	{
		d->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8004fee:	2201      	movs	r2, #1
 8004ff0:	2120      	movs	r1, #32
 8004ff2:	4806      	ldr	r0, [pc, #24]	; (800500c <set_output+0x7c>)
 8004ff4:	f000 ff68 	bl	8005ec8 <write_gpio>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	76da      	strb	r2, [r3, #27]
	}
	//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	2000040c 	.word	0x2000040c
 800500c:	40020400 	.word	0x40020400
 8005010:	40020800 	.word	0x40020800

08005014 <reset_output>:

void reset_output(struct data *d1)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <reset_output+0x78>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d108      	bne.n	8005036 <reset_output+0x22>
	{
		d1->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_RESET);
 8005024:	2200      	movs	r2, #0
 8005026:	2104      	movs	r1, #4
 8005028:	4819      	ldr	r0, [pc, #100]	; (8005090 <reset_output+0x7c>)
 800502a:	f000 ff4d 	bl	8005ec8 <write_gpio>
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	761a      	strb	r2, [r3, #24]
	}

	if(config[1] == 0)
 8005036:	4b15      	ldr	r3, [pc, #84]	; (800508c <reset_output+0x78>)
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d108      	bne.n	8005050 <reset_output+0x3c>
	{
		d1->GPIO[1]=write_gpio(GPIOC,GPIO_PIN_1, PIN_RESET);
 800503e:	2200      	movs	r2, #0
 8005040:	2102      	movs	r1, #2
 8005042:	4814      	ldr	r0, [pc, #80]	; (8005094 <reset_output+0x80>)
 8005044:	f000 ff40 	bl	8005ec8 <write_gpio>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	765a      	strb	r2, [r3, #25]
	}

	if(config[2] == 0)
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <reset_output+0x78>)
 8005052:	789b      	ldrb	r3, [r3, #2]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d108      	bne.n	800506a <reset_output+0x56>
	{
		d1->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 8005058:	2200      	movs	r2, #0
 800505a:	2110      	movs	r1, #16
 800505c:	480c      	ldr	r0, [pc, #48]	; (8005090 <reset_output+0x7c>)
 800505e:	f000 ff33 	bl	8005ec8 <write_gpio>
 8005062:	4603      	mov	r3, r0
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	769a      	strb	r2, [r3, #26]
	}

	if(config[3] == 0)
 800506a:	4b08      	ldr	r3, [pc, #32]	; (800508c <reset_output+0x78>)
 800506c:	78db      	ldrb	r3, [r3, #3]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d108      	bne.n	8005084 <reset_output+0x70>
	{
		d1->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8005072:	2200      	movs	r2, #0
 8005074:	2120      	movs	r1, #32
 8005076:	4806      	ldr	r0, [pc, #24]	; (8005090 <reset_output+0x7c>)
 8005078:	f000 ff26 	bl	8005ec8 <write_gpio>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	76da      	strb	r2, [r3, #27]
	}
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	2000040c 	.word	0x2000040c
 8005090:	40020400 	.word	0x40020400
 8005094:	40020800 	.word	0x40020800

08005098 <read_pinstatus>:

void read_pinstatus(struct data *d2)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	if(config[0]==1)
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <read_pinstatus+0x70>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d107      	bne.n	80050b8 <read_pinstatus+0x20>
	{
		d2->GPIO[0]=read_gpio( GPIOB,GPIO_PIN_2);
 80050a8:	2104      	movs	r1, #4
 80050aa:	4818      	ldr	r0, [pc, #96]	; (800510c <read_pinstatus+0x74>)
 80050ac:	f000 fefc 	bl	8005ea8 <read_gpio>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	761a      	strb	r2, [r3, #24]
	}
	if(config[1]==1)
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <read_pinstatus+0x70>)
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <read_pinstatus+0x38>
	{
		d2->GPIO[1]=read_gpio(GPIOC,GPIO_PIN_1);
 80050c0:	2102      	movs	r1, #2
 80050c2:	4813      	ldr	r0, [pc, #76]	; (8005110 <read_pinstatus+0x78>)
 80050c4:	f000 fef0 	bl	8005ea8 <read_gpio>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	765a      	strb	r2, [r3, #25]
	}
	if(config[2]==1)
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <read_pinstatus+0x70>)
 80050d2:	789b      	ldrb	r3, [r3, #2]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d107      	bne.n	80050e8 <read_pinstatus+0x50>
	{
		d2->GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 80050d8:	2110      	movs	r1, #16
 80050da:	480c      	ldr	r0, [pc, #48]	; (800510c <read_pinstatus+0x74>)
 80050dc:	f000 fee4 	bl	8005ea8 <read_gpio>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	769a      	strb	r2, [r3, #26]
	}
	if(config[3]==1)
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <read_pinstatus+0x70>)
 80050ea:	78db      	ldrb	r3, [r3, #3]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <read_pinstatus+0x68>
	{
		d2->GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 80050f0:	2120      	movs	r1, #32
 80050f2:	4806      	ldr	r0, [pc, #24]	; (800510c <read_pinstatus+0x74>)
 80050f4:	f000 fed8 	bl	8005ea8 <read_gpio>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	76da      	strb	r2, [r3, #27]
	}
	//	 return d->GPIO;
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	2000040c 	.word	0x2000040c
 800510c:	40020400 	.word	0x40020400
 8005110:	40020800 	.word	0x40020800

08005114 <extract_data>:


void extract_data()
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 8005118:	4919      	ldr	r1, [pc, #100]	; (8005180 <extract_data+0x6c>)
 800511a:	481a      	ldr	r0, [pc, #104]	; (8005184 <extract_data+0x70>)
 800511c:	f002 fd78 	bl	8007c10 <strtok>
 8005120:	4603      	mov	r3, r0
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <extract_data+0x74>)
 8005124:	6013      	str	r3, [r2, #0]


	if (token != NULL)
 8005126:	4b18      	ldr	r3, [pc, #96]	; (8005188 <extract_data+0x74>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d014      	beq.n	8005158 <extract_data+0x44>
	{
		strncpy(arr1, token, sizeof(arr1) - 1);
 800512e:	4b16      	ldr	r3, [pc, #88]	; (8005188 <extract_data+0x74>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2209      	movs	r2, #9
 8005134:	4619      	mov	r1, r3
 8005136:	4815      	ldr	r0, [pc, #84]	; (800518c <extract_data+0x78>)
 8005138:	f001 ff2e 	bl	8006f98 <strncpy>

		arr1[sizeof(arr1) - 1] = '\0';// Ensure null-termination
 800513c:	4b13      	ldr	r3, [pc, #76]	; (800518c <extract_data+0x78>)
 800513e:	2200      	movs	r2, #0
 8005140:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr1,arr1);
 8005142:	4912      	ldr	r1, [pc, #72]	; (800518c <extract_data+0x78>)
 8005144:	4812      	ldr	r0, [pc, #72]	; (8005190 <extract_data+0x7c>)
 8005146:	f001 ff1f 	bl	8006f88 <strcpy>


		token = strtok(NULL, ",");
 800514a:	490d      	ldr	r1, [pc, #52]	; (8005180 <extract_data+0x6c>)
 800514c:	2000      	movs	r0, #0
 800514e:	f002 fd5f 	bl	8007c10 <strtok>
 8005152:	4603      	mov	r3, r0
 8005154:	4a0c      	ldr	r2, [pc, #48]	; (8005188 <extract_data+0x74>)
 8005156:	6013      	str	r3, [r2, #0]
	}

	// Get the second token and store it in arr2
	if (token != NULL)
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <extract_data+0x74>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <extract_data+0x68>
	{
		strncpy(arr2, token, sizeof(arr2) - 1);
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <extract_data+0x74>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2209      	movs	r2, #9
 8005166:	4619      	mov	r1, r3
 8005168:	480a      	ldr	r0, [pc, #40]	; (8005194 <extract_data+0x80>)
 800516a:	f001 ff15 	bl	8006f98 <strncpy>

		arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <extract_data+0x80>)
 8005170:	2200      	movs	r2, #0
 8005172:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr2,arr2);
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <extract_data+0x80>)
 8005176:	4808      	ldr	r0, [pc, #32]	; (8005198 <extract_data+0x84>)
 8005178:	f001 ff06 	bl	8006f88 <strcpy>

		//token = strtok(NULL, ",");
	}


}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}
 8005180:	0800aa80 	.word	0x0800aa80
 8005184:	20000398 	.word	0x20000398
 8005188:	20000404 	.word	0x20000404
 800518c:	200003ec 	.word	0x200003ec
 8005190:	20000325 	.word	0x20000325
 8005194:	200003f8 	.word	0x200003f8
 8005198:	2000032f 	.word	0x2000032f

0800519c <pin_config>:


void pin_config()
{
 800519c:	b5b0      	push	{r4, r5, r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af04      	add	r7, sp, #16

	if(strcmp(arr1,"B2")==0)
 80051a2:	499f      	ldr	r1, [pc, #636]	; (8005420 <pin_config+0x284>)
 80051a4:	489f      	ldr	r0, [pc, #636]	; (8005424 <pin_config+0x288>)
 80051a6:	f7fb f833 	bl	8000210 <strcmp>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <pin_config+0x1c>
	{
		switch_val=1;
 80051b0:	4b9d      	ldr	r3, [pc, #628]	; (8005428 <pin_config+0x28c>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e04b      	b.n	8005250 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"C1")==0)
 80051b8:	499c      	ldr	r1, [pc, #624]	; (800542c <pin_config+0x290>)
 80051ba:	489a      	ldr	r0, [pc, #616]	; (8005424 <pin_config+0x288>)
 80051bc:	f7fb f828 	bl	8000210 <strcmp>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <pin_config+0x32>
	{
		switch_val=2;
 80051c6:	4b98      	ldr	r3, [pc, #608]	; (8005428 <pin_config+0x28c>)
 80051c8:	2202      	movs	r2, #2
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e040      	b.n	8005250 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"B4")==0)
 80051ce:	4998      	ldr	r1, [pc, #608]	; (8005430 <pin_config+0x294>)
 80051d0:	4894      	ldr	r0, [pc, #592]	; (8005424 <pin_config+0x288>)
 80051d2:	f7fb f81d 	bl	8000210 <strcmp>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <pin_config+0x48>
	{
		switch_val=3;
 80051dc:	4b92      	ldr	r3, [pc, #584]	; (8005428 <pin_config+0x28c>)
 80051de:	2203      	movs	r2, #3
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e035      	b.n	8005250 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"B5")==0)
 80051e4:	4993      	ldr	r1, [pc, #588]	; (8005434 <pin_config+0x298>)
 80051e6:	488f      	ldr	r0, [pc, #572]	; (8005424 <pin_config+0x288>)
 80051e8:	f7fb f812 	bl	8000210 <strcmp>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <pin_config+0x5e>
	{
		switch_val=4;
 80051f2:	4b8d      	ldr	r3, [pc, #564]	; (8005428 <pin_config+0x28c>)
 80051f4:	2204      	movs	r2, #4
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e02a      	b.n	8005250 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"ADC1")==0)
 80051fa:	498f      	ldr	r1, [pc, #572]	; (8005438 <pin_config+0x29c>)
 80051fc:	4889      	ldr	r0, [pc, #548]	; (8005424 <pin_config+0x288>)
 80051fe:	f7fb f807 	bl	8000210 <strcmp>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d103      	bne.n	8005210 <pin_config+0x74>
	{
		switch_val=5;
 8005208:	4b87      	ldr	r3, [pc, #540]	; (8005428 <pin_config+0x28c>)
 800520a:	2205      	movs	r2, #5
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e01f      	b.n	8005250 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"RTC")==0)
 8005210:	498a      	ldr	r1, [pc, #552]	; (800543c <pin_config+0x2a0>)
 8005212:	4884      	ldr	r0, [pc, #528]	; (8005424 <pin_config+0x288>)
 8005214:	f7fa fffc 	bl	8000210 <strcmp>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <pin_config+0x8a>
	{
		switch_val=6;
 800521e:	4b82      	ldr	r3, [pc, #520]	; (8005428 <pin_config+0x28c>)
 8005220:	2206      	movs	r2, #6
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e014      	b.n	8005250 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"DATE")==0)
 8005226:	4986      	ldr	r1, [pc, #536]	; (8005440 <pin_config+0x2a4>)
 8005228:	487e      	ldr	r0, [pc, #504]	; (8005424 <pin_config+0x288>)
 800522a:	f7fa fff1 	bl	8000210 <strcmp>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <pin_config+0xa0>
	{
		switch_val=7;
 8005234:	4b7c      	ldr	r3, [pc, #496]	; (8005428 <pin_config+0x28c>)
 8005236:	2207      	movs	r2, #7
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e009      	b.n	8005250 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"SCANTIME")==0)
 800523c:	4981      	ldr	r1, [pc, #516]	; (8005444 <pin_config+0x2a8>)
 800523e:	4879      	ldr	r0, [pc, #484]	; (8005424 <pin_config+0x288>)
 8005240:	f7fa ffe6 	bl	8000210 <strcmp>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <pin_config+0xb4>
	{
		switch_val=8;
 800524a:	4b77      	ldr	r3, [pc, #476]	; (8005428 <pin_config+0x28c>)
 800524c:	2208      	movs	r2, #8
 800524e:	601a      	str	r2, [r3, #0]
	}


	switch(switch_val)
 8005250:	4b75      	ldr	r3, [pc, #468]	; (8005428 <pin_config+0x28c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3b01      	subs	r3, #1
 8005256:	2b07      	cmp	r3, #7
 8005258:	f200 81b9 	bhi.w	80055ce <pin_config+0x432>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <pin_config+0xc8>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005285 	.word	0x08005285
 8005268:	080052c7 	.word	0x080052c7
 800526c:	08005309 	.word	0x08005309
 8005270:	0800534b 	.word	0x0800534b
 8005274:	0800538d 	.word	0x0800538d
 8005278:	08005479 	.word	0x08005479
 800527c:	08005511 	.word	0x08005511
 8005280:	080055b1 	.word	0x080055b1
	{

	case 1:
		if(strcmp(arr2,"OUTPUT")==0)
 8005284:	4970      	ldr	r1, [pc, #448]	; (8005448 <pin_config+0x2ac>)
 8005286:	4871      	ldr	r0, [pc, #452]	; (800544c <pin_config+0x2b0>)
 8005288:	f7fa ffc2 	bl	8000210 <strcmp>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d108      	bne.n	80052a4 <pin_config+0x108>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,OUTPUT);
 8005292:	2200      	movs	r2, #0
 8005294:	2104      	movs	r1, #4
 8005296:	486e      	ldr	r0, [pc, #440]	; (8005450 <pin_config+0x2b4>)
 8005298:	f000 fd50 	bl	8005d3c <user_GPIO_Init>
			config[0] = 0;
 800529c:	4b6d      	ldr	r3, [pc, #436]	; (8005454 <pin_config+0x2b8>)
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
			config[0] = 1;
		}
		break;
 80052a2:	e18d      	b.n	80055c0 <pin_config+0x424>
		else if(strcmp(arr2,"INPUT")==0)
 80052a4:	496c      	ldr	r1, [pc, #432]	; (8005458 <pin_config+0x2bc>)
 80052a6:	4869      	ldr	r0, [pc, #420]	; (800544c <pin_config+0x2b0>)
 80052a8:	f7fa ffb2 	bl	8000210 <strcmp>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8186 	bne.w	80055c0 <pin_config+0x424>
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
 80052b4:	2201      	movs	r2, #1
 80052b6:	2104      	movs	r1, #4
 80052b8:	4865      	ldr	r0, [pc, #404]	; (8005450 <pin_config+0x2b4>)
 80052ba:	f000 fd3f 	bl	8005d3c <user_GPIO_Init>
			config[0] = 1;
 80052be:	4b65      	ldr	r3, [pc, #404]	; (8005454 <pin_config+0x2b8>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
		break;
 80052c4:	e17c      	b.n	80055c0 <pin_config+0x424>

	case 2:
		if(strcmp(arr2,"OUTPUT")==0)
 80052c6:	4960      	ldr	r1, [pc, #384]	; (8005448 <pin_config+0x2ac>)
 80052c8:	4860      	ldr	r0, [pc, #384]	; (800544c <pin_config+0x2b0>)
 80052ca:	f7fa ffa1 	bl	8000210 <strcmp>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <pin_config+0x14a>
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,OUTPUT);
 80052d4:	2200      	movs	r2, #0
 80052d6:	2102      	movs	r1, #2
 80052d8:	4860      	ldr	r0, [pc, #384]	; (800545c <pin_config+0x2c0>)
 80052da:	f000 fd2f 	bl	8005d3c <user_GPIO_Init>
			config[1]=0;
 80052de:	4b5d      	ldr	r3, [pc, #372]	; (8005454 <pin_config+0x2b8>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	705a      	strb	r2, [r3, #1]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
			config[1]=1;
		}
		break;
 80052e4:	e16e      	b.n	80055c4 <pin_config+0x428>
		else if(strcmp(arr2,"INPUT")==0)
 80052e6:	495c      	ldr	r1, [pc, #368]	; (8005458 <pin_config+0x2bc>)
 80052e8:	4858      	ldr	r0, [pc, #352]	; (800544c <pin_config+0x2b0>)
 80052ea:	f7fa ff91 	bl	8000210 <strcmp>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 8167 	bne.w	80055c4 <pin_config+0x428>
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
 80052f6:	2201      	movs	r2, #1
 80052f8:	2102      	movs	r1, #2
 80052fa:	4858      	ldr	r0, [pc, #352]	; (800545c <pin_config+0x2c0>)
 80052fc:	f000 fd1e 	bl	8005d3c <user_GPIO_Init>
			config[1]=1;
 8005300:	4b54      	ldr	r3, [pc, #336]	; (8005454 <pin_config+0x2b8>)
 8005302:	2201      	movs	r2, #1
 8005304:	705a      	strb	r2, [r3, #1]
		break;
 8005306:	e15d      	b.n	80055c4 <pin_config+0x428>

	case 3:
		if(strcmp(arr2,"OUTPUT")==0)
 8005308:	494f      	ldr	r1, [pc, #316]	; (8005448 <pin_config+0x2ac>)
 800530a:	4850      	ldr	r0, [pc, #320]	; (800544c <pin_config+0x2b0>)
 800530c:	f7fa ff80 	bl	8000210 <strcmp>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <pin_config+0x18c>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8005316:	2200      	movs	r2, #0
 8005318:	2110      	movs	r1, #16
 800531a:	484d      	ldr	r0, [pc, #308]	; (8005450 <pin_config+0x2b4>)
 800531c:	f000 fd0e 	bl	8005d3c <user_GPIO_Init>
			config[2]=0;
 8005320:	4b4c      	ldr	r3, [pc, #304]	; (8005454 <pin_config+0x2b8>)
 8005322:	2200      	movs	r2, #0
 8005324:	709a      	strb	r2, [r3, #2]
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			config[2]=1;
		}

		break;
 8005326:	e14f      	b.n	80055c8 <pin_config+0x42c>
		else if(strcmp(arr2,"INPUT")==0)
 8005328:	494b      	ldr	r1, [pc, #300]	; (8005458 <pin_config+0x2bc>)
 800532a:	4848      	ldr	r0, [pc, #288]	; (800544c <pin_config+0x2b0>)
 800532c:	f7fa ff70 	bl	8000210 <strcmp>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 8148 	bne.w	80055c8 <pin_config+0x42c>
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8005338:	2201      	movs	r2, #1
 800533a:	2110      	movs	r1, #16
 800533c:	4844      	ldr	r0, [pc, #272]	; (8005450 <pin_config+0x2b4>)
 800533e:	f000 fcfd 	bl	8005d3c <user_GPIO_Init>
			config[2]=1;
 8005342:	4b44      	ldr	r3, [pc, #272]	; (8005454 <pin_config+0x2b8>)
 8005344:	2201      	movs	r2, #1
 8005346:	709a      	strb	r2, [r3, #2]
		break;
 8005348:	e13e      	b.n	80055c8 <pin_config+0x42c>

	case 4:
		if(strcmp(arr2,"OUTPUT")==0)
 800534a:	493f      	ldr	r1, [pc, #252]	; (8005448 <pin_config+0x2ac>)
 800534c:	483f      	ldr	r0, [pc, #252]	; (800544c <pin_config+0x2b0>)
 800534e:	f7fa ff5f 	bl	8000210 <strcmp>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <pin_config+0x1ce>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8005358:	2200      	movs	r2, #0
 800535a:	2120      	movs	r1, #32
 800535c:	483c      	ldr	r0, [pc, #240]	; (8005450 <pin_config+0x2b4>)
 800535e:	f000 fced 	bl	8005d3c <user_GPIO_Init>
			config[3]=0;
 8005362:	4b3c      	ldr	r3, [pc, #240]	; (8005454 <pin_config+0x2b8>)
 8005364:	2200      	movs	r2, #0
 8005366:	70da      	strb	r2, [r3, #3]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			config[3]=1;
		}
		break;
 8005368:	e130      	b.n	80055cc <pin_config+0x430>
		else if(strcmp(arr2,"INPUT")==0)
 800536a:	493b      	ldr	r1, [pc, #236]	; (8005458 <pin_config+0x2bc>)
 800536c:	4837      	ldr	r0, [pc, #220]	; (800544c <pin_config+0x2b0>)
 800536e:	f7fa ff4f 	bl	8000210 <strcmp>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 8129 	bne.w	80055cc <pin_config+0x430>
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 800537a:	2201      	movs	r2, #1
 800537c:	2120      	movs	r1, #32
 800537e:	4834      	ldr	r0, [pc, #208]	; (8005450 <pin_config+0x2b4>)
 8005380:	f000 fcdc 	bl	8005d3c <user_GPIO_Init>
			config[3]=1;
 8005384:	4b33      	ldr	r3, [pc, #204]	; (8005454 <pin_config+0x2b8>)
 8005386:	2201      	movs	r2, #1
 8005388:	70da      	strb	r2, [r3, #3]
		break;
 800538a:	e11f      	b.n	80055cc <pin_config+0x430>

	case 5:
		if(strcmp(arr2,"CH1")==0)
 800538c:	4934      	ldr	r1, [pc, #208]	; (8005460 <pin_config+0x2c4>)
 800538e:	482f      	ldr	r0, [pc, #188]	; (800544c <pin_config+0x2b0>)
 8005390:	f7fa ff3e 	bl	8000210 <strcmp>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <pin_config+0x20a>
		{
			ADC_select_CH1();
 800539a:	f000 f9db 	bl	8005754 <ADC_select_CH1>
			adcChnlChecker[0] = 1;
 800539e:	4b31      	ldr	r3, [pc, #196]	; (8005464 <pin_config+0x2c8>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			__NOP();
		}
		break;
 80053a4:	e113      	b.n	80055ce <pin_config+0x432>
		else if(strcmp(arr2,"CH2")==0)
 80053a6:	4930      	ldr	r1, [pc, #192]	; (8005468 <pin_config+0x2cc>)
 80053a8:	4828      	ldr	r0, [pc, #160]	; (800544c <pin_config+0x2b0>)
 80053aa:	f7fa ff31 	bl	8000210 <strcmp>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <pin_config+0x224>
			ADC_select_CH2();
 80053b4:	f000 f9e8 	bl	8005788 <ADC_select_CH2>
			adcChnlChecker[1] = 1;
 80053b8:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <pin_config+0x2c8>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	705a      	strb	r2, [r3, #1]
		break;
 80053be:	e106      	b.n	80055ce <pin_config+0x432>
		else if(strcmp(arr2,"CH3")==0)
 80053c0:	492a      	ldr	r1, [pc, #168]	; (800546c <pin_config+0x2d0>)
 80053c2:	4822      	ldr	r0, [pc, #136]	; (800544c <pin_config+0x2b0>)
 80053c4:	f7fa ff24 	bl	8000210 <strcmp>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d105      	bne.n	80053da <pin_config+0x23e>
			ADC_select_CH3();
 80053ce:	f000 f9f5 	bl	80057bc <ADC_select_CH3>
			adcChnlChecker[2] = 1;
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <pin_config+0x2c8>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	709a      	strb	r2, [r3, #2]
		break;
 80053d8:	e0f9      	b.n	80055ce <pin_config+0x432>
		else if(strcmp(arr2,"CH4")==0)
 80053da:	4925      	ldr	r1, [pc, #148]	; (8005470 <pin_config+0x2d4>)
 80053dc:	481b      	ldr	r0, [pc, #108]	; (800544c <pin_config+0x2b0>)
 80053de:	f7fa ff17 	bl	8000210 <strcmp>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <pin_config+0x258>
			ADC_select_CH4();
 80053e8:	f000 fa02 	bl	80057f0 <ADC_select_CH4>
			adcChnlChecker[3] = 1;
 80053ec:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <pin_config+0x2c8>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	70da      	strb	r2, [r3, #3]
		break;
 80053f2:	e0ec      	b.n	80055ce <pin_config+0x432>
		else if(strcmp(arr2,"DB2")==0)
 80053f4:	491f      	ldr	r1, [pc, #124]	; (8005474 <pin_config+0x2d8>)
 80053f6:	4815      	ldr	r0, [pc, #84]	; (800544c <pin_config+0x2b0>)
 80053f8:	f7fa ff0a 	bl	8000210 <strcmp>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10c      	bne.n	800541c <pin_config+0x280>
			adcChnlChecker[0] = 0;
 8005402:	4b18      	ldr	r3, [pc, #96]	; (8005464 <pin_config+0x2c8>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
			adcChnlChecker[1] = 0;
 8005408:	4b16      	ldr	r3, [pc, #88]	; (8005464 <pin_config+0x2c8>)
 800540a:	2200      	movs	r2, #0
 800540c:	705a      	strb	r2, [r3, #1]
			adcChnlChecker[2] = 0;
 800540e:	4b15      	ldr	r3, [pc, #84]	; (8005464 <pin_config+0x2c8>)
 8005410:	2200      	movs	r2, #0
 8005412:	709a      	strb	r2, [r3, #2]
			adcChnlChecker[3] = 0;
 8005414:	4b13      	ldr	r3, [pc, #76]	; (8005464 <pin_config+0x2c8>)
 8005416:	2200      	movs	r2, #0
 8005418:	70da      	strb	r2, [r3, #3]
		break;
 800541a:	e0d8      	b.n	80055ce <pin_config+0x432>
			__NOP();
 800541c:	bf00      	nop
		break;
 800541e:	e0d6      	b.n	80055ce <pin_config+0x432>
 8005420:	0800aa84 	.word	0x0800aa84
 8005424:	200003ec 	.word	0x200003ec
 8005428:	20000394 	.word	0x20000394
 800542c:	0800aa88 	.word	0x0800aa88
 8005430:	0800aa8c 	.word	0x0800aa8c
 8005434:	0800aa90 	.word	0x0800aa90
 8005438:	0800aa94 	.word	0x0800aa94
 800543c:	0800aa9c 	.word	0x0800aa9c
 8005440:	0800aaa0 	.word	0x0800aaa0
 8005444:	0800aaa8 	.word	0x0800aaa8
 8005448:	0800aab4 	.word	0x0800aab4
 800544c:	200003f8 	.word	0x200003f8
 8005450:	40020400 	.word	0x40020400
 8005454:	2000040c 	.word	0x2000040c
 8005458:	0800aabc 	.word	0x0800aabc
 800545c:	40020800 	.word	0x40020800
 8005460:	0800aac4 	.word	0x0800aac4
 8005464:	20000410 	.word	0x20000410
 8005468:	0800aac8 	.word	0x0800aac8
 800546c:	0800aacc 	.word	0x0800aacc
 8005470:	0800aad0 	.word	0x0800aad0
 8005474:	0800aad4 	.word	0x0800aad4

	case 6:

		token = strtok(arr2, ":");
 8005478:	4956      	ldr	r1, [pc, #344]	; (80055d4 <pin_config+0x438>)
 800547a:	4857      	ldr	r0, [pc, #348]	; (80055d8 <pin_config+0x43c>)
 800547c:	f002 fbc8 	bl	8007c10 <strtok>
 8005480:	4603      	mov	r3, r0
 8005482:	4a56      	ldr	r2, [pc, #344]	; (80055dc <pin_config+0x440>)
 8005484:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8005486:	4b55      	ldr	r3, [pc, #340]	; (80055dc <pin_config+0x440>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00f      	beq.n	80054ae <pin_config+0x312>
		{
			d.hour = atoi(token);
 800548e:	4b53      	ldr	r3, [pc, #332]	; (80055dc <pin_config+0x440>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fd6e 	bl	8005f74 <atoi>
 8005498:	4603      	mov	r3, r0
 800549a:	b2da      	uxtb	r2, r3
 800549c:	4b50      	ldr	r3, [pc, #320]	; (80055e0 <pin_config+0x444>)
 800549e:	709a      	strb	r2, [r3, #2]
			token = strtok(NULL, ":");
 80054a0:	494c      	ldr	r1, [pc, #304]	; (80055d4 <pin_config+0x438>)
 80054a2:	2000      	movs	r0, #0
 80054a4:	f002 fbb4 	bl	8007c10 <strtok>
 80054a8:	4603      	mov	r3, r0
 80054aa:	4a4c      	ldr	r2, [pc, #304]	; (80055dc <pin_config+0x440>)
 80054ac:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 80054ae:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <pin_config+0x440>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00f      	beq.n	80054d6 <pin_config+0x33a>
		{
			d.minutes = atoi(token);
 80054b6:	4b49      	ldr	r3, [pc, #292]	; (80055dc <pin_config+0x440>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fd5a 	bl	8005f74 <atoi>
 80054c0:	4603      	mov	r3, r0
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <pin_config+0x444>)
 80054c6:	705a      	strb	r2, [r3, #1]
			token = strtok(NULL, ":");
 80054c8:	4942      	ldr	r1, [pc, #264]	; (80055d4 <pin_config+0x438>)
 80054ca:	2000      	movs	r0, #0
 80054cc:	f002 fba0 	bl	8007c10 <strtok>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4a42      	ldr	r2, [pc, #264]	; (80055dc <pin_config+0x440>)
 80054d4:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 80054d6:	4b41      	ldr	r3, [pc, #260]	; (80055dc <pin_config+0x440>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <pin_config+0x354>
		{
			d.seconds = atoi(token);
 80054de:	4b3f      	ldr	r3, [pc, #252]	; (80055dc <pin_config+0x440>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fd46 	bl	8005f74 <atoi>
 80054e8:	4603      	mov	r3, r0
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	4b3c      	ldr	r3, [pc, #240]	; (80055e0 <pin_config+0x444>)
 80054ee:	701a      	strb	r2, [r3, #0]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,0,0,0);
 80054f0:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <pin_config+0x444>)
 80054f2:	7818      	ldrb	r0, [r3, #0]
 80054f4:	4b3a      	ldr	r3, [pc, #232]	; (80055e0 <pin_config+0x444>)
 80054f6:	7859      	ldrb	r1, [r3, #1]
 80054f8:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <pin_config+0x444>)
 80054fa:	789a      	ldrb	r2, [r3, #2]
 80054fc:	2300      	movs	r3, #0
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	2300      	movs	r3, #0
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	2300      	movs	r3, #0
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2301      	movs	r3, #1
 800550a:	f7ff fc6b 	bl	8004de4 <set_time>

		break;
 800550e:	e05e      	b.n	80055ce <pin_config+0x432>

	case 7:

		token = strtok(arr2, ":");
 8005510:	4930      	ldr	r1, [pc, #192]	; (80055d4 <pin_config+0x438>)
 8005512:	4831      	ldr	r0, [pc, #196]	; (80055d8 <pin_config+0x43c>)
 8005514:	f002 fb7c 	bl	8007c10 <strtok>
 8005518:	4603      	mov	r3, r0
 800551a:	4a30      	ldr	r2, [pc, #192]	; (80055dc <pin_config+0x440>)
 800551c:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 800551e:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <pin_config+0x440>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00f      	beq.n	8005546 <pin_config+0x3aa>
		{
			d.dayofmonth = atoi(token);
 8005526:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <pin_config+0x440>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fd22 	bl	8005f74 <atoi>
 8005530:	4603      	mov	r3, r0
 8005532:	b2da      	uxtb	r2, r3
 8005534:	4b2a      	ldr	r3, [pc, #168]	; (80055e0 <pin_config+0x444>)
 8005536:	711a      	strb	r2, [r3, #4]
			token = strtok(NULL, ":");
 8005538:	4926      	ldr	r1, [pc, #152]	; (80055d4 <pin_config+0x438>)
 800553a:	2000      	movs	r0, #0
 800553c:	f002 fb68 	bl	8007c10 <strtok>
 8005540:	4603      	mov	r3, r0
 8005542:	4a26      	ldr	r2, [pc, #152]	; (80055dc <pin_config+0x440>)
 8005544:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8005546:	4b25      	ldr	r3, [pc, #148]	; (80055dc <pin_config+0x440>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00f      	beq.n	800556e <pin_config+0x3d2>
		{
			d.month = atoi(token);
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <pin_config+0x440>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fd0e 	bl	8005f74 <atoi>
 8005558:	4603      	mov	r3, r0
 800555a:	b2da      	uxtb	r2, r3
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <pin_config+0x444>)
 800555e:	715a      	strb	r2, [r3, #5]
			token = strtok(NULL, ":");
 8005560:	491c      	ldr	r1, [pc, #112]	; (80055d4 <pin_config+0x438>)
 8005562:	2000      	movs	r0, #0
 8005564:	f002 fb54 	bl	8007c10 <strtok>
 8005568:	4603      	mov	r3, r0
 800556a:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <pin_config+0x440>)
 800556c:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 800556e:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <pin_config+0x440>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <pin_config+0x3ec>
		{
			d.year = atoi(token);
 8005576:	4b19      	ldr	r3, [pc, #100]	; (80055dc <pin_config+0x440>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fcfa 	bl	8005f74 <atoi>
 8005580:	4603      	mov	r3, r0
 8005582:	b2da      	uxtb	r2, r3
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <pin_config+0x444>)
 8005586:	719a      	strb	r2, [r3, #6]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,d.dayofmonth,d.month,d.year);
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <pin_config+0x444>)
 800558a:	7818      	ldrb	r0, [r3, #0]
 800558c:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <pin_config+0x444>)
 800558e:	785c      	ldrb	r4, [r3, #1]
 8005590:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <pin_config+0x444>)
 8005592:	789d      	ldrb	r5, [r3, #2]
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <pin_config+0x444>)
 8005596:	791b      	ldrb	r3, [r3, #4]
 8005598:	4a11      	ldr	r2, [pc, #68]	; (80055e0 <pin_config+0x444>)
 800559a:	7952      	ldrb	r2, [r2, #5]
 800559c:	4910      	ldr	r1, [pc, #64]	; (80055e0 <pin_config+0x444>)
 800559e:	7989      	ldrb	r1, [r1, #6]
 80055a0:	9102      	str	r1, [sp, #8]
 80055a2:	9201      	str	r2, [sp, #4]
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	2301      	movs	r3, #1
 80055a8:	462a      	mov	r2, r5
 80055aa:	4621      	mov	r1, r4
 80055ac:	f7ff fc1a 	bl	8004de4 <set_time>


	case 8:
		d.scan_time = (uint8_t)atoi(arr2);
 80055b0:	4809      	ldr	r0, [pc, #36]	; (80055d8 <pin_config+0x43c>)
 80055b2:	f000 fcdf 	bl	8005f74 <atoi>
 80055b6:	4603      	mov	r3, r0
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <pin_config+0x444>)
 80055bc:	771a      	strb	r2, [r3, #28]
		break;
 80055be:	e006      	b.n	80055ce <pin_config+0x432>
		break;
 80055c0:	bf00      	nop
 80055c2:	e004      	b.n	80055ce <pin_config+0x432>
		break;
 80055c4:	bf00      	nop
 80055c6:	e002      	b.n	80055ce <pin_config+0x432>
		break;
 80055c8:	bf00      	nop
 80055ca:	e000      	b.n	80055ce <pin_config+0x432>
		break;
 80055cc:	bf00      	nop

	}
}
 80055ce:	bf00      	nop
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bdb0      	pop	{r4, r5, r7, pc}
 80055d4:	0800aad8 	.word	0x0800aad8
 80055d8:	200003f8 	.word	0x200003f8
 80055dc:	20000404 	.word	0x20000404
 80055e0:	200002e0 	.word	0x200002e0

080055e4 <terminal>:
extern char CH4[10];



void terminal(struct data *d)
{
 80055e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e6:	b08f      	sub	sp, #60	; 0x3c
 80055e8:	af0c      	add	r7, sp, #48	; 0x30
 80055ea:	6078      	str	r0, [r7, #4]
sprintf((char*)buf,"TIME:%02d:%02d:%02d 	 DATE:%02d/%02d/%02d  	CH1:%s  	CH2:%s  	CH3:%s  	CH4:%s  	GPIO1:%s  		GPIO2:%s  		GPIO3:%s  	 GPIO4:%s\r\n",d->hour,d->minutes,d->seconds,d->dayofmonth,d->month,d->year,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	789b      	ldrb	r3, [r3, #2]
 80055f0:	469c      	mov	ip, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	469e      	mov	lr, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	461c      	mov	r4, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	791b      	ldrb	r3, [r3, #4]
 8005602:	461d      	mov	r5, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	795b      	ldrb	r3, [r3, #5]
 8005608:	461e      	mov	r6, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	799b      	ldrb	r3, [r3, #6]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	331d      	adds	r3, #29
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	3227      	adds	r2, #39	; 0x27
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	3131      	adds	r1, #49	; 0x31
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	303b      	adds	r0, #59	; 0x3b
 8005620:	900b      	str	r0, [sp, #44]	; 0x2c
 8005622:	910a      	str	r1, [sp, #40]	; 0x28
 8005624:	9209      	str	r2, [sp, #36]	; 0x24
 8005626:	9308      	str	r3, [sp, #32]
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <terminal+0x78>)
 800562a:	9307      	str	r3, [sp, #28]
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <terminal+0x7c>)
 800562e:	9306      	str	r3, [sp, #24]
 8005630:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <terminal+0x80>)
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <terminal+0x84>)
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	9602      	str	r6, [sp, #8]
 800563e:	9501      	str	r5, [sp, #4]
 8005640:	9400      	str	r4, [sp, #0]
 8005642:	4673      	mov	r3, lr
 8005644:	4662      	mov	r2, ip
 8005646:	4909      	ldr	r1, [pc, #36]	; (800566c <terminal+0x88>)
 8005648:	4809      	ldr	r0, [pc, #36]	; (8005670 <terminal+0x8c>)
 800564a:	f001 fc7d 	bl	8006f48 <siprintf>
//	sprintf((char*)buf2,"%02d:%02d:%02d\r\n",d->dayofmonth,d->month,d->year);
	uart3_tx(buf);
 800564e:	4808      	ldr	r0, [pc, #32]	; (8005670 <terminal+0x8c>)
 8005650:	f000 fc4e 	bl	8005ef0 <uart3_tx>
//	HAL_Delay(100);

}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800565c:	20000384 	.word	0x20000384
 8005660:	20000378 	.word	0x20000378
 8005664:	2000036c 	.word	0x2000036c
 8005668:	20000360 	.word	0x20000360
 800566c:	0800aadc 	.word	0x0800aadc
 8005670:	20000414 	.word	0x20000414

08005674 <USER_ADC1_Init>:
//	 */
//	HAL_RCCEx_EnableMSIPLLMode();
//}

void USER_ADC1_Init(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
	//
	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	 hadc1.Instance = ADC1;
 8005678:	4b18      	ldr	r3, [pc, #96]	; (80056dc <USER_ADC1_Init+0x68>)
 800567a:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <USER_ADC1_Init+0x6c>)
 800567c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800567e:	4b17      	ldr	r3, [pc, #92]	; (80056dc <USER_ADC1_Init+0x68>)
 8005680:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005684:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <USER_ADC1_Init+0x68>)
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <USER_ADC1_Init+0x68>)
 800568e:	2201      	movs	r2, #1
 8005690:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <USER_ADC1_Init+0x68>)
 8005694:	2201      	movs	r2, #1
 8005696:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <USER_ADC1_Init+0x68>)
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <USER_ADC1_Init+0x68>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80056a6:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <USER_ADC1_Init+0x68>)
 80056a8:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <USER_ADC1_Init+0x70>)
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <USER_ADC1_Init+0x68>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 4;
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <USER_ADC1_Init+0x68>)
 80056b4:	2204      	movs	r2, #4
 80056b6:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <USER_ADC1_Init+0x68>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <USER_ADC1_Init+0x68>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80056c6:	4805      	ldr	r0, [pc, #20]	; (80056dc <USER_ADC1_Init+0x68>)
 80056c8:	f7fc f864 	bl	8001794 <HAL_ADC_Init>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <USER_ADC1_Init+0x62>
	  {
	    Error_Handler();
 80056d2:	f7fb fcd8 	bl	8001086 <Error_Handler>
	  }


	}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200004ec 	.word	0x200004ec
 80056e0:	40012000 	.word	0x40012000
 80056e4:	0f000001 	.word	0x0f000001

080056e8 <USER_GPIO_Init>:


void USER_GPIO_Init(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <USER_GPIO_Init+0x68>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	4a16      	ldr	r2, [pc, #88]	; (8005750 <USER_GPIO_Init+0x68>)
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	6313      	str	r3, [r2, #48]	; 0x30
 80056fe:	4b14      	ldr	r3, [pc, #80]	; (8005750 <USER_GPIO_Init+0x68>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	4b10      	ldr	r3, [pc, #64]	; (8005750 <USER_GPIO_Init+0x68>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	4a0f      	ldr	r2, [pc, #60]	; (8005750 <USER_GPIO_Init+0x68>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6313      	str	r3, [r2, #48]	; 0x30
 800571a:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <USER_GPIO_Init+0x68>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	4b09      	ldr	r3, [pc, #36]	; (8005750 <USER_GPIO_Init+0x68>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	4a08      	ldr	r2, [pc, #32]	; (8005750 <USER_GPIO_Init+0x68>)
 8005730:	f043 0302 	orr.w	r3, r3, #2
 8005734:	6313      	str	r3, [r2, #48]	; 0x30
 8005736:	4b06      	ldr	r3, [pc, #24]	; (8005750 <USER_GPIO_Init+0x68>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40023800 	.word	0x40023800

08005754 <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_5;
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <ADC_select_CH1+0x2c>)
 800575a:	2205      	movs	r2, #5
 800575c:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <ADC_select_CH1+0x2c>)
 8005760:	2201      	movs	r2, #1
 8005762:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <ADC_select_CH1+0x2c>)
 8005766:	2207      	movs	r2, #7
 8005768:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800576a:	4905      	ldr	r1, [pc, #20]	; (8005780 <ADC_select_CH1+0x2c>)
 800576c:	4805      	ldr	r0, [pc, #20]	; (8005784 <ADC_select_CH1+0x30>)
 800576e:	f7fc f9f3 	bl	8001b58 <HAL_ADC_ConfigChannel>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <ADC_select_CH1+0x28>
	  {
	    Error_Handler();
 8005778:	f7fb fc85 	bl	8001086 <Error_Handler>
	  }
}
 800577c:	bf00      	nop
 800577e:	bd80      	pop	{r7, pc}
 8005780:	200004dc 	.word	0x200004dc
 8005784:	200004ec 	.word	0x200004ec

08005788 <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
	 sConfig.Channel = ADC_CHANNEL_6;
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <ADC_select_CH2+0x2c>)
 800578e:	2206      	movs	r2, #6
 8005790:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <ADC_select_CH2+0x2c>)
 8005794:	2201      	movs	r2, #1
 8005796:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <ADC_select_CH2+0x2c>)
 800579a:	2207      	movs	r2, #7
 800579c:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800579e:	4905      	ldr	r1, [pc, #20]	; (80057b4 <ADC_select_CH2+0x2c>)
 80057a0:	4805      	ldr	r0, [pc, #20]	; (80057b8 <ADC_select_CH2+0x30>)
 80057a2:	f7fc f9d9 	bl	8001b58 <HAL_ADC_ConfigChannel>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <ADC_select_CH2+0x28>
	  {
	    Error_Handler();
 80057ac:	f7fb fc6b 	bl	8001086 <Error_Handler>
	  }
}
 80057b0:	bf00      	nop
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	200004dc 	.word	0x200004dc
 80057b8:	200004ec 	.word	0x200004ec

080057bc <ADC_select_CH3>:

void ADC_select_CH3(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
	 sConfig.Channel = ADC_CHANNEL_9;
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <ADC_select_CH3+0x2c>)
 80057c2:	2209      	movs	r2, #9
 80057c4:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <ADC_select_CH3+0x2c>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <ADC_select_CH3+0x2c>)
 80057ce:	2207      	movs	r2, #7
 80057d0:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80057d2:	4905      	ldr	r1, [pc, #20]	; (80057e8 <ADC_select_CH3+0x2c>)
 80057d4:	4805      	ldr	r0, [pc, #20]	; (80057ec <ADC_select_CH3+0x30>)
 80057d6:	f7fc f9bf 	bl	8001b58 <HAL_ADC_ConfigChannel>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <ADC_select_CH3+0x28>
	  {
	    Error_Handler();
 80057e0:	f7fb fc51 	bl	8001086 <Error_Handler>
	  }
}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	200004dc 	.word	0x200004dc
 80057ec:	200004ec 	.word	0x200004ec

080057f0 <ADC_select_CH4>:

void ADC_select_CH4(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_10;
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <ADC_select_CH4+0x2c>)
 80057f6:	220a      	movs	r2, #10
 80057f8:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <ADC_select_CH4+0x2c>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <ADC_select_CH4+0x2c>)
 8005802:	2207      	movs	r2, #7
 8005804:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005806:	4905      	ldr	r1, [pc, #20]	; (800581c <ADC_select_CH4+0x2c>)
 8005808:	4805      	ldr	r0, [pc, #20]	; (8005820 <ADC_select_CH4+0x30>)
 800580a:	f7fc f9a5 	bl	8001b58 <HAL_ADC_ConfigChannel>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <ADC_select_CH4+0x28>
	  {
	    Error_Handler();
 8005814:	f7fb fc37 	bl	8001086 <Error_Handler>
	  }
}
 8005818:	bf00      	nop
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200004dc 	.word	0x200004dc
 8005820:	200004ec 	.word	0x200004ec

08005824 <adc_start>:
//}



void adc_start(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8005828:	4802      	ldr	r0, [pc, #8]	; (8005834 <adc_start+0x10>)
 800582a:	f7fb fff7 	bl	800181c <HAL_ADC_Start>
}
 800582e:	bf00      	nop
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	200004ec 	.word	0x200004ec

08005838 <adc_conversion>:

void adc_conversion(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 800583c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005840:	4802      	ldr	r0, [pc, #8]	; (800584c <adc_conversion+0x14>)
 8005842:	f7fc f8f0 	bl	8001a26 <HAL_ADC_PollForConversion>
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	200004ec 	.word	0x200004ec

08005850 <adc_value>:

uint16_t adc_value(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8005854:	4803      	ldr	r0, [pc, #12]	; (8005864 <adc_value+0x14>)
 8005856:	f7fc f971 	bl	8001b3c <HAL_ADC_GetValue>
 800585a:	4603      	mov	r3, r0
 800585c:	b29b      	uxth	r3, r3
}
 800585e:	4618      	mov	r0, r3
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200004ec 	.word	0x200004ec

08005868 <adc_stop>:

void adc_stop(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <adc_stop+0x10>)
 800586e:	f7fc f8a7 	bl	80019c0 <HAL_ADC_Stop>
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200004ec 	.word	0x200004ec

0800587c <UART4_Init>:

extern UART_HandleTypeDef huart4;


void UART4_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
	  /* USER CODE END UART4_Init 0 */

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  huart4.Instance = UART4;
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <UART4_Init+0x4c>)
 8005882:	4a12      	ldr	r2, [pc, #72]	; (80058cc <UART4_Init+0x50>)
 8005884:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 115200;
 8005886:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <UART4_Init+0x4c>)
 8005888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800588c:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800588e:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <UART4_Init+0x4c>)
 8005890:	2200      	movs	r2, #0
 8005892:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <UART4_Init+0x4c>)
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <UART4_Init+0x4c>)
 800589c:	2200      	movs	r2, #0
 800589e:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 80058a0:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <UART4_Init+0x4c>)
 80058a2:	220c      	movs	r2, #12
 80058a4:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <UART4_Init+0x4c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <UART4_Init+0x4c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 80058b2:	4805      	ldr	r0, [pc, #20]	; (80058c8 <UART4_Init+0x4c>)
 80058b4:	f7fe fbd2 	bl	800405c <HAL_UART_Init>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <UART4_Init+0x46>
	  {
	    Error_Handler();
 80058be:	f7fb fbe2 	bl	8001086 <Error_Handler>
	  }
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */

	}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000250 	.word	0x20000250
 80058cc:	40004c00 	.word	0x40004c00

080058d0 <GsmCommands>:




void GsmCommands(uint8_t* cmd)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart4, cmd, strlen((char*)cmd));
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fa fca3 	bl	8000224 <strlen>
 80058de:	4603      	mov	r3, r0
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4807      	ldr	r0, [pc, #28]	; (8005904 <GsmCommands+0x34>)
 80058e8:	f7fe fd39 	bl	800435e <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart4, Reply, max_buf_len);
 80058ec:	2264      	movs	r2, #100	; 0x64
 80058ee:	4906      	ldr	r1, [pc, #24]	; (8005908 <GsmCommands+0x38>)
 80058f0:	4804      	ldr	r0, [pc, #16]	; (8005904 <GsmCommands+0x34>)
 80058f2:	f7fe fd79 	bl	80043e8 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 80058f6:	2064      	movs	r0, #100	; 0x64
 80058f8:	f7fb ff28 	bl	800174c <HAL_Delay>

}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000250 	.word	0x20000250
 8005908:	20000534 	.word	0x20000534

0800590c <Gsm_Init>:



void Gsm_Init()
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0

//	HAL_Delay(2000);


	GsmCommands((uint8_t*)"AT\r\n");
 8005910:	4809      	ldr	r0, [pc, #36]	; (8005938 <Gsm_Init+0x2c>)
 8005912:	f7ff ffdd 	bl	80058d0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8005916:	4809      	ldr	r0, [pc, #36]	; (800593c <Gsm_Init+0x30>)
 8005918:	f7ff ffda 	bl	80058d0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 800591c:	4808      	ldr	r0, [pc, #32]	; (8005940 <Gsm_Init+0x34>)
 800591e:	f7ff ffd7 	bl	80058d0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8005922:	4808      	ldr	r0, [pc, #32]	; (8005944 <Gsm_Init+0x38>)
 8005924:	f7ff ffd4 	bl	80058d0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"airtelgprs.com\"\r\n");
 8005928:	4807      	ldr	r0, [pc, #28]	; (8005948 <Gsm_Init+0x3c>)
 800592a:	f7ff ffd1 	bl	80058d0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 800592e:	4807      	ldr	r0, [pc, #28]	; (800594c <Gsm_Init+0x40>)
 8005930:	f7ff ffce 	bl	80058d0 <GsmCommands>

}
 8005934:	bf00      	nop
 8005936:	bd80      	pop	{r7, pc}
 8005938:	0800ab5c 	.word	0x0800ab5c
 800593c:	0800ab64 	.word	0x0800ab64
 8005940:	0800ab70 	.word	0x0800ab70
 8005944:	0800ab7c 	.word	0x0800ab7c
 8005948:	0800ab8c 	.word	0x0800ab8c
 800594c:	0800abb4 	.word	0x0800abb4

08005950 <DataToCloud>:


void DataToCloud(char* Time,char* Date,char* Ch1,char* Ch2,char* Ch3,char* Ch4,char* D1,char* D2,char* D3,char* D4)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8005956:	af0a      	add	r7, sp, #40	; 0x28
 8005958:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800595c:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 8005960:	6020      	str	r0, [r4, #0]
 8005962:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8005966:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 800596a:	6001      	str	r1, [r0, #0]
 800596c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8005970:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8005974:	600a      	str	r2, [r1, #0]
 8005976:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800597a:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 800597e:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 8005980:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005984:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f000 f8a9 	bl	8005ae0 <url_encode>
 800598e:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	char* encoded_Date = url_encode(Date);
 8005992:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005996:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	f000 f8a0 	bl	8005ae0 <url_encode>
 80059a0:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	char* encoded_Ch1 = url_encode(Ch1);
 80059a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80059a8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	f000 f897 	bl	8005ae0 <url_encode>
 80059b2:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch2 = url_encode(Ch2);
 80059b6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80059ba:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	f000 f88e 	bl	8005ae0 <url_encode>
 80059c4:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch3 = url_encode(Ch3);
 80059c8:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 80059cc:	f000 f888 	bl	8005ae0 <url_encode>
 80059d0:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch4 = url_encode(Ch4);
 80059d4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80059d8:	f000 f882 	bl	8005ae0 <url_encode>
 80059dc:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_D1 = url_encode(D1);
 80059e0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80059e4:	f000 f87c 	bl	8005ae0 <url_encode>
 80059e8:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D2 = url_encode(D2);
 80059ec:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 80059f0:	f000 f876 	bl	8005ae0 <url_encode>
 80059f4:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D3 = url_encode(D3);
 80059f8:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 80059fc:	f000 f870 	bl	8005ae0 <url_encode>
 8005a00:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D4 = url_encode(D4);
 8005a04:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8005a08:	f000 f86a 	bl	8005ae0 <url_encode>
 8005a0c:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8005a10:	482f      	ldr	r0, [pc, #188]	; (8005ad0 <DataToCloud+0x180>)
 8005a12:	f7ff ff5d 	bl	80058d0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 8005a16:	482f      	ldr	r0, [pc, #188]	; (8005ad4 <DataToCloud+0x184>)
 8005a18:	f7ff ff5a 	bl	80058d0 <GsmCommands>


	snprintf((char*)AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbz6D7NQfywY6noMZRLp9HMPNZhQykwC1xSHxD2-VwgPqBtG1Ltj4A32S228G33SFji0/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s&field10=%s\"\r\n",encoded_Time, encoded_Date, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8005a1c:	f107 0014 	add.w	r0, r7, #20
 8005a20:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8005a24:	9308      	str	r3, [sp, #32]
 8005a26:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005a2a:	9307      	str	r3, [sp, #28]
 8005a2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005a30:	9306      	str	r3, [sp, #24]
 8005a32:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005a36:	9305      	str	r3, [sp, #20]
 8005a38:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005a48:	9302      	str	r3, [sp, #8]
 8005a4a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <DataToCloud+0x188>)
 8005a5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a60:	f001 fa3e 	bl	8006ee0 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff31 	bl	80058d0 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8005a6e:	481b      	ldr	r0, [pc, #108]	; (8005adc <DataToCloud+0x18c>)
 8005a70:	f7ff ff2e 	bl	80058d0 <GsmCommands>

	free(encoded_Time);
 8005a74:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8005a78:	f000 fab2 	bl	8005fe0 <free>
	free(encoded_Date);
 8005a7c:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8005a80:	f000 faae 	bl	8005fe0 <free>
	free(encoded_Ch1);
 8005a84:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8005a88:	f000 faaa 	bl	8005fe0 <free>
	free(encoded_Ch2);
 8005a8c:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8005a90:	f000 faa6 	bl	8005fe0 <free>
	free(encoded_Ch3);
 8005a94:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8005a98:	f000 faa2 	bl	8005fe0 <free>
	free(encoded_Ch4);
 8005a9c:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8005aa0:	f000 fa9e 	bl	8005fe0 <free>
	free(encoded_D1);
 8005aa4:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8005aa8:	f000 fa9a 	bl	8005fe0 <free>
	free(encoded_D2);
 8005aac:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8005ab0:	f000 fa96 	bl	8005fe0 <free>
	free(encoded_D3);
 8005ab4:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8005ab8:	f000 fa92 	bl	8005fe0 <free>
	free(encoded_D4);
 8005abc:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8005ac0:	f000 fa8e 	bl	8005fe0 <free>

}
 8005ac4:	bf00      	nop
 8005ac6:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	0800abc4 	.word	0x0800abc4
 8005ad4:	0800abd4 	.word	0x0800abd4
 8005ad8:	0800abe4 	.word	0x0800abe4
 8005adc:	0800acd0 	.word	0x0800acd0

08005ae0 <url_encode>:



char* url_encode(const char* str)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 8005ae8:	4b2f      	ldr	r3, [pc, #188]	; (8005ba8 <url_encode+0xc8>)
 8005aea:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fa fb99 	bl	8000224 <strlen>
 8005af2:	4602      	mov	r2, r0
 8005af4:	4613      	mov	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	3301      	adds	r3, #1
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fa67 	bl	8005fd0 <malloc>
 8005b02:	4603      	mov	r3, r0
 8005b04:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	617b      	str	r3, [r7, #20]

	while (*str) {
 8005b0a:	e040      	b.n	8005b8e <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a26      	ldr	r2, [pc, #152]	; (8005bac <url_encode+0xcc>)
 8005b14:	4413      	add	r3, r2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10f      	bne.n	8005b40 <url_encode+0x60>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b2d      	cmp	r3, #45	; 0x2d
 8005b26:	d00b      	beq.n	8005b40 <url_encode+0x60>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b5f      	cmp	r3, #95	; 0x5f
 8005b2e:	d007      	beq.n	8005b40 <url_encode+0x60>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b2e      	cmp	r3, #46	; 0x2e
 8005b36:	d003      	beq.n	8005b40 <url_encode+0x60>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b7e      	cmp	r3, #126	; 0x7e
 8005b3e:	d106      	bne.n	8005b4e <url_encode+0x6e>
			*ptr++ = *str;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	617a      	str	r2, [r7, #20]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	7812      	ldrb	r2, [r2, #0]
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e01c      	b.n	8005b88 <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	617a      	str	r2, [r7, #20]
 8005b54:	2225      	movs	r2, #37	; 0x25
 8005b56:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	441a      	add	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	1c59      	adds	r1, r3, #1
 8005b6c:	6179      	str	r1, [r7, #20]
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	441a      	add	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	6179      	str	r1, [r7, #20]
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	701a      	strb	r2, [r3, #0]
		}
		str++;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	607b      	str	r3, [r7, #4]
	while (*str) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1ba      	bne.n	8005b0c <url_encode+0x2c>
	}
	*ptr = '\0';
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
	return encoded;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	0800ace4 	.word	0x0800ace4
 8005bac:	0800ad10 	.word	0x0800ad10

08005bb0 <USER_I2C1_Init>:




void USER_I2C1_Init()
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bb6:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <USER_I2C1_Init+0x54>)
 8005bb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005bba:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bbc:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <USER_I2C1_Init+0x58>)
 8005bbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bec:	4804      	ldr	r0, [pc, #16]	; (8005c00 <USER_I2C1_Init+0x50>)
 8005bee:	f7fc fc8d 	bl	800250c <HAL_I2C_Init>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <USER_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005bf8:	f7fb fa45 	bl	8001086 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005bfc:	bf00      	nop
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	200001fc 	.word	0x200001fc
 8005c04:	40005400 	.word	0x40005400
 8005c08:	000186a0 	.word	0x000186a0

08005c0c <SystemClock_Config>:
 extern UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t GPIO[4];

void SystemClock_Config(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b094      	sub	sp, #80	; 0x50
 8005c10:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c12:	f107 031c 	add.w	r3, r7, #28
 8005c16:	2234      	movs	r2, #52	; 0x34
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 f9e8 	bl	8005ff0 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c20:	f107 0308 	add.w	r3, r7, #8
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	60da      	str	r2, [r3, #12]
 8005c2e:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8005c30:	2300      	movs	r3, #0
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	4b2a      	ldr	r3, [pc, #168]	; (8005ce0 <SystemClock_Config+0xd4>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	4a29      	ldr	r2, [pc, #164]	; (8005ce0 <SystemClock_Config+0xd4>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c40:	4b27      	ldr	r3, [pc, #156]	; (8005ce0 <SystemClock_Config+0xd4>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <SystemClock_Config+0xd8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <SystemClock_Config+0xd8>)
 8005c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <SystemClock_Config+0xd8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c70:	2301      	movs	r3, #1
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005c74:	2310      	movs	r3, #16
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8005c80:	2310      	movs	r3, #16
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 8005c84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005c88:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8005c92:	2302      	movs	r3, #2
 8005c94:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c96:	f107 031c 	add.w	r3, r7, #28
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd ff40 	bl	8003b20 <HAL_RCC_OscConfig>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 8005ca6:	f7fb f9ee 	bl	8001086 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005caa:	230f      	movs	r3, #15
 8005cac:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cba:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005cc0:	f107 0308 	add.w	r3, r7, #8
 8005cc4:	2102      	movs	r1, #2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fd fbe0 	bl	800348c <HAL_RCC_ClockConfig>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 8005cd2:	f7fb f9d8 	bl	8001086 <Error_Handler>
	  }
	}
 8005cd6:	bf00      	nop
 8005cd8:	3750      	adds	r7, #80	; 0x50
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40007000 	.word	0x40007000

08005ce8 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
	   /* USER CODE END USART1_Init 0 */

	   /* USER CODE BEGIN USART1_Init 1 */

	   /* USER CODE END USART1_Init 1 */
	   huart1.Instance = USART1;
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <user_USART1_UART_Init+0x50>)
 8005cf0:	601a      	str	r2, [r3, #0]
	   huart1.Init.BaudRate = 115200;
 8005cf2:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005cf8:	605a      	str	r2, [r3, #4]
	   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cfa:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
	   huart1.Init.StopBits = UART_STOPBITS_1;
 8005d00:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	60da      	str	r2, [r3, #12]
	   huart1.Init.Parity = UART_PARITY_NONE;
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	611a      	str	r2, [r3, #16]
	   huart1.Init.Mode = UART_MODE_TX_RX;
 8005d0c:	4b09      	ldr	r3, [pc, #36]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005d0e:	220c      	movs	r2, #12
 8005d10:	615a      	str	r2, [r3, #20]
	   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	619a      	str	r2, [r3, #24]
	   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d18:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	61da      	str	r2, [r3, #28]
	   if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d1e:	4805      	ldr	r0, [pc, #20]	; (8005d34 <user_USART1_UART_Init+0x4c>)
 8005d20:	f7fe f99c 	bl	800405c <HAL_UART_Init>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <user_USART1_UART_Init+0x46>
	   {
	     Error_Handler();
 8005d2a:	f7fb f9ac 	bl	8001086 <Error_Handler>
	   }
	   /* USER CODE BEGIN USART1_Init 2 */

	   /* USER CODE END USART1_Init 2 */

	 }
 8005d2e:	bf00      	nop
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200003a8 	.word	0x200003a8
 8005d38:	40011000 	.word	0x40011000

08005d3c <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	4a27      	ldr	r2, [pc, #156]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d5c:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d68:	2300      	movs	r3, #0
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	4a20      	ldr	r2, [pc, #128]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d72:	f043 0304 	orr.w	r3, r3, #4
 8005d76:	6313      	str	r3, [r2, #48]	; 0x30
 8005d78:	4b1e      	ldr	r3, [pc, #120]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	4a19      	ldr	r2, [pc, #100]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d8e:	f043 0302 	orr.w	r3, r3, #2
 8005d92:	6313      	str	r3, [r2, #48]	; 0x30
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <user_GPIO_Init+0xb8>)
 8005d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8005da0:	787a      	ldrb	r2, [r7, #1]
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc fb96 	bl	80024d8 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8005dac:	787b      	ldrb	r3, [r7, #1]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <user_GPIO_Init+0x84>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8005db2:	787a      	ldrb	r2, [r7, #1]
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f81f 	bl	8005dfc <gpio_output>
 8005dbe:	e008      	b.n	8005dd2 <user_GPIO_Init+0x96>
     }
     else if(PIN_mode == INPUT)
 8005dc0:	787b      	ldrb	r3, [r7, #1]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d105      	bne.n	8005dd2 <user_GPIO_Init+0x96>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 8005dc6:	787a      	ldrb	r2, [r7, #1]
 8005dc8:	887b      	ldrh	r3, [r7, #2]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f837 	bl	8005e40 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <user_GPIO_Init+0xbc>)
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd8:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <user_GPIO_Init+0xbc>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <user_GPIO_Init+0xbc>)
 8005de0:	2203      	movs	r2, #3
 8005de2:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <user_GPIO_Init+0xbc>)
 8005de6:	2207      	movs	r2, #7
 8005de8:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8005dea:	bf00      	nop
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800
 8005df8:	20000598 	.word	0x20000598

08005dfc <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	807b      	strh	r3, [r7, #2]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0c:	f107 030c 	add.w	r3, r7, #12
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	60da      	str	r2, [r3, #12]
 8005e1a:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8005e1c:	887b      	ldrh	r3, [r7, #2]
 8005e1e:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e20:	2301      	movs	r3, #1
 8005e22:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005e2c:	f107 030c 	add.w	r3, r7, #12
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fc f9a4 	bl	8002180 <HAL_GPIO_Init>
 }
 8005e38:	bf00      	nop
 8005e3a:	3720      	adds	r7, #32
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	807b      	strh	r3, [r7, #2]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e50:	f107 030c 	add.w	r3, r7, #12
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e64:	2300      	movs	r3, #0
 8005e66:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8005e6c:	f107 030c 	add.w	r3, r7, #12
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fc f984 	bl	8002180 <HAL_GPIO_Init>
 }
 8005e78:	bf00      	nop
 8005e7a:	3720      	adds	r7, #32
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <data_receive>:




void data_receive()
 {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,15,1000) == HAL_ERROR)
 8005e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e88:	220f      	movs	r2, #15
 8005e8a:	4905      	ldr	r1, [pc, #20]	; (8005ea0 <data_receive+0x20>)
 8005e8c:	4805      	ldr	r0, [pc, #20]	; (8005ea4 <data_receive+0x24>)
 8005e8e:	f7fe f9c4 	bl	800421a <HAL_UART_Receive>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <data_receive+0x1c>
	 {
			 Error_Handler();
 8005e98:	f7fb f8f5 	bl	8001086 <Error_Handler>
	 }
 }
 8005e9c:	bf00      	nop
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000398 	.word	0x20000398
 8005ea4:	200003a8 	.word	0x200003a8

08005ea8 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fc faf5 	bl	80024a8 <HAL_GPIO_ReadPin>
 8005ebe:	4603      	mov	r3, r0

 }
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8005ed8:	787a      	ldrb	r2, [r7, #1]
 8005eda:	887b      	ldrh	r3, [r7, #2]
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fc fafa 	bl	80024d8 <HAL_GPIO_WritePin>
    return PinState;
 8005ee4:	787b      	ldrb	r3, [r7, #1]
 }
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <uart3_tx>:


extern UART_HandleTypeDef huart3;

void uart3_tx(uint8_t* buf)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fa f993 	bl	8000224 <strlen>
 8005efe:	4603      	mov	r3, r0
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4804      	ldr	r0, [pc, #16]	; (8005f1c <uart3_tx+0x2c>)
 8005f0a:	f7fe f8f4 	bl	80040f6 <HAL_UART_Transmit>
	 HAL_Delay(100);
 8005f0e:	2064      	movs	r0, #100	; 0x64
 8005f10:	f7fb fc1c 	bl	800174c <HAL_Delay>
}
 8005f14:	bf00      	nop
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000294 	.word	0x20000294

08005f20 <USER_USART3_UART_Init>:


void USER_USART3_UART_Init()
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f24:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f26:	4a12      	ldr	r2, [pc, #72]	; (8005f70 <USER_USART3_UART_Init+0x50>)
 8005f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005f2a:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f32:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f44:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f46:	220c      	movs	r2, #12
 8005f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f56:	4805      	ldr	r0, [pc, #20]	; (8005f6c <USER_USART3_UART_Init+0x4c>)
 8005f58:	f7fe f880 	bl	800405c <HAL_UART_Init>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <USER_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005f62:	f7fb f890 	bl	8001086 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f66:	bf00      	nop
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000294 	.word	0x20000294
 8005f70:	40004800 	.word	0x40004800

08005f74 <atoi>:
 8005f74:	220a      	movs	r2, #10
 8005f76:	2100      	movs	r1, #0
 8005f78:	f001 bf2a 	b.w	8007dd0 <strtol>

08005f7c <__errno>:
 8005f7c:	4b01      	ldr	r3, [pc, #4]	; (8005f84 <__errno+0x8>)
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	2000000c 	.word	0x2000000c

08005f88 <__libc_init_array>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	4d0d      	ldr	r5, [pc, #52]	; (8005fc0 <__libc_init_array+0x38>)
 8005f8c:	4c0d      	ldr	r4, [pc, #52]	; (8005fc4 <__libc_init_array+0x3c>)
 8005f8e:	1b64      	subs	r4, r4, r5
 8005f90:	10a4      	asrs	r4, r4, #2
 8005f92:	2600      	movs	r6, #0
 8005f94:	42a6      	cmp	r6, r4
 8005f96:	d109      	bne.n	8005fac <__libc_init_array+0x24>
 8005f98:	4d0b      	ldr	r5, [pc, #44]	; (8005fc8 <__libc_init_array+0x40>)
 8005f9a:	4c0c      	ldr	r4, [pc, #48]	; (8005fcc <__libc_init_array+0x44>)
 8005f9c:	f004 fd4c 	bl	800aa38 <_init>
 8005fa0:	1b64      	subs	r4, r4, r5
 8005fa2:	10a4      	asrs	r4, r4, #2
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	42a6      	cmp	r6, r4
 8005fa8:	d105      	bne.n	8005fb6 <__libc_init_array+0x2e>
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb0:	4798      	blx	r3
 8005fb2:	3601      	adds	r6, #1
 8005fb4:	e7ee      	b.n	8005f94 <__libc_init_array+0xc>
 8005fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fba:	4798      	blx	r3
 8005fbc:	3601      	adds	r6, #1
 8005fbe:	e7f2      	b.n	8005fa6 <__libc_init_array+0x1e>
 8005fc0:	0800b220 	.word	0x0800b220
 8005fc4:	0800b220 	.word	0x0800b220
 8005fc8:	0800b220 	.word	0x0800b220
 8005fcc:	0800b224 	.word	0x0800b224

08005fd0 <malloc>:
 8005fd0:	4b02      	ldr	r3, [pc, #8]	; (8005fdc <malloc+0xc>)
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	f000 b87f 	b.w	80060d8 <_malloc_r>
 8005fda:	bf00      	nop
 8005fdc:	2000000c 	.word	0x2000000c

08005fe0 <free>:
 8005fe0:	4b02      	ldr	r3, [pc, #8]	; (8005fec <free+0xc>)
 8005fe2:	4601      	mov	r1, r0
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	f000 b80b 	b.w	8006000 <_free_r>
 8005fea:	bf00      	nop
 8005fec:	2000000c 	.word	0x2000000c

08005ff0 <memset>:
 8005ff0:	4402      	add	r2, r0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d100      	bne.n	8005ffa <memset+0xa>
 8005ff8:	4770      	bx	lr
 8005ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8005ffe:	e7f9      	b.n	8005ff4 <memset+0x4>

08006000 <_free_r>:
 8006000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006002:	2900      	cmp	r1, #0
 8006004:	d044      	beq.n	8006090 <_free_r+0x90>
 8006006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600a:	9001      	str	r0, [sp, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f1a1 0404 	sub.w	r4, r1, #4
 8006012:	bfb8      	it	lt
 8006014:	18e4      	addlt	r4, r4, r3
 8006016:	f003 f923 	bl	8009260 <__malloc_lock>
 800601a:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <_free_r+0x94>)
 800601c:	9801      	ldr	r0, [sp, #4]
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	b933      	cbnz	r3, 8006030 <_free_r+0x30>
 8006022:	6063      	str	r3, [r4, #4]
 8006024:	6014      	str	r4, [r2, #0]
 8006026:	b003      	add	sp, #12
 8006028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800602c:	f003 b91e 	b.w	800926c <__malloc_unlock>
 8006030:	42a3      	cmp	r3, r4
 8006032:	d908      	bls.n	8006046 <_free_r+0x46>
 8006034:	6825      	ldr	r5, [r4, #0]
 8006036:	1961      	adds	r1, r4, r5
 8006038:	428b      	cmp	r3, r1
 800603a:	bf01      	itttt	eq
 800603c:	6819      	ldreq	r1, [r3, #0]
 800603e:	685b      	ldreq	r3, [r3, #4]
 8006040:	1949      	addeq	r1, r1, r5
 8006042:	6021      	streq	r1, [r4, #0]
 8006044:	e7ed      	b.n	8006022 <_free_r+0x22>
 8006046:	461a      	mov	r2, r3
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	b10b      	cbz	r3, 8006050 <_free_r+0x50>
 800604c:	42a3      	cmp	r3, r4
 800604e:	d9fa      	bls.n	8006046 <_free_r+0x46>
 8006050:	6811      	ldr	r1, [r2, #0]
 8006052:	1855      	adds	r5, r2, r1
 8006054:	42a5      	cmp	r5, r4
 8006056:	d10b      	bne.n	8006070 <_free_r+0x70>
 8006058:	6824      	ldr	r4, [r4, #0]
 800605a:	4421      	add	r1, r4
 800605c:	1854      	adds	r4, r2, r1
 800605e:	42a3      	cmp	r3, r4
 8006060:	6011      	str	r1, [r2, #0]
 8006062:	d1e0      	bne.n	8006026 <_free_r+0x26>
 8006064:	681c      	ldr	r4, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	6053      	str	r3, [r2, #4]
 800606a:	4421      	add	r1, r4
 800606c:	6011      	str	r1, [r2, #0]
 800606e:	e7da      	b.n	8006026 <_free_r+0x26>
 8006070:	d902      	bls.n	8006078 <_free_r+0x78>
 8006072:	230c      	movs	r3, #12
 8006074:	6003      	str	r3, [r0, #0]
 8006076:	e7d6      	b.n	8006026 <_free_r+0x26>
 8006078:	6825      	ldr	r5, [r4, #0]
 800607a:	1961      	adds	r1, r4, r5
 800607c:	428b      	cmp	r3, r1
 800607e:	bf04      	itt	eq
 8006080:	6819      	ldreq	r1, [r3, #0]
 8006082:	685b      	ldreq	r3, [r3, #4]
 8006084:	6063      	str	r3, [r4, #4]
 8006086:	bf04      	itt	eq
 8006088:	1949      	addeq	r1, r1, r5
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	6054      	str	r4, [r2, #4]
 800608e:	e7ca      	b.n	8006026 <_free_r+0x26>
 8006090:	b003      	add	sp, #12
 8006092:	bd30      	pop	{r4, r5, pc}
 8006094:	200005ac 	.word	0x200005ac

08006098 <sbrk_aligned>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	4e0e      	ldr	r6, [pc, #56]	; (80060d4 <sbrk_aligned+0x3c>)
 800609c:	460c      	mov	r4, r1
 800609e:	6831      	ldr	r1, [r6, #0]
 80060a0:	4605      	mov	r5, r0
 80060a2:	b911      	cbnz	r1, 80060aa <sbrk_aligned+0x12>
 80060a4:	f000 ff06 	bl	8006eb4 <_sbrk_r>
 80060a8:	6030      	str	r0, [r6, #0]
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 ff01 	bl	8006eb4 <_sbrk_r>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d00a      	beq.n	80060cc <sbrk_aligned+0x34>
 80060b6:	1cc4      	adds	r4, r0, #3
 80060b8:	f024 0403 	bic.w	r4, r4, #3
 80060bc:	42a0      	cmp	r0, r4
 80060be:	d007      	beq.n	80060d0 <sbrk_aligned+0x38>
 80060c0:	1a21      	subs	r1, r4, r0
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 fef6 	bl	8006eb4 <_sbrk_r>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d101      	bne.n	80060d0 <sbrk_aligned+0x38>
 80060cc:	f04f 34ff 	mov.w	r4, #4294967295
 80060d0:	4620      	mov	r0, r4
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
 80060d4:	200005b0 	.word	0x200005b0

080060d8 <_malloc_r>:
 80060d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060dc:	1ccd      	adds	r5, r1, #3
 80060de:	f025 0503 	bic.w	r5, r5, #3
 80060e2:	3508      	adds	r5, #8
 80060e4:	2d0c      	cmp	r5, #12
 80060e6:	bf38      	it	cc
 80060e8:	250c      	movcc	r5, #12
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	4607      	mov	r7, r0
 80060ee:	db01      	blt.n	80060f4 <_malloc_r+0x1c>
 80060f0:	42a9      	cmp	r1, r5
 80060f2:	d905      	bls.n	8006100 <_malloc_r+0x28>
 80060f4:	230c      	movs	r3, #12
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	2600      	movs	r6, #0
 80060fa:	4630      	mov	r0, r6
 80060fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006100:	4e2e      	ldr	r6, [pc, #184]	; (80061bc <_malloc_r+0xe4>)
 8006102:	f003 f8ad 	bl	8009260 <__malloc_lock>
 8006106:	6833      	ldr	r3, [r6, #0]
 8006108:	461c      	mov	r4, r3
 800610a:	bb34      	cbnz	r4, 800615a <_malloc_r+0x82>
 800610c:	4629      	mov	r1, r5
 800610e:	4638      	mov	r0, r7
 8006110:	f7ff ffc2 	bl	8006098 <sbrk_aligned>
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	4604      	mov	r4, r0
 8006118:	d14d      	bne.n	80061b6 <_malloc_r+0xde>
 800611a:	6834      	ldr	r4, [r6, #0]
 800611c:	4626      	mov	r6, r4
 800611e:	2e00      	cmp	r6, #0
 8006120:	d140      	bne.n	80061a4 <_malloc_r+0xcc>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	4631      	mov	r1, r6
 8006126:	4638      	mov	r0, r7
 8006128:	eb04 0803 	add.w	r8, r4, r3
 800612c:	f000 fec2 	bl	8006eb4 <_sbrk_r>
 8006130:	4580      	cmp	r8, r0
 8006132:	d13a      	bne.n	80061aa <_malloc_r+0xd2>
 8006134:	6821      	ldr	r1, [r4, #0]
 8006136:	3503      	adds	r5, #3
 8006138:	1a6d      	subs	r5, r5, r1
 800613a:	f025 0503 	bic.w	r5, r5, #3
 800613e:	3508      	adds	r5, #8
 8006140:	2d0c      	cmp	r5, #12
 8006142:	bf38      	it	cc
 8006144:	250c      	movcc	r5, #12
 8006146:	4629      	mov	r1, r5
 8006148:	4638      	mov	r0, r7
 800614a:	f7ff ffa5 	bl	8006098 <sbrk_aligned>
 800614e:	3001      	adds	r0, #1
 8006150:	d02b      	beq.n	80061aa <_malloc_r+0xd2>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	442b      	add	r3, r5
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	e00e      	b.n	8006178 <_malloc_r+0xa0>
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	1b52      	subs	r2, r2, r5
 800615e:	d41e      	bmi.n	800619e <_malloc_r+0xc6>
 8006160:	2a0b      	cmp	r2, #11
 8006162:	d916      	bls.n	8006192 <_malloc_r+0xba>
 8006164:	1961      	adds	r1, r4, r5
 8006166:	42a3      	cmp	r3, r4
 8006168:	6025      	str	r5, [r4, #0]
 800616a:	bf18      	it	ne
 800616c:	6059      	strne	r1, [r3, #4]
 800616e:	6863      	ldr	r3, [r4, #4]
 8006170:	bf08      	it	eq
 8006172:	6031      	streq	r1, [r6, #0]
 8006174:	5162      	str	r2, [r4, r5]
 8006176:	604b      	str	r3, [r1, #4]
 8006178:	4638      	mov	r0, r7
 800617a:	f104 060b 	add.w	r6, r4, #11
 800617e:	f003 f875 	bl	800926c <__malloc_unlock>
 8006182:	f026 0607 	bic.w	r6, r6, #7
 8006186:	1d23      	adds	r3, r4, #4
 8006188:	1af2      	subs	r2, r6, r3
 800618a:	d0b6      	beq.n	80060fa <_malloc_r+0x22>
 800618c:	1b9b      	subs	r3, r3, r6
 800618e:	50a3      	str	r3, [r4, r2]
 8006190:	e7b3      	b.n	80060fa <_malloc_r+0x22>
 8006192:	6862      	ldr	r2, [r4, #4]
 8006194:	42a3      	cmp	r3, r4
 8006196:	bf0c      	ite	eq
 8006198:	6032      	streq	r2, [r6, #0]
 800619a:	605a      	strne	r2, [r3, #4]
 800619c:	e7ec      	b.n	8006178 <_malloc_r+0xa0>
 800619e:	4623      	mov	r3, r4
 80061a0:	6864      	ldr	r4, [r4, #4]
 80061a2:	e7b2      	b.n	800610a <_malloc_r+0x32>
 80061a4:	4634      	mov	r4, r6
 80061a6:	6876      	ldr	r6, [r6, #4]
 80061a8:	e7b9      	b.n	800611e <_malloc_r+0x46>
 80061aa:	230c      	movs	r3, #12
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	4638      	mov	r0, r7
 80061b0:	f003 f85c 	bl	800926c <__malloc_unlock>
 80061b4:	e7a1      	b.n	80060fa <_malloc_r+0x22>
 80061b6:	6025      	str	r5, [r4, #0]
 80061b8:	e7de      	b.n	8006178 <_malloc_r+0xa0>
 80061ba:	bf00      	nop
 80061bc:	200005ac 	.word	0x200005ac

080061c0 <__cvt>:
 80061c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	ec55 4b10 	vmov	r4, r5, d0
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	460e      	mov	r6, r1
 80061cc:	4619      	mov	r1, r3
 80061ce:	462b      	mov	r3, r5
 80061d0:	bfbb      	ittet	lt
 80061d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061d6:	461d      	movlt	r5, r3
 80061d8:	2300      	movge	r3, #0
 80061da:	232d      	movlt	r3, #45	; 0x2d
 80061dc:	700b      	strb	r3, [r1, #0]
 80061de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061e4:	4691      	mov	r9, r2
 80061e6:	f023 0820 	bic.w	r8, r3, #32
 80061ea:	bfbc      	itt	lt
 80061ec:	4622      	movlt	r2, r4
 80061ee:	4614      	movlt	r4, r2
 80061f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f4:	d005      	beq.n	8006202 <__cvt+0x42>
 80061f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061fa:	d100      	bne.n	80061fe <__cvt+0x3e>
 80061fc:	3601      	adds	r6, #1
 80061fe:	2102      	movs	r1, #2
 8006200:	e000      	b.n	8006204 <__cvt+0x44>
 8006202:	2103      	movs	r1, #3
 8006204:	ab03      	add	r3, sp, #12
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	ab02      	add	r3, sp, #8
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	ec45 4b10 	vmov	d0, r4, r5
 8006210:	4653      	mov	r3, sl
 8006212:	4632      	mov	r2, r6
 8006214:	f001 fe90 	bl	8007f38 <_dtoa_r>
 8006218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800621c:	4607      	mov	r7, r0
 800621e:	d102      	bne.n	8006226 <__cvt+0x66>
 8006220:	f019 0f01 	tst.w	r9, #1
 8006224:	d022      	beq.n	800626c <__cvt+0xac>
 8006226:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800622a:	eb07 0906 	add.w	r9, r7, r6
 800622e:	d110      	bne.n	8006252 <__cvt+0x92>
 8006230:	783b      	ldrb	r3, [r7, #0]
 8006232:	2b30      	cmp	r3, #48	; 0x30
 8006234:	d10a      	bne.n	800624c <__cvt+0x8c>
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa fc73 	bl	8000b28 <__aeabi_dcmpeq>
 8006242:	b918      	cbnz	r0, 800624c <__cvt+0x8c>
 8006244:	f1c6 0601 	rsb	r6, r6, #1
 8006248:	f8ca 6000 	str.w	r6, [sl]
 800624c:	f8da 3000 	ldr.w	r3, [sl]
 8006250:	4499      	add	r9, r3
 8006252:	2200      	movs	r2, #0
 8006254:	2300      	movs	r3, #0
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa fc65 	bl	8000b28 <__aeabi_dcmpeq>
 800625e:	b108      	cbz	r0, 8006264 <__cvt+0xa4>
 8006260:	f8cd 900c 	str.w	r9, [sp, #12]
 8006264:	2230      	movs	r2, #48	; 0x30
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	454b      	cmp	r3, r9
 800626a:	d307      	bcc.n	800627c <__cvt+0xbc>
 800626c:	9b03      	ldr	r3, [sp, #12]
 800626e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006270:	1bdb      	subs	r3, r3, r7
 8006272:	4638      	mov	r0, r7
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	b004      	add	sp, #16
 8006278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	9103      	str	r1, [sp, #12]
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e7f0      	b.n	8006266 <__cvt+0xa6>

08006284 <__exponent>:
 8006284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006286:	4603      	mov	r3, r0
 8006288:	2900      	cmp	r1, #0
 800628a:	bfb8      	it	lt
 800628c:	4249      	neglt	r1, r1
 800628e:	f803 2b02 	strb.w	r2, [r3], #2
 8006292:	bfb4      	ite	lt
 8006294:	222d      	movlt	r2, #45	; 0x2d
 8006296:	222b      	movge	r2, #43	; 0x2b
 8006298:	2909      	cmp	r1, #9
 800629a:	7042      	strb	r2, [r0, #1]
 800629c:	dd2a      	ble.n	80062f4 <__exponent+0x70>
 800629e:	f10d 0407 	add.w	r4, sp, #7
 80062a2:	46a4      	mov	ip, r4
 80062a4:	270a      	movs	r7, #10
 80062a6:	46a6      	mov	lr, r4
 80062a8:	460a      	mov	r2, r1
 80062aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80062ae:	fb07 1516 	mls	r5, r7, r6, r1
 80062b2:	3530      	adds	r5, #48	; 0x30
 80062b4:	2a63      	cmp	r2, #99	; 0x63
 80062b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80062ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062be:	4631      	mov	r1, r6
 80062c0:	dcf1      	bgt.n	80062a6 <__exponent+0x22>
 80062c2:	3130      	adds	r1, #48	; 0x30
 80062c4:	f1ae 0502 	sub.w	r5, lr, #2
 80062c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062cc:	1c44      	adds	r4, r0, #1
 80062ce:	4629      	mov	r1, r5
 80062d0:	4561      	cmp	r1, ip
 80062d2:	d30a      	bcc.n	80062ea <__exponent+0x66>
 80062d4:	f10d 0209 	add.w	r2, sp, #9
 80062d8:	eba2 020e 	sub.w	r2, r2, lr
 80062dc:	4565      	cmp	r5, ip
 80062de:	bf88      	it	hi
 80062e0:	2200      	movhi	r2, #0
 80062e2:	4413      	add	r3, r2
 80062e4:	1a18      	subs	r0, r3, r0
 80062e6:	b003      	add	sp, #12
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062f2:	e7ed      	b.n	80062d0 <__exponent+0x4c>
 80062f4:	2330      	movs	r3, #48	; 0x30
 80062f6:	3130      	adds	r1, #48	; 0x30
 80062f8:	7083      	strb	r3, [r0, #2]
 80062fa:	70c1      	strb	r1, [r0, #3]
 80062fc:	1d03      	adds	r3, r0, #4
 80062fe:	e7f1      	b.n	80062e4 <__exponent+0x60>

08006300 <_printf_float>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	ed2d 8b02 	vpush	{d8}
 8006308:	b08d      	sub	sp, #52	; 0x34
 800630a:	460c      	mov	r4, r1
 800630c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006310:	4616      	mov	r6, r2
 8006312:	461f      	mov	r7, r3
 8006314:	4605      	mov	r5, r0
 8006316:	f002 ff7f 	bl	8009218 <_localeconv_r>
 800631a:	f8d0 a000 	ldr.w	sl, [r0]
 800631e:	4650      	mov	r0, sl
 8006320:	f7f9 ff80 	bl	8000224 <strlen>
 8006324:	2300      	movs	r3, #0
 8006326:	930a      	str	r3, [sp, #40]	; 0x28
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	f8d8 3000 	ldr.w	r3, [r8]
 8006330:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006334:	3307      	adds	r3, #7
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	f103 0208 	add.w	r2, r3, #8
 800633e:	f8c8 2000 	str.w	r2, [r8]
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800634a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800634e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006352:	9307      	str	r3, [sp, #28]
 8006354:	f8cd 8018 	str.w	r8, [sp, #24]
 8006358:	ee08 0a10 	vmov	s16, r0
 800635c:	4b9f      	ldr	r3, [pc, #636]	; (80065dc <_printf_float+0x2dc>)
 800635e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006362:	f04f 32ff 	mov.w	r2, #4294967295
 8006366:	f7fa fc11 	bl	8000b8c <__aeabi_dcmpun>
 800636a:	bb88      	cbnz	r0, 80063d0 <_printf_float+0xd0>
 800636c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006370:	4b9a      	ldr	r3, [pc, #616]	; (80065dc <_printf_float+0x2dc>)
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	f7fa fbeb 	bl	8000b50 <__aeabi_dcmple>
 800637a:	bb48      	cbnz	r0, 80063d0 <_printf_float+0xd0>
 800637c:	2200      	movs	r2, #0
 800637e:	2300      	movs	r3, #0
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7fa fbda 	bl	8000b3c <__aeabi_dcmplt>
 8006388:	b110      	cbz	r0, 8006390 <_printf_float+0x90>
 800638a:	232d      	movs	r3, #45	; 0x2d
 800638c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006390:	4b93      	ldr	r3, [pc, #588]	; (80065e0 <_printf_float+0x2e0>)
 8006392:	4894      	ldr	r0, [pc, #592]	; (80065e4 <_printf_float+0x2e4>)
 8006394:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006398:	bf94      	ite	ls
 800639a:	4698      	movls	r8, r3
 800639c:	4680      	movhi	r8, r0
 800639e:	2303      	movs	r3, #3
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	9b05      	ldr	r3, [sp, #20]
 80063a4:	f023 0204 	bic.w	r2, r3, #4
 80063a8:	6022      	str	r2, [r4, #0]
 80063aa:	f04f 0900 	mov.w	r9, #0
 80063ae:	9700      	str	r7, [sp, #0]
 80063b0:	4633      	mov	r3, r6
 80063b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f9d8 	bl	800676c <_printf_common>
 80063bc:	3001      	adds	r0, #1
 80063be:	f040 8090 	bne.w	80064e2 <_printf_float+0x1e2>
 80063c2:	f04f 30ff 	mov.w	r0, #4294967295
 80063c6:	b00d      	add	sp, #52	; 0x34
 80063c8:	ecbd 8b02 	vpop	{d8}
 80063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	4649      	mov	r1, r9
 80063d8:	f7fa fbd8 	bl	8000b8c <__aeabi_dcmpun>
 80063dc:	b140      	cbz	r0, 80063f0 <_printf_float+0xf0>
 80063de:	464b      	mov	r3, r9
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bfbc      	itt	lt
 80063e4:	232d      	movlt	r3, #45	; 0x2d
 80063e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ea:	487f      	ldr	r0, [pc, #508]	; (80065e8 <_printf_float+0x2e8>)
 80063ec:	4b7f      	ldr	r3, [pc, #508]	; (80065ec <_printf_float+0x2ec>)
 80063ee:	e7d1      	b.n	8006394 <_printf_float+0x94>
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063f6:	9206      	str	r2, [sp, #24]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	d13f      	bne.n	800647c <_printf_float+0x17c>
 80063fc:	2306      	movs	r3, #6
 80063fe:	6063      	str	r3, [r4, #4]
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	6861      	ldr	r1, [r4, #4]
 8006404:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006408:	2300      	movs	r3, #0
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	ab0a      	add	r3, sp, #40	; 0x28
 800640e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006412:	ab09      	add	r3, sp, #36	; 0x24
 8006414:	ec49 8b10 	vmov	d0, r8, r9
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	6022      	str	r2, [r4, #0]
 800641c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006420:	4628      	mov	r0, r5
 8006422:	f7ff fecd 	bl	80061c0 <__cvt>
 8006426:	9b06      	ldr	r3, [sp, #24]
 8006428:	9909      	ldr	r1, [sp, #36]	; 0x24
 800642a:	2b47      	cmp	r3, #71	; 0x47
 800642c:	4680      	mov	r8, r0
 800642e:	d108      	bne.n	8006442 <_printf_float+0x142>
 8006430:	1cc8      	adds	r0, r1, #3
 8006432:	db02      	blt.n	800643a <_printf_float+0x13a>
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	4299      	cmp	r1, r3
 8006438:	dd41      	ble.n	80064be <_printf_float+0x1be>
 800643a:	f1ab 0b02 	sub.w	fp, fp, #2
 800643e:	fa5f fb8b 	uxtb.w	fp, fp
 8006442:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006446:	d820      	bhi.n	800648a <_printf_float+0x18a>
 8006448:	3901      	subs	r1, #1
 800644a:	465a      	mov	r2, fp
 800644c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006450:	9109      	str	r1, [sp, #36]	; 0x24
 8006452:	f7ff ff17 	bl	8006284 <__exponent>
 8006456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006458:	1813      	adds	r3, r2, r0
 800645a:	2a01      	cmp	r2, #1
 800645c:	4681      	mov	r9, r0
 800645e:	6123      	str	r3, [r4, #16]
 8006460:	dc02      	bgt.n	8006468 <_printf_float+0x168>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	07d2      	lsls	r2, r2, #31
 8006466:	d501      	bpl.n	800646c <_printf_float+0x16c>
 8006468:	3301      	adds	r3, #1
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006470:	2b00      	cmp	r3, #0
 8006472:	d09c      	beq.n	80063ae <_printf_float+0xae>
 8006474:	232d      	movs	r3, #45	; 0x2d
 8006476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647a:	e798      	b.n	80063ae <_printf_float+0xae>
 800647c:	9a06      	ldr	r2, [sp, #24]
 800647e:	2a47      	cmp	r2, #71	; 0x47
 8006480:	d1be      	bne.n	8006400 <_printf_float+0x100>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1bc      	bne.n	8006400 <_printf_float+0x100>
 8006486:	2301      	movs	r3, #1
 8006488:	e7b9      	b.n	80063fe <_printf_float+0xfe>
 800648a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800648e:	d118      	bne.n	80064c2 <_printf_float+0x1c2>
 8006490:	2900      	cmp	r1, #0
 8006492:	6863      	ldr	r3, [r4, #4]
 8006494:	dd0b      	ble.n	80064ae <_printf_float+0x1ae>
 8006496:	6121      	str	r1, [r4, #16]
 8006498:	b913      	cbnz	r3, 80064a0 <_printf_float+0x1a0>
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	07d0      	lsls	r0, r2, #31
 800649e:	d502      	bpl.n	80064a6 <_printf_float+0x1a6>
 80064a0:	3301      	adds	r3, #1
 80064a2:	440b      	add	r3, r1
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80064a8:	f04f 0900 	mov.w	r9, #0
 80064ac:	e7de      	b.n	800646c <_printf_float+0x16c>
 80064ae:	b913      	cbnz	r3, 80064b6 <_printf_float+0x1b6>
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	07d2      	lsls	r2, r2, #31
 80064b4:	d501      	bpl.n	80064ba <_printf_float+0x1ba>
 80064b6:	3302      	adds	r3, #2
 80064b8:	e7f4      	b.n	80064a4 <_printf_float+0x1a4>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7f2      	b.n	80064a4 <_printf_float+0x1a4>
 80064be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c4:	4299      	cmp	r1, r3
 80064c6:	db05      	blt.n	80064d4 <_printf_float+0x1d4>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	6121      	str	r1, [r4, #16]
 80064cc:	07d8      	lsls	r0, r3, #31
 80064ce:	d5ea      	bpl.n	80064a6 <_printf_float+0x1a6>
 80064d0:	1c4b      	adds	r3, r1, #1
 80064d2:	e7e7      	b.n	80064a4 <_printf_float+0x1a4>
 80064d4:	2900      	cmp	r1, #0
 80064d6:	bfd4      	ite	le
 80064d8:	f1c1 0202 	rsble	r2, r1, #2
 80064dc:	2201      	movgt	r2, #1
 80064de:	4413      	add	r3, r2
 80064e0:	e7e0      	b.n	80064a4 <_printf_float+0x1a4>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	055a      	lsls	r2, r3, #21
 80064e6:	d407      	bmi.n	80064f8 <_printf_float+0x1f8>
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	4642      	mov	r2, r8
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	d12c      	bne.n	8006550 <_printf_float+0x250>
 80064f6:	e764      	b.n	80063c2 <_printf_float+0xc2>
 80064f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064fc:	f240 80e0 	bls.w	80066c0 <_printf_float+0x3c0>
 8006500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	f7fa fb0e 	bl	8000b28 <__aeabi_dcmpeq>
 800650c:	2800      	cmp	r0, #0
 800650e:	d034      	beq.n	800657a <_printf_float+0x27a>
 8006510:	4a37      	ldr	r2, [pc, #220]	; (80065f0 <_printf_float+0x2f0>)
 8006512:	2301      	movs	r3, #1
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	f43f af51 	beq.w	80063c2 <_printf_float+0xc2>
 8006520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006524:	429a      	cmp	r2, r3
 8006526:	db02      	blt.n	800652e <_printf_float+0x22e>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	07d8      	lsls	r0, r3, #31
 800652c:	d510      	bpl.n	8006550 <_printf_float+0x250>
 800652e:	ee18 3a10 	vmov	r3, s16
 8006532:	4652      	mov	r2, sl
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f af41 	beq.w	80063c2 <_printf_float+0xc2>
 8006540:	f04f 0800 	mov.w	r8, #0
 8006544:	f104 091a 	add.w	r9, r4, #26
 8006548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654a:	3b01      	subs	r3, #1
 800654c:	4543      	cmp	r3, r8
 800654e:	dc09      	bgt.n	8006564 <_printf_float+0x264>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	f100 8105 	bmi.w	8006762 <_printf_float+0x462>
 8006558:	68e0      	ldr	r0, [r4, #12]
 800655a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800655c:	4298      	cmp	r0, r3
 800655e:	bfb8      	it	lt
 8006560:	4618      	movlt	r0, r3
 8006562:	e730      	b.n	80063c6 <_printf_float+0xc6>
 8006564:	2301      	movs	r3, #1
 8006566:	464a      	mov	r2, r9
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f af27 	beq.w	80063c2 <_printf_float+0xc2>
 8006574:	f108 0801 	add.w	r8, r8, #1
 8006578:	e7e6      	b.n	8006548 <_printf_float+0x248>
 800657a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	dc39      	bgt.n	80065f4 <_printf_float+0x2f4>
 8006580:	4a1b      	ldr	r2, [pc, #108]	; (80065f0 <_printf_float+0x2f0>)
 8006582:	2301      	movs	r3, #1
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f af19 	beq.w	80063c2 <_printf_float+0xc2>
 8006590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006594:	4313      	orrs	r3, r2
 8006596:	d102      	bne.n	800659e <_printf_float+0x29e>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07d9      	lsls	r1, r3, #31
 800659c:	d5d8      	bpl.n	8006550 <_printf_float+0x250>
 800659e:	ee18 3a10 	vmov	r3, s16
 80065a2:	4652      	mov	r2, sl
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f af09 	beq.w	80063c2 <_printf_float+0xc2>
 80065b0:	f04f 0900 	mov.w	r9, #0
 80065b4:	f104 0a1a 	add.w	sl, r4, #26
 80065b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ba:	425b      	negs	r3, r3
 80065bc:	454b      	cmp	r3, r9
 80065be:	dc01      	bgt.n	80065c4 <_printf_float+0x2c4>
 80065c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c2:	e792      	b.n	80064ea <_printf_float+0x1ea>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4652      	mov	r2, sl
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f aef7 	beq.w	80063c2 <_printf_float+0xc2>
 80065d4:	f109 0901 	add.w	r9, r9, #1
 80065d8:	e7ee      	b.n	80065b8 <_printf_float+0x2b8>
 80065da:	bf00      	nop
 80065dc:	7fefffff 	.word	0x7fefffff
 80065e0:	0800ae18 	.word	0x0800ae18
 80065e4:	0800ae1c 	.word	0x0800ae1c
 80065e8:	0800ae24 	.word	0x0800ae24
 80065ec:	0800ae20 	.word	0x0800ae20
 80065f0:	0800ae28 	.word	0x0800ae28
 80065f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f8:	429a      	cmp	r2, r3
 80065fa:	bfa8      	it	ge
 80065fc:	461a      	movge	r2, r3
 80065fe:	2a00      	cmp	r2, #0
 8006600:	4691      	mov	r9, r2
 8006602:	dc37      	bgt.n	8006674 <_printf_float+0x374>
 8006604:	f04f 0b00 	mov.w	fp, #0
 8006608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800660c:	f104 021a 	add.w	r2, r4, #26
 8006610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	eba3 0309 	sub.w	r3, r3, r9
 8006618:	455b      	cmp	r3, fp
 800661a:	dc33      	bgt.n	8006684 <_printf_float+0x384>
 800661c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006620:	429a      	cmp	r2, r3
 8006622:	db3b      	blt.n	800669c <_printf_float+0x39c>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	07da      	lsls	r2, r3, #31
 8006628:	d438      	bmi.n	800669c <_printf_float+0x39c>
 800662a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662c:	9a05      	ldr	r2, [sp, #20]
 800662e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006630:	1a9a      	subs	r2, r3, r2
 8006632:	eba3 0901 	sub.w	r9, r3, r1
 8006636:	4591      	cmp	r9, r2
 8006638:	bfa8      	it	ge
 800663a:	4691      	movge	r9, r2
 800663c:	f1b9 0f00 	cmp.w	r9, #0
 8006640:	dc35      	bgt.n	80066ae <_printf_float+0x3ae>
 8006642:	f04f 0800 	mov.w	r8, #0
 8006646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800664a:	f104 0a1a 	add.w	sl, r4, #26
 800664e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	eba3 0309 	sub.w	r3, r3, r9
 8006658:	4543      	cmp	r3, r8
 800665a:	f77f af79 	ble.w	8006550 <_printf_float+0x250>
 800665e:	2301      	movs	r3, #1
 8006660:	4652      	mov	r2, sl
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f aeaa 	beq.w	80063c2 <_printf_float+0xc2>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	e7ec      	b.n	800664e <_printf_float+0x34e>
 8006674:	4613      	mov	r3, r2
 8006676:	4631      	mov	r1, r6
 8006678:	4642      	mov	r2, r8
 800667a:	4628      	mov	r0, r5
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	d1c0      	bne.n	8006604 <_printf_float+0x304>
 8006682:	e69e      	b.n	80063c2 <_printf_float+0xc2>
 8006684:	2301      	movs	r3, #1
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	9205      	str	r2, [sp, #20]
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f ae97 	beq.w	80063c2 <_printf_float+0xc2>
 8006694:	9a05      	ldr	r2, [sp, #20]
 8006696:	f10b 0b01 	add.w	fp, fp, #1
 800669a:	e7b9      	b.n	8006610 <_printf_float+0x310>
 800669c:	ee18 3a10 	vmov	r3, s16
 80066a0:	4652      	mov	r2, sl
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	d1be      	bne.n	800662a <_printf_float+0x32a>
 80066ac:	e689      	b.n	80063c2 <_printf_float+0xc2>
 80066ae:	9a05      	ldr	r2, [sp, #20]
 80066b0:	464b      	mov	r3, r9
 80066b2:	4442      	add	r2, r8
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	d1c1      	bne.n	8006642 <_printf_float+0x342>
 80066be:	e680      	b.n	80063c2 <_printf_float+0xc2>
 80066c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	dc01      	bgt.n	80066ca <_printf_float+0x3ca>
 80066c6:	07db      	lsls	r3, r3, #31
 80066c8:	d538      	bpl.n	800673c <_printf_float+0x43c>
 80066ca:	2301      	movs	r3, #1
 80066cc:	4642      	mov	r2, r8
 80066ce:	4631      	mov	r1, r6
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b8      	blx	r7
 80066d4:	3001      	adds	r0, #1
 80066d6:	f43f ae74 	beq.w	80063c2 <_printf_float+0xc2>
 80066da:	ee18 3a10 	vmov	r3, s16
 80066de:	4652      	mov	r2, sl
 80066e0:	4631      	mov	r1, r6
 80066e2:	4628      	mov	r0, r5
 80066e4:	47b8      	blx	r7
 80066e6:	3001      	adds	r0, #1
 80066e8:	f43f ae6b 	beq.w	80063c2 <_printf_float+0xc2>
 80066ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066f0:	2200      	movs	r2, #0
 80066f2:	2300      	movs	r3, #0
 80066f4:	f7fa fa18 	bl	8000b28 <__aeabi_dcmpeq>
 80066f8:	b9d8      	cbnz	r0, 8006732 <_printf_float+0x432>
 80066fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fc:	f108 0201 	add.w	r2, r8, #1
 8006700:	3b01      	subs	r3, #1
 8006702:	4631      	mov	r1, r6
 8006704:	4628      	mov	r0, r5
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	d10e      	bne.n	800672a <_printf_float+0x42a>
 800670c:	e659      	b.n	80063c2 <_printf_float+0xc2>
 800670e:	2301      	movs	r3, #1
 8006710:	4652      	mov	r2, sl
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f ae52 	beq.w	80063c2 <_printf_float+0xc2>
 800671e:	f108 0801 	add.w	r8, r8, #1
 8006722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	4543      	cmp	r3, r8
 8006728:	dcf1      	bgt.n	800670e <_printf_float+0x40e>
 800672a:	464b      	mov	r3, r9
 800672c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006730:	e6dc      	b.n	80064ec <_printf_float+0x1ec>
 8006732:	f04f 0800 	mov.w	r8, #0
 8006736:	f104 0a1a 	add.w	sl, r4, #26
 800673a:	e7f2      	b.n	8006722 <_printf_float+0x422>
 800673c:	2301      	movs	r3, #1
 800673e:	4642      	mov	r2, r8
 8006740:	e7df      	b.n	8006702 <_printf_float+0x402>
 8006742:	2301      	movs	r3, #1
 8006744:	464a      	mov	r2, r9
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f ae38 	beq.w	80063c2 <_printf_float+0xc2>
 8006752:	f108 0801 	add.w	r8, r8, #1
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800675a:	1a5b      	subs	r3, r3, r1
 800675c:	4543      	cmp	r3, r8
 800675e:	dcf0      	bgt.n	8006742 <_printf_float+0x442>
 8006760:	e6fa      	b.n	8006558 <_printf_float+0x258>
 8006762:	f04f 0800 	mov.w	r8, #0
 8006766:	f104 0919 	add.w	r9, r4, #25
 800676a:	e7f4      	b.n	8006756 <_printf_float+0x456>

0800676c <_printf_common>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	4616      	mov	r6, r2
 8006772:	4699      	mov	r9, r3
 8006774:	688a      	ldr	r2, [r1, #8]
 8006776:	690b      	ldr	r3, [r1, #16]
 8006778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800677c:	4293      	cmp	r3, r2
 800677e:	bfb8      	it	lt
 8006780:	4613      	movlt	r3, r2
 8006782:	6033      	str	r3, [r6, #0]
 8006784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006788:	4607      	mov	r7, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b10a      	cbz	r2, 8006792 <_printf_common+0x26>
 800678e:	3301      	adds	r3, #1
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	0699      	lsls	r1, r3, #26
 8006796:	bf42      	ittt	mi
 8006798:	6833      	ldrmi	r3, [r6, #0]
 800679a:	3302      	addmi	r3, #2
 800679c:	6033      	strmi	r3, [r6, #0]
 800679e:	6825      	ldr	r5, [r4, #0]
 80067a0:	f015 0506 	ands.w	r5, r5, #6
 80067a4:	d106      	bne.n	80067b4 <_printf_common+0x48>
 80067a6:	f104 0a19 	add.w	sl, r4, #25
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	6832      	ldr	r2, [r6, #0]
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	42ab      	cmp	r3, r5
 80067b2:	dc26      	bgt.n	8006802 <_printf_common+0x96>
 80067b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067b8:	1e13      	subs	r3, r2, #0
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	bf18      	it	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	0692      	lsls	r2, r2, #26
 80067c2:	d42b      	bmi.n	800681c <_printf_common+0xb0>
 80067c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067c8:	4649      	mov	r1, r9
 80067ca:	4638      	mov	r0, r7
 80067cc:	47c0      	blx	r8
 80067ce:	3001      	adds	r0, #1
 80067d0:	d01e      	beq.n	8006810 <_printf_common+0xa4>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	68e5      	ldr	r5, [r4, #12]
 80067d6:	6832      	ldr	r2, [r6, #0]
 80067d8:	f003 0306 	and.w	r3, r3, #6
 80067dc:	2b04      	cmp	r3, #4
 80067de:	bf08      	it	eq
 80067e0:	1aad      	subeq	r5, r5, r2
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	6922      	ldr	r2, [r4, #16]
 80067e6:	bf0c      	ite	eq
 80067e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067ec:	2500      	movne	r5, #0
 80067ee:	4293      	cmp	r3, r2
 80067f0:	bfc4      	itt	gt
 80067f2:	1a9b      	subgt	r3, r3, r2
 80067f4:	18ed      	addgt	r5, r5, r3
 80067f6:	2600      	movs	r6, #0
 80067f8:	341a      	adds	r4, #26
 80067fa:	42b5      	cmp	r5, r6
 80067fc:	d11a      	bne.n	8006834 <_printf_common+0xc8>
 80067fe:	2000      	movs	r0, #0
 8006800:	e008      	b.n	8006814 <_printf_common+0xa8>
 8006802:	2301      	movs	r3, #1
 8006804:	4652      	mov	r2, sl
 8006806:	4649      	mov	r1, r9
 8006808:	4638      	mov	r0, r7
 800680a:	47c0      	blx	r8
 800680c:	3001      	adds	r0, #1
 800680e:	d103      	bne.n	8006818 <_printf_common+0xac>
 8006810:	f04f 30ff 	mov.w	r0, #4294967295
 8006814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006818:	3501      	adds	r5, #1
 800681a:	e7c6      	b.n	80067aa <_printf_common+0x3e>
 800681c:	18e1      	adds	r1, r4, r3
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	2030      	movs	r0, #48	; 0x30
 8006822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006826:	4422      	add	r2, r4
 8006828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800682c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006830:	3302      	adds	r3, #2
 8006832:	e7c7      	b.n	80067c4 <_printf_common+0x58>
 8006834:	2301      	movs	r3, #1
 8006836:	4622      	mov	r2, r4
 8006838:	4649      	mov	r1, r9
 800683a:	4638      	mov	r0, r7
 800683c:	47c0      	blx	r8
 800683e:	3001      	adds	r0, #1
 8006840:	d0e6      	beq.n	8006810 <_printf_common+0xa4>
 8006842:	3601      	adds	r6, #1
 8006844:	e7d9      	b.n	80067fa <_printf_common+0x8e>
	...

08006848 <_printf_i>:
 8006848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	7e0f      	ldrb	r7, [r1, #24]
 800684e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006850:	2f78      	cmp	r7, #120	; 0x78
 8006852:	4691      	mov	r9, r2
 8006854:	4680      	mov	r8, r0
 8006856:	460c      	mov	r4, r1
 8006858:	469a      	mov	sl, r3
 800685a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800685e:	d807      	bhi.n	8006870 <_printf_i+0x28>
 8006860:	2f62      	cmp	r7, #98	; 0x62
 8006862:	d80a      	bhi.n	800687a <_printf_i+0x32>
 8006864:	2f00      	cmp	r7, #0
 8006866:	f000 80d8 	beq.w	8006a1a <_printf_i+0x1d2>
 800686a:	2f58      	cmp	r7, #88	; 0x58
 800686c:	f000 80a3 	beq.w	80069b6 <_printf_i+0x16e>
 8006870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006878:	e03a      	b.n	80068f0 <_printf_i+0xa8>
 800687a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800687e:	2b15      	cmp	r3, #21
 8006880:	d8f6      	bhi.n	8006870 <_printf_i+0x28>
 8006882:	a101      	add	r1, pc, #4	; (adr r1, 8006888 <_printf_i+0x40>)
 8006884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068f5 	.word	0x080068f5
 8006890:	08006871 	.word	0x08006871
 8006894:	08006871 	.word	0x08006871
 8006898:	08006871 	.word	0x08006871
 800689c:	08006871 	.word	0x08006871
 80068a0:	080068f5 	.word	0x080068f5
 80068a4:	08006871 	.word	0x08006871
 80068a8:	08006871 	.word	0x08006871
 80068ac:	08006871 	.word	0x08006871
 80068b0:	08006871 	.word	0x08006871
 80068b4:	08006a01 	.word	0x08006a01
 80068b8:	08006925 	.word	0x08006925
 80068bc:	080069e3 	.word	0x080069e3
 80068c0:	08006871 	.word	0x08006871
 80068c4:	08006871 	.word	0x08006871
 80068c8:	08006a23 	.word	0x08006a23
 80068cc:	08006871 	.word	0x08006871
 80068d0:	08006925 	.word	0x08006925
 80068d4:	08006871 	.word	0x08006871
 80068d8:	08006871 	.word	0x08006871
 80068dc:	080069eb 	.word	0x080069eb
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	1d1a      	adds	r2, r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	602a      	str	r2, [r5, #0]
 80068e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0a3      	b.n	8006a3c <_printf_i+0x1f4>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	6829      	ldr	r1, [r5, #0]
 80068f8:	0606      	lsls	r6, r0, #24
 80068fa:	f101 0304 	add.w	r3, r1, #4
 80068fe:	d50a      	bpl.n	8006916 <_printf_i+0xce>
 8006900:	680e      	ldr	r6, [r1, #0]
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	2e00      	cmp	r6, #0
 8006906:	da03      	bge.n	8006910 <_printf_i+0xc8>
 8006908:	232d      	movs	r3, #45	; 0x2d
 800690a:	4276      	negs	r6, r6
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006910:	485e      	ldr	r0, [pc, #376]	; (8006a8c <_printf_i+0x244>)
 8006912:	230a      	movs	r3, #10
 8006914:	e019      	b.n	800694a <_printf_i+0x102>
 8006916:	680e      	ldr	r6, [r1, #0]
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800691e:	bf18      	it	ne
 8006920:	b236      	sxthne	r6, r6
 8006922:	e7ef      	b.n	8006904 <_printf_i+0xbc>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	6820      	ldr	r0, [r4, #0]
 8006928:	1d19      	adds	r1, r3, #4
 800692a:	6029      	str	r1, [r5, #0]
 800692c:	0601      	lsls	r1, r0, #24
 800692e:	d501      	bpl.n	8006934 <_printf_i+0xec>
 8006930:	681e      	ldr	r6, [r3, #0]
 8006932:	e002      	b.n	800693a <_printf_i+0xf2>
 8006934:	0646      	lsls	r6, r0, #25
 8006936:	d5fb      	bpl.n	8006930 <_printf_i+0xe8>
 8006938:	881e      	ldrh	r6, [r3, #0]
 800693a:	4854      	ldr	r0, [pc, #336]	; (8006a8c <_printf_i+0x244>)
 800693c:	2f6f      	cmp	r7, #111	; 0x6f
 800693e:	bf0c      	ite	eq
 8006940:	2308      	moveq	r3, #8
 8006942:	230a      	movne	r3, #10
 8006944:	2100      	movs	r1, #0
 8006946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800694a:	6865      	ldr	r5, [r4, #4]
 800694c:	60a5      	str	r5, [r4, #8]
 800694e:	2d00      	cmp	r5, #0
 8006950:	bfa2      	ittt	ge
 8006952:	6821      	ldrge	r1, [r4, #0]
 8006954:	f021 0104 	bicge.w	r1, r1, #4
 8006958:	6021      	strge	r1, [r4, #0]
 800695a:	b90e      	cbnz	r6, 8006960 <_printf_i+0x118>
 800695c:	2d00      	cmp	r5, #0
 800695e:	d04d      	beq.n	80069fc <_printf_i+0x1b4>
 8006960:	4615      	mov	r5, r2
 8006962:	fbb6 f1f3 	udiv	r1, r6, r3
 8006966:	fb03 6711 	mls	r7, r3, r1, r6
 800696a:	5dc7      	ldrb	r7, [r0, r7]
 800696c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006970:	4637      	mov	r7, r6
 8006972:	42bb      	cmp	r3, r7
 8006974:	460e      	mov	r6, r1
 8006976:	d9f4      	bls.n	8006962 <_printf_i+0x11a>
 8006978:	2b08      	cmp	r3, #8
 800697a:	d10b      	bne.n	8006994 <_printf_i+0x14c>
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	07de      	lsls	r6, r3, #31
 8006980:	d508      	bpl.n	8006994 <_printf_i+0x14c>
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	6861      	ldr	r1, [r4, #4]
 8006986:	4299      	cmp	r1, r3
 8006988:	bfde      	ittt	le
 800698a:	2330      	movle	r3, #48	; 0x30
 800698c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006994:	1b52      	subs	r2, r2, r5
 8006996:	6122      	str	r2, [r4, #16]
 8006998:	f8cd a000 	str.w	sl, [sp]
 800699c:	464b      	mov	r3, r9
 800699e:	aa03      	add	r2, sp, #12
 80069a0:	4621      	mov	r1, r4
 80069a2:	4640      	mov	r0, r8
 80069a4:	f7ff fee2 	bl	800676c <_printf_common>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d14c      	bne.n	8006a46 <_printf_i+0x1fe>
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	b004      	add	sp, #16
 80069b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b6:	4835      	ldr	r0, [pc, #212]	; (8006a8c <_printf_i+0x244>)
 80069b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069bc:	6829      	ldr	r1, [r5, #0]
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80069c4:	6029      	str	r1, [r5, #0]
 80069c6:	061d      	lsls	r5, r3, #24
 80069c8:	d514      	bpl.n	80069f4 <_printf_i+0x1ac>
 80069ca:	07df      	lsls	r7, r3, #31
 80069cc:	bf44      	itt	mi
 80069ce:	f043 0320 	orrmi.w	r3, r3, #32
 80069d2:	6023      	strmi	r3, [r4, #0]
 80069d4:	b91e      	cbnz	r6, 80069de <_printf_i+0x196>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	f023 0320 	bic.w	r3, r3, #32
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	2310      	movs	r3, #16
 80069e0:	e7b0      	b.n	8006944 <_printf_i+0xfc>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	f043 0320 	orr.w	r3, r3, #32
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	2378      	movs	r3, #120	; 0x78
 80069ec:	4828      	ldr	r0, [pc, #160]	; (8006a90 <_printf_i+0x248>)
 80069ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f2:	e7e3      	b.n	80069bc <_printf_i+0x174>
 80069f4:	0659      	lsls	r1, r3, #25
 80069f6:	bf48      	it	mi
 80069f8:	b2b6      	uxthmi	r6, r6
 80069fa:	e7e6      	b.n	80069ca <_printf_i+0x182>
 80069fc:	4615      	mov	r5, r2
 80069fe:	e7bb      	b.n	8006978 <_printf_i+0x130>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	6826      	ldr	r6, [r4, #0]
 8006a04:	6961      	ldr	r1, [r4, #20]
 8006a06:	1d18      	adds	r0, r3, #4
 8006a08:	6028      	str	r0, [r5, #0]
 8006a0a:	0635      	lsls	r5, r6, #24
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	d501      	bpl.n	8006a14 <_printf_i+0x1cc>
 8006a10:	6019      	str	r1, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <_printf_i+0x1d2>
 8006a14:	0670      	lsls	r0, r6, #25
 8006a16:	d5fb      	bpl.n	8006a10 <_printf_i+0x1c8>
 8006a18:	8019      	strh	r1, [r3, #0]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	4615      	mov	r5, r2
 8006a20:	e7ba      	b.n	8006998 <_printf_i+0x150>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	602a      	str	r2, [r5, #0]
 8006a28:	681d      	ldr	r5, [r3, #0]
 8006a2a:	6862      	ldr	r2, [r4, #4]
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f7f9 fc06 	bl	8000240 <memchr>
 8006a34:	b108      	cbz	r0, 8006a3a <_printf_i+0x1f2>
 8006a36:	1b40      	subs	r0, r0, r5
 8006a38:	6060      	str	r0, [r4, #4]
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	6123      	str	r3, [r4, #16]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a44:	e7a8      	b.n	8006998 <_printf_i+0x150>
 8006a46:	6923      	ldr	r3, [r4, #16]
 8006a48:	462a      	mov	r2, r5
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	47d0      	blx	sl
 8006a50:	3001      	adds	r0, #1
 8006a52:	d0ab      	beq.n	80069ac <_printf_i+0x164>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	079b      	lsls	r3, r3, #30
 8006a58:	d413      	bmi.n	8006a82 <_printf_i+0x23a>
 8006a5a:	68e0      	ldr	r0, [r4, #12]
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	4298      	cmp	r0, r3
 8006a60:	bfb8      	it	lt
 8006a62:	4618      	movlt	r0, r3
 8006a64:	e7a4      	b.n	80069b0 <_printf_i+0x168>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4632      	mov	r2, r6
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	47d0      	blx	sl
 8006a70:	3001      	adds	r0, #1
 8006a72:	d09b      	beq.n	80069ac <_printf_i+0x164>
 8006a74:	3501      	adds	r5, #1
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	9903      	ldr	r1, [sp, #12]
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	42ab      	cmp	r3, r5
 8006a7e:	dcf2      	bgt.n	8006a66 <_printf_i+0x21e>
 8006a80:	e7eb      	b.n	8006a5a <_printf_i+0x212>
 8006a82:	2500      	movs	r5, #0
 8006a84:	f104 0619 	add.w	r6, r4, #25
 8006a88:	e7f5      	b.n	8006a76 <_printf_i+0x22e>
 8006a8a:	bf00      	nop
 8006a8c:	0800ae2a 	.word	0x0800ae2a
 8006a90:	0800ae3b 	.word	0x0800ae3b

08006a94 <_scanf_float>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	4617      	mov	r7, r2
 8006a9c:	9303      	str	r3, [sp, #12]
 8006a9e:	688b      	ldr	r3, [r1, #8]
 8006aa0:	1e5a      	subs	r2, r3, #1
 8006aa2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006aa6:	bf83      	ittte	hi
 8006aa8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006aac:	195b      	addhi	r3, r3, r5
 8006aae:	9302      	strhi	r3, [sp, #8]
 8006ab0:	2300      	movls	r3, #0
 8006ab2:	bf86      	itte	hi
 8006ab4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ab8:	608b      	strhi	r3, [r1, #8]
 8006aba:	9302      	strls	r3, [sp, #8]
 8006abc:	680b      	ldr	r3, [r1, #0]
 8006abe:	468b      	mov	fp, r1
 8006ac0:	2500      	movs	r5, #0
 8006ac2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ac6:	f84b 3b1c 	str.w	r3, [fp], #28
 8006aca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ace:	4680      	mov	r8, r0
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	465e      	mov	r6, fp
 8006ad4:	46aa      	mov	sl, r5
 8006ad6:	46a9      	mov	r9, r5
 8006ad8:	9501      	str	r5, [sp, #4]
 8006ada:	68a2      	ldr	r2, [r4, #8]
 8006adc:	b152      	cbz	r2, 8006af4 <_scanf_float+0x60>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ae4:	d864      	bhi.n	8006bb0 <_scanf_float+0x11c>
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d83c      	bhi.n	8006b64 <_scanf_float+0xd0>
 8006aea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006aee:	b2c8      	uxtb	r0, r1
 8006af0:	280e      	cmp	r0, #14
 8006af2:	d93a      	bls.n	8006b6a <_scanf_float+0xd6>
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	d003      	beq.n	8006b02 <_scanf_float+0x6e>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b06:	f1ba 0f01 	cmp.w	sl, #1
 8006b0a:	f200 8113 	bhi.w	8006d34 <_scanf_float+0x2a0>
 8006b0e:	455e      	cmp	r6, fp
 8006b10:	f200 8105 	bhi.w	8006d1e <_scanf_float+0x28a>
 8006b14:	2501      	movs	r5, #1
 8006b16:	4628      	mov	r0, r5
 8006b18:	b007      	add	sp, #28
 8006b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b22:	2a0d      	cmp	r2, #13
 8006b24:	d8e6      	bhi.n	8006af4 <_scanf_float+0x60>
 8006b26:	a101      	add	r1, pc, #4	; (adr r1, 8006b2c <_scanf_float+0x98>)
 8006b28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b2c:	08006c6b 	.word	0x08006c6b
 8006b30:	08006af5 	.word	0x08006af5
 8006b34:	08006af5 	.word	0x08006af5
 8006b38:	08006af5 	.word	0x08006af5
 8006b3c:	08006ccb 	.word	0x08006ccb
 8006b40:	08006ca3 	.word	0x08006ca3
 8006b44:	08006af5 	.word	0x08006af5
 8006b48:	08006af5 	.word	0x08006af5
 8006b4c:	08006c79 	.word	0x08006c79
 8006b50:	08006af5 	.word	0x08006af5
 8006b54:	08006af5 	.word	0x08006af5
 8006b58:	08006af5 	.word	0x08006af5
 8006b5c:	08006af5 	.word	0x08006af5
 8006b60:	08006c31 	.word	0x08006c31
 8006b64:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b68:	e7db      	b.n	8006b22 <_scanf_float+0x8e>
 8006b6a:	290e      	cmp	r1, #14
 8006b6c:	d8c2      	bhi.n	8006af4 <_scanf_float+0x60>
 8006b6e:	a001      	add	r0, pc, #4	; (adr r0, 8006b74 <_scanf_float+0xe0>)
 8006b70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b74:	08006c23 	.word	0x08006c23
 8006b78:	08006af5 	.word	0x08006af5
 8006b7c:	08006c23 	.word	0x08006c23
 8006b80:	08006cb7 	.word	0x08006cb7
 8006b84:	08006af5 	.word	0x08006af5
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006c0d 	.word	0x08006c0d
 8006b90:	08006c0d 	.word	0x08006c0d
 8006b94:	08006c0d 	.word	0x08006c0d
 8006b98:	08006c0d 	.word	0x08006c0d
 8006b9c:	08006c0d 	.word	0x08006c0d
 8006ba0:	08006c0d 	.word	0x08006c0d
 8006ba4:	08006c0d 	.word	0x08006c0d
 8006ba8:	08006c0d 	.word	0x08006c0d
 8006bac:	08006c0d 	.word	0x08006c0d
 8006bb0:	2b6e      	cmp	r3, #110	; 0x6e
 8006bb2:	d809      	bhi.n	8006bc8 <_scanf_float+0x134>
 8006bb4:	2b60      	cmp	r3, #96	; 0x60
 8006bb6:	d8b2      	bhi.n	8006b1e <_scanf_float+0x8a>
 8006bb8:	2b54      	cmp	r3, #84	; 0x54
 8006bba:	d077      	beq.n	8006cac <_scanf_float+0x218>
 8006bbc:	2b59      	cmp	r3, #89	; 0x59
 8006bbe:	d199      	bne.n	8006af4 <_scanf_float+0x60>
 8006bc0:	2d07      	cmp	r5, #7
 8006bc2:	d197      	bne.n	8006af4 <_scanf_float+0x60>
 8006bc4:	2508      	movs	r5, #8
 8006bc6:	e029      	b.n	8006c1c <_scanf_float+0x188>
 8006bc8:	2b74      	cmp	r3, #116	; 0x74
 8006bca:	d06f      	beq.n	8006cac <_scanf_float+0x218>
 8006bcc:	2b79      	cmp	r3, #121	; 0x79
 8006bce:	e7f6      	b.n	8006bbe <_scanf_float+0x12a>
 8006bd0:	6821      	ldr	r1, [r4, #0]
 8006bd2:	05c8      	lsls	r0, r1, #23
 8006bd4:	d51a      	bpl.n	8006c0c <_scanf_float+0x178>
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bdc:	6021      	str	r1, [r4, #0]
 8006bde:	f109 0901 	add.w	r9, r9, #1
 8006be2:	b11b      	cbz	r3, 8006bec <_scanf_float+0x158>
 8006be4:	3b01      	subs	r3, #1
 8006be6:	3201      	adds	r2, #1
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	60a2      	str	r2, [r4, #8]
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	607b      	str	r3, [r7, #4]
 8006c00:	f340 8084 	ble.w	8006d0c <_scanf_float+0x278>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	e766      	b.n	8006ada <_scanf_float+0x46>
 8006c0c:	eb1a 0f05 	cmn.w	sl, r5
 8006c10:	f47f af70 	bne.w	8006af4 <_scanf_float+0x60>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c1a:	6022      	str	r2, [r4, #0]
 8006c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c20:	e7e4      	b.n	8006bec <_scanf_float+0x158>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	0610      	lsls	r0, r2, #24
 8006c26:	f57f af65 	bpl.w	8006af4 <_scanf_float+0x60>
 8006c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c2e:	e7f4      	b.n	8006c1a <_scanf_float+0x186>
 8006c30:	f1ba 0f00 	cmp.w	sl, #0
 8006c34:	d10e      	bne.n	8006c54 <_scanf_float+0x1c0>
 8006c36:	f1b9 0f00 	cmp.w	r9, #0
 8006c3a:	d10e      	bne.n	8006c5a <_scanf_float+0x1c6>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c46:	d108      	bne.n	8006c5a <_scanf_float+0x1c6>
 8006c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c4c:	6022      	str	r2, [r4, #0]
 8006c4e:	f04f 0a01 	mov.w	sl, #1
 8006c52:	e7e3      	b.n	8006c1c <_scanf_float+0x188>
 8006c54:	f1ba 0f02 	cmp.w	sl, #2
 8006c58:	d055      	beq.n	8006d06 <_scanf_float+0x272>
 8006c5a:	2d01      	cmp	r5, #1
 8006c5c:	d002      	beq.n	8006c64 <_scanf_float+0x1d0>
 8006c5e:	2d04      	cmp	r5, #4
 8006c60:	f47f af48 	bne.w	8006af4 <_scanf_float+0x60>
 8006c64:	3501      	adds	r5, #1
 8006c66:	b2ed      	uxtb	r5, r5
 8006c68:	e7d8      	b.n	8006c1c <_scanf_float+0x188>
 8006c6a:	f1ba 0f01 	cmp.w	sl, #1
 8006c6e:	f47f af41 	bne.w	8006af4 <_scanf_float+0x60>
 8006c72:	f04f 0a02 	mov.w	sl, #2
 8006c76:	e7d1      	b.n	8006c1c <_scanf_float+0x188>
 8006c78:	b97d      	cbnz	r5, 8006c9a <_scanf_float+0x206>
 8006c7a:	f1b9 0f00 	cmp.w	r9, #0
 8006c7e:	f47f af3c 	bne.w	8006afa <_scanf_float+0x66>
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c8c:	f47f af39 	bne.w	8006b02 <_scanf_float+0x6e>
 8006c90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c94:	6022      	str	r2, [r4, #0]
 8006c96:	2501      	movs	r5, #1
 8006c98:	e7c0      	b.n	8006c1c <_scanf_float+0x188>
 8006c9a:	2d03      	cmp	r5, #3
 8006c9c:	d0e2      	beq.n	8006c64 <_scanf_float+0x1d0>
 8006c9e:	2d05      	cmp	r5, #5
 8006ca0:	e7de      	b.n	8006c60 <_scanf_float+0x1cc>
 8006ca2:	2d02      	cmp	r5, #2
 8006ca4:	f47f af26 	bne.w	8006af4 <_scanf_float+0x60>
 8006ca8:	2503      	movs	r5, #3
 8006caa:	e7b7      	b.n	8006c1c <_scanf_float+0x188>
 8006cac:	2d06      	cmp	r5, #6
 8006cae:	f47f af21 	bne.w	8006af4 <_scanf_float+0x60>
 8006cb2:	2507      	movs	r5, #7
 8006cb4:	e7b2      	b.n	8006c1c <_scanf_float+0x188>
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	0591      	lsls	r1, r2, #22
 8006cba:	f57f af1b 	bpl.w	8006af4 <_scanf_float+0x60>
 8006cbe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cc8:	e7a8      	b.n	8006c1c <_scanf_float+0x188>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cd0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cd4:	d006      	beq.n	8006ce4 <_scanf_float+0x250>
 8006cd6:	0550      	lsls	r0, r2, #21
 8006cd8:	f57f af0c 	bpl.w	8006af4 <_scanf_float+0x60>
 8006cdc:	f1b9 0f00 	cmp.w	r9, #0
 8006ce0:	f43f af0f 	beq.w	8006b02 <_scanf_float+0x6e>
 8006ce4:	0591      	lsls	r1, r2, #22
 8006ce6:	bf58      	it	pl
 8006ce8:	9901      	ldrpl	r1, [sp, #4]
 8006cea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cee:	bf58      	it	pl
 8006cf0:	eba9 0101 	subpl.w	r1, r9, r1
 8006cf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cf8:	bf58      	it	pl
 8006cfa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cfe:	6022      	str	r2, [r4, #0]
 8006d00:	f04f 0900 	mov.w	r9, #0
 8006d04:	e78a      	b.n	8006c1c <_scanf_float+0x188>
 8006d06:	f04f 0a03 	mov.w	sl, #3
 8006d0a:	e787      	b.n	8006c1c <_scanf_float+0x188>
 8006d0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d10:	4639      	mov	r1, r7
 8006d12:	4640      	mov	r0, r8
 8006d14:	4798      	blx	r3
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f43f aedf 	beq.w	8006ada <_scanf_float+0x46>
 8006d1c:	e6ea      	b.n	8006af4 <_scanf_float+0x60>
 8006d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d26:	463a      	mov	r2, r7
 8006d28:	4640      	mov	r0, r8
 8006d2a:	4798      	blx	r3
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	e6ec      	b.n	8006b0e <_scanf_float+0x7a>
 8006d34:	1e6b      	subs	r3, r5, #1
 8006d36:	2b06      	cmp	r3, #6
 8006d38:	d825      	bhi.n	8006d86 <_scanf_float+0x2f2>
 8006d3a:	2d02      	cmp	r5, #2
 8006d3c:	d836      	bhi.n	8006dac <_scanf_float+0x318>
 8006d3e:	455e      	cmp	r6, fp
 8006d40:	f67f aee8 	bls.w	8006b14 <_scanf_float+0x80>
 8006d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d4c:	463a      	mov	r2, r7
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4798      	blx	r3
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	6123      	str	r3, [r4, #16]
 8006d58:	e7f1      	b.n	8006d3e <_scanf_float+0x2aa>
 8006d5a:	9802      	ldr	r0, [sp, #8]
 8006d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d64:	9002      	str	r0, [sp, #8]
 8006d66:	463a      	mov	r2, r7
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4798      	blx	r3
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d76:	fa5f fa8a 	uxtb.w	sl, sl
 8006d7a:	f1ba 0f02 	cmp.w	sl, #2
 8006d7e:	d1ec      	bne.n	8006d5a <_scanf_float+0x2c6>
 8006d80:	3d03      	subs	r5, #3
 8006d82:	b2ed      	uxtb	r5, r5
 8006d84:	1b76      	subs	r6, r6, r5
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	05da      	lsls	r2, r3, #23
 8006d8a:	d52f      	bpl.n	8006dec <_scanf_float+0x358>
 8006d8c:	055b      	lsls	r3, r3, #21
 8006d8e:	d510      	bpl.n	8006db2 <_scanf_float+0x31e>
 8006d90:	455e      	cmp	r6, fp
 8006d92:	f67f aebf 	bls.w	8006b14 <_scanf_float+0x80>
 8006d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d9e:	463a      	mov	r2, r7
 8006da0:	4640      	mov	r0, r8
 8006da2:	4798      	blx	r3
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	e7f1      	b.n	8006d90 <_scanf_float+0x2fc>
 8006dac:	46aa      	mov	sl, r5
 8006dae:	9602      	str	r6, [sp, #8]
 8006db0:	e7df      	b.n	8006d72 <_scanf_float+0x2de>
 8006db2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	2965      	cmp	r1, #101	; 0x65
 8006dba:	f103 33ff 	add.w	r3, r3, #4294967295
 8006dbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	d00c      	beq.n	8006de0 <_scanf_float+0x34c>
 8006dc6:	2945      	cmp	r1, #69	; 0x45
 8006dc8:	d00a      	beq.n	8006de0 <_scanf_float+0x34c>
 8006dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dce:	463a      	mov	r2, r7
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4798      	blx	r3
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	1eb5      	subs	r5, r6, #2
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006de4:	463a      	mov	r2, r7
 8006de6:	4640      	mov	r0, r8
 8006de8:	4798      	blx	r3
 8006dea:	462e      	mov	r6, r5
 8006dec:	6825      	ldr	r5, [r4, #0]
 8006dee:	f015 0510 	ands.w	r5, r5, #16
 8006df2:	d159      	bne.n	8006ea8 <_scanf_float+0x414>
 8006df4:	7035      	strb	r5, [r6, #0]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e00:	d11b      	bne.n	8006e3a <_scanf_float+0x3a6>
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	454b      	cmp	r3, r9
 8006e06:	eba3 0209 	sub.w	r2, r3, r9
 8006e0a:	d123      	bne.n	8006e54 <_scanf_float+0x3c0>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4659      	mov	r1, fp
 8006e10:	4640      	mov	r0, r8
 8006e12:	f000 fef7 	bl	8007c04 <_strtod_r>
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	f012 0f02 	tst.w	r2, #2
 8006e1e:	ec57 6b10 	vmov	r6, r7, d0
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	d021      	beq.n	8006e6a <_scanf_float+0x3d6>
 8006e26:	9903      	ldr	r1, [sp, #12]
 8006e28:	1d1a      	adds	r2, r3, #4
 8006e2a:	600a      	str	r2, [r1, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	e9c3 6700 	strd	r6, r7, [r3]
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60e3      	str	r3, [r4, #12]
 8006e38:	e66d      	b.n	8006b16 <_scanf_float+0x82>
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0e5      	beq.n	8006e0c <_scanf_float+0x378>
 8006e40:	9905      	ldr	r1, [sp, #20]
 8006e42:	230a      	movs	r3, #10
 8006e44:	462a      	mov	r2, r5
 8006e46:	3101      	adds	r1, #1
 8006e48:	4640      	mov	r0, r8
 8006e4a:	f000 ffbf 	bl	8007dcc <_strtol_r>
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	9e05      	ldr	r6, [sp, #20]
 8006e52:	1ac2      	subs	r2, r0, r3
 8006e54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e58:	429e      	cmp	r6, r3
 8006e5a:	bf28      	it	cs
 8006e5c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e60:	4912      	ldr	r1, [pc, #72]	; (8006eac <_scanf_float+0x418>)
 8006e62:	4630      	mov	r0, r6
 8006e64:	f000 f870 	bl	8006f48 <siprintf>
 8006e68:	e7d0      	b.n	8006e0c <_scanf_float+0x378>
 8006e6a:	9903      	ldr	r1, [sp, #12]
 8006e6c:	f012 0f04 	tst.w	r2, #4
 8006e70:	f103 0204 	add.w	r2, r3, #4
 8006e74:	600a      	str	r2, [r1, #0]
 8006e76:	d1d9      	bne.n	8006e2c <_scanf_float+0x398>
 8006e78:	f8d3 8000 	ldr.w	r8, [r3]
 8006e7c:	ee10 2a10 	vmov	r2, s0
 8006e80:	ee10 0a10 	vmov	r0, s0
 8006e84:	463b      	mov	r3, r7
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fe80 	bl	8000b8c <__aeabi_dcmpun>
 8006e8c:	b128      	cbz	r0, 8006e9a <_scanf_float+0x406>
 8006e8e:	4808      	ldr	r0, [pc, #32]	; (8006eb0 <_scanf_float+0x41c>)
 8006e90:	f000 f820 	bl	8006ed4 <nanf>
 8006e94:	ed88 0a00 	vstr	s0, [r8]
 8006e98:	e7cb      	b.n	8006e32 <_scanf_float+0x39e>
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 fed3 	bl	8000c48 <__aeabi_d2f>
 8006ea2:	f8c8 0000 	str.w	r0, [r8]
 8006ea6:	e7c4      	b.n	8006e32 <_scanf_float+0x39e>
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	e634      	b.n	8006b16 <_scanf_float+0x82>
 8006eac:	0800ae4c 	.word	0x0800ae4c
 8006eb0:	0800af57 	.word	0x0800af57

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d06      	ldr	r5, [pc, #24]	; (8006ed0 <_sbrk_r+0x1c>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fa fb60 	bl	8001584 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	200005b4 	.word	0x200005b4

08006ed4 <nanf>:
 8006ed4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006edc <nanf+0x8>
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	7fc00000 	.word	0x7fc00000

08006ee0 <sniprintf>:
 8006ee0:	b40c      	push	{r2, r3}
 8006ee2:	b530      	push	{r4, r5, lr}
 8006ee4:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <sniprintf+0x64>)
 8006ee6:	1e0c      	subs	r4, r1, #0
 8006ee8:	681d      	ldr	r5, [r3, #0]
 8006eea:	b09d      	sub	sp, #116	; 0x74
 8006eec:	da08      	bge.n	8006f00 <sniprintf+0x20>
 8006eee:	238b      	movs	r3, #139	; 0x8b
 8006ef0:	602b      	str	r3, [r5, #0]
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	b01d      	add	sp, #116	; 0x74
 8006ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006efc:	b002      	add	sp, #8
 8006efe:	4770      	bx	lr
 8006f00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f08:	bf14      	ite	ne
 8006f0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f0e:	4623      	moveq	r3, r4
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	9307      	str	r3, [sp, #28]
 8006f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f18:	9002      	str	r0, [sp, #8]
 8006f1a:	9006      	str	r0, [sp, #24]
 8006f1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f22:	ab21      	add	r3, sp, #132	; 0x84
 8006f24:	a902      	add	r1, sp, #8
 8006f26:	4628      	mov	r0, r5
 8006f28:	9301      	str	r3, [sp, #4]
 8006f2a:	f002 fed7 	bl	8009cdc <_svfiprintf_r>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	bfbc      	itt	lt
 8006f32:	238b      	movlt	r3, #139	; 0x8b
 8006f34:	602b      	strlt	r3, [r5, #0]
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d0dd      	beq.n	8006ef6 <sniprintf+0x16>
 8006f3a:	9b02      	ldr	r3, [sp, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e7d9      	b.n	8006ef6 <sniprintf+0x16>
 8006f42:	bf00      	nop
 8006f44:	2000000c 	.word	0x2000000c

08006f48 <siprintf>:
 8006f48:	b40e      	push	{r1, r2, r3}
 8006f4a:	b500      	push	{lr}
 8006f4c:	b09c      	sub	sp, #112	; 0x70
 8006f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f50:	9002      	str	r0, [sp, #8]
 8006f52:	9006      	str	r0, [sp, #24]
 8006f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f58:	4809      	ldr	r0, [pc, #36]	; (8006f80 <siprintf+0x38>)
 8006f5a:	9107      	str	r1, [sp, #28]
 8006f5c:	9104      	str	r1, [sp, #16]
 8006f5e:	4909      	ldr	r1, [pc, #36]	; (8006f84 <siprintf+0x3c>)
 8006f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f64:	9105      	str	r1, [sp, #20]
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	a902      	add	r1, sp, #8
 8006f6c:	f002 feb6 	bl	8009cdc <_svfiprintf_r>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	b01c      	add	sp, #112	; 0x70
 8006f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f7c:	b003      	add	sp, #12
 8006f7e:	4770      	bx	lr
 8006f80:	2000000c 	.word	0x2000000c
 8006f84:	ffff0208 	.word	0xffff0208

08006f88 <strcpy>:
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8e:	f803 2b01 	strb.w	r2, [r3], #1
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	d1f9      	bne.n	8006f8a <strcpy+0x2>
 8006f96:	4770      	bx	lr

08006f98 <strncpy>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	3901      	subs	r1, #1
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	b132      	cbz	r2, 8006fae <strncpy+0x16>
 8006fa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fa4:	f803 4b01 	strb.w	r4, [r3], #1
 8006fa8:	3a01      	subs	r2, #1
 8006faa:	2c00      	cmp	r4, #0
 8006fac:	d1f7      	bne.n	8006f9e <strncpy+0x6>
 8006fae:	441a      	add	r2, r3
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d100      	bne.n	8006fb8 <strncpy+0x20>
 8006fb6:	bd10      	pop	{r4, pc}
 8006fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbc:	e7f9      	b.n	8006fb2 <strncpy+0x1a>

08006fbe <sulp>:
 8006fbe:	b570      	push	{r4, r5, r6, lr}
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	460d      	mov	r5, r1
 8006fc4:	ec45 4b10 	vmov	d0, r4, r5
 8006fc8:	4616      	mov	r6, r2
 8006fca:	f002 fcc7 	bl	800995c <__ulp>
 8006fce:	ec51 0b10 	vmov	r0, r1, d0
 8006fd2:	b17e      	cbz	r6, 8006ff4 <sulp+0x36>
 8006fd4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dd09      	ble.n	8006ff4 <sulp+0x36>
 8006fe0:	051b      	lsls	r3, r3, #20
 8006fe2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fe6:	2400      	movs	r4, #0
 8006fe8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fec:	4622      	mov	r2, r4
 8006fee:	462b      	mov	r3, r5
 8006ff0:	f7f9 fb32 	bl	8000658 <__aeabi_dmul>
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ff8 <_strtod_l>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	ed2d 8b02 	vpush	{d8}
 8007000:	b09d      	sub	sp, #116	; 0x74
 8007002:	461f      	mov	r7, r3
 8007004:	2300      	movs	r3, #0
 8007006:	9318      	str	r3, [sp, #96]	; 0x60
 8007008:	4ba2      	ldr	r3, [pc, #648]	; (8007294 <_strtod_l+0x29c>)
 800700a:	9213      	str	r2, [sp, #76]	; 0x4c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	9305      	str	r3, [sp, #20]
 8007010:	4604      	mov	r4, r0
 8007012:	4618      	mov	r0, r3
 8007014:	4688      	mov	r8, r1
 8007016:	f7f9 f905 	bl	8000224 <strlen>
 800701a:	f04f 0a00 	mov.w	sl, #0
 800701e:	4605      	mov	r5, r0
 8007020:	f04f 0b00 	mov.w	fp, #0
 8007024:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702a:	781a      	ldrb	r2, [r3, #0]
 800702c:	2a2b      	cmp	r2, #43	; 0x2b
 800702e:	d04e      	beq.n	80070ce <_strtod_l+0xd6>
 8007030:	d83b      	bhi.n	80070aa <_strtod_l+0xb2>
 8007032:	2a0d      	cmp	r2, #13
 8007034:	d834      	bhi.n	80070a0 <_strtod_l+0xa8>
 8007036:	2a08      	cmp	r2, #8
 8007038:	d834      	bhi.n	80070a4 <_strtod_l+0xac>
 800703a:	2a00      	cmp	r2, #0
 800703c:	d03e      	beq.n	80070bc <_strtod_l+0xc4>
 800703e:	2300      	movs	r3, #0
 8007040:	930a      	str	r3, [sp, #40]	; 0x28
 8007042:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007044:	7833      	ldrb	r3, [r6, #0]
 8007046:	2b30      	cmp	r3, #48	; 0x30
 8007048:	f040 80b0 	bne.w	80071ac <_strtod_l+0x1b4>
 800704c:	7873      	ldrb	r3, [r6, #1]
 800704e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007052:	2b58      	cmp	r3, #88	; 0x58
 8007054:	d168      	bne.n	8007128 <_strtod_l+0x130>
 8007056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	ab18      	add	r3, sp, #96	; 0x60
 800705c:	9702      	str	r7, [sp, #8]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4a8d      	ldr	r2, [pc, #564]	; (8007298 <_strtod_l+0x2a0>)
 8007062:	ab19      	add	r3, sp, #100	; 0x64
 8007064:	a917      	add	r1, sp, #92	; 0x5c
 8007066:	4620      	mov	r0, r4
 8007068:	f001 fdce 	bl	8008c08 <__gethex>
 800706c:	f010 0707 	ands.w	r7, r0, #7
 8007070:	4605      	mov	r5, r0
 8007072:	d005      	beq.n	8007080 <_strtod_l+0x88>
 8007074:	2f06      	cmp	r7, #6
 8007076:	d12c      	bne.n	80070d2 <_strtod_l+0xda>
 8007078:	3601      	adds	r6, #1
 800707a:	2300      	movs	r3, #0
 800707c:	9617      	str	r6, [sp, #92]	; 0x5c
 800707e:	930a      	str	r3, [sp, #40]	; 0x28
 8007080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007082:	2b00      	cmp	r3, #0
 8007084:	f040 8590 	bne.w	8007ba8 <_strtod_l+0xbb0>
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	b1eb      	cbz	r3, 80070c8 <_strtod_l+0xd0>
 800708c:	4652      	mov	r2, sl
 800708e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007092:	ec43 2b10 	vmov	d0, r2, r3
 8007096:	b01d      	add	sp, #116	; 0x74
 8007098:	ecbd 8b02 	vpop	{d8}
 800709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a0:	2a20      	cmp	r2, #32
 80070a2:	d1cc      	bne.n	800703e <_strtod_l+0x46>
 80070a4:	3301      	adds	r3, #1
 80070a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80070a8:	e7be      	b.n	8007028 <_strtod_l+0x30>
 80070aa:	2a2d      	cmp	r2, #45	; 0x2d
 80070ac:	d1c7      	bne.n	800703e <_strtod_l+0x46>
 80070ae:	2201      	movs	r2, #1
 80070b0:	920a      	str	r2, [sp, #40]	; 0x28
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1c2      	bne.n	8007042 <_strtod_l+0x4a>
 80070bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 856e 	bne.w	8007ba4 <_strtod_l+0xbac>
 80070c8:	4652      	mov	r2, sl
 80070ca:	465b      	mov	r3, fp
 80070cc:	e7e1      	b.n	8007092 <_strtod_l+0x9a>
 80070ce:	2200      	movs	r2, #0
 80070d0:	e7ee      	b.n	80070b0 <_strtod_l+0xb8>
 80070d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070d4:	b13a      	cbz	r2, 80070e6 <_strtod_l+0xee>
 80070d6:	2135      	movs	r1, #53	; 0x35
 80070d8:	a81a      	add	r0, sp, #104	; 0x68
 80070da:	f002 fd4a 	bl	8009b72 <__copybits>
 80070de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070e0:	4620      	mov	r0, r4
 80070e2:	f002 f909 	bl	80092f8 <_Bfree>
 80070e6:	3f01      	subs	r7, #1
 80070e8:	2f04      	cmp	r7, #4
 80070ea:	d806      	bhi.n	80070fa <_strtod_l+0x102>
 80070ec:	e8df f007 	tbb	[pc, r7]
 80070f0:	1714030a 	.word	0x1714030a
 80070f4:	0a          	.byte	0x0a
 80070f5:	00          	.byte	0x00
 80070f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80070fa:	0728      	lsls	r0, r5, #28
 80070fc:	d5c0      	bpl.n	8007080 <_strtod_l+0x88>
 80070fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007102:	e7bd      	b.n	8007080 <_strtod_l+0x88>
 8007104:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007108:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800710a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800710e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007112:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007116:	e7f0      	b.n	80070fa <_strtod_l+0x102>
 8007118:	f8df b180 	ldr.w	fp, [pc, #384]	; 800729c <_strtod_l+0x2a4>
 800711c:	e7ed      	b.n	80070fa <_strtod_l+0x102>
 800711e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007122:	f04f 3aff 	mov.w	sl, #4294967295
 8007126:	e7e8      	b.n	80070fa <_strtod_l+0x102>
 8007128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	9217      	str	r2, [sp, #92]	; 0x5c
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b30      	cmp	r3, #48	; 0x30
 8007132:	d0f9      	beq.n	8007128 <_strtod_l+0x130>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0a3      	beq.n	8007080 <_strtod_l+0x88>
 8007138:	2301      	movs	r3, #1
 800713a:	f04f 0900 	mov.w	r9, #0
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007142:	9308      	str	r3, [sp, #32]
 8007144:	f8cd 901c 	str.w	r9, [sp, #28]
 8007148:	464f      	mov	r7, r9
 800714a:	220a      	movs	r2, #10
 800714c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800714e:	7806      	ldrb	r6, [r0, #0]
 8007150:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007154:	b2d9      	uxtb	r1, r3
 8007156:	2909      	cmp	r1, #9
 8007158:	d92a      	bls.n	80071b0 <_strtod_l+0x1b8>
 800715a:	9905      	ldr	r1, [sp, #20]
 800715c:	462a      	mov	r2, r5
 800715e:	f003 f81f 	bl	800a1a0 <strncmp>
 8007162:	b398      	cbz	r0, 80071cc <_strtod_l+0x1d4>
 8007164:	2000      	movs	r0, #0
 8007166:	4632      	mov	r2, r6
 8007168:	463d      	mov	r5, r7
 800716a:	9005      	str	r0, [sp, #20]
 800716c:	4603      	mov	r3, r0
 800716e:	2a65      	cmp	r2, #101	; 0x65
 8007170:	d001      	beq.n	8007176 <_strtod_l+0x17e>
 8007172:	2a45      	cmp	r2, #69	; 0x45
 8007174:	d118      	bne.n	80071a8 <_strtod_l+0x1b0>
 8007176:	b91d      	cbnz	r5, 8007180 <_strtod_l+0x188>
 8007178:	9a04      	ldr	r2, [sp, #16]
 800717a:	4302      	orrs	r2, r0
 800717c:	d09e      	beq.n	80070bc <_strtod_l+0xc4>
 800717e:	2500      	movs	r5, #0
 8007180:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007184:	f108 0201 	add.w	r2, r8, #1
 8007188:	9217      	str	r2, [sp, #92]	; 0x5c
 800718a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800718e:	2a2b      	cmp	r2, #43	; 0x2b
 8007190:	d075      	beq.n	800727e <_strtod_l+0x286>
 8007192:	2a2d      	cmp	r2, #45	; 0x2d
 8007194:	d07b      	beq.n	800728e <_strtod_l+0x296>
 8007196:	f04f 0c00 	mov.w	ip, #0
 800719a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800719e:	2909      	cmp	r1, #9
 80071a0:	f240 8082 	bls.w	80072a8 <_strtod_l+0x2b0>
 80071a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071a8:	2600      	movs	r6, #0
 80071aa:	e09d      	b.n	80072e8 <_strtod_l+0x2f0>
 80071ac:	2300      	movs	r3, #0
 80071ae:	e7c4      	b.n	800713a <_strtod_l+0x142>
 80071b0:	2f08      	cmp	r7, #8
 80071b2:	bfd8      	it	le
 80071b4:	9907      	ldrle	r1, [sp, #28]
 80071b6:	f100 0001 	add.w	r0, r0, #1
 80071ba:	bfda      	itte	le
 80071bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80071c0:	9307      	strle	r3, [sp, #28]
 80071c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80071c6:	3701      	adds	r7, #1
 80071c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80071ca:	e7bf      	b.n	800714c <_strtod_l+0x154>
 80071cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ce:	195a      	adds	r2, r3, r5
 80071d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80071d2:	5d5a      	ldrb	r2, [r3, r5]
 80071d4:	2f00      	cmp	r7, #0
 80071d6:	d037      	beq.n	8007248 <_strtod_l+0x250>
 80071d8:	9005      	str	r0, [sp, #20]
 80071da:	463d      	mov	r5, r7
 80071dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071e0:	2b09      	cmp	r3, #9
 80071e2:	d912      	bls.n	800720a <_strtod_l+0x212>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e7c2      	b.n	800716e <_strtod_l+0x176>
 80071e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80071ee:	785a      	ldrb	r2, [r3, #1]
 80071f0:	3001      	adds	r0, #1
 80071f2:	2a30      	cmp	r2, #48	; 0x30
 80071f4:	d0f8      	beq.n	80071e8 <_strtod_l+0x1f0>
 80071f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	f200 84d9 	bhi.w	8007bb2 <_strtod_l+0xbba>
 8007200:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007202:	9005      	str	r0, [sp, #20]
 8007204:	2000      	movs	r0, #0
 8007206:	9308      	str	r3, [sp, #32]
 8007208:	4605      	mov	r5, r0
 800720a:	3a30      	subs	r2, #48	; 0x30
 800720c:	f100 0301 	add.w	r3, r0, #1
 8007210:	d014      	beq.n	800723c <_strtod_l+0x244>
 8007212:	9905      	ldr	r1, [sp, #20]
 8007214:	4419      	add	r1, r3
 8007216:	9105      	str	r1, [sp, #20]
 8007218:	462b      	mov	r3, r5
 800721a:	eb00 0e05 	add.w	lr, r0, r5
 800721e:	210a      	movs	r1, #10
 8007220:	4573      	cmp	r3, lr
 8007222:	d113      	bne.n	800724c <_strtod_l+0x254>
 8007224:	182b      	adds	r3, r5, r0
 8007226:	2b08      	cmp	r3, #8
 8007228:	f105 0501 	add.w	r5, r5, #1
 800722c:	4405      	add	r5, r0
 800722e:	dc1c      	bgt.n	800726a <_strtod_l+0x272>
 8007230:	9907      	ldr	r1, [sp, #28]
 8007232:	230a      	movs	r3, #10
 8007234:	fb03 2301 	mla	r3, r3, r1, r2
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	2300      	movs	r3, #0
 800723c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800723e:	1c51      	adds	r1, r2, #1
 8007240:	9117      	str	r1, [sp, #92]	; 0x5c
 8007242:	7852      	ldrb	r2, [r2, #1]
 8007244:	4618      	mov	r0, r3
 8007246:	e7c9      	b.n	80071dc <_strtod_l+0x1e4>
 8007248:	4638      	mov	r0, r7
 800724a:	e7d2      	b.n	80071f2 <_strtod_l+0x1fa>
 800724c:	2b08      	cmp	r3, #8
 800724e:	dc04      	bgt.n	800725a <_strtod_l+0x262>
 8007250:	9e07      	ldr	r6, [sp, #28]
 8007252:	434e      	muls	r6, r1
 8007254:	9607      	str	r6, [sp, #28]
 8007256:	3301      	adds	r3, #1
 8007258:	e7e2      	b.n	8007220 <_strtod_l+0x228>
 800725a:	f103 0c01 	add.w	ip, r3, #1
 800725e:	f1bc 0f10 	cmp.w	ip, #16
 8007262:	bfd8      	it	le
 8007264:	fb01 f909 	mulle.w	r9, r1, r9
 8007268:	e7f5      	b.n	8007256 <_strtod_l+0x25e>
 800726a:	2d10      	cmp	r5, #16
 800726c:	bfdc      	itt	le
 800726e:	230a      	movle	r3, #10
 8007270:	fb03 2909 	mlale	r9, r3, r9, r2
 8007274:	e7e1      	b.n	800723a <_strtod_l+0x242>
 8007276:	2300      	movs	r3, #0
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	2301      	movs	r3, #1
 800727c:	e77c      	b.n	8007178 <_strtod_l+0x180>
 800727e:	f04f 0c00 	mov.w	ip, #0
 8007282:	f108 0202 	add.w	r2, r8, #2
 8007286:	9217      	str	r2, [sp, #92]	; 0x5c
 8007288:	f898 2002 	ldrb.w	r2, [r8, #2]
 800728c:	e785      	b.n	800719a <_strtod_l+0x1a2>
 800728e:	f04f 0c01 	mov.w	ip, #1
 8007292:	e7f6      	b.n	8007282 <_strtod_l+0x28a>
 8007294:	0800b038 	.word	0x0800b038
 8007298:	0800ae54 	.word	0x0800ae54
 800729c:	7ff00000 	.word	0x7ff00000
 80072a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072a2:	1c51      	adds	r1, r2, #1
 80072a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80072a6:	7852      	ldrb	r2, [r2, #1]
 80072a8:	2a30      	cmp	r2, #48	; 0x30
 80072aa:	d0f9      	beq.n	80072a0 <_strtod_l+0x2a8>
 80072ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80072b0:	2908      	cmp	r1, #8
 80072b2:	f63f af79 	bhi.w	80071a8 <_strtod_l+0x1b0>
 80072b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80072ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072bc:	9206      	str	r2, [sp, #24]
 80072be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072c0:	1c51      	adds	r1, r2, #1
 80072c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80072c4:	7852      	ldrb	r2, [r2, #1]
 80072c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80072ca:	2e09      	cmp	r6, #9
 80072cc:	d937      	bls.n	800733e <_strtod_l+0x346>
 80072ce:	9e06      	ldr	r6, [sp, #24]
 80072d0:	1b89      	subs	r1, r1, r6
 80072d2:	2908      	cmp	r1, #8
 80072d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80072d8:	dc02      	bgt.n	80072e0 <_strtod_l+0x2e8>
 80072da:	4576      	cmp	r6, lr
 80072dc:	bfa8      	it	ge
 80072de:	4676      	movge	r6, lr
 80072e0:	f1bc 0f00 	cmp.w	ip, #0
 80072e4:	d000      	beq.n	80072e8 <_strtod_l+0x2f0>
 80072e6:	4276      	negs	r6, r6
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	d14d      	bne.n	8007388 <_strtod_l+0x390>
 80072ec:	9904      	ldr	r1, [sp, #16]
 80072ee:	4301      	orrs	r1, r0
 80072f0:	f47f aec6 	bne.w	8007080 <_strtod_l+0x88>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f47f aee1 	bne.w	80070bc <_strtod_l+0xc4>
 80072fa:	2a69      	cmp	r2, #105	; 0x69
 80072fc:	d027      	beq.n	800734e <_strtod_l+0x356>
 80072fe:	dc24      	bgt.n	800734a <_strtod_l+0x352>
 8007300:	2a49      	cmp	r2, #73	; 0x49
 8007302:	d024      	beq.n	800734e <_strtod_l+0x356>
 8007304:	2a4e      	cmp	r2, #78	; 0x4e
 8007306:	f47f aed9 	bne.w	80070bc <_strtod_l+0xc4>
 800730a:	499f      	ldr	r1, [pc, #636]	; (8007588 <_strtod_l+0x590>)
 800730c:	a817      	add	r0, sp, #92	; 0x5c
 800730e:	f001 fed3 	bl	80090b8 <__match>
 8007312:	2800      	cmp	r0, #0
 8007314:	f43f aed2 	beq.w	80070bc <_strtod_l+0xc4>
 8007318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b28      	cmp	r3, #40	; 0x28
 800731e:	d12d      	bne.n	800737c <_strtod_l+0x384>
 8007320:	499a      	ldr	r1, [pc, #616]	; (800758c <_strtod_l+0x594>)
 8007322:	aa1a      	add	r2, sp, #104	; 0x68
 8007324:	a817      	add	r0, sp, #92	; 0x5c
 8007326:	f001 fedb 	bl	80090e0 <__hexnan>
 800732a:	2805      	cmp	r0, #5
 800732c:	d126      	bne.n	800737c <_strtod_l+0x384>
 800732e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007330:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007334:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007338:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800733c:	e6a0      	b.n	8007080 <_strtod_l+0x88>
 800733e:	210a      	movs	r1, #10
 8007340:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007344:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007348:	e7b9      	b.n	80072be <_strtod_l+0x2c6>
 800734a:	2a6e      	cmp	r2, #110	; 0x6e
 800734c:	e7db      	b.n	8007306 <_strtod_l+0x30e>
 800734e:	4990      	ldr	r1, [pc, #576]	; (8007590 <_strtod_l+0x598>)
 8007350:	a817      	add	r0, sp, #92	; 0x5c
 8007352:	f001 feb1 	bl	80090b8 <__match>
 8007356:	2800      	cmp	r0, #0
 8007358:	f43f aeb0 	beq.w	80070bc <_strtod_l+0xc4>
 800735c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800735e:	498d      	ldr	r1, [pc, #564]	; (8007594 <_strtod_l+0x59c>)
 8007360:	3b01      	subs	r3, #1
 8007362:	a817      	add	r0, sp, #92	; 0x5c
 8007364:	9317      	str	r3, [sp, #92]	; 0x5c
 8007366:	f001 fea7 	bl	80090b8 <__match>
 800736a:	b910      	cbnz	r0, 8007372 <_strtod_l+0x37a>
 800736c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800736e:	3301      	adds	r3, #1
 8007370:	9317      	str	r3, [sp, #92]	; 0x5c
 8007372:	f8df b230 	ldr.w	fp, [pc, #560]	; 80075a4 <_strtod_l+0x5ac>
 8007376:	f04f 0a00 	mov.w	sl, #0
 800737a:	e681      	b.n	8007080 <_strtod_l+0x88>
 800737c:	4886      	ldr	r0, [pc, #536]	; (8007598 <_strtod_l+0x5a0>)
 800737e:	f002 ff07 	bl	800a190 <nan>
 8007382:	ec5b ab10 	vmov	sl, fp, d0
 8007386:	e67b      	b.n	8007080 <_strtod_l+0x88>
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	9807      	ldr	r0, [sp, #28]
 800738c:	1af3      	subs	r3, r6, r3
 800738e:	2f00      	cmp	r7, #0
 8007390:	bf08      	it	eq
 8007392:	462f      	moveq	r7, r5
 8007394:	2d10      	cmp	r5, #16
 8007396:	9306      	str	r3, [sp, #24]
 8007398:	46a8      	mov	r8, r5
 800739a:	bfa8      	it	ge
 800739c:	f04f 0810 	movge.w	r8, #16
 80073a0:	f7f9 f8e0 	bl	8000564 <__aeabi_ui2d>
 80073a4:	2d09      	cmp	r5, #9
 80073a6:	4682      	mov	sl, r0
 80073a8:	468b      	mov	fp, r1
 80073aa:	dd13      	ble.n	80073d4 <_strtod_l+0x3dc>
 80073ac:	4b7b      	ldr	r3, [pc, #492]	; (800759c <_strtod_l+0x5a4>)
 80073ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073b6:	f7f9 f94f 	bl	8000658 <__aeabi_dmul>
 80073ba:	4682      	mov	sl, r0
 80073bc:	4648      	mov	r0, r9
 80073be:	468b      	mov	fp, r1
 80073c0:	f7f9 f8d0 	bl	8000564 <__aeabi_ui2d>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4650      	mov	r0, sl
 80073ca:	4659      	mov	r1, fp
 80073cc:	f7f8 ff8e 	bl	80002ec <__adddf3>
 80073d0:	4682      	mov	sl, r0
 80073d2:	468b      	mov	fp, r1
 80073d4:	2d0f      	cmp	r5, #15
 80073d6:	dc38      	bgt.n	800744a <_strtod_l+0x452>
 80073d8:	9b06      	ldr	r3, [sp, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f43f ae50 	beq.w	8007080 <_strtod_l+0x88>
 80073e0:	dd24      	ble.n	800742c <_strtod_l+0x434>
 80073e2:	2b16      	cmp	r3, #22
 80073e4:	dc0b      	bgt.n	80073fe <_strtod_l+0x406>
 80073e6:	496d      	ldr	r1, [pc, #436]	; (800759c <_strtod_l+0x5a4>)
 80073e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f0:	4652      	mov	r2, sl
 80073f2:	465b      	mov	r3, fp
 80073f4:	f7f9 f930 	bl	8000658 <__aeabi_dmul>
 80073f8:	4682      	mov	sl, r0
 80073fa:	468b      	mov	fp, r1
 80073fc:	e640      	b.n	8007080 <_strtod_l+0x88>
 80073fe:	9a06      	ldr	r2, [sp, #24]
 8007400:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007404:	4293      	cmp	r3, r2
 8007406:	db20      	blt.n	800744a <_strtod_l+0x452>
 8007408:	4c64      	ldr	r4, [pc, #400]	; (800759c <_strtod_l+0x5a4>)
 800740a:	f1c5 050f 	rsb	r5, r5, #15
 800740e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007412:	4652      	mov	r2, sl
 8007414:	465b      	mov	r3, fp
 8007416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800741a:	f7f9 f91d 	bl	8000658 <__aeabi_dmul>
 800741e:	9b06      	ldr	r3, [sp, #24]
 8007420:	1b5d      	subs	r5, r3, r5
 8007422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800742a:	e7e3      	b.n	80073f4 <_strtod_l+0x3fc>
 800742c:	9b06      	ldr	r3, [sp, #24]
 800742e:	3316      	adds	r3, #22
 8007430:	db0b      	blt.n	800744a <_strtod_l+0x452>
 8007432:	9b05      	ldr	r3, [sp, #20]
 8007434:	1b9e      	subs	r6, r3, r6
 8007436:	4b59      	ldr	r3, [pc, #356]	; (800759c <_strtod_l+0x5a4>)
 8007438:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800743c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007440:	4650      	mov	r0, sl
 8007442:	4659      	mov	r1, fp
 8007444:	f7f9 fa32 	bl	80008ac <__aeabi_ddiv>
 8007448:	e7d6      	b.n	80073f8 <_strtod_l+0x400>
 800744a:	9b06      	ldr	r3, [sp, #24]
 800744c:	eba5 0808 	sub.w	r8, r5, r8
 8007450:	4498      	add	r8, r3
 8007452:	f1b8 0f00 	cmp.w	r8, #0
 8007456:	dd74      	ble.n	8007542 <_strtod_l+0x54a>
 8007458:	f018 030f 	ands.w	r3, r8, #15
 800745c:	d00a      	beq.n	8007474 <_strtod_l+0x47c>
 800745e:	494f      	ldr	r1, [pc, #316]	; (800759c <_strtod_l+0x5a4>)
 8007460:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007464:	4652      	mov	r2, sl
 8007466:	465b      	mov	r3, fp
 8007468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800746c:	f7f9 f8f4 	bl	8000658 <__aeabi_dmul>
 8007470:	4682      	mov	sl, r0
 8007472:	468b      	mov	fp, r1
 8007474:	f038 080f 	bics.w	r8, r8, #15
 8007478:	d04f      	beq.n	800751a <_strtod_l+0x522>
 800747a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800747e:	dd22      	ble.n	80074c6 <_strtod_l+0x4ce>
 8007480:	2500      	movs	r5, #0
 8007482:	462e      	mov	r6, r5
 8007484:	9507      	str	r5, [sp, #28]
 8007486:	9505      	str	r5, [sp, #20]
 8007488:	2322      	movs	r3, #34	; 0x22
 800748a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80075a4 <_strtod_l+0x5ac>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	f04f 0a00 	mov.w	sl, #0
 8007494:	9b07      	ldr	r3, [sp, #28]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f43f adf2 	beq.w	8007080 <_strtod_l+0x88>
 800749c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800749e:	4620      	mov	r0, r4
 80074a0:	f001 ff2a 	bl	80092f8 <_Bfree>
 80074a4:	9905      	ldr	r1, [sp, #20]
 80074a6:	4620      	mov	r0, r4
 80074a8:	f001 ff26 	bl	80092f8 <_Bfree>
 80074ac:	4631      	mov	r1, r6
 80074ae:	4620      	mov	r0, r4
 80074b0:	f001 ff22 	bl	80092f8 <_Bfree>
 80074b4:	9907      	ldr	r1, [sp, #28]
 80074b6:	4620      	mov	r0, r4
 80074b8:	f001 ff1e 	bl	80092f8 <_Bfree>
 80074bc:	4629      	mov	r1, r5
 80074be:	4620      	mov	r0, r4
 80074c0:	f001 ff1a 	bl	80092f8 <_Bfree>
 80074c4:	e5dc      	b.n	8007080 <_strtod_l+0x88>
 80074c6:	4b36      	ldr	r3, [pc, #216]	; (80075a0 <_strtod_l+0x5a8>)
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	2300      	movs	r3, #0
 80074cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80074d0:	4650      	mov	r0, sl
 80074d2:	4659      	mov	r1, fp
 80074d4:	4699      	mov	r9, r3
 80074d6:	f1b8 0f01 	cmp.w	r8, #1
 80074da:	dc21      	bgt.n	8007520 <_strtod_l+0x528>
 80074dc:	b10b      	cbz	r3, 80074e2 <_strtod_l+0x4ea>
 80074de:	4682      	mov	sl, r0
 80074e0:	468b      	mov	fp, r1
 80074e2:	4b2f      	ldr	r3, [pc, #188]	; (80075a0 <_strtod_l+0x5a8>)
 80074e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80074e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80074ec:	4652      	mov	r2, sl
 80074ee:	465b      	mov	r3, fp
 80074f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80074f4:	f7f9 f8b0 	bl	8000658 <__aeabi_dmul>
 80074f8:	4b2a      	ldr	r3, [pc, #168]	; (80075a4 <_strtod_l+0x5ac>)
 80074fa:	460a      	mov	r2, r1
 80074fc:	400b      	ands	r3, r1
 80074fe:	492a      	ldr	r1, [pc, #168]	; (80075a8 <_strtod_l+0x5b0>)
 8007500:	428b      	cmp	r3, r1
 8007502:	4682      	mov	sl, r0
 8007504:	d8bc      	bhi.n	8007480 <_strtod_l+0x488>
 8007506:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800750a:	428b      	cmp	r3, r1
 800750c:	bf86      	itte	hi
 800750e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80075ac <_strtod_l+0x5b4>
 8007512:	f04f 3aff 	movhi.w	sl, #4294967295
 8007516:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800751a:	2300      	movs	r3, #0
 800751c:	9304      	str	r3, [sp, #16]
 800751e:	e084      	b.n	800762a <_strtod_l+0x632>
 8007520:	f018 0f01 	tst.w	r8, #1
 8007524:	d005      	beq.n	8007532 <_strtod_l+0x53a>
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f7f9 f894 	bl	8000658 <__aeabi_dmul>
 8007530:	2301      	movs	r3, #1
 8007532:	9a04      	ldr	r2, [sp, #16]
 8007534:	3208      	adds	r2, #8
 8007536:	f109 0901 	add.w	r9, r9, #1
 800753a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800753e:	9204      	str	r2, [sp, #16]
 8007540:	e7c9      	b.n	80074d6 <_strtod_l+0x4de>
 8007542:	d0ea      	beq.n	800751a <_strtod_l+0x522>
 8007544:	f1c8 0800 	rsb	r8, r8, #0
 8007548:	f018 020f 	ands.w	r2, r8, #15
 800754c:	d00a      	beq.n	8007564 <_strtod_l+0x56c>
 800754e:	4b13      	ldr	r3, [pc, #76]	; (800759c <_strtod_l+0x5a4>)
 8007550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007554:	4650      	mov	r0, sl
 8007556:	4659      	mov	r1, fp
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	f7f9 f9a6 	bl	80008ac <__aeabi_ddiv>
 8007560:	4682      	mov	sl, r0
 8007562:	468b      	mov	fp, r1
 8007564:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007568:	d0d7      	beq.n	800751a <_strtod_l+0x522>
 800756a:	f1b8 0f1f 	cmp.w	r8, #31
 800756e:	dd1f      	ble.n	80075b0 <_strtod_l+0x5b8>
 8007570:	2500      	movs	r5, #0
 8007572:	462e      	mov	r6, r5
 8007574:	9507      	str	r5, [sp, #28]
 8007576:	9505      	str	r5, [sp, #20]
 8007578:	2322      	movs	r3, #34	; 0x22
 800757a:	f04f 0a00 	mov.w	sl, #0
 800757e:	f04f 0b00 	mov.w	fp, #0
 8007582:	6023      	str	r3, [r4, #0]
 8007584:	e786      	b.n	8007494 <_strtod_l+0x49c>
 8007586:	bf00      	nop
 8007588:	0800ae25 	.word	0x0800ae25
 800758c:	0800ae68 	.word	0x0800ae68
 8007590:	0800ae1d 	.word	0x0800ae1d
 8007594:	0800af5b 	.word	0x0800af5b
 8007598:	0800af57 	.word	0x0800af57
 800759c:	0800b0d0 	.word	0x0800b0d0
 80075a0:	0800b0a8 	.word	0x0800b0a8
 80075a4:	7ff00000 	.word	0x7ff00000
 80075a8:	7ca00000 	.word	0x7ca00000
 80075ac:	7fefffff 	.word	0x7fefffff
 80075b0:	f018 0310 	ands.w	r3, r8, #16
 80075b4:	bf18      	it	ne
 80075b6:	236a      	movne	r3, #106	; 0x6a
 80075b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007968 <_strtod_l+0x970>
 80075bc:	9304      	str	r3, [sp, #16]
 80075be:	4650      	mov	r0, sl
 80075c0:	4659      	mov	r1, fp
 80075c2:	2300      	movs	r3, #0
 80075c4:	f018 0f01 	tst.w	r8, #1
 80075c8:	d004      	beq.n	80075d4 <_strtod_l+0x5dc>
 80075ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80075ce:	f7f9 f843 	bl	8000658 <__aeabi_dmul>
 80075d2:	2301      	movs	r3, #1
 80075d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80075d8:	f109 0908 	add.w	r9, r9, #8
 80075dc:	d1f2      	bne.n	80075c4 <_strtod_l+0x5cc>
 80075de:	b10b      	cbz	r3, 80075e4 <_strtod_l+0x5ec>
 80075e0:	4682      	mov	sl, r0
 80075e2:	468b      	mov	fp, r1
 80075e4:	9b04      	ldr	r3, [sp, #16]
 80075e6:	b1c3      	cbz	r3, 800761a <_strtod_l+0x622>
 80075e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80075ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	4659      	mov	r1, fp
 80075f4:	dd11      	ble.n	800761a <_strtod_l+0x622>
 80075f6:	2b1f      	cmp	r3, #31
 80075f8:	f340 8124 	ble.w	8007844 <_strtod_l+0x84c>
 80075fc:	2b34      	cmp	r3, #52	; 0x34
 80075fe:	bfde      	ittt	le
 8007600:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007604:	f04f 33ff 	movle.w	r3, #4294967295
 8007608:	fa03 f202 	lslle.w	r2, r3, r2
 800760c:	f04f 0a00 	mov.w	sl, #0
 8007610:	bfcc      	ite	gt
 8007612:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007616:	ea02 0b01 	andle.w	fp, r2, r1
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	4650      	mov	r0, sl
 8007620:	4659      	mov	r1, fp
 8007622:	f7f9 fa81 	bl	8000b28 <__aeabi_dcmpeq>
 8007626:	2800      	cmp	r0, #0
 8007628:	d1a2      	bne.n	8007570 <_strtod_l+0x578>
 800762a:	9b07      	ldr	r3, [sp, #28]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	9908      	ldr	r1, [sp, #32]
 8007630:	462b      	mov	r3, r5
 8007632:	463a      	mov	r2, r7
 8007634:	4620      	mov	r0, r4
 8007636:	f001 fec7 	bl	80093c8 <__s2b>
 800763a:	9007      	str	r0, [sp, #28]
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f af1f 	beq.w	8007480 <_strtod_l+0x488>
 8007642:	9b05      	ldr	r3, [sp, #20]
 8007644:	1b9e      	subs	r6, r3, r6
 8007646:	9b06      	ldr	r3, [sp, #24]
 8007648:	2b00      	cmp	r3, #0
 800764a:	bfb4      	ite	lt
 800764c:	4633      	movlt	r3, r6
 800764e:	2300      	movge	r3, #0
 8007650:	930c      	str	r3, [sp, #48]	; 0x30
 8007652:	9b06      	ldr	r3, [sp, #24]
 8007654:	2500      	movs	r5, #0
 8007656:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800765a:	9312      	str	r3, [sp, #72]	; 0x48
 800765c:	462e      	mov	r6, r5
 800765e:	9b07      	ldr	r3, [sp, #28]
 8007660:	4620      	mov	r0, r4
 8007662:	6859      	ldr	r1, [r3, #4]
 8007664:	f001 fe08 	bl	8009278 <_Balloc>
 8007668:	9005      	str	r0, [sp, #20]
 800766a:	2800      	cmp	r0, #0
 800766c:	f43f af0c 	beq.w	8007488 <_strtod_l+0x490>
 8007670:	9b07      	ldr	r3, [sp, #28]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	3202      	adds	r2, #2
 8007676:	f103 010c 	add.w	r1, r3, #12
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	300c      	adds	r0, #12
 800767e:	f001 fde1 	bl	8009244 <memcpy>
 8007682:	ec4b ab10 	vmov	d0, sl, fp
 8007686:	aa1a      	add	r2, sp, #104	; 0x68
 8007688:	a919      	add	r1, sp, #100	; 0x64
 800768a:	4620      	mov	r0, r4
 800768c:	f002 f9e2 	bl	8009a54 <__d2b>
 8007690:	ec4b ab18 	vmov	d8, sl, fp
 8007694:	9018      	str	r0, [sp, #96]	; 0x60
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f aef6 	beq.w	8007488 <_strtod_l+0x490>
 800769c:	2101      	movs	r1, #1
 800769e:	4620      	mov	r0, r4
 80076a0:	f001 ff2c 	bl	80094fc <__i2b>
 80076a4:	4606      	mov	r6, r0
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f43f aeee 	beq.w	8007488 <_strtod_l+0x490>
 80076ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076ae:	9904      	ldr	r1, [sp, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfab      	itete	ge
 80076b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80076b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80076b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80076ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80076be:	bfac      	ite	ge
 80076c0:	eb03 0902 	addge.w	r9, r3, r2
 80076c4:	1ad7      	sublt	r7, r2, r3
 80076c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076c8:	eba3 0801 	sub.w	r8, r3, r1
 80076cc:	4490      	add	r8, r2
 80076ce:	4ba1      	ldr	r3, [pc, #644]	; (8007954 <_strtod_l+0x95c>)
 80076d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80076d4:	4598      	cmp	r8, r3
 80076d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076da:	f280 80c7 	bge.w	800786c <_strtod_l+0x874>
 80076de:	eba3 0308 	sub.w	r3, r3, r8
 80076e2:	2b1f      	cmp	r3, #31
 80076e4:	eba2 0203 	sub.w	r2, r2, r3
 80076e8:	f04f 0101 	mov.w	r1, #1
 80076ec:	f300 80b1 	bgt.w	8007852 <_strtod_l+0x85a>
 80076f0:	fa01 f303 	lsl.w	r3, r1, r3
 80076f4:	930d      	str	r3, [sp, #52]	; 0x34
 80076f6:	2300      	movs	r3, #0
 80076f8:	9308      	str	r3, [sp, #32]
 80076fa:	eb09 0802 	add.w	r8, r9, r2
 80076fe:	9b04      	ldr	r3, [sp, #16]
 8007700:	45c1      	cmp	r9, r8
 8007702:	4417      	add	r7, r2
 8007704:	441f      	add	r7, r3
 8007706:	464b      	mov	r3, r9
 8007708:	bfa8      	it	ge
 800770a:	4643      	movge	r3, r8
 800770c:	42bb      	cmp	r3, r7
 800770e:	bfa8      	it	ge
 8007710:	463b      	movge	r3, r7
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfc2      	ittt	gt
 8007716:	eba8 0803 	subgt.w	r8, r8, r3
 800771a:	1aff      	subgt	r7, r7, r3
 800771c:	eba9 0903 	subgt.w	r9, r9, r3
 8007720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007722:	2b00      	cmp	r3, #0
 8007724:	dd17      	ble.n	8007756 <_strtod_l+0x75e>
 8007726:	4631      	mov	r1, r6
 8007728:	461a      	mov	r2, r3
 800772a:	4620      	mov	r0, r4
 800772c:	f001 ffa6 	bl	800967c <__pow5mult>
 8007730:	4606      	mov	r6, r0
 8007732:	2800      	cmp	r0, #0
 8007734:	f43f aea8 	beq.w	8007488 <_strtod_l+0x490>
 8007738:	4601      	mov	r1, r0
 800773a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800773c:	4620      	mov	r0, r4
 800773e:	f001 fef3 	bl	8009528 <__multiply>
 8007742:	900b      	str	r0, [sp, #44]	; 0x2c
 8007744:	2800      	cmp	r0, #0
 8007746:	f43f ae9f 	beq.w	8007488 <_strtod_l+0x490>
 800774a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800774c:	4620      	mov	r0, r4
 800774e:	f001 fdd3 	bl	80092f8 <_Bfree>
 8007752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007754:	9318      	str	r3, [sp, #96]	; 0x60
 8007756:	f1b8 0f00 	cmp.w	r8, #0
 800775a:	f300 808c 	bgt.w	8007876 <_strtod_l+0x87e>
 800775e:	9b06      	ldr	r3, [sp, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dd08      	ble.n	8007776 <_strtod_l+0x77e>
 8007764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007766:	9905      	ldr	r1, [sp, #20]
 8007768:	4620      	mov	r0, r4
 800776a:	f001 ff87 	bl	800967c <__pow5mult>
 800776e:	9005      	str	r0, [sp, #20]
 8007770:	2800      	cmp	r0, #0
 8007772:	f43f ae89 	beq.w	8007488 <_strtod_l+0x490>
 8007776:	2f00      	cmp	r7, #0
 8007778:	dd08      	ble.n	800778c <_strtod_l+0x794>
 800777a:	9905      	ldr	r1, [sp, #20]
 800777c:	463a      	mov	r2, r7
 800777e:	4620      	mov	r0, r4
 8007780:	f001 ffd6 	bl	8009730 <__lshift>
 8007784:	9005      	str	r0, [sp, #20]
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f ae7e 	beq.w	8007488 <_strtod_l+0x490>
 800778c:	f1b9 0f00 	cmp.w	r9, #0
 8007790:	dd08      	ble.n	80077a4 <_strtod_l+0x7ac>
 8007792:	4631      	mov	r1, r6
 8007794:	464a      	mov	r2, r9
 8007796:	4620      	mov	r0, r4
 8007798:	f001 ffca 	bl	8009730 <__lshift>
 800779c:	4606      	mov	r6, r0
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f ae72 	beq.w	8007488 <_strtod_l+0x490>
 80077a4:	9a05      	ldr	r2, [sp, #20]
 80077a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077a8:	4620      	mov	r0, r4
 80077aa:	f002 f84d 	bl	8009848 <__mdiff>
 80077ae:	4605      	mov	r5, r0
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f43f ae69 	beq.w	8007488 <_strtod_l+0x490>
 80077b6:	68c3      	ldr	r3, [r0, #12]
 80077b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ba:	2300      	movs	r3, #0
 80077bc:	60c3      	str	r3, [r0, #12]
 80077be:	4631      	mov	r1, r6
 80077c0:	f002 f826 	bl	8009810 <__mcmp>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	da60      	bge.n	800788a <_strtod_l+0x892>
 80077c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ca:	ea53 030a 	orrs.w	r3, r3, sl
 80077ce:	f040 8082 	bne.w	80078d6 <_strtod_l+0x8de>
 80077d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d17d      	bne.n	80078d6 <_strtod_l+0x8de>
 80077da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077de:	0d1b      	lsrs	r3, r3, #20
 80077e0:	051b      	lsls	r3, r3, #20
 80077e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077e6:	d976      	bls.n	80078d6 <_strtod_l+0x8de>
 80077e8:	696b      	ldr	r3, [r5, #20]
 80077ea:	b913      	cbnz	r3, 80077f2 <_strtod_l+0x7fa>
 80077ec:	692b      	ldr	r3, [r5, #16]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	dd71      	ble.n	80078d6 <_strtod_l+0x8de>
 80077f2:	4629      	mov	r1, r5
 80077f4:	2201      	movs	r2, #1
 80077f6:	4620      	mov	r0, r4
 80077f8:	f001 ff9a 	bl	8009730 <__lshift>
 80077fc:	4631      	mov	r1, r6
 80077fe:	4605      	mov	r5, r0
 8007800:	f002 f806 	bl	8009810 <__mcmp>
 8007804:	2800      	cmp	r0, #0
 8007806:	dd66      	ble.n	80078d6 <_strtod_l+0x8de>
 8007808:	9904      	ldr	r1, [sp, #16]
 800780a:	4a53      	ldr	r2, [pc, #332]	; (8007958 <_strtod_l+0x960>)
 800780c:	465b      	mov	r3, fp
 800780e:	2900      	cmp	r1, #0
 8007810:	f000 8081 	beq.w	8007916 <_strtod_l+0x91e>
 8007814:	ea02 010b 	and.w	r1, r2, fp
 8007818:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800781c:	dc7b      	bgt.n	8007916 <_strtod_l+0x91e>
 800781e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007822:	f77f aea9 	ble.w	8007578 <_strtod_l+0x580>
 8007826:	4b4d      	ldr	r3, [pc, #308]	; (800795c <_strtod_l+0x964>)
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	2200      	movs	r2, #0
 800782e:	f7f8 ff13 	bl	8000658 <__aeabi_dmul>
 8007832:	460b      	mov	r3, r1
 8007834:	4303      	orrs	r3, r0
 8007836:	bf08      	it	eq
 8007838:	2322      	moveq	r3, #34	; 0x22
 800783a:	4682      	mov	sl, r0
 800783c:	468b      	mov	fp, r1
 800783e:	bf08      	it	eq
 8007840:	6023      	streq	r3, [r4, #0]
 8007842:	e62b      	b.n	800749c <_strtod_l+0x4a4>
 8007844:	f04f 32ff 	mov.w	r2, #4294967295
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	ea03 0a0a 	and.w	sl, r3, sl
 8007850:	e6e3      	b.n	800761a <_strtod_l+0x622>
 8007852:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007856:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800785a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800785e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007862:	fa01 f308 	lsl.w	r3, r1, r8
 8007866:	9308      	str	r3, [sp, #32]
 8007868:	910d      	str	r1, [sp, #52]	; 0x34
 800786a:	e746      	b.n	80076fa <_strtod_l+0x702>
 800786c:	2300      	movs	r3, #0
 800786e:	9308      	str	r3, [sp, #32]
 8007870:	2301      	movs	r3, #1
 8007872:	930d      	str	r3, [sp, #52]	; 0x34
 8007874:	e741      	b.n	80076fa <_strtod_l+0x702>
 8007876:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007878:	4642      	mov	r2, r8
 800787a:	4620      	mov	r0, r4
 800787c:	f001 ff58 	bl	8009730 <__lshift>
 8007880:	9018      	str	r0, [sp, #96]	; 0x60
 8007882:	2800      	cmp	r0, #0
 8007884:	f47f af6b 	bne.w	800775e <_strtod_l+0x766>
 8007888:	e5fe      	b.n	8007488 <_strtod_l+0x490>
 800788a:	465f      	mov	r7, fp
 800788c:	d16e      	bne.n	800796c <_strtod_l+0x974>
 800788e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007890:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007894:	b342      	cbz	r2, 80078e8 <_strtod_l+0x8f0>
 8007896:	4a32      	ldr	r2, [pc, #200]	; (8007960 <_strtod_l+0x968>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d128      	bne.n	80078ee <_strtod_l+0x8f6>
 800789c:	9b04      	ldr	r3, [sp, #16]
 800789e:	4651      	mov	r1, sl
 80078a0:	b1eb      	cbz	r3, 80078de <_strtod_l+0x8e6>
 80078a2:	4b2d      	ldr	r3, [pc, #180]	; (8007958 <_strtod_l+0x960>)
 80078a4:	403b      	ands	r3, r7
 80078a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295
 80078ae:	d819      	bhi.n	80078e4 <_strtod_l+0x8ec>
 80078b0:	0d1b      	lsrs	r3, r3, #20
 80078b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	4299      	cmp	r1, r3
 80078bc:	d117      	bne.n	80078ee <_strtod_l+0x8f6>
 80078be:	4b29      	ldr	r3, [pc, #164]	; (8007964 <_strtod_l+0x96c>)
 80078c0:	429f      	cmp	r7, r3
 80078c2:	d102      	bne.n	80078ca <_strtod_l+0x8d2>
 80078c4:	3101      	adds	r1, #1
 80078c6:	f43f addf 	beq.w	8007488 <_strtod_l+0x490>
 80078ca:	4b23      	ldr	r3, [pc, #140]	; (8007958 <_strtod_l+0x960>)
 80078cc:	403b      	ands	r3, r7
 80078ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80078d2:	f04f 0a00 	mov.w	sl, #0
 80078d6:	9b04      	ldr	r3, [sp, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1a4      	bne.n	8007826 <_strtod_l+0x82e>
 80078dc:	e5de      	b.n	800749c <_strtod_l+0x4a4>
 80078de:	f04f 33ff 	mov.w	r3, #4294967295
 80078e2:	e7ea      	b.n	80078ba <_strtod_l+0x8c2>
 80078e4:	4613      	mov	r3, r2
 80078e6:	e7e8      	b.n	80078ba <_strtod_l+0x8c2>
 80078e8:	ea53 030a 	orrs.w	r3, r3, sl
 80078ec:	d08c      	beq.n	8007808 <_strtod_l+0x810>
 80078ee:	9b08      	ldr	r3, [sp, #32]
 80078f0:	b1db      	cbz	r3, 800792a <_strtod_l+0x932>
 80078f2:	423b      	tst	r3, r7
 80078f4:	d0ef      	beq.n	80078d6 <_strtod_l+0x8de>
 80078f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f8:	9a04      	ldr	r2, [sp, #16]
 80078fa:	4650      	mov	r0, sl
 80078fc:	4659      	mov	r1, fp
 80078fe:	b1c3      	cbz	r3, 8007932 <_strtod_l+0x93a>
 8007900:	f7ff fb5d 	bl	8006fbe <sulp>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	ec51 0b18 	vmov	r0, r1, d8
 800790c:	f7f8 fcee 	bl	80002ec <__adddf3>
 8007910:	4682      	mov	sl, r0
 8007912:	468b      	mov	fp, r1
 8007914:	e7df      	b.n	80078d6 <_strtod_l+0x8de>
 8007916:	4013      	ands	r3, r2
 8007918:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800791c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007920:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007924:	f04f 3aff 	mov.w	sl, #4294967295
 8007928:	e7d5      	b.n	80078d6 <_strtod_l+0x8de>
 800792a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800792c:	ea13 0f0a 	tst.w	r3, sl
 8007930:	e7e0      	b.n	80078f4 <_strtod_l+0x8fc>
 8007932:	f7ff fb44 	bl	8006fbe <sulp>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	ec51 0b18 	vmov	r0, r1, d8
 800793e:	f7f8 fcd3 	bl	80002e8 <__aeabi_dsub>
 8007942:	2200      	movs	r2, #0
 8007944:	2300      	movs	r3, #0
 8007946:	4682      	mov	sl, r0
 8007948:	468b      	mov	fp, r1
 800794a:	f7f9 f8ed 	bl	8000b28 <__aeabi_dcmpeq>
 800794e:	2800      	cmp	r0, #0
 8007950:	d0c1      	beq.n	80078d6 <_strtod_l+0x8de>
 8007952:	e611      	b.n	8007578 <_strtod_l+0x580>
 8007954:	fffffc02 	.word	0xfffffc02
 8007958:	7ff00000 	.word	0x7ff00000
 800795c:	39500000 	.word	0x39500000
 8007960:	000fffff 	.word	0x000fffff
 8007964:	7fefffff 	.word	0x7fefffff
 8007968:	0800ae80 	.word	0x0800ae80
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	f002 f8cc 	bl	8009b0c <__ratio>
 8007974:	ec59 8b10 	vmov	r8, r9, d0
 8007978:	ee10 0a10 	vmov	r0, s0
 800797c:	2200      	movs	r2, #0
 800797e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007982:	4649      	mov	r1, r9
 8007984:	f7f9 f8e4 	bl	8000b50 <__aeabi_dcmple>
 8007988:	2800      	cmp	r0, #0
 800798a:	d07a      	beq.n	8007a82 <_strtod_l+0xa8a>
 800798c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d04a      	beq.n	8007a28 <_strtod_l+0xa30>
 8007992:	4b95      	ldr	r3, [pc, #596]	; (8007be8 <_strtod_l+0xbf0>)
 8007994:	2200      	movs	r2, #0
 8007996:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800799a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007be8 <_strtod_l+0xbf0>
 800799e:	f04f 0800 	mov.w	r8, #0
 80079a2:	4b92      	ldr	r3, [pc, #584]	; (8007bec <_strtod_l+0xbf4>)
 80079a4:	403b      	ands	r3, r7
 80079a6:	930d      	str	r3, [sp, #52]	; 0x34
 80079a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079aa:	4b91      	ldr	r3, [pc, #580]	; (8007bf0 <_strtod_l+0xbf8>)
 80079ac:	429a      	cmp	r2, r3
 80079ae:	f040 80b0 	bne.w	8007b12 <_strtod_l+0xb1a>
 80079b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80079ba:	ec4b ab10 	vmov	d0, sl, fp
 80079be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079c2:	f001 ffcb 	bl	800995c <__ulp>
 80079c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079ca:	ec53 2b10 	vmov	r2, r3, d0
 80079ce:	f7f8 fe43 	bl	8000658 <__aeabi_dmul>
 80079d2:	4652      	mov	r2, sl
 80079d4:	465b      	mov	r3, fp
 80079d6:	f7f8 fc89 	bl	80002ec <__adddf3>
 80079da:	460b      	mov	r3, r1
 80079dc:	4983      	ldr	r1, [pc, #524]	; (8007bec <_strtod_l+0xbf4>)
 80079de:	4a85      	ldr	r2, [pc, #532]	; (8007bf4 <_strtod_l+0xbfc>)
 80079e0:	4019      	ands	r1, r3
 80079e2:	4291      	cmp	r1, r2
 80079e4:	4682      	mov	sl, r0
 80079e6:	d960      	bls.n	8007aaa <_strtod_l+0xab2>
 80079e8:	ee18 3a90 	vmov	r3, s17
 80079ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d104      	bne.n	80079fe <_strtod_l+0xa06>
 80079f4:	ee18 3a10 	vmov	r3, s16
 80079f8:	3301      	adds	r3, #1
 80079fa:	f43f ad45 	beq.w	8007488 <_strtod_l+0x490>
 80079fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007c00 <_strtod_l+0xc08>
 8007a02:	f04f 3aff 	mov.w	sl, #4294967295
 8007a06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f001 fc75 	bl	80092f8 <_Bfree>
 8007a0e:	9905      	ldr	r1, [sp, #20]
 8007a10:	4620      	mov	r0, r4
 8007a12:	f001 fc71 	bl	80092f8 <_Bfree>
 8007a16:	4631      	mov	r1, r6
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 fc6d 	bl	80092f8 <_Bfree>
 8007a1e:	4629      	mov	r1, r5
 8007a20:	4620      	mov	r0, r4
 8007a22:	f001 fc69 	bl	80092f8 <_Bfree>
 8007a26:	e61a      	b.n	800765e <_strtod_l+0x666>
 8007a28:	f1ba 0f00 	cmp.w	sl, #0
 8007a2c:	d11b      	bne.n	8007a66 <_strtod_l+0xa6e>
 8007a2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a32:	b9f3      	cbnz	r3, 8007a72 <_strtod_l+0xa7a>
 8007a34:	4b6c      	ldr	r3, [pc, #432]	; (8007be8 <_strtod_l+0xbf0>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	4640      	mov	r0, r8
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	f7f9 f87e 	bl	8000b3c <__aeabi_dcmplt>
 8007a40:	b9d0      	cbnz	r0, 8007a78 <_strtod_l+0xa80>
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	4b6c      	ldr	r3, [pc, #432]	; (8007bf8 <_strtod_l+0xc00>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f7f8 fe05 	bl	8000658 <__aeabi_dmul>
 8007a4e:	4680      	mov	r8, r0
 8007a50:	4689      	mov	r9, r1
 8007a52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007a5a:	9315      	str	r3, [sp, #84]	; 0x54
 8007a5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a64:	e79d      	b.n	80079a2 <_strtod_l+0x9aa>
 8007a66:	f1ba 0f01 	cmp.w	sl, #1
 8007a6a:	d102      	bne.n	8007a72 <_strtod_l+0xa7a>
 8007a6c:	2f00      	cmp	r7, #0
 8007a6e:	f43f ad83 	beq.w	8007578 <_strtod_l+0x580>
 8007a72:	4b62      	ldr	r3, [pc, #392]	; (8007bfc <_strtod_l+0xc04>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	e78e      	b.n	8007996 <_strtod_l+0x99e>
 8007a78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007bf8 <_strtod_l+0xc00>
 8007a7c:	f04f 0800 	mov.w	r8, #0
 8007a80:	e7e7      	b.n	8007a52 <_strtod_l+0xa5a>
 8007a82:	4b5d      	ldr	r3, [pc, #372]	; (8007bf8 <_strtod_l+0xc00>)
 8007a84:	4640      	mov	r0, r8
 8007a86:	4649      	mov	r1, r9
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f7f8 fde5 	bl	8000658 <__aeabi_dmul>
 8007a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a90:	4680      	mov	r8, r0
 8007a92:	4689      	mov	r9, r1
 8007a94:	b933      	cbnz	r3, 8007aa4 <_strtod_l+0xaac>
 8007a96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a9a:	900e      	str	r0, [sp, #56]	; 0x38
 8007a9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007aa2:	e7dd      	b.n	8007a60 <_strtod_l+0xa68>
 8007aa4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007aa8:	e7f9      	b.n	8007a9e <_strtod_l+0xaa6>
 8007aaa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1a8      	bne.n	8007a06 <_strtod_l+0xa0e>
 8007ab4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aba:	0d1b      	lsrs	r3, r3, #20
 8007abc:	051b      	lsls	r3, r3, #20
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d1a1      	bne.n	8007a06 <_strtod_l+0xa0e>
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	f7f9 f927 	bl	8000d18 <__aeabi_d2lz>
 8007aca:	f7f8 fd97 	bl	80005fc <__aeabi_l2d>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f8 fc07 	bl	80002e8 <__aeabi_dsub>
 8007ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007adc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ae0:	ea43 030a 	orr.w	r3, r3, sl
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	4689      	mov	r9, r1
 8007aea:	d055      	beq.n	8007b98 <_strtod_l+0xba0>
 8007aec:	a336      	add	r3, pc, #216	; (adr r3, 8007bc8 <_strtod_l+0xbd0>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f9 f823 	bl	8000b3c <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f47f acd0 	bne.w	800749c <_strtod_l+0x4a4>
 8007afc:	a334      	add	r3, pc, #208	; (adr r3, 8007bd0 <_strtod_l+0xbd8>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	4640      	mov	r0, r8
 8007b04:	4649      	mov	r1, r9
 8007b06:	f7f9 f837 	bl	8000b78 <__aeabi_dcmpgt>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	f43f af7b 	beq.w	8007a06 <_strtod_l+0xa0e>
 8007b10:	e4c4      	b.n	800749c <_strtod_l+0x4a4>
 8007b12:	9b04      	ldr	r3, [sp, #16]
 8007b14:	b333      	cbz	r3, 8007b64 <_strtod_l+0xb6c>
 8007b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b1c:	d822      	bhi.n	8007b64 <_strtod_l+0xb6c>
 8007b1e:	a32e      	add	r3, pc, #184	; (adr r3, 8007bd8 <_strtod_l+0xbe0>)
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	4640      	mov	r0, r8
 8007b26:	4649      	mov	r1, r9
 8007b28:	f7f9 f812 	bl	8000b50 <__aeabi_dcmple>
 8007b2c:	b1a0      	cbz	r0, 8007b58 <_strtod_l+0xb60>
 8007b2e:	4649      	mov	r1, r9
 8007b30:	4640      	mov	r0, r8
 8007b32:	f7f9 f869 	bl	8000c08 <__aeabi_d2uiz>
 8007b36:	2801      	cmp	r0, #1
 8007b38:	bf38      	it	cc
 8007b3a:	2001      	movcc	r0, #1
 8007b3c:	f7f8 fd12 	bl	8000564 <__aeabi_ui2d>
 8007b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b42:	4680      	mov	r8, r0
 8007b44:	4689      	mov	r9, r1
 8007b46:	bb23      	cbnz	r3, 8007b92 <_strtod_l+0xb9a>
 8007b48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b4c:	9010      	str	r0, [sp, #64]	; 0x40
 8007b4e:	9311      	str	r3, [sp, #68]	; 0x44
 8007b50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	9309      	str	r3, [sp, #36]	; 0x24
 8007b64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b68:	eeb0 0a48 	vmov.f32	s0, s16
 8007b6c:	eef0 0a68 	vmov.f32	s1, s17
 8007b70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b74:	f001 fef2 	bl	800995c <__ulp>
 8007b78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b7c:	ec53 2b10 	vmov	r2, r3, d0
 8007b80:	f7f8 fd6a 	bl	8000658 <__aeabi_dmul>
 8007b84:	ec53 2b18 	vmov	r2, r3, d8
 8007b88:	f7f8 fbb0 	bl	80002ec <__adddf3>
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	468b      	mov	fp, r1
 8007b90:	e78d      	b.n	8007aae <_strtod_l+0xab6>
 8007b92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007b96:	e7db      	b.n	8007b50 <_strtod_l+0xb58>
 8007b98:	a311      	add	r3, pc, #68	; (adr r3, 8007be0 <_strtod_l+0xbe8>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 ffcd 	bl	8000b3c <__aeabi_dcmplt>
 8007ba2:	e7b2      	b.n	8007b0a <_strtod_l+0xb12>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007baa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	f7ff ba6b 	b.w	8007088 <_strtod_l+0x90>
 8007bb2:	2a65      	cmp	r2, #101	; 0x65
 8007bb4:	f43f ab5f 	beq.w	8007276 <_strtod_l+0x27e>
 8007bb8:	2a45      	cmp	r2, #69	; 0x45
 8007bba:	f43f ab5c 	beq.w	8007276 <_strtod_l+0x27e>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f7ff bb94 	b.w	80072ec <_strtod_l+0x2f4>
 8007bc4:	f3af 8000 	nop.w
 8007bc8:	94a03595 	.word	0x94a03595
 8007bcc:	3fdfffff 	.word	0x3fdfffff
 8007bd0:	35afe535 	.word	0x35afe535
 8007bd4:	3fe00000 	.word	0x3fe00000
 8007bd8:	ffc00000 	.word	0xffc00000
 8007bdc:	41dfffff 	.word	0x41dfffff
 8007be0:	94a03595 	.word	0x94a03595
 8007be4:	3fcfffff 	.word	0x3fcfffff
 8007be8:	3ff00000 	.word	0x3ff00000
 8007bec:	7ff00000 	.word	0x7ff00000
 8007bf0:	7fe00000 	.word	0x7fe00000
 8007bf4:	7c9fffff 	.word	0x7c9fffff
 8007bf8:	3fe00000 	.word	0x3fe00000
 8007bfc:	bff00000 	.word	0xbff00000
 8007c00:	7fefffff 	.word	0x7fefffff

08007c04 <_strtod_r>:
 8007c04:	4b01      	ldr	r3, [pc, #4]	; (8007c0c <_strtod_r+0x8>)
 8007c06:	f7ff b9f7 	b.w	8006ff8 <_strtod_l>
 8007c0a:	bf00      	nop
 8007c0c:	20000074 	.word	0x20000074

08007c10 <strtok>:
 8007c10:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <strtok+0x5c>)
 8007c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c14:	681e      	ldr	r6, [r3, #0]
 8007c16:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007c18:	4605      	mov	r5, r0
 8007c1a:	b9fc      	cbnz	r4, 8007c5c <strtok+0x4c>
 8007c1c:	2050      	movs	r0, #80	; 0x50
 8007c1e:	9101      	str	r1, [sp, #4]
 8007c20:	f7fe f9d6 	bl	8005fd0 <malloc>
 8007c24:	9901      	ldr	r1, [sp, #4]
 8007c26:	65b0      	str	r0, [r6, #88]	; 0x58
 8007c28:	4602      	mov	r2, r0
 8007c2a:	b920      	cbnz	r0, 8007c36 <strtok+0x26>
 8007c2c:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <strtok+0x60>)
 8007c2e:	4811      	ldr	r0, [pc, #68]	; (8007c74 <strtok+0x64>)
 8007c30:	2157      	movs	r1, #87	; 0x57
 8007c32:	f000 f8d7 	bl	8007de4 <__assert_func>
 8007c36:	e9c0 4400 	strd	r4, r4, [r0]
 8007c3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007c3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007c42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007c46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007c4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007c4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007c52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007c56:	6184      	str	r4, [r0, #24]
 8007c58:	7704      	strb	r4, [r0, #28]
 8007c5a:	6244      	str	r4, [r0, #36]	; 0x24
 8007c5c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4628      	mov	r0, r5
 8007c62:	b002      	add	sp, #8
 8007c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c68:	f000 b806 	b.w	8007c78 <__strtok_r>
 8007c6c:	2000000c 	.word	0x2000000c
 8007c70:	0800aea8 	.word	0x0800aea8
 8007c74:	0800aebf 	.word	0x0800aebf

08007c78 <__strtok_r>:
 8007c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7a:	b908      	cbnz	r0, 8007c80 <__strtok_r+0x8>
 8007c7c:	6810      	ldr	r0, [r2, #0]
 8007c7e:	b188      	cbz	r0, 8007ca4 <__strtok_r+0x2c>
 8007c80:	4604      	mov	r4, r0
 8007c82:	4620      	mov	r0, r4
 8007c84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007c88:	460f      	mov	r7, r1
 8007c8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007c8e:	b91e      	cbnz	r6, 8007c98 <__strtok_r+0x20>
 8007c90:	b965      	cbnz	r5, 8007cac <__strtok_r+0x34>
 8007c92:	6015      	str	r5, [r2, #0]
 8007c94:	4628      	mov	r0, r5
 8007c96:	e005      	b.n	8007ca4 <__strtok_r+0x2c>
 8007c98:	42b5      	cmp	r5, r6
 8007c9a:	d1f6      	bne.n	8007c8a <__strtok_r+0x12>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f0      	bne.n	8007c82 <__strtok_r+0xa>
 8007ca0:	6014      	str	r4, [r2, #0]
 8007ca2:	7003      	strb	r3, [r0, #0]
 8007ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca6:	461c      	mov	r4, r3
 8007ca8:	e00c      	b.n	8007cc4 <__strtok_r+0x4c>
 8007caa:	b915      	cbnz	r5, 8007cb2 <__strtok_r+0x3a>
 8007cac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007cb0:	460e      	mov	r6, r1
 8007cb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007cb6:	42ab      	cmp	r3, r5
 8007cb8:	d1f7      	bne.n	8007caa <__strtok_r+0x32>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0f3      	beq.n	8007ca6 <__strtok_r+0x2e>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007cc4:	6014      	str	r4, [r2, #0]
 8007cc6:	e7ed      	b.n	8007ca4 <__strtok_r+0x2c>

08007cc8 <_strtol_l.constprop.0>:
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cce:	d001      	beq.n	8007cd4 <_strtol_l.constprop.0+0xc>
 8007cd0:	2b24      	cmp	r3, #36	; 0x24
 8007cd2:	d906      	bls.n	8007ce2 <_strtol_l.constprop.0+0x1a>
 8007cd4:	f7fe f952 	bl	8005f7c <__errno>
 8007cd8:	2316      	movs	r3, #22
 8007cda:	6003      	str	r3, [r0, #0]
 8007cdc:	2000      	movs	r0, #0
 8007cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007dc8 <_strtol_l.constprop.0+0x100>
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	462e      	mov	r6, r5
 8007cea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cee:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007cf2:	f017 0708 	ands.w	r7, r7, #8
 8007cf6:	d1f7      	bne.n	8007ce8 <_strtol_l.constprop.0+0x20>
 8007cf8:	2c2d      	cmp	r4, #45	; 0x2d
 8007cfa:	d132      	bne.n	8007d62 <_strtol_l.constprop.0+0x9a>
 8007cfc:	782c      	ldrb	r4, [r5, #0]
 8007cfe:	2701      	movs	r7, #1
 8007d00:	1cb5      	adds	r5, r6, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d05b      	beq.n	8007dbe <_strtol_l.constprop.0+0xf6>
 8007d06:	2b10      	cmp	r3, #16
 8007d08:	d109      	bne.n	8007d1e <_strtol_l.constprop.0+0x56>
 8007d0a:	2c30      	cmp	r4, #48	; 0x30
 8007d0c:	d107      	bne.n	8007d1e <_strtol_l.constprop.0+0x56>
 8007d0e:	782c      	ldrb	r4, [r5, #0]
 8007d10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d14:	2c58      	cmp	r4, #88	; 0x58
 8007d16:	d14d      	bne.n	8007db4 <_strtol_l.constprop.0+0xec>
 8007d18:	786c      	ldrb	r4, [r5, #1]
 8007d1a:	2310      	movs	r3, #16
 8007d1c:	3502      	adds	r5, #2
 8007d1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d22:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d26:	f04f 0c00 	mov.w	ip, #0
 8007d2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d2e:	4666      	mov	r6, ip
 8007d30:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007d38:	f1be 0f09 	cmp.w	lr, #9
 8007d3c:	d816      	bhi.n	8007d6c <_strtol_l.constprop.0+0xa4>
 8007d3e:	4674      	mov	r4, lr
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	dd24      	ble.n	8007d8e <_strtol_l.constprop.0+0xc6>
 8007d44:	f1bc 0f00 	cmp.w	ip, #0
 8007d48:	db1e      	blt.n	8007d88 <_strtol_l.constprop.0+0xc0>
 8007d4a:	45b1      	cmp	r9, r6
 8007d4c:	d31c      	bcc.n	8007d88 <_strtol_l.constprop.0+0xc0>
 8007d4e:	d101      	bne.n	8007d54 <_strtol_l.constprop.0+0x8c>
 8007d50:	45a2      	cmp	sl, r4
 8007d52:	db19      	blt.n	8007d88 <_strtol_l.constprop.0+0xc0>
 8007d54:	fb06 4603 	mla	r6, r6, r3, r4
 8007d58:	f04f 0c01 	mov.w	ip, #1
 8007d5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d60:	e7e8      	b.n	8007d34 <_strtol_l.constprop.0+0x6c>
 8007d62:	2c2b      	cmp	r4, #43	; 0x2b
 8007d64:	bf04      	itt	eq
 8007d66:	782c      	ldrbeq	r4, [r5, #0]
 8007d68:	1cb5      	addeq	r5, r6, #2
 8007d6a:	e7ca      	b.n	8007d02 <_strtol_l.constprop.0+0x3a>
 8007d6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007d70:	f1be 0f19 	cmp.w	lr, #25
 8007d74:	d801      	bhi.n	8007d7a <_strtol_l.constprop.0+0xb2>
 8007d76:	3c37      	subs	r4, #55	; 0x37
 8007d78:	e7e2      	b.n	8007d40 <_strtol_l.constprop.0+0x78>
 8007d7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007d7e:	f1be 0f19 	cmp.w	lr, #25
 8007d82:	d804      	bhi.n	8007d8e <_strtol_l.constprop.0+0xc6>
 8007d84:	3c57      	subs	r4, #87	; 0x57
 8007d86:	e7db      	b.n	8007d40 <_strtol_l.constprop.0+0x78>
 8007d88:	f04f 3cff 	mov.w	ip, #4294967295
 8007d8c:	e7e6      	b.n	8007d5c <_strtol_l.constprop.0+0x94>
 8007d8e:	f1bc 0f00 	cmp.w	ip, #0
 8007d92:	da05      	bge.n	8007da0 <_strtol_l.constprop.0+0xd8>
 8007d94:	2322      	movs	r3, #34	; 0x22
 8007d96:	6003      	str	r3, [r0, #0]
 8007d98:	4646      	mov	r6, r8
 8007d9a:	b942      	cbnz	r2, 8007dae <_strtol_l.constprop.0+0xe6>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	e79e      	b.n	8007cde <_strtol_l.constprop.0+0x16>
 8007da0:	b107      	cbz	r7, 8007da4 <_strtol_l.constprop.0+0xdc>
 8007da2:	4276      	negs	r6, r6
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	d0f9      	beq.n	8007d9c <_strtol_l.constprop.0+0xd4>
 8007da8:	f1bc 0f00 	cmp.w	ip, #0
 8007dac:	d000      	beq.n	8007db0 <_strtol_l.constprop.0+0xe8>
 8007dae:	1e69      	subs	r1, r5, #1
 8007db0:	6011      	str	r1, [r2, #0]
 8007db2:	e7f3      	b.n	8007d9c <_strtol_l.constprop.0+0xd4>
 8007db4:	2430      	movs	r4, #48	; 0x30
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1b1      	bne.n	8007d1e <_strtol_l.constprop.0+0x56>
 8007dba:	2308      	movs	r3, #8
 8007dbc:	e7af      	b.n	8007d1e <_strtol_l.constprop.0+0x56>
 8007dbe:	2c30      	cmp	r4, #48	; 0x30
 8007dc0:	d0a5      	beq.n	8007d0e <_strtol_l.constprop.0+0x46>
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	e7ab      	b.n	8007d1e <_strtol_l.constprop.0+0x56>
 8007dc6:	bf00      	nop
 8007dc8:	0800ad11 	.word	0x0800ad11

08007dcc <_strtol_r>:
 8007dcc:	f7ff bf7c 	b.w	8007cc8 <_strtol_l.constprop.0>

08007dd0 <strtol>:
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	4802      	ldr	r0, [pc, #8]	; (8007de0 <strtol+0x10>)
 8007dd8:	6800      	ldr	r0, [r0, #0]
 8007dda:	f7ff bf75 	b.w	8007cc8 <_strtol_l.constprop.0>
 8007dde:	bf00      	nop
 8007de0:	2000000c 	.word	0x2000000c

08007de4 <__assert_func>:
 8007de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007de6:	4614      	mov	r4, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <__assert_func+0x2c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4605      	mov	r5, r0
 8007df0:	68d8      	ldr	r0, [r3, #12]
 8007df2:	b14c      	cbz	r4, 8007e08 <__assert_func+0x24>
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <__assert_func+0x30>)
 8007df6:	9100      	str	r1, [sp, #0]
 8007df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dfc:	4906      	ldr	r1, [pc, #24]	; (8007e18 <__assert_func+0x34>)
 8007dfe:	462b      	mov	r3, r5
 8007e00:	f000 fe88 	bl	8008b14 <fiprintf>
 8007e04:	f002 faae 	bl	800a364 <abort>
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <__assert_func+0x38>)
 8007e0a:	461c      	mov	r4, r3
 8007e0c:	e7f3      	b.n	8007df6 <__assert_func+0x12>
 8007e0e:	bf00      	nop
 8007e10:	2000000c 	.word	0x2000000c
 8007e14:	0800af1c 	.word	0x0800af1c
 8007e18:	0800af29 	.word	0x0800af29
 8007e1c:	0800af57 	.word	0x0800af57

08007e20 <quorem>:
 8007e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	6903      	ldr	r3, [r0, #16]
 8007e26:	690c      	ldr	r4, [r1, #16]
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	f2c0 8081 	blt.w	8007f32 <quorem+0x112>
 8007e30:	3c01      	subs	r4, #1
 8007e32:	f101 0814 	add.w	r8, r1, #20
 8007e36:	f100 0514 	add.w	r5, r0, #20
 8007e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e58:	d331      	bcc.n	8007ebe <quorem+0x9e>
 8007e5a:	f04f 0e00 	mov.w	lr, #0
 8007e5e:	4640      	mov	r0, r8
 8007e60:	46ac      	mov	ip, r5
 8007e62:	46f2      	mov	sl, lr
 8007e64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e68:	b293      	uxth	r3, r2
 8007e6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	ebaa 0303 	sub.w	r3, sl, r3
 8007e78:	f8dc a000 	ldr.w	sl, [ip]
 8007e7c:	0c12      	lsrs	r2, r2, #16
 8007e7e:	fa13 f38a 	uxtah	r3, r3, sl
 8007e82:	fb06 e202 	mla	r2, r6, r2, lr
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	9b00      	ldr	r3, [sp, #0]
 8007e8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e8e:	b292      	uxth	r2, r2
 8007e90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e98:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e9c:	4581      	cmp	r9, r0
 8007e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ea2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ea6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eaa:	d2db      	bcs.n	8007e64 <quorem+0x44>
 8007eac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007eb0:	b92b      	cbnz	r3, 8007ebe <quorem+0x9e>
 8007eb2:	9b01      	ldr	r3, [sp, #4]
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	429d      	cmp	r5, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	d32e      	bcc.n	8007f1a <quorem+0xfa>
 8007ebc:	613c      	str	r4, [r7, #16]
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f001 fca6 	bl	8009810 <__mcmp>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	db24      	blt.n	8007f12 <quorem+0xf2>
 8007ec8:	3601      	adds	r6, #1
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f04f 0c00 	mov.w	ip, #0
 8007ed0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ed4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ed8:	b293      	uxth	r3, r2
 8007eda:	ebac 0303 	sub.w	r3, ip, r3
 8007ede:	0c12      	lsrs	r2, r2, #16
 8007ee0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ef2:	45c1      	cmp	r9, r8
 8007ef4:	f840 3b04 	str.w	r3, [r0], #4
 8007ef8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007efc:	d2e8      	bcs.n	8007ed0 <quorem+0xb0>
 8007efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f06:	b922      	cbnz	r2, 8007f12 <quorem+0xf2>
 8007f08:	3b04      	subs	r3, #4
 8007f0a:	429d      	cmp	r5, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	d30a      	bcc.n	8007f26 <quorem+0x106>
 8007f10:	613c      	str	r4, [r7, #16]
 8007f12:	4630      	mov	r0, r6
 8007f14:	b003      	add	sp, #12
 8007f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1a:	6812      	ldr	r2, [r2, #0]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	d1cc      	bne.n	8007ebc <quorem+0x9c>
 8007f22:	3c01      	subs	r4, #1
 8007f24:	e7c7      	b.n	8007eb6 <quorem+0x96>
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	2a00      	cmp	r2, #0
 8007f2c:	d1f0      	bne.n	8007f10 <quorem+0xf0>
 8007f2e:	3c01      	subs	r4, #1
 8007f30:	e7eb      	b.n	8007f0a <quorem+0xea>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e7ee      	b.n	8007f14 <quorem+0xf4>
	...

08007f38 <_dtoa_r>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	ed2d 8b04 	vpush	{d8-d9}
 8007f40:	ec57 6b10 	vmov	r6, r7, d0
 8007f44:	b093      	sub	sp, #76	; 0x4c
 8007f46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f4c:	9106      	str	r1, [sp, #24]
 8007f4e:	ee10 aa10 	vmov	sl, s0
 8007f52:	4604      	mov	r4, r0
 8007f54:	9209      	str	r2, [sp, #36]	; 0x24
 8007f56:	930c      	str	r3, [sp, #48]	; 0x30
 8007f58:	46bb      	mov	fp, r7
 8007f5a:	b975      	cbnz	r5, 8007f7a <_dtoa_r+0x42>
 8007f5c:	2010      	movs	r0, #16
 8007f5e:	f7fe f837 	bl	8005fd0 <malloc>
 8007f62:	4602      	mov	r2, r0
 8007f64:	6260      	str	r0, [r4, #36]	; 0x24
 8007f66:	b920      	cbnz	r0, 8007f72 <_dtoa_r+0x3a>
 8007f68:	4ba7      	ldr	r3, [pc, #668]	; (8008208 <_dtoa_r+0x2d0>)
 8007f6a:	21ea      	movs	r1, #234	; 0xea
 8007f6c:	48a7      	ldr	r0, [pc, #668]	; (800820c <_dtoa_r+0x2d4>)
 8007f6e:	f7ff ff39 	bl	8007de4 <__assert_func>
 8007f72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f76:	6005      	str	r5, [r0, #0]
 8007f78:	60c5      	str	r5, [r0, #12]
 8007f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f7c:	6819      	ldr	r1, [r3, #0]
 8007f7e:	b151      	cbz	r1, 8007f96 <_dtoa_r+0x5e>
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	604a      	str	r2, [r1, #4]
 8007f84:	2301      	movs	r3, #1
 8007f86:	4093      	lsls	r3, r2
 8007f88:	608b      	str	r3, [r1, #8]
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f001 f9b4 	bl	80092f8 <_Bfree>
 8007f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	1e3b      	subs	r3, r7, #0
 8007f98:	bfaa      	itet	ge
 8007f9a:	2300      	movge	r3, #0
 8007f9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007fa0:	f8c8 3000 	strge.w	r3, [r8]
 8007fa4:	4b9a      	ldr	r3, [pc, #616]	; (8008210 <_dtoa_r+0x2d8>)
 8007fa6:	bfbc      	itt	lt
 8007fa8:	2201      	movlt	r2, #1
 8007faa:	f8c8 2000 	strlt.w	r2, [r8]
 8007fae:	ea33 030b 	bics.w	r3, r3, fp
 8007fb2:	d11b      	bne.n	8007fec <_dtoa_r+0xb4>
 8007fb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fc0:	4333      	orrs	r3, r6
 8007fc2:	f000 8592 	beq.w	8008aea <_dtoa_r+0xbb2>
 8007fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc8:	b963      	cbnz	r3, 8007fe4 <_dtoa_r+0xac>
 8007fca:	4b92      	ldr	r3, [pc, #584]	; (8008214 <_dtoa_r+0x2dc>)
 8007fcc:	e022      	b.n	8008014 <_dtoa_r+0xdc>
 8007fce:	4b92      	ldr	r3, [pc, #584]	; (8008218 <_dtoa_r+0x2e0>)
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	9801      	ldr	r0, [sp, #4]
 8007fda:	b013      	add	sp, #76	; 0x4c
 8007fdc:	ecbd 8b04 	vpop	{d8-d9}
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	4b8b      	ldr	r3, [pc, #556]	; (8008214 <_dtoa_r+0x2dc>)
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	3303      	adds	r3, #3
 8007fea:	e7f3      	b.n	8007fd4 <_dtoa_r+0x9c>
 8007fec:	2200      	movs	r2, #0
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	4659      	mov	r1, fp
 8007ff4:	f7f8 fd98 	bl	8000b28 <__aeabi_dcmpeq>
 8007ff8:	ec4b ab19 	vmov	d9, sl, fp
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	b158      	cbz	r0, 8008018 <_dtoa_r+0xe0>
 8008000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008002:	2301      	movs	r3, #1
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 856b 	beq.w	8008ae4 <_dtoa_r+0xbac>
 800800e:	4883      	ldr	r0, [pc, #524]	; (800821c <_dtoa_r+0x2e4>)
 8008010:	6018      	str	r0, [r3, #0]
 8008012:	1e43      	subs	r3, r0, #1
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	e7df      	b.n	8007fd8 <_dtoa_r+0xa0>
 8008018:	ec4b ab10 	vmov	d0, sl, fp
 800801c:	aa10      	add	r2, sp, #64	; 0x40
 800801e:	a911      	add	r1, sp, #68	; 0x44
 8008020:	4620      	mov	r0, r4
 8008022:	f001 fd17 	bl	8009a54 <__d2b>
 8008026:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800802a:	ee08 0a10 	vmov	s16, r0
 800802e:	2d00      	cmp	r5, #0
 8008030:	f000 8084 	beq.w	800813c <_dtoa_r+0x204>
 8008034:	ee19 3a90 	vmov	r3, s19
 8008038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800803c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008040:	4656      	mov	r6, sl
 8008042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800804a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800804e:	4b74      	ldr	r3, [pc, #464]	; (8008220 <_dtoa_r+0x2e8>)
 8008050:	2200      	movs	r2, #0
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f947 	bl	80002e8 <__aeabi_dsub>
 800805a:	a365      	add	r3, pc, #404	; (adr r3, 80081f0 <_dtoa_r+0x2b8>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 fafa 	bl	8000658 <__aeabi_dmul>
 8008064:	a364      	add	r3, pc, #400	; (adr r3, 80081f8 <_dtoa_r+0x2c0>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	f7f8 f93f 	bl	80002ec <__adddf3>
 800806e:	4606      	mov	r6, r0
 8008070:	4628      	mov	r0, r5
 8008072:	460f      	mov	r7, r1
 8008074:	f7f8 fa86 	bl	8000584 <__aeabi_i2d>
 8008078:	a361      	add	r3, pc, #388	; (adr r3, 8008200 <_dtoa_r+0x2c8>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 faeb 	bl	8000658 <__aeabi_dmul>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 f92f 	bl	80002ec <__adddf3>
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	f7f8 fd91 	bl	8000bb8 <__aeabi_d2iz>
 8008096:	2200      	movs	r2, #0
 8008098:	9000      	str	r0, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fd4c 	bl	8000b3c <__aeabi_dcmplt>
 80080a4:	b150      	cbz	r0, 80080bc <_dtoa_r+0x184>
 80080a6:	9800      	ldr	r0, [sp, #0]
 80080a8:	f7f8 fa6c 	bl	8000584 <__aeabi_i2d>
 80080ac:	4632      	mov	r2, r6
 80080ae:	463b      	mov	r3, r7
 80080b0:	f7f8 fd3a 	bl	8000b28 <__aeabi_dcmpeq>
 80080b4:	b910      	cbnz	r0, 80080bc <_dtoa_r+0x184>
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	9b00      	ldr	r3, [sp, #0]
 80080be:	2b16      	cmp	r3, #22
 80080c0:	d85a      	bhi.n	8008178 <_dtoa_r+0x240>
 80080c2:	9a00      	ldr	r2, [sp, #0]
 80080c4:	4b57      	ldr	r3, [pc, #348]	; (8008224 <_dtoa_r+0x2ec>)
 80080c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	ec51 0b19 	vmov	r0, r1, d9
 80080d2:	f7f8 fd33 	bl	8000b3c <__aeabi_dcmplt>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d050      	beq.n	800817c <_dtoa_r+0x244>
 80080da:	9b00      	ldr	r3, [sp, #0]
 80080dc:	3b01      	subs	r3, #1
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2300      	movs	r3, #0
 80080e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080e6:	1b5d      	subs	r5, r3, r5
 80080e8:	1e6b      	subs	r3, r5, #1
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	bf45      	ittet	mi
 80080ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80080f2:	9304      	strmi	r3, [sp, #16]
 80080f4:	2300      	movpl	r3, #0
 80080f6:	2300      	movmi	r3, #0
 80080f8:	bf4c      	ite	mi
 80080fa:	9305      	strmi	r3, [sp, #20]
 80080fc:	9304      	strpl	r3, [sp, #16]
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db3d      	blt.n	8008180 <_dtoa_r+0x248>
 8008104:	9b05      	ldr	r3, [sp, #20]
 8008106:	9a00      	ldr	r2, [sp, #0]
 8008108:	920a      	str	r2, [sp, #40]	; 0x28
 800810a:	4413      	add	r3, r2
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	2300      	movs	r3, #0
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	2b09      	cmp	r3, #9
 8008116:	f200 8089 	bhi.w	800822c <_dtoa_r+0x2f4>
 800811a:	2b05      	cmp	r3, #5
 800811c:	bfc4      	itt	gt
 800811e:	3b04      	subgt	r3, #4
 8008120:	9306      	strgt	r3, [sp, #24]
 8008122:	9b06      	ldr	r3, [sp, #24]
 8008124:	f1a3 0302 	sub.w	r3, r3, #2
 8008128:	bfcc      	ite	gt
 800812a:	2500      	movgt	r5, #0
 800812c:	2501      	movle	r5, #1
 800812e:	2b03      	cmp	r3, #3
 8008130:	f200 8087 	bhi.w	8008242 <_dtoa_r+0x30a>
 8008134:	e8df f003 	tbb	[pc, r3]
 8008138:	59383a2d 	.word	0x59383a2d
 800813c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008140:	441d      	add	r5, r3
 8008142:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008146:	2b20      	cmp	r3, #32
 8008148:	bfc1      	itttt	gt
 800814a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800814e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008152:	fa0b f303 	lslgt.w	r3, fp, r3
 8008156:	fa26 f000 	lsrgt.w	r0, r6, r0
 800815a:	bfda      	itte	le
 800815c:	f1c3 0320 	rsble	r3, r3, #32
 8008160:	fa06 f003 	lslle.w	r0, r6, r3
 8008164:	4318      	orrgt	r0, r3
 8008166:	f7f8 f9fd 	bl	8000564 <__aeabi_ui2d>
 800816a:	2301      	movs	r3, #1
 800816c:	4606      	mov	r6, r0
 800816e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008172:	3d01      	subs	r5, #1
 8008174:	930e      	str	r3, [sp, #56]	; 0x38
 8008176:	e76a      	b.n	800804e <_dtoa_r+0x116>
 8008178:	2301      	movs	r3, #1
 800817a:	e7b2      	b.n	80080e2 <_dtoa_r+0x1aa>
 800817c:	900b      	str	r0, [sp, #44]	; 0x2c
 800817e:	e7b1      	b.n	80080e4 <_dtoa_r+0x1ac>
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	9a00      	ldr	r2, [sp, #0]
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	9304      	str	r3, [sp, #16]
 8008188:	4253      	negs	r3, r2
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	2300      	movs	r3, #0
 800818e:	930a      	str	r3, [sp, #40]	; 0x28
 8008190:	e7bf      	b.n	8008112 <_dtoa_r+0x1da>
 8008192:	2300      	movs	r3, #0
 8008194:	9308      	str	r3, [sp, #32]
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	dc55      	bgt.n	8008248 <_dtoa_r+0x310>
 800819c:	2301      	movs	r3, #1
 800819e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081a2:	461a      	mov	r2, r3
 80081a4:	9209      	str	r2, [sp, #36]	; 0x24
 80081a6:	e00c      	b.n	80081c2 <_dtoa_r+0x28a>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e7f3      	b.n	8008194 <_dtoa_r+0x25c>
 80081ac:	2300      	movs	r3, #0
 80081ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b0:	9308      	str	r3, [sp, #32]
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	4413      	add	r3, r2
 80081b6:	9302      	str	r3, [sp, #8]
 80081b8:	3301      	adds	r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	9303      	str	r3, [sp, #12]
 80081be:	bfb8      	it	lt
 80081c0:	2301      	movlt	r3, #1
 80081c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081c4:	2200      	movs	r2, #0
 80081c6:	6042      	str	r2, [r0, #4]
 80081c8:	2204      	movs	r2, #4
 80081ca:	f102 0614 	add.w	r6, r2, #20
 80081ce:	429e      	cmp	r6, r3
 80081d0:	6841      	ldr	r1, [r0, #4]
 80081d2:	d93d      	bls.n	8008250 <_dtoa_r+0x318>
 80081d4:	4620      	mov	r0, r4
 80081d6:	f001 f84f 	bl	8009278 <_Balloc>
 80081da:	9001      	str	r0, [sp, #4]
 80081dc:	2800      	cmp	r0, #0
 80081de:	d13b      	bne.n	8008258 <_dtoa_r+0x320>
 80081e0:	4b11      	ldr	r3, [pc, #68]	; (8008228 <_dtoa_r+0x2f0>)
 80081e2:	4602      	mov	r2, r0
 80081e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081e8:	e6c0      	b.n	8007f6c <_dtoa_r+0x34>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e7df      	b.n	80081ae <_dtoa_r+0x276>
 80081ee:	bf00      	nop
 80081f0:	636f4361 	.word	0x636f4361
 80081f4:	3fd287a7 	.word	0x3fd287a7
 80081f8:	8b60c8b3 	.word	0x8b60c8b3
 80081fc:	3fc68a28 	.word	0x3fc68a28
 8008200:	509f79fb 	.word	0x509f79fb
 8008204:	3fd34413 	.word	0x3fd34413
 8008208:	0800aea8 	.word	0x0800aea8
 800820c:	0800af65 	.word	0x0800af65
 8008210:	7ff00000 	.word	0x7ff00000
 8008214:	0800af61 	.word	0x0800af61
 8008218:	0800af58 	.word	0x0800af58
 800821c:	0800ae29 	.word	0x0800ae29
 8008220:	3ff80000 	.word	0x3ff80000
 8008224:	0800b0d0 	.word	0x0800b0d0
 8008228:	0800afc0 	.word	0x0800afc0
 800822c:	2501      	movs	r5, #1
 800822e:	2300      	movs	r3, #0
 8008230:	9306      	str	r3, [sp, #24]
 8008232:	9508      	str	r5, [sp, #32]
 8008234:	f04f 33ff 	mov.w	r3, #4294967295
 8008238:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800823c:	2200      	movs	r2, #0
 800823e:	2312      	movs	r3, #18
 8008240:	e7b0      	b.n	80081a4 <_dtoa_r+0x26c>
 8008242:	2301      	movs	r3, #1
 8008244:	9308      	str	r3, [sp, #32]
 8008246:	e7f5      	b.n	8008234 <_dtoa_r+0x2fc>
 8008248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800824e:	e7b8      	b.n	80081c2 <_dtoa_r+0x28a>
 8008250:	3101      	adds	r1, #1
 8008252:	6041      	str	r1, [r0, #4]
 8008254:	0052      	lsls	r2, r2, #1
 8008256:	e7b8      	b.n	80081ca <_dtoa_r+0x292>
 8008258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800825a:	9a01      	ldr	r2, [sp, #4]
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	2b0e      	cmp	r3, #14
 8008262:	f200 809d 	bhi.w	80083a0 <_dtoa_r+0x468>
 8008266:	2d00      	cmp	r5, #0
 8008268:	f000 809a 	beq.w	80083a0 <_dtoa_r+0x468>
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd32      	ble.n	80082d8 <_dtoa_r+0x3a0>
 8008272:	4ab7      	ldr	r2, [pc, #732]	; (8008550 <_dtoa_r+0x618>)
 8008274:	f003 030f 	and.w	r3, r3, #15
 8008278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800827c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008280:	9b00      	ldr	r3, [sp, #0]
 8008282:	05d8      	lsls	r0, r3, #23
 8008284:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008288:	d516      	bpl.n	80082b8 <_dtoa_r+0x380>
 800828a:	4bb2      	ldr	r3, [pc, #712]	; (8008554 <_dtoa_r+0x61c>)
 800828c:	ec51 0b19 	vmov	r0, r1, d9
 8008290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008294:	f7f8 fb0a 	bl	80008ac <__aeabi_ddiv>
 8008298:	f007 070f 	and.w	r7, r7, #15
 800829c:	4682      	mov	sl, r0
 800829e:	468b      	mov	fp, r1
 80082a0:	2503      	movs	r5, #3
 80082a2:	4eac      	ldr	r6, [pc, #688]	; (8008554 <_dtoa_r+0x61c>)
 80082a4:	b957      	cbnz	r7, 80082bc <_dtoa_r+0x384>
 80082a6:	4642      	mov	r2, r8
 80082a8:	464b      	mov	r3, r9
 80082aa:	4650      	mov	r0, sl
 80082ac:	4659      	mov	r1, fp
 80082ae:	f7f8 fafd 	bl	80008ac <__aeabi_ddiv>
 80082b2:	4682      	mov	sl, r0
 80082b4:	468b      	mov	fp, r1
 80082b6:	e028      	b.n	800830a <_dtoa_r+0x3d2>
 80082b8:	2502      	movs	r5, #2
 80082ba:	e7f2      	b.n	80082a2 <_dtoa_r+0x36a>
 80082bc:	07f9      	lsls	r1, r7, #31
 80082be:	d508      	bpl.n	80082d2 <_dtoa_r+0x39a>
 80082c0:	4640      	mov	r0, r8
 80082c2:	4649      	mov	r1, r9
 80082c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082c8:	f7f8 f9c6 	bl	8000658 <__aeabi_dmul>
 80082cc:	3501      	adds	r5, #1
 80082ce:	4680      	mov	r8, r0
 80082d0:	4689      	mov	r9, r1
 80082d2:	107f      	asrs	r7, r7, #1
 80082d4:	3608      	adds	r6, #8
 80082d6:	e7e5      	b.n	80082a4 <_dtoa_r+0x36c>
 80082d8:	f000 809b 	beq.w	8008412 <_dtoa_r+0x4da>
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	4f9d      	ldr	r7, [pc, #628]	; (8008554 <_dtoa_r+0x61c>)
 80082e0:	425e      	negs	r6, r3
 80082e2:	4b9b      	ldr	r3, [pc, #620]	; (8008550 <_dtoa_r+0x618>)
 80082e4:	f006 020f 	and.w	r2, r6, #15
 80082e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	ec51 0b19 	vmov	r0, r1, d9
 80082f4:	f7f8 f9b0 	bl	8000658 <__aeabi_dmul>
 80082f8:	1136      	asrs	r6, r6, #4
 80082fa:	4682      	mov	sl, r0
 80082fc:	468b      	mov	fp, r1
 80082fe:	2300      	movs	r3, #0
 8008300:	2502      	movs	r5, #2
 8008302:	2e00      	cmp	r6, #0
 8008304:	d17a      	bne.n	80083fc <_dtoa_r+0x4c4>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1d3      	bne.n	80082b2 <_dtoa_r+0x37a>
 800830a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8082 	beq.w	8008416 <_dtoa_r+0x4de>
 8008312:	4b91      	ldr	r3, [pc, #580]	; (8008558 <_dtoa_r+0x620>)
 8008314:	2200      	movs	r2, #0
 8008316:	4650      	mov	r0, sl
 8008318:	4659      	mov	r1, fp
 800831a:	f7f8 fc0f 	bl	8000b3c <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d079      	beq.n	8008416 <_dtoa_r+0x4de>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d076      	beq.n	8008416 <_dtoa_r+0x4de>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dd36      	ble.n	800839c <_dtoa_r+0x464>
 800832e:	9b00      	ldr	r3, [sp, #0]
 8008330:	4650      	mov	r0, sl
 8008332:	4659      	mov	r1, fp
 8008334:	1e5f      	subs	r7, r3, #1
 8008336:	2200      	movs	r2, #0
 8008338:	4b88      	ldr	r3, [pc, #544]	; (800855c <_dtoa_r+0x624>)
 800833a:	f7f8 f98d 	bl	8000658 <__aeabi_dmul>
 800833e:	9e02      	ldr	r6, [sp, #8]
 8008340:	4682      	mov	sl, r0
 8008342:	468b      	mov	fp, r1
 8008344:	3501      	adds	r5, #1
 8008346:	4628      	mov	r0, r5
 8008348:	f7f8 f91c 	bl	8000584 <__aeabi_i2d>
 800834c:	4652      	mov	r2, sl
 800834e:	465b      	mov	r3, fp
 8008350:	f7f8 f982 	bl	8000658 <__aeabi_dmul>
 8008354:	4b82      	ldr	r3, [pc, #520]	; (8008560 <_dtoa_r+0x628>)
 8008356:	2200      	movs	r2, #0
 8008358:	f7f7 ffc8 	bl	80002ec <__adddf3>
 800835c:	46d0      	mov	r8, sl
 800835e:	46d9      	mov	r9, fp
 8008360:	4682      	mov	sl, r0
 8008362:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008366:	2e00      	cmp	r6, #0
 8008368:	d158      	bne.n	800841c <_dtoa_r+0x4e4>
 800836a:	4b7e      	ldr	r3, [pc, #504]	; (8008564 <_dtoa_r+0x62c>)
 800836c:	2200      	movs	r2, #0
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	f7f7 ffb9 	bl	80002e8 <__aeabi_dsub>
 8008376:	4652      	mov	r2, sl
 8008378:	465b      	mov	r3, fp
 800837a:	4680      	mov	r8, r0
 800837c:	4689      	mov	r9, r1
 800837e:	f7f8 fbfb 	bl	8000b78 <__aeabi_dcmpgt>
 8008382:	2800      	cmp	r0, #0
 8008384:	f040 8295 	bne.w	80088b2 <_dtoa_r+0x97a>
 8008388:	4652      	mov	r2, sl
 800838a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800838e:	4640      	mov	r0, r8
 8008390:	4649      	mov	r1, r9
 8008392:	f7f8 fbd3 	bl	8000b3c <__aeabi_dcmplt>
 8008396:	2800      	cmp	r0, #0
 8008398:	f040 8289 	bne.w	80088ae <_dtoa_r+0x976>
 800839c:	ec5b ab19 	vmov	sl, fp, d9
 80083a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f2c0 8148 	blt.w	8008638 <_dtoa_r+0x700>
 80083a8:	9a00      	ldr	r2, [sp, #0]
 80083aa:	2a0e      	cmp	r2, #14
 80083ac:	f300 8144 	bgt.w	8008638 <_dtoa_r+0x700>
 80083b0:	4b67      	ldr	r3, [pc, #412]	; (8008550 <_dtoa_r+0x618>)
 80083b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f280 80d5 	bge.w	800856c <_dtoa_r+0x634>
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f300 80d1 	bgt.w	800856c <_dtoa_r+0x634>
 80083ca:	f040 826f 	bne.w	80088ac <_dtoa_r+0x974>
 80083ce:	4b65      	ldr	r3, [pc, #404]	; (8008564 <_dtoa_r+0x62c>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f7f8 f93f 	bl	8000658 <__aeabi_dmul>
 80083da:	4652      	mov	r2, sl
 80083dc:	465b      	mov	r3, fp
 80083de:	f7f8 fbc1 	bl	8000b64 <__aeabi_dcmpge>
 80083e2:	9e03      	ldr	r6, [sp, #12]
 80083e4:	4637      	mov	r7, r6
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f040 8245 	bne.w	8008876 <_dtoa_r+0x93e>
 80083ec:	9d01      	ldr	r5, [sp, #4]
 80083ee:	2331      	movs	r3, #49	; 0x31
 80083f0:	f805 3b01 	strb.w	r3, [r5], #1
 80083f4:	9b00      	ldr	r3, [sp, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	e240      	b.n	800887e <_dtoa_r+0x946>
 80083fc:	07f2      	lsls	r2, r6, #31
 80083fe:	d505      	bpl.n	800840c <_dtoa_r+0x4d4>
 8008400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008404:	f7f8 f928 	bl	8000658 <__aeabi_dmul>
 8008408:	3501      	adds	r5, #1
 800840a:	2301      	movs	r3, #1
 800840c:	1076      	asrs	r6, r6, #1
 800840e:	3708      	adds	r7, #8
 8008410:	e777      	b.n	8008302 <_dtoa_r+0x3ca>
 8008412:	2502      	movs	r5, #2
 8008414:	e779      	b.n	800830a <_dtoa_r+0x3d2>
 8008416:	9f00      	ldr	r7, [sp, #0]
 8008418:	9e03      	ldr	r6, [sp, #12]
 800841a:	e794      	b.n	8008346 <_dtoa_r+0x40e>
 800841c:	9901      	ldr	r1, [sp, #4]
 800841e:	4b4c      	ldr	r3, [pc, #304]	; (8008550 <_dtoa_r+0x618>)
 8008420:	4431      	add	r1, r6
 8008422:	910d      	str	r1, [sp, #52]	; 0x34
 8008424:	9908      	ldr	r1, [sp, #32]
 8008426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800842a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800842e:	2900      	cmp	r1, #0
 8008430:	d043      	beq.n	80084ba <_dtoa_r+0x582>
 8008432:	494d      	ldr	r1, [pc, #308]	; (8008568 <_dtoa_r+0x630>)
 8008434:	2000      	movs	r0, #0
 8008436:	f7f8 fa39 	bl	80008ac <__aeabi_ddiv>
 800843a:	4652      	mov	r2, sl
 800843c:	465b      	mov	r3, fp
 800843e:	f7f7 ff53 	bl	80002e8 <__aeabi_dsub>
 8008442:	9d01      	ldr	r5, [sp, #4]
 8008444:	4682      	mov	sl, r0
 8008446:	468b      	mov	fp, r1
 8008448:	4649      	mov	r1, r9
 800844a:	4640      	mov	r0, r8
 800844c:	f7f8 fbb4 	bl	8000bb8 <__aeabi_d2iz>
 8008450:	4606      	mov	r6, r0
 8008452:	f7f8 f897 	bl	8000584 <__aeabi_i2d>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4640      	mov	r0, r8
 800845c:	4649      	mov	r1, r9
 800845e:	f7f7 ff43 	bl	80002e8 <__aeabi_dsub>
 8008462:	3630      	adds	r6, #48	; 0x30
 8008464:	f805 6b01 	strb.w	r6, [r5], #1
 8008468:	4652      	mov	r2, sl
 800846a:	465b      	mov	r3, fp
 800846c:	4680      	mov	r8, r0
 800846e:	4689      	mov	r9, r1
 8008470:	f7f8 fb64 	bl	8000b3c <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	d163      	bne.n	8008540 <_dtoa_r+0x608>
 8008478:	4642      	mov	r2, r8
 800847a:	464b      	mov	r3, r9
 800847c:	4936      	ldr	r1, [pc, #216]	; (8008558 <_dtoa_r+0x620>)
 800847e:	2000      	movs	r0, #0
 8008480:	f7f7 ff32 	bl	80002e8 <__aeabi_dsub>
 8008484:	4652      	mov	r2, sl
 8008486:	465b      	mov	r3, fp
 8008488:	f7f8 fb58 	bl	8000b3c <__aeabi_dcmplt>
 800848c:	2800      	cmp	r0, #0
 800848e:	f040 80b5 	bne.w	80085fc <_dtoa_r+0x6c4>
 8008492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008494:	429d      	cmp	r5, r3
 8008496:	d081      	beq.n	800839c <_dtoa_r+0x464>
 8008498:	4b30      	ldr	r3, [pc, #192]	; (800855c <_dtoa_r+0x624>)
 800849a:	2200      	movs	r2, #0
 800849c:	4650      	mov	r0, sl
 800849e:	4659      	mov	r1, fp
 80084a0:	f7f8 f8da 	bl	8000658 <__aeabi_dmul>
 80084a4:	4b2d      	ldr	r3, [pc, #180]	; (800855c <_dtoa_r+0x624>)
 80084a6:	4682      	mov	sl, r0
 80084a8:	468b      	mov	fp, r1
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	2200      	movs	r2, #0
 80084b0:	f7f8 f8d2 	bl	8000658 <__aeabi_dmul>
 80084b4:	4680      	mov	r8, r0
 80084b6:	4689      	mov	r9, r1
 80084b8:	e7c6      	b.n	8008448 <_dtoa_r+0x510>
 80084ba:	4650      	mov	r0, sl
 80084bc:	4659      	mov	r1, fp
 80084be:	f7f8 f8cb 	bl	8000658 <__aeabi_dmul>
 80084c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c4:	9d01      	ldr	r5, [sp, #4]
 80084c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	4649      	mov	r1, r9
 80084ce:	4640      	mov	r0, r8
 80084d0:	f7f8 fb72 	bl	8000bb8 <__aeabi_d2iz>
 80084d4:	4606      	mov	r6, r0
 80084d6:	f7f8 f855 	bl	8000584 <__aeabi_i2d>
 80084da:	3630      	adds	r6, #48	; 0x30
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4640      	mov	r0, r8
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f7 ff00 	bl	80002e8 <__aeabi_dsub>
 80084e8:	f805 6b01 	strb.w	r6, [r5], #1
 80084ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ee:	429d      	cmp	r5, r3
 80084f0:	4680      	mov	r8, r0
 80084f2:	4689      	mov	r9, r1
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	d124      	bne.n	8008544 <_dtoa_r+0x60c>
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <_dtoa_r+0x630>)
 80084fc:	4650      	mov	r0, sl
 80084fe:	4659      	mov	r1, fp
 8008500:	f7f7 fef4 	bl	80002ec <__adddf3>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4640      	mov	r0, r8
 800850a:	4649      	mov	r1, r9
 800850c:	f7f8 fb34 	bl	8000b78 <__aeabi_dcmpgt>
 8008510:	2800      	cmp	r0, #0
 8008512:	d173      	bne.n	80085fc <_dtoa_r+0x6c4>
 8008514:	4652      	mov	r2, sl
 8008516:	465b      	mov	r3, fp
 8008518:	4913      	ldr	r1, [pc, #76]	; (8008568 <_dtoa_r+0x630>)
 800851a:	2000      	movs	r0, #0
 800851c:	f7f7 fee4 	bl	80002e8 <__aeabi_dsub>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f8 fb08 	bl	8000b3c <__aeabi_dcmplt>
 800852c:	2800      	cmp	r0, #0
 800852e:	f43f af35 	beq.w	800839c <_dtoa_r+0x464>
 8008532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008534:	1e6b      	subs	r3, r5, #1
 8008536:	930f      	str	r3, [sp, #60]	; 0x3c
 8008538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800853c:	2b30      	cmp	r3, #48	; 0x30
 800853e:	d0f8      	beq.n	8008532 <_dtoa_r+0x5fa>
 8008540:	9700      	str	r7, [sp, #0]
 8008542:	e049      	b.n	80085d8 <_dtoa_r+0x6a0>
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <_dtoa_r+0x624>)
 8008546:	f7f8 f887 	bl	8000658 <__aeabi_dmul>
 800854a:	4680      	mov	r8, r0
 800854c:	4689      	mov	r9, r1
 800854e:	e7bd      	b.n	80084cc <_dtoa_r+0x594>
 8008550:	0800b0d0 	.word	0x0800b0d0
 8008554:	0800b0a8 	.word	0x0800b0a8
 8008558:	3ff00000 	.word	0x3ff00000
 800855c:	40240000 	.word	0x40240000
 8008560:	401c0000 	.word	0x401c0000
 8008564:	40140000 	.word	0x40140000
 8008568:	3fe00000 	.word	0x3fe00000
 800856c:	9d01      	ldr	r5, [sp, #4]
 800856e:	4656      	mov	r6, sl
 8008570:	465f      	mov	r7, fp
 8008572:	4642      	mov	r2, r8
 8008574:	464b      	mov	r3, r9
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f8 f997 	bl	80008ac <__aeabi_ddiv>
 800857e:	f7f8 fb1b 	bl	8000bb8 <__aeabi_d2iz>
 8008582:	4682      	mov	sl, r0
 8008584:	f7f7 fffe 	bl	8000584 <__aeabi_i2d>
 8008588:	4642      	mov	r2, r8
 800858a:	464b      	mov	r3, r9
 800858c:	f7f8 f864 	bl	8000658 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4630      	mov	r0, r6
 8008596:	4639      	mov	r1, r7
 8008598:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800859c:	f7f7 fea4 	bl	80002e8 <__aeabi_dsub>
 80085a0:	f805 6b01 	strb.w	r6, [r5], #1
 80085a4:	9e01      	ldr	r6, [sp, #4]
 80085a6:	9f03      	ldr	r7, [sp, #12]
 80085a8:	1bae      	subs	r6, r5, r6
 80085aa:	42b7      	cmp	r7, r6
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	d135      	bne.n	800861e <_dtoa_r+0x6e6>
 80085b2:	f7f7 fe9b 	bl	80002ec <__adddf3>
 80085b6:	4642      	mov	r2, r8
 80085b8:	464b      	mov	r3, r9
 80085ba:	4606      	mov	r6, r0
 80085bc:	460f      	mov	r7, r1
 80085be:	f7f8 fadb 	bl	8000b78 <__aeabi_dcmpgt>
 80085c2:	b9d0      	cbnz	r0, 80085fa <_dtoa_r+0x6c2>
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f8 faac 	bl	8000b28 <__aeabi_dcmpeq>
 80085d0:	b110      	cbz	r0, 80085d8 <_dtoa_r+0x6a0>
 80085d2:	f01a 0f01 	tst.w	sl, #1
 80085d6:	d110      	bne.n	80085fa <_dtoa_r+0x6c2>
 80085d8:	4620      	mov	r0, r4
 80085da:	ee18 1a10 	vmov	r1, s16
 80085de:	f000 fe8b 	bl	80092f8 <_Bfree>
 80085e2:	2300      	movs	r3, #0
 80085e4:	9800      	ldr	r0, [sp, #0]
 80085e6:	702b      	strb	r3, [r5, #0]
 80085e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ea:	3001      	adds	r0, #1
 80085ec:	6018      	str	r0, [r3, #0]
 80085ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f43f acf1 	beq.w	8007fd8 <_dtoa_r+0xa0>
 80085f6:	601d      	str	r5, [r3, #0]
 80085f8:	e4ee      	b.n	8007fd8 <_dtoa_r+0xa0>
 80085fa:	9f00      	ldr	r7, [sp, #0]
 80085fc:	462b      	mov	r3, r5
 80085fe:	461d      	mov	r5, r3
 8008600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008604:	2a39      	cmp	r2, #57	; 0x39
 8008606:	d106      	bne.n	8008616 <_dtoa_r+0x6de>
 8008608:	9a01      	ldr	r2, [sp, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d1f7      	bne.n	80085fe <_dtoa_r+0x6c6>
 800860e:	9901      	ldr	r1, [sp, #4]
 8008610:	2230      	movs	r2, #48	; 0x30
 8008612:	3701      	adds	r7, #1
 8008614:	700a      	strb	r2, [r1, #0]
 8008616:	781a      	ldrb	r2, [r3, #0]
 8008618:	3201      	adds	r2, #1
 800861a:	701a      	strb	r2, [r3, #0]
 800861c:	e790      	b.n	8008540 <_dtoa_r+0x608>
 800861e:	4ba6      	ldr	r3, [pc, #664]	; (80088b8 <_dtoa_r+0x980>)
 8008620:	2200      	movs	r2, #0
 8008622:	f7f8 f819 	bl	8000658 <__aeabi_dmul>
 8008626:	2200      	movs	r2, #0
 8008628:	2300      	movs	r3, #0
 800862a:	4606      	mov	r6, r0
 800862c:	460f      	mov	r7, r1
 800862e:	f7f8 fa7b 	bl	8000b28 <__aeabi_dcmpeq>
 8008632:	2800      	cmp	r0, #0
 8008634:	d09d      	beq.n	8008572 <_dtoa_r+0x63a>
 8008636:	e7cf      	b.n	80085d8 <_dtoa_r+0x6a0>
 8008638:	9a08      	ldr	r2, [sp, #32]
 800863a:	2a00      	cmp	r2, #0
 800863c:	f000 80d7 	beq.w	80087ee <_dtoa_r+0x8b6>
 8008640:	9a06      	ldr	r2, [sp, #24]
 8008642:	2a01      	cmp	r2, #1
 8008644:	f300 80ba 	bgt.w	80087bc <_dtoa_r+0x884>
 8008648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800864a:	2a00      	cmp	r2, #0
 800864c:	f000 80b2 	beq.w	80087b4 <_dtoa_r+0x87c>
 8008650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008654:	9e07      	ldr	r6, [sp, #28]
 8008656:	9d04      	ldr	r5, [sp, #16]
 8008658:	9a04      	ldr	r2, [sp, #16]
 800865a:	441a      	add	r2, r3
 800865c:	9204      	str	r2, [sp, #16]
 800865e:	9a05      	ldr	r2, [sp, #20]
 8008660:	2101      	movs	r1, #1
 8008662:	441a      	add	r2, r3
 8008664:	4620      	mov	r0, r4
 8008666:	9205      	str	r2, [sp, #20]
 8008668:	f000 ff48 	bl	80094fc <__i2b>
 800866c:	4607      	mov	r7, r0
 800866e:	2d00      	cmp	r5, #0
 8008670:	dd0c      	ble.n	800868c <_dtoa_r+0x754>
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd09      	ble.n	800868c <_dtoa_r+0x754>
 8008678:	42ab      	cmp	r3, r5
 800867a:	9a04      	ldr	r2, [sp, #16]
 800867c:	bfa8      	it	ge
 800867e:	462b      	movge	r3, r5
 8008680:	1ad2      	subs	r2, r2, r3
 8008682:	9204      	str	r2, [sp, #16]
 8008684:	9a05      	ldr	r2, [sp, #20]
 8008686:	1aed      	subs	r5, r5, r3
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	9b07      	ldr	r3, [sp, #28]
 800868e:	b31b      	cbz	r3, 80086d8 <_dtoa_r+0x7a0>
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80af 	beq.w	80087f6 <_dtoa_r+0x8be>
 8008698:	2e00      	cmp	r6, #0
 800869a:	dd13      	ble.n	80086c4 <_dtoa_r+0x78c>
 800869c:	4639      	mov	r1, r7
 800869e:	4632      	mov	r2, r6
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 ffeb 	bl	800967c <__pow5mult>
 80086a6:	ee18 2a10 	vmov	r2, s16
 80086aa:	4601      	mov	r1, r0
 80086ac:	4607      	mov	r7, r0
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 ff3a 	bl	8009528 <__multiply>
 80086b4:	ee18 1a10 	vmov	r1, s16
 80086b8:	4680      	mov	r8, r0
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fe1c 	bl	80092f8 <_Bfree>
 80086c0:	ee08 8a10 	vmov	s16, r8
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	1b9a      	subs	r2, r3, r6
 80086c8:	d006      	beq.n	80086d8 <_dtoa_r+0x7a0>
 80086ca:	ee18 1a10 	vmov	r1, s16
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 ffd4 	bl	800967c <__pow5mult>
 80086d4:	ee08 0a10 	vmov	s16, r0
 80086d8:	2101      	movs	r1, #1
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 ff0e 	bl	80094fc <__i2b>
 80086e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	4606      	mov	r6, r0
 80086e6:	f340 8088 	ble.w	80087fa <_dtoa_r+0x8c2>
 80086ea:	461a      	mov	r2, r3
 80086ec:	4601      	mov	r1, r0
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 ffc4 	bl	800967c <__pow5mult>
 80086f4:	9b06      	ldr	r3, [sp, #24]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	4606      	mov	r6, r0
 80086fa:	f340 8081 	ble.w	8008800 <_dtoa_r+0x8c8>
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	6933      	ldr	r3, [r6, #16]
 8008704:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	f000 fea7 	bl	800945c <__hi0bits>
 800870e:	f1c0 0020 	rsb	r0, r0, #32
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	4418      	add	r0, r3
 8008716:	f010 001f 	ands.w	r0, r0, #31
 800871a:	f000 8092 	beq.w	8008842 <_dtoa_r+0x90a>
 800871e:	f1c0 0320 	rsb	r3, r0, #32
 8008722:	2b04      	cmp	r3, #4
 8008724:	f340 808a 	ble.w	800883c <_dtoa_r+0x904>
 8008728:	f1c0 001c 	rsb	r0, r0, #28
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	4403      	add	r3, r0
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	9b05      	ldr	r3, [sp, #20]
 8008734:	4403      	add	r3, r0
 8008736:	4405      	add	r5, r0
 8008738:	9305      	str	r3, [sp, #20]
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	dd07      	ble.n	8008750 <_dtoa_r+0x818>
 8008740:	ee18 1a10 	vmov	r1, s16
 8008744:	461a      	mov	r2, r3
 8008746:	4620      	mov	r0, r4
 8008748:	f000 fff2 	bl	8009730 <__lshift>
 800874c:	ee08 0a10 	vmov	s16, r0
 8008750:	9b05      	ldr	r3, [sp, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	dd05      	ble.n	8008762 <_dtoa_r+0x82a>
 8008756:	4631      	mov	r1, r6
 8008758:	461a      	mov	r2, r3
 800875a:	4620      	mov	r0, r4
 800875c:	f000 ffe8 	bl	8009730 <__lshift>
 8008760:	4606      	mov	r6, r0
 8008762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008764:	2b00      	cmp	r3, #0
 8008766:	d06e      	beq.n	8008846 <_dtoa_r+0x90e>
 8008768:	ee18 0a10 	vmov	r0, s16
 800876c:	4631      	mov	r1, r6
 800876e:	f001 f84f 	bl	8009810 <__mcmp>
 8008772:	2800      	cmp	r0, #0
 8008774:	da67      	bge.n	8008846 <_dtoa_r+0x90e>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	3b01      	subs	r3, #1
 800877a:	ee18 1a10 	vmov	r1, s16
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	220a      	movs	r2, #10
 8008782:	2300      	movs	r3, #0
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fdd9 	bl	800933c <__multadd>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	ee08 0a10 	vmov	s16, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 81b1 	beq.w	8008af8 <_dtoa_r+0xbc0>
 8008796:	2300      	movs	r3, #0
 8008798:	4639      	mov	r1, r7
 800879a:	220a      	movs	r2, #10
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fdcd 	bl	800933c <__multadd>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	4607      	mov	r7, r0
 80087a8:	f300 808e 	bgt.w	80088c8 <_dtoa_r+0x990>
 80087ac:	9b06      	ldr	r3, [sp, #24]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	dc51      	bgt.n	8008856 <_dtoa_r+0x91e>
 80087b2:	e089      	b.n	80088c8 <_dtoa_r+0x990>
 80087b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087ba:	e74b      	b.n	8008654 <_dtoa_r+0x71c>
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	1e5e      	subs	r6, r3, #1
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	42b3      	cmp	r3, r6
 80087c4:	bfbf      	itttt	lt
 80087c6:	9b07      	ldrlt	r3, [sp, #28]
 80087c8:	9607      	strlt	r6, [sp, #28]
 80087ca:	1af2      	sublt	r2, r6, r3
 80087cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087ce:	bfb6      	itet	lt
 80087d0:	189b      	addlt	r3, r3, r2
 80087d2:	1b9e      	subge	r6, r3, r6
 80087d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80087d6:	9b03      	ldr	r3, [sp, #12]
 80087d8:	bfb8      	it	lt
 80087da:	2600      	movlt	r6, #0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	bfb7      	itett	lt
 80087e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087e8:	1a9d      	sublt	r5, r3, r2
 80087ea:	2300      	movlt	r3, #0
 80087ec:	e734      	b.n	8008658 <_dtoa_r+0x720>
 80087ee:	9e07      	ldr	r6, [sp, #28]
 80087f0:	9d04      	ldr	r5, [sp, #16]
 80087f2:	9f08      	ldr	r7, [sp, #32]
 80087f4:	e73b      	b.n	800866e <_dtoa_r+0x736>
 80087f6:	9a07      	ldr	r2, [sp, #28]
 80087f8:	e767      	b.n	80086ca <_dtoa_r+0x792>
 80087fa:	9b06      	ldr	r3, [sp, #24]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	dc18      	bgt.n	8008832 <_dtoa_r+0x8fa>
 8008800:	f1ba 0f00 	cmp.w	sl, #0
 8008804:	d115      	bne.n	8008832 <_dtoa_r+0x8fa>
 8008806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800880a:	b993      	cbnz	r3, 8008832 <_dtoa_r+0x8fa>
 800880c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008810:	0d1b      	lsrs	r3, r3, #20
 8008812:	051b      	lsls	r3, r3, #20
 8008814:	b183      	cbz	r3, 8008838 <_dtoa_r+0x900>
 8008816:	9b04      	ldr	r3, [sp, #16]
 8008818:	3301      	adds	r3, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	9b05      	ldr	r3, [sp, #20]
 800881e:	3301      	adds	r3, #1
 8008820:	9305      	str	r3, [sp, #20]
 8008822:	f04f 0801 	mov.w	r8, #1
 8008826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008828:	2b00      	cmp	r3, #0
 800882a:	f47f af6a 	bne.w	8008702 <_dtoa_r+0x7ca>
 800882e:	2001      	movs	r0, #1
 8008830:	e76f      	b.n	8008712 <_dtoa_r+0x7da>
 8008832:	f04f 0800 	mov.w	r8, #0
 8008836:	e7f6      	b.n	8008826 <_dtoa_r+0x8ee>
 8008838:	4698      	mov	r8, r3
 800883a:	e7f4      	b.n	8008826 <_dtoa_r+0x8ee>
 800883c:	f43f af7d 	beq.w	800873a <_dtoa_r+0x802>
 8008840:	4618      	mov	r0, r3
 8008842:	301c      	adds	r0, #28
 8008844:	e772      	b.n	800872c <_dtoa_r+0x7f4>
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	dc37      	bgt.n	80088bc <_dtoa_r+0x984>
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	2b02      	cmp	r3, #2
 8008850:	dd34      	ble.n	80088bc <_dtoa_r+0x984>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	9302      	str	r3, [sp, #8]
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	b96b      	cbnz	r3, 8008876 <_dtoa_r+0x93e>
 800885a:	4631      	mov	r1, r6
 800885c:	2205      	movs	r2, #5
 800885e:	4620      	mov	r0, r4
 8008860:	f000 fd6c 	bl	800933c <__multadd>
 8008864:	4601      	mov	r1, r0
 8008866:	4606      	mov	r6, r0
 8008868:	ee18 0a10 	vmov	r0, s16
 800886c:	f000 ffd0 	bl	8009810 <__mcmp>
 8008870:	2800      	cmp	r0, #0
 8008872:	f73f adbb 	bgt.w	80083ec <_dtoa_r+0x4b4>
 8008876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008878:	9d01      	ldr	r5, [sp, #4]
 800887a:	43db      	mvns	r3, r3
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	4631      	mov	r1, r6
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fd37 	bl	80092f8 <_Bfree>
 800888a:	2f00      	cmp	r7, #0
 800888c:	f43f aea4 	beq.w	80085d8 <_dtoa_r+0x6a0>
 8008890:	f1b8 0f00 	cmp.w	r8, #0
 8008894:	d005      	beq.n	80088a2 <_dtoa_r+0x96a>
 8008896:	45b8      	cmp	r8, r7
 8008898:	d003      	beq.n	80088a2 <_dtoa_r+0x96a>
 800889a:	4641      	mov	r1, r8
 800889c:	4620      	mov	r0, r4
 800889e:	f000 fd2b 	bl	80092f8 <_Bfree>
 80088a2:	4639      	mov	r1, r7
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fd27 	bl	80092f8 <_Bfree>
 80088aa:	e695      	b.n	80085d8 <_dtoa_r+0x6a0>
 80088ac:	2600      	movs	r6, #0
 80088ae:	4637      	mov	r7, r6
 80088b0:	e7e1      	b.n	8008876 <_dtoa_r+0x93e>
 80088b2:	9700      	str	r7, [sp, #0]
 80088b4:	4637      	mov	r7, r6
 80088b6:	e599      	b.n	80083ec <_dtoa_r+0x4b4>
 80088b8:	40240000 	.word	0x40240000
 80088bc:	9b08      	ldr	r3, [sp, #32]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80ca 	beq.w	8008a58 <_dtoa_r+0xb20>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	9302      	str	r3, [sp, #8]
 80088c8:	2d00      	cmp	r5, #0
 80088ca:	dd05      	ble.n	80088d8 <_dtoa_r+0x9a0>
 80088cc:	4639      	mov	r1, r7
 80088ce:	462a      	mov	r2, r5
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 ff2d 	bl	8009730 <__lshift>
 80088d6:	4607      	mov	r7, r0
 80088d8:	f1b8 0f00 	cmp.w	r8, #0
 80088dc:	d05b      	beq.n	8008996 <_dtoa_r+0xa5e>
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fcc9 	bl	8009278 <_Balloc>
 80088e6:	4605      	mov	r5, r0
 80088e8:	b928      	cbnz	r0, 80088f6 <_dtoa_r+0x9be>
 80088ea:	4b87      	ldr	r3, [pc, #540]	; (8008b08 <_dtoa_r+0xbd0>)
 80088ec:	4602      	mov	r2, r0
 80088ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088f2:	f7ff bb3b 	b.w	8007f6c <_dtoa_r+0x34>
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	3202      	adds	r2, #2
 80088fa:	0092      	lsls	r2, r2, #2
 80088fc:	f107 010c 	add.w	r1, r7, #12
 8008900:	300c      	adds	r0, #12
 8008902:	f000 fc9f 	bl	8009244 <memcpy>
 8008906:	2201      	movs	r2, #1
 8008908:	4629      	mov	r1, r5
 800890a:	4620      	mov	r0, r4
 800890c:	f000 ff10 	bl	8009730 <__lshift>
 8008910:	9b01      	ldr	r3, [sp, #4]
 8008912:	f103 0901 	add.w	r9, r3, #1
 8008916:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800891a:	4413      	add	r3, r2
 800891c:	9305      	str	r3, [sp, #20]
 800891e:	f00a 0301 	and.w	r3, sl, #1
 8008922:	46b8      	mov	r8, r7
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	4607      	mov	r7, r0
 8008928:	4631      	mov	r1, r6
 800892a:	ee18 0a10 	vmov	r0, s16
 800892e:	f7ff fa77 	bl	8007e20 <quorem>
 8008932:	4641      	mov	r1, r8
 8008934:	9002      	str	r0, [sp, #8]
 8008936:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800893a:	ee18 0a10 	vmov	r0, s16
 800893e:	f000 ff67 	bl	8009810 <__mcmp>
 8008942:	463a      	mov	r2, r7
 8008944:	9003      	str	r0, [sp, #12]
 8008946:	4631      	mov	r1, r6
 8008948:	4620      	mov	r0, r4
 800894a:	f000 ff7d 	bl	8009848 <__mdiff>
 800894e:	68c2      	ldr	r2, [r0, #12]
 8008950:	f109 3bff 	add.w	fp, r9, #4294967295
 8008954:	4605      	mov	r5, r0
 8008956:	bb02      	cbnz	r2, 800899a <_dtoa_r+0xa62>
 8008958:	4601      	mov	r1, r0
 800895a:	ee18 0a10 	vmov	r0, s16
 800895e:	f000 ff57 	bl	8009810 <__mcmp>
 8008962:	4602      	mov	r2, r0
 8008964:	4629      	mov	r1, r5
 8008966:	4620      	mov	r0, r4
 8008968:	9207      	str	r2, [sp, #28]
 800896a:	f000 fcc5 	bl	80092f8 <_Bfree>
 800896e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008972:	ea43 0102 	orr.w	r1, r3, r2
 8008976:	9b04      	ldr	r3, [sp, #16]
 8008978:	430b      	orrs	r3, r1
 800897a:	464d      	mov	r5, r9
 800897c:	d10f      	bne.n	800899e <_dtoa_r+0xa66>
 800897e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008982:	d02a      	beq.n	80089da <_dtoa_r+0xaa2>
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	dd02      	ble.n	8008990 <_dtoa_r+0xa58>
 800898a:	9b02      	ldr	r3, [sp, #8]
 800898c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008990:	f88b a000 	strb.w	sl, [fp]
 8008994:	e775      	b.n	8008882 <_dtoa_r+0x94a>
 8008996:	4638      	mov	r0, r7
 8008998:	e7ba      	b.n	8008910 <_dtoa_r+0x9d8>
 800899a:	2201      	movs	r2, #1
 800899c:	e7e2      	b.n	8008964 <_dtoa_r+0xa2c>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	db04      	blt.n	80089ae <_dtoa_r+0xa76>
 80089a4:	9906      	ldr	r1, [sp, #24]
 80089a6:	430b      	orrs	r3, r1
 80089a8:	9904      	ldr	r1, [sp, #16]
 80089aa:	430b      	orrs	r3, r1
 80089ac:	d122      	bne.n	80089f4 <_dtoa_r+0xabc>
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	ddee      	ble.n	8008990 <_dtoa_r+0xa58>
 80089b2:	ee18 1a10 	vmov	r1, s16
 80089b6:	2201      	movs	r2, #1
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 feb9 	bl	8009730 <__lshift>
 80089be:	4631      	mov	r1, r6
 80089c0:	ee08 0a10 	vmov	s16, r0
 80089c4:	f000 ff24 	bl	8009810 <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	dc03      	bgt.n	80089d4 <_dtoa_r+0xa9c>
 80089cc:	d1e0      	bne.n	8008990 <_dtoa_r+0xa58>
 80089ce:	f01a 0f01 	tst.w	sl, #1
 80089d2:	d0dd      	beq.n	8008990 <_dtoa_r+0xa58>
 80089d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089d8:	d1d7      	bne.n	800898a <_dtoa_r+0xa52>
 80089da:	2339      	movs	r3, #57	; 0x39
 80089dc:	f88b 3000 	strb.w	r3, [fp]
 80089e0:	462b      	mov	r3, r5
 80089e2:	461d      	mov	r5, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089ea:	2a39      	cmp	r2, #57	; 0x39
 80089ec:	d071      	beq.n	8008ad2 <_dtoa_r+0xb9a>
 80089ee:	3201      	adds	r2, #1
 80089f0:	701a      	strb	r2, [r3, #0]
 80089f2:	e746      	b.n	8008882 <_dtoa_r+0x94a>
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	dd07      	ble.n	8008a08 <_dtoa_r+0xad0>
 80089f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089fc:	d0ed      	beq.n	80089da <_dtoa_r+0xaa2>
 80089fe:	f10a 0301 	add.w	r3, sl, #1
 8008a02:	f88b 3000 	strb.w	r3, [fp]
 8008a06:	e73c      	b.n	8008882 <_dtoa_r+0x94a>
 8008a08:	9b05      	ldr	r3, [sp, #20]
 8008a0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a0e:	4599      	cmp	r9, r3
 8008a10:	d047      	beq.n	8008aa2 <_dtoa_r+0xb6a>
 8008a12:	ee18 1a10 	vmov	r1, s16
 8008a16:	2300      	movs	r3, #0
 8008a18:	220a      	movs	r2, #10
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fc8e 	bl	800933c <__multadd>
 8008a20:	45b8      	cmp	r8, r7
 8008a22:	ee08 0a10 	vmov	s16, r0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	f04f 020a 	mov.w	r2, #10
 8008a2e:	4641      	mov	r1, r8
 8008a30:	4620      	mov	r0, r4
 8008a32:	d106      	bne.n	8008a42 <_dtoa_r+0xb0a>
 8008a34:	f000 fc82 	bl	800933c <__multadd>
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	f109 0901 	add.w	r9, r9, #1
 8008a40:	e772      	b.n	8008928 <_dtoa_r+0x9f0>
 8008a42:	f000 fc7b 	bl	800933c <__multadd>
 8008a46:	4639      	mov	r1, r7
 8008a48:	4680      	mov	r8, r0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fc74 	bl	800933c <__multadd>
 8008a54:	4607      	mov	r7, r0
 8008a56:	e7f1      	b.n	8008a3c <_dtoa_r+0xb04>
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	9302      	str	r3, [sp, #8]
 8008a5c:	9d01      	ldr	r5, [sp, #4]
 8008a5e:	ee18 0a10 	vmov	r0, s16
 8008a62:	4631      	mov	r1, r6
 8008a64:	f7ff f9dc 	bl	8007e20 <quorem>
 8008a68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	f805 ab01 	strb.w	sl, [r5], #1
 8008a72:	1aea      	subs	r2, r5, r3
 8008a74:	9b02      	ldr	r3, [sp, #8]
 8008a76:	4293      	cmp	r3, r2
 8008a78:	dd09      	ble.n	8008a8e <_dtoa_r+0xb56>
 8008a7a:	ee18 1a10 	vmov	r1, s16
 8008a7e:	2300      	movs	r3, #0
 8008a80:	220a      	movs	r2, #10
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fc5a 	bl	800933c <__multadd>
 8008a88:	ee08 0a10 	vmov	s16, r0
 8008a8c:	e7e7      	b.n	8008a5e <_dtoa_r+0xb26>
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfc8      	it	gt
 8008a94:	461d      	movgt	r5, r3
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	bfd8      	it	le
 8008a9a:	2501      	movle	r5, #1
 8008a9c:	441d      	add	r5, r3
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	ee18 1a10 	vmov	r1, s16
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 fe41 	bl	8009730 <__lshift>
 8008aae:	4631      	mov	r1, r6
 8008ab0:	ee08 0a10 	vmov	s16, r0
 8008ab4:	f000 feac 	bl	8009810 <__mcmp>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	dc91      	bgt.n	80089e0 <_dtoa_r+0xaa8>
 8008abc:	d102      	bne.n	8008ac4 <_dtoa_r+0xb8c>
 8008abe:	f01a 0f01 	tst.w	sl, #1
 8008ac2:	d18d      	bne.n	80089e0 <_dtoa_r+0xaa8>
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	461d      	mov	r5, r3
 8008ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008acc:	2a30      	cmp	r2, #48	; 0x30
 8008ace:	d0fa      	beq.n	8008ac6 <_dtoa_r+0xb8e>
 8008ad0:	e6d7      	b.n	8008882 <_dtoa_r+0x94a>
 8008ad2:	9a01      	ldr	r2, [sp, #4]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d184      	bne.n	80089e2 <_dtoa_r+0xaaa>
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2331      	movs	r3, #49	; 0x31
 8008ae0:	7013      	strb	r3, [r2, #0]
 8008ae2:	e6ce      	b.n	8008882 <_dtoa_r+0x94a>
 8008ae4:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <_dtoa_r+0xbd4>)
 8008ae6:	f7ff ba95 	b.w	8008014 <_dtoa_r+0xdc>
 8008aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f47f aa6e 	bne.w	8007fce <_dtoa_r+0x96>
 8008af2:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <_dtoa_r+0xbd8>)
 8008af4:	f7ff ba8e 	b.w	8008014 <_dtoa_r+0xdc>
 8008af8:	9b02      	ldr	r3, [sp, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dcae      	bgt.n	8008a5c <_dtoa_r+0xb24>
 8008afe:	9b06      	ldr	r3, [sp, #24]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	f73f aea8 	bgt.w	8008856 <_dtoa_r+0x91e>
 8008b06:	e7a9      	b.n	8008a5c <_dtoa_r+0xb24>
 8008b08:	0800afc0 	.word	0x0800afc0
 8008b0c:	0800ae28 	.word	0x0800ae28
 8008b10:	0800af58 	.word	0x0800af58

08008b14 <fiprintf>:
 8008b14:	b40e      	push	{r1, r2, r3}
 8008b16:	b503      	push	{r0, r1, lr}
 8008b18:	4601      	mov	r1, r0
 8008b1a:	ab03      	add	r3, sp, #12
 8008b1c:	4805      	ldr	r0, [pc, #20]	; (8008b34 <fiprintf+0x20>)
 8008b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b22:	6800      	ldr	r0, [r0, #0]
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f001 fa03 	bl	8009f30 <_vfiprintf_r>
 8008b2a:	b002      	add	sp, #8
 8008b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b30:	b003      	add	sp, #12
 8008b32:	4770      	bx	lr
 8008b34:	2000000c 	.word	0x2000000c

08008b38 <rshift>:
 8008b38:	6903      	ldr	r3, [r0, #16]
 8008b3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b46:	f100 0414 	add.w	r4, r0, #20
 8008b4a:	dd45      	ble.n	8008bd8 <rshift+0xa0>
 8008b4c:	f011 011f 	ands.w	r1, r1, #31
 8008b50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b58:	d10c      	bne.n	8008b74 <rshift+0x3c>
 8008b5a:	f100 0710 	add.w	r7, r0, #16
 8008b5e:	4629      	mov	r1, r5
 8008b60:	42b1      	cmp	r1, r6
 8008b62:	d334      	bcc.n	8008bce <rshift+0x96>
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	1eea      	subs	r2, r5, #3
 8008b6a:	4296      	cmp	r6, r2
 8008b6c:	bf38      	it	cc
 8008b6e:	2300      	movcc	r3, #0
 8008b70:	4423      	add	r3, r4
 8008b72:	e015      	b.n	8008ba0 <rshift+0x68>
 8008b74:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b78:	f1c1 0820 	rsb	r8, r1, #32
 8008b7c:	40cf      	lsrs	r7, r1
 8008b7e:	f105 0e04 	add.w	lr, r5, #4
 8008b82:	46a1      	mov	r9, r4
 8008b84:	4576      	cmp	r6, lr
 8008b86:	46f4      	mov	ip, lr
 8008b88:	d815      	bhi.n	8008bb6 <rshift+0x7e>
 8008b8a:	1a9a      	subs	r2, r3, r2
 8008b8c:	0092      	lsls	r2, r2, #2
 8008b8e:	3a04      	subs	r2, #4
 8008b90:	3501      	adds	r5, #1
 8008b92:	42ae      	cmp	r6, r5
 8008b94:	bf38      	it	cc
 8008b96:	2200      	movcc	r2, #0
 8008b98:	18a3      	adds	r3, r4, r2
 8008b9a:	50a7      	str	r7, [r4, r2]
 8008b9c:	b107      	cbz	r7, 8008ba0 <rshift+0x68>
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	1b1a      	subs	r2, r3, r4
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ba8:	bf08      	it	eq
 8008baa:	2300      	moveq	r3, #0
 8008bac:	6102      	str	r2, [r0, #16]
 8008bae:	bf08      	it	eq
 8008bb0:	6143      	streq	r3, [r0, #20]
 8008bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bb6:	f8dc c000 	ldr.w	ip, [ip]
 8008bba:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bbe:	ea4c 0707 	orr.w	r7, ip, r7
 8008bc2:	f849 7b04 	str.w	r7, [r9], #4
 8008bc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bca:	40cf      	lsrs	r7, r1
 8008bcc:	e7da      	b.n	8008b84 <rshift+0x4c>
 8008bce:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bd2:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bd6:	e7c3      	b.n	8008b60 <rshift+0x28>
 8008bd8:	4623      	mov	r3, r4
 8008bda:	e7e1      	b.n	8008ba0 <rshift+0x68>

08008bdc <__hexdig_fun>:
 8008bdc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008be0:	2b09      	cmp	r3, #9
 8008be2:	d802      	bhi.n	8008bea <__hexdig_fun+0xe>
 8008be4:	3820      	subs	r0, #32
 8008be6:	b2c0      	uxtb	r0, r0
 8008be8:	4770      	bx	lr
 8008bea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	d801      	bhi.n	8008bf6 <__hexdig_fun+0x1a>
 8008bf2:	3847      	subs	r0, #71	; 0x47
 8008bf4:	e7f7      	b.n	8008be6 <__hexdig_fun+0xa>
 8008bf6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d801      	bhi.n	8008c02 <__hexdig_fun+0x26>
 8008bfe:	3827      	subs	r0, #39	; 0x27
 8008c00:	e7f1      	b.n	8008be6 <__hexdig_fun+0xa>
 8008c02:	2000      	movs	r0, #0
 8008c04:	4770      	bx	lr
	...

08008c08 <__gethex>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ed2d 8b02 	vpush	{d8}
 8008c10:	b089      	sub	sp, #36	; 0x24
 8008c12:	ee08 0a10 	vmov	s16, r0
 8008c16:	9304      	str	r3, [sp, #16]
 8008c18:	4bb4      	ldr	r3, [pc, #720]	; (8008eec <__gethex+0x2e4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	468b      	mov	fp, r1
 8008c22:	4690      	mov	r8, r2
 8008c24:	f7f7 fafe 	bl	8000224 <strlen>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	f8db 2000 	ldr.w	r2, [fp]
 8008c2e:	4403      	add	r3, r0
 8008c30:	4682      	mov	sl, r0
 8008c32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	1c93      	adds	r3, r2, #2
 8008c3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c42:	32fe      	adds	r2, #254	; 0xfe
 8008c44:	18d1      	adds	r1, r2, r3
 8008c46:	461f      	mov	r7, r3
 8008c48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c4c:	9100      	str	r1, [sp, #0]
 8008c4e:	2830      	cmp	r0, #48	; 0x30
 8008c50:	d0f8      	beq.n	8008c44 <__gethex+0x3c>
 8008c52:	f7ff ffc3 	bl	8008bdc <__hexdig_fun>
 8008c56:	4604      	mov	r4, r0
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d13a      	bne.n	8008cd2 <__gethex+0xca>
 8008c5c:	9901      	ldr	r1, [sp, #4]
 8008c5e:	4652      	mov	r2, sl
 8008c60:	4638      	mov	r0, r7
 8008c62:	f001 fa9d 	bl	800a1a0 <strncmp>
 8008c66:	4605      	mov	r5, r0
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d168      	bne.n	8008d3e <__gethex+0x136>
 8008c6c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c70:	eb07 060a 	add.w	r6, r7, sl
 8008c74:	f7ff ffb2 	bl	8008bdc <__hexdig_fun>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d062      	beq.n	8008d42 <__gethex+0x13a>
 8008c7c:	4633      	mov	r3, r6
 8008c7e:	7818      	ldrb	r0, [r3, #0]
 8008c80:	2830      	cmp	r0, #48	; 0x30
 8008c82:	461f      	mov	r7, r3
 8008c84:	f103 0301 	add.w	r3, r3, #1
 8008c88:	d0f9      	beq.n	8008c7e <__gethex+0x76>
 8008c8a:	f7ff ffa7 	bl	8008bdc <__hexdig_fun>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	fab0 f480 	clz	r4, r0
 8008c94:	0964      	lsrs	r4, r4, #5
 8008c96:	4635      	mov	r5, r6
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	463a      	mov	r2, r7
 8008c9c:	4616      	mov	r6, r2
 8008c9e:	3201      	adds	r2, #1
 8008ca0:	7830      	ldrb	r0, [r6, #0]
 8008ca2:	f7ff ff9b 	bl	8008bdc <__hexdig_fun>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d1f8      	bne.n	8008c9c <__gethex+0x94>
 8008caa:	9901      	ldr	r1, [sp, #4]
 8008cac:	4652      	mov	r2, sl
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f001 fa76 	bl	800a1a0 <strncmp>
 8008cb4:	b980      	cbnz	r0, 8008cd8 <__gethex+0xd0>
 8008cb6:	b94d      	cbnz	r5, 8008ccc <__gethex+0xc4>
 8008cb8:	eb06 050a 	add.w	r5, r6, sl
 8008cbc:	462a      	mov	r2, r5
 8008cbe:	4616      	mov	r6, r2
 8008cc0:	3201      	adds	r2, #1
 8008cc2:	7830      	ldrb	r0, [r6, #0]
 8008cc4:	f7ff ff8a 	bl	8008bdc <__hexdig_fun>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d1f8      	bne.n	8008cbe <__gethex+0xb6>
 8008ccc:	1bad      	subs	r5, r5, r6
 8008cce:	00ad      	lsls	r5, r5, #2
 8008cd0:	e004      	b.n	8008cdc <__gethex+0xd4>
 8008cd2:	2400      	movs	r4, #0
 8008cd4:	4625      	mov	r5, r4
 8008cd6:	e7e0      	b.n	8008c9a <__gethex+0x92>
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	d1f7      	bne.n	8008ccc <__gethex+0xc4>
 8008cdc:	7833      	ldrb	r3, [r6, #0]
 8008cde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ce2:	2b50      	cmp	r3, #80	; 0x50
 8008ce4:	d13b      	bne.n	8008d5e <__gethex+0x156>
 8008ce6:	7873      	ldrb	r3, [r6, #1]
 8008ce8:	2b2b      	cmp	r3, #43	; 0x2b
 8008cea:	d02c      	beq.n	8008d46 <__gethex+0x13e>
 8008cec:	2b2d      	cmp	r3, #45	; 0x2d
 8008cee:	d02e      	beq.n	8008d4e <__gethex+0x146>
 8008cf0:	1c71      	adds	r1, r6, #1
 8008cf2:	f04f 0900 	mov.w	r9, #0
 8008cf6:	7808      	ldrb	r0, [r1, #0]
 8008cf8:	f7ff ff70 	bl	8008bdc <__hexdig_fun>
 8008cfc:	1e43      	subs	r3, r0, #1
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b18      	cmp	r3, #24
 8008d02:	d82c      	bhi.n	8008d5e <__gethex+0x156>
 8008d04:	f1a0 0210 	sub.w	r2, r0, #16
 8008d08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d0c:	f7ff ff66 	bl	8008bdc <__hexdig_fun>
 8008d10:	1e43      	subs	r3, r0, #1
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b18      	cmp	r3, #24
 8008d16:	d91d      	bls.n	8008d54 <__gethex+0x14c>
 8008d18:	f1b9 0f00 	cmp.w	r9, #0
 8008d1c:	d000      	beq.n	8008d20 <__gethex+0x118>
 8008d1e:	4252      	negs	r2, r2
 8008d20:	4415      	add	r5, r2
 8008d22:	f8cb 1000 	str.w	r1, [fp]
 8008d26:	b1e4      	cbz	r4, 8008d62 <__gethex+0x15a>
 8008d28:	9b00      	ldr	r3, [sp, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	bf14      	ite	ne
 8008d2e:	2700      	movne	r7, #0
 8008d30:	2706      	moveq	r7, #6
 8008d32:	4638      	mov	r0, r7
 8008d34:	b009      	add	sp, #36	; 0x24
 8008d36:	ecbd 8b02 	vpop	{d8}
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	463e      	mov	r6, r7
 8008d40:	4625      	mov	r5, r4
 8008d42:	2401      	movs	r4, #1
 8008d44:	e7ca      	b.n	8008cdc <__gethex+0xd4>
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	1cb1      	adds	r1, r6, #2
 8008d4c:	e7d3      	b.n	8008cf6 <__gethex+0xee>
 8008d4e:	f04f 0901 	mov.w	r9, #1
 8008d52:	e7fa      	b.n	8008d4a <__gethex+0x142>
 8008d54:	230a      	movs	r3, #10
 8008d56:	fb03 0202 	mla	r2, r3, r2, r0
 8008d5a:	3a10      	subs	r2, #16
 8008d5c:	e7d4      	b.n	8008d08 <__gethex+0x100>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	e7df      	b.n	8008d22 <__gethex+0x11a>
 8008d62:	1bf3      	subs	r3, r6, r7
 8008d64:	3b01      	subs	r3, #1
 8008d66:	4621      	mov	r1, r4
 8008d68:	2b07      	cmp	r3, #7
 8008d6a:	dc0b      	bgt.n	8008d84 <__gethex+0x17c>
 8008d6c:	ee18 0a10 	vmov	r0, s16
 8008d70:	f000 fa82 	bl	8009278 <_Balloc>
 8008d74:	4604      	mov	r4, r0
 8008d76:	b940      	cbnz	r0, 8008d8a <__gethex+0x182>
 8008d78:	4b5d      	ldr	r3, [pc, #372]	; (8008ef0 <__gethex+0x2e8>)
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	21de      	movs	r1, #222	; 0xde
 8008d7e:	485d      	ldr	r0, [pc, #372]	; (8008ef4 <__gethex+0x2ec>)
 8008d80:	f7ff f830 	bl	8007de4 <__assert_func>
 8008d84:	3101      	adds	r1, #1
 8008d86:	105b      	asrs	r3, r3, #1
 8008d88:	e7ee      	b.n	8008d68 <__gethex+0x160>
 8008d8a:	f100 0914 	add.w	r9, r0, #20
 8008d8e:	f04f 0b00 	mov.w	fp, #0
 8008d92:	f1ca 0301 	rsb	r3, sl, #1
 8008d96:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d9a:	f8cd b000 	str.w	fp, [sp]
 8008d9e:	9306      	str	r3, [sp, #24]
 8008da0:	42b7      	cmp	r7, r6
 8008da2:	d340      	bcc.n	8008e26 <__gethex+0x21e>
 8008da4:	9802      	ldr	r0, [sp, #8]
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	f840 3b04 	str.w	r3, [r0], #4
 8008dac:	eba0 0009 	sub.w	r0, r0, r9
 8008db0:	1080      	asrs	r0, r0, #2
 8008db2:	0146      	lsls	r6, r0, #5
 8008db4:	6120      	str	r0, [r4, #16]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fb50 	bl	800945c <__hi0bits>
 8008dbc:	1a30      	subs	r0, r6, r0
 8008dbe:	f8d8 6000 	ldr.w	r6, [r8]
 8008dc2:	42b0      	cmp	r0, r6
 8008dc4:	dd63      	ble.n	8008e8e <__gethex+0x286>
 8008dc6:	1b87      	subs	r7, r0, r6
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f000 fef4 	bl	8009bb8 <__any_on>
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	b1a8      	cbz	r0, 8008e00 <__gethex+0x1f8>
 8008dd4:	1e7b      	subs	r3, r7, #1
 8008dd6:	1159      	asrs	r1, r3, #5
 8008dd8:	f003 021f 	and.w	r2, r3, #31
 8008ddc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008de0:	f04f 0a01 	mov.w	sl, #1
 8008de4:	fa0a f202 	lsl.w	r2, sl, r2
 8008de8:	420a      	tst	r2, r1
 8008dea:	d009      	beq.n	8008e00 <__gethex+0x1f8>
 8008dec:	4553      	cmp	r3, sl
 8008dee:	dd05      	ble.n	8008dfc <__gethex+0x1f4>
 8008df0:	1eb9      	subs	r1, r7, #2
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 fee0 	bl	8009bb8 <__any_on>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d145      	bne.n	8008e88 <__gethex+0x280>
 8008dfc:	f04f 0a02 	mov.w	sl, #2
 8008e00:	4639      	mov	r1, r7
 8008e02:	4620      	mov	r0, r4
 8008e04:	f7ff fe98 	bl	8008b38 <rshift>
 8008e08:	443d      	add	r5, r7
 8008e0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e0e:	42ab      	cmp	r3, r5
 8008e10:	da4c      	bge.n	8008eac <__gethex+0x2a4>
 8008e12:	ee18 0a10 	vmov	r0, s16
 8008e16:	4621      	mov	r1, r4
 8008e18:	f000 fa6e 	bl	80092f8 <_Bfree>
 8008e1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	27a3      	movs	r7, #163	; 0xa3
 8008e24:	e785      	b.n	8008d32 <__gethex+0x12a>
 8008e26:	1e73      	subs	r3, r6, #1
 8008e28:	9a05      	ldr	r2, [sp, #20]
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d019      	beq.n	8008e68 <__gethex+0x260>
 8008e34:	f1bb 0f20 	cmp.w	fp, #32
 8008e38:	d107      	bne.n	8008e4a <__gethex+0x242>
 8008e3a:	9b02      	ldr	r3, [sp, #8]
 8008e3c:	9a00      	ldr	r2, [sp, #0]
 8008e3e:	f843 2b04 	str.w	r2, [r3], #4
 8008e42:	9302      	str	r3, [sp, #8]
 8008e44:	2300      	movs	r3, #0
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	469b      	mov	fp, r3
 8008e4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e4e:	f7ff fec5 	bl	8008bdc <__hexdig_fun>
 8008e52:	9b00      	ldr	r3, [sp, #0]
 8008e54:	f000 000f 	and.w	r0, r0, #15
 8008e58:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e5c:	4303      	orrs	r3, r0
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	f10b 0b04 	add.w	fp, fp, #4
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	e00d      	b.n	8008e84 <__gethex+0x27c>
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	9a06      	ldr	r2, [sp, #24]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	42bb      	cmp	r3, r7
 8008e70:	d3e0      	bcc.n	8008e34 <__gethex+0x22c>
 8008e72:	4618      	mov	r0, r3
 8008e74:	9901      	ldr	r1, [sp, #4]
 8008e76:	9307      	str	r3, [sp, #28]
 8008e78:	4652      	mov	r2, sl
 8008e7a:	f001 f991 	bl	800a1a0 <strncmp>
 8008e7e:	9b07      	ldr	r3, [sp, #28]
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1d7      	bne.n	8008e34 <__gethex+0x22c>
 8008e84:	461e      	mov	r6, r3
 8008e86:	e78b      	b.n	8008da0 <__gethex+0x198>
 8008e88:	f04f 0a03 	mov.w	sl, #3
 8008e8c:	e7b8      	b.n	8008e00 <__gethex+0x1f8>
 8008e8e:	da0a      	bge.n	8008ea6 <__gethex+0x29e>
 8008e90:	1a37      	subs	r7, r6, r0
 8008e92:	4621      	mov	r1, r4
 8008e94:	ee18 0a10 	vmov	r0, s16
 8008e98:	463a      	mov	r2, r7
 8008e9a:	f000 fc49 	bl	8009730 <__lshift>
 8008e9e:	1bed      	subs	r5, r5, r7
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	f100 0914 	add.w	r9, r0, #20
 8008ea6:	f04f 0a00 	mov.w	sl, #0
 8008eaa:	e7ae      	b.n	8008e0a <__gethex+0x202>
 8008eac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008eb0:	42a8      	cmp	r0, r5
 8008eb2:	dd72      	ble.n	8008f9a <__gethex+0x392>
 8008eb4:	1b45      	subs	r5, r0, r5
 8008eb6:	42ae      	cmp	r6, r5
 8008eb8:	dc36      	bgt.n	8008f28 <__gethex+0x320>
 8008eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d02a      	beq.n	8008f18 <__gethex+0x310>
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d02c      	beq.n	8008f20 <__gethex+0x318>
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d11c      	bne.n	8008f04 <__gethex+0x2fc>
 8008eca:	42ae      	cmp	r6, r5
 8008ecc:	d11a      	bne.n	8008f04 <__gethex+0x2fc>
 8008ece:	2e01      	cmp	r6, #1
 8008ed0:	d112      	bne.n	8008ef8 <__gethex+0x2f0>
 8008ed2:	9a04      	ldr	r2, [sp, #16]
 8008ed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	2301      	movs	r3, #1
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	f8c9 3000 	str.w	r3, [r9]
 8008ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ee4:	2762      	movs	r7, #98	; 0x62
 8008ee6:	601c      	str	r4, [r3, #0]
 8008ee8:	e723      	b.n	8008d32 <__gethex+0x12a>
 8008eea:	bf00      	nop
 8008eec:	0800b038 	.word	0x0800b038
 8008ef0:	0800afc0 	.word	0x0800afc0
 8008ef4:	0800afd1 	.word	0x0800afd1
 8008ef8:	1e71      	subs	r1, r6, #1
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fe5c 	bl	8009bb8 <__any_on>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d1e6      	bne.n	8008ed2 <__gethex+0x2ca>
 8008f04:	ee18 0a10 	vmov	r0, s16
 8008f08:	4621      	mov	r1, r4
 8008f0a:	f000 f9f5 	bl	80092f8 <_Bfree>
 8008f0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f10:	2300      	movs	r3, #0
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	2750      	movs	r7, #80	; 0x50
 8008f16:	e70c      	b.n	8008d32 <__gethex+0x12a>
 8008f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1f2      	bne.n	8008f04 <__gethex+0x2fc>
 8008f1e:	e7d8      	b.n	8008ed2 <__gethex+0x2ca>
 8008f20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1d5      	bne.n	8008ed2 <__gethex+0x2ca>
 8008f26:	e7ed      	b.n	8008f04 <__gethex+0x2fc>
 8008f28:	1e6f      	subs	r7, r5, #1
 8008f2a:	f1ba 0f00 	cmp.w	sl, #0
 8008f2e:	d131      	bne.n	8008f94 <__gethex+0x38c>
 8008f30:	b127      	cbz	r7, 8008f3c <__gethex+0x334>
 8008f32:	4639      	mov	r1, r7
 8008f34:	4620      	mov	r0, r4
 8008f36:	f000 fe3f 	bl	8009bb8 <__any_on>
 8008f3a:	4682      	mov	sl, r0
 8008f3c:	117b      	asrs	r3, r7, #5
 8008f3e:	2101      	movs	r1, #1
 8008f40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f44:	f007 071f 	and.w	r7, r7, #31
 8008f48:	fa01 f707 	lsl.w	r7, r1, r7
 8008f4c:	421f      	tst	r7, r3
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4620      	mov	r0, r4
 8008f52:	bf18      	it	ne
 8008f54:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f58:	1b76      	subs	r6, r6, r5
 8008f5a:	f7ff fded 	bl	8008b38 <rshift>
 8008f5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f62:	2702      	movs	r7, #2
 8008f64:	f1ba 0f00 	cmp.w	sl, #0
 8008f68:	d048      	beq.n	8008ffc <__gethex+0x3f4>
 8008f6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d015      	beq.n	8008f9e <__gethex+0x396>
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	d017      	beq.n	8008fa6 <__gethex+0x39e>
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d109      	bne.n	8008f8e <__gethex+0x386>
 8008f7a:	f01a 0f02 	tst.w	sl, #2
 8008f7e:	d006      	beq.n	8008f8e <__gethex+0x386>
 8008f80:	f8d9 0000 	ldr.w	r0, [r9]
 8008f84:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f88:	f01a 0f01 	tst.w	sl, #1
 8008f8c:	d10e      	bne.n	8008fac <__gethex+0x3a4>
 8008f8e:	f047 0710 	orr.w	r7, r7, #16
 8008f92:	e033      	b.n	8008ffc <__gethex+0x3f4>
 8008f94:	f04f 0a01 	mov.w	sl, #1
 8008f98:	e7d0      	b.n	8008f3c <__gethex+0x334>
 8008f9a:	2701      	movs	r7, #1
 8008f9c:	e7e2      	b.n	8008f64 <__gethex+0x35c>
 8008f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fa0:	f1c3 0301 	rsb	r3, r3, #1
 8008fa4:	9315      	str	r3, [sp, #84]	; 0x54
 8008fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0f0      	beq.n	8008f8e <__gethex+0x386>
 8008fac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fb0:	f104 0314 	add.w	r3, r4, #20
 8008fb4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fb8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fbc:	f04f 0c00 	mov.w	ip, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008fca:	d01c      	beq.n	8009006 <__gethex+0x3fe>
 8008fcc:	3201      	adds	r2, #1
 8008fce:	6002      	str	r2, [r0, #0]
 8008fd0:	2f02      	cmp	r7, #2
 8008fd2:	f104 0314 	add.w	r3, r4, #20
 8008fd6:	d13f      	bne.n	8009058 <__gethex+0x450>
 8008fd8:	f8d8 2000 	ldr.w	r2, [r8]
 8008fdc:	3a01      	subs	r2, #1
 8008fde:	42b2      	cmp	r2, r6
 8008fe0:	d10a      	bne.n	8008ff8 <__gethex+0x3f0>
 8008fe2:	1171      	asrs	r1, r6, #5
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008fea:	f006 061f 	and.w	r6, r6, #31
 8008fee:	fa02 f606 	lsl.w	r6, r2, r6
 8008ff2:	421e      	tst	r6, r3
 8008ff4:	bf18      	it	ne
 8008ff6:	4617      	movne	r7, r2
 8008ff8:	f047 0720 	orr.w	r7, r7, #32
 8008ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ffe:	601c      	str	r4, [r3, #0]
 8009000:	9b04      	ldr	r3, [sp, #16]
 8009002:	601d      	str	r5, [r3, #0]
 8009004:	e695      	b.n	8008d32 <__gethex+0x12a>
 8009006:	4299      	cmp	r1, r3
 8009008:	f843 cc04 	str.w	ip, [r3, #-4]
 800900c:	d8d8      	bhi.n	8008fc0 <__gethex+0x3b8>
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	459b      	cmp	fp, r3
 8009012:	db19      	blt.n	8009048 <__gethex+0x440>
 8009014:	6861      	ldr	r1, [r4, #4]
 8009016:	ee18 0a10 	vmov	r0, s16
 800901a:	3101      	adds	r1, #1
 800901c:	f000 f92c 	bl	8009278 <_Balloc>
 8009020:	4681      	mov	r9, r0
 8009022:	b918      	cbnz	r0, 800902c <__gethex+0x424>
 8009024:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <__gethex+0x488>)
 8009026:	4602      	mov	r2, r0
 8009028:	2184      	movs	r1, #132	; 0x84
 800902a:	e6a8      	b.n	8008d7e <__gethex+0x176>
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	3202      	adds	r2, #2
 8009030:	f104 010c 	add.w	r1, r4, #12
 8009034:	0092      	lsls	r2, r2, #2
 8009036:	300c      	adds	r0, #12
 8009038:	f000 f904 	bl	8009244 <memcpy>
 800903c:	4621      	mov	r1, r4
 800903e:	ee18 0a10 	vmov	r0, s16
 8009042:	f000 f959 	bl	80092f8 <_Bfree>
 8009046:	464c      	mov	r4, r9
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009050:	6122      	str	r2, [r4, #16]
 8009052:	2201      	movs	r2, #1
 8009054:	615a      	str	r2, [r3, #20]
 8009056:	e7bb      	b.n	8008fd0 <__gethex+0x3c8>
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	455a      	cmp	r2, fp
 800905c:	dd0b      	ble.n	8009076 <__gethex+0x46e>
 800905e:	2101      	movs	r1, #1
 8009060:	4620      	mov	r0, r4
 8009062:	f7ff fd69 	bl	8008b38 <rshift>
 8009066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800906a:	3501      	adds	r5, #1
 800906c:	42ab      	cmp	r3, r5
 800906e:	f6ff aed0 	blt.w	8008e12 <__gethex+0x20a>
 8009072:	2701      	movs	r7, #1
 8009074:	e7c0      	b.n	8008ff8 <__gethex+0x3f0>
 8009076:	f016 061f 	ands.w	r6, r6, #31
 800907a:	d0fa      	beq.n	8009072 <__gethex+0x46a>
 800907c:	4453      	add	r3, sl
 800907e:	f1c6 0620 	rsb	r6, r6, #32
 8009082:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009086:	f000 f9e9 	bl	800945c <__hi0bits>
 800908a:	42b0      	cmp	r0, r6
 800908c:	dbe7      	blt.n	800905e <__gethex+0x456>
 800908e:	e7f0      	b.n	8009072 <__gethex+0x46a>
 8009090:	0800afc0 	.word	0x0800afc0

08009094 <L_shift>:
 8009094:	f1c2 0208 	rsb	r2, r2, #8
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	b570      	push	{r4, r5, r6, lr}
 800909c:	f1c2 0620 	rsb	r6, r2, #32
 80090a0:	6843      	ldr	r3, [r0, #4]
 80090a2:	6804      	ldr	r4, [r0, #0]
 80090a4:	fa03 f506 	lsl.w	r5, r3, r6
 80090a8:	432c      	orrs	r4, r5
 80090aa:	40d3      	lsrs	r3, r2
 80090ac:	6004      	str	r4, [r0, #0]
 80090ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80090b2:	4288      	cmp	r0, r1
 80090b4:	d3f4      	bcc.n	80090a0 <L_shift+0xc>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}

080090b8 <__match>:
 80090b8:	b530      	push	{r4, r5, lr}
 80090ba:	6803      	ldr	r3, [r0, #0]
 80090bc:	3301      	adds	r3, #1
 80090be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c2:	b914      	cbnz	r4, 80090ca <__match+0x12>
 80090c4:	6003      	str	r3, [r0, #0]
 80090c6:	2001      	movs	r0, #1
 80090c8:	bd30      	pop	{r4, r5, pc}
 80090ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090d2:	2d19      	cmp	r5, #25
 80090d4:	bf98      	it	ls
 80090d6:	3220      	addls	r2, #32
 80090d8:	42a2      	cmp	r2, r4
 80090da:	d0f0      	beq.n	80090be <__match+0x6>
 80090dc:	2000      	movs	r0, #0
 80090de:	e7f3      	b.n	80090c8 <__match+0x10>

080090e0 <__hexnan>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	680b      	ldr	r3, [r1, #0]
 80090e6:	115e      	asrs	r6, r3, #5
 80090e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090ec:	f013 031f 	ands.w	r3, r3, #31
 80090f0:	b087      	sub	sp, #28
 80090f2:	bf18      	it	ne
 80090f4:	3604      	addne	r6, #4
 80090f6:	2500      	movs	r5, #0
 80090f8:	1f37      	subs	r7, r6, #4
 80090fa:	4690      	mov	r8, r2
 80090fc:	6802      	ldr	r2, [r0, #0]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	4682      	mov	sl, r0
 8009102:	f846 5c04 	str.w	r5, [r6, #-4]
 8009106:	46b9      	mov	r9, r7
 8009108:	463c      	mov	r4, r7
 800910a:	9502      	str	r5, [sp, #8]
 800910c:	46ab      	mov	fp, r5
 800910e:	7851      	ldrb	r1, [r2, #1]
 8009110:	1c53      	adds	r3, r2, #1
 8009112:	9303      	str	r3, [sp, #12]
 8009114:	b341      	cbz	r1, 8009168 <__hexnan+0x88>
 8009116:	4608      	mov	r0, r1
 8009118:	9205      	str	r2, [sp, #20]
 800911a:	9104      	str	r1, [sp, #16]
 800911c:	f7ff fd5e 	bl	8008bdc <__hexdig_fun>
 8009120:	2800      	cmp	r0, #0
 8009122:	d14f      	bne.n	80091c4 <__hexnan+0xe4>
 8009124:	9904      	ldr	r1, [sp, #16]
 8009126:	9a05      	ldr	r2, [sp, #20]
 8009128:	2920      	cmp	r1, #32
 800912a:	d818      	bhi.n	800915e <__hexnan+0x7e>
 800912c:	9b02      	ldr	r3, [sp, #8]
 800912e:	459b      	cmp	fp, r3
 8009130:	dd13      	ble.n	800915a <__hexnan+0x7a>
 8009132:	454c      	cmp	r4, r9
 8009134:	d206      	bcs.n	8009144 <__hexnan+0x64>
 8009136:	2d07      	cmp	r5, #7
 8009138:	dc04      	bgt.n	8009144 <__hexnan+0x64>
 800913a:	462a      	mov	r2, r5
 800913c:	4649      	mov	r1, r9
 800913e:	4620      	mov	r0, r4
 8009140:	f7ff ffa8 	bl	8009094 <L_shift>
 8009144:	4544      	cmp	r4, r8
 8009146:	d950      	bls.n	80091ea <__hexnan+0x10a>
 8009148:	2300      	movs	r3, #0
 800914a:	f1a4 0904 	sub.w	r9, r4, #4
 800914e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009152:	f8cd b008 	str.w	fp, [sp, #8]
 8009156:	464c      	mov	r4, r9
 8009158:	461d      	mov	r5, r3
 800915a:	9a03      	ldr	r2, [sp, #12]
 800915c:	e7d7      	b.n	800910e <__hexnan+0x2e>
 800915e:	2929      	cmp	r1, #41	; 0x29
 8009160:	d156      	bne.n	8009210 <__hexnan+0x130>
 8009162:	3202      	adds	r2, #2
 8009164:	f8ca 2000 	str.w	r2, [sl]
 8009168:	f1bb 0f00 	cmp.w	fp, #0
 800916c:	d050      	beq.n	8009210 <__hexnan+0x130>
 800916e:	454c      	cmp	r4, r9
 8009170:	d206      	bcs.n	8009180 <__hexnan+0xa0>
 8009172:	2d07      	cmp	r5, #7
 8009174:	dc04      	bgt.n	8009180 <__hexnan+0xa0>
 8009176:	462a      	mov	r2, r5
 8009178:	4649      	mov	r1, r9
 800917a:	4620      	mov	r0, r4
 800917c:	f7ff ff8a 	bl	8009094 <L_shift>
 8009180:	4544      	cmp	r4, r8
 8009182:	d934      	bls.n	80091ee <__hexnan+0x10e>
 8009184:	f1a8 0204 	sub.w	r2, r8, #4
 8009188:	4623      	mov	r3, r4
 800918a:	f853 1b04 	ldr.w	r1, [r3], #4
 800918e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009192:	429f      	cmp	r7, r3
 8009194:	d2f9      	bcs.n	800918a <__hexnan+0xaa>
 8009196:	1b3b      	subs	r3, r7, r4
 8009198:	f023 0303 	bic.w	r3, r3, #3
 800919c:	3304      	adds	r3, #4
 800919e:	3401      	adds	r4, #1
 80091a0:	3e03      	subs	r6, #3
 80091a2:	42b4      	cmp	r4, r6
 80091a4:	bf88      	it	hi
 80091a6:	2304      	movhi	r3, #4
 80091a8:	4443      	add	r3, r8
 80091aa:	2200      	movs	r2, #0
 80091ac:	f843 2b04 	str.w	r2, [r3], #4
 80091b0:	429f      	cmp	r7, r3
 80091b2:	d2fb      	bcs.n	80091ac <__hexnan+0xcc>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	b91b      	cbnz	r3, 80091c0 <__hexnan+0xe0>
 80091b8:	4547      	cmp	r7, r8
 80091ba:	d127      	bne.n	800920c <__hexnan+0x12c>
 80091bc:	2301      	movs	r3, #1
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	2005      	movs	r0, #5
 80091c2:	e026      	b.n	8009212 <__hexnan+0x132>
 80091c4:	3501      	adds	r5, #1
 80091c6:	2d08      	cmp	r5, #8
 80091c8:	f10b 0b01 	add.w	fp, fp, #1
 80091cc:	dd06      	ble.n	80091dc <__hexnan+0xfc>
 80091ce:	4544      	cmp	r4, r8
 80091d0:	d9c3      	bls.n	800915a <__hexnan+0x7a>
 80091d2:	2300      	movs	r3, #0
 80091d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80091d8:	2501      	movs	r5, #1
 80091da:	3c04      	subs	r4, #4
 80091dc:	6822      	ldr	r2, [r4, #0]
 80091de:	f000 000f 	and.w	r0, r0, #15
 80091e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80091e6:	6022      	str	r2, [r4, #0]
 80091e8:	e7b7      	b.n	800915a <__hexnan+0x7a>
 80091ea:	2508      	movs	r5, #8
 80091ec:	e7b5      	b.n	800915a <__hexnan+0x7a>
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0df      	beq.n	80091b4 <__hexnan+0xd4>
 80091f4:	f04f 32ff 	mov.w	r2, #4294967295
 80091f8:	f1c3 0320 	rsb	r3, r3, #32
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009204:	401a      	ands	r2, r3
 8009206:	f846 2c04 	str.w	r2, [r6, #-4]
 800920a:	e7d3      	b.n	80091b4 <__hexnan+0xd4>
 800920c:	3f04      	subs	r7, #4
 800920e:	e7d1      	b.n	80091b4 <__hexnan+0xd4>
 8009210:	2004      	movs	r0, #4
 8009212:	b007      	add	sp, #28
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009218 <_localeconv_r>:
 8009218:	4800      	ldr	r0, [pc, #0]	; (800921c <_localeconv_r+0x4>)
 800921a:	4770      	bx	lr
 800921c:	20000164 	.word	0x20000164

08009220 <__ascii_mbtowc>:
 8009220:	b082      	sub	sp, #8
 8009222:	b901      	cbnz	r1, 8009226 <__ascii_mbtowc+0x6>
 8009224:	a901      	add	r1, sp, #4
 8009226:	b142      	cbz	r2, 800923a <__ascii_mbtowc+0x1a>
 8009228:	b14b      	cbz	r3, 800923e <__ascii_mbtowc+0x1e>
 800922a:	7813      	ldrb	r3, [r2, #0]
 800922c:	600b      	str	r3, [r1, #0]
 800922e:	7812      	ldrb	r2, [r2, #0]
 8009230:	1e10      	subs	r0, r2, #0
 8009232:	bf18      	it	ne
 8009234:	2001      	movne	r0, #1
 8009236:	b002      	add	sp, #8
 8009238:	4770      	bx	lr
 800923a:	4610      	mov	r0, r2
 800923c:	e7fb      	b.n	8009236 <__ascii_mbtowc+0x16>
 800923e:	f06f 0001 	mvn.w	r0, #1
 8009242:	e7f8      	b.n	8009236 <__ascii_mbtowc+0x16>

08009244 <memcpy>:
 8009244:	440a      	add	r2, r1
 8009246:	4291      	cmp	r1, r2
 8009248:	f100 33ff 	add.w	r3, r0, #4294967295
 800924c:	d100      	bne.n	8009250 <memcpy+0xc>
 800924e:	4770      	bx	lr
 8009250:	b510      	push	{r4, lr}
 8009252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800925a:	4291      	cmp	r1, r2
 800925c:	d1f9      	bne.n	8009252 <memcpy+0xe>
 800925e:	bd10      	pop	{r4, pc}

08009260 <__malloc_lock>:
 8009260:	4801      	ldr	r0, [pc, #4]	; (8009268 <__malloc_lock+0x8>)
 8009262:	f001 ba3f 	b.w	800a6e4 <__retarget_lock_acquire_recursive>
 8009266:	bf00      	nop
 8009268:	200005b8 	.word	0x200005b8

0800926c <__malloc_unlock>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__malloc_unlock+0x8>)
 800926e:	f001 ba3a 	b.w	800a6e6 <__retarget_lock_release_recursive>
 8009272:	bf00      	nop
 8009274:	200005b8 	.word	0x200005b8

08009278 <_Balloc>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800927c:	4604      	mov	r4, r0
 800927e:	460d      	mov	r5, r1
 8009280:	b976      	cbnz	r6, 80092a0 <_Balloc+0x28>
 8009282:	2010      	movs	r0, #16
 8009284:	f7fc fea4 	bl	8005fd0 <malloc>
 8009288:	4602      	mov	r2, r0
 800928a:	6260      	str	r0, [r4, #36]	; 0x24
 800928c:	b920      	cbnz	r0, 8009298 <_Balloc+0x20>
 800928e:	4b18      	ldr	r3, [pc, #96]	; (80092f0 <_Balloc+0x78>)
 8009290:	4818      	ldr	r0, [pc, #96]	; (80092f4 <_Balloc+0x7c>)
 8009292:	2166      	movs	r1, #102	; 0x66
 8009294:	f7fe fda6 	bl	8007de4 <__assert_func>
 8009298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800929c:	6006      	str	r6, [r0, #0]
 800929e:	60c6      	str	r6, [r0, #12]
 80092a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092a2:	68f3      	ldr	r3, [r6, #12]
 80092a4:	b183      	cbz	r3, 80092c8 <_Balloc+0x50>
 80092a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092ae:	b9b8      	cbnz	r0, 80092e0 <_Balloc+0x68>
 80092b0:	2101      	movs	r1, #1
 80092b2:	fa01 f605 	lsl.w	r6, r1, r5
 80092b6:	1d72      	adds	r2, r6, #5
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	4620      	mov	r0, r4
 80092bc:	f000 fc9d 	bl	8009bfa <_calloc_r>
 80092c0:	b160      	cbz	r0, 80092dc <_Balloc+0x64>
 80092c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092c6:	e00e      	b.n	80092e6 <_Balloc+0x6e>
 80092c8:	2221      	movs	r2, #33	; 0x21
 80092ca:	2104      	movs	r1, #4
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fc94 	bl	8009bfa <_calloc_r>
 80092d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092d4:	60f0      	str	r0, [r6, #12]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e4      	bne.n	80092a6 <_Balloc+0x2e>
 80092dc:	2000      	movs	r0, #0
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	6802      	ldr	r2, [r0, #0]
 80092e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092e6:	2300      	movs	r3, #0
 80092e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092ec:	e7f7      	b.n	80092de <_Balloc+0x66>
 80092ee:	bf00      	nop
 80092f0:	0800aea8 	.word	0x0800aea8
 80092f4:	0800b04c 	.word	0x0800b04c

080092f8 <_Bfree>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092fc:	4605      	mov	r5, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	b976      	cbnz	r6, 8009320 <_Bfree+0x28>
 8009302:	2010      	movs	r0, #16
 8009304:	f7fc fe64 	bl	8005fd0 <malloc>
 8009308:	4602      	mov	r2, r0
 800930a:	6268      	str	r0, [r5, #36]	; 0x24
 800930c:	b920      	cbnz	r0, 8009318 <_Bfree+0x20>
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <_Bfree+0x3c>)
 8009310:	4809      	ldr	r0, [pc, #36]	; (8009338 <_Bfree+0x40>)
 8009312:	218a      	movs	r1, #138	; 0x8a
 8009314:	f7fe fd66 	bl	8007de4 <__assert_func>
 8009318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800931c:	6006      	str	r6, [r0, #0]
 800931e:	60c6      	str	r6, [r0, #12]
 8009320:	b13c      	cbz	r4, 8009332 <_Bfree+0x3a>
 8009322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009324:	6862      	ldr	r2, [r4, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800932c:	6021      	str	r1, [r4, #0]
 800932e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	0800aea8 	.word	0x0800aea8
 8009338:	0800b04c 	.word	0x0800b04c

0800933c <__multadd>:
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	690d      	ldr	r5, [r1, #16]
 8009342:	4607      	mov	r7, r0
 8009344:	460c      	mov	r4, r1
 8009346:	461e      	mov	r6, r3
 8009348:	f101 0c14 	add.w	ip, r1, #20
 800934c:	2000      	movs	r0, #0
 800934e:	f8dc 3000 	ldr.w	r3, [ip]
 8009352:	b299      	uxth	r1, r3
 8009354:	fb02 6101 	mla	r1, r2, r1, r6
 8009358:	0c1e      	lsrs	r6, r3, #16
 800935a:	0c0b      	lsrs	r3, r1, #16
 800935c:	fb02 3306 	mla	r3, r2, r6, r3
 8009360:	b289      	uxth	r1, r1
 8009362:	3001      	adds	r0, #1
 8009364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009368:	4285      	cmp	r5, r0
 800936a:	f84c 1b04 	str.w	r1, [ip], #4
 800936e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009372:	dcec      	bgt.n	800934e <__multadd+0x12>
 8009374:	b30e      	cbz	r6, 80093ba <__multadd+0x7e>
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	42ab      	cmp	r3, r5
 800937a:	dc19      	bgt.n	80093b0 <__multadd+0x74>
 800937c:	6861      	ldr	r1, [r4, #4]
 800937e:	4638      	mov	r0, r7
 8009380:	3101      	adds	r1, #1
 8009382:	f7ff ff79 	bl	8009278 <_Balloc>
 8009386:	4680      	mov	r8, r0
 8009388:	b928      	cbnz	r0, 8009396 <__multadd+0x5a>
 800938a:	4602      	mov	r2, r0
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <__multadd+0x84>)
 800938e:	480d      	ldr	r0, [pc, #52]	; (80093c4 <__multadd+0x88>)
 8009390:	21b5      	movs	r1, #181	; 0xb5
 8009392:	f7fe fd27 	bl	8007de4 <__assert_func>
 8009396:	6922      	ldr	r2, [r4, #16]
 8009398:	3202      	adds	r2, #2
 800939a:	f104 010c 	add.w	r1, r4, #12
 800939e:	0092      	lsls	r2, r2, #2
 80093a0:	300c      	adds	r0, #12
 80093a2:	f7ff ff4f 	bl	8009244 <memcpy>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff ffa5 	bl	80092f8 <_Bfree>
 80093ae:	4644      	mov	r4, r8
 80093b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093b4:	3501      	adds	r5, #1
 80093b6:	615e      	str	r6, [r3, #20]
 80093b8:	6125      	str	r5, [r4, #16]
 80093ba:	4620      	mov	r0, r4
 80093bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c0:	0800afc0 	.word	0x0800afc0
 80093c4:	0800b04c 	.word	0x0800b04c

080093c8 <__s2b>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	4615      	mov	r5, r2
 80093d0:	461f      	mov	r7, r3
 80093d2:	2209      	movs	r2, #9
 80093d4:	3308      	adds	r3, #8
 80093d6:	4606      	mov	r6, r0
 80093d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093dc:	2100      	movs	r1, #0
 80093de:	2201      	movs	r2, #1
 80093e0:	429a      	cmp	r2, r3
 80093e2:	db09      	blt.n	80093f8 <__s2b+0x30>
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff ff47 	bl	8009278 <_Balloc>
 80093ea:	b940      	cbnz	r0, 80093fe <__s2b+0x36>
 80093ec:	4602      	mov	r2, r0
 80093ee:	4b19      	ldr	r3, [pc, #100]	; (8009454 <__s2b+0x8c>)
 80093f0:	4819      	ldr	r0, [pc, #100]	; (8009458 <__s2b+0x90>)
 80093f2:	21ce      	movs	r1, #206	; 0xce
 80093f4:	f7fe fcf6 	bl	8007de4 <__assert_func>
 80093f8:	0052      	lsls	r2, r2, #1
 80093fa:	3101      	adds	r1, #1
 80093fc:	e7f0      	b.n	80093e0 <__s2b+0x18>
 80093fe:	9b08      	ldr	r3, [sp, #32]
 8009400:	6143      	str	r3, [r0, #20]
 8009402:	2d09      	cmp	r5, #9
 8009404:	f04f 0301 	mov.w	r3, #1
 8009408:	6103      	str	r3, [r0, #16]
 800940a:	dd16      	ble.n	800943a <__s2b+0x72>
 800940c:	f104 0909 	add.w	r9, r4, #9
 8009410:	46c8      	mov	r8, r9
 8009412:	442c      	add	r4, r5
 8009414:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009418:	4601      	mov	r1, r0
 800941a:	3b30      	subs	r3, #48	; 0x30
 800941c:	220a      	movs	r2, #10
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ff8c 	bl	800933c <__multadd>
 8009424:	45a0      	cmp	r8, r4
 8009426:	d1f5      	bne.n	8009414 <__s2b+0x4c>
 8009428:	f1a5 0408 	sub.w	r4, r5, #8
 800942c:	444c      	add	r4, r9
 800942e:	1b2d      	subs	r5, r5, r4
 8009430:	1963      	adds	r3, r4, r5
 8009432:	42bb      	cmp	r3, r7
 8009434:	db04      	blt.n	8009440 <__s2b+0x78>
 8009436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943a:	340a      	adds	r4, #10
 800943c:	2509      	movs	r5, #9
 800943e:	e7f6      	b.n	800942e <__s2b+0x66>
 8009440:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009444:	4601      	mov	r1, r0
 8009446:	3b30      	subs	r3, #48	; 0x30
 8009448:	220a      	movs	r2, #10
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ff76 	bl	800933c <__multadd>
 8009450:	e7ee      	b.n	8009430 <__s2b+0x68>
 8009452:	bf00      	nop
 8009454:	0800afc0 	.word	0x0800afc0
 8009458:	0800b04c 	.word	0x0800b04c

0800945c <__hi0bits>:
 800945c:	0c03      	lsrs	r3, r0, #16
 800945e:	041b      	lsls	r3, r3, #16
 8009460:	b9d3      	cbnz	r3, 8009498 <__hi0bits+0x3c>
 8009462:	0400      	lsls	r0, r0, #16
 8009464:	2310      	movs	r3, #16
 8009466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800946a:	bf04      	itt	eq
 800946c:	0200      	lsleq	r0, r0, #8
 800946e:	3308      	addeq	r3, #8
 8009470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009474:	bf04      	itt	eq
 8009476:	0100      	lsleq	r0, r0, #4
 8009478:	3304      	addeq	r3, #4
 800947a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800947e:	bf04      	itt	eq
 8009480:	0080      	lsleq	r0, r0, #2
 8009482:	3302      	addeq	r3, #2
 8009484:	2800      	cmp	r0, #0
 8009486:	db05      	blt.n	8009494 <__hi0bits+0x38>
 8009488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800948c:	f103 0301 	add.w	r3, r3, #1
 8009490:	bf08      	it	eq
 8009492:	2320      	moveq	r3, #32
 8009494:	4618      	mov	r0, r3
 8009496:	4770      	bx	lr
 8009498:	2300      	movs	r3, #0
 800949a:	e7e4      	b.n	8009466 <__hi0bits+0xa>

0800949c <__lo0bits>:
 800949c:	6803      	ldr	r3, [r0, #0]
 800949e:	f013 0207 	ands.w	r2, r3, #7
 80094a2:	4601      	mov	r1, r0
 80094a4:	d00b      	beq.n	80094be <__lo0bits+0x22>
 80094a6:	07da      	lsls	r2, r3, #31
 80094a8:	d423      	bmi.n	80094f2 <__lo0bits+0x56>
 80094aa:	0798      	lsls	r0, r3, #30
 80094ac:	bf49      	itett	mi
 80094ae:	085b      	lsrmi	r3, r3, #1
 80094b0:	089b      	lsrpl	r3, r3, #2
 80094b2:	2001      	movmi	r0, #1
 80094b4:	600b      	strmi	r3, [r1, #0]
 80094b6:	bf5c      	itt	pl
 80094b8:	600b      	strpl	r3, [r1, #0]
 80094ba:	2002      	movpl	r0, #2
 80094bc:	4770      	bx	lr
 80094be:	b298      	uxth	r0, r3
 80094c0:	b9a8      	cbnz	r0, 80094ee <__lo0bits+0x52>
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	2010      	movs	r0, #16
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	b90a      	cbnz	r2, 80094ce <__lo0bits+0x32>
 80094ca:	3008      	adds	r0, #8
 80094cc:	0a1b      	lsrs	r3, r3, #8
 80094ce:	071a      	lsls	r2, r3, #28
 80094d0:	bf04      	itt	eq
 80094d2:	091b      	lsreq	r3, r3, #4
 80094d4:	3004      	addeq	r0, #4
 80094d6:	079a      	lsls	r2, r3, #30
 80094d8:	bf04      	itt	eq
 80094da:	089b      	lsreq	r3, r3, #2
 80094dc:	3002      	addeq	r0, #2
 80094de:	07da      	lsls	r2, r3, #31
 80094e0:	d403      	bmi.n	80094ea <__lo0bits+0x4e>
 80094e2:	085b      	lsrs	r3, r3, #1
 80094e4:	f100 0001 	add.w	r0, r0, #1
 80094e8:	d005      	beq.n	80094f6 <__lo0bits+0x5a>
 80094ea:	600b      	str	r3, [r1, #0]
 80094ec:	4770      	bx	lr
 80094ee:	4610      	mov	r0, r2
 80094f0:	e7e9      	b.n	80094c6 <__lo0bits+0x2a>
 80094f2:	2000      	movs	r0, #0
 80094f4:	4770      	bx	lr
 80094f6:	2020      	movs	r0, #32
 80094f8:	4770      	bx	lr
	...

080094fc <__i2b>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	460c      	mov	r4, r1
 8009500:	2101      	movs	r1, #1
 8009502:	f7ff feb9 	bl	8009278 <_Balloc>
 8009506:	4602      	mov	r2, r0
 8009508:	b928      	cbnz	r0, 8009516 <__i2b+0x1a>
 800950a:	4b05      	ldr	r3, [pc, #20]	; (8009520 <__i2b+0x24>)
 800950c:	4805      	ldr	r0, [pc, #20]	; (8009524 <__i2b+0x28>)
 800950e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009512:	f7fe fc67 	bl	8007de4 <__assert_func>
 8009516:	2301      	movs	r3, #1
 8009518:	6144      	str	r4, [r0, #20]
 800951a:	6103      	str	r3, [r0, #16]
 800951c:	bd10      	pop	{r4, pc}
 800951e:	bf00      	nop
 8009520:	0800afc0 	.word	0x0800afc0
 8009524:	0800b04c 	.word	0x0800b04c

08009528 <__multiply>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	4691      	mov	r9, r2
 800952e:	690a      	ldr	r2, [r1, #16]
 8009530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009534:	429a      	cmp	r2, r3
 8009536:	bfb8      	it	lt
 8009538:	460b      	movlt	r3, r1
 800953a:	460c      	mov	r4, r1
 800953c:	bfbc      	itt	lt
 800953e:	464c      	movlt	r4, r9
 8009540:	4699      	movlt	r9, r3
 8009542:	6927      	ldr	r7, [r4, #16]
 8009544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	6861      	ldr	r1, [r4, #4]
 800954c:	eb07 060a 	add.w	r6, r7, sl
 8009550:	42b3      	cmp	r3, r6
 8009552:	b085      	sub	sp, #20
 8009554:	bfb8      	it	lt
 8009556:	3101      	addlt	r1, #1
 8009558:	f7ff fe8e 	bl	8009278 <_Balloc>
 800955c:	b930      	cbnz	r0, 800956c <__multiply+0x44>
 800955e:	4602      	mov	r2, r0
 8009560:	4b44      	ldr	r3, [pc, #272]	; (8009674 <__multiply+0x14c>)
 8009562:	4845      	ldr	r0, [pc, #276]	; (8009678 <__multiply+0x150>)
 8009564:	f240 115d 	movw	r1, #349	; 0x15d
 8009568:	f7fe fc3c 	bl	8007de4 <__assert_func>
 800956c:	f100 0514 	add.w	r5, r0, #20
 8009570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009574:	462b      	mov	r3, r5
 8009576:	2200      	movs	r2, #0
 8009578:	4543      	cmp	r3, r8
 800957a:	d321      	bcc.n	80095c0 <__multiply+0x98>
 800957c:	f104 0314 	add.w	r3, r4, #20
 8009580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009584:	f109 0314 	add.w	r3, r9, #20
 8009588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800958c:	9202      	str	r2, [sp, #8]
 800958e:	1b3a      	subs	r2, r7, r4
 8009590:	3a15      	subs	r2, #21
 8009592:	f022 0203 	bic.w	r2, r2, #3
 8009596:	3204      	adds	r2, #4
 8009598:	f104 0115 	add.w	r1, r4, #21
 800959c:	428f      	cmp	r7, r1
 800959e:	bf38      	it	cc
 80095a0:	2204      	movcc	r2, #4
 80095a2:	9201      	str	r2, [sp, #4]
 80095a4:	9a02      	ldr	r2, [sp, #8]
 80095a6:	9303      	str	r3, [sp, #12]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d80c      	bhi.n	80095c6 <__multiply+0x9e>
 80095ac:	2e00      	cmp	r6, #0
 80095ae:	dd03      	ble.n	80095b8 <__multiply+0x90>
 80095b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d05a      	beq.n	800966e <__multiply+0x146>
 80095b8:	6106      	str	r6, [r0, #16]
 80095ba:	b005      	add	sp, #20
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	f843 2b04 	str.w	r2, [r3], #4
 80095c4:	e7d8      	b.n	8009578 <__multiply+0x50>
 80095c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	d024      	beq.n	800961a <__multiply+0xf2>
 80095d0:	f104 0e14 	add.w	lr, r4, #20
 80095d4:	46a9      	mov	r9, r5
 80095d6:	f04f 0c00 	mov.w	ip, #0
 80095da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095de:	f8d9 1000 	ldr.w	r1, [r9]
 80095e2:	fa1f fb82 	uxth.w	fp, r2
 80095e6:	b289      	uxth	r1, r1
 80095e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80095ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095f0:	f8d9 2000 	ldr.w	r2, [r9]
 80095f4:	4461      	add	r1, ip
 80095f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80095fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009602:	b289      	uxth	r1, r1
 8009604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009608:	4577      	cmp	r7, lr
 800960a:	f849 1b04 	str.w	r1, [r9], #4
 800960e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009612:	d8e2      	bhi.n	80095da <__multiply+0xb2>
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	f845 c002 	str.w	ip, [r5, r2]
 800961a:	9a03      	ldr	r2, [sp, #12]
 800961c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009620:	3304      	adds	r3, #4
 8009622:	f1b9 0f00 	cmp.w	r9, #0
 8009626:	d020      	beq.n	800966a <__multiply+0x142>
 8009628:	6829      	ldr	r1, [r5, #0]
 800962a:	f104 0c14 	add.w	ip, r4, #20
 800962e:	46ae      	mov	lr, r5
 8009630:	f04f 0a00 	mov.w	sl, #0
 8009634:	f8bc b000 	ldrh.w	fp, [ip]
 8009638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800963c:	fb09 220b 	mla	r2, r9, fp, r2
 8009640:	4492      	add	sl, r2
 8009642:	b289      	uxth	r1, r1
 8009644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009648:	f84e 1b04 	str.w	r1, [lr], #4
 800964c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009650:	f8be 1000 	ldrh.w	r1, [lr]
 8009654:	0c12      	lsrs	r2, r2, #16
 8009656:	fb09 1102 	mla	r1, r9, r2, r1
 800965a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800965e:	4567      	cmp	r7, ip
 8009660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009664:	d8e6      	bhi.n	8009634 <__multiply+0x10c>
 8009666:	9a01      	ldr	r2, [sp, #4]
 8009668:	50a9      	str	r1, [r5, r2]
 800966a:	3504      	adds	r5, #4
 800966c:	e79a      	b.n	80095a4 <__multiply+0x7c>
 800966e:	3e01      	subs	r6, #1
 8009670:	e79c      	b.n	80095ac <__multiply+0x84>
 8009672:	bf00      	nop
 8009674:	0800afc0 	.word	0x0800afc0
 8009678:	0800b04c 	.word	0x0800b04c

0800967c <__pow5mult>:
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	4615      	mov	r5, r2
 8009682:	f012 0203 	ands.w	r2, r2, #3
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	d007      	beq.n	800969c <__pow5mult+0x20>
 800968c:	4c25      	ldr	r4, [pc, #148]	; (8009724 <__pow5mult+0xa8>)
 800968e:	3a01      	subs	r2, #1
 8009690:	2300      	movs	r3, #0
 8009692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009696:	f7ff fe51 	bl	800933c <__multadd>
 800969a:	4607      	mov	r7, r0
 800969c:	10ad      	asrs	r5, r5, #2
 800969e:	d03d      	beq.n	800971c <__pow5mult+0xa0>
 80096a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096a2:	b97c      	cbnz	r4, 80096c4 <__pow5mult+0x48>
 80096a4:	2010      	movs	r0, #16
 80096a6:	f7fc fc93 	bl	8005fd0 <malloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6270      	str	r0, [r6, #36]	; 0x24
 80096ae:	b928      	cbnz	r0, 80096bc <__pow5mult+0x40>
 80096b0:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <__pow5mult+0xac>)
 80096b2:	481e      	ldr	r0, [pc, #120]	; (800972c <__pow5mult+0xb0>)
 80096b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096b8:	f7fe fb94 	bl	8007de4 <__assert_func>
 80096bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096c0:	6004      	str	r4, [r0, #0]
 80096c2:	60c4      	str	r4, [r0, #12]
 80096c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096cc:	b94c      	cbnz	r4, 80096e2 <__pow5mult+0x66>
 80096ce:	f240 2171 	movw	r1, #625	; 0x271
 80096d2:	4630      	mov	r0, r6
 80096d4:	f7ff ff12 	bl	80094fc <__i2b>
 80096d8:	2300      	movs	r3, #0
 80096da:	f8c8 0008 	str.w	r0, [r8, #8]
 80096de:	4604      	mov	r4, r0
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	07eb      	lsls	r3, r5, #31
 80096e8:	d50a      	bpl.n	8009700 <__pow5mult+0x84>
 80096ea:	4639      	mov	r1, r7
 80096ec:	4622      	mov	r2, r4
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff ff1a 	bl	8009528 <__multiply>
 80096f4:	4639      	mov	r1, r7
 80096f6:	4680      	mov	r8, r0
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7ff fdfd 	bl	80092f8 <_Bfree>
 80096fe:	4647      	mov	r7, r8
 8009700:	106d      	asrs	r5, r5, #1
 8009702:	d00b      	beq.n	800971c <__pow5mult+0xa0>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	b938      	cbnz	r0, 8009718 <__pow5mult+0x9c>
 8009708:	4622      	mov	r2, r4
 800970a:	4621      	mov	r1, r4
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff ff0b 	bl	8009528 <__multiply>
 8009712:	6020      	str	r0, [r4, #0]
 8009714:	f8c0 9000 	str.w	r9, [r0]
 8009718:	4604      	mov	r4, r0
 800971a:	e7e4      	b.n	80096e6 <__pow5mult+0x6a>
 800971c:	4638      	mov	r0, r7
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	bf00      	nop
 8009724:	0800b198 	.word	0x0800b198
 8009728:	0800aea8 	.word	0x0800aea8
 800972c:	0800b04c 	.word	0x0800b04c

08009730 <__lshift>:
 8009730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	460c      	mov	r4, r1
 8009736:	6849      	ldr	r1, [r1, #4]
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800973e:	68a3      	ldr	r3, [r4, #8]
 8009740:	4607      	mov	r7, r0
 8009742:	4691      	mov	r9, r2
 8009744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009748:	f108 0601 	add.w	r6, r8, #1
 800974c:	42b3      	cmp	r3, r6
 800974e:	db0b      	blt.n	8009768 <__lshift+0x38>
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff fd91 	bl	8009278 <_Balloc>
 8009756:	4605      	mov	r5, r0
 8009758:	b948      	cbnz	r0, 800976e <__lshift+0x3e>
 800975a:	4602      	mov	r2, r0
 800975c:	4b2a      	ldr	r3, [pc, #168]	; (8009808 <__lshift+0xd8>)
 800975e:	482b      	ldr	r0, [pc, #172]	; (800980c <__lshift+0xdc>)
 8009760:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009764:	f7fe fb3e 	bl	8007de4 <__assert_func>
 8009768:	3101      	adds	r1, #1
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	e7ee      	b.n	800974c <__lshift+0x1c>
 800976e:	2300      	movs	r3, #0
 8009770:	f100 0114 	add.w	r1, r0, #20
 8009774:	f100 0210 	add.w	r2, r0, #16
 8009778:	4618      	mov	r0, r3
 800977a:	4553      	cmp	r3, sl
 800977c:	db37      	blt.n	80097ee <__lshift+0xbe>
 800977e:	6920      	ldr	r0, [r4, #16]
 8009780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009784:	f104 0314 	add.w	r3, r4, #20
 8009788:	f019 091f 	ands.w	r9, r9, #31
 800978c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009794:	d02f      	beq.n	80097f6 <__lshift+0xc6>
 8009796:	f1c9 0e20 	rsb	lr, r9, #32
 800979a:	468a      	mov	sl, r1
 800979c:	f04f 0c00 	mov.w	ip, #0
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	fa02 f209 	lsl.w	r2, r2, r9
 80097a6:	ea42 020c 	orr.w	r2, r2, ip
 80097aa:	f84a 2b04 	str.w	r2, [sl], #4
 80097ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80097b2:	4298      	cmp	r0, r3
 80097b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097b8:	d8f2      	bhi.n	80097a0 <__lshift+0x70>
 80097ba:	1b03      	subs	r3, r0, r4
 80097bc:	3b15      	subs	r3, #21
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	3304      	adds	r3, #4
 80097c4:	f104 0215 	add.w	r2, r4, #21
 80097c8:	4290      	cmp	r0, r2
 80097ca:	bf38      	it	cc
 80097cc:	2304      	movcc	r3, #4
 80097ce:	f841 c003 	str.w	ip, [r1, r3]
 80097d2:	f1bc 0f00 	cmp.w	ip, #0
 80097d6:	d001      	beq.n	80097dc <__lshift+0xac>
 80097d8:	f108 0602 	add.w	r6, r8, #2
 80097dc:	3e01      	subs	r6, #1
 80097de:	4638      	mov	r0, r7
 80097e0:	612e      	str	r6, [r5, #16]
 80097e2:	4621      	mov	r1, r4
 80097e4:	f7ff fd88 	bl	80092f8 <_Bfree>
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80097f2:	3301      	adds	r3, #1
 80097f4:	e7c1      	b.n	800977a <__lshift+0x4a>
 80097f6:	3904      	subs	r1, #4
 80097f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009800:	4298      	cmp	r0, r3
 8009802:	d8f9      	bhi.n	80097f8 <__lshift+0xc8>
 8009804:	e7ea      	b.n	80097dc <__lshift+0xac>
 8009806:	bf00      	nop
 8009808:	0800afc0 	.word	0x0800afc0
 800980c:	0800b04c 	.word	0x0800b04c

08009810 <__mcmp>:
 8009810:	b530      	push	{r4, r5, lr}
 8009812:	6902      	ldr	r2, [r0, #16]
 8009814:	690c      	ldr	r4, [r1, #16]
 8009816:	1b12      	subs	r2, r2, r4
 8009818:	d10e      	bne.n	8009838 <__mcmp+0x28>
 800981a:	f100 0314 	add.w	r3, r0, #20
 800981e:	3114      	adds	r1, #20
 8009820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800982c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009830:	42a5      	cmp	r5, r4
 8009832:	d003      	beq.n	800983c <__mcmp+0x2c>
 8009834:	d305      	bcc.n	8009842 <__mcmp+0x32>
 8009836:	2201      	movs	r2, #1
 8009838:	4610      	mov	r0, r2
 800983a:	bd30      	pop	{r4, r5, pc}
 800983c:	4283      	cmp	r3, r0
 800983e:	d3f3      	bcc.n	8009828 <__mcmp+0x18>
 8009840:	e7fa      	b.n	8009838 <__mcmp+0x28>
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	e7f7      	b.n	8009838 <__mcmp+0x28>

08009848 <__mdiff>:
 8009848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	460c      	mov	r4, r1
 800984e:	4606      	mov	r6, r0
 8009850:	4611      	mov	r1, r2
 8009852:	4620      	mov	r0, r4
 8009854:	4690      	mov	r8, r2
 8009856:	f7ff ffdb 	bl	8009810 <__mcmp>
 800985a:	1e05      	subs	r5, r0, #0
 800985c:	d110      	bne.n	8009880 <__mdiff+0x38>
 800985e:	4629      	mov	r1, r5
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff fd09 	bl	8009278 <_Balloc>
 8009866:	b930      	cbnz	r0, 8009876 <__mdiff+0x2e>
 8009868:	4b3a      	ldr	r3, [pc, #232]	; (8009954 <__mdiff+0x10c>)
 800986a:	4602      	mov	r2, r0
 800986c:	f240 2132 	movw	r1, #562	; 0x232
 8009870:	4839      	ldr	r0, [pc, #228]	; (8009958 <__mdiff+0x110>)
 8009872:	f7fe fab7 	bl	8007de4 <__assert_func>
 8009876:	2301      	movs	r3, #1
 8009878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800987c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	bfa4      	itt	ge
 8009882:	4643      	movge	r3, r8
 8009884:	46a0      	movge	r8, r4
 8009886:	4630      	mov	r0, r6
 8009888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800988c:	bfa6      	itte	ge
 800988e:	461c      	movge	r4, r3
 8009890:	2500      	movge	r5, #0
 8009892:	2501      	movlt	r5, #1
 8009894:	f7ff fcf0 	bl	8009278 <_Balloc>
 8009898:	b920      	cbnz	r0, 80098a4 <__mdiff+0x5c>
 800989a:	4b2e      	ldr	r3, [pc, #184]	; (8009954 <__mdiff+0x10c>)
 800989c:	4602      	mov	r2, r0
 800989e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098a2:	e7e5      	b.n	8009870 <__mdiff+0x28>
 80098a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098a8:	6926      	ldr	r6, [r4, #16]
 80098aa:	60c5      	str	r5, [r0, #12]
 80098ac:	f104 0914 	add.w	r9, r4, #20
 80098b0:	f108 0514 	add.w	r5, r8, #20
 80098b4:	f100 0e14 	add.w	lr, r0, #20
 80098b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098c0:	f108 0210 	add.w	r2, r8, #16
 80098c4:	46f2      	mov	sl, lr
 80098c6:	2100      	movs	r1, #0
 80098c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80098cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098d0:	fa1f f883 	uxth.w	r8, r3
 80098d4:	fa11 f18b 	uxtah	r1, r1, fp
 80098d8:	0c1b      	lsrs	r3, r3, #16
 80098da:	eba1 0808 	sub.w	r8, r1, r8
 80098de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098e6:	fa1f f888 	uxth.w	r8, r8
 80098ea:	1419      	asrs	r1, r3, #16
 80098ec:	454e      	cmp	r6, r9
 80098ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098f2:	f84a 3b04 	str.w	r3, [sl], #4
 80098f6:	d8e7      	bhi.n	80098c8 <__mdiff+0x80>
 80098f8:	1b33      	subs	r3, r6, r4
 80098fa:	3b15      	subs	r3, #21
 80098fc:	f023 0303 	bic.w	r3, r3, #3
 8009900:	3304      	adds	r3, #4
 8009902:	3415      	adds	r4, #21
 8009904:	42a6      	cmp	r6, r4
 8009906:	bf38      	it	cc
 8009908:	2304      	movcc	r3, #4
 800990a:	441d      	add	r5, r3
 800990c:	4473      	add	r3, lr
 800990e:	469e      	mov	lr, r3
 8009910:	462e      	mov	r6, r5
 8009912:	4566      	cmp	r6, ip
 8009914:	d30e      	bcc.n	8009934 <__mdiff+0xec>
 8009916:	f10c 0203 	add.w	r2, ip, #3
 800991a:	1b52      	subs	r2, r2, r5
 800991c:	f022 0203 	bic.w	r2, r2, #3
 8009920:	3d03      	subs	r5, #3
 8009922:	45ac      	cmp	ip, r5
 8009924:	bf38      	it	cc
 8009926:	2200      	movcc	r2, #0
 8009928:	441a      	add	r2, r3
 800992a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800992e:	b17b      	cbz	r3, 8009950 <__mdiff+0x108>
 8009930:	6107      	str	r7, [r0, #16]
 8009932:	e7a3      	b.n	800987c <__mdiff+0x34>
 8009934:	f856 8b04 	ldr.w	r8, [r6], #4
 8009938:	fa11 f288 	uxtah	r2, r1, r8
 800993c:	1414      	asrs	r4, r2, #16
 800993e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009942:	b292      	uxth	r2, r2
 8009944:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009948:	f84e 2b04 	str.w	r2, [lr], #4
 800994c:	1421      	asrs	r1, r4, #16
 800994e:	e7e0      	b.n	8009912 <__mdiff+0xca>
 8009950:	3f01      	subs	r7, #1
 8009952:	e7ea      	b.n	800992a <__mdiff+0xe2>
 8009954:	0800afc0 	.word	0x0800afc0
 8009958:	0800b04c 	.word	0x0800b04c

0800995c <__ulp>:
 800995c:	b082      	sub	sp, #8
 800995e:	ed8d 0b00 	vstr	d0, [sp]
 8009962:	9b01      	ldr	r3, [sp, #4]
 8009964:	4912      	ldr	r1, [pc, #72]	; (80099b0 <__ulp+0x54>)
 8009966:	4019      	ands	r1, r3
 8009968:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800996c:	2900      	cmp	r1, #0
 800996e:	dd05      	ble.n	800997c <__ulp+0x20>
 8009970:	2200      	movs	r2, #0
 8009972:	460b      	mov	r3, r1
 8009974:	ec43 2b10 	vmov	d0, r2, r3
 8009978:	b002      	add	sp, #8
 800997a:	4770      	bx	lr
 800997c:	4249      	negs	r1, r1
 800997e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009982:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	f04f 0300 	mov.w	r3, #0
 800998e:	da04      	bge.n	800999a <__ulp+0x3e>
 8009990:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009994:	fa41 f300 	asr.w	r3, r1, r0
 8009998:	e7ec      	b.n	8009974 <__ulp+0x18>
 800999a:	f1a0 0114 	sub.w	r1, r0, #20
 800999e:	291e      	cmp	r1, #30
 80099a0:	bfda      	itte	le
 80099a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80099aa:	2101      	movgt	r1, #1
 80099ac:	460a      	mov	r2, r1
 80099ae:	e7e1      	b.n	8009974 <__ulp+0x18>
 80099b0:	7ff00000 	.word	0x7ff00000

080099b4 <__b2d>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	6905      	ldr	r5, [r0, #16]
 80099b8:	f100 0714 	add.w	r7, r0, #20
 80099bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099c0:	1f2e      	subs	r6, r5, #4
 80099c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7ff fd48 	bl	800945c <__hi0bits>
 80099cc:	f1c0 0320 	rsb	r3, r0, #32
 80099d0:	280a      	cmp	r0, #10
 80099d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a50 <__b2d+0x9c>
 80099d6:	600b      	str	r3, [r1, #0]
 80099d8:	dc14      	bgt.n	8009a04 <__b2d+0x50>
 80099da:	f1c0 0e0b 	rsb	lr, r0, #11
 80099de:	fa24 f10e 	lsr.w	r1, r4, lr
 80099e2:	42b7      	cmp	r7, r6
 80099e4:	ea41 030c 	orr.w	r3, r1, ip
 80099e8:	bf34      	ite	cc
 80099ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80099ee:	2100      	movcs	r1, #0
 80099f0:	3015      	adds	r0, #21
 80099f2:	fa04 f000 	lsl.w	r0, r4, r0
 80099f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80099fa:	ea40 0201 	orr.w	r2, r0, r1
 80099fe:	ec43 2b10 	vmov	d0, r2, r3
 8009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a04:	42b7      	cmp	r7, r6
 8009a06:	bf3a      	itte	cc
 8009a08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a10:	2100      	movcs	r1, #0
 8009a12:	380b      	subs	r0, #11
 8009a14:	d017      	beq.n	8009a46 <__b2d+0x92>
 8009a16:	f1c0 0c20 	rsb	ip, r0, #32
 8009a1a:	fa04 f500 	lsl.w	r5, r4, r0
 8009a1e:	42be      	cmp	r6, r7
 8009a20:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a24:	ea45 0504 	orr.w	r5, r5, r4
 8009a28:	bf8c      	ite	hi
 8009a2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a2e:	2400      	movls	r4, #0
 8009a30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a34:	fa01 f000 	lsl.w	r0, r1, r0
 8009a38:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a40:	ea40 0204 	orr.w	r2, r0, r4
 8009a44:	e7db      	b.n	80099fe <__b2d+0x4a>
 8009a46:	ea44 030c 	orr.w	r3, r4, ip
 8009a4a:	460a      	mov	r2, r1
 8009a4c:	e7d7      	b.n	80099fe <__b2d+0x4a>
 8009a4e:	bf00      	nop
 8009a50:	3ff00000 	.word	0x3ff00000

08009a54 <__d2b>:
 8009a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	4689      	mov	r9, r1
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	ec57 6b10 	vmov	r6, r7, d0
 8009a60:	4690      	mov	r8, r2
 8009a62:	f7ff fc09 	bl	8009278 <_Balloc>
 8009a66:	4604      	mov	r4, r0
 8009a68:	b930      	cbnz	r0, 8009a78 <__d2b+0x24>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <__d2b+0xb0>)
 8009a6e:	4826      	ldr	r0, [pc, #152]	; (8009b08 <__d2b+0xb4>)
 8009a70:	f240 310a 	movw	r1, #778	; 0x30a
 8009a74:	f7fe f9b6 	bl	8007de4 <__assert_func>
 8009a78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009a7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a80:	bb35      	cbnz	r5, 8009ad0 <__d2b+0x7c>
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	9301      	str	r3, [sp, #4]
 8009a86:	d028      	beq.n	8009ada <__d2b+0x86>
 8009a88:	4668      	mov	r0, sp
 8009a8a:	9600      	str	r6, [sp, #0]
 8009a8c:	f7ff fd06 	bl	800949c <__lo0bits>
 8009a90:	9900      	ldr	r1, [sp, #0]
 8009a92:	b300      	cbz	r0, 8009ad6 <__d2b+0x82>
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	f1c0 0320 	rsb	r3, r0, #32
 8009a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	40c2      	lsrs	r2, r0
 8009aa2:	6163      	str	r3, [r4, #20]
 8009aa4:	9201      	str	r2, [sp, #4]
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	61a3      	str	r3, [r4, #24]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bf14      	ite	ne
 8009aae:	2202      	movne	r2, #2
 8009ab0:	2201      	moveq	r2, #1
 8009ab2:	6122      	str	r2, [r4, #16]
 8009ab4:	b1d5      	cbz	r5, 8009aec <__d2b+0x98>
 8009ab6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aba:	4405      	add	r5, r0
 8009abc:	f8c9 5000 	str.w	r5, [r9]
 8009ac0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ac4:	f8c8 0000 	str.w	r0, [r8]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	b003      	add	sp, #12
 8009acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad4:	e7d5      	b.n	8009a82 <__d2b+0x2e>
 8009ad6:	6161      	str	r1, [r4, #20]
 8009ad8:	e7e5      	b.n	8009aa6 <__d2b+0x52>
 8009ada:	a801      	add	r0, sp, #4
 8009adc:	f7ff fcde 	bl	800949c <__lo0bits>
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	6163      	str	r3, [r4, #20]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	3020      	adds	r0, #32
 8009aea:	e7e3      	b.n	8009ab4 <__d2b+0x60>
 8009aec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009af4:	f8c9 0000 	str.w	r0, [r9]
 8009af8:	6918      	ldr	r0, [r3, #16]
 8009afa:	f7ff fcaf 	bl	800945c <__hi0bits>
 8009afe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b02:	e7df      	b.n	8009ac4 <__d2b+0x70>
 8009b04:	0800afc0 	.word	0x0800afc0
 8009b08:	0800b04c 	.word	0x0800b04c

08009b0c <__ratio>:
 8009b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4688      	mov	r8, r1
 8009b12:	4669      	mov	r1, sp
 8009b14:	4681      	mov	r9, r0
 8009b16:	f7ff ff4d 	bl	80099b4 <__b2d>
 8009b1a:	a901      	add	r1, sp, #4
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	ec55 4b10 	vmov	r4, r5, d0
 8009b22:	f7ff ff47 	bl	80099b4 <__b2d>
 8009b26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b2e:	eba3 0c02 	sub.w	ip, r3, r2
 8009b32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b36:	1a9b      	subs	r3, r3, r2
 8009b38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b3c:	ec51 0b10 	vmov	r0, r1, d0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfd6      	itet	le
 8009b44:	460a      	movle	r2, r1
 8009b46:	462a      	movgt	r2, r5
 8009b48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b4c:	468b      	mov	fp, r1
 8009b4e:	462f      	mov	r7, r5
 8009b50:	bfd4      	ite	le
 8009b52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	ee10 2a10 	vmov	r2, s0
 8009b60:	465b      	mov	r3, fp
 8009b62:	4639      	mov	r1, r7
 8009b64:	f7f6 fea2 	bl	80008ac <__aeabi_ddiv>
 8009b68:	ec41 0b10 	vmov	d0, r0, r1
 8009b6c:	b003      	add	sp, #12
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b72 <__copybits>:
 8009b72:	3901      	subs	r1, #1
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	1149      	asrs	r1, r1, #5
 8009b78:	6914      	ldr	r4, [r2, #16]
 8009b7a:	3101      	adds	r1, #1
 8009b7c:	f102 0314 	add.w	r3, r2, #20
 8009b80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b88:	1f05      	subs	r5, r0, #4
 8009b8a:	42a3      	cmp	r3, r4
 8009b8c:	d30c      	bcc.n	8009ba8 <__copybits+0x36>
 8009b8e:	1aa3      	subs	r3, r4, r2
 8009b90:	3b11      	subs	r3, #17
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	3211      	adds	r2, #17
 8009b98:	42a2      	cmp	r2, r4
 8009b9a:	bf88      	it	hi
 8009b9c:	2300      	movhi	r3, #0
 8009b9e:	4418      	add	r0, r3
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4288      	cmp	r0, r1
 8009ba4:	d305      	bcc.n	8009bb2 <__copybits+0x40>
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bac:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bb0:	e7eb      	b.n	8009b8a <__copybits+0x18>
 8009bb2:	f840 3b04 	str.w	r3, [r0], #4
 8009bb6:	e7f4      	b.n	8009ba2 <__copybits+0x30>

08009bb8 <__any_on>:
 8009bb8:	f100 0214 	add.w	r2, r0, #20
 8009bbc:	6900      	ldr	r0, [r0, #16]
 8009bbe:	114b      	asrs	r3, r1, #5
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	db11      	blt.n	8009bea <__any_on+0x32>
 8009bc6:	dd0a      	ble.n	8009bde <__any_on+0x26>
 8009bc8:	f011 011f 	ands.w	r1, r1, #31
 8009bcc:	d007      	beq.n	8009bde <__any_on+0x26>
 8009bce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bd2:	fa24 f001 	lsr.w	r0, r4, r1
 8009bd6:	fa00 f101 	lsl.w	r1, r0, r1
 8009bda:	428c      	cmp	r4, r1
 8009bdc:	d10b      	bne.n	8009bf6 <__any_on+0x3e>
 8009bde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d803      	bhi.n	8009bee <__any_on+0x36>
 8009be6:	2000      	movs	r0, #0
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	4603      	mov	r3, r0
 8009bec:	e7f7      	b.n	8009bde <__any_on+0x26>
 8009bee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bf2:	2900      	cmp	r1, #0
 8009bf4:	d0f5      	beq.n	8009be2 <__any_on+0x2a>
 8009bf6:	2001      	movs	r0, #1
 8009bf8:	e7f6      	b.n	8009be8 <__any_on+0x30>

08009bfa <_calloc_r>:
 8009bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bfc:	fba1 2402 	umull	r2, r4, r1, r2
 8009c00:	b94c      	cbnz	r4, 8009c16 <_calloc_r+0x1c>
 8009c02:	4611      	mov	r1, r2
 8009c04:	9201      	str	r2, [sp, #4]
 8009c06:	f7fc fa67 	bl	80060d8 <_malloc_r>
 8009c0a:	9a01      	ldr	r2, [sp, #4]
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	b930      	cbnz	r0, 8009c1e <_calloc_r+0x24>
 8009c10:	4628      	mov	r0, r5
 8009c12:	b003      	add	sp, #12
 8009c14:	bd30      	pop	{r4, r5, pc}
 8009c16:	220c      	movs	r2, #12
 8009c18:	6002      	str	r2, [r0, #0]
 8009c1a:	2500      	movs	r5, #0
 8009c1c:	e7f8      	b.n	8009c10 <_calloc_r+0x16>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	f7fc f9e6 	bl	8005ff0 <memset>
 8009c24:	e7f4      	b.n	8009c10 <_calloc_r+0x16>

08009c26 <__ssputs_r>:
 8009c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2a:	688e      	ldr	r6, [r1, #8]
 8009c2c:	429e      	cmp	r6, r3
 8009c2e:	4682      	mov	sl, r0
 8009c30:	460c      	mov	r4, r1
 8009c32:	4690      	mov	r8, r2
 8009c34:	461f      	mov	r7, r3
 8009c36:	d838      	bhi.n	8009caa <__ssputs_r+0x84>
 8009c38:	898a      	ldrh	r2, [r1, #12]
 8009c3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c3e:	d032      	beq.n	8009ca6 <__ssputs_r+0x80>
 8009c40:	6825      	ldr	r5, [r4, #0]
 8009c42:	6909      	ldr	r1, [r1, #16]
 8009c44:	eba5 0901 	sub.w	r9, r5, r1
 8009c48:	6965      	ldr	r5, [r4, #20]
 8009c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c52:	3301      	adds	r3, #1
 8009c54:	444b      	add	r3, r9
 8009c56:	106d      	asrs	r5, r5, #1
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	bf38      	it	cc
 8009c5c:	461d      	movcc	r5, r3
 8009c5e:	0553      	lsls	r3, r2, #21
 8009c60:	d531      	bpl.n	8009cc6 <__ssputs_r+0xa0>
 8009c62:	4629      	mov	r1, r5
 8009c64:	f7fc fa38 	bl	80060d8 <_malloc_r>
 8009c68:	4606      	mov	r6, r0
 8009c6a:	b950      	cbnz	r0, 8009c82 <__ssputs_r+0x5c>
 8009c6c:	230c      	movs	r3, #12
 8009c6e:	f8ca 3000 	str.w	r3, [sl]
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c82:	6921      	ldr	r1, [r4, #16]
 8009c84:	464a      	mov	r2, r9
 8009c86:	f7ff fadd 	bl	8009244 <memcpy>
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	6126      	str	r6, [r4, #16]
 8009c98:	6165      	str	r5, [r4, #20]
 8009c9a:	444e      	add	r6, r9
 8009c9c:	eba5 0509 	sub.w	r5, r5, r9
 8009ca0:	6026      	str	r6, [r4, #0]
 8009ca2:	60a5      	str	r5, [r4, #8]
 8009ca4:	463e      	mov	r6, r7
 8009ca6:	42be      	cmp	r6, r7
 8009ca8:	d900      	bls.n	8009cac <__ssputs_r+0x86>
 8009caa:	463e      	mov	r6, r7
 8009cac:	6820      	ldr	r0, [r4, #0]
 8009cae:	4632      	mov	r2, r6
 8009cb0:	4641      	mov	r1, r8
 8009cb2:	f000 fd7f 	bl	800a7b4 <memmove>
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	1b9b      	subs	r3, r3, r6
 8009cba:	60a3      	str	r3, [r4, #8]
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	4433      	add	r3, r6
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e7db      	b.n	8009c7e <__ssputs_r+0x58>
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	f000 fd8e 	bl	800a7e8 <_realloc_r>
 8009ccc:	4606      	mov	r6, r0
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d1e1      	bne.n	8009c96 <__ssputs_r+0x70>
 8009cd2:	6921      	ldr	r1, [r4, #16]
 8009cd4:	4650      	mov	r0, sl
 8009cd6:	f7fc f993 	bl	8006000 <_free_r>
 8009cda:	e7c7      	b.n	8009c6c <__ssputs_r+0x46>

08009cdc <_svfiprintf_r>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	898b      	ldrh	r3, [r1, #12]
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	b09d      	sub	sp, #116	; 0x74
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	d50e      	bpl.n	8009d0e <_svfiprintf_r+0x32>
 8009cf0:	690b      	ldr	r3, [r1, #16]
 8009cf2:	b963      	cbnz	r3, 8009d0e <_svfiprintf_r+0x32>
 8009cf4:	2140      	movs	r1, #64	; 0x40
 8009cf6:	f7fc f9ef 	bl	80060d8 <_malloc_r>
 8009cfa:	6028      	str	r0, [r5, #0]
 8009cfc:	6128      	str	r0, [r5, #16]
 8009cfe:	b920      	cbnz	r0, 8009d0a <_svfiprintf_r+0x2e>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e0d1      	b.n	8009eae <_svfiprintf_r+0x1d2>
 8009d0a:	2340      	movs	r3, #64	; 0x40
 8009d0c:	616b      	str	r3, [r5, #20]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9309      	str	r3, [sp, #36]	; 0x24
 8009d12:	2320      	movs	r3, #32
 8009d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1c:	2330      	movs	r3, #48	; 0x30
 8009d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ec8 <_svfiprintf_r+0x1ec>
 8009d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d26:	f04f 0901 	mov.w	r9, #1
 8009d2a:	4623      	mov	r3, r4
 8009d2c:	469a      	mov	sl, r3
 8009d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d32:	b10a      	cbz	r2, 8009d38 <_svfiprintf_r+0x5c>
 8009d34:	2a25      	cmp	r2, #37	; 0x25
 8009d36:	d1f9      	bne.n	8009d2c <_svfiprintf_r+0x50>
 8009d38:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3c:	d00b      	beq.n	8009d56 <_svfiprintf_r+0x7a>
 8009d3e:	465b      	mov	r3, fp
 8009d40:	4622      	mov	r2, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	4638      	mov	r0, r7
 8009d46:	f7ff ff6e 	bl	8009c26 <__ssputs_r>
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f000 80aa 	beq.w	8009ea4 <_svfiprintf_r+0x1c8>
 8009d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d52:	445a      	add	r2, fp
 8009d54:	9209      	str	r2, [sp, #36]	; 0x24
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80a2 	beq.w	8009ea4 <_svfiprintf_r+0x1c8>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295
 8009d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6a:	f10a 0a01 	add.w	sl, sl, #1
 8009d6e:	9304      	str	r3, [sp, #16]
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d76:	931a      	str	r3, [sp, #104]	; 0x68
 8009d78:	4654      	mov	r4, sl
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	4851      	ldr	r0, [pc, #324]	; (8009ec8 <_svfiprintf_r+0x1ec>)
 8009d82:	f7f6 fa5d 	bl	8000240 <memchr>
 8009d86:	9a04      	ldr	r2, [sp, #16]
 8009d88:	b9d8      	cbnz	r0, 8009dc2 <_svfiprintf_r+0xe6>
 8009d8a:	06d0      	lsls	r0, r2, #27
 8009d8c:	bf44      	itt	mi
 8009d8e:	2320      	movmi	r3, #32
 8009d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d94:	0711      	lsls	r1, r2, #28
 8009d96:	bf44      	itt	mi
 8009d98:	232b      	movmi	r3, #43	; 0x2b
 8009d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009da2:	2b2a      	cmp	r3, #42	; 0x2a
 8009da4:	d015      	beq.n	8009dd2 <_svfiprintf_r+0xf6>
 8009da6:	9a07      	ldr	r2, [sp, #28]
 8009da8:	4654      	mov	r4, sl
 8009daa:	2000      	movs	r0, #0
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	4621      	mov	r1, r4
 8009db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db6:	3b30      	subs	r3, #48	; 0x30
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d94e      	bls.n	8009e5a <_svfiprintf_r+0x17e>
 8009dbc:	b1b0      	cbz	r0, 8009dec <_svfiprintf_r+0x110>
 8009dbe:	9207      	str	r2, [sp, #28]
 8009dc0:	e014      	b.n	8009dec <_svfiprintf_r+0x110>
 8009dc2:	eba0 0308 	sub.w	r3, r0, r8
 8009dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	46a2      	mov	sl, r4
 8009dd0:	e7d2      	b.n	8009d78 <_svfiprintf_r+0x9c>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	1d19      	adds	r1, r3, #4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	9103      	str	r1, [sp, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfbb      	ittet	lt
 8009dde:	425b      	neglt	r3, r3
 8009de0:	f042 0202 	orrlt.w	r2, r2, #2
 8009de4:	9307      	strge	r3, [sp, #28]
 8009de6:	9307      	strlt	r3, [sp, #28]
 8009de8:	bfb8      	it	lt
 8009dea:	9204      	strlt	r2, [sp, #16]
 8009dec:	7823      	ldrb	r3, [r4, #0]
 8009dee:	2b2e      	cmp	r3, #46	; 0x2e
 8009df0:	d10c      	bne.n	8009e0c <_svfiprintf_r+0x130>
 8009df2:	7863      	ldrb	r3, [r4, #1]
 8009df4:	2b2a      	cmp	r3, #42	; 0x2a
 8009df6:	d135      	bne.n	8009e64 <_svfiprintf_r+0x188>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d1a      	adds	r2, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9203      	str	r2, [sp, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfb8      	it	lt
 8009e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e08:	3402      	adds	r4, #2
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ed8 <_svfiprintf_r+0x1fc>
 8009e10:	7821      	ldrb	r1, [r4, #0]
 8009e12:	2203      	movs	r2, #3
 8009e14:	4650      	mov	r0, sl
 8009e16:	f7f6 fa13 	bl	8000240 <memchr>
 8009e1a:	b140      	cbz	r0, 8009e2e <_svfiprintf_r+0x152>
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	eba0 000a 	sub.w	r0, r0, sl
 8009e22:	fa03 f000 	lsl.w	r0, r3, r0
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	4303      	orrs	r3, r0
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e32:	4826      	ldr	r0, [pc, #152]	; (8009ecc <_svfiprintf_r+0x1f0>)
 8009e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e38:	2206      	movs	r2, #6
 8009e3a:	f7f6 fa01 	bl	8000240 <memchr>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d038      	beq.n	8009eb4 <_svfiprintf_r+0x1d8>
 8009e42:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <_svfiprintf_r+0x1f4>)
 8009e44:	bb1b      	cbnz	r3, 8009e8e <_svfiprintf_r+0x1b2>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	3307      	adds	r3, #7
 8009e4a:	f023 0307 	bic.w	r3, r3, #7
 8009e4e:	3308      	adds	r3, #8
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e54:	4433      	add	r3, r6
 8009e56:	9309      	str	r3, [sp, #36]	; 0x24
 8009e58:	e767      	b.n	8009d2a <_svfiprintf_r+0x4e>
 8009e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5e:	460c      	mov	r4, r1
 8009e60:	2001      	movs	r0, #1
 8009e62:	e7a5      	b.n	8009db0 <_svfiprintf_r+0xd4>
 8009e64:	2300      	movs	r3, #0
 8009e66:	3401      	adds	r4, #1
 8009e68:	9305      	str	r3, [sp, #20]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f04f 0c0a 	mov.w	ip, #10
 8009e70:	4620      	mov	r0, r4
 8009e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e76:	3a30      	subs	r2, #48	; 0x30
 8009e78:	2a09      	cmp	r2, #9
 8009e7a:	d903      	bls.n	8009e84 <_svfiprintf_r+0x1a8>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0c5      	beq.n	8009e0c <_svfiprintf_r+0x130>
 8009e80:	9105      	str	r1, [sp, #20]
 8009e82:	e7c3      	b.n	8009e0c <_svfiprintf_r+0x130>
 8009e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e88:	4604      	mov	r4, r0
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e7f0      	b.n	8009e70 <_svfiprintf_r+0x194>
 8009e8e:	ab03      	add	r3, sp, #12
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	462a      	mov	r2, r5
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <_svfiprintf_r+0x1f8>)
 8009e96:	a904      	add	r1, sp, #16
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f7fc fa31 	bl	8006300 <_printf_float>
 8009e9e:	1c42      	adds	r2, r0, #1
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	d1d6      	bne.n	8009e52 <_svfiprintf_r+0x176>
 8009ea4:	89ab      	ldrh	r3, [r5, #12]
 8009ea6:	065b      	lsls	r3, r3, #25
 8009ea8:	f53f af2c 	bmi.w	8009d04 <_svfiprintf_r+0x28>
 8009eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eae:	b01d      	add	sp, #116	; 0x74
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <_svfiprintf_r+0x1f8>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f7fc fcc2 	bl	8006848 <_printf_i>
 8009ec4:	e7eb      	b.n	8009e9e <_svfiprintf_r+0x1c2>
 8009ec6:	bf00      	nop
 8009ec8:	0800b1a4 	.word	0x0800b1a4
 8009ecc:	0800b1ae 	.word	0x0800b1ae
 8009ed0:	08006301 	.word	0x08006301
 8009ed4:	08009c27 	.word	0x08009c27
 8009ed8:	0800b1aa 	.word	0x0800b1aa

08009edc <__sfputc_r>:
 8009edc:	6893      	ldr	r3, [r2, #8]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	b410      	push	{r4}
 8009ee4:	6093      	str	r3, [r2, #8]
 8009ee6:	da08      	bge.n	8009efa <__sfputc_r+0x1e>
 8009ee8:	6994      	ldr	r4, [r2, #24]
 8009eea:	42a3      	cmp	r3, r4
 8009eec:	db01      	blt.n	8009ef2 <__sfputc_r+0x16>
 8009eee:	290a      	cmp	r1, #10
 8009ef0:	d103      	bne.n	8009efa <__sfputc_r+0x1e>
 8009ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef6:	f000 b967 	b.w	800a1c8 <__swbuf_r>
 8009efa:	6813      	ldr	r3, [r2, #0]
 8009efc:	1c58      	adds	r0, r3, #1
 8009efe:	6010      	str	r0, [r2, #0]
 8009f00:	7019      	strb	r1, [r3, #0]
 8009f02:	4608      	mov	r0, r1
 8009f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <__sfputs_r>:
 8009f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	460f      	mov	r7, r1
 8009f10:	4614      	mov	r4, r2
 8009f12:	18d5      	adds	r5, r2, r3
 8009f14:	42ac      	cmp	r4, r5
 8009f16:	d101      	bne.n	8009f1c <__sfputs_r+0x12>
 8009f18:	2000      	movs	r0, #0
 8009f1a:	e007      	b.n	8009f2c <__sfputs_r+0x22>
 8009f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f20:	463a      	mov	r2, r7
 8009f22:	4630      	mov	r0, r6
 8009f24:	f7ff ffda 	bl	8009edc <__sfputc_r>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d1f3      	bne.n	8009f14 <__sfputs_r+0xa>
 8009f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f30 <_vfiprintf_r>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	460d      	mov	r5, r1
 8009f36:	b09d      	sub	sp, #116	; 0x74
 8009f38:	4614      	mov	r4, r2
 8009f3a:	4698      	mov	r8, r3
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	b118      	cbz	r0, 8009f48 <_vfiprintf_r+0x18>
 8009f40:	6983      	ldr	r3, [r0, #24]
 8009f42:	b90b      	cbnz	r3, 8009f48 <_vfiprintf_r+0x18>
 8009f44:	f000 fb30 	bl	800a5a8 <__sinit>
 8009f48:	4b89      	ldr	r3, [pc, #548]	; (800a170 <_vfiprintf_r+0x240>)
 8009f4a:	429d      	cmp	r5, r3
 8009f4c:	d11b      	bne.n	8009f86 <_vfiprintf_r+0x56>
 8009f4e:	6875      	ldr	r5, [r6, #4]
 8009f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f52:	07d9      	lsls	r1, r3, #31
 8009f54:	d405      	bmi.n	8009f62 <_vfiprintf_r+0x32>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	059a      	lsls	r2, r3, #22
 8009f5a:	d402      	bmi.n	8009f62 <_vfiprintf_r+0x32>
 8009f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f5e:	f000 fbc1 	bl	800a6e4 <__retarget_lock_acquire_recursive>
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	071b      	lsls	r3, r3, #28
 8009f66:	d501      	bpl.n	8009f6c <_vfiprintf_r+0x3c>
 8009f68:	692b      	ldr	r3, [r5, #16]
 8009f6a:	b9eb      	cbnz	r3, 8009fa8 <_vfiprintf_r+0x78>
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f000 f98a 	bl	800a288 <__swsetup_r>
 8009f74:	b1c0      	cbz	r0, 8009fa8 <_vfiprintf_r+0x78>
 8009f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f78:	07dc      	lsls	r4, r3, #31
 8009f7a:	d50e      	bpl.n	8009f9a <_vfiprintf_r+0x6a>
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	b01d      	add	sp, #116	; 0x74
 8009f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f86:	4b7b      	ldr	r3, [pc, #492]	; (800a174 <_vfiprintf_r+0x244>)
 8009f88:	429d      	cmp	r5, r3
 8009f8a:	d101      	bne.n	8009f90 <_vfiprintf_r+0x60>
 8009f8c:	68b5      	ldr	r5, [r6, #8]
 8009f8e:	e7df      	b.n	8009f50 <_vfiprintf_r+0x20>
 8009f90:	4b79      	ldr	r3, [pc, #484]	; (800a178 <_vfiprintf_r+0x248>)
 8009f92:	429d      	cmp	r5, r3
 8009f94:	bf08      	it	eq
 8009f96:	68f5      	ldreq	r5, [r6, #12]
 8009f98:	e7da      	b.n	8009f50 <_vfiprintf_r+0x20>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	0598      	lsls	r0, r3, #22
 8009f9e:	d4ed      	bmi.n	8009f7c <_vfiprintf_r+0x4c>
 8009fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa2:	f000 fba0 	bl	800a6e6 <__retarget_lock_release_recursive>
 8009fa6:	e7e9      	b.n	8009f7c <_vfiprintf_r+0x4c>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9309      	str	r3, [sp, #36]	; 0x24
 8009fac:	2320      	movs	r3, #32
 8009fae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fb6:	2330      	movs	r3, #48	; 0x30
 8009fb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a17c <_vfiprintf_r+0x24c>
 8009fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc0:	f04f 0901 	mov.w	r9, #1
 8009fc4:	4623      	mov	r3, r4
 8009fc6:	469a      	mov	sl, r3
 8009fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fcc:	b10a      	cbz	r2, 8009fd2 <_vfiprintf_r+0xa2>
 8009fce:	2a25      	cmp	r2, #37	; 0x25
 8009fd0:	d1f9      	bne.n	8009fc6 <_vfiprintf_r+0x96>
 8009fd2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd6:	d00b      	beq.n	8009ff0 <_vfiprintf_r+0xc0>
 8009fd8:	465b      	mov	r3, fp
 8009fda:	4622      	mov	r2, r4
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7ff ff93 	bl	8009f0a <__sfputs_r>
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	f000 80aa 	beq.w	800a13e <_vfiprintf_r+0x20e>
 8009fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fec:	445a      	add	r2, fp
 8009fee:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80a2 	beq.w	800a13e <_vfiprintf_r+0x20e>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f04f 32ff 	mov.w	r2, #4294967295
 800a000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a004:	f10a 0a01 	add.w	sl, sl, #1
 800a008:	9304      	str	r3, [sp, #16]
 800a00a:	9307      	str	r3, [sp, #28]
 800a00c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a010:	931a      	str	r3, [sp, #104]	; 0x68
 800a012:	4654      	mov	r4, sl
 800a014:	2205      	movs	r2, #5
 800a016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01a:	4858      	ldr	r0, [pc, #352]	; (800a17c <_vfiprintf_r+0x24c>)
 800a01c:	f7f6 f910 	bl	8000240 <memchr>
 800a020:	9a04      	ldr	r2, [sp, #16]
 800a022:	b9d8      	cbnz	r0, 800a05c <_vfiprintf_r+0x12c>
 800a024:	06d1      	lsls	r1, r2, #27
 800a026:	bf44      	itt	mi
 800a028:	2320      	movmi	r3, #32
 800a02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a02e:	0713      	lsls	r3, r2, #28
 800a030:	bf44      	itt	mi
 800a032:	232b      	movmi	r3, #43	; 0x2b
 800a034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a038:	f89a 3000 	ldrb.w	r3, [sl]
 800a03c:	2b2a      	cmp	r3, #42	; 0x2a
 800a03e:	d015      	beq.n	800a06c <_vfiprintf_r+0x13c>
 800a040:	9a07      	ldr	r2, [sp, #28]
 800a042:	4654      	mov	r4, sl
 800a044:	2000      	movs	r0, #0
 800a046:	f04f 0c0a 	mov.w	ip, #10
 800a04a:	4621      	mov	r1, r4
 800a04c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a050:	3b30      	subs	r3, #48	; 0x30
 800a052:	2b09      	cmp	r3, #9
 800a054:	d94e      	bls.n	800a0f4 <_vfiprintf_r+0x1c4>
 800a056:	b1b0      	cbz	r0, 800a086 <_vfiprintf_r+0x156>
 800a058:	9207      	str	r2, [sp, #28]
 800a05a:	e014      	b.n	800a086 <_vfiprintf_r+0x156>
 800a05c:	eba0 0308 	sub.w	r3, r0, r8
 800a060:	fa09 f303 	lsl.w	r3, r9, r3
 800a064:	4313      	orrs	r3, r2
 800a066:	9304      	str	r3, [sp, #16]
 800a068:	46a2      	mov	sl, r4
 800a06a:	e7d2      	b.n	800a012 <_vfiprintf_r+0xe2>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	1d19      	adds	r1, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	9103      	str	r1, [sp, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	bfbb      	ittet	lt
 800a078:	425b      	neglt	r3, r3
 800a07a:	f042 0202 	orrlt.w	r2, r2, #2
 800a07e:	9307      	strge	r3, [sp, #28]
 800a080:	9307      	strlt	r3, [sp, #28]
 800a082:	bfb8      	it	lt
 800a084:	9204      	strlt	r2, [sp, #16]
 800a086:	7823      	ldrb	r3, [r4, #0]
 800a088:	2b2e      	cmp	r3, #46	; 0x2e
 800a08a:	d10c      	bne.n	800a0a6 <_vfiprintf_r+0x176>
 800a08c:	7863      	ldrb	r3, [r4, #1]
 800a08e:	2b2a      	cmp	r3, #42	; 0x2a
 800a090:	d135      	bne.n	800a0fe <_vfiprintf_r+0x1ce>
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	1d1a      	adds	r2, r3, #4
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	9203      	str	r2, [sp, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	bfb8      	it	lt
 800a09e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a2:	3402      	adds	r4, #2
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a18c <_vfiprintf_r+0x25c>
 800a0aa:	7821      	ldrb	r1, [r4, #0]
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	4650      	mov	r0, sl
 800a0b0:	f7f6 f8c6 	bl	8000240 <memchr>
 800a0b4:	b140      	cbz	r0, 800a0c8 <_vfiprintf_r+0x198>
 800a0b6:	2340      	movs	r3, #64	; 0x40
 800a0b8:	eba0 000a 	sub.w	r0, r0, sl
 800a0bc:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c0:	9b04      	ldr	r3, [sp, #16]
 800a0c2:	4303      	orrs	r3, r0
 800a0c4:	3401      	adds	r4, #1
 800a0c6:	9304      	str	r3, [sp, #16]
 800a0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0cc:	482c      	ldr	r0, [pc, #176]	; (800a180 <_vfiprintf_r+0x250>)
 800a0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d2:	2206      	movs	r2, #6
 800a0d4:	f7f6 f8b4 	bl	8000240 <memchr>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d03f      	beq.n	800a15c <_vfiprintf_r+0x22c>
 800a0dc:	4b29      	ldr	r3, [pc, #164]	; (800a184 <_vfiprintf_r+0x254>)
 800a0de:	bb1b      	cbnz	r3, 800a128 <_vfiprintf_r+0x1f8>
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	3307      	adds	r3, #7
 800a0e4:	f023 0307 	bic.w	r3, r3, #7
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	9303      	str	r3, [sp, #12]
 800a0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ee:	443b      	add	r3, r7
 800a0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f2:	e767      	b.n	8009fc4 <_vfiprintf_r+0x94>
 800a0f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	e7a5      	b.n	800a04a <_vfiprintf_r+0x11a>
 800a0fe:	2300      	movs	r3, #0
 800a100:	3401      	adds	r4, #1
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	4619      	mov	r1, r3
 800a106:	f04f 0c0a 	mov.w	ip, #10
 800a10a:	4620      	mov	r0, r4
 800a10c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a110:	3a30      	subs	r2, #48	; 0x30
 800a112:	2a09      	cmp	r2, #9
 800a114:	d903      	bls.n	800a11e <_vfiprintf_r+0x1ee>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0c5      	beq.n	800a0a6 <_vfiprintf_r+0x176>
 800a11a:	9105      	str	r1, [sp, #20]
 800a11c:	e7c3      	b.n	800a0a6 <_vfiprintf_r+0x176>
 800a11e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a122:	4604      	mov	r4, r0
 800a124:	2301      	movs	r3, #1
 800a126:	e7f0      	b.n	800a10a <_vfiprintf_r+0x1da>
 800a128:	ab03      	add	r3, sp, #12
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	462a      	mov	r2, r5
 800a12e:	4b16      	ldr	r3, [pc, #88]	; (800a188 <_vfiprintf_r+0x258>)
 800a130:	a904      	add	r1, sp, #16
 800a132:	4630      	mov	r0, r6
 800a134:	f7fc f8e4 	bl	8006300 <_printf_float>
 800a138:	4607      	mov	r7, r0
 800a13a:	1c78      	adds	r0, r7, #1
 800a13c:	d1d6      	bne.n	800a0ec <_vfiprintf_r+0x1bc>
 800a13e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a140:	07d9      	lsls	r1, r3, #31
 800a142:	d405      	bmi.n	800a150 <_vfiprintf_r+0x220>
 800a144:	89ab      	ldrh	r3, [r5, #12]
 800a146:	059a      	lsls	r2, r3, #22
 800a148:	d402      	bmi.n	800a150 <_vfiprintf_r+0x220>
 800a14a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a14c:	f000 facb 	bl	800a6e6 <__retarget_lock_release_recursive>
 800a150:	89ab      	ldrh	r3, [r5, #12]
 800a152:	065b      	lsls	r3, r3, #25
 800a154:	f53f af12 	bmi.w	8009f7c <_vfiprintf_r+0x4c>
 800a158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a15a:	e711      	b.n	8009f80 <_vfiprintf_r+0x50>
 800a15c:	ab03      	add	r3, sp, #12
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	462a      	mov	r2, r5
 800a162:	4b09      	ldr	r3, [pc, #36]	; (800a188 <_vfiprintf_r+0x258>)
 800a164:	a904      	add	r1, sp, #16
 800a166:	4630      	mov	r0, r6
 800a168:	f7fc fb6e 	bl	8006848 <_printf_i>
 800a16c:	e7e4      	b.n	800a138 <_vfiprintf_r+0x208>
 800a16e:	bf00      	nop
 800a170:	0800b1d8 	.word	0x0800b1d8
 800a174:	0800b1f8 	.word	0x0800b1f8
 800a178:	0800b1b8 	.word	0x0800b1b8
 800a17c:	0800b1a4 	.word	0x0800b1a4
 800a180:	0800b1ae 	.word	0x0800b1ae
 800a184:	08006301 	.word	0x08006301
 800a188:	08009f0b 	.word	0x08009f0b
 800a18c:	0800b1aa 	.word	0x0800b1aa

0800a190 <nan>:
 800a190:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a198 <nan+0x8>
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	00000000 	.word	0x00000000
 800a19c:	7ff80000 	.word	0x7ff80000

0800a1a0 <strncmp>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	b17a      	cbz	r2, 800a1c4 <strncmp+0x24>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	3901      	subs	r1, #1
 800a1a8:	1884      	adds	r4, r0, r2
 800a1aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1b2:	4290      	cmp	r0, r2
 800a1b4:	d101      	bne.n	800a1ba <strncmp+0x1a>
 800a1b6:	42a3      	cmp	r3, r4
 800a1b8:	d101      	bne.n	800a1be <strncmp+0x1e>
 800a1ba:	1a80      	subs	r0, r0, r2
 800a1bc:	bd10      	pop	{r4, pc}
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d1f3      	bne.n	800a1aa <strncmp+0xa>
 800a1c2:	e7fa      	b.n	800a1ba <strncmp+0x1a>
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	e7f9      	b.n	800a1bc <strncmp+0x1c>

0800a1c8 <__swbuf_r>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	460e      	mov	r6, r1
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	b118      	cbz	r0, 800a1da <__swbuf_r+0x12>
 800a1d2:	6983      	ldr	r3, [r0, #24]
 800a1d4:	b90b      	cbnz	r3, 800a1da <__swbuf_r+0x12>
 800a1d6:	f000 f9e7 	bl	800a5a8 <__sinit>
 800a1da:	4b21      	ldr	r3, [pc, #132]	; (800a260 <__swbuf_r+0x98>)
 800a1dc:	429c      	cmp	r4, r3
 800a1de:	d12b      	bne.n	800a238 <__swbuf_r+0x70>
 800a1e0:	686c      	ldr	r4, [r5, #4]
 800a1e2:	69a3      	ldr	r3, [r4, #24]
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	071a      	lsls	r2, r3, #28
 800a1ea:	d52f      	bpl.n	800a24c <__swbuf_r+0x84>
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	b36b      	cbz	r3, 800a24c <__swbuf_r+0x84>
 800a1f0:	6923      	ldr	r3, [r4, #16]
 800a1f2:	6820      	ldr	r0, [r4, #0]
 800a1f4:	1ac0      	subs	r0, r0, r3
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	b2f6      	uxtb	r6, r6
 800a1fa:	4283      	cmp	r3, r0
 800a1fc:	4637      	mov	r7, r6
 800a1fe:	dc04      	bgt.n	800a20a <__swbuf_r+0x42>
 800a200:	4621      	mov	r1, r4
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f93c 	bl	800a480 <_fflush_r>
 800a208:	bb30      	cbnz	r0, 800a258 <__swbuf_r+0x90>
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	60a3      	str	r3, [r4, #8]
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	701e      	strb	r6, [r3, #0]
 800a218:	6963      	ldr	r3, [r4, #20]
 800a21a:	3001      	adds	r0, #1
 800a21c:	4283      	cmp	r3, r0
 800a21e:	d004      	beq.n	800a22a <__swbuf_r+0x62>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	07db      	lsls	r3, r3, #31
 800a224:	d506      	bpl.n	800a234 <__swbuf_r+0x6c>
 800a226:	2e0a      	cmp	r6, #10
 800a228:	d104      	bne.n	800a234 <__swbuf_r+0x6c>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 f927 	bl	800a480 <_fflush_r>
 800a232:	b988      	cbnz	r0, 800a258 <__swbuf_r+0x90>
 800a234:	4638      	mov	r0, r7
 800a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <__swbuf_r+0x9c>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d101      	bne.n	800a242 <__swbuf_r+0x7a>
 800a23e:	68ac      	ldr	r4, [r5, #8]
 800a240:	e7cf      	b.n	800a1e2 <__swbuf_r+0x1a>
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <__swbuf_r+0xa0>)
 800a244:	429c      	cmp	r4, r3
 800a246:	bf08      	it	eq
 800a248:	68ec      	ldreq	r4, [r5, #12]
 800a24a:	e7ca      	b.n	800a1e2 <__swbuf_r+0x1a>
 800a24c:	4621      	mov	r1, r4
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f81a 	bl	800a288 <__swsetup_r>
 800a254:	2800      	cmp	r0, #0
 800a256:	d0cb      	beq.n	800a1f0 <__swbuf_r+0x28>
 800a258:	f04f 37ff 	mov.w	r7, #4294967295
 800a25c:	e7ea      	b.n	800a234 <__swbuf_r+0x6c>
 800a25e:	bf00      	nop
 800a260:	0800b1d8 	.word	0x0800b1d8
 800a264:	0800b1f8 	.word	0x0800b1f8
 800a268:	0800b1b8 	.word	0x0800b1b8

0800a26c <__ascii_wctomb>:
 800a26c:	b149      	cbz	r1, 800a282 <__ascii_wctomb+0x16>
 800a26e:	2aff      	cmp	r2, #255	; 0xff
 800a270:	bf85      	ittet	hi
 800a272:	238a      	movhi	r3, #138	; 0x8a
 800a274:	6003      	strhi	r3, [r0, #0]
 800a276:	700a      	strbls	r2, [r1, #0]
 800a278:	f04f 30ff 	movhi.w	r0, #4294967295
 800a27c:	bf98      	it	ls
 800a27e:	2001      	movls	r0, #1
 800a280:	4770      	bx	lr
 800a282:	4608      	mov	r0, r1
 800a284:	4770      	bx	lr
	...

0800a288 <__swsetup_r>:
 800a288:	4b32      	ldr	r3, [pc, #200]	; (800a354 <__swsetup_r+0xcc>)
 800a28a:	b570      	push	{r4, r5, r6, lr}
 800a28c:	681d      	ldr	r5, [r3, #0]
 800a28e:	4606      	mov	r6, r0
 800a290:	460c      	mov	r4, r1
 800a292:	b125      	cbz	r5, 800a29e <__swsetup_r+0x16>
 800a294:	69ab      	ldr	r3, [r5, #24]
 800a296:	b913      	cbnz	r3, 800a29e <__swsetup_r+0x16>
 800a298:	4628      	mov	r0, r5
 800a29a:	f000 f985 	bl	800a5a8 <__sinit>
 800a29e:	4b2e      	ldr	r3, [pc, #184]	; (800a358 <__swsetup_r+0xd0>)
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	d10f      	bne.n	800a2c4 <__swsetup_r+0x3c>
 800a2a4:	686c      	ldr	r4, [r5, #4]
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2ac:	0719      	lsls	r1, r3, #28
 800a2ae:	d42c      	bmi.n	800a30a <__swsetup_r+0x82>
 800a2b0:	06dd      	lsls	r5, r3, #27
 800a2b2:	d411      	bmi.n	800a2d8 <__swsetup_r+0x50>
 800a2b4:	2309      	movs	r3, #9
 800a2b6:	6033      	str	r3, [r6, #0]
 800a2b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c2:	e03e      	b.n	800a342 <__swsetup_r+0xba>
 800a2c4:	4b25      	ldr	r3, [pc, #148]	; (800a35c <__swsetup_r+0xd4>)
 800a2c6:	429c      	cmp	r4, r3
 800a2c8:	d101      	bne.n	800a2ce <__swsetup_r+0x46>
 800a2ca:	68ac      	ldr	r4, [r5, #8]
 800a2cc:	e7eb      	b.n	800a2a6 <__swsetup_r+0x1e>
 800a2ce:	4b24      	ldr	r3, [pc, #144]	; (800a360 <__swsetup_r+0xd8>)
 800a2d0:	429c      	cmp	r4, r3
 800a2d2:	bf08      	it	eq
 800a2d4:	68ec      	ldreq	r4, [r5, #12]
 800a2d6:	e7e6      	b.n	800a2a6 <__swsetup_r+0x1e>
 800a2d8:	0758      	lsls	r0, r3, #29
 800a2da:	d512      	bpl.n	800a302 <__swsetup_r+0x7a>
 800a2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2de:	b141      	cbz	r1, 800a2f2 <__swsetup_r+0x6a>
 800a2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2e4:	4299      	cmp	r1, r3
 800a2e6:	d002      	beq.n	800a2ee <__swsetup_r+0x66>
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f7fb fe89 	bl	8006000 <_free_r>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	6363      	str	r3, [r4, #52]	; 0x34
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	6063      	str	r3, [r4, #4]
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	f043 0308 	orr.w	r3, r3, #8
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	b94b      	cbnz	r3, 800a322 <__swsetup_r+0x9a>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a318:	d003      	beq.n	800a322 <__swsetup_r+0x9a>
 800a31a:	4621      	mov	r1, r4
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 fa09 	bl	800a734 <__smakebuf_r>
 800a322:	89a0      	ldrh	r0, [r4, #12]
 800a324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a328:	f010 0301 	ands.w	r3, r0, #1
 800a32c:	d00a      	beq.n	800a344 <__swsetup_r+0xbc>
 800a32e:	2300      	movs	r3, #0
 800a330:	60a3      	str	r3, [r4, #8]
 800a332:	6963      	ldr	r3, [r4, #20]
 800a334:	425b      	negs	r3, r3
 800a336:	61a3      	str	r3, [r4, #24]
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	b943      	cbnz	r3, 800a34e <__swsetup_r+0xc6>
 800a33c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a340:	d1ba      	bne.n	800a2b8 <__swsetup_r+0x30>
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	0781      	lsls	r1, r0, #30
 800a346:	bf58      	it	pl
 800a348:	6963      	ldrpl	r3, [r4, #20]
 800a34a:	60a3      	str	r3, [r4, #8]
 800a34c:	e7f4      	b.n	800a338 <__swsetup_r+0xb0>
 800a34e:	2000      	movs	r0, #0
 800a350:	e7f7      	b.n	800a342 <__swsetup_r+0xba>
 800a352:	bf00      	nop
 800a354:	2000000c 	.word	0x2000000c
 800a358:	0800b1d8 	.word	0x0800b1d8
 800a35c:	0800b1f8 	.word	0x0800b1f8
 800a360:	0800b1b8 	.word	0x0800b1b8

0800a364 <abort>:
 800a364:	b508      	push	{r3, lr}
 800a366:	2006      	movs	r0, #6
 800a368:	f000 fa96 	bl	800a898 <raise>
 800a36c:	2001      	movs	r0, #1
 800a36e:	f7f7 f891 	bl	8001494 <_exit>
	...

0800a374 <__sflush_r>:
 800a374:	898a      	ldrh	r2, [r1, #12]
 800a376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37a:	4605      	mov	r5, r0
 800a37c:	0710      	lsls	r0, r2, #28
 800a37e:	460c      	mov	r4, r1
 800a380:	d458      	bmi.n	800a434 <__sflush_r+0xc0>
 800a382:	684b      	ldr	r3, [r1, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	dc05      	bgt.n	800a394 <__sflush_r+0x20>
 800a388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dc02      	bgt.n	800a394 <__sflush_r+0x20>
 800a38e:	2000      	movs	r0, #0
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a396:	2e00      	cmp	r6, #0
 800a398:	d0f9      	beq.n	800a38e <__sflush_r+0x1a>
 800a39a:	2300      	movs	r3, #0
 800a39c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3a0:	682f      	ldr	r7, [r5, #0]
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	d032      	beq.n	800a40c <__sflush_r+0x98>
 800a3a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	075a      	lsls	r2, r3, #29
 800a3ac:	d505      	bpl.n	800a3ba <__sflush_r+0x46>
 800a3ae:	6863      	ldr	r3, [r4, #4]
 800a3b0:	1ac0      	subs	r0, r0, r3
 800a3b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3b4:	b10b      	cbz	r3, 800a3ba <__sflush_r+0x46>
 800a3b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3b8:	1ac0      	subs	r0, r0, r3
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4602      	mov	r2, r0
 800a3be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c0:	6a21      	ldr	r1, [r4, #32]
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	47b0      	blx	r6
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	d106      	bne.n	800a3da <__sflush_r+0x66>
 800a3cc:	6829      	ldr	r1, [r5, #0]
 800a3ce:	291d      	cmp	r1, #29
 800a3d0:	d82c      	bhi.n	800a42c <__sflush_r+0xb8>
 800a3d2:	4a2a      	ldr	r2, [pc, #168]	; (800a47c <__sflush_r+0x108>)
 800a3d4:	40ca      	lsrs	r2, r1
 800a3d6:	07d6      	lsls	r6, r2, #31
 800a3d8:	d528      	bpl.n	800a42c <__sflush_r+0xb8>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	6062      	str	r2, [r4, #4]
 800a3de:	04d9      	lsls	r1, r3, #19
 800a3e0:	6922      	ldr	r2, [r4, #16]
 800a3e2:	6022      	str	r2, [r4, #0]
 800a3e4:	d504      	bpl.n	800a3f0 <__sflush_r+0x7c>
 800a3e6:	1c42      	adds	r2, r0, #1
 800a3e8:	d101      	bne.n	800a3ee <__sflush_r+0x7a>
 800a3ea:	682b      	ldr	r3, [r5, #0]
 800a3ec:	b903      	cbnz	r3, 800a3f0 <__sflush_r+0x7c>
 800a3ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a3f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f2:	602f      	str	r7, [r5, #0]
 800a3f4:	2900      	cmp	r1, #0
 800a3f6:	d0ca      	beq.n	800a38e <__sflush_r+0x1a>
 800a3f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3fc:	4299      	cmp	r1, r3
 800a3fe:	d002      	beq.n	800a406 <__sflush_r+0x92>
 800a400:	4628      	mov	r0, r5
 800a402:	f7fb fdfd 	bl	8006000 <_free_r>
 800a406:	2000      	movs	r0, #0
 800a408:	6360      	str	r0, [r4, #52]	; 0x34
 800a40a:	e7c1      	b.n	800a390 <__sflush_r+0x1c>
 800a40c:	6a21      	ldr	r1, [r4, #32]
 800a40e:	2301      	movs	r3, #1
 800a410:	4628      	mov	r0, r5
 800a412:	47b0      	blx	r6
 800a414:	1c41      	adds	r1, r0, #1
 800a416:	d1c7      	bne.n	800a3a8 <__sflush_r+0x34>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0c4      	beq.n	800a3a8 <__sflush_r+0x34>
 800a41e:	2b1d      	cmp	r3, #29
 800a420:	d001      	beq.n	800a426 <__sflush_r+0xb2>
 800a422:	2b16      	cmp	r3, #22
 800a424:	d101      	bne.n	800a42a <__sflush_r+0xb6>
 800a426:	602f      	str	r7, [r5, #0]
 800a428:	e7b1      	b.n	800a38e <__sflush_r+0x1a>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a430:	81a3      	strh	r3, [r4, #12]
 800a432:	e7ad      	b.n	800a390 <__sflush_r+0x1c>
 800a434:	690f      	ldr	r7, [r1, #16]
 800a436:	2f00      	cmp	r7, #0
 800a438:	d0a9      	beq.n	800a38e <__sflush_r+0x1a>
 800a43a:	0793      	lsls	r3, r2, #30
 800a43c:	680e      	ldr	r6, [r1, #0]
 800a43e:	bf08      	it	eq
 800a440:	694b      	ldreq	r3, [r1, #20]
 800a442:	600f      	str	r7, [r1, #0]
 800a444:	bf18      	it	ne
 800a446:	2300      	movne	r3, #0
 800a448:	eba6 0807 	sub.w	r8, r6, r7
 800a44c:	608b      	str	r3, [r1, #8]
 800a44e:	f1b8 0f00 	cmp.w	r8, #0
 800a452:	dd9c      	ble.n	800a38e <__sflush_r+0x1a>
 800a454:	6a21      	ldr	r1, [r4, #32]
 800a456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a458:	4643      	mov	r3, r8
 800a45a:	463a      	mov	r2, r7
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b0      	blx	r6
 800a460:	2800      	cmp	r0, #0
 800a462:	dc06      	bgt.n	800a472 <__sflush_r+0xfe>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e78e      	b.n	800a390 <__sflush_r+0x1c>
 800a472:	4407      	add	r7, r0
 800a474:	eba8 0800 	sub.w	r8, r8, r0
 800a478:	e7e9      	b.n	800a44e <__sflush_r+0xda>
 800a47a:	bf00      	nop
 800a47c:	20400001 	.word	0x20400001

0800a480 <_fflush_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	690b      	ldr	r3, [r1, #16]
 800a484:	4605      	mov	r5, r0
 800a486:	460c      	mov	r4, r1
 800a488:	b913      	cbnz	r3, 800a490 <_fflush_r+0x10>
 800a48a:	2500      	movs	r5, #0
 800a48c:	4628      	mov	r0, r5
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	b118      	cbz	r0, 800a49a <_fflush_r+0x1a>
 800a492:	6983      	ldr	r3, [r0, #24]
 800a494:	b90b      	cbnz	r3, 800a49a <_fflush_r+0x1a>
 800a496:	f000 f887 	bl	800a5a8 <__sinit>
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <_fflush_r+0x6c>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d11b      	bne.n	800a4d8 <_fflush_r+0x58>
 800a4a0:	686c      	ldr	r4, [r5, #4]
 800a4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0ef      	beq.n	800a48a <_fflush_r+0xa>
 800a4aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4ac:	07d0      	lsls	r0, r2, #31
 800a4ae:	d404      	bmi.n	800a4ba <_fflush_r+0x3a>
 800a4b0:	0599      	lsls	r1, r3, #22
 800a4b2:	d402      	bmi.n	800a4ba <_fflush_r+0x3a>
 800a4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4b6:	f000 f915 	bl	800a6e4 <__retarget_lock_acquire_recursive>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	4621      	mov	r1, r4
 800a4be:	f7ff ff59 	bl	800a374 <__sflush_r>
 800a4c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4c4:	07da      	lsls	r2, r3, #31
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	d4e0      	bmi.n	800a48c <_fflush_r+0xc>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	059b      	lsls	r3, r3, #22
 800a4ce:	d4dd      	bmi.n	800a48c <_fflush_r+0xc>
 800a4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4d2:	f000 f908 	bl	800a6e6 <__retarget_lock_release_recursive>
 800a4d6:	e7d9      	b.n	800a48c <_fflush_r+0xc>
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <_fflush_r+0x70>)
 800a4da:	429c      	cmp	r4, r3
 800a4dc:	d101      	bne.n	800a4e2 <_fflush_r+0x62>
 800a4de:	68ac      	ldr	r4, [r5, #8]
 800a4e0:	e7df      	b.n	800a4a2 <_fflush_r+0x22>
 800a4e2:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <_fflush_r+0x74>)
 800a4e4:	429c      	cmp	r4, r3
 800a4e6:	bf08      	it	eq
 800a4e8:	68ec      	ldreq	r4, [r5, #12]
 800a4ea:	e7da      	b.n	800a4a2 <_fflush_r+0x22>
 800a4ec:	0800b1d8 	.word	0x0800b1d8
 800a4f0:	0800b1f8 	.word	0x0800b1f8
 800a4f4:	0800b1b8 	.word	0x0800b1b8

0800a4f8 <std>:
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a506:	6083      	str	r3, [r0, #8]
 800a508:	8181      	strh	r1, [r0, #12]
 800a50a:	6643      	str	r3, [r0, #100]	; 0x64
 800a50c:	81c2      	strh	r2, [r0, #14]
 800a50e:	6183      	str	r3, [r0, #24]
 800a510:	4619      	mov	r1, r3
 800a512:	2208      	movs	r2, #8
 800a514:	305c      	adds	r0, #92	; 0x5c
 800a516:	f7fb fd6b 	bl	8005ff0 <memset>
 800a51a:	4b05      	ldr	r3, [pc, #20]	; (800a530 <std+0x38>)
 800a51c:	6263      	str	r3, [r4, #36]	; 0x24
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <std+0x3c>)
 800a520:	62a3      	str	r3, [r4, #40]	; 0x28
 800a522:	4b05      	ldr	r3, [pc, #20]	; (800a538 <std+0x40>)
 800a524:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <std+0x44>)
 800a528:	6224      	str	r4, [r4, #32]
 800a52a:	6323      	str	r3, [r4, #48]	; 0x30
 800a52c:	bd10      	pop	{r4, pc}
 800a52e:	bf00      	nop
 800a530:	0800a8d1 	.word	0x0800a8d1
 800a534:	0800a8f3 	.word	0x0800a8f3
 800a538:	0800a92b 	.word	0x0800a92b
 800a53c:	0800a94f 	.word	0x0800a94f

0800a540 <_cleanup_r>:
 800a540:	4901      	ldr	r1, [pc, #4]	; (800a548 <_cleanup_r+0x8>)
 800a542:	f000 b8af 	b.w	800a6a4 <_fwalk_reent>
 800a546:	bf00      	nop
 800a548:	0800a481 	.word	0x0800a481

0800a54c <__sfmoreglue>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	2268      	movs	r2, #104	; 0x68
 800a550:	1e4d      	subs	r5, r1, #1
 800a552:	4355      	muls	r5, r2
 800a554:	460e      	mov	r6, r1
 800a556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a55a:	f7fb fdbd 	bl	80060d8 <_malloc_r>
 800a55e:	4604      	mov	r4, r0
 800a560:	b140      	cbz	r0, 800a574 <__sfmoreglue+0x28>
 800a562:	2100      	movs	r1, #0
 800a564:	e9c0 1600 	strd	r1, r6, [r0]
 800a568:	300c      	adds	r0, #12
 800a56a:	60a0      	str	r0, [r4, #8]
 800a56c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a570:	f7fb fd3e 	bl	8005ff0 <memset>
 800a574:	4620      	mov	r0, r4
 800a576:	bd70      	pop	{r4, r5, r6, pc}

0800a578 <__sfp_lock_acquire>:
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <__sfp_lock_acquire+0x8>)
 800a57a:	f000 b8b3 	b.w	800a6e4 <__retarget_lock_acquire_recursive>
 800a57e:	bf00      	nop
 800a580:	200005b9 	.word	0x200005b9

0800a584 <__sfp_lock_release>:
 800a584:	4801      	ldr	r0, [pc, #4]	; (800a58c <__sfp_lock_release+0x8>)
 800a586:	f000 b8ae 	b.w	800a6e6 <__retarget_lock_release_recursive>
 800a58a:	bf00      	nop
 800a58c:	200005b9 	.word	0x200005b9

0800a590 <__sinit_lock_acquire>:
 800a590:	4801      	ldr	r0, [pc, #4]	; (800a598 <__sinit_lock_acquire+0x8>)
 800a592:	f000 b8a7 	b.w	800a6e4 <__retarget_lock_acquire_recursive>
 800a596:	bf00      	nop
 800a598:	200005ba 	.word	0x200005ba

0800a59c <__sinit_lock_release>:
 800a59c:	4801      	ldr	r0, [pc, #4]	; (800a5a4 <__sinit_lock_release+0x8>)
 800a59e:	f000 b8a2 	b.w	800a6e6 <__retarget_lock_release_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	200005ba 	.word	0x200005ba

0800a5a8 <__sinit>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	f7ff fff0 	bl	800a590 <__sinit_lock_acquire>
 800a5b0:	69a3      	ldr	r3, [r4, #24]
 800a5b2:	b11b      	cbz	r3, 800a5bc <__sinit+0x14>
 800a5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b8:	f7ff bff0 	b.w	800a59c <__sinit_lock_release>
 800a5bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5c0:	6523      	str	r3, [r4, #80]	; 0x50
 800a5c2:	4b13      	ldr	r3, [pc, #76]	; (800a610 <__sinit+0x68>)
 800a5c4:	4a13      	ldr	r2, [pc, #76]	; (800a614 <__sinit+0x6c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	bf04      	itt	eq
 800a5ce:	2301      	moveq	r3, #1
 800a5d0:	61a3      	streq	r3, [r4, #24]
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f000 f820 	bl	800a618 <__sfp>
 800a5d8:	6060      	str	r0, [r4, #4]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 f81c 	bl	800a618 <__sfp>
 800a5e0:	60a0      	str	r0, [r4, #8]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 f818 	bl	800a618 <__sfp>
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	60e0      	str	r0, [r4, #12]
 800a5ec:	2104      	movs	r1, #4
 800a5ee:	6860      	ldr	r0, [r4, #4]
 800a5f0:	f7ff ff82 	bl	800a4f8 <std>
 800a5f4:	68a0      	ldr	r0, [r4, #8]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	2109      	movs	r1, #9
 800a5fa:	f7ff ff7d 	bl	800a4f8 <std>
 800a5fe:	68e0      	ldr	r0, [r4, #12]
 800a600:	2202      	movs	r2, #2
 800a602:	2112      	movs	r1, #18
 800a604:	f7ff ff78 	bl	800a4f8 <std>
 800a608:	2301      	movs	r3, #1
 800a60a:	61a3      	str	r3, [r4, #24]
 800a60c:	e7d2      	b.n	800a5b4 <__sinit+0xc>
 800a60e:	bf00      	nop
 800a610:	0800ae14 	.word	0x0800ae14
 800a614:	0800a541 	.word	0x0800a541

0800a618 <__sfp>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	4607      	mov	r7, r0
 800a61c:	f7ff ffac 	bl	800a578 <__sfp_lock_acquire>
 800a620:	4b1e      	ldr	r3, [pc, #120]	; (800a69c <__sfp+0x84>)
 800a622:	681e      	ldr	r6, [r3, #0]
 800a624:	69b3      	ldr	r3, [r6, #24]
 800a626:	b913      	cbnz	r3, 800a62e <__sfp+0x16>
 800a628:	4630      	mov	r0, r6
 800a62a:	f7ff ffbd 	bl	800a5a8 <__sinit>
 800a62e:	3648      	adds	r6, #72	; 0x48
 800a630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a634:	3b01      	subs	r3, #1
 800a636:	d503      	bpl.n	800a640 <__sfp+0x28>
 800a638:	6833      	ldr	r3, [r6, #0]
 800a63a:	b30b      	cbz	r3, 800a680 <__sfp+0x68>
 800a63c:	6836      	ldr	r6, [r6, #0]
 800a63e:	e7f7      	b.n	800a630 <__sfp+0x18>
 800a640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a644:	b9d5      	cbnz	r5, 800a67c <__sfp+0x64>
 800a646:	4b16      	ldr	r3, [pc, #88]	; (800a6a0 <__sfp+0x88>)
 800a648:	60e3      	str	r3, [r4, #12]
 800a64a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a64e:	6665      	str	r5, [r4, #100]	; 0x64
 800a650:	f000 f847 	bl	800a6e2 <__retarget_lock_init_recursive>
 800a654:	f7ff ff96 	bl	800a584 <__sfp_lock_release>
 800a658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a65c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a660:	6025      	str	r5, [r4, #0]
 800a662:	61a5      	str	r5, [r4, #24]
 800a664:	2208      	movs	r2, #8
 800a666:	4629      	mov	r1, r5
 800a668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a66c:	f7fb fcc0 	bl	8005ff0 <memset>
 800a670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a678:	4620      	mov	r0, r4
 800a67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a67c:	3468      	adds	r4, #104	; 0x68
 800a67e:	e7d9      	b.n	800a634 <__sfp+0x1c>
 800a680:	2104      	movs	r1, #4
 800a682:	4638      	mov	r0, r7
 800a684:	f7ff ff62 	bl	800a54c <__sfmoreglue>
 800a688:	4604      	mov	r4, r0
 800a68a:	6030      	str	r0, [r6, #0]
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d1d5      	bne.n	800a63c <__sfp+0x24>
 800a690:	f7ff ff78 	bl	800a584 <__sfp_lock_release>
 800a694:	230c      	movs	r3, #12
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	e7ee      	b.n	800a678 <__sfp+0x60>
 800a69a:	bf00      	nop
 800a69c:	0800ae14 	.word	0x0800ae14
 800a6a0:	ffff0001 	.word	0xffff0001

0800a6a4 <_fwalk_reent>:
 800a6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	4688      	mov	r8, r1
 800a6ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6b0:	2700      	movs	r7, #0
 800a6b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6b6:	f1b9 0901 	subs.w	r9, r9, #1
 800a6ba:	d505      	bpl.n	800a6c8 <_fwalk_reent+0x24>
 800a6bc:	6824      	ldr	r4, [r4, #0]
 800a6be:	2c00      	cmp	r4, #0
 800a6c0:	d1f7      	bne.n	800a6b2 <_fwalk_reent+0xe>
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c8:	89ab      	ldrh	r3, [r5, #12]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d907      	bls.n	800a6de <_fwalk_reent+0x3a>
 800a6ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	d003      	beq.n	800a6de <_fwalk_reent+0x3a>
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4630      	mov	r0, r6
 800a6da:	47c0      	blx	r8
 800a6dc:	4307      	orrs	r7, r0
 800a6de:	3568      	adds	r5, #104	; 0x68
 800a6e0:	e7e9      	b.n	800a6b6 <_fwalk_reent+0x12>

0800a6e2 <__retarget_lock_init_recursive>:
 800a6e2:	4770      	bx	lr

0800a6e4 <__retarget_lock_acquire_recursive>:
 800a6e4:	4770      	bx	lr

0800a6e6 <__retarget_lock_release_recursive>:
 800a6e6:	4770      	bx	lr

0800a6e8 <__swhatbuf_r>:
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	460e      	mov	r6, r1
 800a6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	b096      	sub	sp, #88	; 0x58
 800a6f4:	4614      	mov	r4, r2
 800a6f6:	461d      	mov	r5, r3
 800a6f8:	da08      	bge.n	800a70c <__swhatbuf_r+0x24>
 800a6fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	061a      	lsls	r2, r3, #24
 800a704:	d410      	bmi.n	800a728 <__swhatbuf_r+0x40>
 800a706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a70a:	e00e      	b.n	800a72a <__swhatbuf_r+0x42>
 800a70c:	466a      	mov	r2, sp
 800a70e:	f000 f945 	bl	800a99c <_fstat_r>
 800a712:	2800      	cmp	r0, #0
 800a714:	dbf1      	blt.n	800a6fa <__swhatbuf_r+0x12>
 800a716:	9a01      	ldr	r2, [sp, #4]
 800a718:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a71c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a720:	425a      	negs	r2, r3
 800a722:	415a      	adcs	r2, r3
 800a724:	602a      	str	r2, [r5, #0]
 800a726:	e7ee      	b.n	800a706 <__swhatbuf_r+0x1e>
 800a728:	2340      	movs	r3, #64	; 0x40
 800a72a:	2000      	movs	r0, #0
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	b016      	add	sp, #88	; 0x58
 800a730:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a734 <__smakebuf_r>:
 800a734:	898b      	ldrh	r3, [r1, #12]
 800a736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a738:	079d      	lsls	r5, r3, #30
 800a73a:	4606      	mov	r6, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	d507      	bpl.n	800a750 <__smakebuf_r+0x1c>
 800a740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	6123      	str	r3, [r4, #16]
 800a748:	2301      	movs	r3, #1
 800a74a:	6163      	str	r3, [r4, #20]
 800a74c:	b002      	add	sp, #8
 800a74e:	bd70      	pop	{r4, r5, r6, pc}
 800a750:	ab01      	add	r3, sp, #4
 800a752:	466a      	mov	r2, sp
 800a754:	f7ff ffc8 	bl	800a6e8 <__swhatbuf_r>
 800a758:	9900      	ldr	r1, [sp, #0]
 800a75a:	4605      	mov	r5, r0
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7fb fcbb 	bl	80060d8 <_malloc_r>
 800a762:	b948      	cbnz	r0, 800a778 <__smakebuf_r+0x44>
 800a764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a768:	059a      	lsls	r2, r3, #22
 800a76a:	d4ef      	bmi.n	800a74c <__smakebuf_r+0x18>
 800a76c:	f023 0303 	bic.w	r3, r3, #3
 800a770:	f043 0302 	orr.w	r3, r3, #2
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	e7e3      	b.n	800a740 <__smakebuf_r+0xc>
 800a778:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <__smakebuf_r+0x7c>)
 800a77a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	6020      	str	r0, [r4, #0]
 800a780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a784:	81a3      	strh	r3, [r4, #12]
 800a786:	9b00      	ldr	r3, [sp, #0]
 800a788:	6163      	str	r3, [r4, #20]
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	6120      	str	r0, [r4, #16]
 800a78e:	b15b      	cbz	r3, 800a7a8 <__smakebuf_r+0x74>
 800a790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a794:	4630      	mov	r0, r6
 800a796:	f000 f913 	bl	800a9c0 <_isatty_r>
 800a79a:	b128      	cbz	r0, 800a7a8 <__smakebuf_r+0x74>
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	f043 0301 	orr.w	r3, r3, #1
 800a7a6:	81a3      	strh	r3, [r4, #12]
 800a7a8:	89a0      	ldrh	r0, [r4, #12]
 800a7aa:	4305      	orrs	r5, r0
 800a7ac:	81a5      	strh	r5, [r4, #12]
 800a7ae:	e7cd      	b.n	800a74c <__smakebuf_r+0x18>
 800a7b0:	0800a541 	.word	0x0800a541

0800a7b4 <memmove>:
 800a7b4:	4288      	cmp	r0, r1
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	eb01 0402 	add.w	r4, r1, r2
 800a7bc:	d902      	bls.n	800a7c4 <memmove+0x10>
 800a7be:	4284      	cmp	r4, r0
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	d807      	bhi.n	800a7d4 <memmove+0x20>
 800a7c4:	1e43      	subs	r3, r0, #1
 800a7c6:	42a1      	cmp	r1, r4
 800a7c8:	d008      	beq.n	800a7dc <memmove+0x28>
 800a7ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7d2:	e7f8      	b.n	800a7c6 <memmove+0x12>
 800a7d4:	4402      	add	r2, r0
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	428a      	cmp	r2, r1
 800a7da:	d100      	bne.n	800a7de <memmove+0x2a>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7e6:	e7f7      	b.n	800a7d8 <memmove+0x24>

0800a7e8 <_realloc_r>:
 800a7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4614      	mov	r4, r2
 800a7f0:	460e      	mov	r6, r1
 800a7f2:	b921      	cbnz	r1, 800a7fe <_realloc_r+0x16>
 800a7f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	f7fb bc6d 	b.w	80060d8 <_malloc_r>
 800a7fe:	b92a      	cbnz	r2, 800a80c <_realloc_r+0x24>
 800a800:	f7fb fbfe 	bl	8006000 <_free_r>
 800a804:	4625      	mov	r5, r4
 800a806:	4628      	mov	r0, r5
 800a808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a80c:	f000 f8fa 	bl	800aa04 <_malloc_usable_size_r>
 800a810:	4284      	cmp	r4, r0
 800a812:	4607      	mov	r7, r0
 800a814:	d802      	bhi.n	800a81c <_realloc_r+0x34>
 800a816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a81a:	d812      	bhi.n	800a842 <_realloc_r+0x5a>
 800a81c:	4621      	mov	r1, r4
 800a81e:	4640      	mov	r0, r8
 800a820:	f7fb fc5a 	bl	80060d8 <_malloc_r>
 800a824:	4605      	mov	r5, r0
 800a826:	2800      	cmp	r0, #0
 800a828:	d0ed      	beq.n	800a806 <_realloc_r+0x1e>
 800a82a:	42bc      	cmp	r4, r7
 800a82c:	4622      	mov	r2, r4
 800a82e:	4631      	mov	r1, r6
 800a830:	bf28      	it	cs
 800a832:	463a      	movcs	r2, r7
 800a834:	f7fe fd06 	bl	8009244 <memcpy>
 800a838:	4631      	mov	r1, r6
 800a83a:	4640      	mov	r0, r8
 800a83c:	f7fb fbe0 	bl	8006000 <_free_r>
 800a840:	e7e1      	b.n	800a806 <_realloc_r+0x1e>
 800a842:	4635      	mov	r5, r6
 800a844:	e7df      	b.n	800a806 <_realloc_r+0x1e>

0800a846 <_raise_r>:
 800a846:	291f      	cmp	r1, #31
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4604      	mov	r4, r0
 800a84c:	460d      	mov	r5, r1
 800a84e:	d904      	bls.n	800a85a <_raise_r+0x14>
 800a850:	2316      	movs	r3, #22
 800a852:	6003      	str	r3, [r0, #0]
 800a854:	f04f 30ff 	mov.w	r0, #4294967295
 800a858:	bd38      	pop	{r3, r4, r5, pc}
 800a85a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a85c:	b112      	cbz	r2, 800a864 <_raise_r+0x1e>
 800a85e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a862:	b94b      	cbnz	r3, 800a878 <_raise_r+0x32>
 800a864:	4620      	mov	r0, r4
 800a866:	f000 f831 	bl	800a8cc <_getpid_r>
 800a86a:	462a      	mov	r2, r5
 800a86c:	4601      	mov	r1, r0
 800a86e:	4620      	mov	r0, r4
 800a870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a874:	f000 b818 	b.w	800a8a8 <_kill_r>
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d00a      	beq.n	800a892 <_raise_r+0x4c>
 800a87c:	1c59      	adds	r1, r3, #1
 800a87e:	d103      	bne.n	800a888 <_raise_r+0x42>
 800a880:	2316      	movs	r3, #22
 800a882:	6003      	str	r3, [r0, #0]
 800a884:	2001      	movs	r0, #1
 800a886:	e7e7      	b.n	800a858 <_raise_r+0x12>
 800a888:	2400      	movs	r4, #0
 800a88a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a88e:	4628      	mov	r0, r5
 800a890:	4798      	blx	r3
 800a892:	2000      	movs	r0, #0
 800a894:	e7e0      	b.n	800a858 <_raise_r+0x12>
	...

0800a898 <raise>:
 800a898:	4b02      	ldr	r3, [pc, #8]	; (800a8a4 <raise+0xc>)
 800a89a:	4601      	mov	r1, r0
 800a89c:	6818      	ldr	r0, [r3, #0]
 800a89e:	f7ff bfd2 	b.w	800a846 <_raise_r>
 800a8a2:	bf00      	nop
 800a8a4:	2000000c 	.word	0x2000000c

0800a8a8 <_kill_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d07      	ldr	r5, [pc, #28]	; (800a8c8 <_kill_r+0x20>)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	f7f6 fddd 	bl	8001474 <_kill>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	d102      	bne.n	800a8c4 <_kill_r+0x1c>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	b103      	cbz	r3, 800a8c4 <_kill_r+0x1c>
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	bd38      	pop	{r3, r4, r5, pc}
 800a8c6:	bf00      	nop
 800a8c8:	200005b4 	.word	0x200005b4

0800a8cc <_getpid_r>:
 800a8cc:	f7f6 bdca 	b.w	8001464 <_getpid>

0800a8d0 <__sread>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d8:	f000 f89c 	bl	800aa14 <_read_r>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	bfab      	itete	ge
 800a8e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e4:	181b      	addge	r3, r3, r0
 800a8e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8ea:	bfac      	ite	ge
 800a8ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8ee:	81a3      	strhlt	r3, [r4, #12]
 800a8f0:	bd10      	pop	{r4, pc}

0800a8f2 <__swrite>:
 800a8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f6:	461f      	mov	r7, r3
 800a8f8:	898b      	ldrh	r3, [r1, #12]
 800a8fa:	05db      	lsls	r3, r3, #23
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	4616      	mov	r6, r2
 800a902:	d505      	bpl.n	800a910 <__swrite+0x1e>
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	2302      	movs	r3, #2
 800a90a:	2200      	movs	r2, #0
 800a90c:	f000 f868 	bl	800a9e0 <_lseek_r>
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	4632      	mov	r2, r6
 800a91e:	463b      	mov	r3, r7
 800a920:	4628      	mov	r0, r5
 800a922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a926:	f000 b817 	b.w	800a958 <_write_r>

0800a92a <__sseek>:
 800a92a:	b510      	push	{r4, lr}
 800a92c:	460c      	mov	r4, r1
 800a92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a932:	f000 f855 	bl	800a9e0 <_lseek_r>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	bf15      	itete	ne
 800a93c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a93e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a946:	81a3      	strheq	r3, [r4, #12]
 800a948:	bf18      	it	ne
 800a94a:	81a3      	strhne	r3, [r4, #12]
 800a94c:	bd10      	pop	{r4, pc}

0800a94e <__sclose>:
 800a94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a952:	f000 b813 	b.w	800a97c <_close_r>
	...

0800a958 <_write_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d07      	ldr	r5, [pc, #28]	; (800a978 <_write_r+0x20>)
 800a95c:	4604      	mov	r4, r0
 800a95e:	4608      	mov	r0, r1
 800a960:	4611      	mov	r1, r2
 800a962:	2200      	movs	r2, #0
 800a964:	602a      	str	r2, [r5, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	f7f6 fdbb 	bl	80014e2 <_write>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_write_r+0x1e>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_write_r+0x1e>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	200005b4 	.word	0x200005b4

0800a97c <_close_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d06      	ldr	r5, [pc, #24]	; (800a998 <_close_r+0x1c>)
 800a980:	2300      	movs	r3, #0
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	602b      	str	r3, [r5, #0]
 800a988:	f7f6 fdc7 	bl	800151a <_close>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_close_r+0x1a>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_close_r+0x1a>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	200005b4 	.word	0x200005b4

0800a99c <_fstat_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	4d07      	ldr	r5, [pc, #28]	; (800a9bc <_fstat_r+0x20>)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	602b      	str	r3, [r5, #0]
 800a9aa:	f7f6 fdc2 	bl	8001532 <_fstat>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d102      	bne.n	800a9b8 <_fstat_r+0x1c>
 800a9b2:	682b      	ldr	r3, [r5, #0]
 800a9b4:	b103      	cbz	r3, 800a9b8 <_fstat_r+0x1c>
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	bf00      	nop
 800a9bc:	200005b4 	.word	0x200005b4

0800a9c0 <_isatty_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d06      	ldr	r5, [pc, #24]	; (800a9dc <_isatty_r+0x1c>)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f7f6 fdc1 	bl	8001552 <_isatty>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_isatty_r+0x1a>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_isatty_r+0x1a>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	200005b4 	.word	0x200005b4

0800a9e0 <_lseek_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d07      	ldr	r5, [pc, #28]	; (800aa00 <_lseek_r+0x20>)
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	602a      	str	r2, [r5, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f7f6 fdba 	bl	8001568 <_lseek>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_lseek_r+0x1e>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_lseek_r+0x1e>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	200005b4 	.word	0x200005b4

0800aa04 <_malloc_usable_size_r>:
 800aa04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa08:	1f18      	subs	r0, r3, #4
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	bfbc      	itt	lt
 800aa0e:	580b      	ldrlt	r3, [r1, r0]
 800aa10:	18c0      	addlt	r0, r0, r3
 800aa12:	4770      	bx	lr

0800aa14 <_read_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4d07      	ldr	r5, [pc, #28]	; (800aa34 <_read_r+0x20>)
 800aa18:	4604      	mov	r4, r0
 800aa1a:	4608      	mov	r0, r1
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	2200      	movs	r2, #0
 800aa20:	602a      	str	r2, [r5, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	f7f6 fd40 	bl	80014a8 <_read>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_read_r+0x1e>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_read_r+0x1e>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	200005b4 	.word	0x200005b4

0800aa38 <_init>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr

0800aa44 <_fini>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	bf00      	nop
 800aa48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4a:	bc08      	pop	{r3}
 800aa4c:	469e      	mov	lr, r3
 800aa4e:	4770      	bx	lr

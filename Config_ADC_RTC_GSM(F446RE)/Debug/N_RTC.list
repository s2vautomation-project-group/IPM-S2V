
N_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ced0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  0800d0a0  0800d0a0  0001d0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d848  0800d848  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d848  0800d848  0001d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d850  0800d850  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d854  0800d854  0001d854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001e0  0800da38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800da38  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136a9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328b  00000000  00000000  000338b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00036b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000379d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264ac  00000000  00000000  000386f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c61  00000000  00000000  0005eba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9c59  00000000  00000000  00076805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015045e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe4  00000000  00000000  001504b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d088 	.word	0x0800d088

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d088 	.word	0x0800d088

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <application>:
#include "app_config.h"
#include "com_config.h"
struct data d;

void application(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	Configurator();
 800105c:	f000 fa4a 	bl	80014f4 <Configurator>
//	strcpy(d.CH4, "ADC4");
//	strcpy(d.Status1, "GPIO1");
//	strcpy(d.Status2, "GPIO2");
//	strcpy(d.Status3, "GPIO3");
//	strcpy(d.Status4, "GPIO4");
	get_time(&d);
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <application+0x24>)
 8001062:	f000 f9f7 	bl	8001454 <get_time>
    ADC_handler(&d);
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <application+0x24>)
 8001068:	f000 f830 	bl	80010cc <ADC_handler>
	DataToGsm(&d);
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <application+0x24>)
 800106e:	f000 f88b 	bl	8001188 <DataToGsm>
	terminal(&d);
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <application+0x24>)
 8001074:	f000 fd32 	bl	8001adc <terminal>


}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001fc 	.word	0x200001fc

08001080 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 8001084:	f000 fe60 	bl	8001d48 <adc_value>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <voltage_cal+0x48>)
 800108e:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <voltage_cal+0x48>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa75 	bl	8000584 <__aeabi_i2d>
 800109a:	a309      	add	r3, pc, #36	; (adr r3, 80010c0 <voltage_cal+0x40>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fada 	bl	8000658 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fdcc 	bl	8000c48 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	ee07 3a90 	vmov	s15, r3
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	f3af 8000 	nop.w
 80010c0:	e734d9b4 	.word	0xe734d9b4
 80010c4:	3f4a680c 	.word	0x3f4a680c
 80010c8:	20000244 	.word	0x20000244

080010cc <ADC_handler>:

void ADC_handler(struct data *d)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <ADC_handler+0xb8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10f      	bne.n	80010fc <ADC_handler+0x30>
	{
		ADC_select_CH1();
 80010dc:	f000 fdb6 	bl	8001c4c <ADC_select_CH1>
		adc_start();
 80010e0:	f000 fe1c 	bl	8001d1c <adc_start>
		adc_conversion();
 80010e4:	f000 fe24 	bl	8001d30 <adc_conversion>
		d->adc1_value = voltage_cal();
 80010e8:	f7ff ffca 	bl	8001080 <voltage_cal>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	edc3 7a02 	vstr	s15, [r3, #8]
		adc_stop();
 80010f6:	f000 fe33 	bl	8001d60 <adc_stop>
 80010fa:	e000      	b.n	80010fe <ADC_handler+0x32>
	}
	else
	{
		__NOP();
 80010fc:	bf00      	nop
	}
	if(adcChnlChecker[1] == 1)
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <ADC_handler+0xb8>)
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d10f      	bne.n	8001126 <ADC_handler+0x5a>
	{
		ADC_select_CH2();
 8001106:	f000 fdbb 	bl	8001c80 <ADC_select_CH2>
		adc_start();
 800110a:	f000 fe07 	bl	8001d1c <adc_start>
		adc_conversion();
 800110e:	f000 fe0f 	bl	8001d30 <adc_conversion>
		d->adc2_value = voltage_cal();
 8001112:	f7ff ffb5 	bl	8001080 <voltage_cal>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edc3 7a03 	vstr	s15, [r3, #12]
		adc_stop();
 8001120:	f000 fe1e 	bl	8001d60 <adc_stop>
 8001124:	e000      	b.n	8001128 <ADC_handler+0x5c>
	}
	else
	{
		__NOP();
 8001126:	bf00      	nop
	}
	if(adcChnlChecker[2] == 1)
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <ADC_handler+0xb8>)
 800112a:	789b      	ldrb	r3, [r3, #2]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10f      	bne.n	8001150 <ADC_handler+0x84>
	{
		ADC_select_CH3();
 8001130:	f000 fdc0 	bl	8001cb4 <ADC_select_CH3>
		adc_start();
 8001134:	f000 fdf2 	bl	8001d1c <adc_start>
		adc_conversion();
 8001138:	f000 fdfa 	bl	8001d30 <adc_conversion>
		d->adc3_value = voltage_cal();
 800113c:	f7ff ffa0 	bl	8001080 <voltage_cal>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edc3 7a04 	vstr	s15, [r3, #16]
		adc_stop();
 800114a:	f000 fe09 	bl	8001d60 <adc_stop>
 800114e:	e000      	b.n	8001152 <ADC_handler+0x86>
	}
	else
	{
		__NOP();
 8001150:	bf00      	nop
	}
	if(adcChnlChecker[3] == 1)
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ADC_handler+0xb8>)
 8001154:	78db      	ldrb	r3, [r3, #3]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10f      	bne.n	800117a <ADC_handler+0xae>
	{
		ADC_select_CH4();
 800115a:	f000 fdc5 	bl	8001ce8 <ADC_select_CH4>
		adc_start();
 800115e:	f000 fddd 	bl	8001d1c <adc_start>
		adc_conversion();
 8001162:	f000 fde5 	bl	8001d30 <adc_conversion>
		d->adc4_value = voltage_cal();
 8001166:	f7ff ff8b 	bl	8001080 <voltage_cal>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edc3 7a05 	vstr	s15, [r3, #20]
		adc_stop();
 8001174:	f000 fdf4 	bl	8001d60 <adc_stop>
	{
		__NOP();
	}
//	adc_stop();

}
 8001178:	e000      	b.n	800117c <ADC_handler+0xb0>
		__NOP();
 800117a:	bf00      	nop
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000318 	.word	0x20000318

08001188 <DataToGsm>:
int count=0;

UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af06      	add	r7, sp, #24
 800118e:	6078      	str	r0, [r7, #4]
	uint8_t sec=d->seconds;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
		//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf((char*)buffer_Time,"%02d:%02d:%02d",d->hour,d->minutes,d->seconds);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	789b      	ldrb	r3, [r3, #2]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	4619      	mov	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	4957      	ldr	r1, [pc, #348]	; (8001308 <DataToGsm+0x180>)
 80011ac:	4857      	ldr	r0, [pc, #348]	; (800130c <DataToGsm+0x184>)
 80011ae:	f008 f9fb 	bl	80095a8 <siprintf>
	sprintf((char*)buffer_Date,"%02d/%02d/%02d",d->dayofmonth,d->month,d->year);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	4619      	mov	r1, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	460b      	mov	r3, r1
 80011c6:	4952      	ldr	r1, [pc, #328]	; (8001310 <DataToGsm+0x188>)
 80011c8:	4852      	ldr	r0, [pc, #328]	; (8001314 <DataToGsm+0x18c>)
 80011ca:	f008 f9ed 	bl	80095a8 <siprintf>

//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf((char*)CH1,"%f",d->adc1_value);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9e8 	bl	80005a8 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	494e      	ldr	r1, [pc, #312]	; (8001318 <DataToGsm+0x190>)
 80011de:	484f      	ldr	r0, [pc, #316]	; (800131c <DataToGsm+0x194>)
 80011e0:	f008 f9e2 	bl	80095a8 <siprintf>
	sprintf((char*)CH2,"%f",d->adc2_value);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9dd 	bl	80005a8 <__aeabi_f2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4949      	ldr	r1, [pc, #292]	; (8001318 <DataToGsm+0x190>)
 80011f4:	484a      	ldr	r0, [pc, #296]	; (8001320 <DataToGsm+0x198>)
 80011f6:	f008 f9d7 	bl	80095a8 <siprintf>
	sprintf((char*)CH3,"%f",d->adc3_value);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9d2 	bl	80005a8 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4943      	ldr	r1, [pc, #268]	; (8001318 <DataToGsm+0x190>)
 800120a:	4846      	ldr	r0, [pc, #280]	; (8001324 <DataToGsm+0x19c>)
 800120c:	f008 f9cc 	bl	80095a8 <siprintf>
	sprintf((char*)CH4,"%f",d->adc4_value);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f9c7 	bl	80005a8 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	493e      	ldr	r1, [pc, #248]	; (8001318 <DataToGsm+0x190>)
 8001220:	4841      	ldr	r0, [pc, #260]	; (8001328 <DataToGsm+0x1a0>)
 8001222:	f008 f9c1 	bl	80095a8 <siprintf>

	if(d->GPIO[0]==1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7e1b      	ldrb	r3, [r3, #24]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d107      	bne.n	800123e <DataToGsm+0xb6>
	{
		strcpy(d->Status1, "High");
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	331d      	adds	r3, #29
 8001232:	4a3e      	ldr	r2, [pc, #248]	; (800132c <DataToGsm+0x1a4>)
 8001234:	6810      	ldr	r0, [r2, #0]
 8001236:	6018      	str	r0, [r3, #0]
 8001238:	7912      	ldrb	r2, [r2, #4]
 800123a:	711a      	strb	r2, [r3, #4]
 800123c:	e004      	b.n	8001248 <DataToGsm+0xc0>
	}
	else
	{
		strcpy(d->Status1, "Low");
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	331d      	adds	r3, #29
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <DataToGsm+0x1a8>)
 8001244:	6810      	ldr	r0, [r2, #0]
 8001246:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e5b      	ldrb	r3, [r3, #25]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d107      	bne.n	8001260 <DataToGsm+0xd8>
	{
		strcpy(d->Status2, "High");
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3327      	adds	r3, #39	; 0x27
 8001254:	4a35      	ldr	r2, [pc, #212]	; (800132c <DataToGsm+0x1a4>)
 8001256:	6810      	ldr	r0, [r2, #0]
 8001258:	6018      	str	r0, [r3, #0]
 800125a:	7912      	ldrb	r2, [r2, #4]
 800125c:	711a      	strb	r2, [r3, #4]
 800125e:	e004      	b.n	800126a <DataToGsm+0xe2>
	}
	else
	{
		strcpy(d->Status2, "Low");
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3327      	adds	r3, #39	; 0x27
 8001264:	4a32      	ldr	r2, [pc, #200]	; (8001330 <DataToGsm+0x1a8>)
 8001266:	6810      	ldr	r0, [r2, #0]
 8001268:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7e9b      	ldrb	r3, [r3, #26]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <DataToGsm+0xfa>
	{
		strcpy(d->Status3, "High");
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3331      	adds	r3, #49	; 0x31
 8001276:	4a2d      	ldr	r2, [pc, #180]	; (800132c <DataToGsm+0x1a4>)
 8001278:	6810      	ldr	r0, [r2, #0]
 800127a:	6018      	str	r0, [r3, #0]
 800127c:	7912      	ldrb	r2, [r2, #4]
 800127e:	711a      	strb	r2, [r3, #4]
 8001280:	e004      	b.n	800128c <DataToGsm+0x104>
	}
	else
	{
		strcpy(d->Status3, "Low");
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3331      	adds	r3, #49	; 0x31
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <DataToGsm+0x1a8>)
 8001288:	6810      	ldr	r0, [r2, #0]
 800128a:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7edb      	ldrb	r3, [r3, #27]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d107      	bne.n	80012a4 <DataToGsm+0x11c>
	{
		strcpy(d->Status4, "High");
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	333b      	adds	r3, #59	; 0x3b
 8001298:	4a24      	ldr	r2, [pc, #144]	; (800132c <DataToGsm+0x1a4>)
 800129a:	6810      	ldr	r0, [r2, #0]
 800129c:	6018      	str	r0, [r3, #0]
 800129e:	7912      	ldrb	r2, [r2, #4]
 80012a0:	711a      	strb	r2, [r3, #4]
 80012a2:	e004      	b.n	80012ae <DataToGsm+0x126>
	}
	else
	{
		strcpy(d->Status4, "Low");
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	333b      	adds	r3, #59	; 0x3b
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <DataToGsm+0x1a8>)
 80012aa:	6810      	ldr	r0, [r2, #0]
 80012ac:	6018      	str	r0, [r3, #0]


//	DataToCloud(buffer_Time,buffer_Date,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);


	if(sec==59)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b3b      	cmp	r3, #59	; 0x3b
 80012b2:	d104      	bne.n	80012be <DataToGsm+0x136>
	{
		count=count+1;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <DataToGsm+0x1ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <DataToGsm+0x1ac>)
 80012bc:	6013      	str	r3, [r2, #0]

	}


	if(count==d->scan_time)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7f1b      	ldrb	r3, [r3, #28]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <DataToGsm+0x1ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d118      	bne.n	80012fe <DataToGsm+0x176>
	{
		DataToCloud(buffer_Time,buffer_Date,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	331d      	adds	r3, #29
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	3227      	adds	r2, #39	; 0x27
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	3131      	adds	r1, #49	; 0x31
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	303b      	adds	r0, #59	; 0x3b
 80012dc:	9005      	str	r0, [sp, #20]
 80012de:	9104      	str	r1, [sp, #16]
 80012e0:	9203      	str	r2, [sp, #12]
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <DataToGsm+0x1a0>)
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <DataToGsm+0x19c>)
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <DataToGsm+0x198>)
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <DataToGsm+0x194>)
 80012f0:	4908      	ldr	r1, [pc, #32]	; (8001314 <DataToGsm+0x18c>)
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <DataToGsm+0x184>)
 80012f4:	f000 fda8 	bl	8001e48 <DataToCloud>
		count=0;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <DataToGsm+0x1ac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
	}

//	count=0;
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	0800d0a0 	.word	0x0800d0a0
 800130c:	20000248 	.word	0x20000248
 8001310:	0800d0b0 	.word	0x0800d0b0
 8001314:	20000258 	.word	0x20000258
 8001318:	0800d0c0 	.word	0x0800d0c0
 800131c:	20000268 	.word	0x20000268
 8001320:	20000274 	.word	0x20000274
 8001324:	20000280 	.word	0x20000280
 8001328:	2000028c 	.word	0x2000028c
 800132c:	0800d0c4 	.word	0x0800d0c4
 8001330:	0800d0cc 	.word	0x0800d0cc
 8001334:	20000298 	.word	0x20000298

08001338 <dec_bcd>:
#define RTC_add 0xD0

//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <dec_bcd+0x48>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1092      	asrs	r2, r2, #2
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	b2d8      	uxtb	r0, r3
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <dec_bcd+0x48>)
 8001358:	fb83 1302 	smull	r1, r3, r3, r2
 800135c:	1099      	asrs	r1, r3, #2
 800135e:	17d3      	asrs	r3, r2, #31
 8001360:	1ac9      	subs	r1, r1, r3
 8001362:	460b      	mov	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	1ad1      	subs	r1, r2, r3
 800136c:	b2cb      	uxtb	r3, r1
 800136e:	4403      	add	r3, r0
 8001370:	b2db      	uxtb	r3, r3
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	66666667 	.word	0x66666667

08001384 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	461a      	mov	r2, r3
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	4413      	add	r3, r2
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <set_time>:




void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	4604      	mov	r4, r0
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4623      	mov	r3, r4
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	4603      	mov	r3, r0
 80013c8:	71bb      	strb	r3, [r7, #6]
 80013ca:	460b      	mov	r3, r1
 80013cc:	717b      	strb	r3, [r7, #5]
 80013ce:	4613      	mov	r3, r2
 80013d0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ffaf 	bl	8001338 <dec_bcd>
 80013da:	4603      	mov	r3, r0
 80013dc:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ffa9 	bl	8001338 <dec_bcd>
 80013e6:	4603      	mov	r3, r0
 80013e8:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffa3 	bl	8001338 <dec_bcd>
 80013f2:	4603      	mov	r3, r0
 80013f4:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 80013f6:	793b      	ldrb	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff9d 	bl	8001338 <dec_bcd>
 80013fe:	4603      	mov	r3, r0
 8001400:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 8001402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff96 	bl	8001338 <dec_bcd>
 800140c:	4603      	mov	r3, r0
 800140e:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8001410:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff8f 	bl	8001338 <dec_bcd>
 800141a:	4603      	mov	r3, r0
 800141c:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 800141e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff88 	bl	8001338 <dec_bcd>
 8001428:	4603      	mov	r3, r0
 800142a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	2307      	movs	r3, #7
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	2200      	movs	r2, #0
 8001440:	21d0      	movs	r1, #208	; 0xd0
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <set_time+0x9c>)
 8001444:	f002 fe20 	bl	8004088 <HAL_I2C_Mem_Write>
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	200004b4 	.word	0x200004b4

08001454 <get_time>:



void get_time(struct data *d)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af04      	add	r7, sp, #16
 800145a:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	2307      	movs	r3, #7
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2301      	movs	r3, #1
 800146e:	2200      	movs	r2, #0
 8001470:	21d0      	movs	r1, #208	; 0xd0
 8001472:	481f      	ldr	r0, [pc, #124]	; (80014f0 <get_time+0x9c>)
 8001474:	f002 ff02 	bl	800427c <HAL_I2C_Mem_Read>
	d->seconds=bcd_dec(get_time[0]);
 8001478:	7a3b      	ldrb	r3, [r7, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff82 	bl	8001384 <bcd_dec>
 8001480:	4603      	mov	r3, r0
 8001482:	b2da      	uxtb	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	701a      	strb	r2, [r3, #0]
	d->minutes=bcd_dec(get_time[1]);
 8001488:	7a7b      	ldrb	r3, [r7, #9]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff7a 	bl	8001384 <bcd_dec>
 8001490:	4603      	mov	r3, r0
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	705a      	strb	r2, [r3, #1]
	d->hour=bcd_dec(get_time[2]);
 8001498:	7abb      	ldrb	r3, [r7, #10]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff72 	bl	8001384 <bcd_dec>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	709a      	strb	r2, [r3, #2]
	d->dayofweek=bcd_dec(get_time[3]);
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff6a 	bl	8001384 <bcd_dec>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	70da      	strb	r2, [r3, #3]
	d->dayofmonth=bcd_dec(get_time[4]);
 80014b8:	7b3b      	ldrb	r3, [r7, #12]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff62 	bl	8001384 <bcd_dec>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	711a      	strb	r2, [r3, #4]
	d->month=bcd_dec(get_time[5]);
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff5a 	bl	8001384 <bcd_dec>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	715a      	strb	r2, [r3, #5]
	d->year=bcd_dec(get_time[6]);
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff52 	bl	8001384 <bcd_dec>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	719a      	strb	r2, [r3, #6]
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200004b4 	.word	0x200004b4

080014f4 <Configurator>:
uint8_t s[4];
extern struct data d;
uint8_t adcChnlChecker[4];

 void Configurator()
 {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	 data_receive();
 80014f8:	f000 ff3e 	bl	8002378 <data_receive>

		  if (tx_data[0] != '\0')
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <Configurator+0x48>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <Configurator+0x18>
		   {
		     flag = 1; // Set flag to indicate data has been received
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <Configurator+0x4c>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e002      	b.n	8001512 <Configurator+0x1e>
		   }
		   else
		   {
			   flag=0;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <Configurator+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
		   }

           if (flag)
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <Configurator+0x4c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <Configurator+0x32>
           {
	        extract_data();
 800151a:	f000 f8e3 	bl	80016e4 <extract_data>
	        pin_config();
 800151e:	f000 f919 	bl	8001754 <pin_config>
	        clear_buffer();
 8001522:	f000 f811 	bl	8001548 <clear_buffer>
           }

           set_output(&d);
 8001526:	4807      	ldr	r0, [pc, #28]	; (8001544 <Configurator+0x50>)
 8001528:	f000 f81a 	bl	8001560 <set_output>
           reset_output(&d);
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <Configurator+0x50>)
 800152e:	f000 f859 	bl	80015e4 <reset_output>
//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

           read_pinstatus(&d);
 8001532:	4804      	ldr	r0, [pc, #16]	; (8001544 <Configurator+0x50>)
 8001534:	f000 f898 	bl	8001668 <read_pinstatus>
           // status_transmit();
            //DataTOgsm(d);


 }
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002a0 	.word	0x200002a0
 8001540:	20000310 	.word	0x20000310
 8001544:	200001fc 	.word	0x200001fc

08001548 <clear_buffer>:

 void clear_buffer()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 800154c:	220f      	movs	r2, #15
 800154e:	2100      	movs	r1, #0
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <clear_buffer+0x14>)
 8001552:	f007 f87d 	bl	8008650 <memset>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200002a0 	.word	0x200002a0

08001560 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

 void set_output(struct data *d)
 {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	 if(config[0] == 0)
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <set_output+0x78>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d108      	bne.n	8001582 <set_output+0x22>
	{
		 d->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2104      	movs	r1, #4
 8001574:	4819      	ldr	r0, [pc, #100]	; (80015dc <set_output+0x7c>)
 8001576:	f000 ff23 	bl	80023c0 <write_gpio>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	761a      	strb	r2, [r3, #24]
	}

	if(config[1] == 0)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <set_output+0x78>)
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <set_output+0x3c>
	{
		d->GPIO[1] = write_gpio(GPIOC,GPIO_PIN_1, PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	2102      	movs	r1, #2
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <set_output+0x80>)
 8001590:	f000 ff16 	bl	80023c0 <write_gpio>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	765a      	strb	r2, [r3, #25]
	}

	if(config[2] == 0)
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <set_output+0x78>)
 800159e:	789b      	ldrb	r3, [r3, #2]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d108      	bne.n	80015b6 <set_output+0x56>
	{
		d->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2110      	movs	r1, #16
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <set_output+0x7c>)
 80015aa:	f000 ff09 	bl	80023c0 <write_gpio>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	769a      	strb	r2, [r3, #26]
	}

	if(config[3] == 0)
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <set_output+0x78>)
 80015b8:	78db      	ldrb	r3, [r3, #3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d108      	bne.n	80015d0 <set_output+0x70>
	{
		d->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2120      	movs	r1, #32
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <set_output+0x7c>)
 80015c4:	f000 fefc 	bl	80023c0 <write_gpio>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	76da      	strb	r2, [r3, #27]
	}
//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
 }
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000314 	.word	0x20000314
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800

080015e4 <reset_output>:

 void reset_output(struct data *d1)
  {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 	 if(config[0] == 0)
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <reset_output+0x78>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d108      	bne.n	8001606 <reset_output+0x22>
 	{
 		d1->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2104      	movs	r1, #4
 80015f8:	4819      	ldr	r0, [pc, #100]	; (8001660 <reset_output+0x7c>)
 80015fa:	f000 fee1 	bl	80023c0 <write_gpio>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	761a      	strb	r2, [r3, #24]
 	}

 	if(config[1] == 0)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <reset_output+0x78>)
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <reset_output+0x3c>
 	{
 		d1->GPIO[1]=write_gpio(GPIOC,GPIO_PIN_1, PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	4814      	ldr	r0, [pc, #80]	; (8001664 <reset_output+0x80>)
 8001614:	f000 fed4 	bl	80023c0 <write_gpio>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	765a      	strb	r2, [r3, #25]
 	}

 	if(config[2] == 0)
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <reset_output+0x78>)
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <reset_output+0x56>
 	{
 		d1->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2110      	movs	r1, #16
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <reset_output+0x7c>)
 800162e:	f000 fec7 	bl	80023c0 <write_gpio>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	769a      	strb	r2, [r3, #26]
 	}

 	if(config[3] == 0)
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <reset_output+0x78>)
 800163c:	78db      	ldrb	r3, [r3, #3]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d108      	bne.n	8001654 <reset_output+0x70>
 	{
 		d1->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2120      	movs	r1, #32
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <reset_output+0x7c>)
 8001648:	f000 feba 	bl	80023c0 <write_gpio>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	76da      	strb	r2, [r3, #27]
 	}
  }
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000314 	.word	0x20000314
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800

08001668 <read_pinstatus>:

 void read_pinstatus(struct data *d2)
 {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	 if(config[0]==1)
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <read_pinstatus+0x70>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d107      	bne.n	8001688 <read_pinstatus+0x20>
	 {
	     d2->GPIO[0]=read_gpio( GPIOB,GPIO_PIN_2);
 8001678:	2104      	movs	r1, #4
 800167a:	4818      	ldr	r0, [pc, #96]	; (80016dc <read_pinstatus+0x74>)
 800167c:	f000 fe90 	bl	80023a0 <read_gpio>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	761a      	strb	r2, [r3, #24]
	 }
	 if(config[1]==1)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <read_pinstatus+0x70>)
 800168a:	785b      	ldrb	r3, [r3, #1]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <read_pinstatus+0x38>
	 {
		 d2->GPIO[1]=read_gpio(GPIOC,GPIO_PIN_1);
 8001690:	2102      	movs	r1, #2
 8001692:	4813      	ldr	r0, [pc, #76]	; (80016e0 <read_pinstatus+0x78>)
 8001694:	f000 fe84 	bl	80023a0 <read_gpio>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	765a      	strb	r2, [r3, #25]
	 }
	 if(config[2]==1)
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <read_pinstatus+0x70>)
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <read_pinstatus+0x50>
	 {
	    d2->GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 80016a8:	2110      	movs	r1, #16
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <read_pinstatus+0x74>)
 80016ac:	f000 fe78 	bl	80023a0 <read_gpio>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	769a      	strb	r2, [r3, #26]
	 }
	if(config[3]==1)
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <read_pinstatus+0x70>)
 80016ba:	78db      	ldrb	r3, [r3, #3]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <read_pinstatus+0x68>
	{
	   d2->GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 80016c0:	2120      	movs	r1, #32
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <read_pinstatus+0x74>)
 80016c4:	f000 fe6c 	bl	80023a0 <read_gpio>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	76da      	strb	r2, [r3, #27]
    }
//	 return d->GPIO;
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000314 	.word	0x20000314
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020800 	.word	0x40020800

080016e4 <extract_data>:


void extract_data()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 80016e8:	4915      	ldr	r1, [pc, #84]	; (8001740 <extract_data+0x5c>)
 80016ea:	4816      	ldr	r0, [pc, #88]	; (8001744 <extract_data+0x60>)
 80016ec:	f008 fdb8 	bl	800a260 <strtok>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <extract_data+0x64>)
 80016f4:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <extract_data+0x64>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d010      	beq.n	8001720 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <extract_data+0x64>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2209      	movs	r2, #9
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <extract_data+0x68>)
 8001708:	f007 ff6e 	bl	80095e8 <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <extract_data+0x68>)
 800170e:	2200      	movs	r2, #0
 8001710:	725a      	strb	r2, [r3, #9]
		         token = strtok(NULL, ",");
 8001712:	490b      	ldr	r1, [pc, #44]	; (8001740 <extract_data+0x5c>)
 8001714:	2000      	movs	r0, #0
 8001716:	f008 fda3 	bl	800a260 <strtok>
 800171a:	4603      	mov	r3, r0
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <extract_data+0x64>)
 800171e:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <extract_data+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d009      	beq.n	800173c <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <extract_data+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2209      	movs	r2, #9
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <extract_data+0x6c>)
 8001732:	f007 ff59 	bl	80095e8 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <extract_data+0x6c>)
 8001738:	2200      	movs	r2, #0
 800173a:	725a      	strb	r2, [r3, #9]
		         //token = strtok(NULL, ",");
		     }


}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800d0d0 	.word	0x0800d0d0
 8001744:	200002a0 	.word	0x200002a0
 8001748:	2000030c 	.word	0x2000030c
 800174c:	200002f4 	.word	0x200002f4
 8001750:	20000300 	.word	0x20000300

08001754 <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af04      	add	r7, sp, #16

	            if(strcmp(arr1,"B2")==0)
 800175a:	4998      	ldr	r1, [pc, #608]	; (80019bc <pin_config+0x268>)
 800175c:	4898      	ldr	r0, [pc, #608]	; (80019c0 <pin_config+0x26c>)
 800175e:	f7fe fd57 	bl	8000210 <strcmp>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d103      	bne.n	8001770 <pin_config+0x1c>
			     {
			       switch_val=1;
 8001768:	4b96      	ldr	r3, [pc, #600]	; (80019c4 <pin_config+0x270>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e040      	b.n	80017f2 <pin_config+0x9e>
			     }

	            else if(strcmp(arr1,"C1")==0)
 8001770:	4995      	ldr	r1, [pc, #596]	; (80019c8 <pin_config+0x274>)
 8001772:	4893      	ldr	r0, [pc, #588]	; (80019c0 <pin_config+0x26c>)
 8001774:	f7fe fd4c 	bl	8000210 <strcmp>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <pin_config+0x32>
				 {
				   switch_val=2;
 800177e:	4b91      	ldr	r3, [pc, #580]	; (80019c4 <pin_config+0x270>)
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e035      	b.n	80017f2 <pin_config+0x9e>
				 }

	            else if(strcmp(arr1,"B4")==0)
 8001786:	4991      	ldr	r1, [pc, #580]	; (80019cc <pin_config+0x278>)
 8001788:	488d      	ldr	r0, [pc, #564]	; (80019c0 <pin_config+0x26c>)
 800178a:	f7fe fd41 	bl	8000210 <strcmp>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <pin_config+0x48>
	           	 {
	           		switch_val=3;
 8001794:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <pin_config+0x270>)
 8001796:	2203      	movs	r2, #3
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e02a      	b.n	80017f2 <pin_config+0x9e>
	           	 }

	            else if(strcmp(arr1,"B5")==0)
 800179c:	498c      	ldr	r1, [pc, #560]	; (80019d0 <pin_config+0x27c>)
 800179e:	4888      	ldr	r0, [pc, #544]	; (80019c0 <pin_config+0x26c>)
 80017a0:	f7fe fd36 	bl	8000210 <strcmp>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <pin_config+0x5e>
                 {
				    switch_val=4;
 80017aa:	4b86      	ldr	r3, [pc, #536]	; (80019c4 <pin_config+0x270>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e01f      	b.n	80017f2 <pin_config+0x9e>
				 }

	            else if(strcmp(arr1,"ADC1")==0)
 80017b2:	4988      	ldr	r1, [pc, #544]	; (80019d4 <pin_config+0x280>)
 80017b4:	4882      	ldr	r0, [pc, #520]	; (80019c0 <pin_config+0x26c>)
 80017b6:	f7fe fd2b 	bl	8000210 <strcmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <pin_config+0x74>
				 {
					switch_val=5;
 80017c0:	4b80      	ldr	r3, [pc, #512]	; (80019c4 <pin_config+0x270>)
 80017c2:	2205      	movs	r2, #5
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e014      	b.n	80017f2 <pin_config+0x9e>
				 }

	            else if(strcmp(arr1,"RTC")==0)
 80017c8:	4983      	ldr	r1, [pc, #524]	; (80019d8 <pin_config+0x284>)
 80017ca:	487d      	ldr	r0, [pc, #500]	; (80019c0 <pin_config+0x26c>)
 80017cc:	f7fe fd20 	bl	8000210 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <pin_config+0x8a>
	             {
	            	switch_val=6;
 80017d6:	4b7b      	ldr	r3, [pc, #492]	; (80019c4 <pin_config+0x270>)
 80017d8:	2206      	movs	r2, #6
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e009      	b.n	80017f2 <pin_config+0x9e>
	             }

	            else if(strcmp(arr1,"SCANTIME")==0)
 80017de:	497f      	ldr	r1, [pc, #508]	; (80019dc <pin_config+0x288>)
 80017e0:	4877      	ldr	r0, [pc, #476]	; (80019c0 <pin_config+0x26c>)
 80017e2:	f7fe fd15 	bl	8000210 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <pin_config+0x9e>
				 {
					switch_val=7;
 80017ec:	4b75      	ldr	r3, [pc, #468]	; (80019c4 <pin_config+0x270>)
 80017ee:	2207      	movs	r2, #7
 80017f0:	601a      	str	r2, [r3, #0]
				 }


			     switch(switch_val)
 80017f2:	4b74      	ldr	r3, [pc, #464]	; (80019c4 <pin_config+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	f200 8164 	bhi.w	8001ac6 <pin_config+0x372>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <pin_config+0xb0>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001821 	.word	0x08001821
 8001808:	08001863 	.word	0x08001863
 800180c:	080018a5 	.word	0x080018a5
 8001810:	080018e7 	.word	0x080018e7
 8001814:	08001929 	.word	0x08001929
 8001818:	08001a11 	.word	0x08001a11
 800181c:	08001aa9 	.word	0x08001aa9
			     {

			     case 1:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8001820:	496f      	ldr	r1, [pc, #444]	; (80019e0 <pin_config+0x28c>)
 8001822:	4870      	ldr	r0, [pc, #448]	; (80019e4 <pin_config+0x290>)
 8001824:	f7fe fcf4 	bl	8000210 <strcmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d108      	bne.n	8001840 <pin_config+0xec>
						{
			              user_GPIO_Init(GPIOB,GPIO_PIN_2,OUTPUT);
 800182e:	2200      	movs	r2, #0
 8001830:	2104      	movs	r1, #4
 8001832:	486d      	ldr	r0, [pc, #436]	; (80019e8 <pin_config+0x294>)
 8001834:	f000 fcfe 	bl	8002234 <user_GPIO_Init>
					      config[0] = 0;
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <pin_config+0x298>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
			              else if(strcmp(arr2,"INPUT")==0)
					    {
						   user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
						   config[0] = 1;
					    }
			     break;
 800183e:	e13b      	b.n	8001ab8 <pin_config+0x364>
			              else if(strcmp(arr2,"INPUT")==0)
 8001840:	496b      	ldr	r1, [pc, #428]	; (80019f0 <pin_config+0x29c>)
 8001842:	4868      	ldr	r0, [pc, #416]	; (80019e4 <pin_config+0x290>)
 8001844:	f7fe fce4 	bl	8000210 <strcmp>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 8134 	bne.w	8001ab8 <pin_config+0x364>
						   user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
 8001850:	2201      	movs	r2, #1
 8001852:	2104      	movs	r1, #4
 8001854:	4864      	ldr	r0, [pc, #400]	; (80019e8 <pin_config+0x294>)
 8001856:	f000 fced 	bl	8002234 <user_GPIO_Init>
						   config[0] = 1;
 800185a:	4b64      	ldr	r3, [pc, #400]	; (80019ec <pin_config+0x298>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
			     break;
 8001860:	e12a      	b.n	8001ab8 <pin_config+0x364>

			   case 2:
				    	if(strcmp(arr2,"OUTPUT")==0)
 8001862:	495f      	ldr	r1, [pc, #380]	; (80019e0 <pin_config+0x28c>)
 8001864:	485f      	ldr	r0, [pc, #380]	; (80019e4 <pin_config+0x290>)
 8001866:	f7fe fcd3 	bl	8000210 <strcmp>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d108      	bne.n	8001882 <pin_config+0x12e>
			    		{
			    	      user_GPIO_Init(GPIOC,GPIO_PIN_1,OUTPUT);
 8001870:	2200      	movs	r2, #0
 8001872:	2102      	movs	r1, #2
 8001874:	485f      	ldr	r0, [pc, #380]	; (80019f4 <pin_config+0x2a0>)
 8001876:	f000 fcdd 	bl	8002234 <user_GPIO_Init>
			    	      config[1]=0;
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <pin_config+0x298>)
 800187c:	2200      	movs	r2, #0
 800187e:	705a      	strb	r2, [r3, #1]
			    	     else if(strcmp(arr2,"INPUT")==0)
			    		{
			    		  user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
			    		  config[1]=1;
			    		}
	    	    break;
 8001880:	e11c      	b.n	8001abc <pin_config+0x368>
			    	     else if(strcmp(arr2,"INPUT")==0)
 8001882:	495b      	ldr	r1, [pc, #364]	; (80019f0 <pin_config+0x29c>)
 8001884:	4857      	ldr	r0, [pc, #348]	; (80019e4 <pin_config+0x290>)
 8001886:	f7fe fcc3 	bl	8000210 <strcmp>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	f040 8115 	bne.w	8001abc <pin_config+0x368>
			    		  user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
 8001892:	2201      	movs	r2, #1
 8001894:	2102      	movs	r1, #2
 8001896:	4857      	ldr	r0, [pc, #348]	; (80019f4 <pin_config+0x2a0>)
 8001898:	f000 fccc 	bl	8002234 <user_GPIO_Init>
			    		  config[1]=1;
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <pin_config+0x298>)
 800189e:	2201      	movs	r2, #1
 80018a0:	705a      	strb	r2, [r3, #1]
	    	    break;
 80018a2:	e10b      	b.n	8001abc <pin_config+0x368>

			     case 3:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 80018a4:	494e      	ldr	r1, [pc, #312]	; (80019e0 <pin_config+0x28c>)
 80018a6:	484f      	ldr	r0, [pc, #316]	; (80019e4 <pin_config+0x290>)
 80018a8:	f7fe fcb2 	bl	8000210 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d108      	bne.n	80018c4 <pin_config+0x170>
			     		{
			    	 	  user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2110      	movs	r1, #16
 80018b6:	484c      	ldr	r0, [pc, #304]	; (80019e8 <pin_config+0x294>)
 80018b8:	f000 fcbc 	bl	8002234 <user_GPIO_Init>
			     		  config[2]=0;
 80018bc:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <pin_config+0x298>)
 80018be:	2200      	movs	r2, #0
 80018c0:	709a      	strb	r2, [r3, #2]
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			     		  config[2]=1;
			     		}

			     break;
 80018c2:	e0fd      	b.n	8001ac0 <pin_config+0x36c>
			     		 else if(strcmp(arr2,"INPUT")==0)
 80018c4:	494a      	ldr	r1, [pc, #296]	; (80019f0 <pin_config+0x29c>)
 80018c6:	4847      	ldr	r0, [pc, #284]	; (80019e4 <pin_config+0x290>)
 80018c8:	f7fe fca2 	bl	8000210 <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80f6 	bne.w	8001ac0 <pin_config+0x36c>
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 80018d4:	2201      	movs	r2, #1
 80018d6:	2110      	movs	r1, #16
 80018d8:	4843      	ldr	r0, [pc, #268]	; (80019e8 <pin_config+0x294>)
 80018da:	f000 fcab 	bl	8002234 <user_GPIO_Init>
			     		  config[2]=1;
 80018de:	4b43      	ldr	r3, [pc, #268]	; (80019ec <pin_config+0x298>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	709a      	strb	r2, [r3, #2]
			     break;
 80018e4:	e0ec      	b.n	8001ac0 <pin_config+0x36c>

			     case 4:
			    	 	 if(strcmp(arr2,"OUTPUT")==0)
 80018e6:	493e      	ldr	r1, [pc, #248]	; (80019e0 <pin_config+0x28c>)
 80018e8:	483e      	ldr	r0, [pc, #248]	; (80019e4 <pin_config+0x290>)
 80018ea:	f7fe fc91 	bl	8000210 <strcmp>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d108      	bne.n	8001906 <pin_config+0x1b2>
			    		{
			    	 	  user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2120      	movs	r1, #32
 80018f8:	483b      	ldr	r0, [pc, #236]	; (80019e8 <pin_config+0x294>)
 80018fa:	f000 fc9b 	bl	8002234 <user_GPIO_Init>
			    		  config[3]=0;
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <pin_config+0x298>)
 8001900:	2200      	movs	r2, #0
 8001902:	70da      	strb	r2, [r3, #3]
			    		  else if(strcmp(arr2,"INPUT")==0)
			    	    {
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			              config[3]=1;
			    	    }
			     break;
 8001904:	e0de      	b.n	8001ac4 <pin_config+0x370>
			    		  else if(strcmp(arr2,"INPUT")==0)
 8001906:	493a      	ldr	r1, [pc, #232]	; (80019f0 <pin_config+0x29c>)
 8001908:	4836      	ldr	r0, [pc, #216]	; (80019e4 <pin_config+0x290>)
 800190a:	f7fe fc81 	bl	8000210 <strcmp>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 80d7 	bne.w	8001ac4 <pin_config+0x370>
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8001916:	2201      	movs	r2, #1
 8001918:	2120      	movs	r1, #32
 800191a:	4833      	ldr	r0, [pc, #204]	; (80019e8 <pin_config+0x294>)
 800191c:	f000 fc8a 	bl	8002234 <user_GPIO_Init>
			              config[3]=1;
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <pin_config+0x298>)
 8001922:	2201      	movs	r2, #1
 8001924:	70da      	strb	r2, [r3, #3]
			     break;
 8001926:	e0cd      	b.n	8001ac4 <pin_config+0x370>

			    case 5:
					if(strcmp(arr2,"CH1")==0)
 8001928:	4933      	ldr	r1, [pc, #204]	; (80019f8 <pin_config+0x2a4>)
 800192a:	482e      	ldr	r0, [pc, #184]	; (80019e4 <pin_config+0x290>)
 800192c:	f7fe fc70 	bl	8000210 <strcmp>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <pin_config+0x1ee>
					{
						ADC_select_CH1();
 8001936:	f000 f989 	bl	8001c4c <ADC_select_CH1>
						adcChnlChecker[0] = 1;
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <pin_config+0x2a8>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						__NOP();
					}
					break;
 8001940:	e0c1      	b.n	8001ac6 <pin_config+0x372>
					else if(strcmp(arr2,"CH2")==0)
 8001942:	492f      	ldr	r1, [pc, #188]	; (8001a00 <pin_config+0x2ac>)
 8001944:	4827      	ldr	r0, [pc, #156]	; (80019e4 <pin_config+0x290>)
 8001946:	f7fe fc63 	bl	8000210 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <pin_config+0x208>
						ADC_select_CH2();
 8001950:	f000 f996 	bl	8001c80 <ADC_select_CH2>
						adcChnlChecker[1] = 1;
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <pin_config+0x2a8>)
 8001956:	2201      	movs	r2, #1
 8001958:	705a      	strb	r2, [r3, #1]
					break;
 800195a:	e0b4      	b.n	8001ac6 <pin_config+0x372>
					else if(strcmp(arr2,"CH3")==0)
 800195c:	4929      	ldr	r1, [pc, #164]	; (8001a04 <pin_config+0x2b0>)
 800195e:	4821      	ldr	r0, [pc, #132]	; (80019e4 <pin_config+0x290>)
 8001960:	f7fe fc56 	bl	8000210 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <pin_config+0x222>
						ADC_select_CH3();
 800196a:	f000 f9a3 	bl	8001cb4 <ADC_select_CH3>
						adcChnlChecker[2] = 1;
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <pin_config+0x2a8>)
 8001970:	2201      	movs	r2, #1
 8001972:	709a      	strb	r2, [r3, #2]
					break;
 8001974:	e0a7      	b.n	8001ac6 <pin_config+0x372>
					else if(strcmp(arr2,"CH4")==0)
 8001976:	4924      	ldr	r1, [pc, #144]	; (8001a08 <pin_config+0x2b4>)
 8001978:	481a      	ldr	r0, [pc, #104]	; (80019e4 <pin_config+0x290>)
 800197a:	f7fe fc49 	bl	8000210 <strcmp>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <pin_config+0x23c>
						ADC_select_CH4();
 8001984:	f000 f9b0 	bl	8001ce8 <ADC_select_CH4>
						adcChnlChecker[3] = 1;
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <pin_config+0x2a8>)
 800198a:	2201      	movs	r2, #1
 800198c:	70da      	strb	r2, [r3, #3]
					break;
 800198e:	e09a      	b.n	8001ac6 <pin_config+0x372>
					else if(strcmp(arr2,"DB2")==0)
 8001990:	491e      	ldr	r1, [pc, #120]	; (8001a0c <pin_config+0x2b8>)
 8001992:	4814      	ldr	r0, [pc, #80]	; (80019e4 <pin_config+0x290>)
 8001994:	f7fe fc3c 	bl	8000210 <strcmp>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <pin_config+0x264>
						adcChnlChecker[0] = 0;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <pin_config+0x2a8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
						adcChnlChecker[1] = 0;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <pin_config+0x2a8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	705a      	strb	r2, [r3, #1]
						adcChnlChecker[2] = 0;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <pin_config+0x2a8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	709a      	strb	r2, [r3, #2]
						adcChnlChecker[3] = 0;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <pin_config+0x2a8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	70da      	strb	r2, [r3, #3]
					break;
 80019b6:	e086      	b.n	8001ac6 <pin_config+0x372>
						__NOP();
 80019b8:	bf00      	nop
					break;
 80019ba:	e084      	b.n	8001ac6 <pin_config+0x372>
 80019bc:	0800d0d4 	.word	0x0800d0d4
 80019c0:	200002f4 	.word	0x200002f4
 80019c4:	2000029c 	.word	0x2000029c
 80019c8:	0800d0d8 	.word	0x0800d0d8
 80019cc:	0800d0dc 	.word	0x0800d0dc
 80019d0:	0800d0e0 	.word	0x0800d0e0
 80019d4:	0800d0e4 	.word	0x0800d0e4
 80019d8:	0800d0ec 	.word	0x0800d0ec
 80019dc:	0800d0f0 	.word	0x0800d0f0
 80019e0:	0800d0fc 	.word	0x0800d0fc
 80019e4:	20000300 	.word	0x20000300
 80019e8:	40020400 	.word	0x40020400
 80019ec:	20000314 	.word	0x20000314
 80019f0:	0800d104 	.word	0x0800d104
 80019f4:	40020800 	.word	0x40020800
 80019f8:	0800d10c 	.word	0x0800d10c
 80019fc:	20000318 	.word	0x20000318
 8001a00:	0800d110 	.word	0x0800d110
 8001a04:	0800d114 	.word	0x0800d114
 8001a08:	0800d118 	.word	0x0800d118
 8001a0c:	0800d11c 	.word	0x0800d11c

			     case 6:

				  token = strtok(arr2, ":");
 8001a10:	492e      	ldr	r1, [pc, #184]	; (8001acc <pin_config+0x378>)
 8001a12:	482f      	ldr	r0, [pc, #188]	; (8001ad0 <pin_config+0x37c>)
 8001a14:	f008 fc24 	bl	800a260 <strtok>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ad4 <pin_config+0x380>)
 8001a1c:	6013      	str	r3, [r2, #0]

				 // Get the first token and convert to integer
				 if (token != NULL)
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <pin_config+0x380>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00f      	beq.n	8001a46 <pin_config+0x2f2>
				 {
					 d.hour = atoi(token);
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <pin_config+0x380>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f006 fdd2 	bl	80085d4 <atoi>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <pin_config+0x384>)
 8001a36:	709a      	strb	r2, [r3, #2]
					 token = strtok(NULL, ":");
 8001a38:	4924      	ldr	r1, [pc, #144]	; (8001acc <pin_config+0x378>)
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f008 fc10 	bl	800a260 <strtok>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <pin_config+0x380>)
 8001a44:	6013      	str	r3, [r2, #0]
				 }

				 // Get the second token and convert to integer
				 if (token != NULL)
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <pin_config+0x380>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00f      	beq.n	8001a6e <pin_config+0x31a>
				 {
					 d.minutes = atoi(token);
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <pin_config+0x380>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f006 fdbe 	bl	80085d4 <atoi>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <pin_config+0x384>)
 8001a5e:	705a      	strb	r2, [r3, #1]
					 token = strtok(NULL, ":");
 8001a60:	491a      	ldr	r1, [pc, #104]	; (8001acc <pin_config+0x378>)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f008 fbfc 	bl	800a260 <strtok>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <pin_config+0x380>)
 8001a6c:	6013      	str	r3, [r2, #0]
				 }

				 // Get the third token and convert to integer
				 if (token != NULL)
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <pin_config+0x380>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <pin_config+0x334>
				 {
					 d.seconds = atoi(token);
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <pin_config+0x380>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f006 fdaa 	bl	80085d4 <atoi>
 8001a80:	4603      	mov	r3, r0
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <pin_config+0x384>)
 8001a86:	701a      	strb	r2, [r3, #0]
				 }
//				 Set_Time(time);

				 set_time(d.seconds,d.minutes,d.hour,3,11,9,24);
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <pin_config+0x384>)
 8001a8a:	7818      	ldrb	r0, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <pin_config+0x384>)
 8001a8e:	7859      	ldrb	r1, [r3, #1]
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <pin_config+0x384>)
 8001a92:	789a      	ldrb	r2, [r3, #2]
 8001a94:	2318      	movs	r3, #24
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	2309      	movs	r3, #9
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	230b      	movs	r3, #11
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	f7ff fc87 	bl	80013b4 <set_time>

			 break;
 8001aa6:	e00e      	b.n	8001ac6 <pin_config+0x372>

			     case 7:
			    	 d.scan_time = (uint8_t)atoi(arr2);
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <pin_config+0x37c>)
 8001aaa:	f006 fd93 	bl	80085d4 <atoi>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <pin_config+0x384>)
 8001ab4:	771a      	strb	r2, [r3, #28]
			    	 break;
 8001ab6:	e006      	b.n	8001ac6 <pin_config+0x372>
			     break;
 8001ab8:	bf00      	nop
 8001aba:	e004      	b.n	8001ac6 <pin_config+0x372>
	    	    break;
 8001abc:	bf00      	nop
 8001abe:	e002      	b.n	8001ac6 <pin_config+0x372>
			     break;
 8001ac0:	bf00      	nop
 8001ac2:	e000      	b.n	8001ac6 <pin_config+0x372>
			     break;
 8001ac4:	bf00      	nop

			     }
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	0800d120 	.word	0x0800d120
 8001ad0:	20000300 	.word	0x20000300
 8001ad4:	2000030c 	.word	0x2000030c
 8001ad8:	200001fc 	.word	0x200001fc

08001adc <terminal>:
extern char CH4[10];



void terminal(struct data *d)
{
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	b08f      	sub	sp, #60	; 0x3c
 8001ae0:	af0c      	add	r7, sp, #48	; 0x30
 8001ae2:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"TIME:%02d:%02d:%02d DATE:%02d/%02d/%02d CH1:%s CH2:%s CH3:%s CH4:%s GPIO1:%s GPIO2:%s GPIO3:%s GPIO4:%s\r\n",d->hour,d->minutes,d->seconds,d->dayofmonth,d->month,d->year,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	469c      	mov	ip, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	469e      	mov	lr, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461c      	mov	r4, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	791b      	ldrb	r3, [r3, #4]
 8001afa:	461d      	mov	r5, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	795b      	ldrb	r3, [r3, #5]
 8001b00:	461e      	mov	r6, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	799b      	ldrb	r3, [r3, #6]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	331d      	adds	r3, #29
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	3227      	adds	r2, #39	; 0x27
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	3131      	adds	r1, #49	; 0x31
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	303b      	adds	r0, #59	; 0x3b
 8001b18:	900b      	str	r0, [sp, #44]	; 0x2c
 8001b1a:	910a      	str	r1, [sp, #40]	; 0x28
 8001b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8001b1e:	9308      	str	r3, [sp, #32]
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <terminal+0x78>)
 8001b22:	9307      	str	r3, [sp, #28]
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <terminal+0x7c>)
 8001b26:	9306      	str	r3, [sp, #24]
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <terminal+0x80>)
 8001b2a:	9305      	str	r3, [sp, #20]
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <terminal+0x84>)
 8001b2e:	9304      	str	r3, [sp, #16]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9303      	str	r3, [sp, #12]
 8001b34:	9602      	str	r6, [sp, #8]
 8001b36:	9501      	str	r5, [sp, #4]
 8001b38:	9400      	str	r4, [sp, #0]
 8001b3a:	4673      	mov	r3, lr
 8001b3c:	4662      	mov	r2, ip
 8001b3e:	4909      	ldr	r1, [pc, #36]	; (8001b64 <terminal+0x88>)
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <terminal+0x8c>)
 8001b42:	f007 fd31 	bl	80095a8 <siprintf>
//	sprintf((char*)buf2,"%02d:%02d:%02d\r\n",d->dayofmonth,d->month,d->year);
	uart3_tx(buf);
 8001b46:	4808      	ldr	r0, [pc, #32]	; (8001b68 <terminal+0x8c>)
 8001b48:	f000 fc4e 	bl	80023e8 <uart3_tx>
//	HAL_Delay(100);

}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b54:	2000028c 	.word	0x2000028c
 8001b58:	20000280 	.word	0x20000280
 8001b5c:	20000274 	.word	0x20000274
 8001b60:	20000268 	.word	0x20000268
 8001b64:	0800d124 	.word	0x0800d124
 8001b68:	2000031c 	.word	0x2000031c

08001b6c <USER_ADC1_Init>:
//	 */
//	HAL_RCCEx_EnableMSIPLLMode();
//}

void USER_ADC1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	//
	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	 hadc1.Instance = ADC1;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <USER_ADC1_Init+0x6c>)
 8001b74:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b7c:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <USER_ADC1_Init+0x70>)
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 4;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001bac:	2204      	movs	r2, #4
 8001bae:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <USER_ADC1_Init+0x68>)
 8001bc0:	f001 f85e 	bl	8002c80 <HAL_ADC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <USER_ADC1_Init+0x62>
	  {
	    Error_Handler();
 8001bca:	f000 fc66 	bl	800249a <Error_Handler>
	  }


	}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200003f4 	.word	0x200003f4
 8001bd8:	40012000 	.word	0x40012000
 8001bdc:	0f000001 	.word	0x0f000001

08001be0 <USER_GPIO_Init>:


void USER_GPIO_Init(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <USER_GPIO_Init+0x68>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_5;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <ADC_select_CH1+0x2c>)
 8001c52:	2205      	movs	r2, #5
 8001c54:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <ADC_select_CH1+0x2c>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <ADC_select_CH1+0x2c>)
 8001c5e:	2205      	movs	r2, #5
 8001c60:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c62:	4905      	ldr	r1, [pc, #20]	; (8001c78 <ADC_select_CH1+0x2c>)
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <ADC_select_CH1+0x30>)
 8001c66:	f001 fb1b 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <ADC_select_CH1+0x28>
	  {
	    Error_Handler();
 8001c70:	f000 fc13 	bl	800249a <Error_Handler>
	  }
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200003e4 	.word	0x200003e4
 8001c7c:	200003f4 	.word	0x200003f4

08001c80 <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	 sConfig.Channel = ADC_CHANNEL_6;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <ADC_select_CH2+0x2c>)
 8001c86:	2206      	movs	r2, #6
 8001c88:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <ADC_select_CH2+0x2c>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <ADC_select_CH2+0x2c>)
 8001c92:	2205      	movs	r2, #5
 8001c94:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c96:	4905      	ldr	r1, [pc, #20]	; (8001cac <ADC_select_CH2+0x2c>)
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <ADC_select_CH2+0x30>)
 8001c9a:	f001 fb01 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <ADC_select_CH2+0x28>
	  {
	    Error_Handler();
 8001ca4:	f000 fbf9 	bl	800249a <Error_Handler>
	  }
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200003e4 	.word	0x200003e4
 8001cb0:	200003f4 	.word	0x200003f4

08001cb4 <ADC_select_CH3>:

void ADC_select_CH3(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	 sConfig.Channel = ADC_CHANNEL_9;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <ADC_select_CH3+0x2c>)
 8001cba:	2209      	movs	r2, #9
 8001cbc:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <ADC_select_CH3+0x2c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <ADC_select_CH3+0x2c>)
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cca:	4905      	ldr	r1, [pc, #20]	; (8001ce0 <ADC_select_CH3+0x2c>)
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <ADC_select_CH3+0x30>)
 8001cce:	f001 fae7 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <ADC_select_CH3+0x28>
	  {
	    Error_Handler();
 8001cd8:	f000 fbdf 	bl	800249a <Error_Handler>
	  }
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200003e4 	.word	0x200003e4
 8001ce4:	200003f4 	.word	0x200003f4

08001ce8 <ADC_select_CH4>:

void ADC_select_CH4(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

	 sConfig.Channel = ADC_CHANNEL_10;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <ADC_select_CH4+0x2c>)
 8001cee:	220a      	movs	r2, #10
 8001cf0:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = 1;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <ADC_select_CH4+0x2c>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <ADC_select_CH4+0x2c>)
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cfe:	4905      	ldr	r1, [pc, #20]	; (8001d14 <ADC_select_CH4+0x2c>)
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <ADC_select_CH4+0x30>)
 8001d02:	f001 facd 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <ADC_select_CH4+0x28>
	  {
	    Error_Handler();
 8001d0c:	f000 fbc5 	bl	800249a <Error_Handler>
	  }
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200003e4 	.word	0x200003e4
 8001d18:	200003f4 	.word	0x200003f4

08001d1c <adc_start>:
//}



void adc_start(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <adc_start+0x10>)
 8001d22:	f000 fff1 	bl	8002d08 <HAL_ADC_Start>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200003f4 	.word	0x200003f4

08001d30 <adc_conversion>:

void adc_conversion(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 8001d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <adc_conversion+0x14>)
 8001d3a:	f001 f8ea 	bl	8002f12 <HAL_ADC_PollForConversion>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003f4 	.word	0x200003f4

08001d48 <adc_value>:

uint16_t adc_value(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <adc_value+0x14>)
 8001d4e:	f001 fa7b 	bl	8003248 <HAL_ADC_GetValue>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29b      	uxth	r3, r3
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003f4 	.word	0x200003f4

08001d60 <adc_stop>:

void adc_stop(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <adc_stop+0x10>)
 8001d66:	f001 f8a1 	bl	8002eac <HAL_ADC_Stop>
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200003f4 	.word	0x200003f4

08001d74 <UART4_Init>:

extern UART_HandleTypeDef huart4;


void UART4_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	  /* USER CODE END UART4_Init 0 */

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  huart4.Instance = UART4;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <UART4_Init+0x4c>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <UART4_Init+0x50>)
 8001d7c:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 115200;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <UART4_Init+0x4c>)
 8001d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d84:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <UART4_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <UART4_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <UART4_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <UART4_Init+0x4c>)
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <UART4_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <UART4_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <UART4_Init+0x4c>)
 8001dac:	f005 faaa 	bl	8007304 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <UART4_Init+0x46>
	  {
	    Error_Handler();
 8001db6:	f000 fb70 	bl	800249a <Error_Handler>
	  }
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */

	}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000508 	.word	0x20000508
 8001dc4:	40004c00 	.word	0x40004c00

08001dc8 <GsmCommands>:




void GsmCommands(uint8_t* cmd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart4, cmd, strlen((char*)cmd));
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fa27 	bl	8000224 <strlen>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4807      	ldr	r0, [pc, #28]	; (8001dfc <GsmCommands+0x34>)
 8001de0:	f005 fc11 	bl	8007606 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart4, Reply, max_buf_len);
 8001de4:	2264      	movs	r2, #100	; 0x64
 8001de6:	4906      	ldr	r1, [pc, #24]	; (8001e00 <GsmCommands+0x38>)
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <GsmCommands+0x34>)
 8001dea:	f005 fc51 	bl	8007690 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8001dee:	2064      	movs	r0, #100	; 0x64
 8001df0:	f000 ff22 	bl	8002c38 <HAL_Delay>

}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000508 	.word	0x20000508
 8001e00:	2000043c 	.word	0x2000043c

08001e04 <Gsm_Init>:



void Gsm_Init()
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

//	HAL_Delay(2000);


	GsmCommands((uint8_t*)"AT\r\n");
 8001e08:	4809      	ldr	r0, [pc, #36]	; (8001e30 <Gsm_Init+0x2c>)
 8001e0a:	f7ff ffdd 	bl	8001dc8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8001e0e:	4809      	ldr	r0, [pc, #36]	; (8001e34 <Gsm_Init+0x30>)
 8001e10:	f7ff ffda 	bl	8001dc8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8001e14:	4808      	ldr	r0, [pc, #32]	; (8001e38 <Gsm_Init+0x34>)
 8001e16:	f7ff ffd7 	bl	8001dc8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8001e1a:	4808      	ldr	r0, [pc, #32]	; (8001e3c <Gsm_Init+0x38>)
 8001e1c:	f7ff ffd4 	bl	8001dc8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"airtelgprs.com\"\r\n");
 8001e20:	4807      	ldr	r0, [pc, #28]	; (8001e40 <Gsm_Init+0x3c>)
 8001e22:	f7ff ffd1 	bl	8001dc8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <Gsm_Init+0x40>)
 8001e28:	f7ff ffce 	bl	8001dc8 <GsmCommands>

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0800d190 	.word	0x0800d190
 8001e34:	0800d198 	.word	0x0800d198
 8001e38:	0800d1a4 	.word	0x0800d1a4
 8001e3c:	0800d1b0 	.word	0x0800d1b0
 8001e40:	0800d1c0 	.word	0x0800d1c0
 8001e44:	0800d1e8 	.word	0x0800d1e8

08001e48 <DataToCloud>:


void DataToCloud(char* Time,char* Date,char* Ch1,char* Ch2,char* Ch3,char* Ch4,char* D1,char* D2,char* D3,char* D4)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8001e4e:	af0a      	add	r7, sp, #40	; 0x28
 8001e50:	f507 740c 	add.w	r4, r7, #560	; 0x230
 8001e54:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 8001e58:	6020      	str	r0, [r4, #0]
 8001e5a:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8001e5e:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 8001e62:	6001      	str	r1, [r0, #0]
 8001e64:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8001e68:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8001e6c:	600a      	str	r2, [r1, #0]
 8001e6e:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001e72:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 8001e76:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 8001e78:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e7c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f000 f8a9 	bl	8001fd8 <url_encode>
 8001e86:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	char* encoded_Date = url_encode(Date);
 8001e8a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e8e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	f000 f8a0 	bl	8001fd8 <url_encode>
 8001e98:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	char* encoded_Ch1 = url_encode(Ch1);
 8001e9c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ea0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	f000 f897 	bl	8001fd8 <url_encode>
 8001eaa:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch2 = url_encode(Ch2);
 8001eae:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001eb2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	f000 f88e 	bl	8001fd8 <url_encode>
 8001ebc:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch3 = url_encode(Ch3);
 8001ec0:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8001ec4:	f000 f888 	bl	8001fd8 <url_encode>
 8001ec8:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch4 = url_encode(Ch4);
 8001ecc:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8001ed0:	f000 f882 	bl	8001fd8 <url_encode>
 8001ed4:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_D1 = url_encode(D1);
 8001ed8:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8001edc:	f000 f87c 	bl	8001fd8 <url_encode>
 8001ee0:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D2 = url_encode(D2);
 8001ee4:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001ee8:	f000 f876 	bl	8001fd8 <url_encode>
 8001eec:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D3 = url_encode(D3);
 8001ef0:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8001ef4:	f000 f870 	bl	8001fd8 <url_encode>
 8001ef8:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D4 = url_encode(D4);
 8001efc:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8001f00:	f000 f86a 	bl	8001fd8 <url_encode>
 8001f04:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8001f08:	482f      	ldr	r0, [pc, #188]	; (8001fc8 <DataToCloud+0x180>)
 8001f0a:	f7ff ff5d 	bl	8001dc8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 8001f0e:	482f      	ldr	r0, [pc, #188]	; (8001fcc <DataToCloud+0x184>)
 8001f10:	f7ff ff5a 	bl	8001dc8 <GsmCommands>


	snprintf((char*)AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbz6D7NQfywY6noMZRLp9HMPNZhQykwC1xSHxD2-VwgPqBtG1Ltj4A32S228G33SFji0/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s&field10=%s\"\r\n",encoded_Time, encoded_Date, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8001f14:	f107 0014 	add.w	r0, r7, #20
 8001f18:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001f1c:	9308      	str	r3, [sp, #32]
 8001f1e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001f22:	9307      	str	r3, [sp, #28]
 8001f24:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001f28:	9306      	str	r3, [sp, #24]
 8001f2a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001f2e:	9305      	str	r3, [sp, #20]
 8001f30:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f34:	9304      	str	r3, [sp, #16]
 8001f36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001f3a:	9303      	str	r3, [sp, #12]
 8001f3c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001f40:	9302      	str	r3, [sp, #8]
 8001f42:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <DataToCloud+0x188>)
 8001f54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f58:	f007 faf2 	bl	8009540 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff31 	bl	8001dc8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8001f66:	481b      	ldr	r0, [pc, #108]	; (8001fd4 <DataToCloud+0x18c>)
 8001f68:	f7ff ff2e 	bl	8001dc8 <GsmCommands>

	free(encoded_Time);
 8001f6c:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8001f70:	f006 fb66 	bl	8008640 <free>
	free(encoded_Date);
 8001f74:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8001f78:	f006 fb62 	bl	8008640 <free>
	free(encoded_Ch1);
 8001f7c:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8001f80:	f006 fb5e 	bl	8008640 <free>
	free(encoded_Ch2);
 8001f84:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8001f88:	f006 fb5a 	bl	8008640 <free>
	free(encoded_Ch3);
 8001f8c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001f90:	f006 fb56 	bl	8008640 <free>
	free(encoded_Ch4);
 8001f94:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8001f98:	f006 fb52 	bl	8008640 <free>
	free(encoded_D1);
 8001f9c:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001fa0:	f006 fb4e 	bl	8008640 <free>
	free(encoded_D2);
 8001fa4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8001fa8:	f006 fb4a 	bl	8008640 <free>
	free(encoded_D3);
 8001fac:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8001fb0:	f006 fb46 	bl	8008640 <free>
	free(encoded_D4);
 8001fb4:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8001fb8:	f006 fb42 	bl	8008640 <free>

}
 8001fbc:	bf00      	nop
 8001fbe:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd90      	pop	{r4, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	0800d1f8 	.word	0x0800d1f8
 8001fcc:	0800d208 	.word	0x0800d208
 8001fd0:	0800d218 	.word	0x0800d218
 8001fd4:	0800d304 	.word	0x0800d304

08001fd8 <url_encode>:



char* url_encode(const char* str)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <url_encode+0xc8>)
 8001fe2:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7fe f91d 	bl	8000224 <strlen>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 fb1b 	bl	8008630 <malloc>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	617b      	str	r3, [r7, #20]

	while (*str) {
 8002002:	e040      	b.n	8002086 <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <url_encode+0xcc>)
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10f      	bne.n	8002038 <url_encode+0x60>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b2d      	cmp	r3, #45	; 0x2d
 800201e:	d00b      	beq.n	8002038 <url_encode+0x60>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b5f      	cmp	r3, #95	; 0x5f
 8002026:	d007      	beq.n	8002038 <url_encode+0x60>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b2e      	cmp	r3, #46	; 0x2e
 800202e:	d003      	beq.n	8002038 <url_encode+0x60>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b7e      	cmp	r3, #126	; 0x7e
 8002036:	d106      	bne.n	8002046 <url_encode+0x6e>
			*ptr++ = *str;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	617a      	str	r2, [r7, #20]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e01c      	b.n	8002080 <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	617a      	str	r2, [r7, #20]
 800204c:	2225      	movs	r2, #37	; 0x25
 800204e:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	441a      	add	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	1c59      	adds	r1, r3, #1
 8002064:	6179      	str	r1, [r7, #20]
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	441a      	add	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1c59      	adds	r1, r3, #1
 800207a:	6179      	str	r1, [r7, #20]
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	701a      	strb	r2, [r3, #0]
		}
		str++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
	while (*str) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ba      	bne.n	8002004 <url_encode+0x2c>
	}
	*ptr = '\0';
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
	return encoded;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0800d318 	.word	0x0800d318
 80020a4:	0800d344 	.word	0x0800d344

080020a8 <USER_I2C1_Init>:




void USER_I2C1_Init()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <USER_I2C1_Init+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <USER_I2C1_Init+0x58>)
 80020b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <USER_I2C1_Init+0x50>)
 80020e6:	f001 fe8b 	bl	8003e00 <HAL_I2C_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <USER_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020f0:	f000 f9d3 	bl	800249a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200004b4 	.word	0x200004b4
 80020fc:	40005400 	.word	0x40005400
 8002100:	000186a0 	.word	0x000186a0

08002104 <SystemClock_Config>:
 extern UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t GPIO[4];

void SystemClock_Config(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b094      	sub	sp, #80	; 0x50
 8002108:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	2234      	movs	r2, #52	; 0x34
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f006 fa9c 	bl	8008650 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <SystemClock_Config+0xd4>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <SystemClock_Config+0xd4>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <SystemClock_Config+0xd4>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002144:	2300      	movs	r3, #0
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <SystemClock_Config+0xd8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <SystemClock_Config+0xd8>)
 8002152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <SystemClock_Config+0xd8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002164:	2302      	movs	r3, #2
 8002166:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002168:	2301      	movs	r3, #1
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800216c:	2310      	movs	r3, #16
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002170:	2302      	movs	r3, #2
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002174:	2300      	movs	r3, #0
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8002178:	2310      	movs	r3, #16
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 800217c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002180:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002182:	2304      	movs	r3, #4
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002186:	2302      	movs	r3, #2
 8002188:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 800218a:	2302      	movs	r3, #2
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fe18 	bl	8006dc8 <HAL_RCC_OscConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 800219e:	f000 f97c 	bl	800249a <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a2:	230f      	movs	r3, #15
 80021a4:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a6:	2302      	movs	r3, #2
 80021a8:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b2:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	2102      	movs	r1, #2
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 fab8 	bl	8006734 <HAL_RCC_ClockConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 80021ca:	f000 f966 	bl	800249a <Error_Handler>
	  }
	}
 80021ce:	bf00      	nop
 80021d0:	3750      	adds	r7, #80	; 0x50
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000

080021e0 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	   /* USER CODE END USART1_Init 0 */

	   /* USER CODE BEGIN USART1_Init 1 */

	   /* USER CODE END USART1_Init 1 */
	   huart1.Instance = USART1;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <user_USART1_UART_Init+0x4c>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <user_USART1_UART_Init+0x50>)
 80021e8:	601a      	str	r2, [r3, #0]
	   huart1.Init.BaudRate = 115200;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <user_USART1_UART_Init+0x4c>)
 80021ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f0:	605a      	str	r2, [r3, #4]
	   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <user_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
	   huart1.Init.StopBits = UART_STOPBITS_1;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <user_USART1_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
	   huart1.Init.Parity = UART_PARITY_NONE;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <user_USART1_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
	   huart1.Init.Mode = UART_MODE_TX_RX;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <user_USART1_UART_Init+0x4c>)
 8002206:	220c      	movs	r2, #12
 8002208:	615a      	str	r2, [r3, #20]
	   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <user_USART1_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
	   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <user_USART1_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
	   if (HAL_UART_Init(&huart1) != HAL_OK)
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <user_USART1_UART_Init+0x4c>)
 8002218:	f005 f874 	bl	8007304 <HAL_UART_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <user_USART1_UART_Init+0x46>
	   {
	     Error_Handler();
 8002222:	f000 f93a 	bl	800249a <Error_Handler>
	   }
	   /* USER CODE BEGIN USART1_Init 2 */

	   /* USER CODE END USART1_Init 2 */

	 }
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200002b0 	.word	0x200002b0
 8002230:	40011000 	.word	0x40011000

08002234 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <user_GPIO_Init+0xb8>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <user_GPIO_Init+0xb8>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6313      	str	r3, [r2, #48]	; 0x30
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <user_GPIO_Init+0xb8>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	4b21      	ldr	r3, [pc, #132]	; (80022ec <user_GPIO_Init+0xb8>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a20      	ldr	r2, [pc, #128]	; (80022ec <user_GPIO_Init+0xb8>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6313      	str	r3, [r2, #48]	; 0x30
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <user_GPIO_Init+0xb8>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <user_GPIO_Init+0xb8>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <user_GPIO_Init+0xb8>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	6313      	str	r3, [r2, #48]	; 0x30
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <user_GPIO_Init+0xb8>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8002298:	787a      	ldrb	r2, [r7, #1]
 800229a:	887b      	ldrh	r3, [r7, #2]
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f001 fd94 	bl	8003dcc <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <user_GPIO_Init+0x84>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 80022aa:	787a      	ldrb	r2, [r7, #1]
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f81f 	bl	80022f4 <gpio_output>
 80022b6:	e008      	b.n	80022ca <user_GPIO_Init+0x96>
     }
     else if(PIN_mode == INPUT)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <user_GPIO_Init+0x96>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 80022be:	787a      	ldrb	r2, [r7, #1]
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f837 	bl	8002338 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <user_GPIO_Init+0xbc>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <user_GPIO_Init+0xbc>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <user_GPIO_Init+0xbc>)
 80022d8:	2203      	movs	r2, #3
 80022da:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <user_GPIO_Init+0xbc>)
 80022de:	2207      	movs	r2, #7
 80022e0:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	200004a0 	.word	0x200004a0

080022f4 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f001 fba2 	bl	8003a74 <HAL_GPIO_Init>
 }
 8002330:	bf00      	nop
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f001 fb82 	bl	8003a74 <HAL_GPIO_Init>
 }
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <data_receive>:




void data_receive()
 {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,15,1000) == HAL_ERROR)
 800237c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002380:	220f      	movs	r2, #15
 8002382:	4905      	ldr	r1, [pc, #20]	; (8002398 <data_receive+0x20>)
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <data_receive+0x24>)
 8002386:	f005 f89c 	bl	80074c2 <HAL_UART_Receive>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <data_receive+0x1c>
	 {
			 Error_Handler();
 8002390:	f000 f883 	bl	800249a <Error_Handler>
	 }
 }
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200002a0 	.word	0x200002a0
 800239c:	200002b0 	.word	0x200002b0

080023a0 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	4619      	mov	r1, r3
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f001 fcf3 	bl	8003d9c <HAL_GPIO_ReadPin>
 80023b6:	4603      	mov	r3, r0

 }
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 80023d0:	787a      	ldrb	r2, [r7, #1]
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f001 fcf8 	bl	8003dcc <HAL_GPIO_WritePin>
    return PinState;
 80023dc:	787b      	ldrb	r3, [r7, #1]
 }
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <uart3_tx>:


extern UART_HandleTypeDef huart3;

void uart3_tx(uint8_t* buf)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7fd ff17 	bl	8000224 <strlen>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <uart3_tx+0x2c>)
 8002402:	f004 ffcc 	bl	800739e <HAL_UART_Transmit>
	 HAL_Delay(100);
 8002406:	2064      	movs	r0, #100	; 0x64
 8002408:	f000 fc16 	bl	8002c38 <HAL_Delay>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000054c 	.word	0x2000054c

08002418 <USER_USART3_UART_Init>:


void USER_USART3_UART_Init()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <USER_USART3_UART_Init+0x50>)
 8002420:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 8002424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002428:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 800243e:	220c      	movs	r2, #12
 8002440:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <USER_USART3_UART_Init+0x4c>)
 8002450:	f004 ff58 	bl	8007304 <HAL_UART_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <USER_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800245a:	f000 f81e 	bl	800249a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000054c 	.word	0x2000054c
 8002468:	40004800 	.word	0x40004800

0800246c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002470:	f000 fb70 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002474:	f7ff fe46 	bl	8002104 <SystemClock_Config>
//  MX_UART4_Init();
//  MX_USART1_UART_Init();
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
//  MX_GPIO_Init();
    USER_GPIO_Init();
 8002478:	f7ff fbb2 	bl	8001be0 <USER_GPIO_Init>
    USER_I2C1_Init();
 800247c:	f7ff fe14 	bl	80020a8 <USER_I2C1_Init>
    USER_USART3_UART_Init();
 8002480:	f7ff ffca 	bl	8002418 <USER_USART3_UART_Init>
    user_USART1_UART_Init();
 8002484:	f7ff feac 	bl	80021e0 <user_USART1_UART_Init>
    UART4_Init();
 8002488:	f7ff fc74 	bl	8001d74 <UART4_Init>
    USER_ADC1_Init();
 800248c:	f7ff fb6e 	bl	8001b6c <USER_ADC1_Init>

    Gsm_Init();
 8002490:	f7ff fcb8 	bl	8001e04 <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  application();
 8002494:	f7fe fde0 	bl	8001058 <application>
 8002498:	e7fc      	b.n	8002494 <main+0x28>

0800249a <Error_Handler>:
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
void Error_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800249e:	b672      	cpsid	i
}
 80024a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <Error_Handler+0x8>

080024a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_MspInit+0x4c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <HAL_MspInit+0x4c>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_MspInit+0x4c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_MspInit+0x4c>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_MspInit+0x4c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024e2:	2007      	movs	r0, #7
 80024e4:	f001 f9e4 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800

080024f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a35      	ldr	r2, [pc, #212]	; (80025e8 <HAL_ADC_MspInit+0xf4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d163      	bne.n	80025de <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a25      	ldr	r2, [pc, #148]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_ADC_MspInit+0xf8>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002586:	2301      	movs	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	4815      	ldr	r0, [pc, #84]	; (80025f0 <HAL_ADC_MspInit+0xfc>)
 800259a:	f001 fa6b 	bl	8003a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800259e:	2360      	movs	r3, #96	; 0x60
 80025a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025a2:	2303      	movs	r3, #3
 80025a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4810      	ldr	r0, [pc, #64]	; (80025f4 <HAL_ADC_MspInit+0x100>)
 80025b2:	f001 fa5f 	bl	8003a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ba:	2303      	movs	r3, #3
 80025bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	480b      	ldr	r0, [pc, #44]	; (80025f8 <HAL_ADC_MspInit+0x104>)
 80025ca:	f001 fa53 	bl	8003a74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2012      	movs	r0, #18
 80025d4:	f001 f977 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80025d8:	2012      	movs	r0, #18
 80025da:	f001 f990 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025de:	bf00      	nop
 80025e0:	3730      	adds	r7, #48	; 0x30
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40012000 	.word	0x40012000
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400

080025fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <HAL_I2C_MspInit+0xa4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d13c      	bne.n	8002698 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_I2C_MspInit+0xa8>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_I2C_MspInit+0xa8>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_I2C_MspInit+0xa8>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800263a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002640:	2312      	movs	r3, #18
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800264c:	2304      	movs	r3, #4
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4814      	ldr	r0, [pc, #80]	; (80026a8 <HAL_I2C_MspInit+0xac>)
 8002658:	f001 fa0c 	bl	8003a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_I2C_MspInit+0xa8>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a0f      	ldr	r2, [pc, #60]	; (80026a4 <HAL_I2C_MspInit+0xa8>)
 8002666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_I2C_MspInit+0xa8>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	201f      	movs	r0, #31
 800267e:	f001 f922 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002682:	201f      	movs	r0, #31
 8002684:	f001 f93b 	bl	80038fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	2020      	movs	r0, #32
 800268e:	f001 f91a 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002692:	2020      	movs	r0, #32
 8002694:	f001 f933 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002698:	bf00      	nop
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40005400 	.word	0x40005400
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020400 	.word	0x40020400

080026ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a67      	ldr	r2, [pc, #412]	; (8002868 <HAL_UART_MspInit+0x1bc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d134      	bne.n	8002738 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80026d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b63      	ldr	r3, [pc, #396]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e6:	623b      	str	r3, [r7, #32]
 80026e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a5e      	ldr	r2, [pc, #376]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b5c      	ldr	r3, [pc, #368]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002706:	2303      	movs	r3, #3
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002716:	2308      	movs	r3, #8
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271e:	4619      	mov	r1, r3
 8002720:	4853      	ldr	r0, [pc, #332]	; (8002870 <HAL_UART_MspInit+0x1c4>)
 8002722:	f001 f9a7 	bl	8003a74 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2034      	movs	r0, #52	; 0x34
 800272c:	f001 f8cb 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002730:	2034      	movs	r0, #52	; 0x34
 8002732:	f001 f8e4 	bl	80038fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002736:	e092      	b.n	800285e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4d      	ldr	r2, [pc, #308]	; (8002874 <HAL_UART_MspInit+0x1c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d135      	bne.n	80027ae <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	4b49      	ldr	r3, [pc, #292]	; (800286c <HAL_UART_MspInit+0x1c0>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a48      	ldr	r2, [pc, #288]	; (800286c <HAL_UART_MspInit+0x1c0>)
 800274c:	f043 0310 	orr.w	r3, r3, #16
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b46      	ldr	r3, [pc, #280]	; (800286c <HAL_UART_MspInit+0x1c0>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	4b42      	ldr	r3, [pc, #264]	; (800286c <HAL_UART_MspInit+0x1c0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a41      	ldr	r2, [pc, #260]	; (800286c <HAL_UART_MspInit+0x1c0>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <HAL_UART_MspInit+0x1c0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800277a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800278c:	2307      	movs	r3, #7
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002794:	4619      	mov	r1, r3
 8002796:	4836      	ldr	r0, [pc, #216]	; (8002870 <HAL_UART_MspInit+0x1c4>)
 8002798:	f001 f96c 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	2025      	movs	r0, #37	; 0x25
 80027a2:	f001 f890 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027a6:	2025      	movs	r0, #37	; 0x25
 80027a8:	f001 f8a9 	bl	80038fe <HAL_NVIC_EnableIRQ>
}
 80027ac:	e057      	b.n	800285e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_UART_MspInit+0x1cc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d152      	bne.n	800285e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a2a      	ldr	r2, [pc, #168]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c6:	6413      	str	r3, [r2, #64]	; 0x40
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	6313      	str	r3, [r2, #48]	; 0x30
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_UART_MspInit+0x1c0>)
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_UART_MspInit+0x1c0>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800280c:	2320      	movs	r3, #32
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800281c:	2307      	movs	r3, #7
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	4619      	mov	r1, r3
 8002826:	4815      	ldr	r0, [pc, #84]	; (800287c <HAL_UART_MspInit+0x1d0>)
 8002828:	f001 f924 	bl	8003a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800282c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800283e:	2307      	movs	r3, #7
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002846:	4619      	mov	r1, r3
 8002848:	480d      	ldr	r0, [pc, #52]	; (8002880 <HAL_UART_MspInit+0x1d4>)
 800284a:	f001 f913 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2027      	movs	r0, #39	; 0x27
 8002854:	f001 f837 	bl	80038c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002858:	2027      	movs	r0, #39	; 0x27
 800285a:	f001 f850 	bl	80038fe <HAL_NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3738      	adds	r7, #56	; 0x38
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40004c00 	.word	0x40004c00
 800286c:	40023800 	.word	0x40023800
 8002870:	40020000 	.word	0x40020000
 8002874:	40011000 	.word	0x40011000
 8002878:	40004800 	.word	0x40004800
 800287c:	40020800 	.word	0x40020800
 8002880:	40020400 	.word	0x40020400

08002884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002888:	e7fe      	b.n	8002888 <NMI_Handler+0x4>

0800288a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800288e:	e7fe      	b.n	800288e <HardFault_Handler+0x4>

08002890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002894:	e7fe      	b.n	8002894 <MemManage_Handler+0x4>

08002896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <BusFault_Handler+0x4>

0800289c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <UsageFault_Handler+0x4>

080028a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d0:	f000 f992 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <ADC_IRQHandler+0x10>)
 80028de:	f000 fba3 	bl	8003028 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200003f4 	.word	0x200003f4

080028ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <I2C1_EV_IRQHandler+0x10>)
 80028f2:	f001 fee9 	bl	80046c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200004b4 	.word	0x200004b4

08002900 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <I2C1_ER_IRQHandler+0x10>)
 8002906:	f002 f850 	bl	80049aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200004b4 	.word	0x200004b4

08002914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <USART1_IRQHandler+0x10>)
 800291a:	f004 fee9 	bl	80076f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200002b0 	.word	0x200002b0

08002928 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <USART3_IRQHandler+0x10>)
 800292e:	f004 fedf 	bl	80076f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000054c 	.word	0x2000054c

0800293c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <UART4_IRQHandler+0x10>)
 8002942:	f004 fed5 	bl	80076f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000508 	.word	0x20000508

08002950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return 1;
 8002954:	2301      	movs	r3, #1
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <_kill>:

int _kill(int pid, int sig)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800296a:	f005 fe37 	bl	80085dc <__errno>
 800296e:	4603      	mov	r3, r0
 8002970:	2216      	movs	r2, #22
 8002972:	601a      	str	r2, [r3, #0]
  return -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <_exit>:

void _exit (int status)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ffe7 	bl	8002960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002992:	e7fe      	b.n	8002992 <_exit+0x12>

08002994 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e00a      	b.n	80029bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029a6:	f3af 8000 	nop.w
 80029aa:	4601      	mov	r1, r0
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	60ba      	str	r2, [r7, #8]
 80029b2:	b2ca      	uxtb	r2, r1
 80029b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	dbf0      	blt.n	80029a6 <_read+0x12>
  }

  return len;
 80029c4:	687b      	ldr	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e009      	b.n	80029f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	60ba      	str	r2, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3301      	adds	r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbf1      	blt.n	80029e0 <_write+0x12>
  }
  return len;
 80029fc:	687b      	ldr	r3, [r7, #4]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_close>:

int _close(int file)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_isatty>:

int _isatty(int file)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <_sbrk+0x5c>)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <_sbrk+0x60>)
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <_sbrk+0x64>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <_sbrk+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d207      	bcs.n	8002ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa0:	f005 fd9c 	bl	80085dc <__errno>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e009      	b.n	8002ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <_sbrk+0x64>)
 8002ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20020000 	.word	0x20020000
 8002ad0:	00000400 	.word	0x00000400
 8002ad4:	20000590 	.word	0x20000590
 8002ad8:	200005a8 	.word	0x200005a8

08002adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <SystemInit+0x20>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <SystemInit+0x20>)
 8002ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8002b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b04:	480d      	ldr	r0, [pc, #52]	; (8002b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b06:	490e      	ldr	r1, [pc, #56]	; (8002b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b08:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b0c:	e002      	b.n	8002b14 <LoopCopyDataInit>

08002b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b12:	3304      	adds	r3, #4

08002b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b18:	d3f9      	bcc.n	8002b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b1c:	4c0b      	ldr	r4, [pc, #44]	; (8002b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b20:	e001      	b.n	8002b26 <LoopFillZerobss>

08002b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b24:	3204      	adds	r2, #4

08002b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b28:	d3fb      	bcc.n	8002b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b2a:	f7ff ffd7 	bl	8002adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2e:	f005 fd5b 	bl	80085e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b32:	f7ff fc9b 	bl	800246c <main>
  bx  lr    
 8002b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b40:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002b44:	0800d858 	.word	0x0800d858
  ldr r2, =_sbss
 8002b48:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b4c:	200005a8 	.word	0x200005a8

08002b50 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <CAN1_RX0_IRQHandler>
	...

08002b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_Init+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_Init+0x40>)
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_Init+0x40>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_Init+0x40>)
 8002b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_Init+0x40>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a07      	ldr	r2, [pc, #28]	; (8002b94 <HAL_Init+0x40>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 fe97 	bl	80038b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f000 f808 	bl	8002b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b88:	f7ff fc8c 	bl	80024a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00

08002b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_InitTick+0x54>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_InitTick+0x58>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 feaf 	bl	800391a <HAL_SYSTICK_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d80a      	bhi.n	8002be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f000 fe77 	bl	80038c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_InitTick+0x5c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000008 	.word	0x20000008
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20000594 	.word	0x20000594

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000594 	.word	0x20000594

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e033      	b.n	8002cfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fc28 	bl	80024f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d118      	bne.n	8002cf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cc6:	f023 0302 	bic.w	r3, r3, #2
 8002cca:	f043 0202 	orr.w	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fc16 	bl	8003504 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
 8002cee:	e001      	b.n	8002cf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_Start+0x1a>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e0b2      	b.n	8002e88 <HAL_ADC_Start+0x180>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d018      	beq.n	8002d6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d48:	4b52      	ldr	r3, [pc, #328]	; (8002e94 <HAL_ADC_Start+0x18c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_ADC_Start+0x190>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9a      	lsrs	r2, r3, #18
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d17a      	bne.n	8002e6e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002da2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db6:	d106      	bne.n	8002dc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	f023 0206 	bic.w	r2, r3, #6
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44
 8002dc4:	e002      	b.n	8002dcc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_ADC_Start+0x194>)
 8002dd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002de0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d12a      	bne.n	8002e44 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2b      	ldr	r2, [pc, #172]	; (8002ea0 <HAL_ADC_Start+0x198>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d015      	beq.n	8002e24 <HAL_ADC_Start+0x11c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <HAL_ADC_Start+0x19c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d105      	bne.n	8002e0e <HAL_ADC_Start+0x106>
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_ADC_Start+0x194>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <HAL_ADC_Start+0x1a0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d136      	bne.n	8002e86 <HAL_ADC_Start+0x17e>
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_ADC_Start+0x194>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d130      	bne.n	8002e86 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d129      	bne.n	8002e86 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e020      	b.n	8002e86 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_ADC_Start+0x198>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d11b      	bne.n	8002e86 <HAL_ADC_Start+0x17e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d114      	bne.n	8002e86 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	e00b      	b.n	8002e86 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	20000000 	.word	0x20000000
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	40012300 	.word	0x40012300
 8002ea0:	40012000 	.word	0x40012000
 8002ea4:	40012100 	.word	0x40012100
 8002ea8:	40012200 	.word	0x40012200

08002eac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Stop+0x16>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e021      	b.n	8002f06 <HAL_ADC_Stop+0x5a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	f043 0201 	orr.w	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	d113      	bne.n	8002f58 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3e:	d10b      	bne.n	8002f58 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e063      	b.n	8003020 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002f58:	f7ff fe62 	bl	8002c20 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f5e:	e021      	b.n	8002fa4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d01d      	beq.n	8002fa4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_ADC_PollForConversion+0x6c>
 8002f6e:	f7ff fe57 	bl	8002c20 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d212      	bcs.n	8002fa4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d00b      	beq.n	8002fa4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e03d      	b.n	8003020 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d1d6      	bne.n	8002f60 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0212 	mvn.w	r2, #18
 8002fba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d123      	bne.n	800301e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d11f      	bne.n	800301e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d111      	bne.n	800301e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d049      	beq.n	80030f2 <HAL_ADC_IRQHandler+0xca>
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d046      	beq.n	80030f2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d12b      	bne.n	80030e2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d127      	bne.n	80030e2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d119      	bne.n	80030e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0220 	bic.w	r2, r2, #32
 80030bc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8bd 	bl	8003262 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0212 	mvn.w	r2, #18
 80030f0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003100:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d057      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x190>
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d054      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d139      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800314c:	2b00      	cmp	r3, #0
 800314e:	d12b      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d124      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d11d      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	d119      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003182:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 faa7 	bl	80036fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f06f 020c 	mvn.w	r2, #12
 80031b6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d017      	beq.n	80031fe <HAL_ADC_IRQHandler+0x1d6>
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d014      	beq.n	80031fe <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d10d      	bne.n	80031fe <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f841 	bl	8003276 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0201 	mvn.w	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800320c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <HAL_ADC_IRQHandler+0x218>
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f043 0202 	orr.w	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f06f 0220 	mvn.w	r2, #32
 800322e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f82a 	bl	800328a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f06f 0220 	mvn.w	r2, #32
 800323e:	601a      	str	r2, [r3, #0]
  }
}
 8003240:	bf00      	nop
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x1c>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e113      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x244>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d925      	bls.n	8003318 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68d9      	ldr	r1, [r3, #12]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	3b1e      	subs	r3, #30
 80032e2:	2207      	movs	r2, #7
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43da      	mvns	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	400a      	ands	r2, r1
 80032f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	4618      	mov	r0, r3
 8003304:	4603      	mov	r3, r0
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4403      	add	r3, r0
 800330a:	3b1e      	subs	r3, #30
 800330c:	409a      	lsls	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	e022      	b.n	800335e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	2207      	movs	r2, #7
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	400a      	ands	r2, r1
 800333a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6919      	ldr	r1, [r3, #16]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	4618      	mov	r0, r3
 800334e:	4603      	mov	r3, r0
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4403      	add	r3, r0
 8003354:	409a      	lsls	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d824      	bhi.n	80033b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	3b05      	subs	r3, #5
 8003378:	221f      	movs	r2, #31
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	400a      	ands	r2, r1
 8003386:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	3b05      	subs	r3, #5
 80033a2:	fa00 f203 	lsl.w	r2, r0, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
 80033ae:	e04c      	b.n	800344a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d824      	bhi.n	8003402 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	3b23      	subs	r3, #35	; 0x23
 80033ca:	221f      	movs	r2, #31
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43da      	mvns	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	400a      	ands	r2, r1
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4618      	mov	r0, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3b23      	subs	r3, #35	; 0x23
 80033f4:	fa00 f203 	lsl.w	r2, r0, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003400:	e023      	b.n	800344a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b41      	subs	r3, #65	; 0x41
 8003414:	221f      	movs	r2, #31
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	400a      	ands	r2, r1
 8003422:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	3b41      	subs	r3, #65	; 0x41
 800343e:	fa00 f203 	lsl.w	r2, r0, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800344a:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <HAL_ADC_ConfigChannel+0x250>)
 800344c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <HAL_ADC_ConfigChannel+0x254>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10f      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x1d8>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b12      	cmp	r3, #18
 800345e:	d10b      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_ADC_ConfigChannel+0x254>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d12b      	bne.n	80034da <HAL_ADC_ConfigChannel+0x23a>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <HAL_ADC_ConfigChannel+0x1f4>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b11      	cmp	r3, #17
 8003492:	d122      	bne.n	80034da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <HAL_ADC_ConfigChannel+0x258>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d111      	bne.n	80034da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_ADC_ConfigChannel+0x25c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a11      	ldr	r2, [pc, #68]	; (8003500 <HAL_ADC_ConfigChannel+0x260>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	0c9a      	lsrs	r2, r3, #18
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034cc:	e002      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f9      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40012300 	.word	0x40012300
 80034f4:	40012000 	.word	0x40012000
 80034f8:	10000012 	.word	0x10000012
 80034fc:	20000000 	.word	0x20000000
 8003500:	431bde83 	.word	0x431bde83

08003504 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800350c:	4b79      	ldr	r3, [pc, #484]	; (80036f4 <ADC_Init+0x1f0>)
 800350e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	021a      	lsls	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800355c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <ADC_Init+0x1f4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d022      	beq.n	80035e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6899      	ldr	r1, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6899      	ldr	r1, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	e00f      	b.n	8003602 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003600:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0202 	bic.w	r2, r2, #2
 8003610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6899      	ldr	r1, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7e1b      	ldrb	r3, [r3, #24]
 800361c:	005a      	lsls	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800364e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	3b01      	subs	r3, #1
 800365c:	035a      	lsls	r2, r3, #13
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	e007      	b.n	8003678 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003676:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	3b01      	subs	r3, #1
 8003694:	051a      	lsls	r2, r3, #20
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ba:	025a      	lsls	r2, r3, #9
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	029a      	lsls	r2, r3, #10
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40012300 	.word	0x40012300
 80036f8:	0f000001 	.word	0x0f000001

080036fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	; (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	; (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	; 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387c:	d301      	bcc.n	8003882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800387e:	2301      	movs	r3, #1
 8003880:	e00f      	b.n	80038a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <SysTick_Config+0x40>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388a:	210f      	movs	r1, #15
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	f7ff ff8e 	bl	80037b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <SysTick_Config+0x40>)
 8003896:	2200      	movs	r2, #0
 8003898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389a:	4b04      	ldr	r3, [pc, #16]	; (80038ac <SysTick_Config+0x40>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000e010 	.word	0xe000e010

080038b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff29 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d8:	f7ff ff3e 	bl	8003758 <__NVIC_GetPriorityGrouping>
 80038dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	6978      	ldr	r0, [r7, #20]
 80038e4:	f7ff ff8e 	bl	8003804 <NVIC_EncodePriority>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff5d 	bl	80037b0 <__NVIC_SetPriority>
}
 80038f6:	bf00      	nop
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff31 	bl	8003774 <__NVIC_EnableIRQ>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffa2 	bl	800386c <SysTick_Config>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003940:	f7ff f96e 	bl	8002c20 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d008      	beq.n	8003964 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e052      	b.n	8003a0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0216 	bic.w	r2, r2, #22
 8003972:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003982:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <HAL_DMA_Abort+0x62>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0208 	bic.w	r2, r2, #8
 80039a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b4:	e013      	b.n	80039de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039b6:	f7ff f933 	bl	8002c20 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d90c      	bls.n	80039de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2203      	movs	r2, #3
 80039ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e015      	b.n	8003a0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e4      	bne.n	80039b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	223f      	movs	r2, #63	; 0x3f
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d004      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e00c      	b.n	8003a4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2205      	movs	r2, #5
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e165      	b.n	8003d5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a90:	2201      	movs	r2, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	f040 8154 	bne.w	8003d56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d005      	beq.n	8003ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d130      	bne.n	8003b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003afc:	2201      	movs	r2, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 0201 	and.w	r2, r3, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d017      	beq.n	8003b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d123      	bne.n	8003bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	08da      	lsrs	r2, r3, #3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3208      	adds	r2, #8
 8003b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	220f      	movs	r2, #15
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	08da      	lsrs	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	69b9      	ldr	r1, [r7, #24]
 8003bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0203 	and.w	r2, r3, #3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80ae 	beq.w	8003d56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	4b5d      	ldr	r3, [pc, #372]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c08:	6453      	str	r3, [r2, #68]	; 0x44
 8003c0a:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c16:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4f      	ldr	r2, [pc, #316]	; (8003d7c <HAL_GPIO_Init+0x308>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d025      	beq.n	8003c8e <HAL_GPIO_Init+0x21a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4e      	ldr	r2, [pc, #312]	; (8003d80 <HAL_GPIO_Init+0x30c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01f      	beq.n	8003c8a <HAL_GPIO_Init+0x216>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4d      	ldr	r2, [pc, #308]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d019      	beq.n	8003c86 <HAL_GPIO_Init+0x212>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <HAL_GPIO_Init+0x314>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a4b      	ldr	r2, [pc, #300]	; (8003d8c <HAL_GPIO_Init+0x318>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00d      	beq.n	8003c7e <HAL_GPIO_Init+0x20a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a4a      	ldr	r2, [pc, #296]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <HAL_GPIO_Init+0x206>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a49      	ldr	r2, [pc, #292]	; (8003d94 <HAL_GPIO_Init+0x320>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_GPIO_Init+0x202>
 8003c72:	2306      	movs	r3, #6
 8003c74:	e00c      	b.n	8003c90 <HAL_GPIO_Init+0x21c>
 8003c76:	2307      	movs	r3, #7
 8003c78:	e00a      	b.n	8003c90 <HAL_GPIO_Init+0x21c>
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	e008      	b.n	8003c90 <HAL_GPIO_Init+0x21c>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x21c>
 8003c82:	2303      	movs	r3, #3
 8003c84:	e004      	b.n	8003c90 <HAL_GPIO_Init+0x21c>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x21c>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x21c>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f002 0203 	and.w	r2, r2, #3
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	4093      	lsls	r3, r2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca0:	4935      	ldr	r1, [pc, #212]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cae:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd2:	4a31      	ldr	r2, [pc, #196]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd8:	4b2f      	ldr	r3, [pc, #188]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d02:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d26:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d50:	4a11      	ldr	r2, [pc, #68]	; (8003d98 <HAL_GPIO_Init+0x324>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	f67f ae96 	bls.w	8003a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	40020000 	.word	0x40020000
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020800 	.word	0x40020800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40021400 	.word	0x40021400
 8003d94:	40021800 	.word	0x40021800
 8003d98:	40013c00 	.word	0x40013c00

08003d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	e001      	b.n	8003dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ddc:	787b      	ldrb	r3, [r7, #1]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003de8:	e003      	b.n	8003df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	041a      	lsls	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e12b      	b.n	800406a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fe fbe8 	bl	80025fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e64:	f002 fd58 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 8003e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4a81      	ldr	r2, [pc, #516]	; (8004074 <HAL_I2C_Init+0x274>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d807      	bhi.n	8003e84 <HAL_I2C_Init+0x84>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a80      	ldr	r2, [pc, #512]	; (8004078 <HAL_I2C_Init+0x278>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf94      	ite	ls
 8003e7c:	2301      	movls	r3, #1
 8003e7e:	2300      	movhi	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e006      	b.n	8003e92 <HAL_I2C_Init+0x92>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a7d      	ldr	r2, [pc, #500]	; (800407c <HAL_I2C_Init+0x27c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	bf94      	ite	ls
 8003e8c:	2301      	movls	r3, #1
 8003e8e:	2300      	movhi	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0e7      	b.n	800406a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a78      	ldr	r2, [pc, #480]	; (8004080 <HAL_I2C_Init+0x280>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0c9b      	lsrs	r3, r3, #18
 8003ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a6a      	ldr	r2, [pc, #424]	; (8004074 <HAL_I2C_Init+0x274>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d802      	bhi.n	8003ed4 <HAL_I2C_Init+0xd4>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	e009      	b.n	8003ee8 <HAL_I2C_Init+0xe8>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	4a69      	ldr	r2, [pc, #420]	; (8004084 <HAL_I2C_Init+0x284>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	495c      	ldr	r1, [pc, #368]	; (8004074 <HAL_I2C_Init+0x274>)
 8003f04:	428b      	cmp	r3, r1
 8003f06:	d819      	bhi.n	8003f3c <HAL_I2C_Init+0x13c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e59      	subs	r1, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f1c:	400b      	ands	r3, r1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_I2C_Init+0x138>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1e59      	subs	r1, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	e051      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	e04f      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <HAL_I2C_Init+0x168>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e58      	subs	r0, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e012      	b.n	8003f8e <HAL_I2C_Init+0x18e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e58      	subs	r0, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	0099      	lsls	r1, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Init+0x196>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e022      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10e      	bne.n	8003fbc <HAL_I2C_Init+0x1bc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1e58      	subs	r0, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	440b      	add	r3, r1
 8003fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fba:	e00f      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e58      	subs	r0, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	0099      	lsls	r1, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	6809      	ldr	r1, [r1, #0]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800400a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6911      	ldr	r1, [r2, #16]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68d2      	ldr	r2, [r2, #12]
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	430b      	orrs	r3, r1
 800401e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	000186a0 	.word	0x000186a0
 8004078:	001e847f 	.word	0x001e847f
 800407c:	003d08ff 	.word	0x003d08ff
 8004080:	431bde83 	.word	0x431bde83
 8004084:	10624dd3 	.word	0x10624dd3

08004088 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	4608      	mov	r0, r1
 8004092:	4611      	mov	r1, r2
 8004094:	461a      	mov	r2, r3
 8004096:	4603      	mov	r3, r0
 8004098:	817b      	strh	r3, [r7, #10]
 800409a:	460b      	mov	r3, r1
 800409c:	813b      	strh	r3, [r7, #8]
 800409e:	4613      	mov	r3, r2
 80040a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040a2:	f7fe fdbd 	bl	8002c20 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	f040 80d9 	bne.w	8004268 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2319      	movs	r3, #25
 80040bc:	2201      	movs	r2, #1
 80040be:	496d      	ldr	r1, [pc, #436]	; (8004274 <HAL_I2C_Mem_Write+0x1ec>)
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f002 f90d 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
 80040ce:	e0cc      	b.n	800426a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_I2C_Mem_Write+0x56>
 80040da:	2302      	movs	r3, #2
 80040dc:	e0c5      	b.n	800426a <HAL_I2C_Mem_Write+0x1e2>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d007      	beq.n	8004104 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004112:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2221      	movs	r2, #33	; 0x21
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	; 0x40
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a4d      	ldr	r2, [pc, #308]	; (8004278 <HAL_I2C_Mem_Write+0x1f0>)
 8004144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004146:	88f8      	ldrh	r0, [r7, #6]
 8004148:	893a      	ldrh	r2, [r7, #8]
 800414a:	8979      	ldrh	r1, [r7, #10]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4603      	mov	r3, r0
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f001 fe9c 	bl	8005e94 <I2C_RequestMemoryWrite>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d052      	beq.n	8004208 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e081      	b.n	800426a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f002 f98e 	bl	800648c <I2C_WaitOnTXEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b04      	cmp	r3, #4
 800417c:	d107      	bne.n	800418e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06b      	b.n	800426a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d11b      	bne.n	8004208 <HAL_I2C_Mem_Write+0x180>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d017      	beq.n	8004208 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1aa      	bne.n	8004166 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f002 f97a 	bl	800650e <I2C_WaitOnBTFFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00d      	beq.n	800423c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2b04      	cmp	r3, #4
 8004226:	d107      	bne.n	8004238 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004236:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e016      	b.n	800426a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	00100002 	.word	0x00100002
 8004278:	ffff0000 	.word	0xffff0000

0800427c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08c      	sub	sp, #48	; 0x30
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4603      	mov	r3, r0
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	460b      	mov	r3, r1
 8004290:	813b      	strh	r3, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004296:	f7fe fcc3 	bl	8002c20 <HAL_GetTick>
 800429a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	f040 8208 	bne.w	80046ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2319      	movs	r3, #25
 80042b0:	2201      	movs	r2, #1
 80042b2:	497b      	ldr	r1, [pc, #492]	; (80044a0 <HAL_I2C_Mem_Read+0x224>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f002 f813 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
 80042c2:	e1fb      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Mem_Read+0x56>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e1f4      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d007      	beq.n	80042f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2222      	movs	r2, #34	; 0x22
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	; 0x40
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a5b      	ldr	r2, [pc, #364]	; (80044a4 <HAL_I2C_Mem_Read+0x228>)
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800433a:	88f8      	ldrh	r0, [r7, #6]
 800433c:	893a      	ldrh	r2, [r7, #8]
 800433e:	8979      	ldrh	r1, [r7, #10]
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	4603      	mov	r3, r0
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f001 fe38 	bl	8005fc0 <I2C_RequestMemoryRead>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1b0      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d113      	bne.n	800438a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e184      	b.n	8004694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	2b01      	cmp	r3, #1
 8004390:	d11b      	bne.n	80043ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e164      	b.n	8004694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d11b      	bne.n	800440a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	e144      	b.n	8004694 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004420:	e138      	b.n	8004694 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	2b03      	cmp	r3, #3
 8004428:	f200 80f1 	bhi.w	800460e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	2b01      	cmp	r3, #1
 8004432:	d123      	bne.n	800447c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f002 f8db 	bl	80065f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e139      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	855a      	strh	r2, [r3, #42]	; 0x2a
 800447a:	e10b      	b.n	8004694 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	2b02      	cmp	r3, #2
 8004482:	d14e      	bne.n	8004522 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	2200      	movs	r2, #0
 800448c:	4906      	ldr	r1, [pc, #24]	; (80044a8 <HAL_I2C_Mem_Read+0x22c>)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f001 ff26 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e10e      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
 800449e:	bf00      	nop
 80044a0:	00100002 	.word	0x00100002
 80044a4:	ffff0000 	.word	0xffff0000
 80044a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004520:	e0b8      	b.n	8004694 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	2200      	movs	r2, #0
 800452a:	4966      	ldr	r1, [pc, #408]	; (80046c4 <HAL_I2C_Mem_Read+0x448>)
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f001 fed7 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0bf      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	2200      	movs	r2, #0
 8004586:	494f      	ldr	r1, [pc, #316]	; (80046c4 <HAL_I2C_Mem_Read+0x448>)
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f001 fea9 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e091      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800460c:	e042      	b.n	8004694 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f001 ffee 	bl	80065f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e04c      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b04      	cmp	r3, #4
 8004660:	d118      	bne.n	8004694 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f aec2 	bne.w	8004422 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	00010004 	.word	0x00010004

080046c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d003      	beq.n	8004700 <HAL_I2C_EV_IRQHandler+0x38>
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	f040 80c1 	bne.w	8004882 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10d      	bne.n	8004736 <HAL_I2C_EV_IRQHandler+0x6e>
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004720:	d003      	beq.n	800472a <HAL_I2C_EV_IRQHandler+0x62>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004728:	d101      	bne.n	800472e <HAL_I2C_EV_IRQHandler+0x66>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_I2C_EV_IRQHandler+0x68>
 800472e:	2300      	movs	r3, #0
 8004730:	2b01      	cmp	r3, #1
 8004732:	f000 8132 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0x92>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	0a5b      	lsrs	r3, r3, #9
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d006      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f001 ffd6 	bl	80066fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fd83 	bl	800525e <I2C_Master_SB>
 8004758:	e092      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	08db      	lsrs	r3, r3, #3
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0xb2>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	0a5b      	lsrs	r3, r3, #9
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fdf9 	bl	800536a <I2C_Master_ADD10>
 8004778:	e082      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d009      	beq.n	800479a <HAL_I2C_EV_IRQHandler+0xd2>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a5b      	lsrs	r3, r3, #9
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fe13 	bl	80053be <I2C_Master_ADDR>
 8004798:	e072      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d03b      	beq.n	800481e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b4:	f000 80f3 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	09db      	lsrs	r3, r3, #7
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00f      	beq.n	80047e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	0a9b      	lsrs	r3, r3, #10
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d103      	bne.n	80047e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f9f3 	bl	8004bc8 <I2C_MasterTransmit_TXE>
 80047e2:	e04d      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80d6 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	0a5b      	lsrs	r3, r3, #9
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80cf 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004800:	7bbb      	ldrb	r3, [r7, #14]
 8004802:	2b21      	cmp	r3, #33	; 0x21
 8004804:	d103      	bne.n	800480e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa7a 	bl	8004d00 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800480c:	e0c7      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	f040 80c4 	bne.w	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fae8 	bl	8004dec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481c:	e0bf      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482c:	f000 80b7 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	099b      	lsrs	r3, r3, #6
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00f      	beq.n	800485c <HAL_I2C_EV_IRQHandler+0x194>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	0a9b      	lsrs	r3, r3, #10
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_I2C_EV_IRQHandler+0x194>
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	089b      	lsrs	r3, r3, #2
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fb5d 	bl	8004f14 <I2C_MasterReceive_RXNE>
 800485a:	e011      	b.n	8004880 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 809a 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	0a5b      	lsrs	r3, r3, #9
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8093 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fc06 	bl	800508a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487e:	e08e      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004880:	e08d      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e007      	b.n	80048a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d012      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	0a5b      	lsrs	r3, r3, #9
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00c      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048cc:	69b9      	ldr	r1, [r7, #24]
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 ffc4 	bl	800585c <I2C_Slave_ADDR>
 80048d4:	e066      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	0a5b      	lsrs	r3, r3, #9
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fffe 	bl	80058f0 <I2C_Slave_STOPF>
 80048f4:	e056      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	2b21      	cmp	r3, #33	; 0x21
 80048fa:	d002      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x23a>
 80048fc:	7bbb      	ldrb	r3, [r7, #14]
 80048fe:	2b29      	cmp	r3, #41	; 0x29
 8004900:	d125      	bne.n	800494e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	09db      	lsrs	r3, r3, #7
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <HAL_I2C_EV_IRQHandler+0x266>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	0a9b      	lsrs	r3, r3, #10
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_I2C_EV_IRQHandler+0x266>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d103      	bne.n	800492e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 feda 	bl	80056e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800492c:	e039      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d033      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	0a5b      	lsrs	r3, r3, #9
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02d      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 ff07 	bl	800575a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494c:	e029      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x2b2>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	0a9b      	lsrs	r3, r3, #10
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 ff12 	bl	800579c <I2C_SlaveReceive_RXNE>
 8004978:	e014      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00e      	beq.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 ff40 	bl	8005818 <I2C_SlaveReceive_BTF>
 8004998:	e004      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b08a      	sub	sp, #40	; 0x28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	0a5b      	lsrs	r3, r3, #9
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00e      	beq.n	8004a22 <HAL_I2C_ER_IRQHandler+0x78>
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a20:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	0a9b      	lsrs	r3, r3, #10
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d03f      	beq.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d039      	beq.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a54:	7ebb      	ldrb	r3, [r7, #26]
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d112      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10f      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b21      	cmp	r3, #33	; 0x21
 8004a64:	d008      	beq.n	8004a78 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b29      	cmp	r3, #41	; 0x29
 8004a6a:	d005      	beq.n	8004a78 <HAL_I2C_ER_IRQHandler+0xce>
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	2b28      	cmp	r3, #40	; 0x28
 8004a70:	d106      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b21      	cmp	r3, #33	; 0x21
 8004a76:	d103      	bne.n	8004a80 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f001 f869 	bl	8005b50 <I2C_Slave_AF>
 8004a7e:	e016      	b.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a88:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a92:	7efb      	ldrb	r3, [r7, #27]
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d002      	beq.n	8004a9e <HAL_I2C_ER_IRQHandler+0xf4>
 8004a98:	7efb      	ldrb	r3, [r7, #27]
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d107      	bne.n	8004aae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	0adb      	lsrs	r3, r3, #11
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_I2C_ER_IRQHandler+0x12e>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ad6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f001 f8a0 	bl	8005c30 <I2C_ITError>
  }
}
 8004af0:	bf00      	nop
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
 8004b54:	4613      	mov	r3, r2
 8004b56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d150      	bne.n	8004c90 <I2C_MasterTransmit_TXE+0xc8>
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b21      	cmp	r3, #33	; 0x21
 8004bf2:	d14d      	bne.n	8004c90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d01d      	beq.n	8004c36 <I2C_MasterTransmit_TXE+0x6e>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d01a      	beq.n	8004c36 <I2C_MasterTransmit_TXE+0x6e>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c06:	d016      	beq.n	8004c36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2211      	movs	r2, #17
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff62 	bl	8004af8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c34:	e060      	b.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d107      	bne.n	8004c80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ff7d 	bl	8004b78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c7e:	e03b      	b.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff35 	bl	8004af8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c8e:	e033      	b.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b21      	cmp	r3, #33	; 0x21
 8004c94:	d005      	beq.n	8004ca2 <I2C_MasterTransmit_TXE+0xda>
 8004c96:	7bbb      	ldrb	r3, [r7, #14]
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d12d      	bne.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b22      	cmp	r3, #34	; 0x22
 8004ca0:	d12a      	bne.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d108      	bne.n	8004cbe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cbc:	e01c      	b.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d103      	bne.n	8004cd2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f88e 	bl	8004dec <I2C_MemoryTransmit_TXE_BTF>
}
 8004cd0:	e012      	b.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cf6:	e7ff      	b.n	8004cf8 <I2C_MasterTransmit_TXE+0x130>
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b21      	cmp	r3, #33	; 0x21
 8004d18:	d164      	bne.n	8004de4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d012      	beq.n	8004d4a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d48:	e04c      	b.n	8004de4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d01d      	beq.n	8004d8c <I2C_MasterTransmit_BTF+0x8c>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d01a      	beq.n	8004d8c <I2C_MasterTransmit_BTF+0x8c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d5c:	d016      	beq.n	8004d8c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2211      	movs	r2, #17
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff feb7 	bl	8004af8 <HAL_I2C_MasterTxCpltCallback>
}
 8004d8a:	e02b      	b.n	8004de4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d9a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004daa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d107      	bne.n	8004dd6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fed2 	bl	8004b78 <HAL_I2C_MemTxCpltCallback>
}
 8004dd4:	e006      	b.n	8004de4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fe8a 	bl	8004af8 <HAL_I2C_MasterTxCpltCallback>
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10b      	bne.n	8004e24 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e22:	e073      	b.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	121b      	asrs	r3, r3, #8
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e3e:	e065      	b.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10b      	bne.n	8004e60 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e5e:	e055      	b.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d151      	bne.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b22      	cmp	r3, #34	; 0x22
 8004e6c:	d10d      	bne.n	8004e8a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e7c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e88:	e040      	b.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b21      	cmp	r3, #33	; 0x21
 8004e98:	d112      	bne.n	8004ec0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	781a      	ldrb	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ebe:	e025      	b.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d120      	bne.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b21      	cmp	r3, #33	; 0x21
 8004ece:	d11d      	bne.n	8004f0c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ede:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe36 	bl	8004b78 <HAL_I2C_MemTxCpltCallback>
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b22      	cmp	r3, #34	; 0x22
 8004f26:	f040 80ac 	bne.w	8005082 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d921      	bls.n	8004f7c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	f040 808c 	bne.w	8005082 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f7a:	e082      	b.n	8005082 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d075      	beq.n	8005070 <I2C_MasterReceive_RXNE+0x15c>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d002      	beq.n	8004f90 <I2C_MasterReceive_RXNE+0x7c>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d16f      	bne.n	8005070 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 fafd 	bl	8006590 <I2C_WaitOnSTOPRequestThroughIT>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d142      	bne.n	8005022 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004faa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d10a      	bne.n	800500c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff fdc1 	bl	8004b8c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800500a:	e03a      	b.n	8005082 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2212      	movs	r2, #18
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fd76 	bl	8004b0c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005020:	e02f      	b.n	8005082 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005030:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fd99 	bl	8004ba0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800506e:	e008      	b.n	8005082 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507e:	605a      	str	r2, [r3, #4]
}
 8005080:	e7ff      	b.n	8005082 <I2C_MasterReceive_RXNE+0x16e>
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d11b      	bne.n	80050da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050d8:	e0bd      	b.n	8005256 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d129      	bne.n	8005138 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d00a      	beq.n	8005110 <I2C_MasterReceive_BTF+0x86>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d007      	beq.n	8005110 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005136:	e08e      	b.n	8005256 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d176      	bne.n	8005230 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d002      	beq.n	800514e <I2C_MasterReceive_BTF+0xc4>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b10      	cmp	r3, #16
 800514c:	d108      	bne.n	8005160 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e019      	b.n	8005194 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d002      	beq.n	800516c <I2C_MasterReceive_BTF+0xe2>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d108      	bne.n	800517e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e00a      	b.n	8005194 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b10      	cmp	r3, #16
 8005182:	d007      	beq.n	8005194 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005192:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d10a      	bne.n	800521a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fcba 	bl	8004b8c <HAL_I2C_MemRxCpltCallback>
}
 8005218:	e01d      	b.n	8005256 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2212      	movs	r2, #18
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff fc6f 	bl	8004b0c <HAL_I2C_MasterRxCpltCallback>
}
 800522e:	e012      	b.n	8005256 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d117      	bne.n	80052a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	b2db      	uxtb	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800528a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800528c:	e067      	b.n	800535e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	b2da      	uxtb	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	611a      	str	r2, [r3, #16]
}
 80052a0:	e05d      	b.n	800535e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052aa:	d133      	bne.n	8005314 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b21      	cmp	r3, #33	; 0x21
 80052b6:	d109      	bne.n	80052cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c8:	611a      	str	r2, [r3, #16]
 80052ca:	e008      	b.n	80052de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <I2C_Master_SB+0x92>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d032      	beq.n	800535e <I2C_Master_SB+0x100>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d02d      	beq.n	800535e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005310:	605a      	str	r2, [r3, #4]
}
 8005312:	e024      	b.n	800535e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10e      	bne.n	800533a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	b29b      	uxth	r3, r3
 8005322:	11db      	asrs	r3, r3, #7
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 0306 	and.w	r3, r3, #6
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f063 030f 	orn	r3, r3, #15
 8005330:	b2da      	uxtb	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	611a      	str	r2, [r3, #16]
}
 8005338:	e011      	b.n	800535e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10d      	bne.n	800535e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	b29b      	uxth	r3, r3
 8005348:	11db      	asrs	r3, r3, #7
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f003 0306 	and.w	r3, r3, #6
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f063 030e 	orn	r3, r3, #14
 8005356:	b2da      	uxtb	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	b2da      	uxtb	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <I2C_Master_ADD10+0x26>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d108      	bne.n	80053a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <I2C_Master_ADD10+0x48>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b0:	605a      	str	r2, [r3, #4]
  }
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80053be:	b480      	push	{r7}
 80053c0:	b091      	sub	sp, #68	; 0x44
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b22      	cmp	r3, #34	; 0x22
 80053e6:	f040 8169 	bne.w	80056bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10f      	bne.n	8005412 <I2C_Master_ADDR+0x54>
 80053f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d10b      	bne.n	8005412 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fa:	2300      	movs	r3, #0
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	633b      	str	r3, [r7, #48]	; 0x30
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	e160      	b.n	80056d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	2b00      	cmp	r3, #0
 8005418:	d11d      	bne.n	8005456 <I2C_Master_ADDR+0x98>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005422:	d118      	bne.n	8005456 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005448:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	651a      	str	r2, [r3, #80]	; 0x50
 8005454:	e13e      	b.n	80056d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d113      	bne.n	8005488 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e115      	b.n	80056b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	f040 808a 	bne.w	80055a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800549a:	d137      	bne.n	800550c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ba:	d113      	bne.n	80054e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054cc:	2300      	movs	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	e0e7      	b.n	80056b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e4:	2300      	movs	r3, #0
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e0d3      	b.n	80056b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	2b08      	cmp	r3, #8
 8005510:	d02e      	beq.n	8005570 <I2C_Master_ADDR+0x1b2>
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	2b20      	cmp	r3, #32
 8005516:	d02b      	beq.n	8005570 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551a:	2b12      	cmp	r3, #18
 800551c:	d102      	bne.n	8005524 <I2C_Master_ADDR+0x166>
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	2b01      	cmp	r3, #1
 8005522:	d125      	bne.n	8005570 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	2b04      	cmp	r3, #4
 8005528:	d00e      	beq.n	8005548 <I2C_Master_ADDR+0x18a>
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	2b02      	cmp	r3, #2
 800552e:	d00b      	beq.n	8005548 <I2C_Master_ADDR+0x18a>
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	2b10      	cmp	r3, #16
 8005534:	d008      	beq.n	8005548 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e007      	b.n	8005558 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005556:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	e0a1      	b.n	80056b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e085      	b.n	80056b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d14d      	bne.n	800564e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d016      	beq.n	80055e6 <I2C_Master_ADDR+0x228>
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d013      	beq.n	80055e6 <I2C_Master_ADDR+0x228>
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d010      	beq.n	80055e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e007      	b.n	80055f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005604:	d117      	bne.n	8005636 <I2C_Master_ADDR+0x278>
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800560c:	d00b      	beq.n	8005626 <I2C_Master_ADDR+0x268>
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2b01      	cmp	r3, #1
 8005612:	d008      	beq.n	8005626 <I2C_Master_ADDR+0x268>
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	2b08      	cmp	r3, #8
 8005618:	d005      	beq.n	8005626 <I2C_Master_ADDR+0x268>
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2b10      	cmp	r3, #16
 800561e:	d002      	beq.n	8005626 <I2C_Master_ADDR+0x268>
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	2b20      	cmp	r3, #32
 8005624:	d107      	bne.n	8005636 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005634:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	e032      	b.n	80056b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800565c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d117      	bne.n	800569e <I2C_Master_ADDR+0x2e0>
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005674:	d00b      	beq.n	800568e <I2C_Master_ADDR+0x2d0>
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b01      	cmp	r3, #1
 800567a:	d008      	beq.n	800568e <I2C_Master_ADDR+0x2d0>
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	2b08      	cmp	r3, #8
 8005680:	d005      	beq.n	800568e <I2C_Master_ADDR+0x2d0>
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b10      	cmp	r3, #16
 8005686:	d002      	beq.n	800568e <I2C_Master_ADDR+0x2d0>
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	2b20      	cmp	r3, #32
 800568c:	d107      	bne.n	800569e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800569c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056ba:	e00b      	b.n	80056d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	e7ff      	b.n	80056d4 <I2C_Master_ADDR+0x316>
 80056d4:	bf00      	nop
 80056d6:	3744      	adds	r7, #68	; 0x44
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d02b      	beq.n	8005752 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d114      	bne.n	8005752 <I2C_SlaveTransmit_TXE+0x72>
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b29      	cmp	r3, #41	; 0x29
 800572c:	d111      	bne.n	8005752 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2221      	movs	r2, #33	; 0x21
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2228      	movs	r2, #40	; 0x28
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff f9e7 	bl	8004b20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d02c      	beq.n	8005810 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d114      	bne.n	8005810 <I2C_SlaveReceive_RXNE+0x74>
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	2b2a      	cmp	r3, #42	; 0x2a
 80057ea:	d111      	bne.n	8005810 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2222      	movs	r2, #34	; 0x22
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2228      	movs	r2, #40	; 0x28
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff f992 	bl	8004b34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d012      	beq.n	8005850 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005876:	2b28      	cmp	r3, #40	; 0x28
 8005878:	d127      	bne.n	80058ca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005888:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	089b      	lsrs	r3, r3, #2
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	09db      	lsrs	r3, r3, #7
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	81bb      	strh	r3, [r7, #12]
 80058ac:	e002      	b.n	80058b4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058bc:	89ba      	ldrh	r2, [r7, #12]
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff f940 	bl	8004b48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058c8:	e00e      	b.n	80058e8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058e8:	bf00      	nop
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800590e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005910:	2300      	movs	r3, #0
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d172      	bne.n	8005a34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b22      	cmp	r3, #34	; 0x22
 8005952:	d002      	beq.n	800595a <I2C_Slave_STOPF+0x6a>
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b2a      	cmp	r3, #42	; 0x2a
 8005958:	d135      	bne.n	80059c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0204 	orr.w	r2, r3, #4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800598c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe f85f 	bl	8003a56 <HAL_DMA_GetState>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d049      	beq.n	8005a32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	4a69      	ldr	r2, [pc, #420]	; (8005b48 <I2C_Slave_STOPF+0x258>)
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe f831 	bl	8003a12 <HAL_DMA_Abort_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03d      	beq.n	8005a32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c4:	e035      	b.n	8005a32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0204 	orr.w	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe f829 	bl	8003a56 <HAL_DMA_GetState>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d014      	beq.n	8005a34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	4a4e      	ldr	r2, [pc, #312]	; (8005b48 <I2C_Slave_STOPF+0x258>)
 8005a10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd fffb 	bl	8003a12 <HAL_DMA_Abort_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
 8005a30:	e000      	b.n	8005a34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d03e      	beq.n	8005abc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d112      	bne.n	8005a72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b40      	cmp	r3, #64	; 0x40
 8005a7e:	d112      	bne.n	8005aa6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	f043 0204 	orr.w	r2, r3, #4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f8b3 	bl	8005c30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005aca:	e039      	b.n	8005b40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad0:	d109      	bne.n	8005ae6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2228      	movs	r2, #40	; 0x28
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff f827 	bl	8004b34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b28      	cmp	r3, #40	; 0x28
 8005af0:	d111      	bne.n	8005b16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <I2C_Slave_STOPF+0x25c>)
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff f828 	bl	8004b64 <HAL_I2C_ListenCpltCallback>
}
 8005b14:	e014      	b.n	8005b40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	2b22      	cmp	r3, #34	; 0x22
 8005b1c:	d002      	beq.n	8005b24 <I2C_Slave_STOPF+0x234>
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b22      	cmp	r3, #34	; 0x22
 8005b22:	d10d      	bne.n	8005b40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fe fffa 	bl	8004b34 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08006191 	.word	0x08006191
 8005b4c:	ffff0000 	.word	0xffff0000

08005b50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d002      	beq.n	8005b72 <I2C_Slave_AF+0x22>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d129      	bne.n	8005bc6 <I2C_Slave_AF+0x76>
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	2b28      	cmp	r3, #40	; 0x28
 8005b76:	d126      	bne.n	8005bc6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <I2C_Slave_AF+0xdc>)
 8005b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fe ffd0 	bl	8004b64 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bc4:	e02e      	b.n	8005c24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b21      	cmp	r3, #33	; 0x21
 8005bca:	d126      	bne.n	8005c1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <I2C_Slave_AF+0xdc>)
 8005bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2221      	movs	r2, #33	; 0x21
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bf6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fe ff84 	bl	8004b20 <HAL_I2C_SlaveTxCpltCallback>
}
 8005c18:	e004      	b.n	8005c24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c22:	615a      	str	r2, [r3, #20]
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	ffff0000 	.word	0xffff0000

08005c30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b10      	cmp	r3, #16
 8005c4c:	d002      	beq.n	8005c54 <I2C_ITError+0x24>
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d10a      	bne.n	8005c6a <I2C_ITError+0x3a>
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b22      	cmp	r3, #34	; 0x22
 8005c58:	d107      	bne.n	8005c6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c70:	2b28      	cmp	r3, #40	; 0x28
 8005c72:	d107      	bne.n	8005c84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2228      	movs	r2, #40	; 0x28
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c82:	e015      	b.n	8005cb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d00a      	beq.n	8005caa <I2C_ITError+0x7a>
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b60      	cmp	r3, #96	; 0x60
 8005c98:	d007      	beq.n	8005caa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbe:	d162      	bne.n	8005d86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d020      	beq.n	8005d20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	4a6a      	ldr	r2, [pc, #424]	; (8005e8c <I2C_ITError+0x25c>)
 8005ce4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd fe91 	bl	8003a12 <HAL_DMA_Abort_IT>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8089 	beq.w	8005e0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4798      	blx	r3
 8005d1e:	e074      	b.n	8005e0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	4a59      	ldr	r2, [pc, #356]	; (8005e8c <I2C_ITError+0x25c>)
 8005d26:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fd fe70 	bl	8003a12 <HAL_DMA_Abort_IT>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d068      	beq.n	8005e0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d10b      	bne.n	8005d5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
 8005d84:	e041      	b.n	8005e0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b60      	cmp	r3, #96	; 0x60
 8005d90:	d125      	bne.n	8005dde <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d10b      	bne.n	8005dc6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fe feec 	bl	8004bb4 <HAL_I2C_AbortCpltCallback>
 8005ddc:	e015      	b.n	8005e0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d10b      	bne.n	8005e04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fe fecb 	bl	8004ba0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10e      	bne.n	8005e38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d113      	bne.n	8005e84 <I2C_ITError+0x254>
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b28      	cmp	r3, #40	; 0x28
 8005e60:	d110      	bne.n	8005e84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <I2C_ITError+0x260>)
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fe fe70 	bl	8004b64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	08006191 	.word	0x08006191
 8005e90:	ffff0000 	.word	0xffff0000

08005e94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	817b      	strh	r3, [r7, #10]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	813b      	strh	r3, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fa08 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee4:	d103      	bne.n	8005eee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e05f      	b.n	8005fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	6a3a      	ldr	r2, [r7, #32]
 8005f06:	492d      	ldr	r1, [pc, #180]	; (8005fbc <I2C_RequestMemoryWrite+0x128>)
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fa40 	bl	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e04c      	b.n	8005fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	6a39      	ldr	r1, [r7, #32]
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 faaa 	bl	800648c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00d      	beq.n	8005f5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d107      	bne.n	8005f56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e02b      	b.n	8005fb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f60:	893b      	ldrh	r3, [r7, #8]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]
 8005f6a:	e021      	b.n	8005fb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f6c:	893b      	ldrh	r3, [r7, #8]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7c:	6a39      	ldr	r1, [r7, #32]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fa84 	bl	800648c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00d      	beq.n	8005fa6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d107      	bne.n	8005fa2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e005      	b.n	8005fb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa6:	893b      	ldrh	r3, [r7, #8]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	00010002 	.word	0x00010002

08005fc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	817b      	strh	r3, [r7, #10]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	813b      	strh	r3, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fe8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	2200      	movs	r2, #0
 8006002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f96a 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006020:	d103      	bne.n	800602a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e0aa      	b.n	8006184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800602e:	897b      	ldrh	r3, [r7, #10]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800603c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	4952      	ldr	r1, [pc, #328]	; (800618c <I2C_RequestMemoryRead+0x1cc>)
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f9a2 	bl	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e097      	b.n	8006184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606c:	6a39      	ldr	r1, [r7, #32]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fa0c 	bl	800648c <I2C_WaitOnTXEFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00d      	beq.n	8006096 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b04      	cmp	r3, #4
 8006080:	d107      	bne.n	8006092 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006090:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e076      	b.n	8006184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800609c:	893b      	ldrh	r3, [r7, #8]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	611a      	str	r2, [r3, #16]
 80060a6:	e021      	b.n	80060ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060a8:	893b      	ldrh	r3, [r7, #8]
 80060aa:	0a1b      	lsrs	r3, r3, #8
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	6a39      	ldr	r1, [r7, #32]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f9e6 	bl	800648c <I2C_WaitOnTXEFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d107      	bne.n	80060de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e050      	b.n	8006184 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060e2:	893b      	ldrh	r3, [r7, #8]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ee:	6a39      	ldr	r1, [r7, #32]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f9cb 	bl	800648c <I2C_WaitOnTXEFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	2b04      	cmp	r3, #4
 8006102:	d107      	bne.n	8006114 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006112:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e035      	b.n	8006184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006126:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	2200      	movs	r2, #0
 8006130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f8d3 	bl	80062e0 <I2C_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614e:	d103      	bne.n	8006158 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e013      	b.n	8006184 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800615c:	897b      	ldrh	r3, [r7, #10]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f043 0301 	orr.w	r3, r3, #1
 8006164:	b2da      	uxtb	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	4906      	ldr	r1, [pc, #24]	; (800618c <I2C_RequestMemoryRead+0x1cc>)
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f90b 	bl	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	00010002 	.word	0x00010002

08006190 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061aa:	4b4b      	ldr	r3, [pc, #300]	; (80062d8 <I2C_DMAAbort+0x148>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	08db      	lsrs	r3, r3, #3
 80061b0:	4a4a      	ldr	r2, [pc, #296]	; (80062dc <I2C_DMAAbort+0x14c>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	0a1a      	lsrs	r2, r3, #8
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	00da      	lsls	r2, r3, #3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f043 0220 	orr.w	r2, r3, #32
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061d6:	e00a      	b.n	80061ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b01      	subs	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ec:	d0ea      	beq.n	80061c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fa:	2200      	movs	r2, #0
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	2200      	movs	r2, #0
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	2200      	movs	r2, #0
 8006232:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	2200      	movs	r2, #0
 8006242:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b60      	cmp	r3, #96	; 0x60
 800625e:	d10e      	bne.n	800627e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006276:	6978      	ldr	r0, [r7, #20]
 8006278:	f7fe fc9c 	bl	8004bb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800627c:	e027      	b.n	80062ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800627e:	7cfb      	ldrb	r3, [r7, #19]
 8006280:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006284:	2b28      	cmp	r3, #40	; 0x28
 8006286:	d117      	bne.n	80062b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2200      	movs	r2, #0
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2228      	movs	r2, #40	; 0x28
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062b6:	e007      	b.n	80062c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062c8:	6978      	ldr	r0, [r7, #20]
 80062ca:	f7fe fc69 	bl	8004ba0 <HAL_I2C_ErrorCallback>
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000000 	.word	0x20000000
 80062dc:	14f8b589 	.word	0x14f8b589

080062e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062f0:	e025      	b.n	800633e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d021      	beq.n	800633e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fa:	f7fc fc91 	bl	8002c20 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d302      	bcc.n	8006310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d116      	bne.n	800633e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e023      	b.n	8006386 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10d      	bne.n	8006364 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	43da      	mvns	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4013      	ands	r3, r2
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	e00c      	b.n	800637e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	43da      	mvns	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4013      	ands	r3, r2
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	bf0c      	ite	eq
 8006376:	2301      	moveq	r3, #1
 8006378:	2300      	movne	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	429a      	cmp	r2, r3
 8006382:	d0b6      	beq.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800639c:	e051      	b.n	8006442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ac:	d123      	bne.n	80063f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f043 0204 	orr.w	r2, r3, #4
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e046      	b.n	8006484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d021      	beq.n	8006442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fe:	f7fc fc0f 	bl	8002c20 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d116      	bne.n	8006442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e020      	b.n	8006484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10c      	bne.n	8006466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	43da      	mvns	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	bf14      	ite	ne
 800645e:	2301      	movne	r3, #1
 8006460:	2300      	moveq	r3, #0
 8006462:	b2db      	uxtb	r3, r3
 8006464:	e00b      	b.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	43da      	mvns	r2, r3
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	bf14      	ite	ne
 8006478:	2301      	movne	r3, #1
 800647a:	2300      	moveq	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d18d      	bne.n	800639e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006498:	e02d      	b.n	80064f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f900 	bl	80066a0 <I2C_IsAcknowledgeFailed>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e02d      	b.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d021      	beq.n	80064f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b2:	f7fc fbb5 	bl	8002c20 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d302      	bcc.n	80064c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d116      	bne.n	80064f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e007      	b.n	8006506 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d1ca      	bne.n	800649a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800651a:	e02d      	b.n	8006578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f8bf 	bl	80066a0 <I2C_IsAcknowledgeFailed>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e02d      	b.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d021      	beq.n	8006578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006534:	f7fc fb74 	bl	8002c20 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	d302      	bcc.n	800654a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d116      	bne.n	8006578 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	f043 0220 	orr.w	r2, r3, #32
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e007      	b.n	8006588 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b04      	cmp	r3, #4
 8006584:	d1ca      	bne.n	800651c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800659c:	4b13      	ldr	r3, [pc, #76]	; (80065ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	08db      	lsrs	r3, r3, #3
 80065a2:	4a13      	ldr	r2, [pc, #76]	; (80065f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80065a4:	fba2 2303 	umull	r2, r3, r2, r3
 80065a8:	0a1a      	lsrs	r2, r3, #8
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d107      	bne.n	80065ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e008      	b.n	80065e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065dc:	d0e9      	beq.n	80065b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	20000000 	.word	0x20000000
 80065f0:	14f8b589 	.word	0x14f8b589

080065f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006600:	e042      	b.n	8006688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b10      	cmp	r3, #16
 800660e:	d119      	bne.n	8006644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0210 	mvn.w	r2, #16
 8006618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e029      	b.n	8006698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006644:	f7fc faec 	bl	8002c20 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	429a      	cmp	r2, r3
 8006652:	d302      	bcc.n	800665a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d116      	bne.n	8006688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	f043 0220 	orr.w	r2, r3, #32
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e007      	b.n	8006698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d1b5      	bne.n	8006602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b6:	d11b      	bne.n	80066f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	f043 0204 	orr.w	r2, r3, #4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800670e:	d103      	bne.n	8006718 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006716:	e007      	b.n	8006728 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006720:	d102      	bne.n	8006728 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2208      	movs	r2, #8
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0cc      	b.n	80068e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006748:	4b68      	ldr	r3, [pc, #416]	; (80068ec <HAL_RCC_ClockConfig+0x1b8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d90c      	bls.n	8006770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006756:	4b65      	ldr	r3, [pc, #404]	; (80068ec <HAL_RCC_ClockConfig+0x1b8>)
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800675e:	4b63      	ldr	r3, [pc, #396]	; (80068ec <HAL_RCC_ClockConfig+0x1b8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d001      	beq.n	8006770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0b8      	b.n	80068e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d020      	beq.n	80067be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006788:	4b59      	ldr	r3, [pc, #356]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	4a58      	ldr	r2, [pc, #352]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0308 	and.w	r3, r3, #8
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067a0:	4b53      	ldr	r3, [pc, #332]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	4a52      	ldr	r2, [pc, #328]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ac:	4b50      	ldr	r3, [pc, #320]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	494d      	ldr	r1, [pc, #308]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d044      	beq.n	8006854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d107      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d2:	4b47      	ldr	r3, [pc, #284]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d119      	bne.n	8006812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e07f      	b.n	80068e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d003      	beq.n	80067f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d107      	bne.n	8006802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f2:	4b3f      	ldr	r3, [pc, #252]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e06f      	b.n	80068e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006802:	4b3b      	ldr	r3, [pc, #236]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e067      	b.n	80068e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006812:	4b37      	ldr	r3, [pc, #220]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 0203 	bic.w	r2, r3, #3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4934      	ldr	r1, [pc, #208]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006820:	4313      	orrs	r3, r2
 8006822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006824:	f7fc f9fc 	bl	8002c20 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800682a:	e00a      	b.n	8006842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800682c:	f7fc f9f8 	bl	8002c20 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f241 3288 	movw	r2, #5000	; 0x1388
 800683a:	4293      	cmp	r3, r2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e04f      	b.n	80068e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006842:	4b2b      	ldr	r3, [pc, #172]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 020c 	and.w	r2, r3, #12
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	429a      	cmp	r2, r3
 8006852:	d1eb      	bne.n	800682c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <HAL_RCC_ClockConfig+0x1b8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d20c      	bcs.n	800687c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <HAL_RCC_ClockConfig+0x1b8>)
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800686a:	4b20      	ldr	r3, [pc, #128]	; (80068ec <HAL_RCC_ClockConfig+0x1b8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e032      	b.n	80068e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006888:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4916      	ldr	r1, [pc, #88]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068a6:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	490e      	ldr	r1, [pc, #56]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068ba:	f000 f855 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 80068be:	4602      	mov	r2, r0
 80068c0:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	490a      	ldr	r1, [pc, #40]	; (80068f4 <HAL_RCC_ClockConfig+0x1c0>)
 80068cc:	5ccb      	ldrb	r3, [r1, r3]
 80068ce:	fa22 f303 	lsr.w	r3, r2, r3
 80068d2:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <HAL_RCC_ClockConfig+0x1c4>)
 80068d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068d6:	4b09      	ldr	r3, [pc, #36]	; (80068fc <HAL_RCC_ClockConfig+0x1c8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fc f95c 	bl	8002b98 <HAL_InitTick>

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40023c00 	.word	0x40023c00
 80068f0:	40023800 	.word	0x40023800
 80068f4:	0800d32c 	.word	0x0800d32c
 80068f8:	20000000 	.word	0x20000000
 80068fc:	20000004 	.word	0x20000004

08006900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006904:	4b03      	ldr	r3, [pc, #12]	; (8006914 <HAL_RCC_GetHCLKFreq+0x14>)
 8006906:	681b      	ldr	r3, [r3, #0]
}
 8006908:	4618      	mov	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000000 	.word	0x20000000

08006918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800691c:	f7ff fff0 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 8006920:	4602      	mov	r2, r0
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	0a9b      	lsrs	r3, r3, #10
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	4903      	ldr	r1, [pc, #12]	; (800693c <HAL_RCC_GetPCLK1Freq+0x24>)
 800692e:	5ccb      	ldrb	r3, [r1, r3]
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006934:	4618      	mov	r0, r3
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40023800 	.word	0x40023800
 800693c:	0800d33c 	.word	0x0800d33c

08006940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006944:	f7ff ffdc 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 8006948:	4602      	mov	r2, r0
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	0b5b      	lsrs	r3, r3, #13
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	4903      	ldr	r1, [pc, #12]	; (8006964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006956:	5ccb      	ldrb	r3, [r1, r3]
 8006958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800695c:	4618      	mov	r0, r3
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40023800 	.word	0x40023800
 8006964:	0800d33c 	.word	0x0800d33c

08006968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800696c:	b0ae      	sub	sp, #184	; 0xb8
 800696e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800698e:	4bcb      	ldr	r3, [pc, #812]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b0c      	cmp	r3, #12
 8006998:	f200 8206 	bhi.w	8006da8 <HAL_RCC_GetSysClockFreq+0x440>
 800699c:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	08006da9 	.word	0x08006da9
 80069ac:	08006da9 	.word	0x08006da9
 80069b0:	08006da9 	.word	0x08006da9
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	08006da9 	.word	0x08006da9
 80069bc:	08006da9 	.word	0x08006da9
 80069c0:	08006da9 	.word	0x08006da9
 80069c4:	080069e9 	.word	0x080069e9
 80069c8:	08006da9 	.word	0x08006da9
 80069cc:	08006da9 	.word	0x08006da9
 80069d0:	08006da9 	.word	0x08006da9
 80069d4:	08006bd9 	.word	0x08006bd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069d8:	4bb9      	ldr	r3, [pc, #740]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x358>)
 80069da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80069de:	e1e7      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069e0:	4bb8      	ldr	r3, [pc, #736]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80069e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80069e6:	e1e3      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069e8:	4bb4      	ldr	r3, [pc, #720]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069f4:	4bb1      	ldr	r3, [pc, #708]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d071      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a00:	4bae      	ldr	r3, [pc, #696]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	099b      	lsrs	r3, r3, #6
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	f04f 0000 	mov.w	r0, #0
 8006a2e:	f04f 0100 	mov.w	r1, #0
 8006a32:	0159      	lsls	r1, r3, #5
 8006a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a38:	0150      	lsls	r0, r2, #5
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4621      	mov	r1, r4
 8006a40:	1a51      	subs	r1, r2, r1
 8006a42:	6439      	str	r1, [r7, #64]	; 0x40
 8006a44:	4629      	mov	r1, r5
 8006a46:	eb63 0301 	sbc.w	r3, r3, r1
 8006a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006a58:	4649      	mov	r1, r9
 8006a5a:	018b      	lsls	r3, r1, #6
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a62:	4641      	mov	r1, r8
 8006a64:	018a      	lsls	r2, r1, #6
 8006a66:	4641      	mov	r1, r8
 8006a68:	1a51      	subs	r1, r2, r1
 8006a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006a80:	4649      	mov	r1, r9
 8006a82:	00cb      	lsls	r3, r1, #3
 8006a84:	4641      	mov	r1, r8
 8006a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	00ca      	lsls	r2, r1, #3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	4622      	mov	r2, r4
 8006a96:	189b      	adds	r3, r3, r2
 8006a98:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	eb42 0303 	adc.w	r3, r2, r3
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	024b      	lsls	r3, r1, #9
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006aba:	4621      	mov	r1, r4
 8006abc:	024a      	lsls	r2, r1, #9
 8006abe:	4610      	mov	r0, r2
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006acc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ad0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006ad4:	f7fa f908 	bl	8000ce8 <__aeabi_uldivmod>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4613      	mov	r3, r2
 8006ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ae2:	e067      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ae4:	4b75      	ldr	r3, [pc, #468]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	099b      	lsrs	r3, r3, #6
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006af0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006afe:	2300      	movs	r3, #0
 8006b00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006b06:	4622      	mov	r2, r4
 8006b08:	462b      	mov	r3, r5
 8006b0a:	f04f 0000 	mov.w	r0, #0
 8006b0e:	f04f 0100 	mov.w	r1, #0
 8006b12:	0159      	lsls	r1, r3, #5
 8006b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b18:	0150      	lsls	r0, r2, #5
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4621      	mov	r1, r4
 8006b20:	1a51      	subs	r1, r2, r1
 8006b22:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b24:	4629      	mov	r1, r5
 8006b26:	eb63 0301 	sbc.w	r3, r3, r1
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006b38:	4649      	mov	r1, r9
 8006b3a:	018b      	lsls	r3, r1, #6
 8006b3c:	4641      	mov	r1, r8
 8006b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b42:	4641      	mov	r1, r8
 8006b44:	018a      	lsls	r2, r1, #6
 8006b46:	4641      	mov	r1, r8
 8006b48:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b66:	4692      	mov	sl, r2
 8006b68:	469b      	mov	fp, r3
 8006b6a:	4623      	mov	r3, r4
 8006b6c:	eb1a 0303 	adds.w	r3, sl, r3
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	462b      	mov	r3, r5
 8006b74:	eb4b 0303 	adc.w	r3, fp, r3
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006b86:	4629      	mov	r1, r5
 8006b88:	028b      	lsls	r3, r1, #10
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b90:	4621      	mov	r1, r4
 8006b92:	028a      	lsls	r2, r1, #10
 8006b94:	4610      	mov	r0, r2
 8006b96:	4619      	mov	r1, r3
 8006b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	673b      	str	r3, [r7, #112]	; 0x70
 8006ba0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ba2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006ba6:	f7fa f89f 	bl	8000ce8 <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4613      	mov	r3, r2
 8006bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bb4:	4b41      	ldr	r3, [pc, #260]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	0c1b      	lsrs	r3, r3, #16
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006bd6:	e0eb      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bd8:	4b38      	ldr	r3, [pc, #224]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006be4:	4b35      	ldr	r3, [pc, #212]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06b      	beq.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bf0:	4b32      	ldr	r3, [pc, #200]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x354>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	099b      	lsrs	r3, r3, #6
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c02:	663b      	str	r3, [r7, #96]	; 0x60
 8006c04:	2300      	movs	r3, #0
 8006c06:	667b      	str	r3, [r7, #100]	; 0x64
 8006c08:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	462b      	mov	r3, r5
 8006c10:	f04f 0000 	mov.w	r0, #0
 8006c14:	f04f 0100 	mov.w	r1, #0
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c1e:	0150      	lsls	r0, r2, #5
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4621      	mov	r1, r4
 8006c26:	1a51      	subs	r1, r2, r1
 8006c28:	61b9      	str	r1, [r7, #24]
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	eb63 0301 	sbc.w	r3, r3, r1
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006c3e:	4659      	mov	r1, fp
 8006c40:	018b      	lsls	r3, r1, #6
 8006c42:	4651      	mov	r1, sl
 8006c44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c48:	4651      	mov	r1, sl
 8006c4a:	018a      	lsls	r2, r1, #6
 8006c4c:	4651      	mov	r1, sl
 8006c4e:	ebb2 0801 	subs.w	r8, r2, r1
 8006c52:	4659      	mov	r1, fp
 8006c54:	eb63 0901 	sbc.w	r9, r3, r1
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c6c:	4690      	mov	r8, r2
 8006c6e:	4699      	mov	r9, r3
 8006c70:	4623      	mov	r3, r4
 8006c72:	eb18 0303 	adds.w	r3, r8, r3
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	462b      	mov	r3, r5
 8006c7a:	eb49 0303 	adc.w	r3, r9, r3
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	024b      	lsls	r3, r1, #9
 8006c90:	4621      	mov	r1, r4
 8006c92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c96:	4621      	mov	r1, r4
 8006c98:	024a      	lsls	r2, r1, #9
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ca6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006ca8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cac:	f7fa f81c 	bl	8000ce8 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cba:	e065      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x420>
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	00f42400 	.word	0x00f42400
 8006cc4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc8:	4b3d      	ldr	r3, [pc, #244]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	099b      	lsrs	r3, r3, #6
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8006cda:	2300      	movs	r3, #0
 8006cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8006cde:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	f04f 0000 	mov.w	r0, #0
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	0159      	lsls	r1, r3, #5
 8006cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf4:	0150      	lsls	r0, r2, #5
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	1a51      	subs	r1, r2, r1
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	4649      	mov	r1, r9
 8006d02:	eb63 0301 	sbc.w	r3, r3, r1
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006d14:	4659      	mov	r1, fp
 8006d16:	018b      	lsls	r3, r1, #6
 8006d18:	4651      	mov	r1, sl
 8006d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d1e:	4651      	mov	r1, sl
 8006d20:	018a      	lsls	r2, r1, #6
 8006d22:	4651      	mov	r1, sl
 8006d24:	1a54      	subs	r4, r2, r1
 8006d26:	4659      	mov	r1, fp
 8006d28:	eb63 0501 	sbc.w	r5, r3, r1
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	00eb      	lsls	r3, r5, #3
 8006d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d3a:	00e2      	lsls	r2, r4, #3
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	461d      	mov	r5, r3
 8006d40:	4643      	mov	r3, r8
 8006d42:	18e3      	adds	r3, r4, r3
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	464b      	mov	r3, r9
 8006d48:	eb45 0303 	adc.w	r3, r5, r3
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	028b      	lsls	r3, r1, #10
 8006d5e:	4621      	mov	r1, r4
 8006d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d64:	4621      	mov	r1, r4
 8006d66:	028a      	lsls	r2, r1, #10
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d70:	2200      	movs	r2, #0
 8006d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d7a:	f7f9 ffb5 	bl	8000ce8 <__aeabi_uldivmod>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4613      	mov	r3, r2
 8006d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d88:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	0f1b      	lsrs	r3, r3, #28
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006da6:	e003      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006dae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006db0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	37b8      	adds	r7, #184	; 0xb8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	00f42400 	.word	0x00f42400

08006dc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e28d      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8083 	beq.w	8006eee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006de8:	4b94      	ldr	r3, [pc, #592]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d019      	beq.n	8006e28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006df4:	4b91      	ldr	r3, [pc, #580]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d106      	bne.n	8006e0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006e00:	4b8e      	ldr	r3, [pc, #568]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e0c:	d00c      	beq.n	8006e28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e0e:	4b8b      	ldr	r3, [pc, #556]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006e16:	2b0c      	cmp	r3, #12
 8006e18:	d112      	bne.n	8006e40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e1a:	4b88      	ldr	r3, [pc, #544]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e26:	d10b      	bne.n	8006e40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e28:	4b84      	ldr	r3, [pc, #528]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d05b      	beq.n	8006eec <HAL_RCC_OscConfig+0x124>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d157      	bne.n	8006eec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e25a      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e48:	d106      	bne.n	8006e58 <HAL_RCC_OscConfig+0x90>
 8006e4a:	4b7c      	ldr	r3, [pc, #496]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a7b      	ldr	r2, [pc, #492]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e01d      	b.n	8006e94 <HAL_RCC_OscConfig+0xcc>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e60:	d10c      	bne.n	8006e7c <HAL_RCC_OscConfig+0xb4>
 8006e62:	4b76      	ldr	r3, [pc, #472]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a75      	ldr	r2, [pc, #468]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	4b73      	ldr	r3, [pc, #460]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a72      	ldr	r2, [pc, #456]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	e00b      	b.n	8006e94 <HAL_RCC_OscConfig+0xcc>
 8006e7c:	4b6f      	ldr	r3, [pc, #444]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a6e      	ldr	r2, [pc, #440]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	4b6c      	ldr	r3, [pc, #432]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a6b      	ldr	r2, [pc, #428]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d013      	beq.n	8006ec4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fb fec0 	bl	8002c20 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ea4:	f7fb febc 	bl	8002c20 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b64      	cmp	r3, #100	; 0x64
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e21f      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb6:	4b61      	ldr	r3, [pc, #388]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0xdc>
 8006ec2:	e014      	b.n	8006eee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec4:	f7fb feac 	bl	8002c20 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ecc:	f7fb fea8 	bl	8002c20 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b64      	cmp	r3, #100	; 0x64
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e20b      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ede:	4b57      	ldr	r3, [pc, #348]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f0      	bne.n	8006ecc <HAL_RCC_OscConfig+0x104>
 8006eea:	e000      	b.n	8006eee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d06f      	beq.n	8006fda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006efa:	4b50      	ldr	r3, [pc, #320]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d017      	beq.n	8006f36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006f06:	4b4d      	ldr	r3, [pc, #308]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d105      	bne.n	8006f1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006f12:	4b4a      	ldr	r3, [pc, #296]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f1e:	4b47      	ldr	r3, [pc, #284]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006f26:	2b0c      	cmp	r3, #12
 8006f28:	d11c      	bne.n	8006f64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f2a:	4b44      	ldr	r3, [pc, #272]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d116      	bne.n	8006f64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f36:	4b41      	ldr	r3, [pc, #260]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_RCC_OscConfig+0x186>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d001      	beq.n	8006f4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e1d3      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4e:	4b3b      	ldr	r3, [pc, #236]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	4937      	ldr	r1, [pc, #220]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f62:	e03a      	b.n	8006fda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d020      	beq.n	8006fae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f6c:	4b34      	ldr	r3, [pc, #208]	; (8007040 <HAL_RCC_OscConfig+0x278>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f72:	f7fb fe55 	bl	8002c20 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f7a:	f7fb fe51 	bl	8002c20 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e1b4      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f8c:	4b2b      	ldr	r3, [pc, #172]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f0      	beq.n	8006f7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f98:	4b28      	ldr	r3, [pc, #160]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	4925      	ldr	r1, [pc, #148]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	600b      	str	r3, [r1, #0]
 8006fac:	e015      	b.n	8006fda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fae:	4b24      	ldr	r3, [pc, #144]	; (8007040 <HAL_RCC_OscConfig+0x278>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb4:	f7fb fe34 	bl	8002c20 <HAL_GetTick>
 8006fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fbc:	f7fb fe30 	bl	8002c20 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e193      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fce:	4b1b      	ldr	r3, [pc, #108]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d036      	beq.n	8007054 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d016      	beq.n	800701c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <HAL_RCC_OscConfig+0x27c>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff4:	f7fb fe14 	bl	8002c20 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ffc:	f7fb fe10 	bl	8002c20 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e173      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <HAL_RCC_OscConfig+0x274>)
 8007010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0x234>
 800701a:	e01b      	b.n	8007054 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCC_OscConfig+0x27c>)
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007022:	f7fb fdfd 	bl	8002c20 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007028:	e00e      	b.n	8007048 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800702a:	f7fb fdf9 	bl	8002c20 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d907      	bls.n	8007048 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e15c      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
 800703c:	40023800 	.word	0x40023800
 8007040:	42470000 	.word	0x42470000
 8007044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007048:	4b8a      	ldr	r3, [pc, #552]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800704a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1ea      	bne.n	800702a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8097 	beq.w	8007190 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007066:	4b83      	ldr	r3, [pc, #524]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10f      	bne.n	8007092 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007072:	2300      	movs	r3, #0
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	4b7f      	ldr	r3, [pc, #508]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	4a7e      	ldr	r2, [pc, #504]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800707c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007080:	6413      	str	r3, [r2, #64]	; 0x40
 8007082:	4b7c      	ldr	r3, [pc, #496]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708a:	60bb      	str	r3, [r7, #8]
 800708c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800708e:	2301      	movs	r3, #1
 8007090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007092:	4b79      	ldr	r3, [pc, #484]	; (8007278 <HAL_RCC_OscConfig+0x4b0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709a:	2b00      	cmp	r3, #0
 800709c:	d118      	bne.n	80070d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800709e:	4b76      	ldr	r3, [pc, #472]	; (8007278 <HAL_RCC_OscConfig+0x4b0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a75      	ldr	r2, [pc, #468]	; (8007278 <HAL_RCC_OscConfig+0x4b0>)
 80070a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070aa:	f7fb fdb9 	bl	8002c20 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070b2:	f7fb fdb5 	bl	8002c20 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e118      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c4:	4b6c      	ldr	r3, [pc, #432]	; (8007278 <HAL_RCC_OscConfig+0x4b0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d106      	bne.n	80070e6 <HAL_RCC_OscConfig+0x31e>
 80070d8:	4b66      	ldr	r3, [pc, #408]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	4a65      	ldr	r2, [pc, #404]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6713      	str	r3, [r2, #112]	; 0x70
 80070e4:	e01c      	b.n	8007120 <HAL_RCC_OscConfig+0x358>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	d10c      	bne.n	8007108 <HAL_RCC_OscConfig+0x340>
 80070ee:	4b61      	ldr	r3, [pc, #388]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	4a60      	ldr	r2, [pc, #384]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 80070f4:	f043 0304 	orr.w	r3, r3, #4
 80070f8:	6713      	str	r3, [r2, #112]	; 0x70
 80070fa:	4b5e      	ldr	r3, [pc, #376]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	4a5d      	ldr	r2, [pc, #372]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	6713      	str	r3, [r2, #112]	; 0x70
 8007106:	e00b      	b.n	8007120 <HAL_RCC_OscConfig+0x358>
 8007108:	4b5a      	ldr	r3, [pc, #360]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	4a59      	ldr	r2, [pc, #356]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	6713      	str	r3, [r2, #112]	; 0x70
 8007114:	4b57      	ldr	r3, [pc, #348]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007118:	4a56      	ldr	r2, [pc, #344]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800711a:	f023 0304 	bic.w	r3, r3, #4
 800711e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d015      	beq.n	8007154 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007128:	f7fb fd7a 	bl	8002c20 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800712e:	e00a      	b.n	8007146 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007130:	f7fb fd76 	bl	8002c20 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	; 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0d7      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007146:	4b4b      	ldr	r3, [pc, #300]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0ee      	beq.n	8007130 <HAL_RCC_OscConfig+0x368>
 8007152:	e014      	b.n	800717e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007154:	f7fb fd64 	bl	8002c20 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800715a:	e00a      	b.n	8007172 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800715c:	f7fb fd60 	bl	8002c20 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f241 3288 	movw	r2, #5000	; 0x1388
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e0c1      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007172:	4b40      	ldr	r3, [pc, #256]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1ee      	bne.n	800715c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d105      	bne.n	8007190 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007184:	4b3b      	ldr	r3, [pc, #236]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	4a3a      	ldr	r2, [pc, #232]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800718a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800718e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80ad 	beq.w	80072f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800719a:	4b36      	ldr	r3, [pc, #216]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 030c 	and.w	r3, r3, #12
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d060      	beq.n	8007268 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d145      	bne.n	800723a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ae:	4b33      	ldr	r3, [pc, #204]	; (800727c <HAL_RCC_OscConfig+0x4b4>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fb fd34 	bl	8002c20 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fb fd30 	bl	8002c20 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e093      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	4b29      	ldr	r3, [pc, #164]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69da      	ldr	r2, [r3, #28]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	019b      	lsls	r3, r3, #6
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	3b01      	subs	r3, #1
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	071b      	lsls	r3, r3, #28
 8007206:	491b      	ldr	r1, [pc, #108]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 8007208:	4313      	orrs	r3, r2
 800720a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <HAL_RCC_OscConfig+0x4b4>)
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007212:	f7fb fd05 	bl	8002c20 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800721a:	f7fb fd01 	bl	8002c20 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e064      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722c:	4b11      	ldr	r3, [pc, #68]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0x452>
 8007238:	e05c      	b.n	80072f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <HAL_RCC_OscConfig+0x4b4>)
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fb fcee 	bl	8002c20 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007248:	f7fb fcea 	bl	8002c20 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e04d      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	4b06      	ldr	r3, [pc, #24]	; (8007274 <HAL_RCC_OscConfig+0x4ac>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x480>
 8007266:	e045      	b.n	80072f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d107      	bne.n	8007280 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e040      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
 8007274:	40023800 	.word	0x40023800
 8007278:	40007000 	.word	0x40007000
 800727c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007280:	4b1f      	ldr	r3, [pc, #124]	; (8007300 <HAL_RCC_OscConfig+0x538>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d030      	beq.n	80072f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007298:	429a      	cmp	r2, r3
 800729a:	d129      	bne.n	80072f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d122      	bne.n	80072f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072b0:	4013      	ands	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d119      	bne.n	80072f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	3b01      	subs	r3, #1
 80072ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d10f      	bne.n	80072f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072dc:	429a      	cmp	r2, r3
 80072de:	d107      	bne.n	80072f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d001      	beq.n	80072f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40023800 	.word	0x40023800

08007304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e03f      	b.n	8007396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fb f9be 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2224      	movs	r2, #36	; 0x24
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fecf 	bl	80080ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800735c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800736c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800737c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b08a      	sub	sp, #40	; 0x28
 80073a2:	af02      	add	r7, sp, #8
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	603b      	str	r3, [r7, #0]
 80073aa:	4613      	mov	r3, r2
 80073ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d17c      	bne.n	80074b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <HAL_UART_Transmit+0x2c>
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e075      	b.n	80074ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_UART_Transmit+0x3e>
 80073d8:	2302      	movs	r3, #2
 80073da:	e06e      	b.n	80074ba <HAL_UART_Transmit+0x11c>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2221      	movs	r2, #33	; 0x21
 80073ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073f2:	f7fb fc15 	bl	8002c20 <HAL_GetTick>
 80073f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	88fa      	ldrh	r2, [r7, #6]
 80073fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	88fa      	ldrh	r2, [r7, #6]
 8007402:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740c:	d108      	bne.n	8007420 <HAL_UART_Transmit+0x82>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d104      	bne.n	8007420 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	e003      	b.n	8007428 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007424:	2300      	movs	r3, #0
 8007426:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007430:	e02a      	b.n	8007488 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2200      	movs	r2, #0
 800743a:	2180      	movs	r1, #128	; 0x80
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fc0f 	bl	8007c60 <UART_WaitOnFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e036      	b.n	80074ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	3302      	adds	r3, #2
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	e007      	b.n	800747a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	781a      	ldrb	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	3301      	adds	r3, #1
 8007478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1cf      	bne.n	8007432 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2200      	movs	r2, #0
 800749a:	2140      	movs	r1, #64	; 0x40
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 fbdf 	bl	8007c60 <UART_WaitOnFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e006      	b.n	80074ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e000      	b.n	80074ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b08a      	sub	sp, #40	; 0x28
 80074c6:	af02      	add	r7, sp, #8
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b20      	cmp	r3, #32
 80074e0:	f040 808c 	bne.w	80075fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <HAL_UART_Receive+0x2e>
 80074ea:	88fb      	ldrh	r3, [r7, #6]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e084      	b.n	80075fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_UART_Receive+0x40>
 80074fe:	2302      	movs	r3, #2
 8007500:	e07d      	b.n	80075fe <HAL_UART_Receive+0x13c>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2222      	movs	r2, #34	; 0x22
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800751e:	f7fb fb7f 	bl	8002c20 <HAL_GetTick>
 8007522:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	88fa      	ldrh	r2, [r7, #6]
 800752e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007538:	d108      	bne.n	800754c <HAL_UART_Receive+0x8a>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d104      	bne.n	800754c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	e003      	b.n	8007554 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800755c:	e043      	b.n	80075e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2200      	movs	r2, #0
 8007566:	2120      	movs	r1, #32
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fb79 	bl	8007c60 <UART_WaitOnFlagUntilTimeout>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e042      	b.n	80075fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10c      	bne.n	8007598 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	b29a      	uxth	r2, r3
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	3302      	adds	r3, #2
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e01f      	b.n	80075d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a0:	d007      	beq.n	80075b2 <HAL_UART_Receive+0xf0>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <HAL_UART_Receive+0xfe>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	e008      	b.n	80075d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	3301      	adds	r3, #1
 80075d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1b6      	bne.n	800755e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80075fc:	2302      	movs	r3, #2
  }
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3720      	adds	r7, #32
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007606:	b480      	push	{r7}
 8007608:	b085      	sub	sp, #20
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	4613      	mov	r3, r2
 8007612:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b20      	cmp	r3, #32
 800761e:	d130      	bne.n	8007682 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_UART_Transmit_IT+0x26>
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e029      	b.n	8007684 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_UART_Transmit_IT+0x38>
 800763a:	2302      	movs	r3, #2
 800763c:	e022      	b.n	8007684 <HAL_UART_Transmit_IT+0x7e>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	88fa      	ldrh	r2, [r7, #6]
 8007650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2221      	movs	r2, #33	; 0x21
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800767c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	e000      	b.n	8007684 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007682:	2302      	movs	r3, #2
  }
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b20      	cmp	r3, #32
 80076a8:	d11d      	bne.n	80076e6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_UART_Receive_IT+0x26>
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e016      	b.n	80076e8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_UART_Receive_IT+0x38>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e00f      	b.n	80076e8 <HAL_UART_Receive_IT+0x58>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	461a      	mov	r2, r3
 80076da:	68b9      	ldr	r1, [r7, #8]
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fb2d 	bl	8007d3c <UART_Start_Receive_IT>
 80076e2:	4603      	mov	r3, r0
 80076e4:	e000      	b.n	80076e8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b0ba      	sub	sp, #232	; 0xe8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007716:	2300      	movs	r3, #0
 8007718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800772e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10f      	bne.n	8007756 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <HAL_UART_IRQHandler+0x66>
 8007742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fc11 	bl	8007f76 <UART_Receive_IT>
      return;
 8007754:	e256      	b.n	8007c04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80de 	beq.w	800791c <HAL_UART_IRQHandler+0x22c>
 8007760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007770:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80d1 	beq.w	800791c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_UART_IRQHandler+0xae>
 8007786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800778a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	f043 0201 	orr.w	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <HAL_UART_IRQHandler+0xd2>
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f043 0202 	orr.w	r2, r3, #2
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <HAL_UART_IRQHandler+0xf6>
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f043 0204 	orr.w	r2, r3, #4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d011      	beq.n	8007816 <HAL_UART_IRQHandler+0x126>
 80077f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d105      	bne.n	800780a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	f043 0208 	orr.w	r2, r3, #8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 81ed 	beq.w	8007bfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d008      	beq.n	800783e <HAL_UART_IRQHandler+0x14e>
 800782c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fb9c 	bl	8007f76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <HAL_UART_IRQHandler+0x17a>
 8007862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d04f      	beq.n	800790a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 faa4 	bl	8007db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d141      	bne.n	8007902 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3314      	adds	r3, #20
 8007884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3314      	adds	r3, #20
 80078a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1d9      	bne.n	800787e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d013      	beq.n	80078fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	4a7d      	ldr	r2, [pc, #500]	; (8007acc <HAL_UART_IRQHandler+0x3dc>)
 80078d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fc f897 	bl	8003a12 <HAL_DMA_Abort_IT>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	e00e      	b.n	8007918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f99a 	bl	8007c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007900:	e00a      	b.n	8007918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f996 	bl	8007c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	e006      	b.n	8007918 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f992 	bl	8007c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007916:	e170      	b.n	8007bfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	bf00      	nop
    return;
 800791a:	e16e      	b.n	8007bfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	2b01      	cmp	r3, #1
 8007922:	f040 814a 	bne.w	8007bba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792a:	f003 0310 	and.w	r3, r3, #16
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8143 	beq.w	8007bba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 813c 	beq.w	8007bba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007942:	2300      	movs	r3, #0
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60bb      	str	r3, [r7, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	f040 80b4 	bne.w	8007ad0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8140 	beq.w	8007bfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007982:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007986:	429a      	cmp	r2, r3
 8007988:	f080 8139 	bcs.w	8007bfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007992:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799e:	f000 8088 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1d9      	bne.n	80079a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3314      	adds	r3, #20
 80079f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a00:	f023 0301 	bic.w	r3, r3, #1
 8007a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3314      	adds	r3, #20
 8007a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e1      	bne.n	80079ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3314      	adds	r3, #20
 8007a30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3314      	adds	r3, #20
 8007a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e3      	bne.n	8007a2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	330c      	adds	r3, #12
 8007a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a7a:	e853 3f00 	ldrex	r3, [r3]
 8007a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a82:	f023 0310 	bic.w	r3, r3, #16
 8007a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a94:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e3      	bne.n	8007a70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fb ff40 	bl	8003932 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8c0 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ac8:	e099      	b.n	8007bfe <HAL_UART_IRQHandler+0x50e>
 8007aca:	bf00      	nop
 8007acc:	08007e7f 	.word	0x08007e7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 808b 	beq.w	8007c02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8086 	beq.w	8007c02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	330c      	adds	r3, #12
 8007afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b1a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e3      	bne.n	8007af6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3314      	adds	r3, #20
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3314      	adds	r3, #20
 8007b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b52:	633a      	str	r2, [r7, #48]	; 0x30
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e3      	bne.n	8007b2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0310 	bic.w	r3, r3, #16
 8007b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	330c      	adds	r3, #12
 8007b94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b98:	61fa      	str	r2, [r7, #28]
 8007b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	69b9      	ldr	r1, [r7, #24]
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e3      	bne.n	8007b74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f848 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bb8:	e023      	b.n	8007c02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <HAL_UART_IRQHandler+0x4ea>
 8007bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f967 	bl	8007ea6 <UART_Transmit_IT>
    return;
 8007bd8:	e014      	b.n	8007c04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00e      	beq.n	8007c04 <HAL_UART_IRQHandler+0x514>
 8007be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d008      	beq.n	8007c04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f9a7 	bl	8007f46 <UART_EndTransmit_IT>
    return;
 8007bf8:	e004      	b.n	8007c04 <HAL_UART_IRQHandler+0x514>
    return;
 8007bfa:	bf00      	nop
 8007bfc:	e002      	b.n	8007c04 <HAL_UART_IRQHandler+0x514>
      return;
 8007bfe:	bf00      	nop
 8007c00:	e000      	b.n	8007c04 <HAL_UART_IRQHandler+0x514>
      return;
 8007c02:	bf00      	nop
  }
}
 8007c04:	37e8      	adds	r7, #232	; 0xe8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop

08007c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b090      	sub	sp, #64	; 0x40
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c70:	e050      	b.n	8007d14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d04c      	beq.n	8007d14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c80:	f7fa ffce 	bl	8002c20 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d241      	bcs.n	8007d14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cb0:	637a      	str	r2, [r7, #52]	; 0x34
 8007cb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3314      	adds	r3, #20
 8007cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce4:	623a      	str	r2, [r7, #32]
 8007ce6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	69f9      	ldr	r1, [r7, #28]
 8007cea:	6a3a      	ldr	r2, [r7, #32]
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e5      	bne.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e00f      	b.n	8007d34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d09f      	beq.n	8007c72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3740      	adds	r7, #64	; 0x40
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	88fa      	ldrh	r2, [r7, #6]
 8007d54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	88fa      	ldrh	r2, [r7, #6]
 8007d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2222      	movs	r2, #34	; 0x22
 8007d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d007      	beq.n	8007d8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695a      	ldr	r2, [r3, #20]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0201 	orr.w	r2, r2, #1
 8007d98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0220 	orr.w	r2, r2, #32
 8007da8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b095      	sub	sp, #84	; 0x54
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de0:	643a      	str	r2, [r7, #64]	; 0x40
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e5      	bne.n	8007dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	e853 3f00 	ldrex	r3, [r3]
 8007e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3314      	adds	r3, #20
 8007e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e5      	bne.n	8007df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d119      	bne.n	8007e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	647b      	str	r3, [r7, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e50:	61ba      	str	r2, [r7, #24]
 8007e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6979      	ldr	r1, [r7, #20]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e5      	bne.n	8007e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e72:	bf00      	nop
 8007e74:	3754      	adds	r7, #84	; 0x54
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fecb 	bl	8007c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b21      	cmp	r3, #33	; 0x21
 8007eb8:	d13e      	bne.n	8007f38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec2:	d114      	bne.n	8007eee <UART_Transmit_IT+0x48>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d110      	bne.n	8007eee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	1c9a      	adds	r2, r3, #2
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	621a      	str	r2, [r3, #32]
 8007eec:	e008      	b.n	8007f00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6211      	str	r1, [r2, #32]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10f      	bne.n	8007f34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e000      	b.n	8007f3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f38:	2302      	movs	r3, #2
  }
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fe50 	bl	8007c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b08c      	sub	sp, #48	; 0x30
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b22      	cmp	r3, #34	; 0x22
 8007f88:	f040 80ab 	bne.w	80080e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f94:	d117      	bne.n	8007fc6 <UART_Receive_IT+0x50>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d113      	bne.n	8007fc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	1c9a      	adds	r2, r3, #2
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc4:	e026      	b.n	8008014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd8:	d007      	beq.n	8007fea <UART_Receive_IT+0x74>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <UART_Receive_IT+0x82>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	e008      	b.n	800800a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008004:	b2da      	uxtb	r2, r3
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29b      	uxth	r3, r3
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4619      	mov	r1, r3
 8008022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008024:	2b00      	cmp	r3, #0
 8008026:	d15a      	bne.n	80080de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 0220 	bic.w	r2, r2, #32
 8008036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0201 	bic.w	r2, r2, #1
 8008056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	d135      	bne.n	80080d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f023 0310 	bic.w	r3, r3, #16
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808e:	623a      	str	r2, [r7, #32]
 8008090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	69f9      	ldr	r1, [r7, #28]
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	61bb      	str	r3, [r7, #24]
   return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d10a      	bne.n	80080c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fdbb 	bl	8007c48 <HAL_UARTEx_RxEventCallback>
 80080d2:	e002      	b.n	80080da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff fda3 	bl	8007c20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	e002      	b.n	80080e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3730      	adds	r7, #48	; 0x30
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f0:	b0c0      	sub	sp, #256	; 0x100
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	68d9      	ldr	r1, [r3, #12]
 800810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	ea40 0301 	orr.w	r3, r0, r1
 8008114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	431a      	orrs	r2, r3
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	431a      	orrs	r2, r3
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008144:	f021 010c 	bic.w	r1, r1, #12
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008152:	430b      	orrs	r3, r1
 8008154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008166:	6999      	ldr	r1, [r3, #24]
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	ea40 0301 	orr.w	r3, r0, r1
 8008172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b8f      	ldr	r3, [pc, #572]	; (80083b8 <UART_SetConfig+0x2cc>)
 800817c:	429a      	cmp	r2, r3
 800817e:	d005      	beq.n	800818c <UART_SetConfig+0xa0>
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b8d      	ldr	r3, [pc, #564]	; (80083bc <UART_SetConfig+0x2d0>)
 8008188:	429a      	cmp	r2, r3
 800818a:	d104      	bne.n	8008196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fe fbd8 	bl	8006940 <HAL_RCC_GetPCLK2Freq>
 8008190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008194:	e003      	b.n	800819e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008196:	f7fe fbbf 	bl	8006918 <HAL_RCC_GetPCLK1Freq>
 800819a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a8:	f040 810c 	bne.w	80083c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	1891      	adds	r1, r2, r2
 80081c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80081c6:	415b      	adcs	r3, r3
 80081c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081ce:	4621      	mov	r1, r4
 80081d0:	eb12 0801 	adds.w	r8, r2, r1
 80081d4:	4629      	mov	r1, r5
 80081d6:	eb43 0901 	adc.w	r9, r3, r1
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ee:	4690      	mov	r8, r2
 80081f0:	4699      	mov	r9, r3
 80081f2:	4623      	mov	r3, r4
 80081f4:	eb18 0303 	adds.w	r3, r8, r3
 80081f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081fc:	462b      	mov	r3, r5
 80081fe:	eb49 0303 	adc.w	r3, r9, r3
 8008202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008212:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800821a:	460b      	mov	r3, r1
 800821c:	18db      	adds	r3, r3, r3
 800821e:	653b      	str	r3, [r7, #80]	; 0x50
 8008220:	4613      	mov	r3, r2
 8008222:	eb42 0303 	adc.w	r3, r2, r3
 8008226:	657b      	str	r3, [r7, #84]	; 0x54
 8008228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800822c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008230:	f7f8 fd5a 	bl	8000ce8 <__aeabi_uldivmod>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4b61      	ldr	r3, [pc, #388]	; (80083c0 <UART_SetConfig+0x2d4>)
 800823a:	fba3 2302 	umull	r2, r3, r3, r2
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	011c      	lsls	r4, r3, #4
 8008242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800824c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	1891      	adds	r1, r2, r2
 800825a:	64b9      	str	r1, [r7, #72]	; 0x48
 800825c:	415b      	adcs	r3, r3
 800825e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008264:	4641      	mov	r1, r8
 8008266:	eb12 0a01 	adds.w	sl, r2, r1
 800826a:	4649      	mov	r1, r9
 800826c:	eb43 0b01 	adc.w	fp, r3, r1
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800827c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008284:	4692      	mov	sl, r2
 8008286:	469b      	mov	fp, r3
 8008288:	4643      	mov	r3, r8
 800828a:	eb1a 0303 	adds.w	r3, sl, r3
 800828e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008292:	464b      	mov	r3, r9
 8008294:	eb4b 0303 	adc.w	r3, fp, r3
 8008298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082b0:	460b      	mov	r3, r1
 80082b2:	18db      	adds	r3, r3, r3
 80082b4:	643b      	str	r3, [r7, #64]	; 0x40
 80082b6:	4613      	mov	r3, r2
 80082b8:	eb42 0303 	adc.w	r3, r2, r3
 80082bc:	647b      	str	r3, [r7, #68]	; 0x44
 80082be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082c6:	f7f8 fd0f 	bl	8000ce8 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	4b3b      	ldr	r3, [pc, #236]	; (80083c0 <UART_SetConfig+0x2d4>)
 80082d2:	fba3 2301 	umull	r2, r3, r3, r1
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2264      	movs	r2, #100	; 0x64
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	1acb      	subs	r3, r1, r3
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082e6:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <UART_SetConfig+0x2d4>)
 80082e8:	fba3 2302 	umull	r2, r3, r3, r2
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082f4:	441c      	add	r4, r3
 80082f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008300:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	1891      	adds	r1, r2, r2
 800830e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008310:	415b      	adcs	r3, r3
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008318:	4641      	mov	r1, r8
 800831a:	1851      	adds	r1, r2, r1
 800831c:	6339      	str	r1, [r7, #48]	; 0x30
 800831e:	4649      	mov	r1, r9
 8008320:	414b      	adcs	r3, r1
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008330:	4659      	mov	r1, fp
 8008332:	00cb      	lsls	r3, r1, #3
 8008334:	4651      	mov	r1, sl
 8008336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833a:	4651      	mov	r1, sl
 800833c:	00ca      	lsls	r2, r1, #3
 800833e:	4610      	mov	r0, r2
 8008340:	4619      	mov	r1, r3
 8008342:	4603      	mov	r3, r0
 8008344:	4642      	mov	r2, r8
 8008346:	189b      	adds	r3, r3, r2
 8008348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800834c:	464b      	mov	r3, r9
 800834e:	460a      	mov	r2, r1
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008364:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800836c:	460b      	mov	r3, r1
 800836e:	18db      	adds	r3, r3, r3
 8008370:	62bb      	str	r3, [r7, #40]	; 0x28
 8008372:	4613      	mov	r3, r2
 8008374:	eb42 0303 	adc.w	r3, r2, r3
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800837a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800837e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008382:	f7f8 fcb1 	bl	8000ce8 <__aeabi_uldivmod>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <UART_SetConfig+0x2d4>)
 800838c:	fba3 1302 	umull	r1, r3, r3, r2
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	2164      	movs	r1, #100	; 0x64
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	3332      	adds	r3, #50	; 0x32
 800839e:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <UART_SetConfig+0x2d4>)
 80083a0:	fba2 2303 	umull	r2, r3, r2, r3
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	f003 0207 	and.w	r2, r3, #7
 80083aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4422      	add	r2, r4
 80083b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b4:	e105      	b.n	80085c2 <UART_SetConfig+0x4d6>
 80083b6:	bf00      	nop
 80083b8:	40011000 	.word	0x40011000
 80083bc:	40011400 	.word	0x40011400
 80083c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083d6:	4642      	mov	r2, r8
 80083d8:	464b      	mov	r3, r9
 80083da:	1891      	adds	r1, r2, r2
 80083dc:	6239      	str	r1, [r7, #32]
 80083de:	415b      	adcs	r3, r3
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
 80083e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083e6:	4641      	mov	r1, r8
 80083e8:	1854      	adds	r4, r2, r1
 80083ea:	4649      	mov	r1, r9
 80083ec:	eb43 0501 	adc.w	r5, r3, r1
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	00eb      	lsls	r3, r5, #3
 80083fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083fe:	00e2      	lsls	r2, r4, #3
 8008400:	4614      	mov	r4, r2
 8008402:	461d      	mov	r5, r3
 8008404:	4643      	mov	r3, r8
 8008406:	18e3      	adds	r3, r4, r3
 8008408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800840c:	464b      	mov	r3, r9
 800840e:	eb45 0303 	adc.w	r3, r5, r3
 8008412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008432:	4629      	mov	r1, r5
 8008434:	008b      	lsls	r3, r1, #2
 8008436:	4621      	mov	r1, r4
 8008438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800843c:	4621      	mov	r1, r4
 800843e:	008a      	lsls	r2, r1, #2
 8008440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008444:	f7f8 fc50 	bl	8000ce8 <__aeabi_uldivmod>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4b60      	ldr	r3, [pc, #384]	; (80085d0 <UART_SetConfig+0x4e4>)
 800844e:	fba3 2302 	umull	r2, r3, r3, r2
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	011c      	lsls	r4, r3, #4
 8008456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800845a:	2200      	movs	r2, #0
 800845c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008468:	4642      	mov	r2, r8
 800846a:	464b      	mov	r3, r9
 800846c:	1891      	adds	r1, r2, r2
 800846e:	61b9      	str	r1, [r7, #24]
 8008470:	415b      	adcs	r3, r3
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008478:	4641      	mov	r1, r8
 800847a:	1851      	adds	r1, r2, r1
 800847c:	6139      	str	r1, [r7, #16]
 800847e:	4649      	mov	r1, r9
 8008480:	414b      	adcs	r3, r1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008490:	4659      	mov	r1, fp
 8008492:	00cb      	lsls	r3, r1, #3
 8008494:	4651      	mov	r1, sl
 8008496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849a:	4651      	mov	r1, sl
 800849c:	00ca      	lsls	r2, r1, #3
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	4642      	mov	r2, r8
 80084a6:	189b      	adds	r3, r3, r2
 80084a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084ac:	464b      	mov	r3, r9
 80084ae:	460a      	mov	r2, r1
 80084b0:	eb42 0303 	adc.w	r3, r2, r3
 80084b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80084c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084d0:	4649      	mov	r1, r9
 80084d2:	008b      	lsls	r3, r1, #2
 80084d4:	4641      	mov	r1, r8
 80084d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084da:	4641      	mov	r1, r8
 80084dc:	008a      	lsls	r2, r1, #2
 80084de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084e2:	f7f8 fc01 	bl	8000ce8 <__aeabi_uldivmod>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4b39      	ldr	r3, [pc, #228]	; (80085d0 <UART_SetConfig+0x4e4>)
 80084ec:	fba3 1302 	umull	r1, r3, r3, r2
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	2164      	movs	r1, #100	; 0x64
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	3332      	adds	r3, #50	; 0x32
 80084fe:	4a34      	ldr	r2, [pc, #208]	; (80085d0 <UART_SetConfig+0x4e4>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800850a:	441c      	add	r4, r3
 800850c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008510:	2200      	movs	r2, #0
 8008512:	673b      	str	r3, [r7, #112]	; 0x70
 8008514:	677a      	str	r2, [r7, #116]	; 0x74
 8008516:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	1891      	adds	r1, r2, r2
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	415b      	adcs	r3, r3
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800852a:	4641      	mov	r1, r8
 800852c:	1851      	adds	r1, r2, r1
 800852e:	6039      	str	r1, [r7, #0]
 8008530:	4649      	mov	r1, r9
 8008532:	414b      	adcs	r3, r1
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008542:	4659      	mov	r1, fp
 8008544:	00cb      	lsls	r3, r1, #3
 8008546:	4651      	mov	r1, sl
 8008548:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800854c:	4651      	mov	r1, sl
 800854e:	00ca      	lsls	r2, r1, #3
 8008550:	4610      	mov	r0, r2
 8008552:	4619      	mov	r1, r3
 8008554:	4603      	mov	r3, r0
 8008556:	4642      	mov	r2, r8
 8008558:	189b      	adds	r3, r3, r2
 800855a:	66bb      	str	r3, [r7, #104]	; 0x68
 800855c:	464b      	mov	r3, r9
 800855e:	460a      	mov	r2, r1
 8008560:	eb42 0303 	adc.w	r3, r2, r3
 8008564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	663b      	str	r3, [r7, #96]	; 0x60
 8008570:	667a      	str	r2, [r7, #100]	; 0x64
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800857e:	4649      	mov	r1, r9
 8008580:	008b      	lsls	r3, r1, #2
 8008582:	4641      	mov	r1, r8
 8008584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008588:	4641      	mov	r1, r8
 800858a:	008a      	lsls	r2, r1, #2
 800858c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008590:	f7f8 fbaa 	bl	8000ce8 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <UART_SetConfig+0x4e4>)
 800859a:	fba3 1302 	umull	r1, r3, r3, r2
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	2164      	movs	r1, #100	; 0x64
 80085a2:	fb01 f303 	mul.w	r3, r1, r3
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	3332      	adds	r3, #50	; 0x32
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <UART_SetConfig+0x4e4>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	f003 020f 	and.w	r2, r3, #15
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4422      	add	r2, r4
 80085c0:	609a      	str	r2, [r3, #8]
}
 80085c2:	bf00      	nop
 80085c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085c8:	46bd      	mov	sp, r7
 80085ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ce:	bf00      	nop
 80085d0:	51eb851f 	.word	0x51eb851f

080085d4 <atoi>:
 80085d4:	220a      	movs	r2, #10
 80085d6:	2100      	movs	r1, #0
 80085d8:	f001 bf22 	b.w	800a420 <strtol>

080085dc <__errno>:
 80085dc:	4b01      	ldr	r3, [pc, #4]	; (80085e4 <__errno+0x8>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	2000000c 	.word	0x2000000c

080085e8 <__libc_init_array>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	4d0d      	ldr	r5, [pc, #52]	; (8008620 <__libc_init_array+0x38>)
 80085ec:	4c0d      	ldr	r4, [pc, #52]	; (8008624 <__libc_init_array+0x3c>)
 80085ee:	1b64      	subs	r4, r4, r5
 80085f0:	10a4      	asrs	r4, r4, #2
 80085f2:	2600      	movs	r6, #0
 80085f4:	42a6      	cmp	r6, r4
 80085f6:	d109      	bne.n	800860c <__libc_init_array+0x24>
 80085f8:	4d0b      	ldr	r5, [pc, #44]	; (8008628 <__libc_init_array+0x40>)
 80085fa:	4c0c      	ldr	r4, [pc, #48]	; (800862c <__libc_init_array+0x44>)
 80085fc:	f004 fd44 	bl	800d088 <_init>
 8008600:	1b64      	subs	r4, r4, r5
 8008602:	10a4      	asrs	r4, r4, #2
 8008604:	2600      	movs	r6, #0
 8008606:	42a6      	cmp	r6, r4
 8008608:	d105      	bne.n	8008616 <__libc_init_array+0x2e>
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008610:	4798      	blx	r3
 8008612:	3601      	adds	r6, #1
 8008614:	e7ee      	b.n	80085f4 <__libc_init_array+0xc>
 8008616:	f855 3b04 	ldr.w	r3, [r5], #4
 800861a:	4798      	blx	r3
 800861c:	3601      	adds	r6, #1
 800861e:	e7f2      	b.n	8008606 <__libc_init_array+0x1e>
 8008620:	0800d850 	.word	0x0800d850
 8008624:	0800d850 	.word	0x0800d850
 8008628:	0800d850 	.word	0x0800d850
 800862c:	0800d854 	.word	0x0800d854

08008630 <malloc>:
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <malloc+0xc>)
 8008632:	4601      	mov	r1, r0
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f000 b87f 	b.w	8008738 <_malloc_r>
 800863a:	bf00      	nop
 800863c:	2000000c 	.word	0x2000000c

08008640 <free>:
 8008640:	4b02      	ldr	r3, [pc, #8]	; (800864c <free+0xc>)
 8008642:	4601      	mov	r1, r0
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f000 b80b 	b.w	8008660 <_free_r>
 800864a:	bf00      	nop
 800864c:	2000000c 	.word	0x2000000c

08008650 <memset>:
 8008650:	4402      	add	r2, r0
 8008652:	4603      	mov	r3, r0
 8008654:	4293      	cmp	r3, r2
 8008656:	d100      	bne.n	800865a <memset+0xa>
 8008658:	4770      	bx	lr
 800865a:	f803 1b01 	strb.w	r1, [r3], #1
 800865e:	e7f9      	b.n	8008654 <memset+0x4>

08008660 <_free_r>:
 8008660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008662:	2900      	cmp	r1, #0
 8008664:	d044      	beq.n	80086f0 <_free_r+0x90>
 8008666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800866a:	9001      	str	r0, [sp, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f1a1 0404 	sub.w	r4, r1, #4
 8008672:	bfb8      	it	lt
 8008674:	18e4      	addlt	r4, r4, r3
 8008676:	f003 f91b 	bl	800b8b0 <__malloc_lock>
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <_free_r+0x94>)
 800867c:	9801      	ldr	r0, [sp, #4]
 800867e:	6813      	ldr	r3, [r2, #0]
 8008680:	b933      	cbnz	r3, 8008690 <_free_r+0x30>
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	6014      	str	r4, [r2, #0]
 8008686:	b003      	add	sp, #12
 8008688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800868c:	f003 b916 	b.w	800b8bc <__malloc_unlock>
 8008690:	42a3      	cmp	r3, r4
 8008692:	d908      	bls.n	80086a6 <_free_r+0x46>
 8008694:	6825      	ldr	r5, [r4, #0]
 8008696:	1961      	adds	r1, r4, r5
 8008698:	428b      	cmp	r3, r1
 800869a:	bf01      	itttt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	1949      	addeq	r1, r1, r5
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	e7ed      	b.n	8008682 <_free_r+0x22>
 80086a6:	461a      	mov	r2, r3
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b10b      	cbz	r3, 80086b0 <_free_r+0x50>
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	d9fa      	bls.n	80086a6 <_free_r+0x46>
 80086b0:	6811      	ldr	r1, [r2, #0]
 80086b2:	1855      	adds	r5, r2, r1
 80086b4:	42a5      	cmp	r5, r4
 80086b6:	d10b      	bne.n	80086d0 <_free_r+0x70>
 80086b8:	6824      	ldr	r4, [r4, #0]
 80086ba:	4421      	add	r1, r4
 80086bc:	1854      	adds	r4, r2, r1
 80086be:	42a3      	cmp	r3, r4
 80086c0:	6011      	str	r1, [r2, #0]
 80086c2:	d1e0      	bne.n	8008686 <_free_r+0x26>
 80086c4:	681c      	ldr	r4, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	6053      	str	r3, [r2, #4]
 80086ca:	4421      	add	r1, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	e7da      	b.n	8008686 <_free_r+0x26>
 80086d0:	d902      	bls.n	80086d8 <_free_r+0x78>
 80086d2:	230c      	movs	r3, #12
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	e7d6      	b.n	8008686 <_free_r+0x26>
 80086d8:	6825      	ldr	r5, [r4, #0]
 80086da:	1961      	adds	r1, r4, r5
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf04      	itt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	bf04      	itt	eq
 80086e8:	1949      	addeq	r1, r1, r5
 80086ea:	6021      	streq	r1, [r4, #0]
 80086ec:	6054      	str	r4, [r2, #4]
 80086ee:	e7ca      	b.n	8008686 <_free_r+0x26>
 80086f0:	b003      	add	sp, #12
 80086f2:	bd30      	pop	{r4, r5, pc}
 80086f4:	20000598 	.word	0x20000598

080086f8 <sbrk_aligned>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	4e0e      	ldr	r6, [pc, #56]	; (8008734 <sbrk_aligned+0x3c>)
 80086fc:	460c      	mov	r4, r1
 80086fe:	6831      	ldr	r1, [r6, #0]
 8008700:	4605      	mov	r5, r0
 8008702:	b911      	cbnz	r1, 800870a <sbrk_aligned+0x12>
 8008704:	f000 ff06 	bl	8009514 <_sbrk_r>
 8008708:	6030      	str	r0, [r6, #0]
 800870a:	4621      	mov	r1, r4
 800870c:	4628      	mov	r0, r5
 800870e:	f000 ff01 	bl	8009514 <_sbrk_r>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	d00a      	beq.n	800872c <sbrk_aligned+0x34>
 8008716:	1cc4      	adds	r4, r0, #3
 8008718:	f024 0403 	bic.w	r4, r4, #3
 800871c:	42a0      	cmp	r0, r4
 800871e:	d007      	beq.n	8008730 <sbrk_aligned+0x38>
 8008720:	1a21      	subs	r1, r4, r0
 8008722:	4628      	mov	r0, r5
 8008724:	f000 fef6 	bl	8009514 <_sbrk_r>
 8008728:	3001      	adds	r0, #1
 800872a:	d101      	bne.n	8008730 <sbrk_aligned+0x38>
 800872c:	f04f 34ff 	mov.w	r4, #4294967295
 8008730:	4620      	mov	r0, r4
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	2000059c 	.word	0x2000059c

08008738 <_malloc_r>:
 8008738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	1ccd      	adds	r5, r1, #3
 800873e:	f025 0503 	bic.w	r5, r5, #3
 8008742:	3508      	adds	r5, #8
 8008744:	2d0c      	cmp	r5, #12
 8008746:	bf38      	it	cc
 8008748:	250c      	movcc	r5, #12
 800874a:	2d00      	cmp	r5, #0
 800874c:	4607      	mov	r7, r0
 800874e:	db01      	blt.n	8008754 <_malloc_r+0x1c>
 8008750:	42a9      	cmp	r1, r5
 8008752:	d905      	bls.n	8008760 <_malloc_r+0x28>
 8008754:	230c      	movs	r3, #12
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	2600      	movs	r6, #0
 800875a:	4630      	mov	r0, r6
 800875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008760:	4e2e      	ldr	r6, [pc, #184]	; (800881c <_malloc_r+0xe4>)
 8008762:	f003 f8a5 	bl	800b8b0 <__malloc_lock>
 8008766:	6833      	ldr	r3, [r6, #0]
 8008768:	461c      	mov	r4, r3
 800876a:	bb34      	cbnz	r4, 80087ba <_malloc_r+0x82>
 800876c:	4629      	mov	r1, r5
 800876e:	4638      	mov	r0, r7
 8008770:	f7ff ffc2 	bl	80086f8 <sbrk_aligned>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	4604      	mov	r4, r0
 8008778:	d14d      	bne.n	8008816 <_malloc_r+0xde>
 800877a:	6834      	ldr	r4, [r6, #0]
 800877c:	4626      	mov	r6, r4
 800877e:	2e00      	cmp	r6, #0
 8008780:	d140      	bne.n	8008804 <_malloc_r+0xcc>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	4631      	mov	r1, r6
 8008786:	4638      	mov	r0, r7
 8008788:	eb04 0803 	add.w	r8, r4, r3
 800878c:	f000 fec2 	bl	8009514 <_sbrk_r>
 8008790:	4580      	cmp	r8, r0
 8008792:	d13a      	bne.n	800880a <_malloc_r+0xd2>
 8008794:	6821      	ldr	r1, [r4, #0]
 8008796:	3503      	adds	r5, #3
 8008798:	1a6d      	subs	r5, r5, r1
 800879a:	f025 0503 	bic.w	r5, r5, #3
 800879e:	3508      	adds	r5, #8
 80087a0:	2d0c      	cmp	r5, #12
 80087a2:	bf38      	it	cc
 80087a4:	250c      	movcc	r5, #12
 80087a6:	4629      	mov	r1, r5
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff ffa5 	bl	80086f8 <sbrk_aligned>
 80087ae:	3001      	adds	r0, #1
 80087b0:	d02b      	beq.n	800880a <_malloc_r+0xd2>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	442b      	add	r3, r5
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	e00e      	b.n	80087d8 <_malloc_r+0xa0>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	1b52      	subs	r2, r2, r5
 80087be:	d41e      	bmi.n	80087fe <_malloc_r+0xc6>
 80087c0:	2a0b      	cmp	r2, #11
 80087c2:	d916      	bls.n	80087f2 <_malloc_r+0xba>
 80087c4:	1961      	adds	r1, r4, r5
 80087c6:	42a3      	cmp	r3, r4
 80087c8:	6025      	str	r5, [r4, #0]
 80087ca:	bf18      	it	ne
 80087cc:	6059      	strne	r1, [r3, #4]
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	bf08      	it	eq
 80087d2:	6031      	streq	r1, [r6, #0]
 80087d4:	5162      	str	r2, [r4, r5]
 80087d6:	604b      	str	r3, [r1, #4]
 80087d8:	4638      	mov	r0, r7
 80087da:	f104 060b 	add.w	r6, r4, #11
 80087de:	f003 f86d 	bl	800b8bc <__malloc_unlock>
 80087e2:	f026 0607 	bic.w	r6, r6, #7
 80087e6:	1d23      	adds	r3, r4, #4
 80087e8:	1af2      	subs	r2, r6, r3
 80087ea:	d0b6      	beq.n	800875a <_malloc_r+0x22>
 80087ec:	1b9b      	subs	r3, r3, r6
 80087ee:	50a3      	str	r3, [r4, r2]
 80087f0:	e7b3      	b.n	800875a <_malloc_r+0x22>
 80087f2:	6862      	ldr	r2, [r4, #4]
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	bf0c      	ite	eq
 80087f8:	6032      	streq	r2, [r6, #0]
 80087fa:	605a      	strne	r2, [r3, #4]
 80087fc:	e7ec      	b.n	80087d8 <_malloc_r+0xa0>
 80087fe:	4623      	mov	r3, r4
 8008800:	6864      	ldr	r4, [r4, #4]
 8008802:	e7b2      	b.n	800876a <_malloc_r+0x32>
 8008804:	4634      	mov	r4, r6
 8008806:	6876      	ldr	r6, [r6, #4]
 8008808:	e7b9      	b.n	800877e <_malloc_r+0x46>
 800880a:	230c      	movs	r3, #12
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	4638      	mov	r0, r7
 8008810:	f003 f854 	bl	800b8bc <__malloc_unlock>
 8008814:	e7a1      	b.n	800875a <_malloc_r+0x22>
 8008816:	6025      	str	r5, [r4, #0]
 8008818:	e7de      	b.n	80087d8 <_malloc_r+0xa0>
 800881a:	bf00      	nop
 800881c:	20000598 	.word	0x20000598

08008820 <__cvt>:
 8008820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	ec55 4b10 	vmov	r4, r5, d0
 8008828:	2d00      	cmp	r5, #0
 800882a:	460e      	mov	r6, r1
 800882c:	4619      	mov	r1, r3
 800882e:	462b      	mov	r3, r5
 8008830:	bfbb      	ittet	lt
 8008832:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008836:	461d      	movlt	r5, r3
 8008838:	2300      	movge	r3, #0
 800883a:	232d      	movlt	r3, #45	; 0x2d
 800883c:	700b      	strb	r3, [r1, #0]
 800883e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008840:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008844:	4691      	mov	r9, r2
 8008846:	f023 0820 	bic.w	r8, r3, #32
 800884a:	bfbc      	itt	lt
 800884c:	4622      	movlt	r2, r4
 800884e:	4614      	movlt	r4, r2
 8008850:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008854:	d005      	beq.n	8008862 <__cvt+0x42>
 8008856:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800885a:	d100      	bne.n	800885e <__cvt+0x3e>
 800885c:	3601      	adds	r6, #1
 800885e:	2102      	movs	r1, #2
 8008860:	e000      	b.n	8008864 <__cvt+0x44>
 8008862:	2103      	movs	r1, #3
 8008864:	ab03      	add	r3, sp, #12
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	ab02      	add	r3, sp, #8
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	ec45 4b10 	vmov	d0, r4, r5
 8008870:	4653      	mov	r3, sl
 8008872:	4632      	mov	r2, r6
 8008874:	f001 fe88 	bl	800a588 <_dtoa_r>
 8008878:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800887c:	4607      	mov	r7, r0
 800887e:	d102      	bne.n	8008886 <__cvt+0x66>
 8008880:	f019 0f01 	tst.w	r9, #1
 8008884:	d022      	beq.n	80088cc <__cvt+0xac>
 8008886:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800888a:	eb07 0906 	add.w	r9, r7, r6
 800888e:	d110      	bne.n	80088b2 <__cvt+0x92>
 8008890:	783b      	ldrb	r3, [r7, #0]
 8008892:	2b30      	cmp	r3, #48	; 0x30
 8008894:	d10a      	bne.n	80088ac <__cvt+0x8c>
 8008896:	2200      	movs	r2, #0
 8008898:	2300      	movs	r3, #0
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f8 f943 	bl	8000b28 <__aeabi_dcmpeq>
 80088a2:	b918      	cbnz	r0, 80088ac <__cvt+0x8c>
 80088a4:	f1c6 0601 	rsb	r6, r6, #1
 80088a8:	f8ca 6000 	str.w	r6, [sl]
 80088ac:	f8da 3000 	ldr.w	r3, [sl]
 80088b0:	4499      	add	r9, r3
 80088b2:	2200      	movs	r2, #0
 80088b4:	2300      	movs	r3, #0
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f8 f935 	bl	8000b28 <__aeabi_dcmpeq>
 80088be:	b108      	cbz	r0, 80088c4 <__cvt+0xa4>
 80088c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80088c4:	2230      	movs	r2, #48	; 0x30
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	454b      	cmp	r3, r9
 80088ca:	d307      	bcc.n	80088dc <__cvt+0xbc>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088d0:	1bdb      	subs	r3, r3, r7
 80088d2:	4638      	mov	r0, r7
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	b004      	add	sp, #16
 80088d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088dc:	1c59      	adds	r1, r3, #1
 80088de:	9103      	str	r1, [sp, #12]
 80088e0:	701a      	strb	r2, [r3, #0]
 80088e2:	e7f0      	b.n	80088c6 <__cvt+0xa6>

080088e4 <__exponent>:
 80088e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e6:	4603      	mov	r3, r0
 80088e8:	2900      	cmp	r1, #0
 80088ea:	bfb8      	it	lt
 80088ec:	4249      	neglt	r1, r1
 80088ee:	f803 2b02 	strb.w	r2, [r3], #2
 80088f2:	bfb4      	ite	lt
 80088f4:	222d      	movlt	r2, #45	; 0x2d
 80088f6:	222b      	movge	r2, #43	; 0x2b
 80088f8:	2909      	cmp	r1, #9
 80088fa:	7042      	strb	r2, [r0, #1]
 80088fc:	dd2a      	ble.n	8008954 <__exponent+0x70>
 80088fe:	f10d 0407 	add.w	r4, sp, #7
 8008902:	46a4      	mov	ip, r4
 8008904:	270a      	movs	r7, #10
 8008906:	46a6      	mov	lr, r4
 8008908:	460a      	mov	r2, r1
 800890a:	fb91 f6f7 	sdiv	r6, r1, r7
 800890e:	fb07 1516 	mls	r5, r7, r6, r1
 8008912:	3530      	adds	r5, #48	; 0x30
 8008914:	2a63      	cmp	r2, #99	; 0x63
 8008916:	f104 34ff 	add.w	r4, r4, #4294967295
 800891a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800891e:	4631      	mov	r1, r6
 8008920:	dcf1      	bgt.n	8008906 <__exponent+0x22>
 8008922:	3130      	adds	r1, #48	; 0x30
 8008924:	f1ae 0502 	sub.w	r5, lr, #2
 8008928:	f804 1c01 	strb.w	r1, [r4, #-1]
 800892c:	1c44      	adds	r4, r0, #1
 800892e:	4629      	mov	r1, r5
 8008930:	4561      	cmp	r1, ip
 8008932:	d30a      	bcc.n	800894a <__exponent+0x66>
 8008934:	f10d 0209 	add.w	r2, sp, #9
 8008938:	eba2 020e 	sub.w	r2, r2, lr
 800893c:	4565      	cmp	r5, ip
 800893e:	bf88      	it	hi
 8008940:	2200      	movhi	r2, #0
 8008942:	4413      	add	r3, r2
 8008944:	1a18      	subs	r0, r3, r0
 8008946:	b003      	add	sp, #12
 8008948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800894a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800894e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008952:	e7ed      	b.n	8008930 <__exponent+0x4c>
 8008954:	2330      	movs	r3, #48	; 0x30
 8008956:	3130      	adds	r1, #48	; 0x30
 8008958:	7083      	strb	r3, [r0, #2]
 800895a:	70c1      	strb	r1, [r0, #3]
 800895c:	1d03      	adds	r3, r0, #4
 800895e:	e7f1      	b.n	8008944 <__exponent+0x60>

08008960 <_printf_float>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	ed2d 8b02 	vpush	{d8}
 8008968:	b08d      	sub	sp, #52	; 0x34
 800896a:	460c      	mov	r4, r1
 800896c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008970:	4616      	mov	r6, r2
 8008972:	461f      	mov	r7, r3
 8008974:	4605      	mov	r5, r0
 8008976:	f002 ff77 	bl	800b868 <_localeconv_r>
 800897a:	f8d0 a000 	ldr.w	sl, [r0]
 800897e:	4650      	mov	r0, sl
 8008980:	f7f7 fc50 	bl	8000224 <strlen>
 8008984:	2300      	movs	r3, #0
 8008986:	930a      	str	r3, [sp, #40]	; 0x28
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	f8d8 3000 	ldr.w	r3, [r8]
 8008990:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008994:	3307      	adds	r3, #7
 8008996:	f023 0307 	bic.w	r3, r3, #7
 800899a:	f103 0208 	add.w	r2, r3, #8
 800899e:	f8c8 2000 	str.w	r2, [r8]
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80089aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80089ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80089b8:	ee08 0a10 	vmov	s16, r0
 80089bc:	4b9f      	ldr	r3, [pc, #636]	; (8008c3c <_printf_float+0x2dc>)
 80089be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089c2:	f04f 32ff 	mov.w	r2, #4294967295
 80089c6:	f7f8 f8e1 	bl	8000b8c <__aeabi_dcmpun>
 80089ca:	bb88      	cbnz	r0, 8008a30 <_printf_float+0xd0>
 80089cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d0:	4b9a      	ldr	r3, [pc, #616]	; (8008c3c <_printf_float+0x2dc>)
 80089d2:	f04f 32ff 	mov.w	r2, #4294967295
 80089d6:	f7f8 f8bb 	bl	8000b50 <__aeabi_dcmple>
 80089da:	bb48      	cbnz	r0, 8008a30 <_printf_float+0xd0>
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f8 f8aa 	bl	8000b3c <__aeabi_dcmplt>
 80089e8:	b110      	cbz	r0, 80089f0 <_printf_float+0x90>
 80089ea:	232d      	movs	r3, #45	; 0x2d
 80089ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f0:	4b93      	ldr	r3, [pc, #588]	; (8008c40 <_printf_float+0x2e0>)
 80089f2:	4894      	ldr	r0, [pc, #592]	; (8008c44 <_printf_float+0x2e4>)
 80089f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80089f8:	bf94      	ite	ls
 80089fa:	4698      	movls	r8, r3
 80089fc:	4680      	movhi	r8, r0
 80089fe:	2303      	movs	r3, #3
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	f023 0204 	bic.w	r2, r3, #4
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	f04f 0900 	mov.w	r9, #0
 8008a0e:	9700      	str	r7, [sp, #0]
 8008a10:	4633      	mov	r3, r6
 8008a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a14:	4621      	mov	r1, r4
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 f9d8 	bl	8008dcc <_printf_common>
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f040 8090 	bne.w	8008b42 <_printf_float+0x1e2>
 8008a22:	f04f 30ff 	mov.w	r0, #4294967295
 8008a26:	b00d      	add	sp, #52	; 0x34
 8008a28:	ecbd 8b02 	vpop	{d8}
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f8 f8a8 	bl	8000b8c <__aeabi_dcmpun>
 8008a3c:	b140      	cbz	r0, 8008a50 <_printf_float+0xf0>
 8008a3e:	464b      	mov	r3, r9
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfbc      	itt	lt
 8008a44:	232d      	movlt	r3, #45	; 0x2d
 8008a46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a4a:	487f      	ldr	r0, [pc, #508]	; (8008c48 <_printf_float+0x2e8>)
 8008a4c:	4b7f      	ldr	r3, [pc, #508]	; (8008c4c <_printf_float+0x2ec>)
 8008a4e:	e7d1      	b.n	80089f4 <_printf_float+0x94>
 8008a50:	6863      	ldr	r3, [r4, #4]
 8008a52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008a56:	9206      	str	r2, [sp, #24]
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	d13f      	bne.n	8008adc <_printf_float+0x17c>
 8008a5c:	2306      	movs	r3, #6
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	9b05      	ldr	r3, [sp, #20]
 8008a62:	6861      	ldr	r1, [r4, #4]
 8008a64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9303      	str	r3, [sp, #12]
 8008a6c:	ab0a      	add	r3, sp, #40	; 0x28
 8008a6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a72:	ab09      	add	r3, sp, #36	; 0x24
 8008a74:	ec49 8b10 	vmov	d0, r8, r9
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	6022      	str	r2, [r4, #0]
 8008a7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a80:	4628      	mov	r0, r5
 8008a82:	f7ff fecd 	bl	8008820 <__cvt>
 8008a86:	9b06      	ldr	r3, [sp, #24]
 8008a88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a8a:	2b47      	cmp	r3, #71	; 0x47
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	d108      	bne.n	8008aa2 <_printf_float+0x142>
 8008a90:	1cc8      	adds	r0, r1, #3
 8008a92:	db02      	blt.n	8008a9a <_printf_float+0x13a>
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	4299      	cmp	r1, r3
 8008a98:	dd41      	ble.n	8008b1e <_printf_float+0x1be>
 8008a9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a9e:	fa5f fb8b 	uxtb.w	fp, fp
 8008aa2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008aa6:	d820      	bhi.n	8008aea <_printf_float+0x18a>
 8008aa8:	3901      	subs	r1, #1
 8008aaa:	465a      	mov	r2, fp
 8008aac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ab0:	9109      	str	r1, [sp, #36]	; 0x24
 8008ab2:	f7ff ff17 	bl	80088e4 <__exponent>
 8008ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab8:	1813      	adds	r3, r2, r0
 8008aba:	2a01      	cmp	r2, #1
 8008abc:	4681      	mov	r9, r0
 8008abe:	6123      	str	r3, [r4, #16]
 8008ac0:	dc02      	bgt.n	8008ac8 <_printf_float+0x168>
 8008ac2:	6822      	ldr	r2, [r4, #0]
 8008ac4:	07d2      	lsls	r2, r2, #31
 8008ac6:	d501      	bpl.n	8008acc <_printf_float+0x16c>
 8008ac8:	3301      	adds	r3, #1
 8008aca:	6123      	str	r3, [r4, #16]
 8008acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d09c      	beq.n	8008a0e <_printf_float+0xae>
 8008ad4:	232d      	movs	r3, #45	; 0x2d
 8008ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ada:	e798      	b.n	8008a0e <_printf_float+0xae>
 8008adc:	9a06      	ldr	r2, [sp, #24]
 8008ade:	2a47      	cmp	r2, #71	; 0x47
 8008ae0:	d1be      	bne.n	8008a60 <_printf_float+0x100>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1bc      	bne.n	8008a60 <_printf_float+0x100>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e7b9      	b.n	8008a5e <_printf_float+0xfe>
 8008aea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008aee:	d118      	bne.n	8008b22 <_printf_float+0x1c2>
 8008af0:	2900      	cmp	r1, #0
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	dd0b      	ble.n	8008b0e <_printf_float+0x1ae>
 8008af6:	6121      	str	r1, [r4, #16]
 8008af8:	b913      	cbnz	r3, 8008b00 <_printf_float+0x1a0>
 8008afa:	6822      	ldr	r2, [r4, #0]
 8008afc:	07d0      	lsls	r0, r2, #31
 8008afe:	d502      	bpl.n	8008b06 <_printf_float+0x1a6>
 8008b00:	3301      	adds	r3, #1
 8008b02:	440b      	add	r3, r1
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b08:	f04f 0900 	mov.w	r9, #0
 8008b0c:	e7de      	b.n	8008acc <_printf_float+0x16c>
 8008b0e:	b913      	cbnz	r3, 8008b16 <_printf_float+0x1b6>
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	07d2      	lsls	r2, r2, #31
 8008b14:	d501      	bpl.n	8008b1a <_printf_float+0x1ba>
 8008b16:	3302      	adds	r3, #2
 8008b18:	e7f4      	b.n	8008b04 <_printf_float+0x1a4>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e7f2      	b.n	8008b04 <_printf_float+0x1a4>
 8008b1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b24:	4299      	cmp	r1, r3
 8008b26:	db05      	blt.n	8008b34 <_printf_float+0x1d4>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	6121      	str	r1, [r4, #16]
 8008b2c:	07d8      	lsls	r0, r3, #31
 8008b2e:	d5ea      	bpl.n	8008b06 <_printf_float+0x1a6>
 8008b30:	1c4b      	adds	r3, r1, #1
 8008b32:	e7e7      	b.n	8008b04 <_printf_float+0x1a4>
 8008b34:	2900      	cmp	r1, #0
 8008b36:	bfd4      	ite	le
 8008b38:	f1c1 0202 	rsble	r2, r1, #2
 8008b3c:	2201      	movgt	r2, #1
 8008b3e:	4413      	add	r3, r2
 8008b40:	e7e0      	b.n	8008b04 <_printf_float+0x1a4>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	055a      	lsls	r2, r3, #21
 8008b46:	d407      	bmi.n	8008b58 <_printf_float+0x1f8>
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	4642      	mov	r2, r8
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	d12c      	bne.n	8008bb0 <_printf_float+0x250>
 8008b56:	e764      	b.n	8008a22 <_printf_float+0xc2>
 8008b58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b5c:	f240 80e0 	bls.w	8008d20 <_printf_float+0x3c0>
 8008b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b64:	2200      	movs	r2, #0
 8008b66:	2300      	movs	r3, #0
 8008b68:	f7f7 ffde 	bl	8000b28 <__aeabi_dcmpeq>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d034      	beq.n	8008bda <_printf_float+0x27a>
 8008b70:	4a37      	ldr	r2, [pc, #220]	; (8008c50 <_printf_float+0x2f0>)
 8008b72:	2301      	movs	r3, #1
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f43f af51 	beq.w	8008a22 <_printf_float+0xc2>
 8008b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b84:	429a      	cmp	r2, r3
 8008b86:	db02      	blt.n	8008b8e <_printf_float+0x22e>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	07d8      	lsls	r0, r3, #31
 8008b8c:	d510      	bpl.n	8008bb0 <_printf_float+0x250>
 8008b8e:	ee18 3a10 	vmov	r3, s16
 8008b92:	4652      	mov	r2, sl
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af41 	beq.w	8008a22 <_printf_float+0xc2>
 8008ba0:	f04f 0800 	mov.w	r8, #0
 8008ba4:	f104 091a 	add.w	r9, r4, #26
 8008ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4543      	cmp	r3, r8
 8008bae:	dc09      	bgt.n	8008bc4 <_printf_float+0x264>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	079b      	lsls	r3, r3, #30
 8008bb4:	f100 8105 	bmi.w	8008dc2 <_printf_float+0x462>
 8008bb8:	68e0      	ldr	r0, [r4, #12]
 8008bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbc:	4298      	cmp	r0, r3
 8008bbe:	bfb8      	it	lt
 8008bc0:	4618      	movlt	r0, r3
 8008bc2:	e730      	b.n	8008a26 <_printf_float+0xc6>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	464a      	mov	r2, r9
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f af27 	beq.w	8008a22 <_printf_float+0xc2>
 8008bd4:	f108 0801 	add.w	r8, r8, #1
 8008bd8:	e7e6      	b.n	8008ba8 <_printf_float+0x248>
 8008bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dc39      	bgt.n	8008c54 <_printf_float+0x2f4>
 8008be0:	4a1b      	ldr	r2, [pc, #108]	; (8008c50 <_printf_float+0x2f0>)
 8008be2:	2301      	movs	r3, #1
 8008be4:	4631      	mov	r1, r6
 8008be6:	4628      	mov	r0, r5
 8008be8:	47b8      	blx	r7
 8008bea:	3001      	adds	r0, #1
 8008bec:	f43f af19 	beq.w	8008a22 <_printf_float+0xc2>
 8008bf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	d102      	bne.n	8008bfe <_printf_float+0x29e>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	d5d8      	bpl.n	8008bb0 <_printf_float+0x250>
 8008bfe:	ee18 3a10 	vmov	r3, s16
 8008c02:	4652      	mov	r2, sl
 8008c04:	4631      	mov	r1, r6
 8008c06:	4628      	mov	r0, r5
 8008c08:	47b8      	blx	r7
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f43f af09 	beq.w	8008a22 <_printf_float+0xc2>
 8008c10:	f04f 0900 	mov.w	r9, #0
 8008c14:	f104 0a1a 	add.w	sl, r4, #26
 8008c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1a:	425b      	negs	r3, r3
 8008c1c:	454b      	cmp	r3, r9
 8008c1e:	dc01      	bgt.n	8008c24 <_printf_float+0x2c4>
 8008c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c22:	e792      	b.n	8008b4a <_printf_float+0x1ea>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4652      	mov	r2, sl
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	47b8      	blx	r7
 8008c2e:	3001      	adds	r0, #1
 8008c30:	f43f aef7 	beq.w	8008a22 <_printf_float+0xc2>
 8008c34:	f109 0901 	add.w	r9, r9, #1
 8008c38:	e7ee      	b.n	8008c18 <_printf_float+0x2b8>
 8008c3a:	bf00      	nop
 8008c3c:	7fefffff 	.word	0x7fefffff
 8008c40:	0800d44c 	.word	0x0800d44c
 8008c44:	0800d450 	.word	0x0800d450
 8008c48:	0800d458 	.word	0x0800d458
 8008c4c:	0800d454 	.word	0x0800d454
 8008c50:	0800d45c 	.word	0x0800d45c
 8008c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	bfa8      	it	ge
 8008c5c:	461a      	movge	r2, r3
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	4691      	mov	r9, r2
 8008c62:	dc37      	bgt.n	8008cd4 <_printf_float+0x374>
 8008c64:	f04f 0b00 	mov.w	fp, #0
 8008c68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c6c:	f104 021a 	add.w	r2, r4, #26
 8008c70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c72:	9305      	str	r3, [sp, #20]
 8008c74:	eba3 0309 	sub.w	r3, r3, r9
 8008c78:	455b      	cmp	r3, fp
 8008c7a:	dc33      	bgt.n	8008ce4 <_printf_float+0x384>
 8008c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c80:	429a      	cmp	r2, r3
 8008c82:	db3b      	blt.n	8008cfc <_printf_float+0x39c>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	07da      	lsls	r2, r3, #31
 8008c88:	d438      	bmi.n	8008cfc <_printf_float+0x39c>
 8008c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8c:	9a05      	ldr	r2, [sp, #20]
 8008c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c90:	1a9a      	subs	r2, r3, r2
 8008c92:	eba3 0901 	sub.w	r9, r3, r1
 8008c96:	4591      	cmp	r9, r2
 8008c98:	bfa8      	it	ge
 8008c9a:	4691      	movge	r9, r2
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	dc35      	bgt.n	8008d0e <_printf_float+0x3ae>
 8008ca2:	f04f 0800 	mov.w	r8, #0
 8008ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008caa:	f104 0a1a 	add.w	sl, r4, #26
 8008cae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cb2:	1a9b      	subs	r3, r3, r2
 8008cb4:	eba3 0309 	sub.w	r3, r3, r9
 8008cb8:	4543      	cmp	r3, r8
 8008cba:	f77f af79 	ble.w	8008bb0 <_printf_float+0x250>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4652      	mov	r2, sl
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b8      	blx	r7
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f43f aeaa 	beq.w	8008a22 <_printf_float+0xc2>
 8008cce:	f108 0801 	add.w	r8, r8, #1
 8008cd2:	e7ec      	b.n	8008cae <_printf_float+0x34e>
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4642      	mov	r2, r8
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d1c0      	bne.n	8008c64 <_printf_float+0x304>
 8008ce2:	e69e      	b.n	8008a22 <_printf_float+0xc2>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	9205      	str	r2, [sp, #20]
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f43f ae97 	beq.w	8008a22 <_printf_float+0xc2>
 8008cf4:	9a05      	ldr	r2, [sp, #20]
 8008cf6:	f10b 0b01 	add.w	fp, fp, #1
 8008cfa:	e7b9      	b.n	8008c70 <_printf_float+0x310>
 8008cfc:	ee18 3a10 	vmov	r3, s16
 8008d00:	4652      	mov	r2, sl
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d1be      	bne.n	8008c8a <_printf_float+0x32a>
 8008d0c:	e689      	b.n	8008a22 <_printf_float+0xc2>
 8008d0e:	9a05      	ldr	r2, [sp, #20]
 8008d10:	464b      	mov	r3, r9
 8008d12:	4442      	add	r2, r8
 8008d14:	4631      	mov	r1, r6
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d1c1      	bne.n	8008ca2 <_printf_float+0x342>
 8008d1e:	e680      	b.n	8008a22 <_printf_float+0xc2>
 8008d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d22:	2a01      	cmp	r2, #1
 8008d24:	dc01      	bgt.n	8008d2a <_printf_float+0x3ca>
 8008d26:	07db      	lsls	r3, r3, #31
 8008d28:	d538      	bpl.n	8008d9c <_printf_float+0x43c>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b8      	blx	r7
 8008d34:	3001      	adds	r0, #1
 8008d36:	f43f ae74 	beq.w	8008a22 <_printf_float+0xc2>
 8008d3a:	ee18 3a10 	vmov	r3, s16
 8008d3e:	4652      	mov	r2, sl
 8008d40:	4631      	mov	r1, r6
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f ae6b 	beq.w	8008a22 <_printf_float+0xc2>
 8008d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d50:	2200      	movs	r2, #0
 8008d52:	2300      	movs	r3, #0
 8008d54:	f7f7 fee8 	bl	8000b28 <__aeabi_dcmpeq>
 8008d58:	b9d8      	cbnz	r0, 8008d92 <_printf_float+0x432>
 8008d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5c:	f108 0201 	add.w	r2, r8, #1
 8008d60:	3b01      	subs	r3, #1
 8008d62:	4631      	mov	r1, r6
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b8      	blx	r7
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d10e      	bne.n	8008d8a <_printf_float+0x42a>
 8008d6c:	e659      	b.n	8008a22 <_printf_float+0xc2>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4652      	mov	r2, sl
 8008d72:	4631      	mov	r1, r6
 8008d74:	4628      	mov	r0, r5
 8008d76:	47b8      	blx	r7
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f43f ae52 	beq.w	8008a22 <_printf_float+0xc2>
 8008d7e:	f108 0801 	add.w	r8, r8, #1
 8008d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d84:	3b01      	subs	r3, #1
 8008d86:	4543      	cmp	r3, r8
 8008d88:	dcf1      	bgt.n	8008d6e <_printf_float+0x40e>
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d90:	e6dc      	b.n	8008b4c <_printf_float+0x1ec>
 8008d92:	f04f 0800 	mov.w	r8, #0
 8008d96:	f104 0a1a 	add.w	sl, r4, #26
 8008d9a:	e7f2      	b.n	8008d82 <_printf_float+0x422>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4642      	mov	r2, r8
 8008da0:	e7df      	b.n	8008d62 <_printf_float+0x402>
 8008da2:	2301      	movs	r3, #1
 8008da4:	464a      	mov	r2, r9
 8008da6:	4631      	mov	r1, r6
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b8      	blx	r7
 8008dac:	3001      	adds	r0, #1
 8008dae:	f43f ae38 	beq.w	8008a22 <_printf_float+0xc2>
 8008db2:	f108 0801 	add.w	r8, r8, #1
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	4543      	cmp	r3, r8
 8008dbe:	dcf0      	bgt.n	8008da2 <_printf_float+0x442>
 8008dc0:	e6fa      	b.n	8008bb8 <_printf_float+0x258>
 8008dc2:	f04f 0800 	mov.w	r8, #0
 8008dc6:	f104 0919 	add.w	r9, r4, #25
 8008dca:	e7f4      	b.n	8008db6 <_printf_float+0x456>

08008dcc <_printf_common>:
 8008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	4699      	mov	r9, r3
 8008dd4:	688a      	ldr	r2, [r1, #8]
 8008dd6:	690b      	ldr	r3, [r1, #16]
 8008dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bfb8      	it	lt
 8008de0:	4613      	movlt	r3, r2
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008de8:	4607      	mov	r7, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b10a      	cbz	r2, 8008df2 <_printf_common+0x26>
 8008dee:	3301      	adds	r3, #1
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	0699      	lsls	r1, r3, #26
 8008df6:	bf42      	ittt	mi
 8008df8:	6833      	ldrmi	r3, [r6, #0]
 8008dfa:	3302      	addmi	r3, #2
 8008dfc:	6033      	strmi	r3, [r6, #0]
 8008dfe:	6825      	ldr	r5, [r4, #0]
 8008e00:	f015 0506 	ands.w	r5, r5, #6
 8008e04:	d106      	bne.n	8008e14 <_printf_common+0x48>
 8008e06:	f104 0a19 	add.w	sl, r4, #25
 8008e0a:	68e3      	ldr	r3, [r4, #12]
 8008e0c:	6832      	ldr	r2, [r6, #0]
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc26      	bgt.n	8008e62 <_printf_common+0x96>
 8008e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e18:	1e13      	subs	r3, r2, #0
 8008e1a:	6822      	ldr	r2, [r4, #0]
 8008e1c:	bf18      	it	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	0692      	lsls	r2, r2, #26
 8008e22:	d42b      	bmi.n	8008e7c <_printf_common+0xb0>
 8008e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e28:	4649      	mov	r1, r9
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c0      	blx	r8
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d01e      	beq.n	8008e70 <_printf_common+0xa4>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	68e5      	ldr	r5, [r4, #12]
 8008e36:	6832      	ldr	r2, [r6, #0]
 8008e38:	f003 0306 	and.w	r3, r3, #6
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	bf08      	it	eq
 8008e40:	1aad      	subeq	r5, r5, r2
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	6922      	ldr	r2, [r4, #16]
 8008e46:	bf0c      	ite	eq
 8008e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e4c:	2500      	movne	r5, #0
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	bfc4      	itt	gt
 8008e52:	1a9b      	subgt	r3, r3, r2
 8008e54:	18ed      	addgt	r5, r5, r3
 8008e56:	2600      	movs	r6, #0
 8008e58:	341a      	adds	r4, #26
 8008e5a:	42b5      	cmp	r5, r6
 8008e5c:	d11a      	bne.n	8008e94 <_printf_common+0xc8>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e008      	b.n	8008e74 <_printf_common+0xa8>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4652      	mov	r2, sl
 8008e66:	4649      	mov	r1, r9
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c0      	blx	r8
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d103      	bne.n	8008e78 <_printf_common+0xac>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	3501      	adds	r5, #1
 8008e7a:	e7c6      	b.n	8008e0a <_printf_common+0x3e>
 8008e7c:	18e1      	adds	r1, r4, r3
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	2030      	movs	r0, #48	; 0x30
 8008e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e86:	4422      	add	r2, r4
 8008e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e90:	3302      	adds	r3, #2
 8008e92:	e7c7      	b.n	8008e24 <_printf_common+0x58>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4622      	mov	r2, r4
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c0      	blx	r8
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d0e6      	beq.n	8008e70 <_printf_common+0xa4>
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7d9      	b.n	8008e5a <_printf_common+0x8e>
	...

08008ea8 <_printf_i>:
 8008ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	7e0f      	ldrb	r7, [r1, #24]
 8008eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008eb0:	2f78      	cmp	r7, #120	; 0x78
 8008eb2:	4691      	mov	r9, r2
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ebe:	d807      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ec0:	2f62      	cmp	r7, #98	; 0x62
 8008ec2:	d80a      	bhi.n	8008eda <_printf_i+0x32>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	f000 80d8 	beq.w	800907a <_printf_i+0x1d2>
 8008eca:	2f58      	cmp	r7, #88	; 0x58
 8008ecc:	f000 80a3 	beq.w	8009016 <_printf_i+0x16e>
 8008ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ed8:	e03a      	b.n	8008f50 <_printf_i+0xa8>
 8008eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ede:	2b15      	cmp	r3, #21
 8008ee0:	d8f6      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ee2:	a101      	add	r1, pc, #4	; (adr r1, 8008ee8 <_printf_i+0x40>)
 8008ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008ed1 	.word	0x08008ed1
 8008ef4:	08008ed1 	.word	0x08008ed1
 8008ef8:	08008ed1 	.word	0x08008ed1
 8008efc:	08008ed1 	.word	0x08008ed1
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008ed1 	.word	0x08008ed1
 8008f08:	08008ed1 	.word	0x08008ed1
 8008f0c:	08008ed1 	.word	0x08008ed1
 8008f10:	08008ed1 	.word	0x08008ed1
 8008f14:	08009061 	.word	0x08009061
 8008f18:	08008f85 	.word	0x08008f85
 8008f1c:	08009043 	.word	0x08009043
 8008f20:	08008ed1 	.word	0x08008ed1
 8008f24:	08008ed1 	.word	0x08008ed1
 8008f28:	08009083 	.word	0x08009083
 8008f2c:	08008ed1 	.word	0x08008ed1
 8008f30:	08008f85 	.word	0x08008f85
 8008f34:	08008ed1 	.word	0x08008ed1
 8008f38:	08008ed1 	.word	0x08008ed1
 8008f3c:	0800904b 	.word	0x0800904b
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	602a      	str	r2, [r5, #0]
 8008f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f50:	2301      	movs	r3, #1
 8008f52:	e0a3      	b.n	800909c <_printf_i+0x1f4>
 8008f54:	6820      	ldr	r0, [r4, #0]
 8008f56:	6829      	ldr	r1, [r5, #0]
 8008f58:	0606      	lsls	r6, r0, #24
 8008f5a:	f101 0304 	add.w	r3, r1, #4
 8008f5e:	d50a      	bpl.n	8008f76 <_printf_i+0xce>
 8008f60:	680e      	ldr	r6, [r1, #0]
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	2e00      	cmp	r6, #0
 8008f66:	da03      	bge.n	8008f70 <_printf_i+0xc8>
 8008f68:	232d      	movs	r3, #45	; 0x2d
 8008f6a:	4276      	negs	r6, r6
 8008f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f70:	485e      	ldr	r0, [pc, #376]	; (80090ec <_printf_i+0x244>)
 8008f72:	230a      	movs	r3, #10
 8008f74:	e019      	b.n	8008faa <_printf_i+0x102>
 8008f76:	680e      	ldr	r6, [r1, #0]
 8008f78:	602b      	str	r3, [r5, #0]
 8008f7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f7e:	bf18      	it	ne
 8008f80:	b236      	sxthne	r6, r6
 8008f82:	e7ef      	b.n	8008f64 <_printf_i+0xbc>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	6820      	ldr	r0, [r4, #0]
 8008f88:	1d19      	adds	r1, r3, #4
 8008f8a:	6029      	str	r1, [r5, #0]
 8008f8c:	0601      	lsls	r1, r0, #24
 8008f8e:	d501      	bpl.n	8008f94 <_printf_i+0xec>
 8008f90:	681e      	ldr	r6, [r3, #0]
 8008f92:	e002      	b.n	8008f9a <_printf_i+0xf2>
 8008f94:	0646      	lsls	r6, r0, #25
 8008f96:	d5fb      	bpl.n	8008f90 <_printf_i+0xe8>
 8008f98:	881e      	ldrh	r6, [r3, #0]
 8008f9a:	4854      	ldr	r0, [pc, #336]	; (80090ec <_printf_i+0x244>)
 8008f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008f9e:	bf0c      	ite	eq
 8008fa0:	2308      	moveq	r3, #8
 8008fa2:	230a      	movne	r3, #10
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008faa:	6865      	ldr	r5, [r4, #4]
 8008fac:	60a5      	str	r5, [r4, #8]
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	bfa2      	ittt	ge
 8008fb2:	6821      	ldrge	r1, [r4, #0]
 8008fb4:	f021 0104 	bicge.w	r1, r1, #4
 8008fb8:	6021      	strge	r1, [r4, #0]
 8008fba:	b90e      	cbnz	r6, 8008fc0 <_printf_i+0x118>
 8008fbc:	2d00      	cmp	r5, #0
 8008fbe:	d04d      	beq.n	800905c <_printf_i+0x1b4>
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fc6:	fb03 6711 	mls	r7, r3, r1, r6
 8008fca:	5dc7      	ldrb	r7, [r0, r7]
 8008fcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fd0:	4637      	mov	r7, r6
 8008fd2:	42bb      	cmp	r3, r7
 8008fd4:	460e      	mov	r6, r1
 8008fd6:	d9f4      	bls.n	8008fc2 <_printf_i+0x11a>
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d10b      	bne.n	8008ff4 <_printf_i+0x14c>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	07de      	lsls	r6, r3, #31
 8008fe0:	d508      	bpl.n	8008ff4 <_printf_i+0x14c>
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6861      	ldr	r1, [r4, #4]
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	bfde      	ittt	le
 8008fea:	2330      	movle	r3, #48	; 0x30
 8008fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ff0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ff4:	1b52      	subs	r2, r2, r5
 8008ff6:	6122      	str	r2, [r4, #16]
 8008ff8:	f8cd a000 	str.w	sl, [sp]
 8008ffc:	464b      	mov	r3, r9
 8008ffe:	aa03      	add	r2, sp, #12
 8009000:	4621      	mov	r1, r4
 8009002:	4640      	mov	r0, r8
 8009004:	f7ff fee2 	bl	8008dcc <_printf_common>
 8009008:	3001      	adds	r0, #1
 800900a:	d14c      	bne.n	80090a6 <_printf_i+0x1fe>
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	b004      	add	sp, #16
 8009012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009016:	4835      	ldr	r0, [pc, #212]	; (80090ec <_printf_i+0x244>)
 8009018:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800901c:	6829      	ldr	r1, [r5, #0]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	f851 6b04 	ldr.w	r6, [r1], #4
 8009024:	6029      	str	r1, [r5, #0]
 8009026:	061d      	lsls	r5, r3, #24
 8009028:	d514      	bpl.n	8009054 <_printf_i+0x1ac>
 800902a:	07df      	lsls	r7, r3, #31
 800902c:	bf44      	itt	mi
 800902e:	f043 0320 	orrmi.w	r3, r3, #32
 8009032:	6023      	strmi	r3, [r4, #0]
 8009034:	b91e      	cbnz	r6, 800903e <_printf_i+0x196>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	f023 0320 	bic.w	r3, r3, #32
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	2310      	movs	r3, #16
 8009040:	e7b0      	b.n	8008fa4 <_printf_i+0xfc>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	f043 0320 	orr.w	r3, r3, #32
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	2378      	movs	r3, #120	; 0x78
 800904c:	4828      	ldr	r0, [pc, #160]	; (80090f0 <_printf_i+0x248>)
 800904e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009052:	e7e3      	b.n	800901c <_printf_i+0x174>
 8009054:	0659      	lsls	r1, r3, #25
 8009056:	bf48      	it	mi
 8009058:	b2b6      	uxthmi	r6, r6
 800905a:	e7e6      	b.n	800902a <_printf_i+0x182>
 800905c:	4615      	mov	r5, r2
 800905e:	e7bb      	b.n	8008fd8 <_printf_i+0x130>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	6826      	ldr	r6, [r4, #0]
 8009064:	6961      	ldr	r1, [r4, #20]
 8009066:	1d18      	adds	r0, r3, #4
 8009068:	6028      	str	r0, [r5, #0]
 800906a:	0635      	lsls	r5, r6, #24
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	d501      	bpl.n	8009074 <_printf_i+0x1cc>
 8009070:	6019      	str	r1, [r3, #0]
 8009072:	e002      	b.n	800907a <_printf_i+0x1d2>
 8009074:	0670      	lsls	r0, r6, #25
 8009076:	d5fb      	bpl.n	8009070 <_printf_i+0x1c8>
 8009078:	8019      	strh	r1, [r3, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	4615      	mov	r5, r2
 8009080:	e7ba      	b.n	8008ff8 <_printf_i+0x150>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	1d1a      	adds	r2, r3, #4
 8009086:	602a      	str	r2, [r5, #0]
 8009088:	681d      	ldr	r5, [r3, #0]
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	2100      	movs	r1, #0
 800908e:	4628      	mov	r0, r5
 8009090:	f7f7 f8d6 	bl	8000240 <memchr>
 8009094:	b108      	cbz	r0, 800909a <_printf_i+0x1f2>
 8009096:	1b40      	subs	r0, r0, r5
 8009098:	6060      	str	r0, [r4, #4]
 800909a:	6863      	ldr	r3, [r4, #4]
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	2300      	movs	r3, #0
 80090a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a4:	e7a8      	b.n	8008ff8 <_printf_i+0x150>
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	462a      	mov	r2, r5
 80090aa:	4649      	mov	r1, r9
 80090ac:	4640      	mov	r0, r8
 80090ae:	47d0      	blx	sl
 80090b0:	3001      	adds	r0, #1
 80090b2:	d0ab      	beq.n	800900c <_printf_i+0x164>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	079b      	lsls	r3, r3, #30
 80090b8:	d413      	bmi.n	80090e2 <_printf_i+0x23a>
 80090ba:	68e0      	ldr	r0, [r4, #12]
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	4298      	cmp	r0, r3
 80090c0:	bfb8      	it	lt
 80090c2:	4618      	movlt	r0, r3
 80090c4:	e7a4      	b.n	8009010 <_printf_i+0x168>
 80090c6:	2301      	movs	r3, #1
 80090c8:	4632      	mov	r2, r6
 80090ca:	4649      	mov	r1, r9
 80090cc:	4640      	mov	r0, r8
 80090ce:	47d0      	blx	sl
 80090d0:	3001      	adds	r0, #1
 80090d2:	d09b      	beq.n	800900c <_printf_i+0x164>
 80090d4:	3501      	adds	r5, #1
 80090d6:	68e3      	ldr	r3, [r4, #12]
 80090d8:	9903      	ldr	r1, [sp, #12]
 80090da:	1a5b      	subs	r3, r3, r1
 80090dc:	42ab      	cmp	r3, r5
 80090de:	dcf2      	bgt.n	80090c6 <_printf_i+0x21e>
 80090e0:	e7eb      	b.n	80090ba <_printf_i+0x212>
 80090e2:	2500      	movs	r5, #0
 80090e4:	f104 0619 	add.w	r6, r4, #25
 80090e8:	e7f5      	b.n	80090d6 <_printf_i+0x22e>
 80090ea:	bf00      	nop
 80090ec:	0800d45e 	.word	0x0800d45e
 80090f0:	0800d46f 	.word	0x0800d46f

080090f4 <_scanf_float>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	b087      	sub	sp, #28
 80090fa:	4617      	mov	r7, r2
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	688b      	ldr	r3, [r1, #8]
 8009100:	1e5a      	subs	r2, r3, #1
 8009102:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009106:	bf83      	ittte	hi
 8009108:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800910c:	195b      	addhi	r3, r3, r5
 800910e:	9302      	strhi	r3, [sp, #8]
 8009110:	2300      	movls	r3, #0
 8009112:	bf86      	itte	hi
 8009114:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009118:	608b      	strhi	r3, [r1, #8]
 800911a:	9302      	strls	r3, [sp, #8]
 800911c:	680b      	ldr	r3, [r1, #0]
 800911e:	468b      	mov	fp, r1
 8009120:	2500      	movs	r5, #0
 8009122:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009126:	f84b 3b1c 	str.w	r3, [fp], #28
 800912a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800912e:	4680      	mov	r8, r0
 8009130:	460c      	mov	r4, r1
 8009132:	465e      	mov	r6, fp
 8009134:	46aa      	mov	sl, r5
 8009136:	46a9      	mov	r9, r5
 8009138:	9501      	str	r5, [sp, #4]
 800913a:	68a2      	ldr	r2, [r4, #8]
 800913c:	b152      	cbz	r2, 8009154 <_scanf_float+0x60>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b4e      	cmp	r3, #78	; 0x4e
 8009144:	d864      	bhi.n	8009210 <_scanf_float+0x11c>
 8009146:	2b40      	cmp	r3, #64	; 0x40
 8009148:	d83c      	bhi.n	80091c4 <_scanf_float+0xd0>
 800914a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800914e:	b2c8      	uxtb	r0, r1
 8009150:	280e      	cmp	r0, #14
 8009152:	d93a      	bls.n	80091ca <_scanf_float+0xd6>
 8009154:	f1b9 0f00 	cmp.w	r9, #0
 8009158:	d003      	beq.n	8009162 <_scanf_float+0x6e>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009166:	f1ba 0f01 	cmp.w	sl, #1
 800916a:	f200 8113 	bhi.w	8009394 <_scanf_float+0x2a0>
 800916e:	455e      	cmp	r6, fp
 8009170:	f200 8105 	bhi.w	800937e <_scanf_float+0x28a>
 8009174:	2501      	movs	r5, #1
 8009176:	4628      	mov	r0, r5
 8009178:	b007      	add	sp, #28
 800917a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009182:	2a0d      	cmp	r2, #13
 8009184:	d8e6      	bhi.n	8009154 <_scanf_float+0x60>
 8009186:	a101      	add	r1, pc, #4	; (adr r1, 800918c <_scanf_float+0x98>)
 8009188:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800918c:	080092cb 	.word	0x080092cb
 8009190:	08009155 	.word	0x08009155
 8009194:	08009155 	.word	0x08009155
 8009198:	08009155 	.word	0x08009155
 800919c:	0800932b 	.word	0x0800932b
 80091a0:	08009303 	.word	0x08009303
 80091a4:	08009155 	.word	0x08009155
 80091a8:	08009155 	.word	0x08009155
 80091ac:	080092d9 	.word	0x080092d9
 80091b0:	08009155 	.word	0x08009155
 80091b4:	08009155 	.word	0x08009155
 80091b8:	08009155 	.word	0x08009155
 80091bc:	08009155 	.word	0x08009155
 80091c0:	08009291 	.word	0x08009291
 80091c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80091c8:	e7db      	b.n	8009182 <_scanf_float+0x8e>
 80091ca:	290e      	cmp	r1, #14
 80091cc:	d8c2      	bhi.n	8009154 <_scanf_float+0x60>
 80091ce:	a001      	add	r0, pc, #4	; (adr r0, 80091d4 <_scanf_float+0xe0>)
 80091d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091d4:	08009283 	.word	0x08009283
 80091d8:	08009155 	.word	0x08009155
 80091dc:	08009283 	.word	0x08009283
 80091e0:	08009317 	.word	0x08009317
 80091e4:	08009155 	.word	0x08009155
 80091e8:	08009231 	.word	0x08009231
 80091ec:	0800926d 	.word	0x0800926d
 80091f0:	0800926d 	.word	0x0800926d
 80091f4:	0800926d 	.word	0x0800926d
 80091f8:	0800926d 	.word	0x0800926d
 80091fc:	0800926d 	.word	0x0800926d
 8009200:	0800926d 	.word	0x0800926d
 8009204:	0800926d 	.word	0x0800926d
 8009208:	0800926d 	.word	0x0800926d
 800920c:	0800926d 	.word	0x0800926d
 8009210:	2b6e      	cmp	r3, #110	; 0x6e
 8009212:	d809      	bhi.n	8009228 <_scanf_float+0x134>
 8009214:	2b60      	cmp	r3, #96	; 0x60
 8009216:	d8b2      	bhi.n	800917e <_scanf_float+0x8a>
 8009218:	2b54      	cmp	r3, #84	; 0x54
 800921a:	d077      	beq.n	800930c <_scanf_float+0x218>
 800921c:	2b59      	cmp	r3, #89	; 0x59
 800921e:	d199      	bne.n	8009154 <_scanf_float+0x60>
 8009220:	2d07      	cmp	r5, #7
 8009222:	d197      	bne.n	8009154 <_scanf_float+0x60>
 8009224:	2508      	movs	r5, #8
 8009226:	e029      	b.n	800927c <_scanf_float+0x188>
 8009228:	2b74      	cmp	r3, #116	; 0x74
 800922a:	d06f      	beq.n	800930c <_scanf_float+0x218>
 800922c:	2b79      	cmp	r3, #121	; 0x79
 800922e:	e7f6      	b.n	800921e <_scanf_float+0x12a>
 8009230:	6821      	ldr	r1, [r4, #0]
 8009232:	05c8      	lsls	r0, r1, #23
 8009234:	d51a      	bpl.n	800926c <_scanf_float+0x178>
 8009236:	9b02      	ldr	r3, [sp, #8]
 8009238:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800923c:	6021      	str	r1, [r4, #0]
 800923e:	f109 0901 	add.w	r9, r9, #1
 8009242:	b11b      	cbz	r3, 800924c <_scanf_float+0x158>
 8009244:	3b01      	subs	r3, #1
 8009246:	3201      	adds	r2, #1
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	60a2      	str	r2, [r4, #8]
 800924c:	68a3      	ldr	r3, [r4, #8]
 800924e:	3b01      	subs	r3, #1
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	3301      	adds	r3, #1
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3b01      	subs	r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	f340 8084 	ble.w	800936c <_scanf_float+0x278>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	3301      	adds	r3, #1
 8009268:	603b      	str	r3, [r7, #0]
 800926a:	e766      	b.n	800913a <_scanf_float+0x46>
 800926c:	eb1a 0f05 	cmn.w	sl, r5
 8009270:	f47f af70 	bne.w	8009154 <_scanf_float+0x60>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	f806 3b01 	strb.w	r3, [r6], #1
 8009280:	e7e4      	b.n	800924c <_scanf_float+0x158>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	0610      	lsls	r0, r2, #24
 8009286:	f57f af65 	bpl.w	8009154 <_scanf_float+0x60>
 800928a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800928e:	e7f4      	b.n	800927a <_scanf_float+0x186>
 8009290:	f1ba 0f00 	cmp.w	sl, #0
 8009294:	d10e      	bne.n	80092b4 <_scanf_float+0x1c0>
 8009296:	f1b9 0f00 	cmp.w	r9, #0
 800929a:	d10e      	bne.n	80092ba <_scanf_float+0x1c6>
 800929c:	6822      	ldr	r2, [r4, #0]
 800929e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092a6:	d108      	bne.n	80092ba <_scanf_float+0x1c6>
 80092a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092ac:	6022      	str	r2, [r4, #0]
 80092ae:	f04f 0a01 	mov.w	sl, #1
 80092b2:	e7e3      	b.n	800927c <_scanf_float+0x188>
 80092b4:	f1ba 0f02 	cmp.w	sl, #2
 80092b8:	d055      	beq.n	8009366 <_scanf_float+0x272>
 80092ba:	2d01      	cmp	r5, #1
 80092bc:	d002      	beq.n	80092c4 <_scanf_float+0x1d0>
 80092be:	2d04      	cmp	r5, #4
 80092c0:	f47f af48 	bne.w	8009154 <_scanf_float+0x60>
 80092c4:	3501      	adds	r5, #1
 80092c6:	b2ed      	uxtb	r5, r5
 80092c8:	e7d8      	b.n	800927c <_scanf_float+0x188>
 80092ca:	f1ba 0f01 	cmp.w	sl, #1
 80092ce:	f47f af41 	bne.w	8009154 <_scanf_float+0x60>
 80092d2:	f04f 0a02 	mov.w	sl, #2
 80092d6:	e7d1      	b.n	800927c <_scanf_float+0x188>
 80092d8:	b97d      	cbnz	r5, 80092fa <_scanf_float+0x206>
 80092da:	f1b9 0f00 	cmp.w	r9, #0
 80092de:	f47f af3c 	bne.w	800915a <_scanf_float+0x66>
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092ec:	f47f af39 	bne.w	8009162 <_scanf_float+0x6e>
 80092f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	2501      	movs	r5, #1
 80092f8:	e7c0      	b.n	800927c <_scanf_float+0x188>
 80092fa:	2d03      	cmp	r5, #3
 80092fc:	d0e2      	beq.n	80092c4 <_scanf_float+0x1d0>
 80092fe:	2d05      	cmp	r5, #5
 8009300:	e7de      	b.n	80092c0 <_scanf_float+0x1cc>
 8009302:	2d02      	cmp	r5, #2
 8009304:	f47f af26 	bne.w	8009154 <_scanf_float+0x60>
 8009308:	2503      	movs	r5, #3
 800930a:	e7b7      	b.n	800927c <_scanf_float+0x188>
 800930c:	2d06      	cmp	r5, #6
 800930e:	f47f af21 	bne.w	8009154 <_scanf_float+0x60>
 8009312:	2507      	movs	r5, #7
 8009314:	e7b2      	b.n	800927c <_scanf_float+0x188>
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	0591      	lsls	r1, r2, #22
 800931a:	f57f af1b 	bpl.w	8009154 <_scanf_float+0x60>
 800931e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009322:	6022      	str	r2, [r4, #0]
 8009324:	f8cd 9004 	str.w	r9, [sp, #4]
 8009328:	e7a8      	b.n	800927c <_scanf_float+0x188>
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009330:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009334:	d006      	beq.n	8009344 <_scanf_float+0x250>
 8009336:	0550      	lsls	r0, r2, #21
 8009338:	f57f af0c 	bpl.w	8009154 <_scanf_float+0x60>
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	f43f af0f 	beq.w	8009162 <_scanf_float+0x6e>
 8009344:	0591      	lsls	r1, r2, #22
 8009346:	bf58      	it	pl
 8009348:	9901      	ldrpl	r1, [sp, #4]
 800934a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800934e:	bf58      	it	pl
 8009350:	eba9 0101 	subpl.w	r1, r9, r1
 8009354:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009358:	bf58      	it	pl
 800935a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800935e:	6022      	str	r2, [r4, #0]
 8009360:	f04f 0900 	mov.w	r9, #0
 8009364:	e78a      	b.n	800927c <_scanf_float+0x188>
 8009366:	f04f 0a03 	mov.w	sl, #3
 800936a:	e787      	b.n	800927c <_scanf_float+0x188>
 800936c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009370:	4639      	mov	r1, r7
 8009372:	4640      	mov	r0, r8
 8009374:	4798      	blx	r3
 8009376:	2800      	cmp	r0, #0
 8009378:	f43f aedf 	beq.w	800913a <_scanf_float+0x46>
 800937c:	e6ea      	b.n	8009154 <_scanf_float+0x60>
 800937e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009386:	463a      	mov	r2, r7
 8009388:	4640      	mov	r0, r8
 800938a:	4798      	blx	r3
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	3b01      	subs	r3, #1
 8009390:	6123      	str	r3, [r4, #16]
 8009392:	e6ec      	b.n	800916e <_scanf_float+0x7a>
 8009394:	1e6b      	subs	r3, r5, #1
 8009396:	2b06      	cmp	r3, #6
 8009398:	d825      	bhi.n	80093e6 <_scanf_float+0x2f2>
 800939a:	2d02      	cmp	r5, #2
 800939c:	d836      	bhi.n	800940c <_scanf_float+0x318>
 800939e:	455e      	cmp	r6, fp
 80093a0:	f67f aee8 	bls.w	8009174 <_scanf_float+0x80>
 80093a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093ac:	463a      	mov	r2, r7
 80093ae:	4640      	mov	r0, r8
 80093b0:	4798      	blx	r3
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	e7f1      	b.n	800939e <_scanf_float+0x2aa>
 80093ba:	9802      	ldr	r0, [sp, #8]
 80093bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80093c4:	9002      	str	r0, [sp, #8]
 80093c6:	463a      	mov	r2, r7
 80093c8:	4640      	mov	r0, r8
 80093ca:	4798      	blx	r3
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	6123      	str	r3, [r4, #16]
 80093d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093d6:	fa5f fa8a 	uxtb.w	sl, sl
 80093da:	f1ba 0f02 	cmp.w	sl, #2
 80093de:	d1ec      	bne.n	80093ba <_scanf_float+0x2c6>
 80093e0:	3d03      	subs	r5, #3
 80093e2:	b2ed      	uxtb	r5, r5
 80093e4:	1b76      	subs	r6, r6, r5
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	05da      	lsls	r2, r3, #23
 80093ea:	d52f      	bpl.n	800944c <_scanf_float+0x358>
 80093ec:	055b      	lsls	r3, r3, #21
 80093ee:	d510      	bpl.n	8009412 <_scanf_float+0x31e>
 80093f0:	455e      	cmp	r6, fp
 80093f2:	f67f aebf 	bls.w	8009174 <_scanf_float+0x80>
 80093f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093fe:	463a      	mov	r2, r7
 8009400:	4640      	mov	r0, r8
 8009402:	4798      	blx	r3
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	3b01      	subs	r3, #1
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	e7f1      	b.n	80093f0 <_scanf_float+0x2fc>
 800940c:	46aa      	mov	sl, r5
 800940e:	9602      	str	r6, [sp, #8]
 8009410:	e7df      	b.n	80093d2 <_scanf_float+0x2de>
 8009412:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	2965      	cmp	r1, #101	; 0x65
 800941a:	f103 33ff 	add.w	r3, r3, #4294967295
 800941e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	d00c      	beq.n	8009440 <_scanf_float+0x34c>
 8009426:	2945      	cmp	r1, #69	; 0x45
 8009428:	d00a      	beq.n	8009440 <_scanf_float+0x34c>
 800942a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800942e:	463a      	mov	r2, r7
 8009430:	4640      	mov	r0, r8
 8009432:	4798      	blx	r3
 8009434:	6923      	ldr	r3, [r4, #16]
 8009436:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800943a:	3b01      	subs	r3, #1
 800943c:	1eb5      	subs	r5, r6, #2
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009444:	463a      	mov	r2, r7
 8009446:	4640      	mov	r0, r8
 8009448:	4798      	blx	r3
 800944a:	462e      	mov	r6, r5
 800944c:	6825      	ldr	r5, [r4, #0]
 800944e:	f015 0510 	ands.w	r5, r5, #16
 8009452:	d159      	bne.n	8009508 <_scanf_float+0x414>
 8009454:	7035      	strb	r5, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800945c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009460:	d11b      	bne.n	800949a <_scanf_float+0x3a6>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	454b      	cmp	r3, r9
 8009466:	eba3 0209 	sub.w	r2, r3, r9
 800946a:	d123      	bne.n	80094b4 <_scanf_float+0x3c0>
 800946c:	2200      	movs	r2, #0
 800946e:	4659      	mov	r1, fp
 8009470:	4640      	mov	r0, r8
 8009472:	f000 feef 	bl	800a254 <_strtod_r>
 8009476:	6822      	ldr	r2, [r4, #0]
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	f012 0f02 	tst.w	r2, #2
 800947e:	ec57 6b10 	vmov	r6, r7, d0
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	d021      	beq.n	80094ca <_scanf_float+0x3d6>
 8009486:	9903      	ldr	r1, [sp, #12]
 8009488:	1d1a      	adds	r2, r3, #4
 800948a:	600a      	str	r2, [r1, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	e9c3 6700 	strd	r6, r7, [r3]
 8009492:	68e3      	ldr	r3, [r4, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	60e3      	str	r3, [r4, #12]
 8009498:	e66d      	b.n	8009176 <_scanf_float+0x82>
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0e5      	beq.n	800946c <_scanf_float+0x378>
 80094a0:	9905      	ldr	r1, [sp, #20]
 80094a2:	230a      	movs	r3, #10
 80094a4:	462a      	mov	r2, r5
 80094a6:	3101      	adds	r1, #1
 80094a8:	4640      	mov	r0, r8
 80094aa:	f000 ffb7 	bl	800a41c <_strtol_r>
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	9e05      	ldr	r6, [sp, #20]
 80094b2:	1ac2      	subs	r2, r0, r3
 80094b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80094b8:	429e      	cmp	r6, r3
 80094ba:	bf28      	it	cs
 80094bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80094c0:	4912      	ldr	r1, [pc, #72]	; (800950c <_scanf_float+0x418>)
 80094c2:	4630      	mov	r0, r6
 80094c4:	f000 f870 	bl	80095a8 <siprintf>
 80094c8:	e7d0      	b.n	800946c <_scanf_float+0x378>
 80094ca:	9903      	ldr	r1, [sp, #12]
 80094cc:	f012 0f04 	tst.w	r2, #4
 80094d0:	f103 0204 	add.w	r2, r3, #4
 80094d4:	600a      	str	r2, [r1, #0]
 80094d6:	d1d9      	bne.n	800948c <_scanf_float+0x398>
 80094d8:	f8d3 8000 	ldr.w	r8, [r3]
 80094dc:	ee10 2a10 	vmov	r2, s0
 80094e0:	ee10 0a10 	vmov	r0, s0
 80094e4:	463b      	mov	r3, r7
 80094e6:	4639      	mov	r1, r7
 80094e8:	f7f7 fb50 	bl	8000b8c <__aeabi_dcmpun>
 80094ec:	b128      	cbz	r0, 80094fa <_scanf_float+0x406>
 80094ee:	4808      	ldr	r0, [pc, #32]	; (8009510 <_scanf_float+0x41c>)
 80094f0:	f000 f820 	bl	8009534 <nanf>
 80094f4:	ed88 0a00 	vstr	s0, [r8]
 80094f8:	e7cb      	b.n	8009492 <_scanf_float+0x39e>
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 fba3 	bl	8000c48 <__aeabi_d2f>
 8009502:	f8c8 0000 	str.w	r0, [r8]
 8009506:	e7c4      	b.n	8009492 <_scanf_float+0x39e>
 8009508:	2500      	movs	r5, #0
 800950a:	e634      	b.n	8009176 <_scanf_float+0x82>
 800950c:	0800d480 	.word	0x0800d480
 8009510:	0800d587 	.word	0x0800d587

08009514 <_sbrk_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d06      	ldr	r5, [pc, #24]	; (8009530 <_sbrk_r+0x1c>)
 8009518:	2300      	movs	r3, #0
 800951a:	4604      	mov	r4, r0
 800951c:	4608      	mov	r0, r1
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	f7f9 faa6 	bl	8002a70 <_sbrk>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_sbrk_r+0x1a>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_sbrk_r+0x1a>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	200005a0 	.word	0x200005a0

08009534 <nanf>:
 8009534:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800953c <nanf+0x8>
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	7fc00000 	.word	0x7fc00000

08009540 <sniprintf>:
 8009540:	b40c      	push	{r2, r3}
 8009542:	b530      	push	{r4, r5, lr}
 8009544:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <sniprintf+0x64>)
 8009546:	1e0c      	subs	r4, r1, #0
 8009548:	681d      	ldr	r5, [r3, #0]
 800954a:	b09d      	sub	sp, #116	; 0x74
 800954c:	da08      	bge.n	8009560 <sniprintf+0x20>
 800954e:	238b      	movs	r3, #139	; 0x8b
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	f04f 30ff 	mov.w	r0, #4294967295
 8009556:	b01d      	add	sp, #116	; 0x74
 8009558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800955c:	b002      	add	sp, #8
 800955e:	4770      	bx	lr
 8009560:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009564:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009568:	bf14      	ite	ne
 800956a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800956e:	4623      	moveq	r3, r4
 8009570:	9304      	str	r3, [sp, #16]
 8009572:	9307      	str	r3, [sp, #28]
 8009574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009578:	9002      	str	r0, [sp, #8]
 800957a:	9006      	str	r0, [sp, #24]
 800957c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009580:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009582:	ab21      	add	r3, sp, #132	; 0x84
 8009584:	a902      	add	r1, sp, #8
 8009586:	4628      	mov	r0, r5
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	f002 fecf 	bl	800c32c <_svfiprintf_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	bfbc      	itt	lt
 8009592:	238b      	movlt	r3, #139	; 0x8b
 8009594:	602b      	strlt	r3, [r5, #0]
 8009596:	2c00      	cmp	r4, #0
 8009598:	d0dd      	beq.n	8009556 <sniprintf+0x16>
 800959a:	9b02      	ldr	r3, [sp, #8]
 800959c:	2200      	movs	r2, #0
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	e7d9      	b.n	8009556 <sniprintf+0x16>
 80095a2:	bf00      	nop
 80095a4:	2000000c 	.word	0x2000000c

080095a8 <siprintf>:
 80095a8:	b40e      	push	{r1, r2, r3}
 80095aa:	b500      	push	{lr}
 80095ac:	b09c      	sub	sp, #112	; 0x70
 80095ae:	ab1d      	add	r3, sp, #116	; 0x74
 80095b0:	9002      	str	r0, [sp, #8]
 80095b2:	9006      	str	r0, [sp, #24]
 80095b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095b8:	4809      	ldr	r0, [pc, #36]	; (80095e0 <siprintf+0x38>)
 80095ba:	9107      	str	r1, [sp, #28]
 80095bc:	9104      	str	r1, [sp, #16]
 80095be:	4909      	ldr	r1, [pc, #36]	; (80095e4 <siprintf+0x3c>)
 80095c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c4:	9105      	str	r1, [sp, #20]
 80095c6:	6800      	ldr	r0, [r0, #0]
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	a902      	add	r1, sp, #8
 80095cc:	f002 feae 	bl	800c32c <_svfiprintf_r>
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	b01c      	add	sp, #112	; 0x70
 80095d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80095dc:	b003      	add	sp, #12
 80095de:	4770      	bx	lr
 80095e0:	2000000c 	.word	0x2000000c
 80095e4:	ffff0208 	.word	0xffff0208

080095e8 <strncpy>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	3901      	subs	r1, #1
 80095ec:	4603      	mov	r3, r0
 80095ee:	b132      	cbz	r2, 80095fe <strncpy+0x16>
 80095f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80095f4:	f803 4b01 	strb.w	r4, [r3], #1
 80095f8:	3a01      	subs	r2, #1
 80095fa:	2c00      	cmp	r4, #0
 80095fc:	d1f7      	bne.n	80095ee <strncpy+0x6>
 80095fe:	441a      	add	r2, r3
 8009600:	2100      	movs	r1, #0
 8009602:	4293      	cmp	r3, r2
 8009604:	d100      	bne.n	8009608 <strncpy+0x20>
 8009606:	bd10      	pop	{r4, pc}
 8009608:	f803 1b01 	strb.w	r1, [r3], #1
 800960c:	e7f9      	b.n	8009602 <strncpy+0x1a>

0800960e <sulp>:
 800960e:	b570      	push	{r4, r5, r6, lr}
 8009610:	4604      	mov	r4, r0
 8009612:	460d      	mov	r5, r1
 8009614:	ec45 4b10 	vmov	d0, r4, r5
 8009618:	4616      	mov	r6, r2
 800961a:	f002 fcc7 	bl	800bfac <__ulp>
 800961e:	ec51 0b10 	vmov	r0, r1, d0
 8009622:	b17e      	cbz	r6, 8009644 <sulp+0x36>
 8009624:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009628:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800962c:	2b00      	cmp	r3, #0
 800962e:	dd09      	ble.n	8009644 <sulp+0x36>
 8009630:	051b      	lsls	r3, r3, #20
 8009632:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009636:	2400      	movs	r4, #0
 8009638:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800963c:	4622      	mov	r2, r4
 800963e:	462b      	mov	r3, r5
 8009640:	f7f7 f80a 	bl	8000658 <__aeabi_dmul>
 8009644:	bd70      	pop	{r4, r5, r6, pc}
	...

08009648 <_strtod_l>:
 8009648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	ed2d 8b02 	vpush	{d8}
 8009650:	b09d      	sub	sp, #116	; 0x74
 8009652:	461f      	mov	r7, r3
 8009654:	2300      	movs	r3, #0
 8009656:	9318      	str	r3, [sp, #96]	; 0x60
 8009658:	4ba2      	ldr	r3, [pc, #648]	; (80098e4 <_strtod_l+0x29c>)
 800965a:	9213      	str	r2, [sp, #76]	; 0x4c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	9305      	str	r3, [sp, #20]
 8009660:	4604      	mov	r4, r0
 8009662:	4618      	mov	r0, r3
 8009664:	4688      	mov	r8, r1
 8009666:	f7f6 fddd 	bl	8000224 <strlen>
 800966a:	f04f 0a00 	mov.w	sl, #0
 800966e:	4605      	mov	r5, r0
 8009670:	f04f 0b00 	mov.w	fp, #0
 8009674:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800967a:	781a      	ldrb	r2, [r3, #0]
 800967c:	2a2b      	cmp	r2, #43	; 0x2b
 800967e:	d04e      	beq.n	800971e <_strtod_l+0xd6>
 8009680:	d83b      	bhi.n	80096fa <_strtod_l+0xb2>
 8009682:	2a0d      	cmp	r2, #13
 8009684:	d834      	bhi.n	80096f0 <_strtod_l+0xa8>
 8009686:	2a08      	cmp	r2, #8
 8009688:	d834      	bhi.n	80096f4 <_strtod_l+0xac>
 800968a:	2a00      	cmp	r2, #0
 800968c:	d03e      	beq.n	800970c <_strtod_l+0xc4>
 800968e:	2300      	movs	r3, #0
 8009690:	930a      	str	r3, [sp, #40]	; 0x28
 8009692:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009694:	7833      	ldrb	r3, [r6, #0]
 8009696:	2b30      	cmp	r3, #48	; 0x30
 8009698:	f040 80b0 	bne.w	80097fc <_strtod_l+0x1b4>
 800969c:	7873      	ldrb	r3, [r6, #1]
 800969e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096a2:	2b58      	cmp	r3, #88	; 0x58
 80096a4:	d168      	bne.n	8009778 <_strtod_l+0x130>
 80096a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	ab18      	add	r3, sp, #96	; 0x60
 80096ac:	9702      	str	r7, [sp, #8]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	4a8d      	ldr	r2, [pc, #564]	; (80098e8 <_strtod_l+0x2a0>)
 80096b2:	ab19      	add	r3, sp, #100	; 0x64
 80096b4:	a917      	add	r1, sp, #92	; 0x5c
 80096b6:	4620      	mov	r0, r4
 80096b8:	f001 fdce 	bl	800b258 <__gethex>
 80096bc:	f010 0707 	ands.w	r7, r0, #7
 80096c0:	4605      	mov	r5, r0
 80096c2:	d005      	beq.n	80096d0 <_strtod_l+0x88>
 80096c4:	2f06      	cmp	r7, #6
 80096c6:	d12c      	bne.n	8009722 <_strtod_l+0xda>
 80096c8:	3601      	adds	r6, #1
 80096ca:	2300      	movs	r3, #0
 80096cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80096ce:	930a      	str	r3, [sp, #40]	; 0x28
 80096d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f040 8590 	bne.w	800a1f8 <_strtod_l+0xbb0>
 80096d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096da:	b1eb      	cbz	r3, 8009718 <_strtod_l+0xd0>
 80096dc:	4652      	mov	r2, sl
 80096de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80096e2:	ec43 2b10 	vmov	d0, r2, r3
 80096e6:	b01d      	add	sp, #116	; 0x74
 80096e8:	ecbd 8b02 	vpop	{d8}
 80096ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f0:	2a20      	cmp	r2, #32
 80096f2:	d1cc      	bne.n	800968e <_strtod_l+0x46>
 80096f4:	3301      	adds	r3, #1
 80096f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80096f8:	e7be      	b.n	8009678 <_strtod_l+0x30>
 80096fa:	2a2d      	cmp	r2, #45	; 0x2d
 80096fc:	d1c7      	bne.n	800968e <_strtod_l+0x46>
 80096fe:	2201      	movs	r2, #1
 8009700:	920a      	str	r2, [sp, #40]	; 0x28
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	9217      	str	r2, [sp, #92]	; 0x5c
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1c2      	bne.n	8009692 <_strtod_l+0x4a>
 800970c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800970e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009712:	2b00      	cmp	r3, #0
 8009714:	f040 856e 	bne.w	800a1f4 <_strtod_l+0xbac>
 8009718:	4652      	mov	r2, sl
 800971a:	465b      	mov	r3, fp
 800971c:	e7e1      	b.n	80096e2 <_strtod_l+0x9a>
 800971e:	2200      	movs	r2, #0
 8009720:	e7ee      	b.n	8009700 <_strtod_l+0xb8>
 8009722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009724:	b13a      	cbz	r2, 8009736 <_strtod_l+0xee>
 8009726:	2135      	movs	r1, #53	; 0x35
 8009728:	a81a      	add	r0, sp, #104	; 0x68
 800972a:	f002 fd4a 	bl	800c1c2 <__copybits>
 800972e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009730:	4620      	mov	r0, r4
 8009732:	f002 f909 	bl	800b948 <_Bfree>
 8009736:	3f01      	subs	r7, #1
 8009738:	2f04      	cmp	r7, #4
 800973a:	d806      	bhi.n	800974a <_strtod_l+0x102>
 800973c:	e8df f007 	tbb	[pc, r7]
 8009740:	1714030a 	.word	0x1714030a
 8009744:	0a          	.byte	0x0a
 8009745:	00          	.byte	0x00
 8009746:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800974a:	0728      	lsls	r0, r5, #28
 800974c:	d5c0      	bpl.n	80096d0 <_strtod_l+0x88>
 800974e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009752:	e7bd      	b.n	80096d0 <_strtod_l+0x88>
 8009754:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009758:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800975a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800975e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009762:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009766:	e7f0      	b.n	800974a <_strtod_l+0x102>
 8009768:	f8df b180 	ldr.w	fp, [pc, #384]	; 80098ec <_strtod_l+0x2a4>
 800976c:	e7ed      	b.n	800974a <_strtod_l+0x102>
 800976e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009772:	f04f 3aff 	mov.w	sl, #4294967295
 8009776:	e7e8      	b.n	800974a <_strtod_l+0x102>
 8009778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	9217      	str	r2, [sp, #92]	; 0x5c
 800977e:	785b      	ldrb	r3, [r3, #1]
 8009780:	2b30      	cmp	r3, #48	; 0x30
 8009782:	d0f9      	beq.n	8009778 <_strtod_l+0x130>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0a3      	beq.n	80096d0 <_strtod_l+0x88>
 8009788:	2301      	movs	r3, #1
 800978a:	f04f 0900 	mov.w	r9, #0
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009792:	9308      	str	r3, [sp, #32]
 8009794:	f8cd 901c 	str.w	r9, [sp, #28]
 8009798:	464f      	mov	r7, r9
 800979a:	220a      	movs	r2, #10
 800979c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800979e:	7806      	ldrb	r6, [r0, #0]
 80097a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80097a4:	b2d9      	uxtb	r1, r3
 80097a6:	2909      	cmp	r1, #9
 80097a8:	d92a      	bls.n	8009800 <_strtod_l+0x1b8>
 80097aa:	9905      	ldr	r1, [sp, #20]
 80097ac:	462a      	mov	r2, r5
 80097ae:	f003 f81f 	bl	800c7f0 <strncmp>
 80097b2:	b398      	cbz	r0, 800981c <_strtod_l+0x1d4>
 80097b4:	2000      	movs	r0, #0
 80097b6:	4632      	mov	r2, r6
 80097b8:	463d      	mov	r5, r7
 80097ba:	9005      	str	r0, [sp, #20]
 80097bc:	4603      	mov	r3, r0
 80097be:	2a65      	cmp	r2, #101	; 0x65
 80097c0:	d001      	beq.n	80097c6 <_strtod_l+0x17e>
 80097c2:	2a45      	cmp	r2, #69	; 0x45
 80097c4:	d118      	bne.n	80097f8 <_strtod_l+0x1b0>
 80097c6:	b91d      	cbnz	r5, 80097d0 <_strtod_l+0x188>
 80097c8:	9a04      	ldr	r2, [sp, #16]
 80097ca:	4302      	orrs	r2, r0
 80097cc:	d09e      	beq.n	800970c <_strtod_l+0xc4>
 80097ce:	2500      	movs	r5, #0
 80097d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80097d4:	f108 0201 	add.w	r2, r8, #1
 80097d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80097da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80097de:	2a2b      	cmp	r2, #43	; 0x2b
 80097e0:	d075      	beq.n	80098ce <_strtod_l+0x286>
 80097e2:	2a2d      	cmp	r2, #45	; 0x2d
 80097e4:	d07b      	beq.n	80098de <_strtod_l+0x296>
 80097e6:	f04f 0c00 	mov.w	ip, #0
 80097ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80097ee:	2909      	cmp	r1, #9
 80097f0:	f240 8082 	bls.w	80098f8 <_strtod_l+0x2b0>
 80097f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80097f8:	2600      	movs	r6, #0
 80097fa:	e09d      	b.n	8009938 <_strtod_l+0x2f0>
 80097fc:	2300      	movs	r3, #0
 80097fe:	e7c4      	b.n	800978a <_strtod_l+0x142>
 8009800:	2f08      	cmp	r7, #8
 8009802:	bfd8      	it	le
 8009804:	9907      	ldrle	r1, [sp, #28]
 8009806:	f100 0001 	add.w	r0, r0, #1
 800980a:	bfda      	itte	le
 800980c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009810:	9307      	strle	r3, [sp, #28]
 8009812:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009816:	3701      	adds	r7, #1
 8009818:	9017      	str	r0, [sp, #92]	; 0x5c
 800981a:	e7bf      	b.n	800979c <_strtod_l+0x154>
 800981c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800981e:	195a      	adds	r2, r3, r5
 8009820:	9217      	str	r2, [sp, #92]	; 0x5c
 8009822:	5d5a      	ldrb	r2, [r3, r5]
 8009824:	2f00      	cmp	r7, #0
 8009826:	d037      	beq.n	8009898 <_strtod_l+0x250>
 8009828:	9005      	str	r0, [sp, #20]
 800982a:	463d      	mov	r5, r7
 800982c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009830:	2b09      	cmp	r3, #9
 8009832:	d912      	bls.n	800985a <_strtod_l+0x212>
 8009834:	2301      	movs	r3, #1
 8009836:	e7c2      	b.n	80097be <_strtod_l+0x176>
 8009838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	9217      	str	r2, [sp, #92]	; 0x5c
 800983e:	785a      	ldrb	r2, [r3, #1]
 8009840:	3001      	adds	r0, #1
 8009842:	2a30      	cmp	r2, #48	; 0x30
 8009844:	d0f8      	beq.n	8009838 <_strtod_l+0x1f0>
 8009846:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800984a:	2b08      	cmp	r3, #8
 800984c:	f200 84d9 	bhi.w	800a202 <_strtod_l+0xbba>
 8009850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009852:	9005      	str	r0, [sp, #20]
 8009854:	2000      	movs	r0, #0
 8009856:	9308      	str	r3, [sp, #32]
 8009858:	4605      	mov	r5, r0
 800985a:	3a30      	subs	r2, #48	; 0x30
 800985c:	f100 0301 	add.w	r3, r0, #1
 8009860:	d014      	beq.n	800988c <_strtod_l+0x244>
 8009862:	9905      	ldr	r1, [sp, #20]
 8009864:	4419      	add	r1, r3
 8009866:	9105      	str	r1, [sp, #20]
 8009868:	462b      	mov	r3, r5
 800986a:	eb00 0e05 	add.w	lr, r0, r5
 800986e:	210a      	movs	r1, #10
 8009870:	4573      	cmp	r3, lr
 8009872:	d113      	bne.n	800989c <_strtod_l+0x254>
 8009874:	182b      	adds	r3, r5, r0
 8009876:	2b08      	cmp	r3, #8
 8009878:	f105 0501 	add.w	r5, r5, #1
 800987c:	4405      	add	r5, r0
 800987e:	dc1c      	bgt.n	80098ba <_strtod_l+0x272>
 8009880:	9907      	ldr	r1, [sp, #28]
 8009882:	230a      	movs	r3, #10
 8009884:	fb03 2301 	mla	r3, r3, r1, r2
 8009888:	9307      	str	r3, [sp, #28]
 800988a:	2300      	movs	r3, #0
 800988c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800988e:	1c51      	adds	r1, r2, #1
 8009890:	9117      	str	r1, [sp, #92]	; 0x5c
 8009892:	7852      	ldrb	r2, [r2, #1]
 8009894:	4618      	mov	r0, r3
 8009896:	e7c9      	b.n	800982c <_strtod_l+0x1e4>
 8009898:	4638      	mov	r0, r7
 800989a:	e7d2      	b.n	8009842 <_strtod_l+0x1fa>
 800989c:	2b08      	cmp	r3, #8
 800989e:	dc04      	bgt.n	80098aa <_strtod_l+0x262>
 80098a0:	9e07      	ldr	r6, [sp, #28]
 80098a2:	434e      	muls	r6, r1
 80098a4:	9607      	str	r6, [sp, #28]
 80098a6:	3301      	adds	r3, #1
 80098a8:	e7e2      	b.n	8009870 <_strtod_l+0x228>
 80098aa:	f103 0c01 	add.w	ip, r3, #1
 80098ae:	f1bc 0f10 	cmp.w	ip, #16
 80098b2:	bfd8      	it	le
 80098b4:	fb01 f909 	mulle.w	r9, r1, r9
 80098b8:	e7f5      	b.n	80098a6 <_strtod_l+0x25e>
 80098ba:	2d10      	cmp	r5, #16
 80098bc:	bfdc      	itt	le
 80098be:	230a      	movle	r3, #10
 80098c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80098c4:	e7e1      	b.n	800988a <_strtod_l+0x242>
 80098c6:	2300      	movs	r3, #0
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	2301      	movs	r3, #1
 80098cc:	e77c      	b.n	80097c8 <_strtod_l+0x180>
 80098ce:	f04f 0c00 	mov.w	ip, #0
 80098d2:	f108 0202 	add.w	r2, r8, #2
 80098d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80098d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80098dc:	e785      	b.n	80097ea <_strtod_l+0x1a2>
 80098de:	f04f 0c01 	mov.w	ip, #1
 80098e2:	e7f6      	b.n	80098d2 <_strtod_l+0x28a>
 80098e4:	0800d668 	.word	0x0800d668
 80098e8:	0800d488 	.word	0x0800d488
 80098ec:	7ff00000 	.word	0x7ff00000
 80098f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098f2:	1c51      	adds	r1, r2, #1
 80098f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80098f6:	7852      	ldrb	r2, [r2, #1]
 80098f8:	2a30      	cmp	r2, #48	; 0x30
 80098fa:	d0f9      	beq.n	80098f0 <_strtod_l+0x2a8>
 80098fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009900:	2908      	cmp	r1, #8
 8009902:	f63f af79 	bhi.w	80097f8 <_strtod_l+0x1b0>
 8009906:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800990a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800990c:	9206      	str	r2, [sp, #24]
 800990e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009910:	1c51      	adds	r1, r2, #1
 8009912:	9117      	str	r1, [sp, #92]	; 0x5c
 8009914:	7852      	ldrb	r2, [r2, #1]
 8009916:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800991a:	2e09      	cmp	r6, #9
 800991c:	d937      	bls.n	800998e <_strtod_l+0x346>
 800991e:	9e06      	ldr	r6, [sp, #24]
 8009920:	1b89      	subs	r1, r1, r6
 8009922:	2908      	cmp	r1, #8
 8009924:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009928:	dc02      	bgt.n	8009930 <_strtod_l+0x2e8>
 800992a:	4576      	cmp	r6, lr
 800992c:	bfa8      	it	ge
 800992e:	4676      	movge	r6, lr
 8009930:	f1bc 0f00 	cmp.w	ip, #0
 8009934:	d000      	beq.n	8009938 <_strtod_l+0x2f0>
 8009936:	4276      	negs	r6, r6
 8009938:	2d00      	cmp	r5, #0
 800993a:	d14d      	bne.n	80099d8 <_strtod_l+0x390>
 800993c:	9904      	ldr	r1, [sp, #16]
 800993e:	4301      	orrs	r1, r0
 8009940:	f47f aec6 	bne.w	80096d0 <_strtod_l+0x88>
 8009944:	2b00      	cmp	r3, #0
 8009946:	f47f aee1 	bne.w	800970c <_strtod_l+0xc4>
 800994a:	2a69      	cmp	r2, #105	; 0x69
 800994c:	d027      	beq.n	800999e <_strtod_l+0x356>
 800994e:	dc24      	bgt.n	800999a <_strtod_l+0x352>
 8009950:	2a49      	cmp	r2, #73	; 0x49
 8009952:	d024      	beq.n	800999e <_strtod_l+0x356>
 8009954:	2a4e      	cmp	r2, #78	; 0x4e
 8009956:	f47f aed9 	bne.w	800970c <_strtod_l+0xc4>
 800995a:	499f      	ldr	r1, [pc, #636]	; (8009bd8 <_strtod_l+0x590>)
 800995c:	a817      	add	r0, sp, #92	; 0x5c
 800995e:	f001 fed3 	bl	800b708 <__match>
 8009962:	2800      	cmp	r0, #0
 8009964:	f43f aed2 	beq.w	800970c <_strtod_l+0xc4>
 8009968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b28      	cmp	r3, #40	; 0x28
 800996e:	d12d      	bne.n	80099cc <_strtod_l+0x384>
 8009970:	499a      	ldr	r1, [pc, #616]	; (8009bdc <_strtod_l+0x594>)
 8009972:	aa1a      	add	r2, sp, #104	; 0x68
 8009974:	a817      	add	r0, sp, #92	; 0x5c
 8009976:	f001 fedb 	bl	800b730 <__hexnan>
 800997a:	2805      	cmp	r0, #5
 800997c:	d126      	bne.n	80099cc <_strtod_l+0x384>
 800997e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009980:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009984:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009988:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800998c:	e6a0      	b.n	80096d0 <_strtod_l+0x88>
 800998e:	210a      	movs	r1, #10
 8009990:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009994:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009998:	e7b9      	b.n	800990e <_strtod_l+0x2c6>
 800999a:	2a6e      	cmp	r2, #110	; 0x6e
 800999c:	e7db      	b.n	8009956 <_strtod_l+0x30e>
 800999e:	4990      	ldr	r1, [pc, #576]	; (8009be0 <_strtod_l+0x598>)
 80099a0:	a817      	add	r0, sp, #92	; 0x5c
 80099a2:	f001 feb1 	bl	800b708 <__match>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f43f aeb0 	beq.w	800970c <_strtod_l+0xc4>
 80099ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099ae:	498d      	ldr	r1, [pc, #564]	; (8009be4 <_strtod_l+0x59c>)
 80099b0:	3b01      	subs	r3, #1
 80099b2:	a817      	add	r0, sp, #92	; 0x5c
 80099b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80099b6:	f001 fea7 	bl	800b708 <__match>
 80099ba:	b910      	cbnz	r0, 80099c2 <_strtod_l+0x37a>
 80099bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099be:	3301      	adds	r3, #1
 80099c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80099c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009bf4 <_strtod_l+0x5ac>
 80099c6:	f04f 0a00 	mov.w	sl, #0
 80099ca:	e681      	b.n	80096d0 <_strtod_l+0x88>
 80099cc:	4886      	ldr	r0, [pc, #536]	; (8009be8 <_strtod_l+0x5a0>)
 80099ce:	f002 ff07 	bl	800c7e0 <nan>
 80099d2:	ec5b ab10 	vmov	sl, fp, d0
 80099d6:	e67b      	b.n	80096d0 <_strtod_l+0x88>
 80099d8:	9b05      	ldr	r3, [sp, #20]
 80099da:	9807      	ldr	r0, [sp, #28]
 80099dc:	1af3      	subs	r3, r6, r3
 80099de:	2f00      	cmp	r7, #0
 80099e0:	bf08      	it	eq
 80099e2:	462f      	moveq	r7, r5
 80099e4:	2d10      	cmp	r5, #16
 80099e6:	9306      	str	r3, [sp, #24]
 80099e8:	46a8      	mov	r8, r5
 80099ea:	bfa8      	it	ge
 80099ec:	f04f 0810 	movge.w	r8, #16
 80099f0:	f7f6 fdb8 	bl	8000564 <__aeabi_ui2d>
 80099f4:	2d09      	cmp	r5, #9
 80099f6:	4682      	mov	sl, r0
 80099f8:	468b      	mov	fp, r1
 80099fa:	dd13      	ble.n	8009a24 <_strtod_l+0x3dc>
 80099fc:	4b7b      	ldr	r3, [pc, #492]	; (8009bec <_strtod_l+0x5a4>)
 80099fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a06:	f7f6 fe27 	bl	8000658 <__aeabi_dmul>
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	4648      	mov	r0, r9
 8009a0e:	468b      	mov	fp, r1
 8009a10:	f7f6 fda8 	bl	8000564 <__aeabi_ui2d>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4650      	mov	r0, sl
 8009a1a:	4659      	mov	r1, fp
 8009a1c:	f7f6 fc66 	bl	80002ec <__adddf3>
 8009a20:	4682      	mov	sl, r0
 8009a22:	468b      	mov	fp, r1
 8009a24:	2d0f      	cmp	r5, #15
 8009a26:	dc38      	bgt.n	8009a9a <_strtod_l+0x452>
 8009a28:	9b06      	ldr	r3, [sp, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f43f ae50 	beq.w	80096d0 <_strtod_l+0x88>
 8009a30:	dd24      	ble.n	8009a7c <_strtod_l+0x434>
 8009a32:	2b16      	cmp	r3, #22
 8009a34:	dc0b      	bgt.n	8009a4e <_strtod_l+0x406>
 8009a36:	496d      	ldr	r1, [pc, #436]	; (8009bec <_strtod_l+0x5a4>)
 8009a38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a40:	4652      	mov	r2, sl
 8009a42:	465b      	mov	r3, fp
 8009a44:	f7f6 fe08 	bl	8000658 <__aeabi_dmul>
 8009a48:	4682      	mov	sl, r0
 8009a4a:	468b      	mov	fp, r1
 8009a4c:	e640      	b.n	80096d0 <_strtod_l+0x88>
 8009a4e:	9a06      	ldr	r2, [sp, #24]
 8009a50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009a54:	4293      	cmp	r3, r2
 8009a56:	db20      	blt.n	8009a9a <_strtod_l+0x452>
 8009a58:	4c64      	ldr	r4, [pc, #400]	; (8009bec <_strtod_l+0x5a4>)
 8009a5a:	f1c5 050f 	rsb	r5, r5, #15
 8009a5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a62:	4652      	mov	r2, sl
 8009a64:	465b      	mov	r3, fp
 8009a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a6a:	f7f6 fdf5 	bl	8000658 <__aeabi_dmul>
 8009a6e:	9b06      	ldr	r3, [sp, #24]
 8009a70:	1b5d      	subs	r5, r3, r5
 8009a72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a7a:	e7e3      	b.n	8009a44 <_strtod_l+0x3fc>
 8009a7c:	9b06      	ldr	r3, [sp, #24]
 8009a7e:	3316      	adds	r3, #22
 8009a80:	db0b      	blt.n	8009a9a <_strtod_l+0x452>
 8009a82:	9b05      	ldr	r3, [sp, #20]
 8009a84:	1b9e      	subs	r6, r3, r6
 8009a86:	4b59      	ldr	r3, [pc, #356]	; (8009bec <_strtod_l+0x5a4>)
 8009a88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009a8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a90:	4650      	mov	r0, sl
 8009a92:	4659      	mov	r1, fp
 8009a94:	f7f6 ff0a 	bl	80008ac <__aeabi_ddiv>
 8009a98:	e7d6      	b.n	8009a48 <_strtod_l+0x400>
 8009a9a:	9b06      	ldr	r3, [sp, #24]
 8009a9c:	eba5 0808 	sub.w	r8, r5, r8
 8009aa0:	4498      	add	r8, r3
 8009aa2:	f1b8 0f00 	cmp.w	r8, #0
 8009aa6:	dd74      	ble.n	8009b92 <_strtod_l+0x54a>
 8009aa8:	f018 030f 	ands.w	r3, r8, #15
 8009aac:	d00a      	beq.n	8009ac4 <_strtod_l+0x47c>
 8009aae:	494f      	ldr	r1, [pc, #316]	; (8009bec <_strtod_l+0x5a4>)
 8009ab0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ab4:	4652      	mov	r2, sl
 8009ab6:	465b      	mov	r3, fp
 8009ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009abc:	f7f6 fdcc 	bl	8000658 <__aeabi_dmul>
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	468b      	mov	fp, r1
 8009ac4:	f038 080f 	bics.w	r8, r8, #15
 8009ac8:	d04f      	beq.n	8009b6a <_strtod_l+0x522>
 8009aca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009ace:	dd22      	ble.n	8009b16 <_strtod_l+0x4ce>
 8009ad0:	2500      	movs	r5, #0
 8009ad2:	462e      	mov	r6, r5
 8009ad4:	9507      	str	r5, [sp, #28]
 8009ad6:	9505      	str	r5, [sp, #20]
 8009ad8:	2322      	movs	r3, #34	; 0x22
 8009ada:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009bf4 <_strtod_l+0x5ac>
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	f04f 0a00 	mov.w	sl, #0
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f43f adf2 	beq.w	80096d0 <_strtod_l+0x88>
 8009aec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009aee:	4620      	mov	r0, r4
 8009af0:	f001 ff2a 	bl	800b948 <_Bfree>
 8009af4:	9905      	ldr	r1, [sp, #20]
 8009af6:	4620      	mov	r0, r4
 8009af8:	f001 ff26 	bl	800b948 <_Bfree>
 8009afc:	4631      	mov	r1, r6
 8009afe:	4620      	mov	r0, r4
 8009b00:	f001 ff22 	bl	800b948 <_Bfree>
 8009b04:	9907      	ldr	r1, [sp, #28]
 8009b06:	4620      	mov	r0, r4
 8009b08:	f001 ff1e 	bl	800b948 <_Bfree>
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f001 ff1a 	bl	800b948 <_Bfree>
 8009b14:	e5dc      	b.n	80096d0 <_strtod_l+0x88>
 8009b16:	4b36      	ldr	r3, [pc, #216]	; (8009bf0 <_strtod_l+0x5a8>)
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009b20:	4650      	mov	r0, sl
 8009b22:	4659      	mov	r1, fp
 8009b24:	4699      	mov	r9, r3
 8009b26:	f1b8 0f01 	cmp.w	r8, #1
 8009b2a:	dc21      	bgt.n	8009b70 <_strtod_l+0x528>
 8009b2c:	b10b      	cbz	r3, 8009b32 <_strtod_l+0x4ea>
 8009b2e:	4682      	mov	sl, r0
 8009b30:	468b      	mov	fp, r1
 8009b32:	4b2f      	ldr	r3, [pc, #188]	; (8009bf0 <_strtod_l+0x5a8>)
 8009b34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009b38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	465b      	mov	r3, fp
 8009b40:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009b44:	f7f6 fd88 	bl	8000658 <__aeabi_dmul>
 8009b48:	4b2a      	ldr	r3, [pc, #168]	; (8009bf4 <_strtod_l+0x5ac>)
 8009b4a:	460a      	mov	r2, r1
 8009b4c:	400b      	ands	r3, r1
 8009b4e:	492a      	ldr	r1, [pc, #168]	; (8009bf8 <_strtod_l+0x5b0>)
 8009b50:	428b      	cmp	r3, r1
 8009b52:	4682      	mov	sl, r0
 8009b54:	d8bc      	bhi.n	8009ad0 <_strtod_l+0x488>
 8009b56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009b5a:	428b      	cmp	r3, r1
 8009b5c:	bf86      	itte	hi
 8009b5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009bfc <_strtod_l+0x5b4>
 8009b62:	f04f 3aff 	movhi.w	sl, #4294967295
 8009b66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	e084      	b.n	8009c7a <_strtod_l+0x632>
 8009b70:	f018 0f01 	tst.w	r8, #1
 8009b74:	d005      	beq.n	8009b82 <_strtod_l+0x53a>
 8009b76:	9b04      	ldr	r3, [sp, #16]
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 fd6c 	bl	8000658 <__aeabi_dmul>
 8009b80:	2301      	movs	r3, #1
 8009b82:	9a04      	ldr	r2, [sp, #16]
 8009b84:	3208      	adds	r2, #8
 8009b86:	f109 0901 	add.w	r9, r9, #1
 8009b8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b8e:	9204      	str	r2, [sp, #16]
 8009b90:	e7c9      	b.n	8009b26 <_strtod_l+0x4de>
 8009b92:	d0ea      	beq.n	8009b6a <_strtod_l+0x522>
 8009b94:	f1c8 0800 	rsb	r8, r8, #0
 8009b98:	f018 020f 	ands.w	r2, r8, #15
 8009b9c:	d00a      	beq.n	8009bb4 <_strtod_l+0x56c>
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <_strtod_l+0x5a4>)
 8009ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba4:	4650      	mov	r0, sl
 8009ba6:	4659      	mov	r1, fp
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7f6 fe7e 	bl	80008ac <__aeabi_ddiv>
 8009bb0:	4682      	mov	sl, r0
 8009bb2:	468b      	mov	fp, r1
 8009bb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009bb8:	d0d7      	beq.n	8009b6a <_strtod_l+0x522>
 8009bba:	f1b8 0f1f 	cmp.w	r8, #31
 8009bbe:	dd1f      	ble.n	8009c00 <_strtod_l+0x5b8>
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	462e      	mov	r6, r5
 8009bc4:	9507      	str	r5, [sp, #28]
 8009bc6:	9505      	str	r5, [sp, #20]
 8009bc8:	2322      	movs	r3, #34	; 0x22
 8009bca:	f04f 0a00 	mov.w	sl, #0
 8009bce:	f04f 0b00 	mov.w	fp, #0
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	e786      	b.n	8009ae4 <_strtod_l+0x49c>
 8009bd6:	bf00      	nop
 8009bd8:	0800d459 	.word	0x0800d459
 8009bdc:	0800d49c 	.word	0x0800d49c
 8009be0:	0800d451 	.word	0x0800d451
 8009be4:	0800d58b 	.word	0x0800d58b
 8009be8:	0800d587 	.word	0x0800d587
 8009bec:	0800d700 	.word	0x0800d700
 8009bf0:	0800d6d8 	.word	0x0800d6d8
 8009bf4:	7ff00000 	.word	0x7ff00000
 8009bf8:	7ca00000 	.word	0x7ca00000
 8009bfc:	7fefffff 	.word	0x7fefffff
 8009c00:	f018 0310 	ands.w	r3, r8, #16
 8009c04:	bf18      	it	ne
 8009c06:	236a      	movne	r3, #106	; 0x6a
 8009c08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009fb8 <_strtod_l+0x970>
 8009c0c:	9304      	str	r3, [sp, #16]
 8009c0e:	4650      	mov	r0, sl
 8009c10:	4659      	mov	r1, fp
 8009c12:	2300      	movs	r3, #0
 8009c14:	f018 0f01 	tst.w	r8, #1
 8009c18:	d004      	beq.n	8009c24 <_strtod_l+0x5dc>
 8009c1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009c1e:	f7f6 fd1b 	bl	8000658 <__aeabi_dmul>
 8009c22:	2301      	movs	r3, #1
 8009c24:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009c28:	f109 0908 	add.w	r9, r9, #8
 8009c2c:	d1f2      	bne.n	8009c14 <_strtod_l+0x5cc>
 8009c2e:	b10b      	cbz	r3, 8009c34 <_strtod_l+0x5ec>
 8009c30:	4682      	mov	sl, r0
 8009c32:	468b      	mov	fp, r1
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	b1c3      	cbz	r3, 8009c6a <_strtod_l+0x622>
 8009c38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	4659      	mov	r1, fp
 8009c44:	dd11      	ble.n	8009c6a <_strtod_l+0x622>
 8009c46:	2b1f      	cmp	r3, #31
 8009c48:	f340 8124 	ble.w	8009e94 <_strtod_l+0x84c>
 8009c4c:	2b34      	cmp	r3, #52	; 0x34
 8009c4e:	bfde      	ittt	le
 8009c50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009c54:	f04f 33ff 	movle.w	r3, #4294967295
 8009c58:	fa03 f202 	lslle.w	r2, r3, r2
 8009c5c:	f04f 0a00 	mov.w	sl, #0
 8009c60:	bfcc      	ite	gt
 8009c62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009c66:	ea02 0b01 	andle.w	fp, r2, r1
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	4650      	mov	r0, sl
 8009c70:	4659      	mov	r1, fp
 8009c72:	f7f6 ff59 	bl	8000b28 <__aeabi_dcmpeq>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d1a2      	bne.n	8009bc0 <_strtod_l+0x578>
 8009c7a:	9b07      	ldr	r3, [sp, #28]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	9908      	ldr	r1, [sp, #32]
 8009c80:	462b      	mov	r3, r5
 8009c82:	463a      	mov	r2, r7
 8009c84:	4620      	mov	r0, r4
 8009c86:	f001 fec7 	bl	800ba18 <__s2b>
 8009c8a:	9007      	str	r0, [sp, #28]
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f43f af1f 	beq.w	8009ad0 <_strtod_l+0x488>
 8009c92:	9b05      	ldr	r3, [sp, #20]
 8009c94:	1b9e      	subs	r6, r3, r6
 8009c96:	9b06      	ldr	r3, [sp, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bfb4      	ite	lt
 8009c9c:	4633      	movlt	r3, r6
 8009c9e:	2300      	movge	r3, #0
 8009ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ca2:	9b06      	ldr	r3, [sp, #24]
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009caa:	9312      	str	r3, [sp, #72]	; 0x48
 8009cac:	462e      	mov	r6, r5
 8009cae:	9b07      	ldr	r3, [sp, #28]
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	6859      	ldr	r1, [r3, #4]
 8009cb4:	f001 fe08 	bl	800b8c8 <_Balloc>
 8009cb8:	9005      	str	r0, [sp, #20]
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	f43f af0c 	beq.w	8009ad8 <_strtod_l+0x490>
 8009cc0:	9b07      	ldr	r3, [sp, #28]
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	3202      	adds	r2, #2
 8009cc6:	f103 010c 	add.w	r1, r3, #12
 8009cca:	0092      	lsls	r2, r2, #2
 8009ccc:	300c      	adds	r0, #12
 8009cce:	f001 fde1 	bl	800b894 <memcpy>
 8009cd2:	ec4b ab10 	vmov	d0, sl, fp
 8009cd6:	aa1a      	add	r2, sp, #104	; 0x68
 8009cd8:	a919      	add	r1, sp, #100	; 0x64
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f002 f9e2 	bl	800c0a4 <__d2b>
 8009ce0:	ec4b ab18 	vmov	d8, sl, fp
 8009ce4:	9018      	str	r0, [sp, #96]	; 0x60
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f aef6 	beq.w	8009ad8 <_strtod_l+0x490>
 8009cec:	2101      	movs	r1, #1
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f001 ff2c 	bl	800bb4c <__i2b>
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f43f aeee 	beq.w	8009ad8 <_strtod_l+0x490>
 8009cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cfe:	9904      	ldr	r1, [sp, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bfab      	itete	ge
 8009d04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009d06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009d08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009d0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009d0e:	bfac      	ite	ge
 8009d10:	eb03 0902 	addge.w	r9, r3, r2
 8009d14:	1ad7      	sublt	r7, r2, r3
 8009d16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d18:	eba3 0801 	sub.w	r8, r3, r1
 8009d1c:	4490      	add	r8, r2
 8009d1e:	4ba1      	ldr	r3, [pc, #644]	; (8009fa4 <_strtod_l+0x95c>)
 8009d20:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d24:	4598      	cmp	r8, r3
 8009d26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d2a:	f280 80c7 	bge.w	8009ebc <_strtod_l+0x874>
 8009d2e:	eba3 0308 	sub.w	r3, r3, r8
 8009d32:	2b1f      	cmp	r3, #31
 8009d34:	eba2 0203 	sub.w	r2, r2, r3
 8009d38:	f04f 0101 	mov.w	r1, #1
 8009d3c:	f300 80b1 	bgt.w	8009ea2 <_strtod_l+0x85a>
 8009d40:	fa01 f303 	lsl.w	r3, r1, r3
 8009d44:	930d      	str	r3, [sp, #52]	; 0x34
 8009d46:	2300      	movs	r3, #0
 8009d48:	9308      	str	r3, [sp, #32]
 8009d4a:	eb09 0802 	add.w	r8, r9, r2
 8009d4e:	9b04      	ldr	r3, [sp, #16]
 8009d50:	45c1      	cmp	r9, r8
 8009d52:	4417      	add	r7, r2
 8009d54:	441f      	add	r7, r3
 8009d56:	464b      	mov	r3, r9
 8009d58:	bfa8      	it	ge
 8009d5a:	4643      	movge	r3, r8
 8009d5c:	42bb      	cmp	r3, r7
 8009d5e:	bfa8      	it	ge
 8009d60:	463b      	movge	r3, r7
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	bfc2      	ittt	gt
 8009d66:	eba8 0803 	subgt.w	r8, r8, r3
 8009d6a:	1aff      	subgt	r7, r7, r3
 8009d6c:	eba9 0903 	subgt.w	r9, r9, r3
 8009d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	dd17      	ble.n	8009da6 <_strtod_l+0x75e>
 8009d76:	4631      	mov	r1, r6
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f001 ffa6 	bl	800bccc <__pow5mult>
 8009d80:	4606      	mov	r6, r0
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f43f aea8 	beq.w	8009ad8 <_strtod_l+0x490>
 8009d88:	4601      	mov	r1, r0
 8009d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f001 fef3 	bl	800bb78 <__multiply>
 8009d92:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f43f ae9f 	beq.w	8009ad8 <_strtod_l+0x490>
 8009d9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f001 fdd3 	bl	800b948 <_Bfree>
 8009da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da4:	9318      	str	r3, [sp, #96]	; 0x60
 8009da6:	f1b8 0f00 	cmp.w	r8, #0
 8009daa:	f300 808c 	bgt.w	8009ec6 <_strtod_l+0x87e>
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dd08      	ble.n	8009dc6 <_strtod_l+0x77e>
 8009db4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009db6:	9905      	ldr	r1, [sp, #20]
 8009db8:	4620      	mov	r0, r4
 8009dba:	f001 ff87 	bl	800bccc <__pow5mult>
 8009dbe:	9005      	str	r0, [sp, #20]
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f43f ae89 	beq.w	8009ad8 <_strtod_l+0x490>
 8009dc6:	2f00      	cmp	r7, #0
 8009dc8:	dd08      	ble.n	8009ddc <_strtod_l+0x794>
 8009dca:	9905      	ldr	r1, [sp, #20]
 8009dcc:	463a      	mov	r2, r7
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f001 ffd6 	bl	800bd80 <__lshift>
 8009dd4:	9005      	str	r0, [sp, #20]
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f43f ae7e 	beq.w	8009ad8 <_strtod_l+0x490>
 8009ddc:	f1b9 0f00 	cmp.w	r9, #0
 8009de0:	dd08      	ble.n	8009df4 <_strtod_l+0x7ac>
 8009de2:	4631      	mov	r1, r6
 8009de4:	464a      	mov	r2, r9
 8009de6:	4620      	mov	r0, r4
 8009de8:	f001 ffca 	bl	800bd80 <__lshift>
 8009dec:	4606      	mov	r6, r0
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f ae72 	beq.w	8009ad8 <_strtod_l+0x490>
 8009df4:	9a05      	ldr	r2, [sp, #20]
 8009df6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f002 f84d 	bl	800be98 <__mdiff>
 8009dfe:	4605      	mov	r5, r0
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f43f ae69 	beq.w	8009ad8 <_strtod_l+0x490>
 8009e06:	68c3      	ldr	r3, [r0, #12]
 8009e08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60c3      	str	r3, [r0, #12]
 8009e0e:	4631      	mov	r1, r6
 8009e10:	f002 f826 	bl	800be60 <__mcmp>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	da60      	bge.n	8009eda <_strtod_l+0x892>
 8009e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e1a:	ea53 030a 	orrs.w	r3, r3, sl
 8009e1e:	f040 8082 	bne.w	8009f26 <_strtod_l+0x8de>
 8009e22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d17d      	bne.n	8009f26 <_strtod_l+0x8de>
 8009e2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e2e:	0d1b      	lsrs	r3, r3, #20
 8009e30:	051b      	lsls	r3, r3, #20
 8009e32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e36:	d976      	bls.n	8009f26 <_strtod_l+0x8de>
 8009e38:	696b      	ldr	r3, [r5, #20]
 8009e3a:	b913      	cbnz	r3, 8009e42 <_strtod_l+0x7fa>
 8009e3c:	692b      	ldr	r3, [r5, #16]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	dd71      	ble.n	8009f26 <_strtod_l+0x8de>
 8009e42:	4629      	mov	r1, r5
 8009e44:	2201      	movs	r2, #1
 8009e46:	4620      	mov	r0, r4
 8009e48:	f001 ff9a 	bl	800bd80 <__lshift>
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4605      	mov	r5, r0
 8009e50:	f002 f806 	bl	800be60 <__mcmp>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	dd66      	ble.n	8009f26 <_strtod_l+0x8de>
 8009e58:	9904      	ldr	r1, [sp, #16]
 8009e5a:	4a53      	ldr	r2, [pc, #332]	; (8009fa8 <_strtod_l+0x960>)
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	f000 8081 	beq.w	8009f66 <_strtod_l+0x91e>
 8009e64:	ea02 010b 	and.w	r1, r2, fp
 8009e68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e6c:	dc7b      	bgt.n	8009f66 <_strtod_l+0x91e>
 8009e6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e72:	f77f aea9 	ble.w	8009bc8 <_strtod_l+0x580>
 8009e76:	4b4d      	ldr	r3, [pc, #308]	; (8009fac <_strtod_l+0x964>)
 8009e78:	4650      	mov	r0, sl
 8009e7a:	4659      	mov	r1, fp
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f7f6 fbeb 	bl	8000658 <__aeabi_dmul>
 8009e82:	460b      	mov	r3, r1
 8009e84:	4303      	orrs	r3, r0
 8009e86:	bf08      	it	eq
 8009e88:	2322      	moveq	r3, #34	; 0x22
 8009e8a:	4682      	mov	sl, r0
 8009e8c:	468b      	mov	fp, r1
 8009e8e:	bf08      	it	eq
 8009e90:	6023      	streq	r3, [r4, #0]
 8009e92:	e62b      	b.n	8009aec <_strtod_l+0x4a4>
 8009e94:	f04f 32ff 	mov.w	r2, #4294967295
 8009e98:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9c:	ea03 0a0a 	and.w	sl, r3, sl
 8009ea0:	e6e3      	b.n	8009c6a <_strtod_l+0x622>
 8009ea2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ea6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009eaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009eae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009eb2:	fa01 f308 	lsl.w	r3, r1, r8
 8009eb6:	9308      	str	r3, [sp, #32]
 8009eb8:	910d      	str	r1, [sp, #52]	; 0x34
 8009eba:	e746      	b.n	8009d4a <_strtod_l+0x702>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9308      	str	r3, [sp, #32]
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ec4:	e741      	b.n	8009d4a <_strtod_l+0x702>
 8009ec6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ec8:	4642      	mov	r2, r8
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f001 ff58 	bl	800bd80 <__lshift>
 8009ed0:	9018      	str	r0, [sp, #96]	; 0x60
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f47f af6b 	bne.w	8009dae <_strtod_l+0x766>
 8009ed8:	e5fe      	b.n	8009ad8 <_strtod_l+0x490>
 8009eda:	465f      	mov	r7, fp
 8009edc:	d16e      	bne.n	8009fbc <_strtod_l+0x974>
 8009ede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ee4:	b342      	cbz	r2, 8009f38 <_strtod_l+0x8f0>
 8009ee6:	4a32      	ldr	r2, [pc, #200]	; (8009fb0 <_strtod_l+0x968>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d128      	bne.n	8009f3e <_strtod_l+0x8f6>
 8009eec:	9b04      	ldr	r3, [sp, #16]
 8009eee:	4651      	mov	r1, sl
 8009ef0:	b1eb      	cbz	r3, 8009f2e <_strtod_l+0x8e6>
 8009ef2:	4b2d      	ldr	r3, [pc, #180]	; (8009fa8 <_strtod_l+0x960>)
 8009ef4:	403b      	ands	r3, r7
 8009ef6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295
 8009efe:	d819      	bhi.n	8009f34 <_strtod_l+0x8ec>
 8009f00:	0d1b      	lsrs	r3, r3, #20
 8009f02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f06:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0a:	4299      	cmp	r1, r3
 8009f0c:	d117      	bne.n	8009f3e <_strtod_l+0x8f6>
 8009f0e:	4b29      	ldr	r3, [pc, #164]	; (8009fb4 <_strtod_l+0x96c>)
 8009f10:	429f      	cmp	r7, r3
 8009f12:	d102      	bne.n	8009f1a <_strtod_l+0x8d2>
 8009f14:	3101      	adds	r1, #1
 8009f16:	f43f addf 	beq.w	8009ad8 <_strtod_l+0x490>
 8009f1a:	4b23      	ldr	r3, [pc, #140]	; (8009fa8 <_strtod_l+0x960>)
 8009f1c:	403b      	ands	r3, r7
 8009f1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009f22:	f04f 0a00 	mov.w	sl, #0
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1a4      	bne.n	8009e76 <_strtod_l+0x82e>
 8009f2c:	e5de      	b.n	8009aec <_strtod_l+0x4a4>
 8009f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f32:	e7ea      	b.n	8009f0a <_strtod_l+0x8c2>
 8009f34:	4613      	mov	r3, r2
 8009f36:	e7e8      	b.n	8009f0a <_strtod_l+0x8c2>
 8009f38:	ea53 030a 	orrs.w	r3, r3, sl
 8009f3c:	d08c      	beq.n	8009e58 <_strtod_l+0x810>
 8009f3e:	9b08      	ldr	r3, [sp, #32]
 8009f40:	b1db      	cbz	r3, 8009f7a <_strtod_l+0x932>
 8009f42:	423b      	tst	r3, r7
 8009f44:	d0ef      	beq.n	8009f26 <_strtod_l+0x8de>
 8009f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f48:	9a04      	ldr	r2, [sp, #16]
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	b1c3      	cbz	r3, 8009f82 <_strtod_l+0x93a>
 8009f50:	f7ff fb5d 	bl	800960e <sulp>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	ec51 0b18 	vmov	r0, r1, d8
 8009f5c:	f7f6 f9c6 	bl	80002ec <__adddf3>
 8009f60:	4682      	mov	sl, r0
 8009f62:	468b      	mov	fp, r1
 8009f64:	e7df      	b.n	8009f26 <_strtod_l+0x8de>
 8009f66:	4013      	ands	r3, r2
 8009f68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f74:	f04f 3aff 	mov.w	sl, #4294967295
 8009f78:	e7d5      	b.n	8009f26 <_strtod_l+0x8de>
 8009f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f7c:	ea13 0f0a 	tst.w	r3, sl
 8009f80:	e7e0      	b.n	8009f44 <_strtod_l+0x8fc>
 8009f82:	f7ff fb44 	bl	800960e <sulp>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	ec51 0b18 	vmov	r0, r1, d8
 8009f8e:	f7f6 f9ab 	bl	80002e8 <__aeabi_dsub>
 8009f92:	2200      	movs	r2, #0
 8009f94:	2300      	movs	r3, #0
 8009f96:	4682      	mov	sl, r0
 8009f98:	468b      	mov	fp, r1
 8009f9a:	f7f6 fdc5 	bl	8000b28 <__aeabi_dcmpeq>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d0c1      	beq.n	8009f26 <_strtod_l+0x8de>
 8009fa2:	e611      	b.n	8009bc8 <_strtod_l+0x580>
 8009fa4:	fffffc02 	.word	0xfffffc02
 8009fa8:	7ff00000 	.word	0x7ff00000
 8009fac:	39500000 	.word	0x39500000
 8009fb0:	000fffff 	.word	0x000fffff
 8009fb4:	7fefffff 	.word	0x7fefffff
 8009fb8:	0800d4b0 	.word	0x0800d4b0
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f002 f8cc 	bl	800c15c <__ratio>
 8009fc4:	ec59 8b10 	vmov	r8, r9, d0
 8009fc8:	ee10 0a10 	vmov	r0, s0
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	f7f6 fdbc 	bl	8000b50 <__aeabi_dcmple>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d07a      	beq.n	800a0d2 <_strtod_l+0xa8a>
 8009fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d04a      	beq.n	800a078 <_strtod_l+0xa30>
 8009fe2:	4b95      	ldr	r3, [pc, #596]	; (800a238 <_strtod_l+0xbf0>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a238 <_strtod_l+0xbf0>
 8009fee:	f04f 0800 	mov.w	r8, #0
 8009ff2:	4b92      	ldr	r3, [pc, #584]	; (800a23c <_strtod_l+0xbf4>)
 8009ff4:	403b      	ands	r3, r7
 8009ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ff8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ffa:	4b91      	ldr	r3, [pc, #580]	; (800a240 <_strtod_l+0xbf8>)
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	f040 80b0 	bne.w	800a162 <_strtod_l+0xb1a>
 800a002:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a006:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a00a:	ec4b ab10 	vmov	d0, sl, fp
 800a00e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a012:	f001 ffcb 	bl	800bfac <__ulp>
 800a016:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a01a:	ec53 2b10 	vmov	r2, r3, d0
 800a01e:	f7f6 fb1b 	bl	8000658 <__aeabi_dmul>
 800a022:	4652      	mov	r2, sl
 800a024:	465b      	mov	r3, fp
 800a026:	f7f6 f961 	bl	80002ec <__adddf3>
 800a02a:	460b      	mov	r3, r1
 800a02c:	4983      	ldr	r1, [pc, #524]	; (800a23c <_strtod_l+0xbf4>)
 800a02e:	4a85      	ldr	r2, [pc, #532]	; (800a244 <_strtod_l+0xbfc>)
 800a030:	4019      	ands	r1, r3
 800a032:	4291      	cmp	r1, r2
 800a034:	4682      	mov	sl, r0
 800a036:	d960      	bls.n	800a0fa <_strtod_l+0xab2>
 800a038:	ee18 3a90 	vmov	r3, s17
 800a03c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a040:	4293      	cmp	r3, r2
 800a042:	d104      	bne.n	800a04e <_strtod_l+0xa06>
 800a044:	ee18 3a10 	vmov	r3, s16
 800a048:	3301      	adds	r3, #1
 800a04a:	f43f ad45 	beq.w	8009ad8 <_strtod_l+0x490>
 800a04e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a250 <_strtod_l+0xc08>
 800a052:	f04f 3aff 	mov.w	sl, #4294967295
 800a056:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 fc75 	bl	800b948 <_Bfree>
 800a05e:	9905      	ldr	r1, [sp, #20]
 800a060:	4620      	mov	r0, r4
 800a062:	f001 fc71 	bl	800b948 <_Bfree>
 800a066:	4631      	mov	r1, r6
 800a068:	4620      	mov	r0, r4
 800a06a:	f001 fc6d 	bl	800b948 <_Bfree>
 800a06e:	4629      	mov	r1, r5
 800a070:	4620      	mov	r0, r4
 800a072:	f001 fc69 	bl	800b948 <_Bfree>
 800a076:	e61a      	b.n	8009cae <_strtod_l+0x666>
 800a078:	f1ba 0f00 	cmp.w	sl, #0
 800a07c:	d11b      	bne.n	800a0b6 <_strtod_l+0xa6e>
 800a07e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a082:	b9f3      	cbnz	r3, 800a0c2 <_strtod_l+0xa7a>
 800a084:	4b6c      	ldr	r3, [pc, #432]	; (800a238 <_strtod_l+0xbf0>)
 800a086:	2200      	movs	r2, #0
 800a088:	4640      	mov	r0, r8
 800a08a:	4649      	mov	r1, r9
 800a08c:	f7f6 fd56 	bl	8000b3c <__aeabi_dcmplt>
 800a090:	b9d0      	cbnz	r0, 800a0c8 <_strtod_l+0xa80>
 800a092:	4640      	mov	r0, r8
 800a094:	4649      	mov	r1, r9
 800a096:	4b6c      	ldr	r3, [pc, #432]	; (800a248 <_strtod_l+0xc00>)
 800a098:	2200      	movs	r2, #0
 800a09a:	f7f6 fadd 	bl	8000658 <__aeabi_dmul>
 800a09e:	4680      	mov	r8, r0
 800a0a0:	4689      	mov	r9, r1
 800a0a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a0aa:	9315      	str	r3, [sp, #84]	; 0x54
 800a0ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a0b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0b4:	e79d      	b.n	8009ff2 <_strtod_l+0x9aa>
 800a0b6:	f1ba 0f01 	cmp.w	sl, #1
 800a0ba:	d102      	bne.n	800a0c2 <_strtod_l+0xa7a>
 800a0bc:	2f00      	cmp	r7, #0
 800a0be:	f43f ad83 	beq.w	8009bc8 <_strtod_l+0x580>
 800a0c2:	4b62      	ldr	r3, [pc, #392]	; (800a24c <_strtod_l+0xc04>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	e78e      	b.n	8009fe6 <_strtod_l+0x99e>
 800a0c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a248 <_strtod_l+0xc00>
 800a0cc:	f04f 0800 	mov.w	r8, #0
 800a0d0:	e7e7      	b.n	800a0a2 <_strtod_l+0xa5a>
 800a0d2:	4b5d      	ldr	r3, [pc, #372]	; (800a248 <_strtod_l+0xc00>)
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f7f6 fabd 	bl	8000658 <__aeabi_dmul>
 800a0de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e0:	4680      	mov	r8, r0
 800a0e2:	4689      	mov	r9, r1
 800a0e4:	b933      	cbnz	r3, 800a0f4 <_strtod_l+0xaac>
 800a0e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0ea:	900e      	str	r0, [sp, #56]	; 0x38
 800a0ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a0f2:	e7dd      	b.n	800a0b0 <_strtod_l+0xa68>
 800a0f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a0f8:	e7f9      	b.n	800a0ee <_strtod_l+0xaa6>
 800a0fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a0fe:	9b04      	ldr	r3, [sp, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1a8      	bne.n	800a056 <_strtod_l+0xa0e>
 800a104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a10a:	0d1b      	lsrs	r3, r3, #20
 800a10c:	051b      	lsls	r3, r3, #20
 800a10e:	429a      	cmp	r2, r3
 800a110:	d1a1      	bne.n	800a056 <_strtod_l+0xa0e>
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 fdff 	bl	8000d18 <__aeabi_d2lz>
 800a11a:	f7f6 fa6f 	bl	80005fc <__aeabi_l2d>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	4640      	mov	r0, r8
 800a124:	4649      	mov	r1, r9
 800a126:	f7f6 f8df 	bl	80002e8 <__aeabi_dsub>
 800a12a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a12c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a130:	ea43 030a 	orr.w	r3, r3, sl
 800a134:	4313      	orrs	r3, r2
 800a136:	4680      	mov	r8, r0
 800a138:	4689      	mov	r9, r1
 800a13a:	d055      	beq.n	800a1e8 <_strtod_l+0xba0>
 800a13c:	a336      	add	r3, pc, #216	; (adr r3, 800a218 <_strtod_l+0xbd0>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 fcfb 	bl	8000b3c <__aeabi_dcmplt>
 800a146:	2800      	cmp	r0, #0
 800a148:	f47f acd0 	bne.w	8009aec <_strtod_l+0x4a4>
 800a14c:	a334      	add	r3, pc, #208	; (adr r3, 800a220 <_strtod_l+0xbd8>)
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	4640      	mov	r0, r8
 800a154:	4649      	mov	r1, r9
 800a156:	f7f6 fd0f 	bl	8000b78 <__aeabi_dcmpgt>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f43f af7b 	beq.w	800a056 <_strtod_l+0xa0e>
 800a160:	e4c4      	b.n	8009aec <_strtod_l+0x4a4>
 800a162:	9b04      	ldr	r3, [sp, #16]
 800a164:	b333      	cbz	r3, 800a1b4 <_strtod_l+0xb6c>
 800a166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a168:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a16c:	d822      	bhi.n	800a1b4 <_strtod_l+0xb6c>
 800a16e:	a32e      	add	r3, pc, #184	; (adr r3, 800a228 <_strtod_l+0xbe0>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	4640      	mov	r0, r8
 800a176:	4649      	mov	r1, r9
 800a178:	f7f6 fcea 	bl	8000b50 <__aeabi_dcmple>
 800a17c:	b1a0      	cbz	r0, 800a1a8 <_strtod_l+0xb60>
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	f7f6 fd41 	bl	8000c08 <__aeabi_d2uiz>
 800a186:	2801      	cmp	r0, #1
 800a188:	bf38      	it	cc
 800a18a:	2001      	movcc	r0, #1
 800a18c:	f7f6 f9ea 	bl	8000564 <__aeabi_ui2d>
 800a190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a192:	4680      	mov	r8, r0
 800a194:	4689      	mov	r9, r1
 800a196:	bb23      	cbnz	r3, 800a1e2 <_strtod_l+0xb9a>
 800a198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a19c:	9010      	str	r0, [sp, #64]	; 0x40
 800a19e:	9311      	str	r3, [sp, #68]	; 0x44
 800a1a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a1b0:	1a9b      	subs	r3, r3, r2
 800a1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a1bc:	eef0 0a68 	vmov.f32	s1, s17
 800a1c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1c4:	f001 fef2 	bl	800bfac <__ulp>
 800a1c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1cc:	ec53 2b10 	vmov	r2, r3, d0
 800a1d0:	f7f6 fa42 	bl	8000658 <__aeabi_dmul>
 800a1d4:	ec53 2b18 	vmov	r2, r3, d8
 800a1d8:	f7f6 f888 	bl	80002ec <__adddf3>
 800a1dc:	4682      	mov	sl, r0
 800a1de:	468b      	mov	fp, r1
 800a1e0:	e78d      	b.n	800a0fe <_strtod_l+0xab6>
 800a1e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a1e6:	e7db      	b.n	800a1a0 <_strtod_l+0xb58>
 800a1e8:	a311      	add	r3, pc, #68	; (adr r3, 800a230 <_strtod_l+0xbe8>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	f7f6 fca5 	bl	8000b3c <__aeabi_dcmplt>
 800a1f2:	e7b2      	b.n	800a15a <_strtod_l+0xb12>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1fc:	6013      	str	r3, [r2, #0]
 800a1fe:	f7ff ba6b 	b.w	80096d8 <_strtod_l+0x90>
 800a202:	2a65      	cmp	r2, #101	; 0x65
 800a204:	f43f ab5f 	beq.w	80098c6 <_strtod_l+0x27e>
 800a208:	2a45      	cmp	r2, #69	; 0x45
 800a20a:	f43f ab5c 	beq.w	80098c6 <_strtod_l+0x27e>
 800a20e:	2301      	movs	r3, #1
 800a210:	f7ff bb94 	b.w	800993c <_strtod_l+0x2f4>
 800a214:	f3af 8000 	nop.w
 800a218:	94a03595 	.word	0x94a03595
 800a21c:	3fdfffff 	.word	0x3fdfffff
 800a220:	35afe535 	.word	0x35afe535
 800a224:	3fe00000 	.word	0x3fe00000
 800a228:	ffc00000 	.word	0xffc00000
 800a22c:	41dfffff 	.word	0x41dfffff
 800a230:	94a03595 	.word	0x94a03595
 800a234:	3fcfffff 	.word	0x3fcfffff
 800a238:	3ff00000 	.word	0x3ff00000
 800a23c:	7ff00000 	.word	0x7ff00000
 800a240:	7fe00000 	.word	0x7fe00000
 800a244:	7c9fffff 	.word	0x7c9fffff
 800a248:	3fe00000 	.word	0x3fe00000
 800a24c:	bff00000 	.word	0xbff00000
 800a250:	7fefffff 	.word	0x7fefffff

0800a254 <_strtod_r>:
 800a254:	4b01      	ldr	r3, [pc, #4]	; (800a25c <_strtod_r+0x8>)
 800a256:	f7ff b9f7 	b.w	8009648 <_strtod_l>
 800a25a:	bf00      	nop
 800a25c:	20000074 	.word	0x20000074

0800a260 <strtok>:
 800a260:	4b16      	ldr	r3, [pc, #88]	; (800a2bc <strtok+0x5c>)
 800a262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a264:	681e      	ldr	r6, [r3, #0]
 800a266:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a268:	4605      	mov	r5, r0
 800a26a:	b9fc      	cbnz	r4, 800a2ac <strtok+0x4c>
 800a26c:	2050      	movs	r0, #80	; 0x50
 800a26e:	9101      	str	r1, [sp, #4]
 800a270:	f7fe f9de 	bl	8008630 <malloc>
 800a274:	9901      	ldr	r1, [sp, #4]
 800a276:	65b0      	str	r0, [r6, #88]	; 0x58
 800a278:	4602      	mov	r2, r0
 800a27a:	b920      	cbnz	r0, 800a286 <strtok+0x26>
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <strtok+0x60>)
 800a27e:	4811      	ldr	r0, [pc, #68]	; (800a2c4 <strtok+0x64>)
 800a280:	2157      	movs	r1, #87	; 0x57
 800a282:	f000 f8d7 	bl	800a434 <__assert_func>
 800a286:	e9c0 4400 	strd	r4, r4, [r0]
 800a28a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a28e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a292:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a296:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a29a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a29e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a2a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a2a6:	6184      	str	r4, [r0, #24]
 800a2a8:	7704      	strb	r4, [r0, #28]
 800a2aa:	6244      	str	r4, [r0, #36]	; 0x24
 800a2ac:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	b002      	add	sp, #8
 800a2b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2b8:	f000 b806 	b.w	800a2c8 <__strtok_r>
 800a2bc:	2000000c 	.word	0x2000000c
 800a2c0:	0800d4d8 	.word	0x0800d4d8
 800a2c4:	0800d4ef 	.word	0x0800d4ef

0800a2c8 <__strtok_r>:
 800a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ca:	b908      	cbnz	r0, 800a2d0 <__strtok_r+0x8>
 800a2cc:	6810      	ldr	r0, [r2, #0]
 800a2ce:	b188      	cbz	r0, 800a2f4 <__strtok_r+0x2c>
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a2d8:	460f      	mov	r7, r1
 800a2da:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a2de:	b91e      	cbnz	r6, 800a2e8 <__strtok_r+0x20>
 800a2e0:	b965      	cbnz	r5, 800a2fc <__strtok_r+0x34>
 800a2e2:	6015      	str	r5, [r2, #0]
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	e005      	b.n	800a2f4 <__strtok_r+0x2c>
 800a2e8:	42b5      	cmp	r5, r6
 800a2ea:	d1f6      	bne.n	800a2da <__strtok_r+0x12>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1f0      	bne.n	800a2d2 <__strtok_r+0xa>
 800a2f0:	6014      	str	r4, [r2, #0]
 800a2f2:	7003      	strb	r3, [r0, #0]
 800a2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f6:	461c      	mov	r4, r3
 800a2f8:	e00c      	b.n	800a314 <__strtok_r+0x4c>
 800a2fa:	b915      	cbnz	r5, 800a302 <__strtok_r+0x3a>
 800a2fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a300:	460e      	mov	r6, r1
 800a302:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a306:	42ab      	cmp	r3, r5
 800a308:	d1f7      	bne.n	800a2fa <__strtok_r+0x32>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0f3      	beq.n	800a2f6 <__strtok_r+0x2e>
 800a30e:	2300      	movs	r3, #0
 800a310:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a314:	6014      	str	r4, [r2, #0]
 800a316:	e7ed      	b.n	800a2f4 <__strtok_r+0x2c>

0800a318 <_strtol_l.constprop.0>:
 800a318:	2b01      	cmp	r3, #1
 800a31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a31e:	d001      	beq.n	800a324 <_strtol_l.constprop.0+0xc>
 800a320:	2b24      	cmp	r3, #36	; 0x24
 800a322:	d906      	bls.n	800a332 <_strtol_l.constprop.0+0x1a>
 800a324:	f7fe f95a 	bl	80085dc <__errno>
 800a328:	2316      	movs	r3, #22
 800a32a:	6003      	str	r3, [r0, #0]
 800a32c:	2000      	movs	r0, #0
 800a32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a332:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a418 <_strtol_l.constprop.0+0x100>
 800a336:	460d      	mov	r5, r1
 800a338:	462e      	mov	r6, r5
 800a33a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a33e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a342:	f017 0708 	ands.w	r7, r7, #8
 800a346:	d1f7      	bne.n	800a338 <_strtol_l.constprop.0+0x20>
 800a348:	2c2d      	cmp	r4, #45	; 0x2d
 800a34a:	d132      	bne.n	800a3b2 <_strtol_l.constprop.0+0x9a>
 800a34c:	782c      	ldrb	r4, [r5, #0]
 800a34e:	2701      	movs	r7, #1
 800a350:	1cb5      	adds	r5, r6, #2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d05b      	beq.n	800a40e <_strtol_l.constprop.0+0xf6>
 800a356:	2b10      	cmp	r3, #16
 800a358:	d109      	bne.n	800a36e <_strtol_l.constprop.0+0x56>
 800a35a:	2c30      	cmp	r4, #48	; 0x30
 800a35c:	d107      	bne.n	800a36e <_strtol_l.constprop.0+0x56>
 800a35e:	782c      	ldrb	r4, [r5, #0]
 800a360:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a364:	2c58      	cmp	r4, #88	; 0x58
 800a366:	d14d      	bne.n	800a404 <_strtol_l.constprop.0+0xec>
 800a368:	786c      	ldrb	r4, [r5, #1]
 800a36a:	2310      	movs	r3, #16
 800a36c:	3502      	adds	r5, #2
 800a36e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a372:	f108 38ff 	add.w	r8, r8, #4294967295
 800a376:	f04f 0c00 	mov.w	ip, #0
 800a37a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a37e:	4666      	mov	r6, ip
 800a380:	fb03 8a19 	mls	sl, r3, r9, r8
 800a384:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a388:	f1be 0f09 	cmp.w	lr, #9
 800a38c:	d816      	bhi.n	800a3bc <_strtol_l.constprop.0+0xa4>
 800a38e:	4674      	mov	r4, lr
 800a390:	42a3      	cmp	r3, r4
 800a392:	dd24      	ble.n	800a3de <_strtol_l.constprop.0+0xc6>
 800a394:	f1bc 0f00 	cmp.w	ip, #0
 800a398:	db1e      	blt.n	800a3d8 <_strtol_l.constprop.0+0xc0>
 800a39a:	45b1      	cmp	r9, r6
 800a39c:	d31c      	bcc.n	800a3d8 <_strtol_l.constprop.0+0xc0>
 800a39e:	d101      	bne.n	800a3a4 <_strtol_l.constprop.0+0x8c>
 800a3a0:	45a2      	cmp	sl, r4
 800a3a2:	db19      	blt.n	800a3d8 <_strtol_l.constprop.0+0xc0>
 800a3a4:	fb06 4603 	mla	r6, r6, r3, r4
 800a3a8:	f04f 0c01 	mov.w	ip, #1
 800a3ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3b0:	e7e8      	b.n	800a384 <_strtol_l.constprop.0+0x6c>
 800a3b2:	2c2b      	cmp	r4, #43	; 0x2b
 800a3b4:	bf04      	itt	eq
 800a3b6:	782c      	ldrbeq	r4, [r5, #0]
 800a3b8:	1cb5      	addeq	r5, r6, #2
 800a3ba:	e7ca      	b.n	800a352 <_strtol_l.constprop.0+0x3a>
 800a3bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a3c0:	f1be 0f19 	cmp.w	lr, #25
 800a3c4:	d801      	bhi.n	800a3ca <_strtol_l.constprop.0+0xb2>
 800a3c6:	3c37      	subs	r4, #55	; 0x37
 800a3c8:	e7e2      	b.n	800a390 <_strtol_l.constprop.0+0x78>
 800a3ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a3ce:	f1be 0f19 	cmp.w	lr, #25
 800a3d2:	d804      	bhi.n	800a3de <_strtol_l.constprop.0+0xc6>
 800a3d4:	3c57      	subs	r4, #87	; 0x57
 800a3d6:	e7db      	b.n	800a390 <_strtol_l.constprop.0+0x78>
 800a3d8:	f04f 3cff 	mov.w	ip, #4294967295
 800a3dc:	e7e6      	b.n	800a3ac <_strtol_l.constprop.0+0x94>
 800a3de:	f1bc 0f00 	cmp.w	ip, #0
 800a3e2:	da05      	bge.n	800a3f0 <_strtol_l.constprop.0+0xd8>
 800a3e4:	2322      	movs	r3, #34	; 0x22
 800a3e6:	6003      	str	r3, [r0, #0]
 800a3e8:	4646      	mov	r6, r8
 800a3ea:	b942      	cbnz	r2, 800a3fe <_strtol_l.constprop.0+0xe6>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	e79e      	b.n	800a32e <_strtol_l.constprop.0+0x16>
 800a3f0:	b107      	cbz	r7, 800a3f4 <_strtol_l.constprop.0+0xdc>
 800a3f2:	4276      	negs	r6, r6
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	d0f9      	beq.n	800a3ec <_strtol_l.constprop.0+0xd4>
 800a3f8:	f1bc 0f00 	cmp.w	ip, #0
 800a3fc:	d000      	beq.n	800a400 <_strtol_l.constprop.0+0xe8>
 800a3fe:	1e69      	subs	r1, r5, #1
 800a400:	6011      	str	r1, [r2, #0]
 800a402:	e7f3      	b.n	800a3ec <_strtol_l.constprop.0+0xd4>
 800a404:	2430      	movs	r4, #48	; 0x30
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1b1      	bne.n	800a36e <_strtol_l.constprop.0+0x56>
 800a40a:	2308      	movs	r3, #8
 800a40c:	e7af      	b.n	800a36e <_strtol_l.constprop.0+0x56>
 800a40e:	2c30      	cmp	r4, #48	; 0x30
 800a410:	d0a5      	beq.n	800a35e <_strtol_l.constprop.0+0x46>
 800a412:	230a      	movs	r3, #10
 800a414:	e7ab      	b.n	800a36e <_strtol_l.constprop.0+0x56>
 800a416:	bf00      	nop
 800a418:	0800d345 	.word	0x0800d345

0800a41c <_strtol_r>:
 800a41c:	f7ff bf7c 	b.w	800a318 <_strtol_l.constprop.0>

0800a420 <strtol>:
 800a420:	4613      	mov	r3, r2
 800a422:	460a      	mov	r2, r1
 800a424:	4601      	mov	r1, r0
 800a426:	4802      	ldr	r0, [pc, #8]	; (800a430 <strtol+0x10>)
 800a428:	6800      	ldr	r0, [r0, #0]
 800a42a:	f7ff bf75 	b.w	800a318 <_strtol_l.constprop.0>
 800a42e:	bf00      	nop
 800a430:	2000000c 	.word	0x2000000c

0800a434 <__assert_func>:
 800a434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a436:	4614      	mov	r4, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <__assert_func+0x2c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4605      	mov	r5, r0
 800a440:	68d8      	ldr	r0, [r3, #12]
 800a442:	b14c      	cbz	r4, 800a458 <__assert_func+0x24>
 800a444:	4b07      	ldr	r3, [pc, #28]	; (800a464 <__assert_func+0x30>)
 800a446:	9100      	str	r1, [sp, #0]
 800a448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a44c:	4906      	ldr	r1, [pc, #24]	; (800a468 <__assert_func+0x34>)
 800a44e:	462b      	mov	r3, r5
 800a450:	f000 fe88 	bl	800b164 <fiprintf>
 800a454:	f002 faae 	bl	800c9b4 <abort>
 800a458:	4b04      	ldr	r3, [pc, #16]	; (800a46c <__assert_func+0x38>)
 800a45a:	461c      	mov	r4, r3
 800a45c:	e7f3      	b.n	800a446 <__assert_func+0x12>
 800a45e:	bf00      	nop
 800a460:	2000000c 	.word	0x2000000c
 800a464:	0800d54c 	.word	0x0800d54c
 800a468:	0800d559 	.word	0x0800d559
 800a46c:	0800d587 	.word	0x0800d587

0800a470 <quorem>:
 800a470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	6903      	ldr	r3, [r0, #16]
 800a476:	690c      	ldr	r4, [r1, #16]
 800a478:	42a3      	cmp	r3, r4
 800a47a:	4607      	mov	r7, r0
 800a47c:	f2c0 8081 	blt.w	800a582 <quorem+0x112>
 800a480:	3c01      	subs	r4, #1
 800a482:	f101 0814 	add.w	r8, r1, #20
 800a486:	f100 0514 	add.w	r5, r0, #20
 800a48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a498:	3301      	adds	r3, #1
 800a49a:	429a      	cmp	r2, r3
 800a49c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4a8:	d331      	bcc.n	800a50e <quorem+0x9e>
 800a4aa:	f04f 0e00 	mov.w	lr, #0
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	46ac      	mov	ip, r5
 800a4b2:	46f2      	mov	sl, lr
 800a4b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4b8:	b293      	uxth	r3, r2
 800a4ba:	fb06 e303 	mla	r3, r6, r3, lr
 800a4be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a4c8:	f8dc a000 	ldr.w	sl, [ip]
 800a4cc:	0c12      	lsrs	r2, r2, #16
 800a4ce:	fa13 f38a 	uxtah	r3, r3, sl
 800a4d2:	fb06 e202 	mla	r2, r6, r2, lr
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	9b00      	ldr	r3, [sp, #0]
 800a4da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4de:	b292      	uxth	r2, r2
 800a4e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4ec:	4581      	cmp	r9, r0
 800a4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4f2:	f84c 3b04 	str.w	r3, [ip], #4
 800a4f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4fa:	d2db      	bcs.n	800a4b4 <quorem+0x44>
 800a4fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a500:	b92b      	cbnz	r3, 800a50e <quorem+0x9e>
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	3b04      	subs	r3, #4
 800a506:	429d      	cmp	r5, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	d32e      	bcc.n	800a56a <quorem+0xfa>
 800a50c:	613c      	str	r4, [r7, #16]
 800a50e:	4638      	mov	r0, r7
 800a510:	f001 fca6 	bl	800be60 <__mcmp>
 800a514:	2800      	cmp	r0, #0
 800a516:	db24      	blt.n	800a562 <quorem+0xf2>
 800a518:	3601      	adds	r6, #1
 800a51a:	4628      	mov	r0, r5
 800a51c:	f04f 0c00 	mov.w	ip, #0
 800a520:	f858 2b04 	ldr.w	r2, [r8], #4
 800a524:	f8d0 e000 	ldr.w	lr, [r0]
 800a528:	b293      	uxth	r3, r2
 800a52a:	ebac 0303 	sub.w	r3, ip, r3
 800a52e:	0c12      	lsrs	r2, r2, #16
 800a530:	fa13 f38e 	uxtah	r3, r3, lr
 800a534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a542:	45c1      	cmp	r9, r8
 800a544:	f840 3b04 	str.w	r3, [r0], #4
 800a548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a54c:	d2e8      	bcs.n	800a520 <quorem+0xb0>
 800a54e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a556:	b922      	cbnz	r2, 800a562 <quorem+0xf2>
 800a558:	3b04      	subs	r3, #4
 800a55a:	429d      	cmp	r5, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	d30a      	bcc.n	800a576 <quorem+0x106>
 800a560:	613c      	str	r4, [r7, #16]
 800a562:	4630      	mov	r0, r6
 800a564:	b003      	add	sp, #12
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	6812      	ldr	r2, [r2, #0]
 800a56c:	3b04      	subs	r3, #4
 800a56e:	2a00      	cmp	r2, #0
 800a570:	d1cc      	bne.n	800a50c <quorem+0x9c>
 800a572:	3c01      	subs	r4, #1
 800a574:	e7c7      	b.n	800a506 <quorem+0x96>
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	3b04      	subs	r3, #4
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	d1f0      	bne.n	800a560 <quorem+0xf0>
 800a57e:	3c01      	subs	r4, #1
 800a580:	e7eb      	b.n	800a55a <quorem+0xea>
 800a582:	2000      	movs	r0, #0
 800a584:	e7ee      	b.n	800a564 <quorem+0xf4>
	...

0800a588 <_dtoa_r>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	ed2d 8b04 	vpush	{d8-d9}
 800a590:	ec57 6b10 	vmov	r6, r7, d0
 800a594:	b093      	sub	sp, #76	; 0x4c
 800a596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a59c:	9106      	str	r1, [sp, #24]
 800a59e:	ee10 aa10 	vmov	sl, s0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5a8:	46bb      	mov	fp, r7
 800a5aa:	b975      	cbnz	r5, 800a5ca <_dtoa_r+0x42>
 800a5ac:	2010      	movs	r0, #16
 800a5ae:	f7fe f83f 	bl	8008630 <malloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5b6:	b920      	cbnz	r0, 800a5c2 <_dtoa_r+0x3a>
 800a5b8:	4ba7      	ldr	r3, [pc, #668]	; (800a858 <_dtoa_r+0x2d0>)
 800a5ba:	21ea      	movs	r1, #234	; 0xea
 800a5bc:	48a7      	ldr	r0, [pc, #668]	; (800a85c <_dtoa_r+0x2d4>)
 800a5be:	f7ff ff39 	bl	800a434 <__assert_func>
 800a5c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5c6:	6005      	str	r5, [r0, #0]
 800a5c8:	60c5      	str	r5, [r0, #12]
 800a5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5cc:	6819      	ldr	r1, [r3, #0]
 800a5ce:	b151      	cbz	r1, 800a5e6 <_dtoa_r+0x5e>
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	604a      	str	r2, [r1, #4]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	4093      	lsls	r3, r2
 800a5d8:	608b      	str	r3, [r1, #8]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f001 f9b4 	bl	800b948 <_Bfree>
 800a5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	1e3b      	subs	r3, r7, #0
 800a5e8:	bfaa      	itet	ge
 800a5ea:	2300      	movge	r3, #0
 800a5ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a5f0:	f8c8 3000 	strge.w	r3, [r8]
 800a5f4:	4b9a      	ldr	r3, [pc, #616]	; (800a860 <_dtoa_r+0x2d8>)
 800a5f6:	bfbc      	itt	lt
 800a5f8:	2201      	movlt	r2, #1
 800a5fa:	f8c8 2000 	strlt.w	r2, [r8]
 800a5fe:	ea33 030b 	bics.w	r3, r3, fp
 800a602:	d11b      	bne.n	800a63c <_dtoa_r+0xb4>
 800a604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a606:	f242 730f 	movw	r3, #9999	; 0x270f
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a610:	4333      	orrs	r3, r6
 800a612:	f000 8592 	beq.w	800b13a <_dtoa_r+0xbb2>
 800a616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a618:	b963      	cbnz	r3, 800a634 <_dtoa_r+0xac>
 800a61a:	4b92      	ldr	r3, [pc, #584]	; (800a864 <_dtoa_r+0x2dc>)
 800a61c:	e022      	b.n	800a664 <_dtoa_r+0xdc>
 800a61e:	4b92      	ldr	r3, [pc, #584]	; (800a868 <_dtoa_r+0x2e0>)
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	3308      	adds	r3, #8
 800a624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	9801      	ldr	r0, [sp, #4]
 800a62a:	b013      	add	sp, #76	; 0x4c
 800a62c:	ecbd 8b04 	vpop	{d8-d9}
 800a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	4b8b      	ldr	r3, [pc, #556]	; (800a864 <_dtoa_r+0x2dc>)
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	3303      	adds	r3, #3
 800a63a:	e7f3      	b.n	800a624 <_dtoa_r+0x9c>
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	4650      	mov	r0, sl
 800a642:	4659      	mov	r1, fp
 800a644:	f7f6 fa70 	bl	8000b28 <__aeabi_dcmpeq>
 800a648:	ec4b ab19 	vmov	d9, sl, fp
 800a64c:	4680      	mov	r8, r0
 800a64e:	b158      	cbz	r0, 800a668 <_dtoa_r+0xe0>
 800a650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a652:	2301      	movs	r3, #1
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 856b 	beq.w	800b134 <_dtoa_r+0xbac>
 800a65e:	4883      	ldr	r0, [pc, #524]	; (800a86c <_dtoa_r+0x2e4>)
 800a660:	6018      	str	r0, [r3, #0]
 800a662:	1e43      	subs	r3, r0, #1
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	e7df      	b.n	800a628 <_dtoa_r+0xa0>
 800a668:	ec4b ab10 	vmov	d0, sl, fp
 800a66c:	aa10      	add	r2, sp, #64	; 0x40
 800a66e:	a911      	add	r1, sp, #68	; 0x44
 800a670:	4620      	mov	r0, r4
 800a672:	f001 fd17 	bl	800c0a4 <__d2b>
 800a676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a67a:	ee08 0a10 	vmov	s16, r0
 800a67e:	2d00      	cmp	r5, #0
 800a680:	f000 8084 	beq.w	800a78c <_dtoa_r+0x204>
 800a684:	ee19 3a90 	vmov	r3, s19
 800a688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a68c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a690:	4656      	mov	r6, sl
 800a692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a69a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a69e:	4b74      	ldr	r3, [pc, #464]	; (800a870 <_dtoa_r+0x2e8>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f5 fe1f 	bl	80002e8 <__aeabi_dsub>
 800a6aa:	a365      	add	r3, pc, #404	; (adr r3, 800a840 <_dtoa_r+0x2b8>)
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	f7f5 ffd2 	bl	8000658 <__aeabi_dmul>
 800a6b4:	a364      	add	r3, pc, #400	; (adr r3, 800a848 <_dtoa_r+0x2c0>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	f7f5 fe17 	bl	80002ec <__adddf3>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	f7f5 ff5e 	bl	8000584 <__aeabi_i2d>
 800a6c8:	a361      	add	r3, pc, #388	; (adr r3, 800a850 <_dtoa_r+0x2c8>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 ffc3 	bl	8000658 <__aeabi_dmul>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	4639      	mov	r1, r7
 800a6da:	f7f5 fe07 	bl	80002ec <__adddf3>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	f7f6 fa69 	bl	8000bb8 <__aeabi_d2iz>
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	9000      	str	r0, [sp, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	f7f6 fa24 	bl	8000b3c <__aeabi_dcmplt>
 800a6f4:	b150      	cbz	r0, 800a70c <_dtoa_r+0x184>
 800a6f6:	9800      	ldr	r0, [sp, #0]
 800a6f8:	f7f5 ff44 	bl	8000584 <__aeabi_i2d>
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	463b      	mov	r3, r7
 800a700:	f7f6 fa12 	bl	8000b28 <__aeabi_dcmpeq>
 800a704:	b910      	cbnz	r0, 800a70c <_dtoa_r+0x184>
 800a706:	9b00      	ldr	r3, [sp, #0]
 800a708:	3b01      	subs	r3, #1
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	2b16      	cmp	r3, #22
 800a710:	d85a      	bhi.n	800a7c8 <_dtoa_r+0x240>
 800a712:	9a00      	ldr	r2, [sp, #0]
 800a714:	4b57      	ldr	r3, [pc, #348]	; (800a874 <_dtoa_r+0x2ec>)
 800a716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	ec51 0b19 	vmov	r0, r1, d9
 800a722:	f7f6 fa0b 	bl	8000b3c <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d050      	beq.n	800a7cc <_dtoa_r+0x244>
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	2300      	movs	r3, #0
 800a732:	930b      	str	r3, [sp, #44]	; 0x2c
 800a734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a736:	1b5d      	subs	r5, r3, r5
 800a738:	1e6b      	subs	r3, r5, #1
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	bf45      	ittet	mi
 800a73e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a742:	9304      	strmi	r3, [sp, #16]
 800a744:	2300      	movpl	r3, #0
 800a746:	2300      	movmi	r3, #0
 800a748:	bf4c      	ite	mi
 800a74a:	9305      	strmi	r3, [sp, #20]
 800a74c:	9304      	strpl	r3, [sp, #16]
 800a74e:	9b00      	ldr	r3, [sp, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	db3d      	blt.n	800a7d0 <_dtoa_r+0x248>
 800a754:	9b05      	ldr	r3, [sp, #20]
 800a756:	9a00      	ldr	r2, [sp, #0]
 800a758:	920a      	str	r2, [sp, #40]	; 0x28
 800a75a:	4413      	add	r3, r2
 800a75c:	9305      	str	r3, [sp, #20]
 800a75e:	2300      	movs	r3, #0
 800a760:	9307      	str	r3, [sp, #28]
 800a762:	9b06      	ldr	r3, [sp, #24]
 800a764:	2b09      	cmp	r3, #9
 800a766:	f200 8089 	bhi.w	800a87c <_dtoa_r+0x2f4>
 800a76a:	2b05      	cmp	r3, #5
 800a76c:	bfc4      	itt	gt
 800a76e:	3b04      	subgt	r3, #4
 800a770:	9306      	strgt	r3, [sp, #24]
 800a772:	9b06      	ldr	r3, [sp, #24]
 800a774:	f1a3 0302 	sub.w	r3, r3, #2
 800a778:	bfcc      	ite	gt
 800a77a:	2500      	movgt	r5, #0
 800a77c:	2501      	movle	r5, #1
 800a77e:	2b03      	cmp	r3, #3
 800a780:	f200 8087 	bhi.w	800a892 <_dtoa_r+0x30a>
 800a784:	e8df f003 	tbb	[pc, r3]
 800a788:	59383a2d 	.word	0x59383a2d
 800a78c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a790:	441d      	add	r5, r3
 800a792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a796:	2b20      	cmp	r3, #32
 800a798:	bfc1      	itttt	gt
 800a79a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a79e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7aa:	bfda      	itte	le
 800a7ac:	f1c3 0320 	rsble	r3, r3, #32
 800a7b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7b4:	4318      	orrgt	r0, r3
 800a7b6:	f7f5 fed5 	bl	8000564 <__aeabi_ui2d>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4606      	mov	r6, r0
 800a7be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7c2:	3d01      	subs	r5, #1
 800a7c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7c6:	e76a      	b.n	800a69e <_dtoa_r+0x116>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e7b2      	b.n	800a732 <_dtoa_r+0x1aa>
 800a7cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ce:	e7b1      	b.n	800a734 <_dtoa_r+0x1ac>
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	9a00      	ldr	r2, [sp, #0]
 800a7d4:	1a9b      	subs	r3, r3, r2
 800a7d6:	9304      	str	r3, [sp, #16]
 800a7d8:	4253      	negs	r3, r2
 800a7da:	9307      	str	r3, [sp, #28]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e0:	e7bf      	b.n	800a762 <_dtoa_r+0x1da>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9308      	str	r3, [sp, #32]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dc55      	bgt.n	800a898 <_dtoa_r+0x310>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f6:	e00c      	b.n	800a812 <_dtoa_r+0x28a>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e7f3      	b.n	800a7e4 <_dtoa_r+0x25c>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a800:	9308      	str	r3, [sp, #32]
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	4413      	add	r3, r2
 800a806:	9302      	str	r3, [sp, #8]
 800a808:	3301      	adds	r3, #1
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	bfb8      	it	lt
 800a810:	2301      	movlt	r3, #1
 800a812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a814:	2200      	movs	r2, #0
 800a816:	6042      	str	r2, [r0, #4]
 800a818:	2204      	movs	r2, #4
 800a81a:	f102 0614 	add.w	r6, r2, #20
 800a81e:	429e      	cmp	r6, r3
 800a820:	6841      	ldr	r1, [r0, #4]
 800a822:	d93d      	bls.n	800a8a0 <_dtoa_r+0x318>
 800a824:	4620      	mov	r0, r4
 800a826:	f001 f84f 	bl	800b8c8 <_Balloc>
 800a82a:	9001      	str	r0, [sp, #4]
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d13b      	bne.n	800a8a8 <_dtoa_r+0x320>
 800a830:	4b11      	ldr	r3, [pc, #68]	; (800a878 <_dtoa_r+0x2f0>)
 800a832:	4602      	mov	r2, r0
 800a834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a838:	e6c0      	b.n	800a5bc <_dtoa_r+0x34>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e7df      	b.n	800a7fe <_dtoa_r+0x276>
 800a83e:	bf00      	nop
 800a840:	636f4361 	.word	0x636f4361
 800a844:	3fd287a7 	.word	0x3fd287a7
 800a848:	8b60c8b3 	.word	0x8b60c8b3
 800a84c:	3fc68a28 	.word	0x3fc68a28
 800a850:	509f79fb 	.word	0x509f79fb
 800a854:	3fd34413 	.word	0x3fd34413
 800a858:	0800d4d8 	.word	0x0800d4d8
 800a85c:	0800d595 	.word	0x0800d595
 800a860:	7ff00000 	.word	0x7ff00000
 800a864:	0800d591 	.word	0x0800d591
 800a868:	0800d588 	.word	0x0800d588
 800a86c:	0800d45d 	.word	0x0800d45d
 800a870:	3ff80000 	.word	0x3ff80000
 800a874:	0800d700 	.word	0x0800d700
 800a878:	0800d5f0 	.word	0x0800d5f0
 800a87c:	2501      	movs	r5, #1
 800a87e:	2300      	movs	r3, #0
 800a880:	9306      	str	r3, [sp, #24]
 800a882:	9508      	str	r5, [sp, #32]
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
 800a888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a88c:	2200      	movs	r2, #0
 800a88e:	2312      	movs	r3, #18
 800a890:	e7b0      	b.n	800a7f4 <_dtoa_r+0x26c>
 800a892:	2301      	movs	r3, #1
 800a894:	9308      	str	r3, [sp, #32]
 800a896:	e7f5      	b.n	800a884 <_dtoa_r+0x2fc>
 800a898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a89e:	e7b8      	b.n	800a812 <_dtoa_r+0x28a>
 800a8a0:	3101      	adds	r1, #1
 800a8a2:	6041      	str	r1, [r0, #4]
 800a8a4:	0052      	lsls	r2, r2, #1
 800a8a6:	e7b8      	b.n	800a81a <_dtoa_r+0x292>
 800a8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8aa:	9a01      	ldr	r2, [sp, #4]
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	2b0e      	cmp	r3, #14
 800a8b2:	f200 809d 	bhi.w	800a9f0 <_dtoa_r+0x468>
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	f000 809a 	beq.w	800a9f0 <_dtoa_r+0x468>
 800a8bc:	9b00      	ldr	r3, [sp, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dd32      	ble.n	800a928 <_dtoa_r+0x3a0>
 800a8c2:	4ab7      	ldr	r2, [pc, #732]	; (800aba0 <_dtoa_r+0x618>)
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8d0:	9b00      	ldr	r3, [sp, #0]
 800a8d2:	05d8      	lsls	r0, r3, #23
 800a8d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8d8:	d516      	bpl.n	800a908 <_dtoa_r+0x380>
 800a8da:	4bb2      	ldr	r3, [pc, #712]	; (800aba4 <_dtoa_r+0x61c>)
 800a8dc:	ec51 0b19 	vmov	r0, r1, d9
 800a8e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8e4:	f7f5 ffe2 	bl	80008ac <__aeabi_ddiv>
 800a8e8:	f007 070f 	and.w	r7, r7, #15
 800a8ec:	4682      	mov	sl, r0
 800a8ee:	468b      	mov	fp, r1
 800a8f0:	2503      	movs	r5, #3
 800a8f2:	4eac      	ldr	r6, [pc, #688]	; (800aba4 <_dtoa_r+0x61c>)
 800a8f4:	b957      	cbnz	r7, 800a90c <_dtoa_r+0x384>
 800a8f6:	4642      	mov	r2, r8
 800a8f8:	464b      	mov	r3, r9
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	4659      	mov	r1, fp
 800a8fe:	f7f5 ffd5 	bl	80008ac <__aeabi_ddiv>
 800a902:	4682      	mov	sl, r0
 800a904:	468b      	mov	fp, r1
 800a906:	e028      	b.n	800a95a <_dtoa_r+0x3d2>
 800a908:	2502      	movs	r5, #2
 800a90a:	e7f2      	b.n	800a8f2 <_dtoa_r+0x36a>
 800a90c:	07f9      	lsls	r1, r7, #31
 800a90e:	d508      	bpl.n	800a922 <_dtoa_r+0x39a>
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a918:	f7f5 fe9e 	bl	8000658 <__aeabi_dmul>
 800a91c:	3501      	adds	r5, #1
 800a91e:	4680      	mov	r8, r0
 800a920:	4689      	mov	r9, r1
 800a922:	107f      	asrs	r7, r7, #1
 800a924:	3608      	adds	r6, #8
 800a926:	e7e5      	b.n	800a8f4 <_dtoa_r+0x36c>
 800a928:	f000 809b 	beq.w	800aa62 <_dtoa_r+0x4da>
 800a92c:	9b00      	ldr	r3, [sp, #0]
 800a92e:	4f9d      	ldr	r7, [pc, #628]	; (800aba4 <_dtoa_r+0x61c>)
 800a930:	425e      	negs	r6, r3
 800a932:	4b9b      	ldr	r3, [pc, #620]	; (800aba0 <_dtoa_r+0x618>)
 800a934:	f006 020f 	and.w	r2, r6, #15
 800a938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	ec51 0b19 	vmov	r0, r1, d9
 800a944:	f7f5 fe88 	bl	8000658 <__aeabi_dmul>
 800a948:	1136      	asrs	r6, r6, #4
 800a94a:	4682      	mov	sl, r0
 800a94c:	468b      	mov	fp, r1
 800a94e:	2300      	movs	r3, #0
 800a950:	2502      	movs	r5, #2
 800a952:	2e00      	cmp	r6, #0
 800a954:	d17a      	bne.n	800aa4c <_dtoa_r+0x4c4>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1d3      	bne.n	800a902 <_dtoa_r+0x37a>
 800a95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 8082 	beq.w	800aa66 <_dtoa_r+0x4de>
 800a962:	4b91      	ldr	r3, [pc, #580]	; (800aba8 <_dtoa_r+0x620>)
 800a964:	2200      	movs	r2, #0
 800a966:	4650      	mov	r0, sl
 800a968:	4659      	mov	r1, fp
 800a96a:	f7f6 f8e7 	bl	8000b3c <__aeabi_dcmplt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d079      	beq.n	800aa66 <_dtoa_r+0x4de>
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d076      	beq.n	800aa66 <_dtoa_r+0x4de>
 800a978:	9b02      	ldr	r3, [sp, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dd36      	ble.n	800a9ec <_dtoa_r+0x464>
 800a97e:	9b00      	ldr	r3, [sp, #0]
 800a980:	4650      	mov	r0, sl
 800a982:	4659      	mov	r1, fp
 800a984:	1e5f      	subs	r7, r3, #1
 800a986:	2200      	movs	r2, #0
 800a988:	4b88      	ldr	r3, [pc, #544]	; (800abac <_dtoa_r+0x624>)
 800a98a:	f7f5 fe65 	bl	8000658 <__aeabi_dmul>
 800a98e:	9e02      	ldr	r6, [sp, #8]
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	3501      	adds	r5, #1
 800a996:	4628      	mov	r0, r5
 800a998:	f7f5 fdf4 	bl	8000584 <__aeabi_i2d>
 800a99c:	4652      	mov	r2, sl
 800a99e:	465b      	mov	r3, fp
 800a9a0:	f7f5 fe5a 	bl	8000658 <__aeabi_dmul>
 800a9a4:	4b82      	ldr	r3, [pc, #520]	; (800abb0 <_dtoa_r+0x628>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f7f5 fca0 	bl	80002ec <__adddf3>
 800a9ac:	46d0      	mov	r8, sl
 800a9ae:	46d9      	mov	r9, fp
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9b6:	2e00      	cmp	r6, #0
 800a9b8:	d158      	bne.n	800aa6c <_dtoa_r+0x4e4>
 800a9ba:	4b7e      	ldr	r3, [pc, #504]	; (800abb4 <_dtoa_r+0x62c>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 fc91 	bl	80002e8 <__aeabi_dsub>
 800a9c6:	4652      	mov	r2, sl
 800a9c8:	465b      	mov	r3, fp
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	4689      	mov	r9, r1
 800a9ce:	f7f6 f8d3 	bl	8000b78 <__aeabi_dcmpgt>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f040 8295 	bne.w	800af02 <_dtoa_r+0x97a>
 800a9d8:	4652      	mov	r2, sl
 800a9da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f6 f8ab 	bl	8000b3c <__aeabi_dcmplt>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f040 8289 	bne.w	800aefe <_dtoa_r+0x976>
 800a9ec:	ec5b ab19 	vmov	sl, fp, d9
 800a9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f2c0 8148 	blt.w	800ac88 <_dtoa_r+0x700>
 800a9f8:	9a00      	ldr	r2, [sp, #0]
 800a9fa:	2a0e      	cmp	r2, #14
 800a9fc:	f300 8144 	bgt.w	800ac88 <_dtoa_r+0x700>
 800aa00:	4b67      	ldr	r3, [pc, #412]	; (800aba0 <_dtoa_r+0x618>)
 800aa02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f280 80d5 	bge.w	800abbc <_dtoa_r+0x634>
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f300 80d1 	bgt.w	800abbc <_dtoa_r+0x634>
 800aa1a:	f040 826f 	bne.w	800aefc <_dtoa_r+0x974>
 800aa1e:	4b65      	ldr	r3, [pc, #404]	; (800abb4 <_dtoa_r+0x62c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	4640      	mov	r0, r8
 800aa24:	4649      	mov	r1, r9
 800aa26:	f7f5 fe17 	bl	8000658 <__aeabi_dmul>
 800aa2a:	4652      	mov	r2, sl
 800aa2c:	465b      	mov	r3, fp
 800aa2e:	f7f6 f899 	bl	8000b64 <__aeabi_dcmpge>
 800aa32:	9e03      	ldr	r6, [sp, #12]
 800aa34:	4637      	mov	r7, r6
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f040 8245 	bne.w	800aec6 <_dtoa_r+0x93e>
 800aa3c:	9d01      	ldr	r5, [sp, #4]
 800aa3e:	2331      	movs	r3, #49	; 0x31
 800aa40:	f805 3b01 	strb.w	r3, [r5], #1
 800aa44:	9b00      	ldr	r3, [sp, #0]
 800aa46:	3301      	adds	r3, #1
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	e240      	b.n	800aece <_dtoa_r+0x946>
 800aa4c:	07f2      	lsls	r2, r6, #31
 800aa4e:	d505      	bpl.n	800aa5c <_dtoa_r+0x4d4>
 800aa50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa54:	f7f5 fe00 	bl	8000658 <__aeabi_dmul>
 800aa58:	3501      	adds	r5, #1
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	1076      	asrs	r6, r6, #1
 800aa5e:	3708      	adds	r7, #8
 800aa60:	e777      	b.n	800a952 <_dtoa_r+0x3ca>
 800aa62:	2502      	movs	r5, #2
 800aa64:	e779      	b.n	800a95a <_dtoa_r+0x3d2>
 800aa66:	9f00      	ldr	r7, [sp, #0]
 800aa68:	9e03      	ldr	r6, [sp, #12]
 800aa6a:	e794      	b.n	800a996 <_dtoa_r+0x40e>
 800aa6c:	9901      	ldr	r1, [sp, #4]
 800aa6e:	4b4c      	ldr	r3, [pc, #304]	; (800aba0 <_dtoa_r+0x618>)
 800aa70:	4431      	add	r1, r6
 800aa72:	910d      	str	r1, [sp, #52]	; 0x34
 800aa74:	9908      	ldr	r1, [sp, #32]
 800aa76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	d043      	beq.n	800ab0a <_dtoa_r+0x582>
 800aa82:	494d      	ldr	r1, [pc, #308]	; (800abb8 <_dtoa_r+0x630>)
 800aa84:	2000      	movs	r0, #0
 800aa86:	f7f5 ff11 	bl	80008ac <__aeabi_ddiv>
 800aa8a:	4652      	mov	r2, sl
 800aa8c:	465b      	mov	r3, fp
 800aa8e:	f7f5 fc2b 	bl	80002e8 <__aeabi_dsub>
 800aa92:	9d01      	ldr	r5, [sp, #4]
 800aa94:	4682      	mov	sl, r0
 800aa96:	468b      	mov	fp, r1
 800aa98:	4649      	mov	r1, r9
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	f7f6 f88c 	bl	8000bb8 <__aeabi_d2iz>
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	f7f5 fd6f 	bl	8000584 <__aeabi_i2d>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f5 fc1b 	bl	80002e8 <__aeabi_dsub>
 800aab2:	3630      	adds	r6, #48	; 0x30
 800aab4:	f805 6b01 	strb.w	r6, [r5], #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	465b      	mov	r3, fp
 800aabc:	4680      	mov	r8, r0
 800aabe:	4689      	mov	r9, r1
 800aac0:	f7f6 f83c 	bl	8000b3c <__aeabi_dcmplt>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d163      	bne.n	800ab90 <_dtoa_r+0x608>
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	4936      	ldr	r1, [pc, #216]	; (800aba8 <_dtoa_r+0x620>)
 800aace:	2000      	movs	r0, #0
 800aad0:	f7f5 fc0a 	bl	80002e8 <__aeabi_dsub>
 800aad4:	4652      	mov	r2, sl
 800aad6:	465b      	mov	r3, fp
 800aad8:	f7f6 f830 	bl	8000b3c <__aeabi_dcmplt>
 800aadc:	2800      	cmp	r0, #0
 800aade:	f040 80b5 	bne.w	800ac4c <_dtoa_r+0x6c4>
 800aae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae4:	429d      	cmp	r5, r3
 800aae6:	d081      	beq.n	800a9ec <_dtoa_r+0x464>
 800aae8:	4b30      	ldr	r3, [pc, #192]	; (800abac <_dtoa_r+0x624>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	4650      	mov	r0, sl
 800aaee:	4659      	mov	r1, fp
 800aaf0:	f7f5 fdb2 	bl	8000658 <__aeabi_dmul>
 800aaf4:	4b2d      	ldr	r3, [pc, #180]	; (800abac <_dtoa_r+0x624>)
 800aaf6:	4682      	mov	sl, r0
 800aaf8:	468b      	mov	fp, r1
 800aafa:	4640      	mov	r0, r8
 800aafc:	4649      	mov	r1, r9
 800aafe:	2200      	movs	r2, #0
 800ab00:	f7f5 fdaa 	bl	8000658 <__aeabi_dmul>
 800ab04:	4680      	mov	r8, r0
 800ab06:	4689      	mov	r9, r1
 800ab08:	e7c6      	b.n	800aa98 <_dtoa_r+0x510>
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	f7f5 fda3 	bl	8000658 <__aeabi_dmul>
 800ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab14:	9d01      	ldr	r5, [sp, #4]
 800ab16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab18:	4682      	mov	sl, r0
 800ab1a:	468b      	mov	fp, r1
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4640      	mov	r0, r8
 800ab20:	f7f6 f84a 	bl	8000bb8 <__aeabi_d2iz>
 800ab24:	4606      	mov	r6, r0
 800ab26:	f7f5 fd2d 	bl	8000584 <__aeabi_i2d>
 800ab2a:	3630      	adds	r6, #48	; 0x30
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4640      	mov	r0, r8
 800ab32:	4649      	mov	r1, r9
 800ab34:	f7f5 fbd8 	bl	80002e8 <__aeabi_dsub>
 800ab38:	f805 6b01 	strb.w	r6, [r5], #1
 800ab3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab3e:	429d      	cmp	r5, r3
 800ab40:	4680      	mov	r8, r0
 800ab42:	4689      	mov	r9, r1
 800ab44:	f04f 0200 	mov.w	r2, #0
 800ab48:	d124      	bne.n	800ab94 <_dtoa_r+0x60c>
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <_dtoa_r+0x630>)
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	4659      	mov	r1, fp
 800ab50:	f7f5 fbcc 	bl	80002ec <__adddf3>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4640      	mov	r0, r8
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	f7f6 f80c 	bl	8000b78 <__aeabi_dcmpgt>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d173      	bne.n	800ac4c <_dtoa_r+0x6c4>
 800ab64:	4652      	mov	r2, sl
 800ab66:	465b      	mov	r3, fp
 800ab68:	4913      	ldr	r1, [pc, #76]	; (800abb8 <_dtoa_r+0x630>)
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	f7f5 fbbc 	bl	80002e8 <__aeabi_dsub>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4640      	mov	r0, r8
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 ffe0 	bl	8000b3c <__aeabi_dcmplt>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f43f af35 	beq.w	800a9ec <_dtoa_r+0x464>
 800ab82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab84:	1e6b      	subs	r3, r5, #1
 800ab86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab8c:	2b30      	cmp	r3, #48	; 0x30
 800ab8e:	d0f8      	beq.n	800ab82 <_dtoa_r+0x5fa>
 800ab90:	9700      	str	r7, [sp, #0]
 800ab92:	e049      	b.n	800ac28 <_dtoa_r+0x6a0>
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <_dtoa_r+0x624>)
 800ab96:	f7f5 fd5f 	bl	8000658 <__aeabi_dmul>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	4689      	mov	r9, r1
 800ab9e:	e7bd      	b.n	800ab1c <_dtoa_r+0x594>
 800aba0:	0800d700 	.word	0x0800d700
 800aba4:	0800d6d8 	.word	0x0800d6d8
 800aba8:	3ff00000 	.word	0x3ff00000
 800abac:	40240000 	.word	0x40240000
 800abb0:	401c0000 	.word	0x401c0000
 800abb4:	40140000 	.word	0x40140000
 800abb8:	3fe00000 	.word	0x3fe00000
 800abbc:	9d01      	ldr	r5, [sp, #4]
 800abbe:	4656      	mov	r6, sl
 800abc0:	465f      	mov	r7, fp
 800abc2:	4642      	mov	r2, r8
 800abc4:	464b      	mov	r3, r9
 800abc6:	4630      	mov	r0, r6
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f5 fe6f 	bl	80008ac <__aeabi_ddiv>
 800abce:	f7f5 fff3 	bl	8000bb8 <__aeabi_d2iz>
 800abd2:	4682      	mov	sl, r0
 800abd4:	f7f5 fcd6 	bl	8000584 <__aeabi_i2d>
 800abd8:	4642      	mov	r2, r8
 800abda:	464b      	mov	r3, r9
 800abdc:	f7f5 fd3c 	bl	8000658 <__aeabi_dmul>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800abec:	f7f5 fb7c 	bl	80002e8 <__aeabi_dsub>
 800abf0:	f805 6b01 	strb.w	r6, [r5], #1
 800abf4:	9e01      	ldr	r6, [sp, #4]
 800abf6:	9f03      	ldr	r7, [sp, #12]
 800abf8:	1bae      	subs	r6, r5, r6
 800abfa:	42b7      	cmp	r7, r6
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	d135      	bne.n	800ac6e <_dtoa_r+0x6e6>
 800ac02:	f7f5 fb73 	bl	80002ec <__adddf3>
 800ac06:	4642      	mov	r2, r8
 800ac08:	464b      	mov	r3, r9
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	460f      	mov	r7, r1
 800ac0e:	f7f5 ffb3 	bl	8000b78 <__aeabi_dcmpgt>
 800ac12:	b9d0      	cbnz	r0, 800ac4a <_dtoa_r+0x6c2>
 800ac14:	4642      	mov	r2, r8
 800ac16:	464b      	mov	r3, r9
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 ff84 	bl	8000b28 <__aeabi_dcmpeq>
 800ac20:	b110      	cbz	r0, 800ac28 <_dtoa_r+0x6a0>
 800ac22:	f01a 0f01 	tst.w	sl, #1
 800ac26:	d110      	bne.n	800ac4a <_dtoa_r+0x6c2>
 800ac28:	4620      	mov	r0, r4
 800ac2a:	ee18 1a10 	vmov	r1, s16
 800ac2e:	f000 fe8b 	bl	800b948 <_Bfree>
 800ac32:	2300      	movs	r3, #0
 800ac34:	9800      	ldr	r0, [sp, #0]
 800ac36:	702b      	strb	r3, [r5, #0]
 800ac38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	6018      	str	r0, [r3, #0]
 800ac3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f43f acf1 	beq.w	800a628 <_dtoa_r+0xa0>
 800ac46:	601d      	str	r5, [r3, #0]
 800ac48:	e4ee      	b.n	800a628 <_dtoa_r+0xa0>
 800ac4a:	9f00      	ldr	r7, [sp, #0]
 800ac4c:	462b      	mov	r3, r5
 800ac4e:	461d      	mov	r5, r3
 800ac50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac54:	2a39      	cmp	r2, #57	; 0x39
 800ac56:	d106      	bne.n	800ac66 <_dtoa_r+0x6de>
 800ac58:	9a01      	ldr	r2, [sp, #4]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d1f7      	bne.n	800ac4e <_dtoa_r+0x6c6>
 800ac5e:	9901      	ldr	r1, [sp, #4]
 800ac60:	2230      	movs	r2, #48	; 0x30
 800ac62:	3701      	adds	r7, #1
 800ac64:	700a      	strb	r2, [r1, #0]
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	3201      	adds	r2, #1
 800ac6a:	701a      	strb	r2, [r3, #0]
 800ac6c:	e790      	b.n	800ab90 <_dtoa_r+0x608>
 800ac6e:	4ba6      	ldr	r3, [pc, #664]	; (800af08 <_dtoa_r+0x980>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	f7f5 fcf1 	bl	8000658 <__aeabi_dmul>
 800ac76:	2200      	movs	r2, #0
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	f7f5 ff53 	bl	8000b28 <__aeabi_dcmpeq>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d09d      	beq.n	800abc2 <_dtoa_r+0x63a>
 800ac86:	e7cf      	b.n	800ac28 <_dtoa_r+0x6a0>
 800ac88:	9a08      	ldr	r2, [sp, #32]
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	f000 80d7 	beq.w	800ae3e <_dtoa_r+0x8b6>
 800ac90:	9a06      	ldr	r2, [sp, #24]
 800ac92:	2a01      	cmp	r2, #1
 800ac94:	f300 80ba 	bgt.w	800ae0c <_dtoa_r+0x884>
 800ac98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	f000 80b2 	beq.w	800ae04 <_dtoa_r+0x87c>
 800aca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aca4:	9e07      	ldr	r6, [sp, #28]
 800aca6:	9d04      	ldr	r5, [sp, #16]
 800aca8:	9a04      	ldr	r2, [sp, #16]
 800acaa:	441a      	add	r2, r3
 800acac:	9204      	str	r2, [sp, #16]
 800acae:	9a05      	ldr	r2, [sp, #20]
 800acb0:	2101      	movs	r1, #1
 800acb2:	441a      	add	r2, r3
 800acb4:	4620      	mov	r0, r4
 800acb6:	9205      	str	r2, [sp, #20]
 800acb8:	f000 ff48 	bl	800bb4c <__i2b>
 800acbc:	4607      	mov	r7, r0
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	dd0c      	ble.n	800acdc <_dtoa_r+0x754>
 800acc2:	9b05      	ldr	r3, [sp, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dd09      	ble.n	800acdc <_dtoa_r+0x754>
 800acc8:	42ab      	cmp	r3, r5
 800acca:	9a04      	ldr	r2, [sp, #16]
 800accc:	bfa8      	it	ge
 800acce:	462b      	movge	r3, r5
 800acd0:	1ad2      	subs	r2, r2, r3
 800acd2:	9204      	str	r2, [sp, #16]
 800acd4:	9a05      	ldr	r2, [sp, #20]
 800acd6:	1aed      	subs	r5, r5, r3
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	9305      	str	r3, [sp, #20]
 800acdc:	9b07      	ldr	r3, [sp, #28]
 800acde:	b31b      	cbz	r3, 800ad28 <_dtoa_r+0x7a0>
 800ace0:	9b08      	ldr	r3, [sp, #32]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 80af 	beq.w	800ae46 <_dtoa_r+0x8be>
 800ace8:	2e00      	cmp	r6, #0
 800acea:	dd13      	ble.n	800ad14 <_dtoa_r+0x78c>
 800acec:	4639      	mov	r1, r7
 800acee:	4632      	mov	r2, r6
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 ffeb 	bl	800bccc <__pow5mult>
 800acf6:	ee18 2a10 	vmov	r2, s16
 800acfa:	4601      	mov	r1, r0
 800acfc:	4607      	mov	r7, r0
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 ff3a 	bl	800bb78 <__multiply>
 800ad04:	ee18 1a10 	vmov	r1, s16
 800ad08:	4680      	mov	r8, r0
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 fe1c 	bl	800b948 <_Bfree>
 800ad10:	ee08 8a10 	vmov	s16, r8
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	1b9a      	subs	r2, r3, r6
 800ad18:	d006      	beq.n	800ad28 <_dtoa_r+0x7a0>
 800ad1a:	ee18 1a10 	vmov	r1, s16
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 ffd4 	bl	800bccc <__pow5mult>
 800ad24:	ee08 0a10 	vmov	s16, r0
 800ad28:	2101      	movs	r1, #1
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 ff0e 	bl	800bb4c <__i2b>
 800ad30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	4606      	mov	r6, r0
 800ad36:	f340 8088 	ble.w	800ae4a <_dtoa_r+0x8c2>
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4601      	mov	r1, r0
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 ffc4 	bl	800bccc <__pow5mult>
 800ad44:	9b06      	ldr	r3, [sp, #24]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	4606      	mov	r6, r0
 800ad4a:	f340 8081 	ble.w	800ae50 <_dtoa_r+0x8c8>
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	6933      	ldr	r3, [r6, #16]
 800ad54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad58:	6918      	ldr	r0, [r3, #16]
 800ad5a:	f000 fea7 	bl	800baac <__hi0bits>
 800ad5e:	f1c0 0020 	rsb	r0, r0, #32
 800ad62:	9b05      	ldr	r3, [sp, #20]
 800ad64:	4418      	add	r0, r3
 800ad66:	f010 001f 	ands.w	r0, r0, #31
 800ad6a:	f000 8092 	beq.w	800ae92 <_dtoa_r+0x90a>
 800ad6e:	f1c0 0320 	rsb	r3, r0, #32
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	f340 808a 	ble.w	800ae8c <_dtoa_r+0x904>
 800ad78:	f1c0 001c 	rsb	r0, r0, #28
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	4403      	add	r3, r0
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	4403      	add	r3, r0
 800ad86:	4405      	add	r5, r0
 800ad88:	9305      	str	r3, [sp, #20]
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dd07      	ble.n	800ada0 <_dtoa_r+0x818>
 800ad90:	ee18 1a10 	vmov	r1, s16
 800ad94:	461a      	mov	r2, r3
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fff2 	bl	800bd80 <__lshift>
 800ad9c:	ee08 0a10 	vmov	s16, r0
 800ada0:	9b05      	ldr	r3, [sp, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd05      	ble.n	800adb2 <_dtoa_r+0x82a>
 800ada6:	4631      	mov	r1, r6
 800ada8:	461a      	mov	r2, r3
 800adaa:	4620      	mov	r0, r4
 800adac:	f000 ffe8 	bl	800bd80 <__lshift>
 800adb0:	4606      	mov	r6, r0
 800adb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d06e      	beq.n	800ae96 <_dtoa_r+0x90e>
 800adb8:	ee18 0a10 	vmov	r0, s16
 800adbc:	4631      	mov	r1, r6
 800adbe:	f001 f84f 	bl	800be60 <__mcmp>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	da67      	bge.n	800ae96 <_dtoa_r+0x90e>
 800adc6:	9b00      	ldr	r3, [sp, #0]
 800adc8:	3b01      	subs	r3, #1
 800adca:	ee18 1a10 	vmov	r1, s16
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	220a      	movs	r2, #10
 800add2:	2300      	movs	r3, #0
 800add4:	4620      	mov	r0, r4
 800add6:	f000 fdd9 	bl	800b98c <__multadd>
 800adda:	9b08      	ldr	r3, [sp, #32]
 800addc:	ee08 0a10 	vmov	s16, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 81b1 	beq.w	800b148 <_dtoa_r+0xbc0>
 800ade6:	2300      	movs	r3, #0
 800ade8:	4639      	mov	r1, r7
 800adea:	220a      	movs	r2, #10
 800adec:	4620      	mov	r0, r4
 800adee:	f000 fdcd 	bl	800b98c <__multadd>
 800adf2:	9b02      	ldr	r3, [sp, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	4607      	mov	r7, r0
 800adf8:	f300 808e 	bgt.w	800af18 <_dtoa_r+0x990>
 800adfc:	9b06      	ldr	r3, [sp, #24]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	dc51      	bgt.n	800aea6 <_dtoa_r+0x91e>
 800ae02:	e089      	b.n	800af18 <_dtoa_r+0x990>
 800ae04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae0a:	e74b      	b.n	800aca4 <_dtoa_r+0x71c>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	1e5e      	subs	r6, r3, #1
 800ae10:	9b07      	ldr	r3, [sp, #28]
 800ae12:	42b3      	cmp	r3, r6
 800ae14:	bfbf      	itttt	lt
 800ae16:	9b07      	ldrlt	r3, [sp, #28]
 800ae18:	9607      	strlt	r6, [sp, #28]
 800ae1a:	1af2      	sublt	r2, r6, r3
 800ae1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae1e:	bfb6      	itet	lt
 800ae20:	189b      	addlt	r3, r3, r2
 800ae22:	1b9e      	subge	r6, r3, r6
 800ae24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	bfb8      	it	lt
 800ae2a:	2600      	movlt	r6, #0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bfb7      	itett	lt
 800ae30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae38:	1a9d      	sublt	r5, r3, r2
 800ae3a:	2300      	movlt	r3, #0
 800ae3c:	e734      	b.n	800aca8 <_dtoa_r+0x720>
 800ae3e:	9e07      	ldr	r6, [sp, #28]
 800ae40:	9d04      	ldr	r5, [sp, #16]
 800ae42:	9f08      	ldr	r7, [sp, #32]
 800ae44:	e73b      	b.n	800acbe <_dtoa_r+0x736>
 800ae46:	9a07      	ldr	r2, [sp, #28]
 800ae48:	e767      	b.n	800ad1a <_dtoa_r+0x792>
 800ae4a:	9b06      	ldr	r3, [sp, #24]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	dc18      	bgt.n	800ae82 <_dtoa_r+0x8fa>
 800ae50:	f1ba 0f00 	cmp.w	sl, #0
 800ae54:	d115      	bne.n	800ae82 <_dtoa_r+0x8fa>
 800ae56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae5a:	b993      	cbnz	r3, 800ae82 <_dtoa_r+0x8fa>
 800ae5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae60:	0d1b      	lsrs	r3, r3, #20
 800ae62:	051b      	lsls	r3, r3, #20
 800ae64:	b183      	cbz	r3, 800ae88 <_dtoa_r+0x900>
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	9b05      	ldr	r3, [sp, #20]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	9305      	str	r3, [sp, #20]
 800ae72:	f04f 0801 	mov.w	r8, #1
 800ae76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f47f af6a 	bne.w	800ad52 <_dtoa_r+0x7ca>
 800ae7e:	2001      	movs	r0, #1
 800ae80:	e76f      	b.n	800ad62 <_dtoa_r+0x7da>
 800ae82:	f04f 0800 	mov.w	r8, #0
 800ae86:	e7f6      	b.n	800ae76 <_dtoa_r+0x8ee>
 800ae88:	4698      	mov	r8, r3
 800ae8a:	e7f4      	b.n	800ae76 <_dtoa_r+0x8ee>
 800ae8c:	f43f af7d 	beq.w	800ad8a <_dtoa_r+0x802>
 800ae90:	4618      	mov	r0, r3
 800ae92:	301c      	adds	r0, #28
 800ae94:	e772      	b.n	800ad7c <_dtoa_r+0x7f4>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dc37      	bgt.n	800af0c <_dtoa_r+0x984>
 800ae9c:	9b06      	ldr	r3, [sp, #24]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	dd34      	ble.n	800af0c <_dtoa_r+0x984>
 800aea2:	9b03      	ldr	r3, [sp, #12]
 800aea4:	9302      	str	r3, [sp, #8]
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	b96b      	cbnz	r3, 800aec6 <_dtoa_r+0x93e>
 800aeaa:	4631      	mov	r1, r6
 800aeac:	2205      	movs	r2, #5
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fd6c 	bl	800b98c <__multadd>
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	ee18 0a10 	vmov	r0, s16
 800aebc:	f000 ffd0 	bl	800be60 <__mcmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	f73f adbb 	bgt.w	800aa3c <_dtoa_r+0x4b4>
 800aec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec8:	9d01      	ldr	r5, [sp, #4]
 800aeca:	43db      	mvns	r3, r3
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	4631      	mov	r1, r6
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fd37 	bl	800b948 <_Bfree>
 800aeda:	2f00      	cmp	r7, #0
 800aedc:	f43f aea4 	beq.w	800ac28 <_dtoa_r+0x6a0>
 800aee0:	f1b8 0f00 	cmp.w	r8, #0
 800aee4:	d005      	beq.n	800aef2 <_dtoa_r+0x96a>
 800aee6:	45b8      	cmp	r8, r7
 800aee8:	d003      	beq.n	800aef2 <_dtoa_r+0x96a>
 800aeea:	4641      	mov	r1, r8
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 fd2b 	bl	800b948 <_Bfree>
 800aef2:	4639      	mov	r1, r7
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fd27 	bl	800b948 <_Bfree>
 800aefa:	e695      	b.n	800ac28 <_dtoa_r+0x6a0>
 800aefc:	2600      	movs	r6, #0
 800aefe:	4637      	mov	r7, r6
 800af00:	e7e1      	b.n	800aec6 <_dtoa_r+0x93e>
 800af02:	9700      	str	r7, [sp, #0]
 800af04:	4637      	mov	r7, r6
 800af06:	e599      	b.n	800aa3c <_dtoa_r+0x4b4>
 800af08:	40240000 	.word	0x40240000
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 80ca 	beq.w	800b0a8 <_dtoa_r+0xb20>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	9302      	str	r3, [sp, #8]
 800af18:	2d00      	cmp	r5, #0
 800af1a:	dd05      	ble.n	800af28 <_dtoa_r+0x9a0>
 800af1c:	4639      	mov	r1, r7
 800af1e:	462a      	mov	r2, r5
 800af20:	4620      	mov	r0, r4
 800af22:	f000 ff2d 	bl	800bd80 <__lshift>
 800af26:	4607      	mov	r7, r0
 800af28:	f1b8 0f00 	cmp.w	r8, #0
 800af2c:	d05b      	beq.n	800afe6 <_dtoa_r+0xa5e>
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fcc9 	bl	800b8c8 <_Balloc>
 800af36:	4605      	mov	r5, r0
 800af38:	b928      	cbnz	r0, 800af46 <_dtoa_r+0x9be>
 800af3a:	4b87      	ldr	r3, [pc, #540]	; (800b158 <_dtoa_r+0xbd0>)
 800af3c:	4602      	mov	r2, r0
 800af3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af42:	f7ff bb3b 	b.w	800a5bc <_dtoa_r+0x34>
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	3202      	adds	r2, #2
 800af4a:	0092      	lsls	r2, r2, #2
 800af4c:	f107 010c 	add.w	r1, r7, #12
 800af50:	300c      	adds	r0, #12
 800af52:	f000 fc9f 	bl	800b894 <memcpy>
 800af56:	2201      	movs	r2, #1
 800af58:	4629      	mov	r1, r5
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 ff10 	bl	800bd80 <__lshift>
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	f103 0901 	add.w	r9, r3, #1
 800af66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af6a:	4413      	add	r3, r2
 800af6c:	9305      	str	r3, [sp, #20]
 800af6e:	f00a 0301 	and.w	r3, sl, #1
 800af72:	46b8      	mov	r8, r7
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	4607      	mov	r7, r0
 800af78:	4631      	mov	r1, r6
 800af7a:	ee18 0a10 	vmov	r0, s16
 800af7e:	f7ff fa77 	bl	800a470 <quorem>
 800af82:	4641      	mov	r1, r8
 800af84:	9002      	str	r0, [sp, #8]
 800af86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af8a:	ee18 0a10 	vmov	r0, s16
 800af8e:	f000 ff67 	bl	800be60 <__mcmp>
 800af92:	463a      	mov	r2, r7
 800af94:	9003      	str	r0, [sp, #12]
 800af96:	4631      	mov	r1, r6
 800af98:	4620      	mov	r0, r4
 800af9a:	f000 ff7d 	bl	800be98 <__mdiff>
 800af9e:	68c2      	ldr	r2, [r0, #12]
 800afa0:	f109 3bff 	add.w	fp, r9, #4294967295
 800afa4:	4605      	mov	r5, r0
 800afa6:	bb02      	cbnz	r2, 800afea <_dtoa_r+0xa62>
 800afa8:	4601      	mov	r1, r0
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f000 ff57 	bl	800be60 <__mcmp>
 800afb2:	4602      	mov	r2, r0
 800afb4:	4629      	mov	r1, r5
 800afb6:	4620      	mov	r0, r4
 800afb8:	9207      	str	r2, [sp, #28]
 800afba:	f000 fcc5 	bl	800b948 <_Bfree>
 800afbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afc2:	ea43 0102 	orr.w	r1, r3, r2
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	430b      	orrs	r3, r1
 800afca:	464d      	mov	r5, r9
 800afcc:	d10f      	bne.n	800afee <_dtoa_r+0xa66>
 800afce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afd2:	d02a      	beq.n	800b02a <_dtoa_r+0xaa2>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dd02      	ble.n	800afe0 <_dtoa_r+0xa58>
 800afda:	9b02      	ldr	r3, [sp, #8]
 800afdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800afe0:	f88b a000 	strb.w	sl, [fp]
 800afe4:	e775      	b.n	800aed2 <_dtoa_r+0x94a>
 800afe6:	4638      	mov	r0, r7
 800afe8:	e7ba      	b.n	800af60 <_dtoa_r+0x9d8>
 800afea:	2201      	movs	r2, #1
 800afec:	e7e2      	b.n	800afb4 <_dtoa_r+0xa2c>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	db04      	blt.n	800affe <_dtoa_r+0xa76>
 800aff4:	9906      	ldr	r1, [sp, #24]
 800aff6:	430b      	orrs	r3, r1
 800aff8:	9904      	ldr	r1, [sp, #16]
 800affa:	430b      	orrs	r3, r1
 800affc:	d122      	bne.n	800b044 <_dtoa_r+0xabc>
 800affe:	2a00      	cmp	r2, #0
 800b000:	ddee      	ble.n	800afe0 <_dtoa_r+0xa58>
 800b002:	ee18 1a10 	vmov	r1, s16
 800b006:	2201      	movs	r2, #1
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 feb9 	bl	800bd80 <__lshift>
 800b00e:	4631      	mov	r1, r6
 800b010:	ee08 0a10 	vmov	s16, r0
 800b014:	f000 ff24 	bl	800be60 <__mcmp>
 800b018:	2800      	cmp	r0, #0
 800b01a:	dc03      	bgt.n	800b024 <_dtoa_r+0xa9c>
 800b01c:	d1e0      	bne.n	800afe0 <_dtoa_r+0xa58>
 800b01e:	f01a 0f01 	tst.w	sl, #1
 800b022:	d0dd      	beq.n	800afe0 <_dtoa_r+0xa58>
 800b024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b028:	d1d7      	bne.n	800afda <_dtoa_r+0xa52>
 800b02a:	2339      	movs	r3, #57	; 0x39
 800b02c:	f88b 3000 	strb.w	r3, [fp]
 800b030:	462b      	mov	r3, r5
 800b032:	461d      	mov	r5, r3
 800b034:	3b01      	subs	r3, #1
 800b036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b03a:	2a39      	cmp	r2, #57	; 0x39
 800b03c:	d071      	beq.n	800b122 <_dtoa_r+0xb9a>
 800b03e:	3201      	adds	r2, #1
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	e746      	b.n	800aed2 <_dtoa_r+0x94a>
 800b044:	2a00      	cmp	r2, #0
 800b046:	dd07      	ble.n	800b058 <_dtoa_r+0xad0>
 800b048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b04c:	d0ed      	beq.n	800b02a <_dtoa_r+0xaa2>
 800b04e:	f10a 0301 	add.w	r3, sl, #1
 800b052:	f88b 3000 	strb.w	r3, [fp]
 800b056:	e73c      	b.n	800aed2 <_dtoa_r+0x94a>
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b05e:	4599      	cmp	r9, r3
 800b060:	d047      	beq.n	800b0f2 <_dtoa_r+0xb6a>
 800b062:	ee18 1a10 	vmov	r1, s16
 800b066:	2300      	movs	r3, #0
 800b068:	220a      	movs	r2, #10
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 fc8e 	bl	800b98c <__multadd>
 800b070:	45b8      	cmp	r8, r7
 800b072:	ee08 0a10 	vmov	s16, r0
 800b076:	f04f 0300 	mov.w	r3, #0
 800b07a:	f04f 020a 	mov.w	r2, #10
 800b07e:	4641      	mov	r1, r8
 800b080:	4620      	mov	r0, r4
 800b082:	d106      	bne.n	800b092 <_dtoa_r+0xb0a>
 800b084:	f000 fc82 	bl	800b98c <__multadd>
 800b088:	4680      	mov	r8, r0
 800b08a:	4607      	mov	r7, r0
 800b08c:	f109 0901 	add.w	r9, r9, #1
 800b090:	e772      	b.n	800af78 <_dtoa_r+0x9f0>
 800b092:	f000 fc7b 	bl	800b98c <__multadd>
 800b096:	4639      	mov	r1, r7
 800b098:	4680      	mov	r8, r0
 800b09a:	2300      	movs	r3, #0
 800b09c:	220a      	movs	r2, #10
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 fc74 	bl	800b98c <__multadd>
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	e7f1      	b.n	800b08c <_dtoa_r+0xb04>
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	9d01      	ldr	r5, [sp, #4]
 800b0ae:	ee18 0a10 	vmov	r0, s16
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	f7ff f9dc 	bl	800a470 <quorem>
 800b0b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0bc:	9b01      	ldr	r3, [sp, #4]
 800b0be:	f805 ab01 	strb.w	sl, [r5], #1
 800b0c2:	1aea      	subs	r2, r5, r3
 800b0c4:	9b02      	ldr	r3, [sp, #8]
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	dd09      	ble.n	800b0de <_dtoa_r+0xb56>
 800b0ca:	ee18 1a10 	vmov	r1, s16
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	220a      	movs	r2, #10
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fc5a 	bl	800b98c <__multadd>
 800b0d8:	ee08 0a10 	vmov	s16, r0
 800b0dc:	e7e7      	b.n	800b0ae <_dtoa_r+0xb26>
 800b0de:	9b02      	ldr	r3, [sp, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	bfc8      	it	gt
 800b0e4:	461d      	movgt	r5, r3
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	bfd8      	it	le
 800b0ea:	2501      	movle	r5, #1
 800b0ec:	441d      	add	r5, r3
 800b0ee:	f04f 0800 	mov.w	r8, #0
 800b0f2:	ee18 1a10 	vmov	r1, s16
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 fe41 	bl	800bd80 <__lshift>
 800b0fe:	4631      	mov	r1, r6
 800b100:	ee08 0a10 	vmov	s16, r0
 800b104:	f000 feac 	bl	800be60 <__mcmp>
 800b108:	2800      	cmp	r0, #0
 800b10a:	dc91      	bgt.n	800b030 <_dtoa_r+0xaa8>
 800b10c:	d102      	bne.n	800b114 <_dtoa_r+0xb8c>
 800b10e:	f01a 0f01 	tst.w	sl, #1
 800b112:	d18d      	bne.n	800b030 <_dtoa_r+0xaa8>
 800b114:	462b      	mov	r3, r5
 800b116:	461d      	mov	r5, r3
 800b118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b11c:	2a30      	cmp	r2, #48	; 0x30
 800b11e:	d0fa      	beq.n	800b116 <_dtoa_r+0xb8e>
 800b120:	e6d7      	b.n	800aed2 <_dtoa_r+0x94a>
 800b122:	9a01      	ldr	r2, [sp, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d184      	bne.n	800b032 <_dtoa_r+0xaaa>
 800b128:	9b00      	ldr	r3, [sp, #0]
 800b12a:	3301      	adds	r3, #1
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	2331      	movs	r3, #49	; 0x31
 800b130:	7013      	strb	r3, [r2, #0]
 800b132:	e6ce      	b.n	800aed2 <_dtoa_r+0x94a>
 800b134:	4b09      	ldr	r3, [pc, #36]	; (800b15c <_dtoa_r+0xbd4>)
 800b136:	f7ff ba95 	b.w	800a664 <_dtoa_r+0xdc>
 800b13a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f47f aa6e 	bne.w	800a61e <_dtoa_r+0x96>
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <_dtoa_r+0xbd8>)
 800b144:	f7ff ba8e 	b.w	800a664 <_dtoa_r+0xdc>
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dcae      	bgt.n	800b0ac <_dtoa_r+0xb24>
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	2b02      	cmp	r3, #2
 800b152:	f73f aea8 	bgt.w	800aea6 <_dtoa_r+0x91e>
 800b156:	e7a9      	b.n	800b0ac <_dtoa_r+0xb24>
 800b158:	0800d5f0 	.word	0x0800d5f0
 800b15c:	0800d45c 	.word	0x0800d45c
 800b160:	0800d588 	.word	0x0800d588

0800b164 <fiprintf>:
 800b164:	b40e      	push	{r1, r2, r3}
 800b166:	b503      	push	{r0, r1, lr}
 800b168:	4601      	mov	r1, r0
 800b16a:	ab03      	add	r3, sp, #12
 800b16c:	4805      	ldr	r0, [pc, #20]	; (800b184 <fiprintf+0x20>)
 800b16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b172:	6800      	ldr	r0, [r0, #0]
 800b174:	9301      	str	r3, [sp, #4]
 800b176:	f001 fa03 	bl	800c580 <_vfiprintf_r>
 800b17a:	b002      	add	sp, #8
 800b17c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b180:	b003      	add	sp, #12
 800b182:	4770      	bx	lr
 800b184:	2000000c 	.word	0x2000000c

0800b188 <rshift>:
 800b188:	6903      	ldr	r3, [r0, #16]
 800b18a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b18e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b192:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b196:	f100 0414 	add.w	r4, r0, #20
 800b19a:	dd45      	ble.n	800b228 <rshift+0xa0>
 800b19c:	f011 011f 	ands.w	r1, r1, #31
 800b1a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1a8:	d10c      	bne.n	800b1c4 <rshift+0x3c>
 800b1aa:	f100 0710 	add.w	r7, r0, #16
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	42b1      	cmp	r1, r6
 800b1b2:	d334      	bcc.n	800b21e <rshift+0x96>
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	1eea      	subs	r2, r5, #3
 800b1ba:	4296      	cmp	r6, r2
 800b1bc:	bf38      	it	cc
 800b1be:	2300      	movcc	r3, #0
 800b1c0:	4423      	add	r3, r4
 800b1c2:	e015      	b.n	800b1f0 <rshift+0x68>
 800b1c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1c8:	f1c1 0820 	rsb	r8, r1, #32
 800b1cc:	40cf      	lsrs	r7, r1
 800b1ce:	f105 0e04 	add.w	lr, r5, #4
 800b1d2:	46a1      	mov	r9, r4
 800b1d4:	4576      	cmp	r6, lr
 800b1d6:	46f4      	mov	ip, lr
 800b1d8:	d815      	bhi.n	800b206 <rshift+0x7e>
 800b1da:	1a9a      	subs	r2, r3, r2
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	3a04      	subs	r2, #4
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	42ae      	cmp	r6, r5
 800b1e4:	bf38      	it	cc
 800b1e6:	2200      	movcc	r2, #0
 800b1e8:	18a3      	adds	r3, r4, r2
 800b1ea:	50a7      	str	r7, [r4, r2]
 800b1ec:	b107      	cbz	r7, 800b1f0 <rshift+0x68>
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	1b1a      	subs	r2, r3, r4
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1f8:	bf08      	it	eq
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	6102      	str	r2, [r0, #16]
 800b1fe:	bf08      	it	eq
 800b200:	6143      	streq	r3, [r0, #20]
 800b202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b206:	f8dc c000 	ldr.w	ip, [ip]
 800b20a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b20e:	ea4c 0707 	orr.w	r7, ip, r7
 800b212:	f849 7b04 	str.w	r7, [r9], #4
 800b216:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b21a:	40cf      	lsrs	r7, r1
 800b21c:	e7da      	b.n	800b1d4 <rshift+0x4c>
 800b21e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b222:	f847 cf04 	str.w	ip, [r7, #4]!
 800b226:	e7c3      	b.n	800b1b0 <rshift+0x28>
 800b228:	4623      	mov	r3, r4
 800b22a:	e7e1      	b.n	800b1f0 <rshift+0x68>

0800b22c <__hexdig_fun>:
 800b22c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b230:	2b09      	cmp	r3, #9
 800b232:	d802      	bhi.n	800b23a <__hexdig_fun+0xe>
 800b234:	3820      	subs	r0, #32
 800b236:	b2c0      	uxtb	r0, r0
 800b238:	4770      	bx	lr
 800b23a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d801      	bhi.n	800b246 <__hexdig_fun+0x1a>
 800b242:	3847      	subs	r0, #71	; 0x47
 800b244:	e7f7      	b.n	800b236 <__hexdig_fun+0xa>
 800b246:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	d801      	bhi.n	800b252 <__hexdig_fun+0x26>
 800b24e:	3827      	subs	r0, #39	; 0x27
 800b250:	e7f1      	b.n	800b236 <__hexdig_fun+0xa>
 800b252:	2000      	movs	r0, #0
 800b254:	4770      	bx	lr
	...

0800b258 <__gethex>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ed2d 8b02 	vpush	{d8}
 800b260:	b089      	sub	sp, #36	; 0x24
 800b262:	ee08 0a10 	vmov	s16, r0
 800b266:	9304      	str	r3, [sp, #16]
 800b268:	4bb4      	ldr	r3, [pc, #720]	; (800b53c <__gethex+0x2e4>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	4618      	mov	r0, r3
 800b270:	468b      	mov	fp, r1
 800b272:	4690      	mov	r8, r2
 800b274:	f7f4 ffd6 	bl	8000224 <strlen>
 800b278:	9b01      	ldr	r3, [sp, #4]
 800b27a:	f8db 2000 	ldr.w	r2, [fp]
 800b27e:	4403      	add	r3, r0
 800b280:	4682      	mov	sl, r0
 800b282:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b286:	9305      	str	r3, [sp, #20]
 800b288:	1c93      	adds	r3, r2, #2
 800b28a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b28e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b292:	32fe      	adds	r2, #254	; 0xfe
 800b294:	18d1      	adds	r1, r2, r3
 800b296:	461f      	mov	r7, r3
 800b298:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b29c:	9100      	str	r1, [sp, #0]
 800b29e:	2830      	cmp	r0, #48	; 0x30
 800b2a0:	d0f8      	beq.n	800b294 <__gethex+0x3c>
 800b2a2:	f7ff ffc3 	bl	800b22c <__hexdig_fun>
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d13a      	bne.n	800b322 <__gethex+0xca>
 800b2ac:	9901      	ldr	r1, [sp, #4]
 800b2ae:	4652      	mov	r2, sl
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f001 fa9d 	bl	800c7f0 <strncmp>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d168      	bne.n	800b38e <__gethex+0x136>
 800b2bc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2c0:	eb07 060a 	add.w	r6, r7, sl
 800b2c4:	f7ff ffb2 	bl	800b22c <__hexdig_fun>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d062      	beq.n	800b392 <__gethex+0x13a>
 800b2cc:	4633      	mov	r3, r6
 800b2ce:	7818      	ldrb	r0, [r3, #0]
 800b2d0:	2830      	cmp	r0, #48	; 0x30
 800b2d2:	461f      	mov	r7, r3
 800b2d4:	f103 0301 	add.w	r3, r3, #1
 800b2d8:	d0f9      	beq.n	800b2ce <__gethex+0x76>
 800b2da:	f7ff ffa7 	bl	800b22c <__hexdig_fun>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	fab0 f480 	clz	r4, r0
 800b2e4:	0964      	lsrs	r4, r4, #5
 800b2e6:	4635      	mov	r5, r6
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	463a      	mov	r2, r7
 800b2ec:	4616      	mov	r6, r2
 800b2ee:	3201      	adds	r2, #1
 800b2f0:	7830      	ldrb	r0, [r6, #0]
 800b2f2:	f7ff ff9b 	bl	800b22c <__hexdig_fun>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d1f8      	bne.n	800b2ec <__gethex+0x94>
 800b2fa:	9901      	ldr	r1, [sp, #4]
 800b2fc:	4652      	mov	r2, sl
 800b2fe:	4630      	mov	r0, r6
 800b300:	f001 fa76 	bl	800c7f0 <strncmp>
 800b304:	b980      	cbnz	r0, 800b328 <__gethex+0xd0>
 800b306:	b94d      	cbnz	r5, 800b31c <__gethex+0xc4>
 800b308:	eb06 050a 	add.w	r5, r6, sl
 800b30c:	462a      	mov	r2, r5
 800b30e:	4616      	mov	r6, r2
 800b310:	3201      	adds	r2, #1
 800b312:	7830      	ldrb	r0, [r6, #0]
 800b314:	f7ff ff8a 	bl	800b22c <__hexdig_fun>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d1f8      	bne.n	800b30e <__gethex+0xb6>
 800b31c:	1bad      	subs	r5, r5, r6
 800b31e:	00ad      	lsls	r5, r5, #2
 800b320:	e004      	b.n	800b32c <__gethex+0xd4>
 800b322:	2400      	movs	r4, #0
 800b324:	4625      	mov	r5, r4
 800b326:	e7e0      	b.n	800b2ea <__gethex+0x92>
 800b328:	2d00      	cmp	r5, #0
 800b32a:	d1f7      	bne.n	800b31c <__gethex+0xc4>
 800b32c:	7833      	ldrb	r3, [r6, #0]
 800b32e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b332:	2b50      	cmp	r3, #80	; 0x50
 800b334:	d13b      	bne.n	800b3ae <__gethex+0x156>
 800b336:	7873      	ldrb	r3, [r6, #1]
 800b338:	2b2b      	cmp	r3, #43	; 0x2b
 800b33a:	d02c      	beq.n	800b396 <__gethex+0x13e>
 800b33c:	2b2d      	cmp	r3, #45	; 0x2d
 800b33e:	d02e      	beq.n	800b39e <__gethex+0x146>
 800b340:	1c71      	adds	r1, r6, #1
 800b342:	f04f 0900 	mov.w	r9, #0
 800b346:	7808      	ldrb	r0, [r1, #0]
 800b348:	f7ff ff70 	bl	800b22c <__hexdig_fun>
 800b34c:	1e43      	subs	r3, r0, #1
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b18      	cmp	r3, #24
 800b352:	d82c      	bhi.n	800b3ae <__gethex+0x156>
 800b354:	f1a0 0210 	sub.w	r2, r0, #16
 800b358:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b35c:	f7ff ff66 	bl	800b22c <__hexdig_fun>
 800b360:	1e43      	subs	r3, r0, #1
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b18      	cmp	r3, #24
 800b366:	d91d      	bls.n	800b3a4 <__gethex+0x14c>
 800b368:	f1b9 0f00 	cmp.w	r9, #0
 800b36c:	d000      	beq.n	800b370 <__gethex+0x118>
 800b36e:	4252      	negs	r2, r2
 800b370:	4415      	add	r5, r2
 800b372:	f8cb 1000 	str.w	r1, [fp]
 800b376:	b1e4      	cbz	r4, 800b3b2 <__gethex+0x15a>
 800b378:	9b00      	ldr	r3, [sp, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bf14      	ite	ne
 800b37e:	2700      	movne	r7, #0
 800b380:	2706      	moveq	r7, #6
 800b382:	4638      	mov	r0, r7
 800b384:	b009      	add	sp, #36	; 0x24
 800b386:	ecbd 8b02 	vpop	{d8}
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	463e      	mov	r6, r7
 800b390:	4625      	mov	r5, r4
 800b392:	2401      	movs	r4, #1
 800b394:	e7ca      	b.n	800b32c <__gethex+0xd4>
 800b396:	f04f 0900 	mov.w	r9, #0
 800b39a:	1cb1      	adds	r1, r6, #2
 800b39c:	e7d3      	b.n	800b346 <__gethex+0xee>
 800b39e:	f04f 0901 	mov.w	r9, #1
 800b3a2:	e7fa      	b.n	800b39a <__gethex+0x142>
 800b3a4:	230a      	movs	r3, #10
 800b3a6:	fb03 0202 	mla	r2, r3, r2, r0
 800b3aa:	3a10      	subs	r2, #16
 800b3ac:	e7d4      	b.n	800b358 <__gethex+0x100>
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	e7df      	b.n	800b372 <__gethex+0x11a>
 800b3b2:	1bf3      	subs	r3, r6, r7
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	2b07      	cmp	r3, #7
 800b3ba:	dc0b      	bgt.n	800b3d4 <__gethex+0x17c>
 800b3bc:	ee18 0a10 	vmov	r0, s16
 800b3c0:	f000 fa82 	bl	800b8c8 <_Balloc>
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	b940      	cbnz	r0, 800b3da <__gethex+0x182>
 800b3c8:	4b5d      	ldr	r3, [pc, #372]	; (800b540 <__gethex+0x2e8>)
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	21de      	movs	r1, #222	; 0xde
 800b3ce:	485d      	ldr	r0, [pc, #372]	; (800b544 <__gethex+0x2ec>)
 800b3d0:	f7ff f830 	bl	800a434 <__assert_func>
 800b3d4:	3101      	adds	r1, #1
 800b3d6:	105b      	asrs	r3, r3, #1
 800b3d8:	e7ee      	b.n	800b3b8 <__gethex+0x160>
 800b3da:	f100 0914 	add.w	r9, r0, #20
 800b3de:	f04f 0b00 	mov.w	fp, #0
 800b3e2:	f1ca 0301 	rsb	r3, sl, #1
 800b3e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3ea:	f8cd b000 	str.w	fp, [sp]
 800b3ee:	9306      	str	r3, [sp, #24]
 800b3f0:	42b7      	cmp	r7, r6
 800b3f2:	d340      	bcc.n	800b476 <__gethex+0x21e>
 800b3f4:	9802      	ldr	r0, [sp, #8]
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	f840 3b04 	str.w	r3, [r0], #4
 800b3fc:	eba0 0009 	sub.w	r0, r0, r9
 800b400:	1080      	asrs	r0, r0, #2
 800b402:	0146      	lsls	r6, r0, #5
 800b404:	6120      	str	r0, [r4, #16]
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fb50 	bl	800baac <__hi0bits>
 800b40c:	1a30      	subs	r0, r6, r0
 800b40e:	f8d8 6000 	ldr.w	r6, [r8]
 800b412:	42b0      	cmp	r0, r6
 800b414:	dd63      	ble.n	800b4de <__gethex+0x286>
 800b416:	1b87      	subs	r7, r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fef4 	bl	800c208 <__any_on>
 800b420:	4682      	mov	sl, r0
 800b422:	b1a8      	cbz	r0, 800b450 <__gethex+0x1f8>
 800b424:	1e7b      	subs	r3, r7, #1
 800b426:	1159      	asrs	r1, r3, #5
 800b428:	f003 021f 	and.w	r2, r3, #31
 800b42c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b430:	f04f 0a01 	mov.w	sl, #1
 800b434:	fa0a f202 	lsl.w	r2, sl, r2
 800b438:	420a      	tst	r2, r1
 800b43a:	d009      	beq.n	800b450 <__gethex+0x1f8>
 800b43c:	4553      	cmp	r3, sl
 800b43e:	dd05      	ble.n	800b44c <__gethex+0x1f4>
 800b440:	1eb9      	subs	r1, r7, #2
 800b442:	4620      	mov	r0, r4
 800b444:	f000 fee0 	bl	800c208 <__any_on>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d145      	bne.n	800b4d8 <__gethex+0x280>
 800b44c:	f04f 0a02 	mov.w	sl, #2
 800b450:	4639      	mov	r1, r7
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff fe98 	bl	800b188 <rshift>
 800b458:	443d      	add	r5, r7
 800b45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b45e:	42ab      	cmp	r3, r5
 800b460:	da4c      	bge.n	800b4fc <__gethex+0x2a4>
 800b462:	ee18 0a10 	vmov	r0, s16
 800b466:	4621      	mov	r1, r4
 800b468:	f000 fa6e 	bl	800b948 <_Bfree>
 800b46c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b46e:	2300      	movs	r3, #0
 800b470:	6013      	str	r3, [r2, #0]
 800b472:	27a3      	movs	r7, #163	; 0xa3
 800b474:	e785      	b.n	800b382 <__gethex+0x12a>
 800b476:	1e73      	subs	r3, r6, #1
 800b478:	9a05      	ldr	r2, [sp, #20]
 800b47a:	9303      	str	r3, [sp, #12]
 800b47c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b480:	4293      	cmp	r3, r2
 800b482:	d019      	beq.n	800b4b8 <__gethex+0x260>
 800b484:	f1bb 0f20 	cmp.w	fp, #32
 800b488:	d107      	bne.n	800b49a <__gethex+0x242>
 800b48a:	9b02      	ldr	r3, [sp, #8]
 800b48c:	9a00      	ldr	r2, [sp, #0]
 800b48e:	f843 2b04 	str.w	r2, [r3], #4
 800b492:	9302      	str	r3, [sp, #8]
 800b494:	2300      	movs	r3, #0
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	469b      	mov	fp, r3
 800b49a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b49e:	f7ff fec5 	bl	800b22c <__hexdig_fun>
 800b4a2:	9b00      	ldr	r3, [sp, #0]
 800b4a4:	f000 000f 	and.w	r0, r0, #15
 800b4a8:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4ac:	4303      	orrs	r3, r0
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	f10b 0b04 	add.w	fp, fp, #4
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	e00d      	b.n	800b4d4 <__gethex+0x27c>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	9a06      	ldr	r2, [sp, #24]
 800b4bc:	4413      	add	r3, r2
 800b4be:	42bb      	cmp	r3, r7
 800b4c0:	d3e0      	bcc.n	800b484 <__gethex+0x22c>
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	9901      	ldr	r1, [sp, #4]
 800b4c6:	9307      	str	r3, [sp, #28]
 800b4c8:	4652      	mov	r2, sl
 800b4ca:	f001 f991 	bl	800c7f0 <strncmp>
 800b4ce:	9b07      	ldr	r3, [sp, #28]
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1d7      	bne.n	800b484 <__gethex+0x22c>
 800b4d4:	461e      	mov	r6, r3
 800b4d6:	e78b      	b.n	800b3f0 <__gethex+0x198>
 800b4d8:	f04f 0a03 	mov.w	sl, #3
 800b4dc:	e7b8      	b.n	800b450 <__gethex+0x1f8>
 800b4de:	da0a      	bge.n	800b4f6 <__gethex+0x29e>
 800b4e0:	1a37      	subs	r7, r6, r0
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	ee18 0a10 	vmov	r0, s16
 800b4e8:	463a      	mov	r2, r7
 800b4ea:	f000 fc49 	bl	800bd80 <__lshift>
 800b4ee:	1bed      	subs	r5, r5, r7
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	f100 0914 	add.w	r9, r0, #20
 800b4f6:	f04f 0a00 	mov.w	sl, #0
 800b4fa:	e7ae      	b.n	800b45a <__gethex+0x202>
 800b4fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b500:	42a8      	cmp	r0, r5
 800b502:	dd72      	ble.n	800b5ea <__gethex+0x392>
 800b504:	1b45      	subs	r5, r0, r5
 800b506:	42ae      	cmp	r6, r5
 800b508:	dc36      	bgt.n	800b578 <__gethex+0x320>
 800b50a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d02a      	beq.n	800b568 <__gethex+0x310>
 800b512:	2b03      	cmp	r3, #3
 800b514:	d02c      	beq.n	800b570 <__gethex+0x318>
 800b516:	2b01      	cmp	r3, #1
 800b518:	d11c      	bne.n	800b554 <__gethex+0x2fc>
 800b51a:	42ae      	cmp	r6, r5
 800b51c:	d11a      	bne.n	800b554 <__gethex+0x2fc>
 800b51e:	2e01      	cmp	r6, #1
 800b520:	d112      	bne.n	800b548 <__gethex+0x2f0>
 800b522:	9a04      	ldr	r2, [sp, #16]
 800b524:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	2301      	movs	r3, #1
 800b52c:	6123      	str	r3, [r4, #16]
 800b52e:	f8c9 3000 	str.w	r3, [r9]
 800b532:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b534:	2762      	movs	r7, #98	; 0x62
 800b536:	601c      	str	r4, [r3, #0]
 800b538:	e723      	b.n	800b382 <__gethex+0x12a>
 800b53a:	bf00      	nop
 800b53c:	0800d668 	.word	0x0800d668
 800b540:	0800d5f0 	.word	0x0800d5f0
 800b544:	0800d601 	.word	0x0800d601
 800b548:	1e71      	subs	r1, r6, #1
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fe5c 	bl	800c208 <__any_on>
 800b550:	2800      	cmp	r0, #0
 800b552:	d1e6      	bne.n	800b522 <__gethex+0x2ca>
 800b554:	ee18 0a10 	vmov	r0, s16
 800b558:	4621      	mov	r1, r4
 800b55a:	f000 f9f5 	bl	800b948 <_Bfree>
 800b55e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b560:	2300      	movs	r3, #0
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	2750      	movs	r7, #80	; 0x50
 800b566:	e70c      	b.n	800b382 <__gethex+0x12a>
 800b568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1f2      	bne.n	800b554 <__gethex+0x2fc>
 800b56e:	e7d8      	b.n	800b522 <__gethex+0x2ca>
 800b570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1d5      	bne.n	800b522 <__gethex+0x2ca>
 800b576:	e7ed      	b.n	800b554 <__gethex+0x2fc>
 800b578:	1e6f      	subs	r7, r5, #1
 800b57a:	f1ba 0f00 	cmp.w	sl, #0
 800b57e:	d131      	bne.n	800b5e4 <__gethex+0x38c>
 800b580:	b127      	cbz	r7, 800b58c <__gethex+0x334>
 800b582:	4639      	mov	r1, r7
 800b584:	4620      	mov	r0, r4
 800b586:	f000 fe3f 	bl	800c208 <__any_on>
 800b58a:	4682      	mov	sl, r0
 800b58c:	117b      	asrs	r3, r7, #5
 800b58e:	2101      	movs	r1, #1
 800b590:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b594:	f007 071f 	and.w	r7, r7, #31
 800b598:	fa01 f707 	lsl.w	r7, r1, r7
 800b59c:	421f      	tst	r7, r3
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	bf18      	it	ne
 800b5a4:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5a8:	1b76      	subs	r6, r6, r5
 800b5aa:	f7ff fded 	bl	800b188 <rshift>
 800b5ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5b2:	2702      	movs	r7, #2
 800b5b4:	f1ba 0f00 	cmp.w	sl, #0
 800b5b8:	d048      	beq.n	800b64c <__gethex+0x3f4>
 800b5ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d015      	beq.n	800b5ee <__gethex+0x396>
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d017      	beq.n	800b5f6 <__gethex+0x39e>
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d109      	bne.n	800b5de <__gethex+0x386>
 800b5ca:	f01a 0f02 	tst.w	sl, #2
 800b5ce:	d006      	beq.n	800b5de <__gethex+0x386>
 800b5d0:	f8d9 0000 	ldr.w	r0, [r9]
 800b5d4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b5d8:	f01a 0f01 	tst.w	sl, #1
 800b5dc:	d10e      	bne.n	800b5fc <__gethex+0x3a4>
 800b5de:	f047 0710 	orr.w	r7, r7, #16
 800b5e2:	e033      	b.n	800b64c <__gethex+0x3f4>
 800b5e4:	f04f 0a01 	mov.w	sl, #1
 800b5e8:	e7d0      	b.n	800b58c <__gethex+0x334>
 800b5ea:	2701      	movs	r7, #1
 800b5ec:	e7e2      	b.n	800b5b4 <__gethex+0x35c>
 800b5ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5f0:	f1c3 0301 	rsb	r3, r3, #1
 800b5f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b5f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d0f0      	beq.n	800b5de <__gethex+0x386>
 800b5fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b600:	f104 0314 	add.w	r3, r4, #20
 800b604:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b608:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b60c:	f04f 0c00 	mov.w	ip, #0
 800b610:	4618      	mov	r0, r3
 800b612:	f853 2b04 	ldr.w	r2, [r3], #4
 800b616:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b61a:	d01c      	beq.n	800b656 <__gethex+0x3fe>
 800b61c:	3201      	adds	r2, #1
 800b61e:	6002      	str	r2, [r0, #0]
 800b620:	2f02      	cmp	r7, #2
 800b622:	f104 0314 	add.w	r3, r4, #20
 800b626:	d13f      	bne.n	800b6a8 <__gethex+0x450>
 800b628:	f8d8 2000 	ldr.w	r2, [r8]
 800b62c:	3a01      	subs	r2, #1
 800b62e:	42b2      	cmp	r2, r6
 800b630:	d10a      	bne.n	800b648 <__gethex+0x3f0>
 800b632:	1171      	asrs	r1, r6, #5
 800b634:	2201      	movs	r2, #1
 800b636:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b63a:	f006 061f 	and.w	r6, r6, #31
 800b63e:	fa02 f606 	lsl.w	r6, r2, r6
 800b642:	421e      	tst	r6, r3
 800b644:	bf18      	it	ne
 800b646:	4617      	movne	r7, r2
 800b648:	f047 0720 	orr.w	r7, r7, #32
 800b64c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b64e:	601c      	str	r4, [r3, #0]
 800b650:	9b04      	ldr	r3, [sp, #16]
 800b652:	601d      	str	r5, [r3, #0]
 800b654:	e695      	b.n	800b382 <__gethex+0x12a>
 800b656:	4299      	cmp	r1, r3
 800b658:	f843 cc04 	str.w	ip, [r3, #-4]
 800b65c:	d8d8      	bhi.n	800b610 <__gethex+0x3b8>
 800b65e:	68a3      	ldr	r3, [r4, #8]
 800b660:	459b      	cmp	fp, r3
 800b662:	db19      	blt.n	800b698 <__gethex+0x440>
 800b664:	6861      	ldr	r1, [r4, #4]
 800b666:	ee18 0a10 	vmov	r0, s16
 800b66a:	3101      	adds	r1, #1
 800b66c:	f000 f92c 	bl	800b8c8 <_Balloc>
 800b670:	4681      	mov	r9, r0
 800b672:	b918      	cbnz	r0, 800b67c <__gethex+0x424>
 800b674:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <__gethex+0x488>)
 800b676:	4602      	mov	r2, r0
 800b678:	2184      	movs	r1, #132	; 0x84
 800b67a:	e6a8      	b.n	800b3ce <__gethex+0x176>
 800b67c:	6922      	ldr	r2, [r4, #16]
 800b67e:	3202      	adds	r2, #2
 800b680:	f104 010c 	add.w	r1, r4, #12
 800b684:	0092      	lsls	r2, r2, #2
 800b686:	300c      	adds	r0, #12
 800b688:	f000 f904 	bl	800b894 <memcpy>
 800b68c:	4621      	mov	r1, r4
 800b68e:	ee18 0a10 	vmov	r0, s16
 800b692:	f000 f959 	bl	800b948 <_Bfree>
 800b696:	464c      	mov	r4, r9
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	1c5a      	adds	r2, r3, #1
 800b69c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6a0:	6122      	str	r2, [r4, #16]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	615a      	str	r2, [r3, #20]
 800b6a6:	e7bb      	b.n	800b620 <__gethex+0x3c8>
 800b6a8:	6922      	ldr	r2, [r4, #16]
 800b6aa:	455a      	cmp	r2, fp
 800b6ac:	dd0b      	ble.n	800b6c6 <__gethex+0x46e>
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f7ff fd69 	bl	800b188 <rshift>
 800b6b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6ba:	3501      	adds	r5, #1
 800b6bc:	42ab      	cmp	r3, r5
 800b6be:	f6ff aed0 	blt.w	800b462 <__gethex+0x20a>
 800b6c2:	2701      	movs	r7, #1
 800b6c4:	e7c0      	b.n	800b648 <__gethex+0x3f0>
 800b6c6:	f016 061f 	ands.w	r6, r6, #31
 800b6ca:	d0fa      	beq.n	800b6c2 <__gethex+0x46a>
 800b6cc:	4453      	add	r3, sl
 800b6ce:	f1c6 0620 	rsb	r6, r6, #32
 800b6d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6d6:	f000 f9e9 	bl	800baac <__hi0bits>
 800b6da:	42b0      	cmp	r0, r6
 800b6dc:	dbe7      	blt.n	800b6ae <__gethex+0x456>
 800b6de:	e7f0      	b.n	800b6c2 <__gethex+0x46a>
 800b6e0:	0800d5f0 	.word	0x0800d5f0

0800b6e4 <L_shift>:
 800b6e4:	f1c2 0208 	rsb	r2, r2, #8
 800b6e8:	0092      	lsls	r2, r2, #2
 800b6ea:	b570      	push	{r4, r5, r6, lr}
 800b6ec:	f1c2 0620 	rsb	r6, r2, #32
 800b6f0:	6843      	ldr	r3, [r0, #4]
 800b6f2:	6804      	ldr	r4, [r0, #0]
 800b6f4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6f8:	432c      	orrs	r4, r5
 800b6fa:	40d3      	lsrs	r3, r2
 800b6fc:	6004      	str	r4, [r0, #0]
 800b6fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800b702:	4288      	cmp	r0, r1
 800b704:	d3f4      	bcc.n	800b6f0 <L_shift+0xc>
 800b706:	bd70      	pop	{r4, r5, r6, pc}

0800b708 <__match>:
 800b708:	b530      	push	{r4, r5, lr}
 800b70a:	6803      	ldr	r3, [r0, #0]
 800b70c:	3301      	adds	r3, #1
 800b70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b712:	b914      	cbnz	r4, 800b71a <__match+0x12>
 800b714:	6003      	str	r3, [r0, #0]
 800b716:	2001      	movs	r0, #1
 800b718:	bd30      	pop	{r4, r5, pc}
 800b71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b722:	2d19      	cmp	r5, #25
 800b724:	bf98      	it	ls
 800b726:	3220      	addls	r2, #32
 800b728:	42a2      	cmp	r2, r4
 800b72a:	d0f0      	beq.n	800b70e <__match+0x6>
 800b72c:	2000      	movs	r0, #0
 800b72e:	e7f3      	b.n	800b718 <__match+0x10>

0800b730 <__hexnan>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	680b      	ldr	r3, [r1, #0]
 800b736:	115e      	asrs	r6, r3, #5
 800b738:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b73c:	f013 031f 	ands.w	r3, r3, #31
 800b740:	b087      	sub	sp, #28
 800b742:	bf18      	it	ne
 800b744:	3604      	addne	r6, #4
 800b746:	2500      	movs	r5, #0
 800b748:	1f37      	subs	r7, r6, #4
 800b74a:	4690      	mov	r8, r2
 800b74c:	6802      	ldr	r2, [r0, #0]
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	4682      	mov	sl, r0
 800b752:	f846 5c04 	str.w	r5, [r6, #-4]
 800b756:	46b9      	mov	r9, r7
 800b758:	463c      	mov	r4, r7
 800b75a:	9502      	str	r5, [sp, #8]
 800b75c:	46ab      	mov	fp, r5
 800b75e:	7851      	ldrb	r1, [r2, #1]
 800b760:	1c53      	adds	r3, r2, #1
 800b762:	9303      	str	r3, [sp, #12]
 800b764:	b341      	cbz	r1, 800b7b8 <__hexnan+0x88>
 800b766:	4608      	mov	r0, r1
 800b768:	9205      	str	r2, [sp, #20]
 800b76a:	9104      	str	r1, [sp, #16]
 800b76c:	f7ff fd5e 	bl	800b22c <__hexdig_fun>
 800b770:	2800      	cmp	r0, #0
 800b772:	d14f      	bne.n	800b814 <__hexnan+0xe4>
 800b774:	9904      	ldr	r1, [sp, #16]
 800b776:	9a05      	ldr	r2, [sp, #20]
 800b778:	2920      	cmp	r1, #32
 800b77a:	d818      	bhi.n	800b7ae <__hexnan+0x7e>
 800b77c:	9b02      	ldr	r3, [sp, #8]
 800b77e:	459b      	cmp	fp, r3
 800b780:	dd13      	ble.n	800b7aa <__hexnan+0x7a>
 800b782:	454c      	cmp	r4, r9
 800b784:	d206      	bcs.n	800b794 <__hexnan+0x64>
 800b786:	2d07      	cmp	r5, #7
 800b788:	dc04      	bgt.n	800b794 <__hexnan+0x64>
 800b78a:	462a      	mov	r2, r5
 800b78c:	4649      	mov	r1, r9
 800b78e:	4620      	mov	r0, r4
 800b790:	f7ff ffa8 	bl	800b6e4 <L_shift>
 800b794:	4544      	cmp	r4, r8
 800b796:	d950      	bls.n	800b83a <__hexnan+0x10a>
 800b798:	2300      	movs	r3, #0
 800b79a:	f1a4 0904 	sub.w	r9, r4, #4
 800b79e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7a2:	f8cd b008 	str.w	fp, [sp, #8]
 800b7a6:	464c      	mov	r4, r9
 800b7a8:	461d      	mov	r5, r3
 800b7aa:	9a03      	ldr	r2, [sp, #12]
 800b7ac:	e7d7      	b.n	800b75e <__hexnan+0x2e>
 800b7ae:	2929      	cmp	r1, #41	; 0x29
 800b7b0:	d156      	bne.n	800b860 <__hexnan+0x130>
 800b7b2:	3202      	adds	r2, #2
 800b7b4:	f8ca 2000 	str.w	r2, [sl]
 800b7b8:	f1bb 0f00 	cmp.w	fp, #0
 800b7bc:	d050      	beq.n	800b860 <__hexnan+0x130>
 800b7be:	454c      	cmp	r4, r9
 800b7c0:	d206      	bcs.n	800b7d0 <__hexnan+0xa0>
 800b7c2:	2d07      	cmp	r5, #7
 800b7c4:	dc04      	bgt.n	800b7d0 <__hexnan+0xa0>
 800b7c6:	462a      	mov	r2, r5
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7ff ff8a 	bl	800b6e4 <L_shift>
 800b7d0:	4544      	cmp	r4, r8
 800b7d2:	d934      	bls.n	800b83e <__hexnan+0x10e>
 800b7d4:	f1a8 0204 	sub.w	r2, r8, #4
 800b7d8:	4623      	mov	r3, r4
 800b7da:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7de:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7e2:	429f      	cmp	r7, r3
 800b7e4:	d2f9      	bcs.n	800b7da <__hexnan+0xaa>
 800b7e6:	1b3b      	subs	r3, r7, r4
 800b7e8:	f023 0303 	bic.w	r3, r3, #3
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	3401      	adds	r4, #1
 800b7f0:	3e03      	subs	r6, #3
 800b7f2:	42b4      	cmp	r4, r6
 800b7f4:	bf88      	it	hi
 800b7f6:	2304      	movhi	r3, #4
 800b7f8:	4443      	add	r3, r8
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f843 2b04 	str.w	r2, [r3], #4
 800b800:	429f      	cmp	r7, r3
 800b802:	d2fb      	bcs.n	800b7fc <__hexnan+0xcc>
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	b91b      	cbnz	r3, 800b810 <__hexnan+0xe0>
 800b808:	4547      	cmp	r7, r8
 800b80a:	d127      	bne.n	800b85c <__hexnan+0x12c>
 800b80c:	2301      	movs	r3, #1
 800b80e:	603b      	str	r3, [r7, #0]
 800b810:	2005      	movs	r0, #5
 800b812:	e026      	b.n	800b862 <__hexnan+0x132>
 800b814:	3501      	adds	r5, #1
 800b816:	2d08      	cmp	r5, #8
 800b818:	f10b 0b01 	add.w	fp, fp, #1
 800b81c:	dd06      	ble.n	800b82c <__hexnan+0xfc>
 800b81e:	4544      	cmp	r4, r8
 800b820:	d9c3      	bls.n	800b7aa <__hexnan+0x7a>
 800b822:	2300      	movs	r3, #0
 800b824:	f844 3c04 	str.w	r3, [r4, #-4]
 800b828:	2501      	movs	r5, #1
 800b82a:	3c04      	subs	r4, #4
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	f000 000f 	and.w	r0, r0, #15
 800b832:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b836:	6022      	str	r2, [r4, #0]
 800b838:	e7b7      	b.n	800b7aa <__hexnan+0x7a>
 800b83a:	2508      	movs	r5, #8
 800b83c:	e7b5      	b.n	800b7aa <__hexnan+0x7a>
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d0df      	beq.n	800b804 <__hexnan+0xd4>
 800b844:	f04f 32ff 	mov.w	r2, #4294967295
 800b848:	f1c3 0320 	rsb	r3, r3, #32
 800b84c:	fa22 f303 	lsr.w	r3, r2, r3
 800b850:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b854:	401a      	ands	r2, r3
 800b856:	f846 2c04 	str.w	r2, [r6, #-4]
 800b85a:	e7d3      	b.n	800b804 <__hexnan+0xd4>
 800b85c:	3f04      	subs	r7, #4
 800b85e:	e7d1      	b.n	800b804 <__hexnan+0xd4>
 800b860:	2004      	movs	r0, #4
 800b862:	b007      	add	sp, #28
 800b864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b868 <_localeconv_r>:
 800b868:	4800      	ldr	r0, [pc, #0]	; (800b86c <_localeconv_r+0x4>)
 800b86a:	4770      	bx	lr
 800b86c:	20000164 	.word	0x20000164

0800b870 <__ascii_mbtowc>:
 800b870:	b082      	sub	sp, #8
 800b872:	b901      	cbnz	r1, 800b876 <__ascii_mbtowc+0x6>
 800b874:	a901      	add	r1, sp, #4
 800b876:	b142      	cbz	r2, 800b88a <__ascii_mbtowc+0x1a>
 800b878:	b14b      	cbz	r3, 800b88e <__ascii_mbtowc+0x1e>
 800b87a:	7813      	ldrb	r3, [r2, #0]
 800b87c:	600b      	str	r3, [r1, #0]
 800b87e:	7812      	ldrb	r2, [r2, #0]
 800b880:	1e10      	subs	r0, r2, #0
 800b882:	bf18      	it	ne
 800b884:	2001      	movne	r0, #1
 800b886:	b002      	add	sp, #8
 800b888:	4770      	bx	lr
 800b88a:	4610      	mov	r0, r2
 800b88c:	e7fb      	b.n	800b886 <__ascii_mbtowc+0x16>
 800b88e:	f06f 0001 	mvn.w	r0, #1
 800b892:	e7f8      	b.n	800b886 <__ascii_mbtowc+0x16>

0800b894 <memcpy>:
 800b894:	440a      	add	r2, r1
 800b896:	4291      	cmp	r1, r2
 800b898:	f100 33ff 	add.w	r3, r0, #4294967295
 800b89c:	d100      	bne.n	800b8a0 <memcpy+0xc>
 800b89e:	4770      	bx	lr
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8aa:	4291      	cmp	r1, r2
 800b8ac:	d1f9      	bne.n	800b8a2 <memcpy+0xe>
 800b8ae:	bd10      	pop	{r4, pc}

0800b8b0 <__malloc_lock>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__malloc_lock+0x8>)
 800b8b2:	f001 ba3f 	b.w	800cd34 <__retarget_lock_acquire_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	200005a4 	.word	0x200005a4

0800b8bc <__malloc_unlock>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	; (800b8c4 <__malloc_unlock+0x8>)
 800b8be:	f001 ba3a 	b.w	800cd36 <__retarget_lock_release_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	200005a4 	.word	0x200005a4

0800b8c8 <_Balloc>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	b976      	cbnz	r6, 800b8f0 <_Balloc+0x28>
 800b8d2:	2010      	movs	r0, #16
 800b8d4:	f7fc feac 	bl	8008630 <malloc>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	6260      	str	r0, [r4, #36]	; 0x24
 800b8dc:	b920      	cbnz	r0, 800b8e8 <_Balloc+0x20>
 800b8de:	4b18      	ldr	r3, [pc, #96]	; (800b940 <_Balloc+0x78>)
 800b8e0:	4818      	ldr	r0, [pc, #96]	; (800b944 <_Balloc+0x7c>)
 800b8e2:	2166      	movs	r1, #102	; 0x66
 800b8e4:	f7fe fda6 	bl	800a434 <__assert_func>
 800b8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ec:	6006      	str	r6, [r0, #0]
 800b8ee:	60c6      	str	r6, [r0, #12]
 800b8f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8f2:	68f3      	ldr	r3, [r6, #12]
 800b8f4:	b183      	cbz	r3, 800b918 <_Balloc+0x50>
 800b8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8fe:	b9b8      	cbnz	r0, 800b930 <_Balloc+0x68>
 800b900:	2101      	movs	r1, #1
 800b902:	fa01 f605 	lsl.w	r6, r1, r5
 800b906:	1d72      	adds	r2, r6, #5
 800b908:	0092      	lsls	r2, r2, #2
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fc9d 	bl	800c24a <_calloc_r>
 800b910:	b160      	cbz	r0, 800b92c <_Balloc+0x64>
 800b912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b916:	e00e      	b.n	800b936 <_Balloc+0x6e>
 800b918:	2221      	movs	r2, #33	; 0x21
 800b91a:	2104      	movs	r1, #4
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fc94 	bl	800c24a <_calloc_r>
 800b922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b924:	60f0      	str	r0, [r6, #12]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1e4      	bne.n	800b8f6 <_Balloc+0x2e>
 800b92c:	2000      	movs	r0, #0
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
 800b930:	6802      	ldr	r2, [r0, #0]
 800b932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b936:	2300      	movs	r3, #0
 800b938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b93c:	e7f7      	b.n	800b92e <_Balloc+0x66>
 800b93e:	bf00      	nop
 800b940:	0800d4d8 	.word	0x0800d4d8
 800b944:	0800d67c 	.word	0x0800d67c

0800b948 <_Bfree>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b94c:	4605      	mov	r5, r0
 800b94e:	460c      	mov	r4, r1
 800b950:	b976      	cbnz	r6, 800b970 <_Bfree+0x28>
 800b952:	2010      	movs	r0, #16
 800b954:	f7fc fe6c 	bl	8008630 <malloc>
 800b958:	4602      	mov	r2, r0
 800b95a:	6268      	str	r0, [r5, #36]	; 0x24
 800b95c:	b920      	cbnz	r0, 800b968 <_Bfree+0x20>
 800b95e:	4b09      	ldr	r3, [pc, #36]	; (800b984 <_Bfree+0x3c>)
 800b960:	4809      	ldr	r0, [pc, #36]	; (800b988 <_Bfree+0x40>)
 800b962:	218a      	movs	r1, #138	; 0x8a
 800b964:	f7fe fd66 	bl	800a434 <__assert_func>
 800b968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b96c:	6006      	str	r6, [r0, #0]
 800b96e:	60c6      	str	r6, [r0, #12]
 800b970:	b13c      	cbz	r4, 800b982 <_Bfree+0x3a>
 800b972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b974:	6862      	ldr	r2, [r4, #4]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b97c:	6021      	str	r1, [r4, #0]
 800b97e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	0800d4d8 	.word	0x0800d4d8
 800b988:	0800d67c 	.word	0x0800d67c

0800b98c <__multadd>:
 800b98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b990:	690d      	ldr	r5, [r1, #16]
 800b992:	4607      	mov	r7, r0
 800b994:	460c      	mov	r4, r1
 800b996:	461e      	mov	r6, r3
 800b998:	f101 0c14 	add.w	ip, r1, #20
 800b99c:	2000      	movs	r0, #0
 800b99e:	f8dc 3000 	ldr.w	r3, [ip]
 800b9a2:	b299      	uxth	r1, r3
 800b9a4:	fb02 6101 	mla	r1, r2, r1, r6
 800b9a8:	0c1e      	lsrs	r6, r3, #16
 800b9aa:	0c0b      	lsrs	r3, r1, #16
 800b9ac:	fb02 3306 	mla	r3, r2, r6, r3
 800b9b0:	b289      	uxth	r1, r1
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9b8:	4285      	cmp	r5, r0
 800b9ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b9be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9c2:	dcec      	bgt.n	800b99e <__multadd+0x12>
 800b9c4:	b30e      	cbz	r6, 800ba0a <__multadd+0x7e>
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	42ab      	cmp	r3, r5
 800b9ca:	dc19      	bgt.n	800ba00 <__multadd+0x74>
 800b9cc:	6861      	ldr	r1, [r4, #4]
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	3101      	adds	r1, #1
 800b9d2:	f7ff ff79 	bl	800b8c8 <_Balloc>
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	b928      	cbnz	r0, 800b9e6 <__multadd+0x5a>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <__multadd+0x84>)
 800b9de:	480d      	ldr	r0, [pc, #52]	; (800ba14 <__multadd+0x88>)
 800b9e0:	21b5      	movs	r1, #181	; 0xb5
 800b9e2:	f7fe fd27 	bl	800a434 <__assert_func>
 800b9e6:	6922      	ldr	r2, [r4, #16]
 800b9e8:	3202      	adds	r2, #2
 800b9ea:	f104 010c 	add.w	r1, r4, #12
 800b9ee:	0092      	lsls	r2, r2, #2
 800b9f0:	300c      	adds	r0, #12
 800b9f2:	f7ff ff4f 	bl	800b894 <memcpy>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	f7ff ffa5 	bl	800b948 <_Bfree>
 800b9fe:	4644      	mov	r4, r8
 800ba00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba04:	3501      	adds	r5, #1
 800ba06:	615e      	str	r6, [r3, #20]
 800ba08:	6125      	str	r5, [r4, #16]
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba10:	0800d5f0 	.word	0x0800d5f0
 800ba14:	0800d67c 	.word	0x0800d67c

0800ba18 <__s2b>:
 800ba18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	4615      	mov	r5, r2
 800ba20:	461f      	mov	r7, r3
 800ba22:	2209      	movs	r2, #9
 800ba24:	3308      	adds	r3, #8
 800ba26:	4606      	mov	r6, r0
 800ba28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	2201      	movs	r2, #1
 800ba30:	429a      	cmp	r2, r3
 800ba32:	db09      	blt.n	800ba48 <__s2b+0x30>
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff ff47 	bl	800b8c8 <_Balloc>
 800ba3a:	b940      	cbnz	r0, 800ba4e <__s2b+0x36>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	4b19      	ldr	r3, [pc, #100]	; (800baa4 <__s2b+0x8c>)
 800ba40:	4819      	ldr	r0, [pc, #100]	; (800baa8 <__s2b+0x90>)
 800ba42:	21ce      	movs	r1, #206	; 0xce
 800ba44:	f7fe fcf6 	bl	800a434 <__assert_func>
 800ba48:	0052      	lsls	r2, r2, #1
 800ba4a:	3101      	adds	r1, #1
 800ba4c:	e7f0      	b.n	800ba30 <__s2b+0x18>
 800ba4e:	9b08      	ldr	r3, [sp, #32]
 800ba50:	6143      	str	r3, [r0, #20]
 800ba52:	2d09      	cmp	r5, #9
 800ba54:	f04f 0301 	mov.w	r3, #1
 800ba58:	6103      	str	r3, [r0, #16]
 800ba5a:	dd16      	ble.n	800ba8a <__s2b+0x72>
 800ba5c:	f104 0909 	add.w	r9, r4, #9
 800ba60:	46c8      	mov	r8, r9
 800ba62:	442c      	add	r4, r5
 800ba64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba68:	4601      	mov	r1, r0
 800ba6a:	3b30      	subs	r3, #48	; 0x30
 800ba6c:	220a      	movs	r2, #10
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff ff8c 	bl	800b98c <__multadd>
 800ba74:	45a0      	cmp	r8, r4
 800ba76:	d1f5      	bne.n	800ba64 <__s2b+0x4c>
 800ba78:	f1a5 0408 	sub.w	r4, r5, #8
 800ba7c:	444c      	add	r4, r9
 800ba7e:	1b2d      	subs	r5, r5, r4
 800ba80:	1963      	adds	r3, r4, r5
 800ba82:	42bb      	cmp	r3, r7
 800ba84:	db04      	blt.n	800ba90 <__s2b+0x78>
 800ba86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba8a:	340a      	adds	r4, #10
 800ba8c:	2509      	movs	r5, #9
 800ba8e:	e7f6      	b.n	800ba7e <__s2b+0x66>
 800ba90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba94:	4601      	mov	r1, r0
 800ba96:	3b30      	subs	r3, #48	; 0x30
 800ba98:	220a      	movs	r2, #10
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f7ff ff76 	bl	800b98c <__multadd>
 800baa0:	e7ee      	b.n	800ba80 <__s2b+0x68>
 800baa2:	bf00      	nop
 800baa4:	0800d5f0 	.word	0x0800d5f0
 800baa8:	0800d67c 	.word	0x0800d67c

0800baac <__hi0bits>:
 800baac:	0c03      	lsrs	r3, r0, #16
 800baae:	041b      	lsls	r3, r3, #16
 800bab0:	b9d3      	cbnz	r3, 800bae8 <__hi0bits+0x3c>
 800bab2:	0400      	lsls	r0, r0, #16
 800bab4:	2310      	movs	r3, #16
 800bab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baba:	bf04      	itt	eq
 800babc:	0200      	lsleq	r0, r0, #8
 800babe:	3308      	addeq	r3, #8
 800bac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bac4:	bf04      	itt	eq
 800bac6:	0100      	lsleq	r0, r0, #4
 800bac8:	3304      	addeq	r3, #4
 800baca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bace:	bf04      	itt	eq
 800bad0:	0080      	lsleq	r0, r0, #2
 800bad2:	3302      	addeq	r3, #2
 800bad4:	2800      	cmp	r0, #0
 800bad6:	db05      	blt.n	800bae4 <__hi0bits+0x38>
 800bad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800badc:	f103 0301 	add.w	r3, r3, #1
 800bae0:	bf08      	it	eq
 800bae2:	2320      	moveq	r3, #32
 800bae4:	4618      	mov	r0, r3
 800bae6:	4770      	bx	lr
 800bae8:	2300      	movs	r3, #0
 800baea:	e7e4      	b.n	800bab6 <__hi0bits+0xa>

0800baec <__lo0bits>:
 800baec:	6803      	ldr	r3, [r0, #0]
 800baee:	f013 0207 	ands.w	r2, r3, #7
 800baf2:	4601      	mov	r1, r0
 800baf4:	d00b      	beq.n	800bb0e <__lo0bits+0x22>
 800baf6:	07da      	lsls	r2, r3, #31
 800baf8:	d423      	bmi.n	800bb42 <__lo0bits+0x56>
 800bafa:	0798      	lsls	r0, r3, #30
 800bafc:	bf49      	itett	mi
 800bafe:	085b      	lsrmi	r3, r3, #1
 800bb00:	089b      	lsrpl	r3, r3, #2
 800bb02:	2001      	movmi	r0, #1
 800bb04:	600b      	strmi	r3, [r1, #0]
 800bb06:	bf5c      	itt	pl
 800bb08:	600b      	strpl	r3, [r1, #0]
 800bb0a:	2002      	movpl	r0, #2
 800bb0c:	4770      	bx	lr
 800bb0e:	b298      	uxth	r0, r3
 800bb10:	b9a8      	cbnz	r0, 800bb3e <__lo0bits+0x52>
 800bb12:	0c1b      	lsrs	r3, r3, #16
 800bb14:	2010      	movs	r0, #16
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	b90a      	cbnz	r2, 800bb1e <__lo0bits+0x32>
 800bb1a:	3008      	adds	r0, #8
 800bb1c:	0a1b      	lsrs	r3, r3, #8
 800bb1e:	071a      	lsls	r2, r3, #28
 800bb20:	bf04      	itt	eq
 800bb22:	091b      	lsreq	r3, r3, #4
 800bb24:	3004      	addeq	r0, #4
 800bb26:	079a      	lsls	r2, r3, #30
 800bb28:	bf04      	itt	eq
 800bb2a:	089b      	lsreq	r3, r3, #2
 800bb2c:	3002      	addeq	r0, #2
 800bb2e:	07da      	lsls	r2, r3, #31
 800bb30:	d403      	bmi.n	800bb3a <__lo0bits+0x4e>
 800bb32:	085b      	lsrs	r3, r3, #1
 800bb34:	f100 0001 	add.w	r0, r0, #1
 800bb38:	d005      	beq.n	800bb46 <__lo0bits+0x5a>
 800bb3a:	600b      	str	r3, [r1, #0]
 800bb3c:	4770      	bx	lr
 800bb3e:	4610      	mov	r0, r2
 800bb40:	e7e9      	b.n	800bb16 <__lo0bits+0x2a>
 800bb42:	2000      	movs	r0, #0
 800bb44:	4770      	bx	lr
 800bb46:	2020      	movs	r0, #32
 800bb48:	4770      	bx	lr
	...

0800bb4c <__i2b>:
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	460c      	mov	r4, r1
 800bb50:	2101      	movs	r1, #1
 800bb52:	f7ff feb9 	bl	800b8c8 <_Balloc>
 800bb56:	4602      	mov	r2, r0
 800bb58:	b928      	cbnz	r0, 800bb66 <__i2b+0x1a>
 800bb5a:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <__i2b+0x24>)
 800bb5c:	4805      	ldr	r0, [pc, #20]	; (800bb74 <__i2b+0x28>)
 800bb5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb62:	f7fe fc67 	bl	800a434 <__assert_func>
 800bb66:	2301      	movs	r3, #1
 800bb68:	6144      	str	r4, [r0, #20]
 800bb6a:	6103      	str	r3, [r0, #16]
 800bb6c:	bd10      	pop	{r4, pc}
 800bb6e:	bf00      	nop
 800bb70:	0800d5f0 	.word	0x0800d5f0
 800bb74:	0800d67c 	.word	0x0800d67c

0800bb78 <__multiply>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	4691      	mov	r9, r2
 800bb7e:	690a      	ldr	r2, [r1, #16]
 800bb80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	bfb8      	it	lt
 800bb88:	460b      	movlt	r3, r1
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	bfbc      	itt	lt
 800bb8e:	464c      	movlt	r4, r9
 800bb90:	4699      	movlt	r9, r3
 800bb92:	6927      	ldr	r7, [r4, #16]
 800bb94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb98:	68a3      	ldr	r3, [r4, #8]
 800bb9a:	6861      	ldr	r1, [r4, #4]
 800bb9c:	eb07 060a 	add.w	r6, r7, sl
 800bba0:	42b3      	cmp	r3, r6
 800bba2:	b085      	sub	sp, #20
 800bba4:	bfb8      	it	lt
 800bba6:	3101      	addlt	r1, #1
 800bba8:	f7ff fe8e 	bl	800b8c8 <_Balloc>
 800bbac:	b930      	cbnz	r0, 800bbbc <__multiply+0x44>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	4b44      	ldr	r3, [pc, #272]	; (800bcc4 <__multiply+0x14c>)
 800bbb2:	4845      	ldr	r0, [pc, #276]	; (800bcc8 <__multiply+0x150>)
 800bbb4:	f240 115d 	movw	r1, #349	; 0x15d
 800bbb8:	f7fe fc3c 	bl	800a434 <__assert_func>
 800bbbc:	f100 0514 	add.w	r5, r0, #20
 800bbc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbc4:	462b      	mov	r3, r5
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	4543      	cmp	r3, r8
 800bbca:	d321      	bcc.n	800bc10 <__multiply+0x98>
 800bbcc:	f104 0314 	add.w	r3, r4, #20
 800bbd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbd4:	f109 0314 	add.w	r3, r9, #20
 800bbd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbdc:	9202      	str	r2, [sp, #8]
 800bbde:	1b3a      	subs	r2, r7, r4
 800bbe0:	3a15      	subs	r2, #21
 800bbe2:	f022 0203 	bic.w	r2, r2, #3
 800bbe6:	3204      	adds	r2, #4
 800bbe8:	f104 0115 	add.w	r1, r4, #21
 800bbec:	428f      	cmp	r7, r1
 800bbee:	bf38      	it	cc
 800bbf0:	2204      	movcc	r2, #4
 800bbf2:	9201      	str	r2, [sp, #4]
 800bbf4:	9a02      	ldr	r2, [sp, #8]
 800bbf6:	9303      	str	r3, [sp, #12]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d80c      	bhi.n	800bc16 <__multiply+0x9e>
 800bbfc:	2e00      	cmp	r6, #0
 800bbfe:	dd03      	ble.n	800bc08 <__multiply+0x90>
 800bc00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d05a      	beq.n	800bcbe <__multiply+0x146>
 800bc08:	6106      	str	r6, [r0, #16]
 800bc0a:	b005      	add	sp, #20
 800bc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc10:	f843 2b04 	str.w	r2, [r3], #4
 800bc14:	e7d8      	b.n	800bbc8 <__multiply+0x50>
 800bc16:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc1a:	f1ba 0f00 	cmp.w	sl, #0
 800bc1e:	d024      	beq.n	800bc6a <__multiply+0xf2>
 800bc20:	f104 0e14 	add.w	lr, r4, #20
 800bc24:	46a9      	mov	r9, r5
 800bc26:	f04f 0c00 	mov.w	ip, #0
 800bc2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc2e:	f8d9 1000 	ldr.w	r1, [r9]
 800bc32:	fa1f fb82 	uxth.w	fp, r2
 800bc36:	b289      	uxth	r1, r1
 800bc38:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc40:	f8d9 2000 	ldr.w	r2, [r9]
 800bc44:	4461      	add	r1, ip
 800bc46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc52:	b289      	uxth	r1, r1
 800bc54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc58:	4577      	cmp	r7, lr
 800bc5a:	f849 1b04 	str.w	r1, [r9], #4
 800bc5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc62:	d8e2      	bhi.n	800bc2a <__multiply+0xb2>
 800bc64:	9a01      	ldr	r2, [sp, #4]
 800bc66:	f845 c002 	str.w	ip, [r5, r2]
 800bc6a:	9a03      	ldr	r2, [sp, #12]
 800bc6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc70:	3304      	adds	r3, #4
 800bc72:	f1b9 0f00 	cmp.w	r9, #0
 800bc76:	d020      	beq.n	800bcba <__multiply+0x142>
 800bc78:	6829      	ldr	r1, [r5, #0]
 800bc7a:	f104 0c14 	add.w	ip, r4, #20
 800bc7e:	46ae      	mov	lr, r5
 800bc80:	f04f 0a00 	mov.w	sl, #0
 800bc84:	f8bc b000 	ldrh.w	fp, [ip]
 800bc88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc8c:	fb09 220b 	mla	r2, r9, fp, r2
 800bc90:	4492      	add	sl, r2
 800bc92:	b289      	uxth	r1, r1
 800bc94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bc98:	f84e 1b04 	str.w	r1, [lr], #4
 800bc9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bca0:	f8be 1000 	ldrh.w	r1, [lr]
 800bca4:	0c12      	lsrs	r2, r2, #16
 800bca6:	fb09 1102 	mla	r1, r9, r2, r1
 800bcaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcae:	4567      	cmp	r7, ip
 800bcb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcb4:	d8e6      	bhi.n	800bc84 <__multiply+0x10c>
 800bcb6:	9a01      	ldr	r2, [sp, #4]
 800bcb8:	50a9      	str	r1, [r5, r2]
 800bcba:	3504      	adds	r5, #4
 800bcbc:	e79a      	b.n	800bbf4 <__multiply+0x7c>
 800bcbe:	3e01      	subs	r6, #1
 800bcc0:	e79c      	b.n	800bbfc <__multiply+0x84>
 800bcc2:	bf00      	nop
 800bcc4:	0800d5f0 	.word	0x0800d5f0
 800bcc8:	0800d67c 	.word	0x0800d67c

0800bccc <__pow5mult>:
 800bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd0:	4615      	mov	r5, r2
 800bcd2:	f012 0203 	ands.w	r2, r2, #3
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	460f      	mov	r7, r1
 800bcda:	d007      	beq.n	800bcec <__pow5mult+0x20>
 800bcdc:	4c25      	ldr	r4, [pc, #148]	; (800bd74 <__pow5mult+0xa8>)
 800bcde:	3a01      	subs	r2, #1
 800bce0:	2300      	movs	r3, #0
 800bce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bce6:	f7ff fe51 	bl	800b98c <__multadd>
 800bcea:	4607      	mov	r7, r0
 800bcec:	10ad      	asrs	r5, r5, #2
 800bcee:	d03d      	beq.n	800bd6c <__pow5mult+0xa0>
 800bcf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bcf2:	b97c      	cbnz	r4, 800bd14 <__pow5mult+0x48>
 800bcf4:	2010      	movs	r0, #16
 800bcf6:	f7fc fc9b 	bl	8008630 <malloc>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	6270      	str	r0, [r6, #36]	; 0x24
 800bcfe:	b928      	cbnz	r0, 800bd0c <__pow5mult+0x40>
 800bd00:	4b1d      	ldr	r3, [pc, #116]	; (800bd78 <__pow5mult+0xac>)
 800bd02:	481e      	ldr	r0, [pc, #120]	; (800bd7c <__pow5mult+0xb0>)
 800bd04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd08:	f7fe fb94 	bl	800a434 <__assert_func>
 800bd0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd10:	6004      	str	r4, [r0, #0]
 800bd12:	60c4      	str	r4, [r0, #12]
 800bd14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd1c:	b94c      	cbnz	r4, 800bd32 <__pow5mult+0x66>
 800bd1e:	f240 2171 	movw	r1, #625	; 0x271
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7ff ff12 	bl	800bb4c <__i2b>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd2e:	4604      	mov	r4, r0
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	f04f 0900 	mov.w	r9, #0
 800bd36:	07eb      	lsls	r3, r5, #31
 800bd38:	d50a      	bpl.n	800bd50 <__pow5mult+0x84>
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f7ff ff1a 	bl	800bb78 <__multiply>
 800bd44:	4639      	mov	r1, r7
 800bd46:	4680      	mov	r8, r0
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7ff fdfd 	bl	800b948 <_Bfree>
 800bd4e:	4647      	mov	r7, r8
 800bd50:	106d      	asrs	r5, r5, #1
 800bd52:	d00b      	beq.n	800bd6c <__pow5mult+0xa0>
 800bd54:	6820      	ldr	r0, [r4, #0]
 800bd56:	b938      	cbnz	r0, 800bd68 <__pow5mult+0x9c>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7ff ff0b 	bl	800bb78 <__multiply>
 800bd62:	6020      	str	r0, [r4, #0]
 800bd64:	f8c0 9000 	str.w	r9, [r0]
 800bd68:	4604      	mov	r4, r0
 800bd6a:	e7e4      	b.n	800bd36 <__pow5mult+0x6a>
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd72:	bf00      	nop
 800bd74:	0800d7c8 	.word	0x0800d7c8
 800bd78:	0800d4d8 	.word	0x0800d4d8
 800bd7c:	0800d67c 	.word	0x0800d67c

0800bd80 <__lshift>:
 800bd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd84:	460c      	mov	r4, r1
 800bd86:	6849      	ldr	r1, [r1, #4]
 800bd88:	6923      	ldr	r3, [r4, #16]
 800bd8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	4607      	mov	r7, r0
 800bd92:	4691      	mov	r9, r2
 800bd94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd98:	f108 0601 	add.w	r6, r8, #1
 800bd9c:	42b3      	cmp	r3, r6
 800bd9e:	db0b      	blt.n	800bdb8 <__lshift+0x38>
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7ff fd91 	bl	800b8c8 <_Balloc>
 800bda6:	4605      	mov	r5, r0
 800bda8:	b948      	cbnz	r0, 800bdbe <__lshift+0x3e>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	4b2a      	ldr	r3, [pc, #168]	; (800be58 <__lshift+0xd8>)
 800bdae:	482b      	ldr	r0, [pc, #172]	; (800be5c <__lshift+0xdc>)
 800bdb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdb4:	f7fe fb3e 	bl	800a434 <__assert_func>
 800bdb8:	3101      	adds	r1, #1
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	e7ee      	b.n	800bd9c <__lshift+0x1c>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f100 0114 	add.w	r1, r0, #20
 800bdc4:	f100 0210 	add.w	r2, r0, #16
 800bdc8:	4618      	mov	r0, r3
 800bdca:	4553      	cmp	r3, sl
 800bdcc:	db37      	blt.n	800be3e <__lshift+0xbe>
 800bdce:	6920      	ldr	r0, [r4, #16]
 800bdd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdd4:	f104 0314 	add.w	r3, r4, #20
 800bdd8:	f019 091f 	ands.w	r9, r9, #31
 800bddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bde0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bde4:	d02f      	beq.n	800be46 <__lshift+0xc6>
 800bde6:	f1c9 0e20 	rsb	lr, r9, #32
 800bdea:	468a      	mov	sl, r1
 800bdec:	f04f 0c00 	mov.w	ip, #0
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	fa02 f209 	lsl.w	r2, r2, r9
 800bdf6:	ea42 020c 	orr.w	r2, r2, ip
 800bdfa:	f84a 2b04 	str.w	r2, [sl], #4
 800bdfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800be02:	4298      	cmp	r0, r3
 800be04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be08:	d8f2      	bhi.n	800bdf0 <__lshift+0x70>
 800be0a:	1b03      	subs	r3, r0, r4
 800be0c:	3b15      	subs	r3, #21
 800be0e:	f023 0303 	bic.w	r3, r3, #3
 800be12:	3304      	adds	r3, #4
 800be14:	f104 0215 	add.w	r2, r4, #21
 800be18:	4290      	cmp	r0, r2
 800be1a:	bf38      	it	cc
 800be1c:	2304      	movcc	r3, #4
 800be1e:	f841 c003 	str.w	ip, [r1, r3]
 800be22:	f1bc 0f00 	cmp.w	ip, #0
 800be26:	d001      	beq.n	800be2c <__lshift+0xac>
 800be28:	f108 0602 	add.w	r6, r8, #2
 800be2c:	3e01      	subs	r6, #1
 800be2e:	4638      	mov	r0, r7
 800be30:	612e      	str	r6, [r5, #16]
 800be32:	4621      	mov	r1, r4
 800be34:	f7ff fd88 	bl	800b948 <_Bfree>
 800be38:	4628      	mov	r0, r5
 800be3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800be42:	3301      	adds	r3, #1
 800be44:	e7c1      	b.n	800bdca <__lshift+0x4a>
 800be46:	3904      	subs	r1, #4
 800be48:	f853 2b04 	ldr.w	r2, [r3], #4
 800be4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800be50:	4298      	cmp	r0, r3
 800be52:	d8f9      	bhi.n	800be48 <__lshift+0xc8>
 800be54:	e7ea      	b.n	800be2c <__lshift+0xac>
 800be56:	bf00      	nop
 800be58:	0800d5f0 	.word	0x0800d5f0
 800be5c:	0800d67c 	.word	0x0800d67c

0800be60 <__mcmp>:
 800be60:	b530      	push	{r4, r5, lr}
 800be62:	6902      	ldr	r2, [r0, #16]
 800be64:	690c      	ldr	r4, [r1, #16]
 800be66:	1b12      	subs	r2, r2, r4
 800be68:	d10e      	bne.n	800be88 <__mcmp+0x28>
 800be6a:	f100 0314 	add.w	r3, r0, #20
 800be6e:	3114      	adds	r1, #20
 800be70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be80:	42a5      	cmp	r5, r4
 800be82:	d003      	beq.n	800be8c <__mcmp+0x2c>
 800be84:	d305      	bcc.n	800be92 <__mcmp+0x32>
 800be86:	2201      	movs	r2, #1
 800be88:	4610      	mov	r0, r2
 800be8a:	bd30      	pop	{r4, r5, pc}
 800be8c:	4283      	cmp	r3, r0
 800be8e:	d3f3      	bcc.n	800be78 <__mcmp+0x18>
 800be90:	e7fa      	b.n	800be88 <__mcmp+0x28>
 800be92:	f04f 32ff 	mov.w	r2, #4294967295
 800be96:	e7f7      	b.n	800be88 <__mcmp+0x28>

0800be98 <__mdiff>:
 800be98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	460c      	mov	r4, r1
 800be9e:	4606      	mov	r6, r0
 800bea0:	4611      	mov	r1, r2
 800bea2:	4620      	mov	r0, r4
 800bea4:	4690      	mov	r8, r2
 800bea6:	f7ff ffdb 	bl	800be60 <__mcmp>
 800beaa:	1e05      	subs	r5, r0, #0
 800beac:	d110      	bne.n	800bed0 <__mdiff+0x38>
 800beae:	4629      	mov	r1, r5
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7ff fd09 	bl	800b8c8 <_Balloc>
 800beb6:	b930      	cbnz	r0, 800bec6 <__mdiff+0x2e>
 800beb8:	4b3a      	ldr	r3, [pc, #232]	; (800bfa4 <__mdiff+0x10c>)
 800beba:	4602      	mov	r2, r0
 800bebc:	f240 2132 	movw	r1, #562	; 0x232
 800bec0:	4839      	ldr	r0, [pc, #228]	; (800bfa8 <__mdiff+0x110>)
 800bec2:	f7fe fab7 	bl	800a434 <__assert_func>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800becc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed0:	bfa4      	itt	ge
 800bed2:	4643      	movge	r3, r8
 800bed4:	46a0      	movge	r8, r4
 800bed6:	4630      	mov	r0, r6
 800bed8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bedc:	bfa6      	itte	ge
 800bede:	461c      	movge	r4, r3
 800bee0:	2500      	movge	r5, #0
 800bee2:	2501      	movlt	r5, #1
 800bee4:	f7ff fcf0 	bl	800b8c8 <_Balloc>
 800bee8:	b920      	cbnz	r0, 800bef4 <__mdiff+0x5c>
 800beea:	4b2e      	ldr	r3, [pc, #184]	; (800bfa4 <__mdiff+0x10c>)
 800beec:	4602      	mov	r2, r0
 800beee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bef2:	e7e5      	b.n	800bec0 <__mdiff+0x28>
 800bef4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bef8:	6926      	ldr	r6, [r4, #16]
 800befa:	60c5      	str	r5, [r0, #12]
 800befc:	f104 0914 	add.w	r9, r4, #20
 800bf00:	f108 0514 	add.w	r5, r8, #20
 800bf04:	f100 0e14 	add.w	lr, r0, #20
 800bf08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf10:	f108 0210 	add.w	r2, r8, #16
 800bf14:	46f2      	mov	sl, lr
 800bf16:	2100      	movs	r1, #0
 800bf18:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf20:	fa1f f883 	uxth.w	r8, r3
 800bf24:	fa11 f18b 	uxtah	r1, r1, fp
 800bf28:	0c1b      	lsrs	r3, r3, #16
 800bf2a:	eba1 0808 	sub.w	r8, r1, r8
 800bf2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf36:	fa1f f888 	uxth.w	r8, r8
 800bf3a:	1419      	asrs	r1, r3, #16
 800bf3c:	454e      	cmp	r6, r9
 800bf3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf42:	f84a 3b04 	str.w	r3, [sl], #4
 800bf46:	d8e7      	bhi.n	800bf18 <__mdiff+0x80>
 800bf48:	1b33      	subs	r3, r6, r4
 800bf4a:	3b15      	subs	r3, #21
 800bf4c:	f023 0303 	bic.w	r3, r3, #3
 800bf50:	3304      	adds	r3, #4
 800bf52:	3415      	adds	r4, #21
 800bf54:	42a6      	cmp	r6, r4
 800bf56:	bf38      	it	cc
 800bf58:	2304      	movcc	r3, #4
 800bf5a:	441d      	add	r5, r3
 800bf5c:	4473      	add	r3, lr
 800bf5e:	469e      	mov	lr, r3
 800bf60:	462e      	mov	r6, r5
 800bf62:	4566      	cmp	r6, ip
 800bf64:	d30e      	bcc.n	800bf84 <__mdiff+0xec>
 800bf66:	f10c 0203 	add.w	r2, ip, #3
 800bf6a:	1b52      	subs	r2, r2, r5
 800bf6c:	f022 0203 	bic.w	r2, r2, #3
 800bf70:	3d03      	subs	r5, #3
 800bf72:	45ac      	cmp	ip, r5
 800bf74:	bf38      	it	cc
 800bf76:	2200      	movcc	r2, #0
 800bf78:	441a      	add	r2, r3
 800bf7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf7e:	b17b      	cbz	r3, 800bfa0 <__mdiff+0x108>
 800bf80:	6107      	str	r7, [r0, #16]
 800bf82:	e7a3      	b.n	800becc <__mdiff+0x34>
 800bf84:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf88:	fa11 f288 	uxtah	r2, r1, r8
 800bf8c:	1414      	asrs	r4, r2, #16
 800bf8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf92:	b292      	uxth	r2, r2
 800bf94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf98:	f84e 2b04 	str.w	r2, [lr], #4
 800bf9c:	1421      	asrs	r1, r4, #16
 800bf9e:	e7e0      	b.n	800bf62 <__mdiff+0xca>
 800bfa0:	3f01      	subs	r7, #1
 800bfa2:	e7ea      	b.n	800bf7a <__mdiff+0xe2>
 800bfa4:	0800d5f0 	.word	0x0800d5f0
 800bfa8:	0800d67c 	.word	0x0800d67c

0800bfac <__ulp>:
 800bfac:	b082      	sub	sp, #8
 800bfae:	ed8d 0b00 	vstr	d0, [sp]
 800bfb2:	9b01      	ldr	r3, [sp, #4]
 800bfb4:	4912      	ldr	r1, [pc, #72]	; (800c000 <__ulp+0x54>)
 800bfb6:	4019      	ands	r1, r3
 800bfb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	dd05      	ble.n	800bfcc <__ulp+0x20>
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	ec43 2b10 	vmov	d0, r2, r3
 800bfc8:	b002      	add	sp, #8
 800bfca:	4770      	bx	lr
 800bfcc:	4249      	negs	r1, r1
 800bfce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bfd2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bfd6:	f04f 0200 	mov.w	r2, #0
 800bfda:	f04f 0300 	mov.w	r3, #0
 800bfde:	da04      	bge.n	800bfea <__ulp+0x3e>
 800bfe0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bfe4:	fa41 f300 	asr.w	r3, r1, r0
 800bfe8:	e7ec      	b.n	800bfc4 <__ulp+0x18>
 800bfea:	f1a0 0114 	sub.w	r1, r0, #20
 800bfee:	291e      	cmp	r1, #30
 800bff0:	bfda      	itte	le
 800bff2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bff6:	fa20 f101 	lsrle.w	r1, r0, r1
 800bffa:	2101      	movgt	r1, #1
 800bffc:	460a      	mov	r2, r1
 800bffe:	e7e1      	b.n	800bfc4 <__ulp+0x18>
 800c000:	7ff00000 	.word	0x7ff00000

0800c004 <__b2d>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	6905      	ldr	r5, [r0, #16]
 800c008:	f100 0714 	add.w	r7, r0, #20
 800c00c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c010:	1f2e      	subs	r6, r5, #4
 800c012:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c016:	4620      	mov	r0, r4
 800c018:	f7ff fd48 	bl	800baac <__hi0bits>
 800c01c:	f1c0 0320 	rsb	r3, r0, #32
 800c020:	280a      	cmp	r0, #10
 800c022:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c0a0 <__b2d+0x9c>
 800c026:	600b      	str	r3, [r1, #0]
 800c028:	dc14      	bgt.n	800c054 <__b2d+0x50>
 800c02a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c02e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c032:	42b7      	cmp	r7, r6
 800c034:	ea41 030c 	orr.w	r3, r1, ip
 800c038:	bf34      	ite	cc
 800c03a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c03e:	2100      	movcs	r1, #0
 800c040:	3015      	adds	r0, #21
 800c042:	fa04 f000 	lsl.w	r0, r4, r0
 800c046:	fa21 f10e 	lsr.w	r1, r1, lr
 800c04a:	ea40 0201 	orr.w	r2, r0, r1
 800c04e:	ec43 2b10 	vmov	d0, r2, r3
 800c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c054:	42b7      	cmp	r7, r6
 800c056:	bf3a      	itte	cc
 800c058:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c05c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c060:	2100      	movcs	r1, #0
 800c062:	380b      	subs	r0, #11
 800c064:	d017      	beq.n	800c096 <__b2d+0x92>
 800c066:	f1c0 0c20 	rsb	ip, r0, #32
 800c06a:	fa04 f500 	lsl.w	r5, r4, r0
 800c06e:	42be      	cmp	r6, r7
 800c070:	fa21 f40c 	lsr.w	r4, r1, ip
 800c074:	ea45 0504 	orr.w	r5, r5, r4
 800c078:	bf8c      	ite	hi
 800c07a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c07e:	2400      	movls	r4, #0
 800c080:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c084:	fa01 f000 	lsl.w	r0, r1, r0
 800c088:	fa24 f40c 	lsr.w	r4, r4, ip
 800c08c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c090:	ea40 0204 	orr.w	r2, r0, r4
 800c094:	e7db      	b.n	800c04e <__b2d+0x4a>
 800c096:	ea44 030c 	orr.w	r3, r4, ip
 800c09a:	460a      	mov	r2, r1
 800c09c:	e7d7      	b.n	800c04e <__b2d+0x4a>
 800c09e:	bf00      	nop
 800c0a0:	3ff00000 	.word	0x3ff00000

0800c0a4 <__d2b>:
 800c0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0a8:	4689      	mov	r9, r1
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	ec57 6b10 	vmov	r6, r7, d0
 800c0b0:	4690      	mov	r8, r2
 800c0b2:	f7ff fc09 	bl	800b8c8 <_Balloc>
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	b930      	cbnz	r0, 800c0c8 <__d2b+0x24>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	4b25      	ldr	r3, [pc, #148]	; (800c154 <__d2b+0xb0>)
 800c0be:	4826      	ldr	r0, [pc, #152]	; (800c158 <__d2b+0xb4>)
 800c0c0:	f240 310a 	movw	r1, #778	; 0x30a
 800c0c4:	f7fe f9b6 	bl	800a434 <__assert_func>
 800c0c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0d0:	bb35      	cbnz	r5, 800c120 <__d2b+0x7c>
 800c0d2:	2e00      	cmp	r6, #0
 800c0d4:	9301      	str	r3, [sp, #4]
 800c0d6:	d028      	beq.n	800c12a <__d2b+0x86>
 800c0d8:	4668      	mov	r0, sp
 800c0da:	9600      	str	r6, [sp, #0]
 800c0dc:	f7ff fd06 	bl	800baec <__lo0bits>
 800c0e0:	9900      	ldr	r1, [sp, #0]
 800c0e2:	b300      	cbz	r0, 800c126 <__d2b+0x82>
 800c0e4:	9a01      	ldr	r2, [sp, #4]
 800c0e6:	f1c0 0320 	rsb	r3, r0, #32
 800c0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ee:	430b      	orrs	r3, r1
 800c0f0:	40c2      	lsrs	r2, r0
 800c0f2:	6163      	str	r3, [r4, #20]
 800c0f4:	9201      	str	r2, [sp, #4]
 800c0f6:	9b01      	ldr	r3, [sp, #4]
 800c0f8:	61a3      	str	r3, [r4, #24]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	bf14      	ite	ne
 800c0fe:	2202      	movne	r2, #2
 800c100:	2201      	moveq	r2, #1
 800c102:	6122      	str	r2, [r4, #16]
 800c104:	b1d5      	cbz	r5, 800c13c <__d2b+0x98>
 800c106:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c10a:	4405      	add	r5, r0
 800c10c:	f8c9 5000 	str.w	r5, [r9]
 800c110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c114:	f8c8 0000 	str.w	r0, [r8]
 800c118:	4620      	mov	r0, r4
 800c11a:	b003      	add	sp, #12
 800c11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c124:	e7d5      	b.n	800c0d2 <__d2b+0x2e>
 800c126:	6161      	str	r1, [r4, #20]
 800c128:	e7e5      	b.n	800c0f6 <__d2b+0x52>
 800c12a:	a801      	add	r0, sp, #4
 800c12c:	f7ff fcde 	bl	800baec <__lo0bits>
 800c130:	9b01      	ldr	r3, [sp, #4]
 800c132:	6163      	str	r3, [r4, #20]
 800c134:	2201      	movs	r2, #1
 800c136:	6122      	str	r2, [r4, #16]
 800c138:	3020      	adds	r0, #32
 800c13a:	e7e3      	b.n	800c104 <__d2b+0x60>
 800c13c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c144:	f8c9 0000 	str.w	r0, [r9]
 800c148:	6918      	ldr	r0, [r3, #16]
 800c14a:	f7ff fcaf 	bl	800baac <__hi0bits>
 800c14e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c152:	e7df      	b.n	800c114 <__d2b+0x70>
 800c154:	0800d5f0 	.word	0x0800d5f0
 800c158:	0800d67c 	.word	0x0800d67c

0800c15c <__ratio>:
 800c15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c160:	4688      	mov	r8, r1
 800c162:	4669      	mov	r1, sp
 800c164:	4681      	mov	r9, r0
 800c166:	f7ff ff4d 	bl	800c004 <__b2d>
 800c16a:	a901      	add	r1, sp, #4
 800c16c:	4640      	mov	r0, r8
 800c16e:	ec55 4b10 	vmov	r4, r5, d0
 800c172:	f7ff ff47 	bl	800c004 <__b2d>
 800c176:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c17a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c17e:	eba3 0c02 	sub.w	ip, r3, r2
 800c182:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c186:	1a9b      	subs	r3, r3, r2
 800c188:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c18c:	ec51 0b10 	vmov	r0, r1, d0
 800c190:	2b00      	cmp	r3, #0
 800c192:	bfd6      	itet	le
 800c194:	460a      	movle	r2, r1
 800c196:	462a      	movgt	r2, r5
 800c198:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c19c:	468b      	mov	fp, r1
 800c19e:	462f      	mov	r7, r5
 800c1a0:	bfd4      	ite	le
 800c1a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c1a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	ee10 2a10 	vmov	r2, s0
 800c1b0:	465b      	mov	r3, fp
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	f7f4 fb7a 	bl	80008ac <__aeabi_ddiv>
 800c1b8:	ec41 0b10 	vmov	d0, r0, r1
 800c1bc:	b003      	add	sp, #12
 800c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1c2 <__copybits>:
 800c1c2:	3901      	subs	r1, #1
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	1149      	asrs	r1, r1, #5
 800c1c8:	6914      	ldr	r4, [r2, #16]
 800c1ca:	3101      	adds	r1, #1
 800c1cc:	f102 0314 	add.w	r3, r2, #20
 800c1d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1d8:	1f05      	subs	r5, r0, #4
 800c1da:	42a3      	cmp	r3, r4
 800c1dc:	d30c      	bcc.n	800c1f8 <__copybits+0x36>
 800c1de:	1aa3      	subs	r3, r4, r2
 800c1e0:	3b11      	subs	r3, #17
 800c1e2:	f023 0303 	bic.w	r3, r3, #3
 800c1e6:	3211      	adds	r2, #17
 800c1e8:	42a2      	cmp	r2, r4
 800c1ea:	bf88      	it	hi
 800c1ec:	2300      	movhi	r3, #0
 800c1ee:	4418      	add	r0, r3
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4288      	cmp	r0, r1
 800c1f4:	d305      	bcc.n	800c202 <__copybits+0x40>
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c200:	e7eb      	b.n	800c1da <__copybits+0x18>
 800c202:	f840 3b04 	str.w	r3, [r0], #4
 800c206:	e7f4      	b.n	800c1f2 <__copybits+0x30>

0800c208 <__any_on>:
 800c208:	f100 0214 	add.w	r2, r0, #20
 800c20c:	6900      	ldr	r0, [r0, #16]
 800c20e:	114b      	asrs	r3, r1, #5
 800c210:	4298      	cmp	r0, r3
 800c212:	b510      	push	{r4, lr}
 800c214:	db11      	blt.n	800c23a <__any_on+0x32>
 800c216:	dd0a      	ble.n	800c22e <__any_on+0x26>
 800c218:	f011 011f 	ands.w	r1, r1, #31
 800c21c:	d007      	beq.n	800c22e <__any_on+0x26>
 800c21e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c222:	fa24 f001 	lsr.w	r0, r4, r1
 800c226:	fa00 f101 	lsl.w	r1, r0, r1
 800c22a:	428c      	cmp	r4, r1
 800c22c:	d10b      	bne.n	800c246 <__any_on+0x3e>
 800c22e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c232:	4293      	cmp	r3, r2
 800c234:	d803      	bhi.n	800c23e <__any_on+0x36>
 800c236:	2000      	movs	r0, #0
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	4603      	mov	r3, r0
 800c23c:	e7f7      	b.n	800c22e <__any_on+0x26>
 800c23e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c242:	2900      	cmp	r1, #0
 800c244:	d0f5      	beq.n	800c232 <__any_on+0x2a>
 800c246:	2001      	movs	r0, #1
 800c248:	e7f6      	b.n	800c238 <__any_on+0x30>

0800c24a <_calloc_r>:
 800c24a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c24c:	fba1 2402 	umull	r2, r4, r1, r2
 800c250:	b94c      	cbnz	r4, 800c266 <_calloc_r+0x1c>
 800c252:	4611      	mov	r1, r2
 800c254:	9201      	str	r2, [sp, #4]
 800c256:	f7fc fa6f 	bl	8008738 <_malloc_r>
 800c25a:	9a01      	ldr	r2, [sp, #4]
 800c25c:	4605      	mov	r5, r0
 800c25e:	b930      	cbnz	r0, 800c26e <_calloc_r+0x24>
 800c260:	4628      	mov	r0, r5
 800c262:	b003      	add	sp, #12
 800c264:	bd30      	pop	{r4, r5, pc}
 800c266:	220c      	movs	r2, #12
 800c268:	6002      	str	r2, [r0, #0]
 800c26a:	2500      	movs	r5, #0
 800c26c:	e7f8      	b.n	800c260 <_calloc_r+0x16>
 800c26e:	4621      	mov	r1, r4
 800c270:	f7fc f9ee 	bl	8008650 <memset>
 800c274:	e7f4      	b.n	800c260 <_calloc_r+0x16>

0800c276 <__ssputs_r>:
 800c276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c27a:	688e      	ldr	r6, [r1, #8]
 800c27c:	429e      	cmp	r6, r3
 800c27e:	4682      	mov	sl, r0
 800c280:	460c      	mov	r4, r1
 800c282:	4690      	mov	r8, r2
 800c284:	461f      	mov	r7, r3
 800c286:	d838      	bhi.n	800c2fa <__ssputs_r+0x84>
 800c288:	898a      	ldrh	r2, [r1, #12]
 800c28a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c28e:	d032      	beq.n	800c2f6 <__ssputs_r+0x80>
 800c290:	6825      	ldr	r5, [r4, #0]
 800c292:	6909      	ldr	r1, [r1, #16]
 800c294:	eba5 0901 	sub.w	r9, r5, r1
 800c298:	6965      	ldr	r5, [r4, #20]
 800c29a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c29e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	444b      	add	r3, r9
 800c2a6:	106d      	asrs	r5, r5, #1
 800c2a8:	429d      	cmp	r5, r3
 800c2aa:	bf38      	it	cc
 800c2ac:	461d      	movcc	r5, r3
 800c2ae:	0553      	lsls	r3, r2, #21
 800c2b0:	d531      	bpl.n	800c316 <__ssputs_r+0xa0>
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	f7fc fa40 	bl	8008738 <_malloc_r>
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	b950      	cbnz	r0, 800c2d2 <__ssputs_r+0x5c>
 800c2bc:	230c      	movs	r3, #12
 800c2be:	f8ca 3000 	str.w	r3, [sl]
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c8:	81a3      	strh	r3, [r4, #12]
 800c2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d2:	6921      	ldr	r1, [r4, #16]
 800c2d4:	464a      	mov	r2, r9
 800c2d6:	f7ff fadd 	bl	800b894 <memcpy>
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	6126      	str	r6, [r4, #16]
 800c2e8:	6165      	str	r5, [r4, #20]
 800c2ea:	444e      	add	r6, r9
 800c2ec:	eba5 0509 	sub.w	r5, r5, r9
 800c2f0:	6026      	str	r6, [r4, #0]
 800c2f2:	60a5      	str	r5, [r4, #8]
 800c2f4:	463e      	mov	r6, r7
 800c2f6:	42be      	cmp	r6, r7
 800c2f8:	d900      	bls.n	800c2fc <__ssputs_r+0x86>
 800c2fa:	463e      	mov	r6, r7
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	4632      	mov	r2, r6
 800c300:	4641      	mov	r1, r8
 800c302:	f000 fd7f 	bl	800ce04 <memmove>
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	1b9b      	subs	r3, r3, r6
 800c30a:	60a3      	str	r3, [r4, #8]
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	4433      	add	r3, r6
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	2000      	movs	r0, #0
 800c314:	e7db      	b.n	800c2ce <__ssputs_r+0x58>
 800c316:	462a      	mov	r2, r5
 800c318:	f000 fd8e 	bl	800ce38 <_realloc_r>
 800c31c:	4606      	mov	r6, r0
 800c31e:	2800      	cmp	r0, #0
 800c320:	d1e1      	bne.n	800c2e6 <__ssputs_r+0x70>
 800c322:	6921      	ldr	r1, [r4, #16]
 800c324:	4650      	mov	r0, sl
 800c326:	f7fc f99b 	bl	8008660 <_free_r>
 800c32a:	e7c7      	b.n	800c2bc <__ssputs_r+0x46>

0800c32c <_svfiprintf_r>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	4698      	mov	r8, r3
 800c332:	898b      	ldrh	r3, [r1, #12]
 800c334:	061b      	lsls	r3, r3, #24
 800c336:	b09d      	sub	sp, #116	; 0x74
 800c338:	4607      	mov	r7, r0
 800c33a:	460d      	mov	r5, r1
 800c33c:	4614      	mov	r4, r2
 800c33e:	d50e      	bpl.n	800c35e <_svfiprintf_r+0x32>
 800c340:	690b      	ldr	r3, [r1, #16]
 800c342:	b963      	cbnz	r3, 800c35e <_svfiprintf_r+0x32>
 800c344:	2140      	movs	r1, #64	; 0x40
 800c346:	f7fc f9f7 	bl	8008738 <_malloc_r>
 800c34a:	6028      	str	r0, [r5, #0]
 800c34c:	6128      	str	r0, [r5, #16]
 800c34e:	b920      	cbnz	r0, 800c35a <_svfiprintf_r+0x2e>
 800c350:	230c      	movs	r3, #12
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	f04f 30ff 	mov.w	r0, #4294967295
 800c358:	e0d1      	b.n	800c4fe <_svfiprintf_r+0x1d2>
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	616b      	str	r3, [r5, #20]
 800c35e:	2300      	movs	r3, #0
 800c360:	9309      	str	r3, [sp, #36]	; 0x24
 800c362:	2320      	movs	r3, #32
 800c364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c368:	f8cd 800c 	str.w	r8, [sp, #12]
 800c36c:	2330      	movs	r3, #48	; 0x30
 800c36e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c518 <_svfiprintf_r+0x1ec>
 800c372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c376:	f04f 0901 	mov.w	r9, #1
 800c37a:	4623      	mov	r3, r4
 800c37c:	469a      	mov	sl, r3
 800c37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c382:	b10a      	cbz	r2, 800c388 <_svfiprintf_r+0x5c>
 800c384:	2a25      	cmp	r2, #37	; 0x25
 800c386:	d1f9      	bne.n	800c37c <_svfiprintf_r+0x50>
 800c388:	ebba 0b04 	subs.w	fp, sl, r4
 800c38c:	d00b      	beq.n	800c3a6 <_svfiprintf_r+0x7a>
 800c38e:	465b      	mov	r3, fp
 800c390:	4622      	mov	r2, r4
 800c392:	4629      	mov	r1, r5
 800c394:	4638      	mov	r0, r7
 800c396:	f7ff ff6e 	bl	800c276 <__ssputs_r>
 800c39a:	3001      	adds	r0, #1
 800c39c:	f000 80aa 	beq.w	800c4f4 <_svfiprintf_r+0x1c8>
 800c3a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a2:	445a      	add	r2, fp
 800c3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 80a2 	beq.w	800c4f4 <_svfiprintf_r+0x1c8>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3ba:	f10a 0a01 	add.w	sl, sl, #1
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	9307      	str	r3, [sp, #28]
 800c3c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3c6:	931a      	str	r3, [sp, #104]	; 0x68
 800c3c8:	4654      	mov	r4, sl
 800c3ca:	2205      	movs	r2, #5
 800c3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3d0:	4851      	ldr	r0, [pc, #324]	; (800c518 <_svfiprintf_r+0x1ec>)
 800c3d2:	f7f3 ff35 	bl	8000240 <memchr>
 800c3d6:	9a04      	ldr	r2, [sp, #16]
 800c3d8:	b9d8      	cbnz	r0, 800c412 <_svfiprintf_r+0xe6>
 800c3da:	06d0      	lsls	r0, r2, #27
 800c3dc:	bf44      	itt	mi
 800c3de:	2320      	movmi	r3, #32
 800c3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3e4:	0711      	lsls	r1, r2, #28
 800c3e6:	bf44      	itt	mi
 800c3e8:	232b      	movmi	r3, #43	; 0x2b
 800c3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3f4:	d015      	beq.n	800c422 <_svfiprintf_r+0xf6>
 800c3f6:	9a07      	ldr	r2, [sp, #28]
 800c3f8:	4654      	mov	r4, sl
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	f04f 0c0a 	mov.w	ip, #10
 800c400:	4621      	mov	r1, r4
 800c402:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c406:	3b30      	subs	r3, #48	; 0x30
 800c408:	2b09      	cmp	r3, #9
 800c40a:	d94e      	bls.n	800c4aa <_svfiprintf_r+0x17e>
 800c40c:	b1b0      	cbz	r0, 800c43c <_svfiprintf_r+0x110>
 800c40e:	9207      	str	r2, [sp, #28]
 800c410:	e014      	b.n	800c43c <_svfiprintf_r+0x110>
 800c412:	eba0 0308 	sub.w	r3, r0, r8
 800c416:	fa09 f303 	lsl.w	r3, r9, r3
 800c41a:	4313      	orrs	r3, r2
 800c41c:	9304      	str	r3, [sp, #16]
 800c41e:	46a2      	mov	sl, r4
 800c420:	e7d2      	b.n	800c3c8 <_svfiprintf_r+0x9c>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	1d19      	adds	r1, r3, #4
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	9103      	str	r1, [sp, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	bfbb      	ittet	lt
 800c42e:	425b      	neglt	r3, r3
 800c430:	f042 0202 	orrlt.w	r2, r2, #2
 800c434:	9307      	strge	r3, [sp, #28]
 800c436:	9307      	strlt	r3, [sp, #28]
 800c438:	bfb8      	it	lt
 800c43a:	9204      	strlt	r2, [sp, #16]
 800c43c:	7823      	ldrb	r3, [r4, #0]
 800c43e:	2b2e      	cmp	r3, #46	; 0x2e
 800c440:	d10c      	bne.n	800c45c <_svfiprintf_r+0x130>
 800c442:	7863      	ldrb	r3, [r4, #1]
 800c444:	2b2a      	cmp	r3, #42	; 0x2a
 800c446:	d135      	bne.n	800c4b4 <_svfiprintf_r+0x188>
 800c448:	9b03      	ldr	r3, [sp, #12]
 800c44a:	1d1a      	adds	r2, r3, #4
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	9203      	str	r2, [sp, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	bfb8      	it	lt
 800c454:	f04f 33ff 	movlt.w	r3, #4294967295
 800c458:	3402      	adds	r4, #2
 800c45a:	9305      	str	r3, [sp, #20]
 800c45c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c528 <_svfiprintf_r+0x1fc>
 800c460:	7821      	ldrb	r1, [r4, #0]
 800c462:	2203      	movs	r2, #3
 800c464:	4650      	mov	r0, sl
 800c466:	f7f3 feeb 	bl	8000240 <memchr>
 800c46a:	b140      	cbz	r0, 800c47e <_svfiprintf_r+0x152>
 800c46c:	2340      	movs	r3, #64	; 0x40
 800c46e:	eba0 000a 	sub.w	r0, r0, sl
 800c472:	fa03 f000 	lsl.w	r0, r3, r0
 800c476:	9b04      	ldr	r3, [sp, #16]
 800c478:	4303      	orrs	r3, r0
 800c47a:	3401      	adds	r4, #1
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c482:	4826      	ldr	r0, [pc, #152]	; (800c51c <_svfiprintf_r+0x1f0>)
 800c484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c488:	2206      	movs	r2, #6
 800c48a:	f7f3 fed9 	bl	8000240 <memchr>
 800c48e:	2800      	cmp	r0, #0
 800c490:	d038      	beq.n	800c504 <_svfiprintf_r+0x1d8>
 800c492:	4b23      	ldr	r3, [pc, #140]	; (800c520 <_svfiprintf_r+0x1f4>)
 800c494:	bb1b      	cbnz	r3, 800c4de <_svfiprintf_r+0x1b2>
 800c496:	9b03      	ldr	r3, [sp, #12]
 800c498:	3307      	adds	r3, #7
 800c49a:	f023 0307 	bic.w	r3, r3, #7
 800c49e:	3308      	adds	r3, #8
 800c4a0:	9303      	str	r3, [sp, #12]
 800c4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a4:	4433      	add	r3, r6
 800c4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a8:	e767      	b.n	800c37a <_svfiprintf_r+0x4e>
 800c4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	2001      	movs	r0, #1
 800c4b2:	e7a5      	b.n	800c400 <_svfiprintf_r+0xd4>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	3401      	adds	r4, #1
 800c4b8:	9305      	str	r3, [sp, #20]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	f04f 0c0a 	mov.w	ip, #10
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4c6:	3a30      	subs	r2, #48	; 0x30
 800c4c8:	2a09      	cmp	r2, #9
 800c4ca:	d903      	bls.n	800c4d4 <_svfiprintf_r+0x1a8>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d0c5      	beq.n	800c45c <_svfiprintf_r+0x130>
 800c4d0:	9105      	str	r1, [sp, #20]
 800c4d2:	e7c3      	b.n	800c45c <_svfiprintf_r+0x130>
 800c4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4d8:	4604      	mov	r4, r0
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e7f0      	b.n	800c4c0 <_svfiprintf_r+0x194>
 800c4de:	ab03      	add	r3, sp, #12
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	462a      	mov	r2, r5
 800c4e4:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <_svfiprintf_r+0x1f8>)
 800c4e6:	a904      	add	r1, sp, #16
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f7fc fa39 	bl	8008960 <_printf_float>
 800c4ee:	1c42      	adds	r2, r0, #1
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	d1d6      	bne.n	800c4a2 <_svfiprintf_r+0x176>
 800c4f4:	89ab      	ldrh	r3, [r5, #12]
 800c4f6:	065b      	lsls	r3, r3, #25
 800c4f8:	f53f af2c 	bmi.w	800c354 <_svfiprintf_r+0x28>
 800c4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4fe:	b01d      	add	sp, #116	; 0x74
 800c500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c504:	ab03      	add	r3, sp, #12
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	462a      	mov	r2, r5
 800c50a:	4b06      	ldr	r3, [pc, #24]	; (800c524 <_svfiprintf_r+0x1f8>)
 800c50c:	a904      	add	r1, sp, #16
 800c50e:	4638      	mov	r0, r7
 800c510:	f7fc fcca 	bl	8008ea8 <_printf_i>
 800c514:	e7eb      	b.n	800c4ee <_svfiprintf_r+0x1c2>
 800c516:	bf00      	nop
 800c518:	0800d7d4 	.word	0x0800d7d4
 800c51c:	0800d7de 	.word	0x0800d7de
 800c520:	08008961 	.word	0x08008961
 800c524:	0800c277 	.word	0x0800c277
 800c528:	0800d7da 	.word	0x0800d7da

0800c52c <__sfputc_r>:
 800c52c:	6893      	ldr	r3, [r2, #8]
 800c52e:	3b01      	subs	r3, #1
 800c530:	2b00      	cmp	r3, #0
 800c532:	b410      	push	{r4}
 800c534:	6093      	str	r3, [r2, #8]
 800c536:	da08      	bge.n	800c54a <__sfputc_r+0x1e>
 800c538:	6994      	ldr	r4, [r2, #24]
 800c53a:	42a3      	cmp	r3, r4
 800c53c:	db01      	blt.n	800c542 <__sfputc_r+0x16>
 800c53e:	290a      	cmp	r1, #10
 800c540:	d103      	bne.n	800c54a <__sfputc_r+0x1e>
 800c542:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c546:	f000 b967 	b.w	800c818 <__swbuf_r>
 800c54a:	6813      	ldr	r3, [r2, #0]
 800c54c:	1c58      	adds	r0, r3, #1
 800c54e:	6010      	str	r0, [r2, #0]
 800c550:	7019      	strb	r1, [r3, #0]
 800c552:	4608      	mov	r0, r1
 800c554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <__sfputs_r>:
 800c55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55c:	4606      	mov	r6, r0
 800c55e:	460f      	mov	r7, r1
 800c560:	4614      	mov	r4, r2
 800c562:	18d5      	adds	r5, r2, r3
 800c564:	42ac      	cmp	r4, r5
 800c566:	d101      	bne.n	800c56c <__sfputs_r+0x12>
 800c568:	2000      	movs	r0, #0
 800c56a:	e007      	b.n	800c57c <__sfputs_r+0x22>
 800c56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c570:	463a      	mov	r2, r7
 800c572:	4630      	mov	r0, r6
 800c574:	f7ff ffda 	bl	800c52c <__sfputc_r>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d1f3      	bne.n	800c564 <__sfputs_r+0xa>
 800c57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c580 <_vfiprintf_r>:
 800c580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c584:	460d      	mov	r5, r1
 800c586:	b09d      	sub	sp, #116	; 0x74
 800c588:	4614      	mov	r4, r2
 800c58a:	4698      	mov	r8, r3
 800c58c:	4606      	mov	r6, r0
 800c58e:	b118      	cbz	r0, 800c598 <_vfiprintf_r+0x18>
 800c590:	6983      	ldr	r3, [r0, #24]
 800c592:	b90b      	cbnz	r3, 800c598 <_vfiprintf_r+0x18>
 800c594:	f000 fb30 	bl	800cbf8 <__sinit>
 800c598:	4b89      	ldr	r3, [pc, #548]	; (800c7c0 <_vfiprintf_r+0x240>)
 800c59a:	429d      	cmp	r5, r3
 800c59c:	d11b      	bne.n	800c5d6 <_vfiprintf_r+0x56>
 800c59e:	6875      	ldr	r5, [r6, #4]
 800c5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5a2:	07d9      	lsls	r1, r3, #31
 800c5a4:	d405      	bmi.n	800c5b2 <_vfiprintf_r+0x32>
 800c5a6:	89ab      	ldrh	r3, [r5, #12]
 800c5a8:	059a      	lsls	r2, r3, #22
 800c5aa:	d402      	bmi.n	800c5b2 <_vfiprintf_r+0x32>
 800c5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ae:	f000 fbc1 	bl	800cd34 <__retarget_lock_acquire_recursive>
 800c5b2:	89ab      	ldrh	r3, [r5, #12]
 800c5b4:	071b      	lsls	r3, r3, #28
 800c5b6:	d501      	bpl.n	800c5bc <_vfiprintf_r+0x3c>
 800c5b8:	692b      	ldr	r3, [r5, #16]
 800c5ba:	b9eb      	cbnz	r3, 800c5f8 <_vfiprintf_r+0x78>
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f000 f98a 	bl	800c8d8 <__swsetup_r>
 800c5c4:	b1c0      	cbz	r0, 800c5f8 <_vfiprintf_r+0x78>
 800c5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5c8:	07dc      	lsls	r4, r3, #31
 800c5ca:	d50e      	bpl.n	800c5ea <_vfiprintf_r+0x6a>
 800c5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d0:	b01d      	add	sp, #116	; 0x74
 800c5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d6:	4b7b      	ldr	r3, [pc, #492]	; (800c7c4 <_vfiprintf_r+0x244>)
 800c5d8:	429d      	cmp	r5, r3
 800c5da:	d101      	bne.n	800c5e0 <_vfiprintf_r+0x60>
 800c5dc:	68b5      	ldr	r5, [r6, #8]
 800c5de:	e7df      	b.n	800c5a0 <_vfiprintf_r+0x20>
 800c5e0:	4b79      	ldr	r3, [pc, #484]	; (800c7c8 <_vfiprintf_r+0x248>)
 800c5e2:	429d      	cmp	r5, r3
 800c5e4:	bf08      	it	eq
 800c5e6:	68f5      	ldreq	r5, [r6, #12]
 800c5e8:	e7da      	b.n	800c5a0 <_vfiprintf_r+0x20>
 800c5ea:	89ab      	ldrh	r3, [r5, #12]
 800c5ec:	0598      	lsls	r0, r3, #22
 800c5ee:	d4ed      	bmi.n	800c5cc <_vfiprintf_r+0x4c>
 800c5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5f2:	f000 fba0 	bl	800cd36 <__retarget_lock_release_recursive>
 800c5f6:	e7e9      	b.n	800c5cc <_vfiprintf_r+0x4c>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c5fc:	2320      	movs	r3, #32
 800c5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c602:	f8cd 800c 	str.w	r8, [sp, #12]
 800c606:	2330      	movs	r3, #48	; 0x30
 800c608:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7cc <_vfiprintf_r+0x24c>
 800c60c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c610:	f04f 0901 	mov.w	r9, #1
 800c614:	4623      	mov	r3, r4
 800c616:	469a      	mov	sl, r3
 800c618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c61c:	b10a      	cbz	r2, 800c622 <_vfiprintf_r+0xa2>
 800c61e:	2a25      	cmp	r2, #37	; 0x25
 800c620:	d1f9      	bne.n	800c616 <_vfiprintf_r+0x96>
 800c622:	ebba 0b04 	subs.w	fp, sl, r4
 800c626:	d00b      	beq.n	800c640 <_vfiprintf_r+0xc0>
 800c628:	465b      	mov	r3, fp
 800c62a:	4622      	mov	r2, r4
 800c62c:	4629      	mov	r1, r5
 800c62e:	4630      	mov	r0, r6
 800c630:	f7ff ff93 	bl	800c55a <__sfputs_r>
 800c634:	3001      	adds	r0, #1
 800c636:	f000 80aa 	beq.w	800c78e <_vfiprintf_r+0x20e>
 800c63a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c63c:	445a      	add	r2, fp
 800c63e:	9209      	str	r2, [sp, #36]	; 0x24
 800c640:	f89a 3000 	ldrb.w	r3, [sl]
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 80a2 	beq.w	800c78e <_vfiprintf_r+0x20e>
 800c64a:	2300      	movs	r3, #0
 800c64c:	f04f 32ff 	mov.w	r2, #4294967295
 800c650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c654:	f10a 0a01 	add.w	sl, sl, #1
 800c658:	9304      	str	r3, [sp, #16]
 800c65a:	9307      	str	r3, [sp, #28]
 800c65c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c660:	931a      	str	r3, [sp, #104]	; 0x68
 800c662:	4654      	mov	r4, sl
 800c664:	2205      	movs	r2, #5
 800c666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c66a:	4858      	ldr	r0, [pc, #352]	; (800c7cc <_vfiprintf_r+0x24c>)
 800c66c:	f7f3 fde8 	bl	8000240 <memchr>
 800c670:	9a04      	ldr	r2, [sp, #16]
 800c672:	b9d8      	cbnz	r0, 800c6ac <_vfiprintf_r+0x12c>
 800c674:	06d1      	lsls	r1, r2, #27
 800c676:	bf44      	itt	mi
 800c678:	2320      	movmi	r3, #32
 800c67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c67e:	0713      	lsls	r3, r2, #28
 800c680:	bf44      	itt	mi
 800c682:	232b      	movmi	r3, #43	; 0x2b
 800c684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c688:	f89a 3000 	ldrb.w	r3, [sl]
 800c68c:	2b2a      	cmp	r3, #42	; 0x2a
 800c68e:	d015      	beq.n	800c6bc <_vfiprintf_r+0x13c>
 800c690:	9a07      	ldr	r2, [sp, #28]
 800c692:	4654      	mov	r4, sl
 800c694:	2000      	movs	r0, #0
 800c696:	f04f 0c0a 	mov.w	ip, #10
 800c69a:	4621      	mov	r1, r4
 800c69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6a0:	3b30      	subs	r3, #48	; 0x30
 800c6a2:	2b09      	cmp	r3, #9
 800c6a4:	d94e      	bls.n	800c744 <_vfiprintf_r+0x1c4>
 800c6a6:	b1b0      	cbz	r0, 800c6d6 <_vfiprintf_r+0x156>
 800c6a8:	9207      	str	r2, [sp, #28]
 800c6aa:	e014      	b.n	800c6d6 <_vfiprintf_r+0x156>
 800c6ac:	eba0 0308 	sub.w	r3, r0, r8
 800c6b0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	46a2      	mov	sl, r4
 800c6ba:	e7d2      	b.n	800c662 <_vfiprintf_r+0xe2>
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	1d19      	adds	r1, r3, #4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	9103      	str	r1, [sp, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bfbb      	ittet	lt
 800c6c8:	425b      	neglt	r3, r3
 800c6ca:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ce:	9307      	strge	r3, [sp, #28]
 800c6d0:	9307      	strlt	r3, [sp, #28]
 800c6d2:	bfb8      	it	lt
 800c6d4:	9204      	strlt	r2, [sp, #16]
 800c6d6:	7823      	ldrb	r3, [r4, #0]
 800c6d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6da:	d10c      	bne.n	800c6f6 <_vfiprintf_r+0x176>
 800c6dc:	7863      	ldrb	r3, [r4, #1]
 800c6de:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e0:	d135      	bne.n	800c74e <_vfiprintf_r+0x1ce>
 800c6e2:	9b03      	ldr	r3, [sp, #12]
 800c6e4:	1d1a      	adds	r2, r3, #4
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	9203      	str	r2, [sp, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bfb8      	it	lt
 800c6ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6f2:	3402      	adds	r4, #2
 800c6f4:	9305      	str	r3, [sp, #20]
 800c6f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7dc <_vfiprintf_r+0x25c>
 800c6fa:	7821      	ldrb	r1, [r4, #0]
 800c6fc:	2203      	movs	r2, #3
 800c6fe:	4650      	mov	r0, sl
 800c700:	f7f3 fd9e 	bl	8000240 <memchr>
 800c704:	b140      	cbz	r0, 800c718 <_vfiprintf_r+0x198>
 800c706:	2340      	movs	r3, #64	; 0x40
 800c708:	eba0 000a 	sub.w	r0, r0, sl
 800c70c:	fa03 f000 	lsl.w	r0, r3, r0
 800c710:	9b04      	ldr	r3, [sp, #16]
 800c712:	4303      	orrs	r3, r0
 800c714:	3401      	adds	r4, #1
 800c716:	9304      	str	r3, [sp, #16]
 800c718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71c:	482c      	ldr	r0, [pc, #176]	; (800c7d0 <_vfiprintf_r+0x250>)
 800c71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c722:	2206      	movs	r2, #6
 800c724:	f7f3 fd8c 	bl	8000240 <memchr>
 800c728:	2800      	cmp	r0, #0
 800c72a:	d03f      	beq.n	800c7ac <_vfiprintf_r+0x22c>
 800c72c:	4b29      	ldr	r3, [pc, #164]	; (800c7d4 <_vfiprintf_r+0x254>)
 800c72e:	bb1b      	cbnz	r3, 800c778 <_vfiprintf_r+0x1f8>
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	3307      	adds	r3, #7
 800c734:	f023 0307 	bic.w	r3, r3, #7
 800c738:	3308      	adds	r3, #8
 800c73a:	9303      	str	r3, [sp, #12]
 800c73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73e:	443b      	add	r3, r7
 800c740:	9309      	str	r3, [sp, #36]	; 0x24
 800c742:	e767      	b.n	800c614 <_vfiprintf_r+0x94>
 800c744:	fb0c 3202 	mla	r2, ip, r2, r3
 800c748:	460c      	mov	r4, r1
 800c74a:	2001      	movs	r0, #1
 800c74c:	e7a5      	b.n	800c69a <_vfiprintf_r+0x11a>
 800c74e:	2300      	movs	r3, #0
 800c750:	3401      	adds	r4, #1
 800c752:	9305      	str	r3, [sp, #20]
 800c754:	4619      	mov	r1, r3
 800c756:	f04f 0c0a 	mov.w	ip, #10
 800c75a:	4620      	mov	r0, r4
 800c75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c760:	3a30      	subs	r2, #48	; 0x30
 800c762:	2a09      	cmp	r2, #9
 800c764:	d903      	bls.n	800c76e <_vfiprintf_r+0x1ee>
 800c766:	2b00      	cmp	r3, #0
 800c768:	d0c5      	beq.n	800c6f6 <_vfiprintf_r+0x176>
 800c76a:	9105      	str	r1, [sp, #20]
 800c76c:	e7c3      	b.n	800c6f6 <_vfiprintf_r+0x176>
 800c76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c772:	4604      	mov	r4, r0
 800c774:	2301      	movs	r3, #1
 800c776:	e7f0      	b.n	800c75a <_vfiprintf_r+0x1da>
 800c778:	ab03      	add	r3, sp, #12
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	462a      	mov	r2, r5
 800c77e:	4b16      	ldr	r3, [pc, #88]	; (800c7d8 <_vfiprintf_r+0x258>)
 800c780:	a904      	add	r1, sp, #16
 800c782:	4630      	mov	r0, r6
 800c784:	f7fc f8ec 	bl	8008960 <_printf_float>
 800c788:	4607      	mov	r7, r0
 800c78a:	1c78      	adds	r0, r7, #1
 800c78c:	d1d6      	bne.n	800c73c <_vfiprintf_r+0x1bc>
 800c78e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c790:	07d9      	lsls	r1, r3, #31
 800c792:	d405      	bmi.n	800c7a0 <_vfiprintf_r+0x220>
 800c794:	89ab      	ldrh	r3, [r5, #12]
 800c796:	059a      	lsls	r2, r3, #22
 800c798:	d402      	bmi.n	800c7a0 <_vfiprintf_r+0x220>
 800c79a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c79c:	f000 facb 	bl	800cd36 <__retarget_lock_release_recursive>
 800c7a0:	89ab      	ldrh	r3, [r5, #12]
 800c7a2:	065b      	lsls	r3, r3, #25
 800c7a4:	f53f af12 	bmi.w	800c5cc <_vfiprintf_r+0x4c>
 800c7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7aa:	e711      	b.n	800c5d0 <_vfiprintf_r+0x50>
 800c7ac:	ab03      	add	r3, sp, #12
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	462a      	mov	r2, r5
 800c7b2:	4b09      	ldr	r3, [pc, #36]	; (800c7d8 <_vfiprintf_r+0x258>)
 800c7b4:	a904      	add	r1, sp, #16
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7fc fb76 	bl	8008ea8 <_printf_i>
 800c7bc:	e7e4      	b.n	800c788 <_vfiprintf_r+0x208>
 800c7be:	bf00      	nop
 800c7c0:	0800d808 	.word	0x0800d808
 800c7c4:	0800d828 	.word	0x0800d828
 800c7c8:	0800d7e8 	.word	0x0800d7e8
 800c7cc:	0800d7d4 	.word	0x0800d7d4
 800c7d0:	0800d7de 	.word	0x0800d7de
 800c7d4:	08008961 	.word	0x08008961
 800c7d8:	0800c55b 	.word	0x0800c55b
 800c7dc:	0800d7da 	.word	0x0800d7da

0800c7e0 <nan>:
 800c7e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7e8 <nan+0x8>
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	00000000 	.word	0x00000000
 800c7ec:	7ff80000 	.word	0x7ff80000

0800c7f0 <strncmp>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	b17a      	cbz	r2, 800c814 <strncmp+0x24>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	3901      	subs	r1, #1
 800c7f8:	1884      	adds	r4, r0, r2
 800c7fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c802:	4290      	cmp	r0, r2
 800c804:	d101      	bne.n	800c80a <strncmp+0x1a>
 800c806:	42a3      	cmp	r3, r4
 800c808:	d101      	bne.n	800c80e <strncmp+0x1e>
 800c80a:	1a80      	subs	r0, r0, r2
 800c80c:	bd10      	pop	{r4, pc}
 800c80e:	2800      	cmp	r0, #0
 800c810:	d1f3      	bne.n	800c7fa <strncmp+0xa>
 800c812:	e7fa      	b.n	800c80a <strncmp+0x1a>
 800c814:	4610      	mov	r0, r2
 800c816:	e7f9      	b.n	800c80c <strncmp+0x1c>

0800c818 <__swbuf_r>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	460e      	mov	r6, r1
 800c81c:	4614      	mov	r4, r2
 800c81e:	4605      	mov	r5, r0
 800c820:	b118      	cbz	r0, 800c82a <__swbuf_r+0x12>
 800c822:	6983      	ldr	r3, [r0, #24]
 800c824:	b90b      	cbnz	r3, 800c82a <__swbuf_r+0x12>
 800c826:	f000 f9e7 	bl	800cbf8 <__sinit>
 800c82a:	4b21      	ldr	r3, [pc, #132]	; (800c8b0 <__swbuf_r+0x98>)
 800c82c:	429c      	cmp	r4, r3
 800c82e:	d12b      	bne.n	800c888 <__swbuf_r+0x70>
 800c830:	686c      	ldr	r4, [r5, #4]
 800c832:	69a3      	ldr	r3, [r4, #24]
 800c834:	60a3      	str	r3, [r4, #8]
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	071a      	lsls	r2, r3, #28
 800c83a:	d52f      	bpl.n	800c89c <__swbuf_r+0x84>
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	b36b      	cbz	r3, 800c89c <__swbuf_r+0x84>
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	6820      	ldr	r0, [r4, #0]
 800c844:	1ac0      	subs	r0, r0, r3
 800c846:	6963      	ldr	r3, [r4, #20]
 800c848:	b2f6      	uxtb	r6, r6
 800c84a:	4283      	cmp	r3, r0
 800c84c:	4637      	mov	r7, r6
 800c84e:	dc04      	bgt.n	800c85a <__swbuf_r+0x42>
 800c850:	4621      	mov	r1, r4
 800c852:	4628      	mov	r0, r5
 800c854:	f000 f93c 	bl	800cad0 <_fflush_r>
 800c858:	bb30      	cbnz	r0, 800c8a8 <__swbuf_r+0x90>
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	60a3      	str	r3, [r4, #8]
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	6022      	str	r2, [r4, #0]
 800c866:	701e      	strb	r6, [r3, #0]
 800c868:	6963      	ldr	r3, [r4, #20]
 800c86a:	3001      	adds	r0, #1
 800c86c:	4283      	cmp	r3, r0
 800c86e:	d004      	beq.n	800c87a <__swbuf_r+0x62>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	07db      	lsls	r3, r3, #31
 800c874:	d506      	bpl.n	800c884 <__swbuf_r+0x6c>
 800c876:	2e0a      	cmp	r6, #10
 800c878:	d104      	bne.n	800c884 <__swbuf_r+0x6c>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4628      	mov	r0, r5
 800c87e:	f000 f927 	bl	800cad0 <_fflush_r>
 800c882:	b988      	cbnz	r0, 800c8a8 <__swbuf_r+0x90>
 800c884:	4638      	mov	r0, r7
 800c886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c888:	4b0a      	ldr	r3, [pc, #40]	; (800c8b4 <__swbuf_r+0x9c>)
 800c88a:	429c      	cmp	r4, r3
 800c88c:	d101      	bne.n	800c892 <__swbuf_r+0x7a>
 800c88e:	68ac      	ldr	r4, [r5, #8]
 800c890:	e7cf      	b.n	800c832 <__swbuf_r+0x1a>
 800c892:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <__swbuf_r+0xa0>)
 800c894:	429c      	cmp	r4, r3
 800c896:	bf08      	it	eq
 800c898:	68ec      	ldreq	r4, [r5, #12]
 800c89a:	e7ca      	b.n	800c832 <__swbuf_r+0x1a>
 800c89c:	4621      	mov	r1, r4
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f000 f81a 	bl	800c8d8 <__swsetup_r>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d0cb      	beq.n	800c840 <__swbuf_r+0x28>
 800c8a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ac:	e7ea      	b.n	800c884 <__swbuf_r+0x6c>
 800c8ae:	bf00      	nop
 800c8b0:	0800d808 	.word	0x0800d808
 800c8b4:	0800d828 	.word	0x0800d828
 800c8b8:	0800d7e8 	.word	0x0800d7e8

0800c8bc <__ascii_wctomb>:
 800c8bc:	b149      	cbz	r1, 800c8d2 <__ascii_wctomb+0x16>
 800c8be:	2aff      	cmp	r2, #255	; 0xff
 800c8c0:	bf85      	ittet	hi
 800c8c2:	238a      	movhi	r3, #138	; 0x8a
 800c8c4:	6003      	strhi	r3, [r0, #0]
 800c8c6:	700a      	strbls	r2, [r1, #0]
 800c8c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8cc:	bf98      	it	ls
 800c8ce:	2001      	movls	r0, #1
 800c8d0:	4770      	bx	lr
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	4770      	bx	lr
	...

0800c8d8 <__swsetup_r>:
 800c8d8:	4b32      	ldr	r3, [pc, #200]	; (800c9a4 <__swsetup_r+0xcc>)
 800c8da:	b570      	push	{r4, r5, r6, lr}
 800c8dc:	681d      	ldr	r5, [r3, #0]
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	b125      	cbz	r5, 800c8ee <__swsetup_r+0x16>
 800c8e4:	69ab      	ldr	r3, [r5, #24]
 800c8e6:	b913      	cbnz	r3, 800c8ee <__swsetup_r+0x16>
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f000 f985 	bl	800cbf8 <__sinit>
 800c8ee:	4b2e      	ldr	r3, [pc, #184]	; (800c9a8 <__swsetup_r+0xd0>)
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	d10f      	bne.n	800c914 <__swsetup_r+0x3c>
 800c8f4:	686c      	ldr	r4, [r5, #4]
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8fc:	0719      	lsls	r1, r3, #28
 800c8fe:	d42c      	bmi.n	800c95a <__swsetup_r+0x82>
 800c900:	06dd      	lsls	r5, r3, #27
 800c902:	d411      	bmi.n	800c928 <__swsetup_r+0x50>
 800c904:	2309      	movs	r3, #9
 800c906:	6033      	str	r3, [r6, #0]
 800c908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c90c:	81a3      	strh	r3, [r4, #12]
 800c90e:	f04f 30ff 	mov.w	r0, #4294967295
 800c912:	e03e      	b.n	800c992 <__swsetup_r+0xba>
 800c914:	4b25      	ldr	r3, [pc, #148]	; (800c9ac <__swsetup_r+0xd4>)
 800c916:	429c      	cmp	r4, r3
 800c918:	d101      	bne.n	800c91e <__swsetup_r+0x46>
 800c91a:	68ac      	ldr	r4, [r5, #8]
 800c91c:	e7eb      	b.n	800c8f6 <__swsetup_r+0x1e>
 800c91e:	4b24      	ldr	r3, [pc, #144]	; (800c9b0 <__swsetup_r+0xd8>)
 800c920:	429c      	cmp	r4, r3
 800c922:	bf08      	it	eq
 800c924:	68ec      	ldreq	r4, [r5, #12]
 800c926:	e7e6      	b.n	800c8f6 <__swsetup_r+0x1e>
 800c928:	0758      	lsls	r0, r3, #29
 800c92a:	d512      	bpl.n	800c952 <__swsetup_r+0x7a>
 800c92c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c92e:	b141      	cbz	r1, 800c942 <__swsetup_r+0x6a>
 800c930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c934:	4299      	cmp	r1, r3
 800c936:	d002      	beq.n	800c93e <__swsetup_r+0x66>
 800c938:	4630      	mov	r0, r6
 800c93a:	f7fb fe91 	bl	8008660 <_free_r>
 800c93e:	2300      	movs	r3, #0
 800c940:	6363      	str	r3, [r4, #52]	; 0x34
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c948:	81a3      	strh	r3, [r4, #12]
 800c94a:	2300      	movs	r3, #0
 800c94c:	6063      	str	r3, [r4, #4]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	f043 0308 	orr.w	r3, r3, #8
 800c958:	81a3      	strh	r3, [r4, #12]
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	b94b      	cbnz	r3, 800c972 <__swsetup_r+0x9a>
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c968:	d003      	beq.n	800c972 <__swsetup_r+0x9a>
 800c96a:	4621      	mov	r1, r4
 800c96c:	4630      	mov	r0, r6
 800c96e:	f000 fa09 	bl	800cd84 <__smakebuf_r>
 800c972:	89a0      	ldrh	r0, [r4, #12]
 800c974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c978:	f010 0301 	ands.w	r3, r0, #1
 800c97c:	d00a      	beq.n	800c994 <__swsetup_r+0xbc>
 800c97e:	2300      	movs	r3, #0
 800c980:	60a3      	str	r3, [r4, #8]
 800c982:	6963      	ldr	r3, [r4, #20]
 800c984:	425b      	negs	r3, r3
 800c986:	61a3      	str	r3, [r4, #24]
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	b943      	cbnz	r3, 800c99e <__swsetup_r+0xc6>
 800c98c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c990:	d1ba      	bne.n	800c908 <__swsetup_r+0x30>
 800c992:	bd70      	pop	{r4, r5, r6, pc}
 800c994:	0781      	lsls	r1, r0, #30
 800c996:	bf58      	it	pl
 800c998:	6963      	ldrpl	r3, [r4, #20]
 800c99a:	60a3      	str	r3, [r4, #8]
 800c99c:	e7f4      	b.n	800c988 <__swsetup_r+0xb0>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e7f7      	b.n	800c992 <__swsetup_r+0xba>
 800c9a2:	bf00      	nop
 800c9a4:	2000000c 	.word	0x2000000c
 800c9a8:	0800d808 	.word	0x0800d808
 800c9ac:	0800d828 	.word	0x0800d828
 800c9b0:	0800d7e8 	.word	0x0800d7e8

0800c9b4 <abort>:
 800c9b4:	b508      	push	{r3, lr}
 800c9b6:	2006      	movs	r0, #6
 800c9b8:	f000 fa96 	bl	800cee8 <raise>
 800c9bc:	2001      	movs	r0, #1
 800c9be:	f7f5 ffdf 	bl	8002980 <_exit>
	...

0800c9c4 <__sflush_r>:
 800c9c4:	898a      	ldrh	r2, [r1, #12]
 800c9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	0710      	lsls	r0, r2, #28
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	d458      	bmi.n	800ca84 <__sflush_r+0xc0>
 800c9d2:	684b      	ldr	r3, [r1, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	dc05      	bgt.n	800c9e4 <__sflush_r+0x20>
 800c9d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	dc02      	bgt.n	800c9e4 <__sflush_r+0x20>
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d0f9      	beq.n	800c9de <__sflush_r+0x1a>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9f0:	682f      	ldr	r7, [r5, #0]
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	d032      	beq.n	800ca5c <__sflush_r+0x98>
 800c9f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	075a      	lsls	r2, r3, #29
 800c9fc:	d505      	bpl.n	800ca0a <__sflush_r+0x46>
 800c9fe:	6863      	ldr	r3, [r4, #4]
 800ca00:	1ac0      	subs	r0, r0, r3
 800ca02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca04:	b10b      	cbz	r3, 800ca0a <__sflush_r+0x46>
 800ca06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca08:	1ac0      	subs	r0, r0, r3
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca10:	6a21      	ldr	r1, [r4, #32]
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b0      	blx	r6
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	d106      	bne.n	800ca2a <__sflush_r+0x66>
 800ca1c:	6829      	ldr	r1, [r5, #0]
 800ca1e:	291d      	cmp	r1, #29
 800ca20:	d82c      	bhi.n	800ca7c <__sflush_r+0xb8>
 800ca22:	4a2a      	ldr	r2, [pc, #168]	; (800cacc <__sflush_r+0x108>)
 800ca24:	40ca      	lsrs	r2, r1
 800ca26:	07d6      	lsls	r6, r2, #31
 800ca28:	d528      	bpl.n	800ca7c <__sflush_r+0xb8>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	6062      	str	r2, [r4, #4]
 800ca2e:	04d9      	lsls	r1, r3, #19
 800ca30:	6922      	ldr	r2, [r4, #16]
 800ca32:	6022      	str	r2, [r4, #0]
 800ca34:	d504      	bpl.n	800ca40 <__sflush_r+0x7c>
 800ca36:	1c42      	adds	r2, r0, #1
 800ca38:	d101      	bne.n	800ca3e <__sflush_r+0x7a>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b903      	cbnz	r3, 800ca40 <__sflush_r+0x7c>
 800ca3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ca40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca42:	602f      	str	r7, [r5, #0]
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d0ca      	beq.n	800c9de <__sflush_r+0x1a>
 800ca48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca4c:	4299      	cmp	r1, r3
 800ca4e:	d002      	beq.n	800ca56 <__sflush_r+0x92>
 800ca50:	4628      	mov	r0, r5
 800ca52:	f7fb fe05 	bl	8008660 <_free_r>
 800ca56:	2000      	movs	r0, #0
 800ca58:	6360      	str	r0, [r4, #52]	; 0x34
 800ca5a:	e7c1      	b.n	800c9e0 <__sflush_r+0x1c>
 800ca5c:	6a21      	ldr	r1, [r4, #32]
 800ca5e:	2301      	movs	r3, #1
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b0      	blx	r6
 800ca64:	1c41      	adds	r1, r0, #1
 800ca66:	d1c7      	bne.n	800c9f8 <__sflush_r+0x34>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0c4      	beq.n	800c9f8 <__sflush_r+0x34>
 800ca6e:	2b1d      	cmp	r3, #29
 800ca70:	d001      	beq.n	800ca76 <__sflush_r+0xb2>
 800ca72:	2b16      	cmp	r3, #22
 800ca74:	d101      	bne.n	800ca7a <__sflush_r+0xb6>
 800ca76:	602f      	str	r7, [r5, #0]
 800ca78:	e7b1      	b.n	800c9de <__sflush_r+0x1a>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	e7ad      	b.n	800c9e0 <__sflush_r+0x1c>
 800ca84:	690f      	ldr	r7, [r1, #16]
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	d0a9      	beq.n	800c9de <__sflush_r+0x1a>
 800ca8a:	0793      	lsls	r3, r2, #30
 800ca8c:	680e      	ldr	r6, [r1, #0]
 800ca8e:	bf08      	it	eq
 800ca90:	694b      	ldreq	r3, [r1, #20]
 800ca92:	600f      	str	r7, [r1, #0]
 800ca94:	bf18      	it	ne
 800ca96:	2300      	movne	r3, #0
 800ca98:	eba6 0807 	sub.w	r8, r6, r7
 800ca9c:	608b      	str	r3, [r1, #8]
 800ca9e:	f1b8 0f00 	cmp.w	r8, #0
 800caa2:	dd9c      	ble.n	800c9de <__sflush_r+0x1a>
 800caa4:	6a21      	ldr	r1, [r4, #32]
 800caa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caa8:	4643      	mov	r3, r8
 800caaa:	463a      	mov	r2, r7
 800caac:	4628      	mov	r0, r5
 800caae:	47b0      	blx	r6
 800cab0:	2800      	cmp	r0, #0
 800cab2:	dc06      	bgt.n	800cac2 <__sflush_r+0xfe>
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	e78e      	b.n	800c9e0 <__sflush_r+0x1c>
 800cac2:	4407      	add	r7, r0
 800cac4:	eba8 0800 	sub.w	r8, r8, r0
 800cac8:	e7e9      	b.n	800ca9e <__sflush_r+0xda>
 800caca:	bf00      	nop
 800cacc:	20400001 	.word	0x20400001

0800cad0 <_fflush_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	690b      	ldr	r3, [r1, #16]
 800cad4:	4605      	mov	r5, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	b913      	cbnz	r3, 800cae0 <_fflush_r+0x10>
 800cada:	2500      	movs	r5, #0
 800cadc:	4628      	mov	r0, r5
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	b118      	cbz	r0, 800caea <_fflush_r+0x1a>
 800cae2:	6983      	ldr	r3, [r0, #24]
 800cae4:	b90b      	cbnz	r3, 800caea <_fflush_r+0x1a>
 800cae6:	f000 f887 	bl	800cbf8 <__sinit>
 800caea:	4b14      	ldr	r3, [pc, #80]	; (800cb3c <_fflush_r+0x6c>)
 800caec:	429c      	cmp	r4, r3
 800caee:	d11b      	bne.n	800cb28 <_fflush_r+0x58>
 800caf0:	686c      	ldr	r4, [r5, #4]
 800caf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0ef      	beq.n	800cada <_fflush_r+0xa>
 800cafa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cafc:	07d0      	lsls	r0, r2, #31
 800cafe:	d404      	bmi.n	800cb0a <_fflush_r+0x3a>
 800cb00:	0599      	lsls	r1, r3, #22
 800cb02:	d402      	bmi.n	800cb0a <_fflush_r+0x3a>
 800cb04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb06:	f000 f915 	bl	800cd34 <__retarget_lock_acquire_recursive>
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	f7ff ff59 	bl	800c9c4 <__sflush_r>
 800cb12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb14:	07da      	lsls	r2, r3, #31
 800cb16:	4605      	mov	r5, r0
 800cb18:	d4e0      	bmi.n	800cadc <_fflush_r+0xc>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	059b      	lsls	r3, r3, #22
 800cb1e:	d4dd      	bmi.n	800cadc <_fflush_r+0xc>
 800cb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb22:	f000 f908 	bl	800cd36 <__retarget_lock_release_recursive>
 800cb26:	e7d9      	b.n	800cadc <_fflush_r+0xc>
 800cb28:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <_fflush_r+0x70>)
 800cb2a:	429c      	cmp	r4, r3
 800cb2c:	d101      	bne.n	800cb32 <_fflush_r+0x62>
 800cb2e:	68ac      	ldr	r4, [r5, #8]
 800cb30:	e7df      	b.n	800caf2 <_fflush_r+0x22>
 800cb32:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <_fflush_r+0x74>)
 800cb34:	429c      	cmp	r4, r3
 800cb36:	bf08      	it	eq
 800cb38:	68ec      	ldreq	r4, [r5, #12]
 800cb3a:	e7da      	b.n	800caf2 <_fflush_r+0x22>
 800cb3c:	0800d808 	.word	0x0800d808
 800cb40:	0800d828 	.word	0x0800d828
 800cb44:	0800d7e8 	.word	0x0800d7e8

0800cb48 <std>:
 800cb48:	2300      	movs	r3, #0
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb56:	6083      	str	r3, [r0, #8]
 800cb58:	8181      	strh	r1, [r0, #12]
 800cb5a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb5c:	81c2      	strh	r2, [r0, #14]
 800cb5e:	6183      	str	r3, [r0, #24]
 800cb60:	4619      	mov	r1, r3
 800cb62:	2208      	movs	r2, #8
 800cb64:	305c      	adds	r0, #92	; 0x5c
 800cb66:	f7fb fd73 	bl	8008650 <memset>
 800cb6a:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <std+0x38>)
 800cb6c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb6e:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <std+0x3c>)
 800cb70:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb72:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <std+0x40>)
 800cb74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <std+0x44>)
 800cb78:	6224      	str	r4, [r4, #32]
 800cb7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	bf00      	nop
 800cb80:	0800cf21 	.word	0x0800cf21
 800cb84:	0800cf43 	.word	0x0800cf43
 800cb88:	0800cf7b 	.word	0x0800cf7b
 800cb8c:	0800cf9f 	.word	0x0800cf9f

0800cb90 <_cleanup_r>:
 800cb90:	4901      	ldr	r1, [pc, #4]	; (800cb98 <_cleanup_r+0x8>)
 800cb92:	f000 b8af 	b.w	800ccf4 <_fwalk_reent>
 800cb96:	bf00      	nop
 800cb98:	0800cad1 	.word	0x0800cad1

0800cb9c <__sfmoreglue>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	2268      	movs	r2, #104	; 0x68
 800cba0:	1e4d      	subs	r5, r1, #1
 800cba2:	4355      	muls	r5, r2
 800cba4:	460e      	mov	r6, r1
 800cba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbaa:	f7fb fdc5 	bl	8008738 <_malloc_r>
 800cbae:	4604      	mov	r4, r0
 800cbb0:	b140      	cbz	r0, 800cbc4 <__sfmoreglue+0x28>
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	e9c0 1600 	strd	r1, r6, [r0]
 800cbb8:	300c      	adds	r0, #12
 800cbba:	60a0      	str	r0, [r4, #8]
 800cbbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbc0:	f7fb fd46 	bl	8008650 <memset>
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}

0800cbc8 <__sfp_lock_acquire>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__sfp_lock_acquire+0x8>)
 800cbca:	f000 b8b3 	b.w	800cd34 <__retarget_lock_acquire_recursive>
 800cbce:	bf00      	nop
 800cbd0:	200005a5 	.word	0x200005a5

0800cbd4 <__sfp_lock_release>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__sfp_lock_release+0x8>)
 800cbd6:	f000 b8ae 	b.w	800cd36 <__retarget_lock_release_recursive>
 800cbda:	bf00      	nop
 800cbdc:	200005a5 	.word	0x200005a5

0800cbe0 <__sinit_lock_acquire>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__sinit_lock_acquire+0x8>)
 800cbe2:	f000 b8a7 	b.w	800cd34 <__retarget_lock_acquire_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	200005a6 	.word	0x200005a6

0800cbec <__sinit_lock_release>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__sinit_lock_release+0x8>)
 800cbee:	f000 b8a2 	b.w	800cd36 <__retarget_lock_release_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	200005a6 	.word	0x200005a6

0800cbf8 <__sinit>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	f7ff fff0 	bl	800cbe0 <__sinit_lock_acquire>
 800cc00:	69a3      	ldr	r3, [r4, #24]
 800cc02:	b11b      	cbz	r3, 800cc0c <__sinit+0x14>
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc08:	f7ff bff0 	b.w	800cbec <__sinit_lock_release>
 800cc0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc10:	6523      	str	r3, [r4, #80]	; 0x50
 800cc12:	4b13      	ldr	r3, [pc, #76]	; (800cc60 <__sinit+0x68>)
 800cc14:	4a13      	ldr	r2, [pc, #76]	; (800cc64 <__sinit+0x6c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc1a:	42a3      	cmp	r3, r4
 800cc1c:	bf04      	itt	eq
 800cc1e:	2301      	moveq	r3, #1
 800cc20:	61a3      	streq	r3, [r4, #24]
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 f820 	bl	800cc68 <__sfp>
 800cc28:	6060      	str	r0, [r4, #4]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 f81c 	bl	800cc68 <__sfp>
 800cc30:	60a0      	str	r0, [r4, #8]
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f818 	bl	800cc68 <__sfp>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	60e0      	str	r0, [r4, #12]
 800cc3c:	2104      	movs	r1, #4
 800cc3e:	6860      	ldr	r0, [r4, #4]
 800cc40:	f7ff ff82 	bl	800cb48 <std>
 800cc44:	68a0      	ldr	r0, [r4, #8]
 800cc46:	2201      	movs	r2, #1
 800cc48:	2109      	movs	r1, #9
 800cc4a:	f7ff ff7d 	bl	800cb48 <std>
 800cc4e:	68e0      	ldr	r0, [r4, #12]
 800cc50:	2202      	movs	r2, #2
 800cc52:	2112      	movs	r1, #18
 800cc54:	f7ff ff78 	bl	800cb48 <std>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	61a3      	str	r3, [r4, #24]
 800cc5c:	e7d2      	b.n	800cc04 <__sinit+0xc>
 800cc5e:	bf00      	nop
 800cc60:	0800d448 	.word	0x0800d448
 800cc64:	0800cb91 	.word	0x0800cb91

0800cc68 <__sfp>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	4607      	mov	r7, r0
 800cc6c:	f7ff ffac 	bl	800cbc8 <__sfp_lock_acquire>
 800cc70:	4b1e      	ldr	r3, [pc, #120]	; (800ccec <__sfp+0x84>)
 800cc72:	681e      	ldr	r6, [r3, #0]
 800cc74:	69b3      	ldr	r3, [r6, #24]
 800cc76:	b913      	cbnz	r3, 800cc7e <__sfp+0x16>
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7ff ffbd 	bl	800cbf8 <__sinit>
 800cc7e:	3648      	adds	r6, #72	; 0x48
 800cc80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	d503      	bpl.n	800cc90 <__sfp+0x28>
 800cc88:	6833      	ldr	r3, [r6, #0]
 800cc8a:	b30b      	cbz	r3, 800ccd0 <__sfp+0x68>
 800cc8c:	6836      	ldr	r6, [r6, #0]
 800cc8e:	e7f7      	b.n	800cc80 <__sfp+0x18>
 800cc90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc94:	b9d5      	cbnz	r5, 800cccc <__sfp+0x64>
 800cc96:	4b16      	ldr	r3, [pc, #88]	; (800ccf0 <__sfp+0x88>)
 800cc98:	60e3      	str	r3, [r4, #12]
 800cc9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cca0:	f000 f847 	bl	800cd32 <__retarget_lock_init_recursive>
 800cca4:	f7ff ff96 	bl	800cbd4 <__sfp_lock_release>
 800cca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccb0:	6025      	str	r5, [r4, #0]
 800ccb2:	61a5      	str	r5, [r4, #24]
 800ccb4:	2208      	movs	r2, #8
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccbc:	f7fb fcc8 	bl	8008650 <memset>
 800ccc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccc8:	4620      	mov	r0, r4
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	3468      	adds	r4, #104	; 0x68
 800ccce:	e7d9      	b.n	800cc84 <__sfp+0x1c>
 800ccd0:	2104      	movs	r1, #4
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	f7ff ff62 	bl	800cb9c <__sfmoreglue>
 800ccd8:	4604      	mov	r4, r0
 800ccda:	6030      	str	r0, [r6, #0]
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d1d5      	bne.n	800cc8c <__sfp+0x24>
 800cce0:	f7ff ff78 	bl	800cbd4 <__sfp_lock_release>
 800cce4:	230c      	movs	r3, #12
 800cce6:	603b      	str	r3, [r7, #0]
 800cce8:	e7ee      	b.n	800ccc8 <__sfp+0x60>
 800ccea:	bf00      	nop
 800ccec:	0800d448 	.word	0x0800d448
 800ccf0:	ffff0001 	.word	0xffff0001

0800ccf4 <_fwalk_reent>:
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	4688      	mov	r8, r1
 800ccfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd00:	2700      	movs	r7, #0
 800cd02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd06:	f1b9 0901 	subs.w	r9, r9, #1
 800cd0a:	d505      	bpl.n	800cd18 <_fwalk_reent+0x24>
 800cd0c:	6824      	ldr	r4, [r4, #0]
 800cd0e:	2c00      	cmp	r4, #0
 800cd10:	d1f7      	bne.n	800cd02 <_fwalk_reent+0xe>
 800cd12:	4638      	mov	r0, r7
 800cd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd18:	89ab      	ldrh	r3, [r5, #12]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d907      	bls.n	800cd2e <_fwalk_reent+0x3a>
 800cd1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd22:	3301      	adds	r3, #1
 800cd24:	d003      	beq.n	800cd2e <_fwalk_reent+0x3a>
 800cd26:	4629      	mov	r1, r5
 800cd28:	4630      	mov	r0, r6
 800cd2a:	47c0      	blx	r8
 800cd2c:	4307      	orrs	r7, r0
 800cd2e:	3568      	adds	r5, #104	; 0x68
 800cd30:	e7e9      	b.n	800cd06 <_fwalk_reent+0x12>

0800cd32 <__retarget_lock_init_recursive>:
 800cd32:	4770      	bx	lr

0800cd34 <__retarget_lock_acquire_recursive>:
 800cd34:	4770      	bx	lr

0800cd36 <__retarget_lock_release_recursive>:
 800cd36:	4770      	bx	lr

0800cd38 <__swhatbuf_r>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	460e      	mov	r6, r1
 800cd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd40:	2900      	cmp	r1, #0
 800cd42:	b096      	sub	sp, #88	; 0x58
 800cd44:	4614      	mov	r4, r2
 800cd46:	461d      	mov	r5, r3
 800cd48:	da08      	bge.n	800cd5c <__swhatbuf_r+0x24>
 800cd4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	602a      	str	r2, [r5, #0]
 800cd52:	061a      	lsls	r2, r3, #24
 800cd54:	d410      	bmi.n	800cd78 <__swhatbuf_r+0x40>
 800cd56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd5a:	e00e      	b.n	800cd7a <__swhatbuf_r+0x42>
 800cd5c:	466a      	mov	r2, sp
 800cd5e:	f000 f945 	bl	800cfec <_fstat_r>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	dbf1      	blt.n	800cd4a <__swhatbuf_r+0x12>
 800cd66:	9a01      	ldr	r2, [sp, #4]
 800cd68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd70:	425a      	negs	r2, r3
 800cd72:	415a      	adcs	r2, r3
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	e7ee      	b.n	800cd56 <__swhatbuf_r+0x1e>
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	b016      	add	sp, #88	; 0x58
 800cd80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd84 <__smakebuf_r>:
 800cd84:	898b      	ldrh	r3, [r1, #12]
 800cd86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd88:	079d      	lsls	r5, r3, #30
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	d507      	bpl.n	800cda0 <__smakebuf_r+0x1c>
 800cd90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	6123      	str	r3, [r4, #16]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	6163      	str	r3, [r4, #20]
 800cd9c:	b002      	add	sp, #8
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
 800cda0:	ab01      	add	r3, sp, #4
 800cda2:	466a      	mov	r2, sp
 800cda4:	f7ff ffc8 	bl	800cd38 <__swhatbuf_r>
 800cda8:	9900      	ldr	r1, [sp, #0]
 800cdaa:	4605      	mov	r5, r0
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7fb fcc3 	bl	8008738 <_malloc_r>
 800cdb2:	b948      	cbnz	r0, 800cdc8 <__smakebuf_r+0x44>
 800cdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb8:	059a      	lsls	r2, r3, #22
 800cdba:	d4ef      	bmi.n	800cd9c <__smakebuf_r+0x18>
 800cdbc:	f023 0303 	bic.w	r3, r3, #3
 800cdc0:	f043 0302 	orr.w	r3, r3, #2
 800cdc4:	81a3      	strh	r3, [r4, #12]
 800cdc6:	e7e3      	b.n	800cd90 <__smakebuf_r+0xc>
 800cdc8:	4b0d      	ldr	r3, [pc, #52]	; (800ce00 <__smakebuf_r+0x7c>)
 800cdca:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	6020      	str	r0, [r4, #0]
 800cdd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd4:	81a3      	strh	r3, [r4, #12]
 800cdd6:	9b00      	ldr	r3, [sp, #0]
 800cdd8:	6163      	str	r3, [r4, #20]
 800cdda:	9b01      	ldr	r3, [sp, #4]
 800cddc:	6120      	str	r0, [r4, #16]
 800cdde:	b15b      	cbz	r3, 800cdf8 <__smakebuf_r+0x74>
 800cde0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde4:	4630      	mov	r0, r6
 800cde6:	f000 f913 	bl	800d010 <_isatty_r>
 800cdea:	b128      	cbz	r0, 800cdf8 <__smakebuf_r+0x74>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	f023 0303 	bic.w	r3, r3, #3
 800cdf2:	f043 0301 	orr.w	r3, r3, #1
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	89a0      	ldrh	r0, [r4, #12]
 800cdfa:	4305      	orrs	r5, r0
 800cdfc:	81a5      	strh	r5, [r4, #12]
 800cdfe:	e7cd      	b.n	800cd9c <__smakebuf_r+0x18>
 800ce00:	0800cb91 	.word	0x0800cb91

0800ce04 <memmove>:
 800ce04:	4288      	cmp	r0, r1
 800ce06:	b510      	push	{r4, lr}
 800ce08:	eb01 0402 	add.w	r4, r1, r2
 800ce0c:	d902      	bls.n	800ce14 <memmove+0x10>
 800ce0e:	4284      	cmp	r4, r0
 800ce10:	4623      	mov	r3, r4
 800ce12:	d807      	bhi.n	800ce24 <memmove+0x20>
 800ce14:	1e43      	subs	r3, r0, #1
 800ce16:	42a1      	cmp	r1, r4
 800ce18:	d008      	beq.n	800ce2c <memmove+0x28>
 800ce1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce22:	e7f8      	b.n	800ce16 <memmove+0x12>
 800ce24:	4402      	add	r2, r0
 800ce26:	4601      	mov	r1, r0
 800ce28:	428a      	cmp	r2, r1
 800ce2a:	d100      	bne.n	800ce2e <memmove+0x2a>
 800ce2c:	bd10      	pop	{r4, pc}
 800ce2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce36:	e7f7      	b.n	800ce28 <memmove+0x24>

0800ce38 <_realloc_r>:
 800ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	4680      	mov	r8, r0
 800ce3e:	4614      	mov	r4, r2
 800ce40:	460e      	mov	r6, r1
 800ce42:	b921      	cbnz	r1, 800ce4e <_realloc_r+0x16>
 800ce44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	4611      	mov	r1, r2
 800ce4a:	f7fb bc75 	b.w	8008738 <_malloc_r>
 800ce4e:	b92a      	cbnz	r2, 800ce5c <_realloc_r+0x24>
 800ce50:	f7fb fc06 	bl	8008660 <_free_r>
 800ce54:	4625      	mov	r5, r4
 800ce56:	4628      	mov	r0, r5
 800ce58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce5c:	f000 f8fa 	bl	800d054 <_malloc_usable_size_r>
 800ce60:	4284      	cmp	r4, r0
 800ce62:	4607      	mov	r7, r0
 800ce64:	d802      	bhi.n	800ce6c <_realloc_r+0x34>
 800ce66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce6a:	d812      	bhi.n	800ce92 <_realloc_r+0x5a>
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4640      	mov	r0, r8
 800ce70:	f7fb fc62 	bl	8008738 <_malloc_r>
 800ce74:	4605      	mov	r5, r0
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d0ed      	beq.n	800ce56 <_realloc_r+0x1e>
 800ce7a:	42bc      	cmp	r4, r7
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4631      	mov	r1, r6
 800ce80:	bf28      	it	cs
 800ce82:	463a      	movcs	r2, r7
 800ce84:	f7fe fd06 	bl	800b894 <memcpy>
 800ce88:	4631      	mov	r1, r6
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	f7fb fbe8 	bl	8008660 <_free_r>
 800ce90:	e7e1      	b.n	800ce56 <_realloc_r+0x1e>
 800ce92:	4635      	mov	r5, r6
 800ce94:	e7df      	b.n	800ce56 <_realloc_r+0x1e>

0800ce96 <_raise_r>:
 800ce96:	291f      	cmp	r1, #31
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	460d      	mov	r5, r1
 800ce9e:	d904      	bls.n	800ceaa <_raise_r+0x14>
 800cea0:	2316      	movs	r3, #22
 800cea2:	6003      	str	r3, [r0, #0]
 800cea4:	f04f 30ff 	mov.w	r0, #4294967295
 800cea8:	bd38      	pop	{r3, r4, r5, pc}
 800ceaa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ceac:	b112      	cbz	r2, 800ceb4 <_raise_r+0x1e>
 800ceae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ceb2:	b94b      	cbnz	r3, 800cec8 <_raise_r+0x32>
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f000 f831 	bl	800cf1c <_getpid_r>
 800ceba:	462a      	mov	r2, r5
 800cebc:	4601      	mov	r1, r0
 800cebe:	4620      	mov	r0, r4
 800cec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cec4:	f000 b818 	b.w	800cef8 <_kill_r>
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d00a      	beq.n	800cee2 <_raise_r+0x4c>
 800cecc:	1c59      	adds	r1, r3, #1
 800cece:	d103      	bne.n	800ced8 <_raise_r+0x42>
 800ced0:	2316      	movs	r3, #22
 800ced2:	6003      	str	r3, [r0, #0]
 800ced4:	2001      	movs	r0, #1
 800ced6:	e7e7      	b.n	800cea8 <_raise_r+0x12>
 800ced8:	2400      	movs	r4, #0
 800ceda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cede:	4628      	mov	r0, r5
 800cee0:	4798      	blx	r3
 800cee2:	2000      	movs	r0, #0
 800cee4:	e7e0      	b.n	800cea8 <_raise_r+0x12>
	...

0800cee8 <raise>:
 800cee8:	4b02      	ldr	r3, [pc, #8]	; (800cef4 <raise+0xc>)
 800ceea:	4601      	mov	r1, r0
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	f7ff bfd2 	b.w	800ce96 <_raise_r>
 800cef2:	bf00      	nop
 800cef4:	2000000c 	.word	0x2000000c

0800cef8 <_kill_r>:
 800cef8:	b538      	push	{r3, r4, r5, lr}
 800cefa:	4d07      	ldr	r5, [pc, #28]	; (800cf18 <_kill_r+0x20>)
 800cefc:	2300      	movs	r3, #0
 800cefe:	4604      	mov	r4, r0
 800cf00:	4608      	mov	r0, r1
 800cf02:	4611      	mov	r1, r2
 800cf04:	602b      	str	r3, [r5, #0]
 800cf06:	f7f5 fd2b 	bl	8002960 <_kill>
 800cf0a:	1c43      	adds	r3, r0, #1
 800cf0c:	d102      	bne.n	800cf14 <_kill_r+0x1c>
 800cf0e:	682b      	ldr	r3, [r5, #0]
 800cf10:	b103      	cbz	r3, 800cf14 <_kill_r+0x1c>
 800cf12:	6023      	str	r3, [r4, #0]
 800cf14:	bd38      	pop	{r3, r4, r5, pc}
 800cf16:	bf00      	nop
 800cf18:	200005a0 	.word	0x200005a0

0800cf1c <_getpid_r>:
 800cf1c:	f7f5 bd18 	b.w	8002950 <_getpid>

0800cf20 <__sread>:
 800cf20:	b510      	push	{r4, lr}
 800cf22:	460c      	mov	r4, r1
 800cf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf28:	f000 f89c 	bl	800d064 <_read_r>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	bfab      	itete	ge
 800cf30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf32:	89a3      	ldrhlt	r3, [r4, #12]
 800cf34:	181b      	addge	r3, r3, r0
 800cf36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf3a:	bfac      	ite	ge
 800cf3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf3e:	81a3      	strhlt	r3, [r4, #12]
 800cf40:	bd10      	pop	{r4, pc}

0800cf42 <__swrite>:
 800cf42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	461f      	mov	r7, r3
 800cf48:	898b      	ldrh	r3, [r1, #12]
 800cf4a:	05db      	lsls	r3, r3, #23
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	460c      	mov	r4, r1
 800cf50:	4616      	mov	r6, r2
 800cf52:	d505      	bpl.n	800cf60 <__swrite+0x1e>
 800cf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf58:	2302      	movs	r3, #2
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f000 f868 	bl	800d030 <_lseek_r>
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf6a:	81a3      	strh	r3, [r4, #12]
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	463b      	mov	r3, r7
 800cf70:	4628      	mov	r0, r5
 800cf72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf76:	f000 b817 	b.w	800cfa8 <_write_r>

0800cf7a <__sseek>:
 800cf7a:	b510      	push	{r4, lr}
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf82:	f000 f855 	bl	800d030 <_lseek_r>
 800cf86:	1c43      	adds	r3, r0, #1
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	bf15      	itete	ne
 800cf8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf96:	81a3      	strheq	r3, [r4, #12]
 800cf98:	bf18      	it	ne
 800cf9a:	81a3      	strhne	r3, [r4, #12]
 800cf9c:	bd10      	pop	{r4, pc}

0800cf9e <__sclose>:
 800cf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa2:	f000 b813 	b.w	800cfcc <_close_r>
	...

0800cfa8 <_write_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	; (800cfc8 <_write_r+0x20>)
 800cfac:	4604      	mov	r4, r0
 800cfae:	4608      	mov	r0, r1
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	602a      	str	r2, [r5, #0]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	f7f5 fd09 	bl	80029ce <_write>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_write_r+0x1e>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_write_r+0x1e>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	200005a0 	.word	0x200005a0

0800cfcc <_close_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d06      	ldr	r5, [pc, #24]	; (800cfe8 <_close_r+0x1c>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	f7f5 fd15 	bl	8002a06 <_close>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_close_r+0x1a>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_close_r+0x1a>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	200005a0 	.word	0x200005a0

0800cfec <_fstat_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4d07      	ldr	r5, [pc, #28]	; (800d00c <_fstat_r+0x20>)
 800cff0:	2300      	movs	r3, #0
 800cff2:	4604      	mov	r4, r0
 800cff4:	4608      	mov	r0, r1
 800cff6:	4611      	mov	r1, r2
 800cff8:	602b      	str	r3, [r5, #0]
 800cffa:	f7f5 fd10 	bl	8002a1e <_fstat>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	d102      	bne.n	800d008 <_fstat_r+0x1c>
 800d002:	682b      	ldr	r3, [r5, #0]
 800d004:	b103      	cbz	r3, 800d008 <_fstat_r+0x1c>
 800d006:	6023      	str	r3, [r4, #0]
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	bf00      	nop
 800d00c:	200005a0 	.word	0x200005a0

0800d010 <_isatty_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	; (800d02c <_isatty_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f5 fd0f 	bl	8002a3e <_isatty>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_isatty_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_isatty_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	200005a0 	.word	0x200005a0

0800d030 <_lseek_r>:
 800d030:	b538      	push	{r3, r4, r5, lr}
 800d032:	4d07      	ldr	r5, [pc, #28]	; (800d050 <_lseek_r+0x20>)
 800d034:	4604      	mov	r4, r0
 800d036:	4608      	mov	r0, r1
 800d038:	4611      	mov	r1, r2
 800d03a:	2200      	movs	r2, #0
 800d03c:	602a      	str	r2, [r5, #0]
 800d03e:	461a      	mov	r2, r3
 800d040:	f7f5 fd08 	bl	8002a54 <_lseek>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_lseek_r+0x1e>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_lseek_r+0x1e>
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	200005a0 	.word	0x200005a0

0800d054 <_malloc_usable_size_r>:
 800d054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d058:	1f18      	subs	r0, r3, #4
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bfbc      	itt	lt
 800d05e:	580b      	ldrlt	r3, [r1, r0]
 800d060:	18c0      	addlt	r0, r0, r3
 800d062:	4770      	bx	lr

0800d064 <_read_r>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	4d07      	ldr	r5, [pc, #28]	; (800d084 <_read_r+0x20>)
 800d068:	4604      	mov	r4, r0
 800d06a:	4608      	mov	r0, r1
 800d06c:	4611      	mov	r1, r2
 800d06e:	2200      	movs	r2, #0
 800d070:	602a      	str	r2, [r5, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	f7f5 fc8e 	bl	8002994 <_read>
 800d078:	1c43      	adds	r3, r0, #1
 800d07a:	d102      	bne.n	800d082 <_read_r+0x1e>
 800d07c:	682b      	ldr	r3, [r5, #0]
 800d07e:	b103      	cbz	r3, 800d082 <_read_r+0x1e>
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	bd38      	pop	{r3, r4, r5, pc}
 800d084:	200005a0 	.word	0x200005a0

0800d088 <_init>:
 800d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08a:	bf00      	nop
 800d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08e:	bc08      	pop	{r3}
 800d090:	469e      	mov	lr, r3
 800d092:	4770      	bx	lr

0800d094 <_fini>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	bf00      	nop
 800d098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d09a:	bc08      	pop	{r3}
 800d09c:	469e      	mov	lr, r3
 800d09e:	4770      	bx	lr

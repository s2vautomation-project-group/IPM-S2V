
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c88  08004c88  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c90  08004c90  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200000cc  08004d64  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004d64  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d157  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021de  00000000  00000000  0002d253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207a2  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d84a  00000000  00000000  00050ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c00df  00000000  00000000  0005e83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e91b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  0011e96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004948 	.word	0x08004948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08004948 	.word	0x08004948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DataToGsm>:
#include <string.h>
#include <stdlib.h>
#include "data.h"

void DataToGsm(struct data *d)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af06      	add	r7, sp, #24
 800058a:	6078      	str	r0, [r7, #4]

	DataToCloud(d->time,d->CH1,d->CH2,d->CH3,d->CH4,d->D1,d->D2,d->D3,d->D4);
 800058c:	687d      	ldr	r5, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f103 060a 	add.w	r6, r3, #10
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0c14 	add.w	ip, r3, #20
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f103 0e1e 	add.w	lr, r3, #30
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3328      	adds	r3, #40	; 0x28
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	3232      	adds	r2, #50	; 0x32
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	313c      	adds	r1, #60	; 0x3c
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	3046      	adds	r0, #70	; 0x46
 80005b0:	687c      	ldr	r4, [r7, #4]
 80005b2:	3450      	adds	r4, #80	; 0x50
 80005b4:	9404      	str	r4, [sp, #16]
 80005b6:	9003      	str	r0, [sp, #12]
 80005b8:	9102      	str	r1, [sp, #8]
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4673      	mov	r3, lr
 80005c0:	4662      	mov	r2, ip
 80005c2:	4631      	mov	r1, r6
 80005c4:	4628      	mov	r0, r5
 80005c6:	f000 f893 	bl	80006f0 <DataToCloud>


}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080005d4 <UART2_Init>:


UART_HandleTypeDef huart2;

void UART2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <UART2_Init+0x58>)
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <UART2_Init+0x5c>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <UART2_Init+0x58>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <UART2_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <UART2_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <UART2_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <UART2_Init+0x58>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <UART2_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <UART2_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <UART2_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <UART2_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <UART2_Init+0x58>)
 8000618:	f002 f888 	bl	800272c <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <UART2_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 fa1d 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000180 	.word	0x20000180
 8000630:	40004400 	.word	0x40004400

08000634 <DataToUart>:

void DataToUart(struct data *d)
{
 8000634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000636:	b08b      	sub	sp, #44	; 0x2c
 8000638:	af08      	add	r7, sp, #32
 800063a:	6078      	str	r0, [r7, #4]

		  		sprintf(buf,"%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n",d->time,d->CH1,d->CH2,d->CH3,d->CH4,d->D1,d->D2,d->D3,d->D4);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f103 0c0a 	add.w	ip, r3, #10
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3314      	adds	r3, #20
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	321e      	adds	r2, #30
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	3128      	adds	r1, #40	; 0x28
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	3032      	adds	r0, #50	; 0x32
 8000656:	687c      	ldr	r4, [r7, #4]
 8000658:	343c      	adds	r4, #60	; 0x3c
 800065a:	687d      	ldr	r5, [r7, #4]
 800065c:	3546      	adds	r5, #70	; 0x46
 800065e:	687e      	ldr	r6, [r7, #4]
 8000660:	3650      	adds	r6, #80	; 0x50
 8000662:	9606      	str	r6, [sp, #24]
 8000664:	9505      	str	r5, [sp, #20]
 8000666:	9404      	str	r4, [sp, #16]
 8000668:	9003      	str	r0, [sp, #12]
 800066a:	9102      	str	r1, [sp, #8]
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4663      	mov	r3, ip
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	490b      	ldr	r1, [pc, #44]	; (80006a4 <DataToUart+0x70>)
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <DataToUart+0x74>)
 8000678:	f003 fde8 	bl	800424c <siprintf>
		  		     HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <DataToUart+0x74>)
 800067e:	f7ff fda7 	bl	80001d0 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	4907      	ldr	r1, [pc, #28]	; (80006a8 <DataToUart+0x74>)
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <DataToUart+0x78>)
 800068e:	f002 f89b 	bl	80027c8 <HAL_UART_Transmit>
HAL_Delay(500);
 8000692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000696:	f000 fb87 	bl	8000da8 <HAL_Delay>

}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08004960 	.word	0x08004960
 80006a8:	200000e8 	.word	0x200000e8
 80006ac:	20000180 	.word	0x20000180

080006b0 <GsmCommands>:



void GsmCommands(uint8_t* cmd)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff fd89 	bl	80001d0 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <GsmCommands+0x38>)
 80006c8:	f002 f912 	bl	80028f0 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 80006cc:	2264      	movs	r2, #100	; 0x64
 80006ce:	4907      	ldr	r1, [pc, #28]	; (80006ec <GsmCommands+0x3c>)
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <GsmCommands+0x38>)
 80006d2:	f002 f97b 	bl	80029cc <HAL_UART_Receive_IT>
	 HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f000 fb65 	bl	8000da8 <HAL_Delay>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000180 	.word	0x20000180
 80006ec:	2000011c 	.word	0x2000011c

080006f0 <DataToCloud>:

}


void DataToCloud(uint8_t* Time,uint8_t* Ch1,uint8_t* Ch2,uint8_t* Ch3,uint8_t* Ch4,uint8_t* D1,uint8_t* D2,uint8_t* D3,uint8_t* D4)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80006f6:	af08      	add	r7, sp, #32
 80006f8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80006fc:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8000700:	6020      	str	r0, [r4, #0]
 8000702:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8000706:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800070a:	6001      	str	r1, [r0, #0]
 800070c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000710:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8000714:	600a      	str	r2, [r1, #0]
 8000716:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800071a:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800071e:	6013      	str	r3, [r2, #0]

			uint8_t AT_RTCcloud_data[500];

			char* encoded_Time = url_encode(Time);
 8000720:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000724:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	f000 f89b 	bl	8000864 <url_encode>
 800072e:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
			char* encoded_Ch1 = url_encode(Ch1);
 8000732:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000736:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	f000 f892 	bl	8000864 <url_encode>
 8000740:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
			char* encoded_Ch2 = url_encode(Ch2);
 8000744:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000748:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	f000 f889 	bl	8000864 <url_encode>
 8000752:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			char* encoded_Ch3 = url_encode(Ch3);
 8000756:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800075a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	f000 f880 	bl	8000864 <url_encode>
 8000764:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
			char* encoded_Ch4 = url_encode(Ch4);
 8000768:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 800076c:	f000 f87a 	bl	8000864 <url_encode>
 8000770:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
			char* encoded_D1 = url_encode(D1);
 8000774:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000778:	f000 f874 	bl	8000864 <url_encode>
 800077c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
			char* encoded_D2 = url_encode(D2);
 8000780:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8000784:	f000 f86e 	bl	8000864 <url_encode>
 8000788:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
			char* encoded_D3 = url_encode(D3);
 800078c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8000790:	f000 f868 	bl	8000864 <url_encode>
 8000794:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			char* encoded_D4 = url_encode(D4);
 8000798:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800079c:	f000 f862 	bl	8000864 <url_encode>
 80007a0:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204


				//	RTCdata_to_cloud

				 GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 80007a4:	482b      	ldr	r0, [pc, #172]	; (8000854 <DataToCloud+0x164>)
 80007a6:	f7ff ff83 	bl	80006b0 <GsmCommands>
				 GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 80007aa:	482b      	ldr	r0, [pc, #172]	; (8000858 <DataToCloud+0x168>)
 80007ac:	f7ff ff80 	bl	80006b0 <GsmCommands>


				 snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbwaEr2bwPZ4lsp0eJuNW61im6PEJ0zI5yxW0n7_kDA9N-wocsdiVT38l-30--cFvb_H/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s\"\r\n",encoded_Time, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 80007b0:	f107 0010 	add.w	r0, r7, #16
 80007b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80007b8:	9307      	str	r3, [sp, #28]
 80007ba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80007be:	9306      	str	r3, [sp, #24]
 80007c0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007c4:	9305      	str	r3, [sp, #20]
 80007c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80007ca:	9304      	str	r3, [sp, #16]
 80007cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80007d0:	9303      	str	r3, [sp, #12]
 80007d2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007e8:	4a1c      	ldr	r2, [pc, #112]	; (800085c <DataToCloud+0x16c>)
 80007ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007ee:	f003 fcf9 	bl	80041e4 <sniprintf>


					GsmCommands((uint8_t*)AT_RTCcloud_data);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff5a 	bl	80006b0 <GsmCommands>
					 GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 80007fc:	4818      	ldr	r0, [pc, #96]	; (8000860 <DataToCloud+0x170>)
 80007fe:	f7ff ff57 	bl	80006b0 <GsmCommands>

					 free(encoded_Time);
 8000802:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8000806:	f003 fbed 	bl	8003fe4 <free>
					free(encoded_Ch1);
 800080a:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800080e:	f003 fbe9 	bl	8003fe4 <free>
					free(encoded_Ch2);
 8000812:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8000816:	f003 fbe5 	bl	8003fe4 <free>
					free(encoded_Ch3);
 800081a:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800081e:	f003 fbe1 	bl	8003fe4 <free>
					free(encoded_Ch4);
 8000822:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8000826:	f003 fbdd 	bl	8003fe4 <free>
					free(encoded_D1);
 800082a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800082e:	f003 fbd9 	bl	8003fe4 <free>
					free(encoded_D2);
 8000832:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000836:	f003 fbd5 	bl	8003fe4 <free>
					free(encoded_D3);
 800083a:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800083e:	f003 fbd1 	bl	8003fe4 <free>
					free(encoded_D4);
 8000842:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8000846:	f003 fbcd 	bl	8003fe4 <free>

}
 800084a:	bf00      	nop
 800084c:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000850:	46bd      	mov	sp, r7
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	080049e0 	.word	0x080049e0
 8000858:	080049f0 	.word	0x080049f0
 800085c:	08004a00 	.word	0x08004a00
 8000860:	08004ae4 	.word	0x08004ae4

08000864 <url_encode>:



char* url_encode(const char* str)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    const char* hex = "0123456789ABCDEF";
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <url_encode+0xc4>)
 800086e:	613b      	str	r3, [r7, #16]
    char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fcad 	bl	80001d0 <strlen>
 8000876:	4602      	mov	r2, r0
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	3301      	adds	r3, #1
 8000880:	4618      	mov	r0, r3
 8000882:	f003 fba7 	bl	8003fd4 <malloc>
 8000886:	4603      	mov	r3, r0
 8000888:	60fb      	str	r3, [r7, #12]
    char* ptr = encoded;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	617b      	str	r3, [r7, #20]

    while (*str) {
 800088e:	e03e      	b.n	800090e <url_encode+0xaa>
        if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fb95 	bl	8003fc4 <isalnum>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10f      	bne.n	80008c0 <url_encode+0x5c>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b2d      	cmp	r3, #45	; 0x2d
 80008a6:	d00b      	beq.n	80008c0 <url_encode+0x5c>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b5f      	cmp	r3, #95	; 0x5f
 80008ae:	d007      	beq.n	80008c0 <url_encode+0x5c>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b2e      	cmp	r3, #46	; 0x2e
 80008b6:	d003      	beq.n	80008c0 <url_encode+0x5c>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b7e      	cmp	r3, #126	; 0x7e
 80008be:	d106      	bne.n	80008ce <url_encode+0x6a>
            *ptr++ = *str;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	617a      	str	r2, [r7, #20]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	7812      	ldrb	r2, [r2, #0]
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e01c      	b.n	8000908 <url_encode+0xa4>
        } else {
            *ptr++ = '%';
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	617a      	str	r2, [r7, #20]
 80008d4:	2225      	movs	r2, #37	; 0x25
 80008d6:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[(*str >> 4) & 0xF];
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	441a      	add	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	1c59      	adds	r1, r3, #1
 80008ec:	6179      	str	r1, [r7, #20]
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[*str & 0xF];
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	441a      	add	r2, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	1c59      	adds	r1, r3, #1
 8000902:	6179      	str	r1, [r7, #20]
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	701a      	strb	r2, [r3, #0]
        }
        str++;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3301      	adds	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
    while (*str) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1bc      	bne.n	8000890 <url_encode+0x2c>
    }
    *ptr = '\0';
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
    return encoded;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08004af8 	.word	0x08004af8

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f000 f9c5 	bl	8000cbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f80e 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f86e 	bl	8000a18 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  UART2_Init();
 800093c:	f7ff fe4a 	bl	80005d4 <UART2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  DataTosend(d.time,d.CH1,d.CH2,d.CH3,d.CH4,d.D1,d.D2,d.D3,d.D4);
  DataToGsm(&d);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <main+0x24>)
 8000942:	f7ff fe1f 	bl	8000584 <DataToGsm>
 DataToUart(&d);
 8000946:	4802      	ldr	r0, [pc, #8]	; (8000950 <main+0x24>)
 8000948:	f7ff fe74 	bl	8000634 <DataToUart>

  while (1)
 800094c:	e7fe      	b.n	800094c <main+0x20>
 800094e:	bf00      	nop
 8000950:	20000000 	.word	0x20000000

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b096      	sub	sp, #88	; 0x58
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2244      	movs	r2, #68	; 0x44
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fb46 	bl	8003ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800097a:	f000 fd51 	bl	8001420 <HAL_PWREx_ControlVoltageScaling>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000984:	f000 f86c 	bl	8000a60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000988:	f000 fd2c 	bl	80013e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <SystemClock_Config+0xc0>)
 800098e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000992:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <SystemClock_Config+0xc0>)
 8000994:	f023 0318 	bic.w	r3, r3, #24
 8000998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800099c:	2314      	movs	r3, #20
 800099e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009ac:	2360      	movs	r3, #96	; 0x60
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009b4:	2301      	movs	r3, #1
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80009bc:	2310      	movs	r3, #16
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fd7b 	bl	80014cc <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009dc:	f000 f840 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e0:	230f      	movs	r3, #15
 80009e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2303      	movs	r3, #3
 80009e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2101      	movs	r1, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 f97b 	bl	8001cf4 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a04:	f000 f82c 	bl	8000a60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a08:	f001 fd8e 	bl	8002528 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a0c:	bf00      	nop
 8000a0e:	3758      	adds	r7, #88	; 0x58
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_GPIO_Init+0x44>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <MX_GPIO_Init+0x44>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_GPIO_Init+0x44>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_GPIO_Init+0x44>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <MX_GPIO_Init+0x44>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_GPIO_Init+0x44>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09e      	sub	sp, #120	; 0x78
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2254      	movs	r2, #84	; 0x54
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fa8d 	bl	8003ff4 <memset>
  if(huart->Instance==USART2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <HAL_UART_MspInit+0xb8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d13e      	bne.n	8000b62 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fb23 	bl	800213c <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff ffb0 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0xbc>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_UART_MspInit+0xbc>)
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0xbc>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0xbc>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0xbc>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0xbc>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b30:	230c      	movs	r3, #12
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b40:	2307      	movs	r3, #7
 8000b42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fadf 	bl	8001110 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2026      	movs	r0, #38	; 0x26
 8000b58:	f000 fa25 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b5c:	2026      	movs	r0, #38	; 0x26
 8000b5e:	f000 fa3e 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3778      	adds	r7, #120	; 0x78
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f8d2 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART2_IRQHandler+0x10>)
 8000bce:	f001 ff53 	bl	8002a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000180 	.word	0x20000180

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f003 f9b0 	bl	8003f70 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20010000 	.word	0x20010000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000204 	.word	0x20000204
 8000c44:	20000220 	.word	0x20000220

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f003 f96f 	bl	8003f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fe45 	bl	800092c <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000cb0:	08004c98 	.word	0x08004c98
  ldr r2, =_sbss
 8000cb4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000cb8:	2000021c 	.word	0x2000021c

08000cbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_IRQHandler>

08000cbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f961 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f80e 	bl	8000cf0 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff fec4 	bl	8000a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d023      	beq.n	8000d4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_InitTick+0x70>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_InitTick+0x6c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f96d 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10f      	bne.n	8000d46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d809      	bhi.n	8000d40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f937 	bl	8000fa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0x74>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e007      	b.n	8000d50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e004      	b.n	8000d50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e001      	b.n	8000d50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000064 	.word	0x20000064
 8000d60:	2000005c 	.word	0x2000005c
 8000d64:	20000060 	.word	0x20000060

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000064 	.word	0x20000064
 8000d8c:	20000208 	.word	0x20000208

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000208 	.word	0x20000208

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000064 	.word	0x20000064

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d008      	beq.n	800103c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2204      	movs	r2, #4
 800102e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e022      	b.n	8001082 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020e 	bic.w	r2, r2, #14
 800104a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	f003 021c 	and.w	r2, r3, #28
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d005      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e029      	b.n	8001106 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 020e 	bic.w	r2, r2, #14
 80010c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 021c 	and.w	r2, r3, #28
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	4798      	blx	r3
    }
  }
  return status;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e148      	b.n	80013b2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 813a 	beq.w	80013ac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x40>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 0201 	and.w	r2, r3, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	6939      	ldr	r1, [r7, #16]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0203 	and.w	r2, r3, #3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8094 	beq.w	80013ac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b52      	ldr	r3, [pc, #328]	; (80013d0 <HAL_GPIO_Init+0x2c0>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <HAL_GPIO_Init+0x2c0>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6613      	str	r3, [r2, #96]	; 0x60
 8001290:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <HAL_GPIO_Init+0x2c0>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800129c:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_GPIO_Init+0x2c4>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c6:	d00d      	beq.n	80012e4 <HAL_GPIO_Init+0x1d4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a43      	ldr	r2, [pc, #268]	; (80013d8 <HAL_GPIO_Init+0x2c8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d007      	beq.n	80012e0 <HAL_GPIO_Init+0x1d0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a42      	ldr	r2, [pc, #264]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_GPIO_Init+0x1cc>
 80012d8:	2302      	movs	r3, #2
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1d6>
 80012dc:	2307      	movs	r3, #7
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1d6>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1d6>
 80012e4:	2300      	movs	r3, #0
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f6:	4937      	ldr	r1, [pc, #220]	; (80013d4 <HAL_GPIO_Init+0x2c4>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001328:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f47f aeaf 	bne.w	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000
 80013d8:	48000400 	.word	0x48000400
 80013dc:	48000800 	.word	0x48000800
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40007000 	.word	0x40007000

08001404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_PWREx_GetVoltageRange+0x18>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142e:	d130      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800143c:	d038      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2232      	movs	r2, #50	; 0x32
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9b      	lsrs	r3, r3, #18
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001464:	e002      	b.n	800146c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001478:	d102      	bne.n	8001480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f2      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148c:	d110      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e00f      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149e:	d007      	beq.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000
 80014c4:	2000005c 	.word	0x2000005c
 80014c8:	431bde83 	.word	0x431bde83

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	f000 bc02 	b.w	8001ce4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e0:	4b96      	ldr	r3, [pc, #600]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ea:	4b94      	ldr	r3, [pc, #592]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80e4 	beq.w	80016ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_RCC_OscConfig+0x4c>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	f040 808b 	bne.w	8001626 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 8087 	bne.w	8001626 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001518:	4b88      	ldr	r3, [pc, #544]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x64>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e3d9      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4b81      	ldr	r3, [pc, #516]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_RCC_OscConfig+0x7e>
 8001540:	4b7e      	ldr	r3, [pc, #504]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001548:	e005      	b.n	8001556 <HAL_RCC_OscConfig+0x8a>
 800154a:	4b7c      	ldr	r3, [pc, #496]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800154c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001556:	4293      	cmp	r3, r2
 8001558:	d223      	bcs.n	80015a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fd8c 	bl	800207c <RCC_SetFlashLatencyFromMSIRange>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e3ba      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156e:	4b73      	ldr	r3, [pc, #460]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a72      	ldr	r2, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b70      	ldr	r3, [pc, #448]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	496d      	ldr	r1, [pc, #436]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158c:	4b6b      	ldr	r3, [pc, #428]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	4968      	ldr	r1, [pc, #416]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
 80015a0:	e025      	b.n	80015ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a2:	4b66      	ldr	r3, [pc, #408]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a65      	ldr	r2, [pc, #404]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4960      	ldr	r1, [pc, #384]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c0:	4b5e      	ldr	r3, [pc, #376]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	495b      	ldr	r1, [pc, #364]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fd4c 	bl	800207c <RCC_SetFlashLatencyFromMSIRange>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e37a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ee:	f000 fc81 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b51      	ldr	r3, [pc, #324]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4950      	ldr	r1, [pc, #320]	; (8001740 <HAL_RCC_OscConfig+0x274>)
 8001600:	5ccb      	ldrb	r3, [r1, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_RCC_OscConfig+0x278>)
 800160c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fb6c 	bl	8000cf0 <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d052      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	e35e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d032      	beq.n	8001694 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163a:	f7ff fba9 	bl	8000d90 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001642:	f7ff fba5 	bl	8000d90 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e347      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a35      	ldr	r2, [pc, #212]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4930      	ldr	r1, [pc, #192]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	492b      	ldr	r1, [pc, #172]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e01a      	b.n	80016ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a28      	ldr	r2, [pc, #160]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb76 	bl	8000d90 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a8:	f7ff fb72 	bl	8000d90 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e314      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1dc>
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d073      	beq.n	80017be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x21c>
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d063      	beq.n	80017bc <HAL_RCC_OscConfig+0x2f0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d15f      	bne.n	80017bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e2f1      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x24c>
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e025      	b.n	8001764 <HAL_RCC_OscConfig+0x298>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d114      	bne.n	800174c <HAL_RCC_OscConfig+0x280>
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a02      	ldr	r2, [pc, #8]	; (800173c <HAL_RCC_OscConfig+0x270>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e013      	b.n	8001764 <HAL_RCC_OscConfig+0x298>
 800173c:	40021000 	.word	0x40021000
 8001740:	08004b0c 	.word	0x08004b0c
 8001744:	2000005c 	.word	0x2000005c
 8001748:	20000060 	.word	0x20000060
 800174c:	4ba0      	ldr	r3, [pc, #640]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a9f      	ldr	r2, [pc, #636]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b9d      	ldr	r3, [pc, #628]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a9c      	ldr	r2, [pc, #624]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fb10 	bl	8000d90 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fb0c 	bl	8000d90 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e2ae      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x2a8>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fafc 	bl	8000d90 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff faf8 	bl	8000d90 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e29a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x2d0>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d060      	beq.n	800188c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x310>
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d119      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d116      	bne.n	800180a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x328>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e277      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b76      	ldr	r3, [pc, #472]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	4973      	ldr	r1, [pc, #460]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001808:	e040      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d023      	beq.n	800185a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fab7 	bl	8000d90 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fab3 	bl	8000d90 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e255      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	495f      	ldr	r1, [pc, #380]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e018      	b.n	800188c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b5d      	ldr	r3, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a5c      	ldr	r2, [pc, #368]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fa93 	bl	8000d90 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fa8f 	bl	8000d90 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e231      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a6:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa6e 	bl	8000d90 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fa6a 	bl	8000d90 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e20c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x3ec>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e0:	4a3b      	ldr	r2, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fa51 	bl	8000d90 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fa4d 	bl	8000d90 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1ef      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a6 	beq.w	8001a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193a:	6593      	str	r3, [r2, #88]	; 0x58
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001948:	2301      	movs	r3, #1
 800194a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d118      	bne.n	800198a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001964:	f7ff fa14 	bl	8000d90 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196c:	f7ff fa10 	bl	8000d90 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1b2      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_RCC_OscConfig+0x508>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4d8>
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 8001994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a2:	e029      	b.n	80019f8 <HAL_RCC_OscConfig+0x52c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_OscConfig+0x50c>
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x52c>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	4b9a      	ldr	r3, [pc, #616]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	4a99      	ldr	r2, [pc, #612]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e8:	4b96      	ldr	r3, [pc, #600]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	4a95      	ldr	r2, [pc, #596]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d016      	beq.n	8001a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f9c6 	bl	8000d90 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f9c2 	bl	8000d90 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e162      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ed      	beq.n	8001a08 <HAL_RCC_OscConfig+0x53c>
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f9af 	bl	8000d90 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff f9ab 	bl	8000d90 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e14b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ed      	bne.n	8001a36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b78      	ldr	r3, [pc, #480]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a77      	ldr	r2, [pc, #476]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01c      	beq.n	8001aba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a80:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a86:	4a6f      	ldr	r2, [pc, #444]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f97e 	bl	8000d90 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff f97a 	bl	8000d90 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e11c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aaa:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ef      	beq.n	8001a98 <HAL_RCC_OscConfig+0x5cc>
 8001ab8:	e01b      	b.n	8001af2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aba:	4b62      	ldr	r3, [pc, #392]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac0:	4a60      	ldr	r2, [pc, #384]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f961 	bl	8000d90 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad2:	f7ff f95d 	bl	8000d90 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0ff      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae4:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ef      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80f3 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	f040 80c9 	bne.w	8001c98 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b06:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d12c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	3b01      	subs	r3, #1
 8001b26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d123      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d11b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d113      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d06b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d062      	beq.n	8001c40 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0ac      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b96:	f7ff f8fb 	bl	8000d90 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff f8f7 	bl	8000d90 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e099      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_RCC_OscConfig+0x77c>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bcc:	3a01      	subs	r2, #1
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd6:	0212      	lsls	r2, r2, #8
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bde:	0852      	lsrs	r2, r2, #1
 8001be0:	3a01      	subs	r2, #1
 8001be2:	0552      	lsls	r2, r2, #21
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bea:	0852      	lsrs	r2, r2, #1
 8001bec:	3a01      	subs	r2, #1
 8001bee:	0652      	lsls	r2, r2, #25
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf6:	06d2      	lsls	r2, r2, #27
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	4912      	ldr	r1, [pc, #72]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c18:	f7ff f8ba 	bl	8000d90 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f8b6 	bl	8000d90 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e058      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_RCC_OscConfig+0x778>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3e:	e050      	b.n	8001ce2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e04f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
 8001c44:	40021000 	.word	0x40021000
 8001c48:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d144      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c70:	f7ff f88e 	bl	8000d90 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff f88a 	bl	8000d90 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e02c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x7ac>
 8001c96:	e024      	b.n	8001ce2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d01f      	beq.n	8001cde <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f871 	bl	8000d90 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff f86d 	bl	8000d90 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e00f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4905      	ldr	r1, [pc, #20]	; (8001cec <HAL_RCC_OscConfig+0x820>)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x824>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
 8001cdc:	e001      	b.n	8001ce2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	feeefffc 	.word	0xfeeefffc

08001cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0e7      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4970      	ldr	r1, [pc, #448]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b6e      	ldr	r3, [pc, #440]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0cf      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d908      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4960      	ldr	r1, [pc, #384]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04c      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d121      	bne.n	8001dca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0a6      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d92:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d115      	bne.n	8001dca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09a      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001daa:	4b4e      	ldr	r3, [pc, #312]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d109      	bne.n	8001dca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e08e      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dba:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e086      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f023 0203 	bic.w	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4943      	ldr	r1, [pc, #268]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ddc:	f7fe ffd8 	bl	8000d90 <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7fe ffd4 	bl	8000d90 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e06e      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 020c 	and.w	r2, r3, #12
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1eb      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d208      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	492b      	ldr	r1, [pc, #172]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d210      	bcs.n	8001e6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 0207 	bic.w	r2, r3, #7
 8001e50:	4923      	ldr	r1, [pc, #140]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e036      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	4918      	ldr	r1, [pc, #96]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4910      	ldr	r1, [pc, #64]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea8:	f000 f824 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	490b      	ldr	r1, [pc, #44]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f4>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1fc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff0f 	bl	8000cf0 <HAL_InitTick>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004b0c 	.word	0x08004b0c
 8001eec:	2000005c 	.word	0x2000005c
 8001ef0:	20000060 	.word	0x20000060

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f02:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x34>
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d121      	bne.n	8001f66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d11e      	bne.n	8001f66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f28:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e005      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f44:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10d      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	e004      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d134      	bne.n	8001fec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d003      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xac>
 8001f98:	e005      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f9c:	617b      	str	r3, [r7, #20]
      break;
 8001f9e:	e005      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fa2:	617b      	str	r3, [r7, #20]
      break;
 8001fa4:	e002      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	617b      	str	r3, [r7, #20]
      break;
 8001faa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	fb03 f202 	mul.w	r2, r3, r2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	0e5b      	lsrs	r3, r3, #25
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fec:	69bb      	ldr	r3, [r7, #24]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08004b24 	.word	0x08004b24
 8002004:	00f42400 	.word	0x00f42400
 8002008:	007a1200 	.word	0x007a1200

0800200c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_GetHCLKFreq+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	2000005c 	.word	0x2000005c

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002028:	f7ff fff0 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4904      	ldr	r1, [pc, #16]	; (800204c <HAL_RCC_GetPCLK1Freq+0x28>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	08004b1c 	.word	0x08004b1c

08002050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002054:	f7ff ffda 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x24>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0adb      	lsrs	r3, r3, #11
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4904      	ldr	r1, [pc, #16]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	08004b1c 	.word	0x08004b1c

0800207c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002094:	f7ff f9b6 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 8002098:	6178      	str	r0, [r7, #20]
 800209a:	e014      	b.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6593      	str	r3, [r2, #88]	; 0x58
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020b4:	f7ff f9a6 	bl	8001404 <HAL_PWREx_GetVoltageRange>
 80020b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020cc:	d10b      	bne.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b80      	cmp	r3, #128	; 0x80
 80020d2:	d919      	bls.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2ba0      	cmp	r3, #160	; 0xa0
 80020d8:	d902      	bls.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020da:	2302      	movs	r3, #2
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e013      	b.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	e010      	b.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b80      	cmp	r3, #128	; 0x80
 80020ea:	d902      	bls.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020ec:	2303      	movs	r3, #3
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e00a      	b.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d102      	bne.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f8:	2302      	movs	r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e004      	b.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b70      	cmp	r3, #112	; 0x70
 8002102:	d101      	bne.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002104:	2301      	movs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 0207 	bic.w	r2, r3, #7
 8002110:	4909      	ldr	r1, [pc, #36]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	40022000 	.word	0x40022000

0800213c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002144:	2300      	movs	r3, #0
 8002146:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002148:	2300      	movs	r3, #0
 800214a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002154:	2b00      	cmp	r3, #0
 8002156:	d031      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002160:	d01a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002162:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002166:	d814      	bhi.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002168:	2b00      	cmp	r3, #0
 800216a:	d009      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800216c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002170:	d10f      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002172:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800217e:	e00c      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3304      	adds	r3, #4
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f9de 	bl	8002548 <RCCEx_PLLSAI1_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002190:	e003      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	74fb      	strb	r3, [r7, #19]
      break;
 8002196:	e000      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800219a:	7cfb      	ldrb	r3, [r7, #19]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021a0:	4b51      	ldr	r3, [pc, #324]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ae:	494e      	ldr	r1, [pc, #312]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021b6:	e001      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 809e 	beq.w	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	4a3f      	ldr	r2, [pc, #252]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6593      	str	r3, [r2, #88]	; 0x58
 80021f0:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fc:	2301      	movs	r3, #1
 80021fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a39      	ldr	r2, [pc, #228]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800220c:	f7fe fdc0 	bl	8000d90 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002212:	e009      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002214:	f7fe fdbc 	bl	8000d90 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d902      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	74fb      	strb	r3, [r7, #19]
        break;
 8002226:	e005      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ef      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d15a      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002244:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01e      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	429a      	cmp	r2, r3
 8002254:	d019      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002260:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002282:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d016      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fd7c 	bl	8000d90 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229a:	e00b      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7fe fd78 	bl	8000d90 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d902      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	74fb      	strb	r3, [r7, #19]
            break;
 80022b2:	e006      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0ec      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d6:	4904      	ldr	r1, [pc, #16]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022de:	e009      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
 80022e4:	e006      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f4:	7c7b      	ldrb	r3, [r7, #17]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b8a      	ldr	r3, [pc, #552]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	4a89      	ldr	r2, [pc, #548]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002312:	4b84      	ldr	r3, [pc, #528]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f023 0203 	bic.w	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4980      	ldr	r1, [pc, #512]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002334:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 020c 	bic.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	4978      	ldr	r1, [pc, #480]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	496f      	ldr	r1, [pc, #444]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002378:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	4967      	ldr	r1, [pc, #412]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800239a:	4b62      	ldr	r3, [pc, #392]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	495e      	ldr	r1, [pc, #376]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	4956      	ldr	r1, [pc, #344]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023de:	4b51      	ldr	r3, [pc, #324]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	494d      	ldr	r1, [pc, #308]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d028      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002400:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4945      	ldr	r1, [pc, #276]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800241e:	d106      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242a:	60d3      	str	r3, [r2, #12]
 800242c:	e011      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002436:	d10c      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	2101      	movs	r1, #1
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f882 	bl	8002548 <RCCEx_PLLSAI1_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d028      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	492d      	ldr	r1, [pc, #180]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247c:	d106      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4a28      	ldr	r2, [pc, #160]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002488:	60d3      	str	r3, [r2, #12]
 800248a:	e011      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	2101      	movs	r1, #1
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f853 	bl	8002548 <RCCEx_PLLSAI1_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01c      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	4916      	ldr	r1, [pc, #88]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024da:	d10c      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f830 	bl	8002548 <RCCEx_PLLSAI1_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002510:	4904      	ldr	r1, [pc, #16]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002518:	7cbb      	ldrb	r3, [r7, #18]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000

08002548 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002556:	4b74      	ldr	r3, [pc, #464]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d018      	beq.n	8002594 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002562:	4b71      	ldr	r3, [pc, #452]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0203 	and.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d10d      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
       ||
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800257a:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
       ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d047      	beq.n	800261e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e044      	b.n	800261e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d018      	beq.n	80025ce <RCCEx_PLLSAI1_Config+0x86>
 800259c:	2b03      	cmp	r3, #3
 800259e:	d825      	bhi.n	80025ec <RCCEx_PLLSAI1_Config+0xa4>
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d002      	beq.n	80025aa <RCCEx_PLLSAI1_Config+0x62>
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d009      	beq.n	80025bc <RCCEx_PLLSAI1_Config+0x74>
 80025a8:	e020      	b.n	80025ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025aa:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11d      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ba:	e01a      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025bc:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d116      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e013      	b.n	80025f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025ce:	4b56      	ldr	r3, [pc, #344]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ea:	e006      	b.n	80025fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e004      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025f2:	bf00      	nop
 80025f4:	e002      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	430b      	orrs	r3, r1
 8002618:	4943      	ldr	r1, [pc, #268]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d17c      	bne.n	800271e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002624:	4b40      	ldr	r3, [pc, #256]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3f      	ldr	r2, [pc, #252]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800262e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002630:	f7fe fbae 	bl	8000d90 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002636:	e009      	b.n	800264c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002638:	f7fe fbaa 	bl	8000d90 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	73fb      	strb	r3, [r7, #15]
        break;
 800264a:	e005      	b.n	8002658 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800264c:	4b36      	ldr	r3, [pc, #216]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ef      	bne.n	8002638 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d15f      	bne.n	800271e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d110      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800266c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	0211      	lsls	r1, r2, #8
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	06d2      	lsls	r2, r2, #27
 800267c:	430a      	orrs	r2, r1
 800267e:	492a      	ldr	r1, [pc, #168]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002680:	4313      	orrs	r3, r2
 8002682:	610b      	str	r3, [r1, #16]
 8002684:	e027      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d112      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800268c:	4b26      	ldr	r3, [pc, #152]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6892      	ldr	r2, [r2, #8]
 800269c:	0211      	lsls	r1, r2, #8
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6912      	ldr	r2, [r2, #16]
 80026a2:	0852      	lsrs	r2, r2, #1
 80026a4:	3a01      	subs	r2, #1
 80026a6:	0552      	lsls	r2, r2, #21
 80026a8:	430a      	orrs	r2, r1
 80026aa:	491f      	ldr	r1, [pc, #124]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	610b      	str	r3, [r1, #16]
 80026b0:	e011      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6892      	ldr	r2, [r2, #8]
 80026c2:	0211      	lsls	r1, r2, #8
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6952      	ldr	r2, [r2, #20]
 80026c8:	0852      	lsrs	r2, r2, #1
 80026ca:	3a01      	subs	r2, #1
 80026cc:	0652      	lsls	r2, r2, #25
 80026ce:	430a      	orrs	r2, r1
 80026d0:	4915      	ldr	r1, [pc, #84]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fb55 	bl	8000d90 <HAL_GetTick>
 80026e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026e8:	e009      	b.n	80026fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ea:	f7fe fb51 	bl	8000d90 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d902      	bls.n	80026fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	73fb      	strb	r3, [r7, #15]
          break;
 80026fc:	e005      	b.n	800270a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0ef      	beq.n	80026ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4903      	ldr	r1, [pc, #12]	; (8002728 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e040      	b.n	80027c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe f9b0 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2224      	movs	r2, #36	; 0x24
 8002758:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fc90 	bl	8003090 <UART_SetConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e022      	b.n	80027c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 feb0 	bl	80034e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 ff37 	bl	800362c <UART_CheckIdleState>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027dc:	2b20      	cmp	r3, #32
 80027de:	f040 8082 	bne.w	80028e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_UART_Transmit+0x26>
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07a      	b.n	80028e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Transmit+0x38>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e073      	b.n	80028e8 <HAL_UART_Transmit+0x120>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002816:	f7fe fabb 	bl	8000d90 <HAL_GetTick>
 800281a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002834:	d108      	bne.n	8002848 <HAL_UART_Transmit+0x80>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002858:	e02d      	b.n	80028b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 ff2a 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e039      	b.n	80028e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002886:	b292      	uxth	r2, r2
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3302      	adds	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e008      	b.n	80028a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b292      	uxth	r2, r2
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1cb      	bne.n	800285a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fef6 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e005      	b.n	80028e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002902:	2b20      	cmp	r3, #32
 8002904:	d156      	bne.n	80029b4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_UART_Transmit_IT+0x22>
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e04f      	b.n	80029b6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_UART_Transmit_IT+0x34>
 8002920:	2302      	movs	r3, #2
 8002922:	e048      	b.n	80029b6 <HAL_UART_Transmit_IT+0xc6>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2221      	movs	r2, #33	; 0x21
 8002954:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	d107      	bne.n	8002970 <HAL_UART_Transmit_IT+0x80>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <HAL_UART_Transmit_IT+0xd4>)
 800296c:	669a      	str	r2, [r3, #104]	; 0x68
 800296e:	e002      	b.n	8002976 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a15      	ldr	r2, [pc, #84]	; (80029c8 <HAL_UART_Transmit_IT+0xd8>)
 8002974:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	613b      	str	r3, [r7, #16]
   return(result);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	69f9      	ldr	r1, [r7, #28]
 80029a2:	6a3a      	ldr	r2, [r7, #32]
 80029a4:	e841 2300 	strex	r3, r2, [r1]
 80029a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e6      	bne.n	800297e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	372c      	adds	r7, #44	; 0x2c
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	08003b87 	.word	0x08003b87
 80029c8:	08003acf 	.word	0x08003acf

080029cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d142      	bne.n	8002a68 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_UART_Receive_IT+0x22>
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e03b      	b.n	8002a6a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Receive_IT+0x34>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e034      	b.n	8002a6a <HAL_UART_Receive_IT+0x9e>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_UART_Receive_IT+0xa8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d01f      	beq.n	8002a58 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d018      	beq.n	8002a58 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	e853 3f00 	ldrex	r3, [r3]
 8002a32:	613b      	str	r3, [r7, #16]
   return(result);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	69f9      	ldr	r1, [r7, #28]
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e6      	bne.n	8002a26 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fef2 	bl	8003848 <UART_Start_Receive_IT>
 8002a64:	4603      	mov	r3, r0
 8002a66:	e000      	b.n	8002a6a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40008000 	.word	0x40008000

08002a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0ba      	sub	sp, #232	; 0xe8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002aa2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d115      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00f      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 82a6 	beq.w	8003022 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
      }
      return;
 8002ade:	e2a0      	b.n	8003022 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8117 	beq.w	8002d18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002afa:	4b85      	ldr	r3, [pc, #532]	; (8002d10 <HAL_UART_IRQHandler+0x298>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 810a 	beq.w	8002d18 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d011      	beq.n	8002b34 <HAL_UART_IRQHandler+0xbc>
 8002b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d011      	beq.n	8002b64 <HAL_UART_IRQHandler+0xec>
 8002b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2202      	movs	r2, #2
 8002b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d011      	beq.n	8002b94 <HAL_UART_IRQHandler+0x11c>
 8002b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2204      	movs	r2, #4
 8002b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d017      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc6:	f043 0208 	orr.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d012      	beq.n	8002c02 <HAL_UART_IRQHandler+0x18a>
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 820c 	beq.w	8003026 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d005      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04f      	beq.n	8002cfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 febe 	bl	80039dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d141      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3308      	adds	r3, #8
 8002c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3308      	adds	r3, #8
 8002c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1d9      	bne.n	8002c6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d013      	beq.n	8002cea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <HAL_UART_IRQHandler+0x29c>)
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe f9dd 	bl	800108e <HAL_DMA_Abort_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d017      	beq.n	8002d0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e00f      	b.n	8002d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f9ba 	bl	8003064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	e00b      	b.n	8002d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f9b6 	bl	8003064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e007      	b.n	8002d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f9b2 	bl	8003064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d08:	e18d      	b.n	8003026 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0a:	bf00      	nop
    return;
 8002d0c:	e18b      	b.n	8003026 <HAL_UART_IRQHandler+0x5ae>
 8002d0e:	bf00      	nop
 8002d10:	04000120 	.word	0x04000120
 8002d14:	08003aa3 	.word	0x08003aa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 8146 	bne.w	8002fae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 813f 	beq.w	8002fae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8138 	beq.w	8002fae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	f040 80b4 	bne.w	8002ebe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 815f 	beq.w	800302a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d76:	429a      	cmp	r2, r3
 8002d78:	f080 8157 	bcs.w	800302a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 8085 	bne.w	8002ea2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1da      	bne.n	8002d98 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3308      	adds	r3, #8
 8002de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3308      	adds	r3, #8
 8002e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e1      	bne.n	8002de2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3308      	adds	r3, #8
 8002e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e3      	bne.n	8002e1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e72:	f023 0310 	bic.w	r3, r3, #16
 8002e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e4      	bne.n	8002e62 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe f8b8 	bl	8001012 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8de 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ebc:	e0b5      	b.n	800302a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80a7 	beq.w	800302e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80a2 	beq.w	800302e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e4      	bne.n	8002eea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3308      	adds	r3, #8
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f44:	633a      	str	r2, [r7, #48]	; 0x30
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e3      	bne.n	8002f20 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0310 	bic.w	r3, r3, #16
 8002f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	69b9      	ldr	r1, [r7, #24]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	617b      	str	r3, [r7, #20]
   return(result);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e4      	bne.n	8002f6a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f866 	bl	8003078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fac:	e03f      	b.n	800302e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x560>
 8002fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 ffc2 	bl	8003f5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fd6:	e02d      	b.n	8003034 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01c      	beq.n	8003032 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
    }
    return;
 8003000:	e017      	b.n	8003032 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <HAL_UART_IRQHandler+0x5bc>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00c      	beq.n	8003034 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fe13 	bl	8003c46 <UART_EndTransmit_IT>
    return;
 8003020:	e008      	b.n	8003034 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003022:	bf00      	nop
 8003024:	e006      	b.n	8003034 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003026:	bf00      	nop
 8003028:	e004      	b.n	8003034 <HAL_UART_IRQHandler+0x5bc>
      return;
 800302a:	bf00      	nop
 800302c:	e002      	b.n	8003034 <HAL_UART_IRQHandler+0x5bc>
      return;
 800302e:	bf00      	nop
 8003030:	e000      	b.n	8003034 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003032:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003034:	37e8      	adds	r7, #232	; 0xe8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop

0800303c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003094:	b08a      	sub	sp, #40	; 0x28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4bb4      	ldr	r3, [pc, #720]	; (8003390 <UART_SetConfig+0x300>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4aa9      	ldr	r2, [pc, #676]	; (8003394 <UART_SetConfig+0x304>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	4313      	orrs	r3, r2
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4aa0      	ldr	r2, [pc, #640]	; (8003398 <UART_SetConfig+0x308>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d126      	bne.n	8003168 <UART_SetConfig+0xd8>
 800311a:	4ba0      	ldr	r3, [pc, #640]	; (800339c <UART_SetConfig+0x30c>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b03      	cmp	r3, #3
 8003126:	d81b      	bhi.n	8003160 <UART_SetConfig+0xd0>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0xa0>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003141 	.word	0x08003141
 8003134:	08003151 	.word	0x08003151
 8003138:	08003149 	.word	0x08003149
 800313c:	08003159 	.word	0x08003159
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e080      	b.n	800324a <UART_SetConfig+0x1ba>
 8003148:	2302      	movs	r3, #2
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314e:	e07c      	b.n	800324a <UART_SetConfig+0x1ba>
 8003150:	2304      	movs	r3, #4
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003156:	e078      	b.n	800324a <UART_SetConfig+0x1ba>
 8003158:	2308      	movs	r3, #8
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e074      	b.n	800324a <UART_SetConfig+0x1ba>
 8003160:	2310      	movs	r3, #16
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e070      	b.n	800324a <UART_SetConfig+0x1ba>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a8c      	ldr	r2, [pc, #560]	; (80033a0 <UART_SetConfig+0x310>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d138      	bne.n	80031e4 <UART_SetConfig+0x154>
 8003172:	4b8a      	ldr	r3, [pc, #552]	; (800339c <UART_SetConfig+0x30c>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d82d      	bhi.n	80031dc <UART_SetConfig+0x14c>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0xf8>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080031dd 	.word	0x080031dd
 8003190:	080031dd 	.word	0x080031dd
 8003194:	080031dd 	.word	0x080031dd
 8003198:	080031cd 	.word	0x080031cd
 800319c:	080031dd 	.word	0x080031dd
 80031a0:	080031dd 	.word	0x080031dd
 80031a4:	080031dd 	.word	0x080031dd
 80031a8:	080031c5 	.word	0x080031c5
 80031ac:	080031dd 	.word	0x080031dd
 80031b0:	080031dd 	.word	0x080031dd
 80031b4:	080031dd 	.word	0x080031dd
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c2:	e042      	b.n	800324a <UART_SetConfig+0x1ba>
 80031c4:	2302      	movs	r3, #2
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ca:	e03e      	b.n	800324a <UART_SetConfig+0x1ba>
 80031cc:	2304      	movs	r3, #4
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d2:	e03a      	b.n	800324a <UART_SetConfig+0x1ba>
 80031d4:	2308      	movs	r3, #8
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031da:	e036      	b.n	800324a <UART_SetConfig+0x1ba>
 80031dc:	2310      	movs	r3, #16
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e2:	e032      	b.n	800324a <UART_SetConfig+0x1ba>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <UART_SetConfig+0x304>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d12a      	bne.n	8003244 <UART_SetConfig+0x1b4>
 80031ee:	4b6b      	ldr	r3, [pc, #428]	; (800339c <UART_SetConfig+0x30c>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031fc:	d01a      	beq.n	8003234 <UART_SetConfig+0x1a4>
 80031fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003202:	d81b      	bhi.n	800323c <UART_SetConfig+0x1ac>
 8003204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003208:	d00c      	beq.n	8003224 <UART_SetConfig+0x194>
 800320a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320e:	d815      	bhi.n	800323c <UART_SetConfig+0x1ac>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <UART_SetConfig+0x18c>
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003218:	d008      	beq.n	800322c <UART_SetConfig+0x19c>
 800321a:	e00f      	b.n	800323c <UART_SetConfig+0x1ac>
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e012      	b.n	800324a <UART_SetConfig+0x1ba>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e00e      	b.n	800324a <UART_SetConfig+0x1ba>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e00a      	b.n	800324a <UART_SetConfig+0x1ba>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e006      	b.n	800324a <UART_SetConfig+0x1ba>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e002      	b.n	800324a <UART_SetConfig+0x1ba>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a51      	ldr	r2, [pc, #324]	; (8003394 <UART_SetConfig+0x304>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d17a      	bne.n	800334a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003254:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003258:	2b08      	cmp	r3, #8
 800325a:	d824      	bhi.n	80032a6 <UART_SetConfig+0x216>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <UART_SetConfig+0x1d4>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003289 	.word	0x08003289
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003291 	.word	0x08003291
 8003270:	080032a7 	.word	0x080032a7
 8003274:	08003297 	.word	0x08003297
 8003278:	080032a7 	.word	0x080032a7
 800327c:	080032a7 	.word	0x080032a7
 8003280:	080032a7 	.word	0x080032a7
 8003284:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7fe fecc 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 800328c:	61f8      	str	r0, [r7, #28]
        break;
 800328e:	e010      	b.n	80032b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <UART_SetConfig+0x314>)
 8003292:	61fb      	str	r3, [r7, #28]
        break;
 8003294:	e00d      	b.n	80032b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe fe2d 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 800329a:	61f8      	str	r0, [r7, #28]
        break;
 800329c:	e009      	b.n	80032b2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	61fb      	str	r3, [r7, #28]
        break;
 80032a4:	e005      	b.n	80032b2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8107 	beq.w	80034c8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d305      	bcc.n	80032d6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d903      	bls.n	80032de <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032dc:	e0f4      	b.n	80034c8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2200      	movs	r2, #0
 80032e2:	461c      	mov	r4, r3
 80032e4:	4615      	mov	r5, r2
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	022b      	lsls	r3, r5, #8
 80032f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032f4:	0222      	lsls	r2, r4, #8
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	6849      	ldr	r1, [r1, #4]
 80032fa:	0849      	lsrs	r1, r1, #1
 80032fc:	2000      	movs	r0, #0
 80032fe:	4688      	mov	r8, r1
 8003300:	4681      	mov	r9, r0
 8003302:	eb12 0a08 	adds.w	sl, r2, r8
 8003306:	eb43 0b09 	adc.w	fp, r3, r9
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003318:	4650      	mov	r0, sl
 800331a:	4659      	mov	r1, fp
 800331c:	f7fc ffb0 	bl	8000280 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332e:	d308      	bcc.n	8003342 <UART_SetConfig+0x2b2>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003336:	d204      	bcs.n	8003342 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	e0c2      	b.n	80034c8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003348:	e0be      	b.n	80034c8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003352:	d16a      	bne.n	800342a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003358:	2b08      	cmp	r3, #8
 800335a:	d834      	bhi.n	80033c6 <UART_SetConfig+0x336>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0x2d4>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003389 	.word	0x08003389
 8003368:	080033a9 	.word	0x080033a9
 800336c:	080033b1 	.word	0x080033b1
 8003370:	080033c7 	.word	0x080033c7
 8003374:	080033b7 	.word	0x080033b7
 8003378:	080033c7 	.word	0x080033c7
 800337c:	080033c7 	.word	0x080033c7
 8003380:	080033c7 	.word	0x080033c7
 8003384:	080033bf 	.word	0x080033bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003388:	f7fe fe4c 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 800338c:	61f8      	str	r0, [r7, #28]
        break;
 800338e:	e020      	b.n	80033d2 <UART_SetConfig+0x342>
 8003390:	efff69f3 	.word	0xefff69f3
 8003394:	40008000 	.word	0x40008000
 8003398:	40013800 	.word	0x40013800
 800339c:	40021000 	.word	0x40021000
 80033a0:	40004400 	.word	0x40004400
 80033a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7fe fe52 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 80033ac:	61f8      	str	r0, [r7, #28]
        break;
 80033ae:	e010      	b.n	80033d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b0:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <UART_SetConfig+0x454>)
 80033b2:	61fb      	str	r3, [r7, #28]
        break;
 80033b4:	e00d      	b.n	80033d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b6:	f7fe fd9d 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 80033ba:	61f8      	str	r0, [r7, #28]
        break;
 80033bc:	e009      	b.n	80033d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c2:	61fb      	str	r3, [r7, #28]
        break;
 80033c4:	e005      	b.n	80033d2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d077      	beq.n	80034c8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005a      	lsls	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	441a      	add	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d916      	bls.n	8003422 <UART_SetConfig+0x392>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fa:	d212      	bcs.n	8003422 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f023 030f 	bic.w	r3, r3, #15
 8003404:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	b29a      	uxth	r2, r3
 8003412:	8afb      	ldrh	r3, [r7, #22]
 8003414:	4313      	orrs	r3, r2
 8003416:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	8afa      	ldrh	r2, [r7, #22]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	e052      	b.n	80034c8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003428:	e04e      	b.n	80034c8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800342a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800342e:	2b08      	cmp	r3, #8
 8003430:	d827      	bhi.n	8003482 <UART_SetConfig+0x3f2>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <UART_SetConfig+0x3a8>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800345d 	.word	0x0800345d
 800343c:	08003465 	.word	0x08003465
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003483 	.word	0x08003483
 8003448:	08003473 	.word	0x08003473
 800344c:	08003483 	.word	0x08003483
 8003450:	08003483 	.word	0x08003483
 8003454:	08003483 	.word	0x08003483
 8003458:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7fe fde2 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8003460:	61f8      	str	r0, [r7, #28]
        break;
 8003462:	e014      	b.n	800348e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7fe fdf4 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e010      	b.n	800348e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <UART_SetConfig+0x454>)
 800346e:	61fb      	str	r3, [r7, #28]
        break;
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7fe fd3f 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8003476:	61f8      	str	r0, [r7, #28]
        break;
 8003478:	e009      	b.n	800348e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347e:	61fb      	str	r3, [r7, #28]
        break;
 8003480:	e005      	b.n	800348e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800348c:	bf00      	nop
    }

    if (pclk != 0U)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d019      	beq.n	80034c8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	085a      	lsrs	r2, r3, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b0f      	cmp	r3, #15
 80034ac:	d909      	bls.n	80034c2 <UART_SetConfig+0x432>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d205      	bcs.n	80034c2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	e002      	b.n	80034c8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e2:	bf00      	nop
 80034e4:	00f42400 	.word	0x00f42400

080034e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01a      	beq.n	80035fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e6:	d10a      	bne.n	80035fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
  }
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800363c:	f7fd fba8 	bl	8000d90 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b08      	cmp	r3, #8
 800364e:	d10e      	bne.n	800366e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f82d 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e023      	b.n	80036b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d10e      	bne.n	800369a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f817 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00d      	b.n	80036b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b09c      	sub	sp, #112	; 0x70
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	e0a5      	b.n	800381c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	f000 80a1 	beq.w	800381c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fd fb59 	bl	8000d90 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80036ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d13e      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003704:	667b      	str	r3, [r7, #100]	; 0x64
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003710:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800371c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e6      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3308      	adds	r3, #8
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	663b      	str	r3, [r7, #96]	; 0x60
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3308      	adds	r3, #8
 8003740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003742:	64ba      	str	r2, [r7, #72]	; 0x48
 8003744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e5      	bne.n	8003722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e067      	b.n	800383e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d04f      	beq.n	800381c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378a:	d147      	bne.n	800381c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003794:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
 80037b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e6      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	613b      	str	r3, [r7, #16]
   return(result);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037e8:	623a      	str	r2, [r7, #32]
 80037ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69f9      	ldr	r1, [r7, #28]
 80037ee:	6a3a      	ldr	r2, [r7, #32]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e5      	bne.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e010      	b.n	800383e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	429a      	cmp	r2, r3
 8003838:	f43f af4a 	beq.w	80036d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3770      	adds	r7, #112	; 0x70
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003848:	b480      	push	{r7}
 800384a:	b097      	sub	sp, #92	; 0x5c
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387a:	d10e      	bne.n	800389a <UART_Start_Receive_IT+0x52>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <UART_Start_Receive_IT+0x48>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f240 12ff 	movw	r2, #511	; 0x1ff
 800388a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800388e:	e02d      	b.n	80038ec <UART_Start_Receive_IT+0xa4>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003898:	e028      	b.n	80038ec <UART_Start_Receive_IT+0xa4>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <UART_Start_Receive_IT+0x76>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <UART_Start_Receive_IT+0x6c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038b2:	e01b      	b.n	80038ec <UART_Start_Receive_IT+0xa4>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	227f      	movs	r2, #127	; 0x7f
 80038b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038bc:	e016      	b.n	80038ec <UART_Start_Receive_IT+0xa4>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c6:	d10d      	bne.n	80038e4 <UART_Start_Receive_IT+0x9c>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <UART_Start_Receive_IT+0x92>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	227f      	movs	r2, #127	; 0x7f
 80038d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038d8:	e008      	b.n	80038ec <UART_Start_Receive_IT+0xa4>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	223f      	movs	r2, #63	; 0x3f
 80038de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80038e2:	e003      	b.n	80038ec <UART_Start_Receive_IT+0xa4>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2222      	movs	r2, #34	; 0x22
 80038f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3308      	adds	r3, #8
 8003900:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	657b      	str	r3, [r7, #84]	; 0x54
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3308      	adds	r3, #8
 8003918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800391a:	64ba      	str	r2, [r7, #72]	; 0x48
 800391c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e5      	bne.n	80038fa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003936:	d107      	bne.n	8003948 <UART_Start_Receive_IT+0x100>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <UART_Start_Receive_IT+0x18c>)
 8003944:	665a      	str	r2, [r3, #100]	; 0x64
 8003946:	e002      	b.n	800394e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <UART_Start_Receive_IT+0x190>)
 800394c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d019      	beq.n	8003992 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
 800397e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e6      	bne.n	800395e <UART_Start_Receive_IT+0x116>
 8003990:	e018      	b.n	80039c4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	613b      	str	r3, [r7, #16]
   return(result);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f043 0320 	orr.w	r3, r3, #32
 80039a6:	653b      	str	r3, [r7, #80]	; 0x50
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	69f9      	ldr	r1, [r7, #28]
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e6      	bne.n	8003992 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	375c      	adds	r7, #92	; 0x5c
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	08003dfb 	.word	0x08003dfb
 80039d8:	08003c9b 	.word	0x08003c9b

080039dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b095      	sub	sp, #84	; 0x54
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a02:	643b      	str	r3, [r7, #64]	; 0x40
 8003a04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e6      	bne.n	80039e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e5      	bne.n	8003a16 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d118      	bne.n	8003a84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	647b      	str	r3, [r7, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6979      	ldr	r1, [r7, #20]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e6      	bne.n	8003a52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a96:	bf00      	nop
 8003a98:	3754      	adds	r7, #84	; 0x54
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff facf 	bl	8003064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b08f      	sub	sp, #60	; 0x3c
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ada:	2b21      	cmp	r3, #33	; 0x21
 8003adc:	d14d      	bne.n	8003b7a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d132      	bne.n	8003b50 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	6979      	ldr	r1, [r7, #20]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	613b      	str	r3, [r7, #16]
   return(result);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e6      	bne.n	8003b1c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003b4e:	e014      	b.n	8003b7a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	b292      	uxth	r2, r2
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003b7a:	bf00      	nop
 8003b7c:	373c      	adds	r7, #60	; 0x3c
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b091      	sub	sp, #68	; 0x44
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b92:	2b21      	cmp	r3, #33	; 0x21
 8003b94:	d151      	bne.n	8003c3a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d132      	bne.n	8003c08 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e6      	bne.n	8003ba2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e6      	bne.n	8003bd4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003c06:	e018      	b.n	8003c3a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	1c9a      	adds	r2, r3, #2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003c3a:	bf00      	nop
 8003c3c:	3744      	adds	r7, #68	; 0x44
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b088      	sub	sp, #32
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6979      	ldr	r1, [r7, #20]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e6      	bne.n	8003c4e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff f9d5 	bl	800303c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c92:	bf00      	nop
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b096      	sub	sp, #88	; 0x58
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ca8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb0:	2b22      	cmp	r3, #34	; 0x22
 8003cb2:	f040 8094 	bne.w	8003dde <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cbc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cc0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003cc4:	b2d9      	uxtb	r1, r3
 8003cc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d179      	bne.n	8003df2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d12:	653b      	str	r3, [r7, #80]	; 0x50
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d50:	633a      	str	r2, [r7, #48]	; 0x30
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d12e      	bne.n	8003dd6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0310 	bic.w	r3, r3, #16
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	617b      	str	r3, [r7, #20]
   return(result);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e6      	bne.n	8003d7e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d103      	bne.n	8003dc6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff f952 	bl	8003078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dd4:	e00d      	b.n	8003df2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff f93a 	bl	8003050 <HAL_UART_RxCpltCallback>
}
 8003ddc:	e009      	b.n	8003df2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	8b1b      	ldrh	r3, [r3, #24]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	b292      	uxth	r2, r2
 8003df0:	831a      	strh	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	3758      	adds	r7, #88	; 0x58
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b096      	sub	sp, #88	; 0x58
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e10:	2b22      	cmp	r3, #34	; 0x22
 8003e12:	f040 8094 	bne.w	8003f3e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e26:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003e2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e2e:	4013      	ands	r3, r2
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	1c9a      	adds	r2, r3, #2
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d179      	bne.n	8003f52 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e6      	bne.n	8003e5e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3308      	adds	r3, #8
 8003eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d12e      	bne.n	8003f36 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f023 0310 	bic.w	r3, r3, #16
 8003ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6979      	ldr	r1, [r7, #20]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e6      	bne.n	8003ede <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d103      	bne.n	8003f26 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2210      	movs	r2, #16
 8003f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff f8a2 	bl	8003078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f34:	e00d      	b.n	8003f52 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff f88a 	bl	8003050 <HAL_UART_RxCpltCallback>
}
 8003f3c:	e009      	b.n	8003f52 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	8b1b      	ldrh	r3, [r3, #24]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0208 	orr.w	r2, r2, #8
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	831a      	strh	r2, [r3, #24]
}
 8003f52:	bf00      	nop
 8003f54:	3758      	adds	r7, #88	; 0x58
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <__errno>:
 8003f70:	4b01      	ldr	r3, [pc, #4]	; (8003f78 <__errno+0x8>)
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000068 	.word	0x20000068

08003f7c <__libc_init_array>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	4d0d      	ldr	r5, [pc, #52]	; (8003fb4 <__libc_init_array+0x38>)
 8003f80:	4c0d      	ldr	r4, [pc, #52]	; (8003fb8 <__libc_init_array+0x3c>)
 8003f82:	1b64      	subs	r4, r4, r5
 8003f84:	10a4      	asrs	r4, r4, #2
 8003f86:	2600      	movs	r6, #0
 8003f88:	42a6      	cmp	r6, r4
 8003f8a:	d109      	bne.n	8003fa0 <__libc_init_array+0x24>
 8003f8c:	4d0b      	ldr	r5, [pc, #44]	; (8003fbc <__libc_init_array+0x40>)
 8003f8e:	4c0c      	ldr	r4, [pc, #48]	; (8003fc0 <__libc_init_array+0x44>)
 8003f90:	f000 fcda 	bl	8004948 <_init>
 8003f94:	1b64      	subs	r4, r4, r5
 8003f96:	10a4      	asrs	r4, r4, #2
 8003f98:	2600      	movs	r6, #0
 8003f9a:	42a6      	cmp	r6, r4
 8003f9c:	d105      	bne.n	8003faa <__libc_init_array+0x2e>
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa4:	4798      	blx	r3
 8003fa6:	3601      	adds	r6, #1
 8003fa8:	e7ee      	b.n	8003f88 <__libc_init_array+0xc>
 8003faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fae:	4798      	blx	r3
 8003fb0:	3601      	adds	r6, #1
 8003fb2:	e7f2      	b.n	8003f9a <__libc_init_array+0x1e>
 8003fb4:	08004c90 	.word	0x08004c90
 8003fb8:	08004c90 	.word	0x08004c90
 8003fbc:	08004c90 	.word	0x08004c90
 8003fc0:	08004c94 	.word	0x08004c94

08003fc4 <isalnum>:
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <isalnum+0xc>)
 8003fc6:	4418      	add	r0, r3
 8003fc8:	7840      	ldrb	r0, [r0, #1]
 8003fca:	f000 0007 	and.w	r0, r0, #7
 8003fce:	4770      	bx	lr
 8003fd0:	08004b54 	.word	0x08004b54

08003fd4 <malloc>:
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <malloc+0xc>)
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f000 b87f 	b.w	80040dc <_malloc_r>
 8003fde:	bf00      	nop
 8003fe0:	20000068 	.word	0x20000068

08003fe4 <free>:
 8003fe4:	4b02      	ldr	r3, [pc, #8]	; (8003ff0 <free+0xc>)
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f000 b80b 	b.w	8004004 <_free_r>
 8003fee:	bf00      	nop
 8003ff0:	20000068 	.word	0x20000068

08003ff4 <memset>:
 8003ff4:	4402      	add	r2, r0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <memset+0xa>
 8003ffc:	4770      	bx	lr
 8003ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8004002:	e7f9      	b.n	8003ff8 <memset+0x4>

08004004 <_free_r>:
 8004004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004006:	2900      	cmp	r1, #0
 8004008:	d044      	beq.n	8004094 <_free_r+0x90>
 800400a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800400e:	9001      	str	r0, [sp, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f1a1 0404 	sub.w	r4, r1, #4
 8004016:	bfb8      	it	lt
 8004018:	18e4      	addlt	r4, r4, r3
 800401a:	f000 f937 	bl	800428c <__malloc_lock>
 800401e:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <_free_r+0x94>)
 8004020:	9801      	ldr	r0, [sp, #4]
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	b933      	cbnz	r3, 8004034 <_free_r+0x30>
 8004026:	6063      	str	r3, [r4, #4]
 8004028:	6014      	str	r4, [r2, #0]
 800402a:	b003      	add	sp, #12
 800402c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004030:	f000 b932 	b.w	8004298 <__malloc_unlock>
 8004034:	42a3      	cmp	r3, r4
 8004036:	d908      	bls.n	800404a <_free_r+0x46>
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	1961      	adds	r1, r4, r5
 800403c:	428b      	cmp	r3, r1
 800403e:	bf01      	itttt	eq
 8004040:	6819      	ldreq	r1, [r3, #0]
 8004042:	685b      	ldreq	r3, [r3, #4]
 8004044:	1949      	addeq	r1, r1, r5
 8004046:	6021      	streq	r1, [r4, #0]
 8004048:	e7ed      	b.n	8004026 <_free_r+0x22>
 800404a:	461a      	mov	r2, r3
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	b10b      	cbz	r3, 8004054 <_free_r+0x50>
 8004050:	42a3      	cmp	r3, r4
 8004052:	d9fa      	bls.n	800404a <_free_r+0x46>
 8004054:	6811      	ldr	r1, [r2, #0]
 8004056:	1855      	adds	r5, r2, r1
 8004058:	42a5      	cmp	r5, r4
 800405a:	d10b      	bne.n	8004074 <_free_r+0x70>
 800405c:	6824      	ldr	r4, [r4, #0]
 800405e:	4421      	add	r1, r4
 8004060:	1854      	adds	r4, r2, r1
 8004062:	42a3      	cmp	r3, r4
 8004064:	6011      	str	r1, [r2, #0]
 8004066:	d1e0      	bne.n	800402a <_free_r+0x26>
 8004068:	681c      	ldr	r4, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	6053      	str	r3, [r2, #4]
 800406e:	4421      	add	r1, r4
 8004070:	6011      	str	r1, [r2, #0]
 8004072:	e7da      	b.n	800402a <_free_r+0x26>
 8004074:	d902      	bls.n	800407c <_free_r+0x78>
 8004076:	230c      	movs	r3, #12
 8004078:	6003      	str	r3, [r0, #0]
 800407a:	e7d6      	b.n	800402a <_free_r+0x26>
 800407c:	6825      	ldr	r5, [r4, #0]
 800407e:	1961      	adds	r1, r4, r5
 8004080:	428b      	cmp	r3, r1
 8004082:	bf04      	itt	eq
 8004084:	6819      	ldreq	r1, [r3, #0]
 8004086:	685b      	ldreq	r3, [r3, #4]
 8004088:	6063      	str	r3, [r4, #4]
 800408a:	bf04      	itt	eq
 800408c:	1949      	addeq	r1, r1, r5
 800408e:	6021      	streq	r1, [r4, #0]
 8004090:	6054      	str	r4, [r2, #4]
 8004092:	e7ca      	b.n	800402a <_free_r+0x26>
 8004094:	b003      	add	sp, #12
 8004096:	bd30      	pop	{r4, r5, pc}
 8004098:	2000020c 	.word	0x2000020c

0800409c <sbrk_aligned>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4e0e      	ldr	r6, [pc, #56]	; (80040d8 <sbrk_aligned+0x3c>)
 80040a0:	460c      	mov	r4, r1
 80040a2:	6831      	ldr	r1, [r6, #0]
 80040a4:	4605      	mov	r5, r0
 80040a6:	b911      	cbnz	r1, 80040ae <sbrk_aligned+0x12>
 80040a8:	f000 f88c 	bl	80041c4 <_sbrk_r>
 80040ac:	6030      	str	r0, [r6, #0]
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 f887 	bl	80041c4 <_sbrk_r>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	d00a      	beq.n	80040d0 <sbrk_aligned+0x34>
 80040ba:	1cc4      	adds	r4, r0, #3
 80040bc:	f024 0403 	bic.w	r4, r4, #3
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d007      	beq.n	80040d4 <sbrk_aligned+0x38>
 80040c4:	1a21      	subs	r1, r4, r0
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 f87c 	bl	80041c4 <_sbrk_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d101      	bne.n	80040d4 <sbrk_aligned+0x38>
 80040d0:	f04f 34ff 	mov.w	r4, #4294967295
 80040d4:	4620      	mov	r0, r4
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	20000210 	.word	0x20000210

080040dc <_malloc_r>:
 80040dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e0:	1ccd      	adds	r5, r1, #3
 80040e2:	f025 0503 	bic.w	r5, r5, #3
 80040e6:	3508      	adds	r5, #8
 80040e8:	2d0c      	cmp	r5, #12
 80040ea:	bf38      	it	cc
 80040ec:	250c      	movcc	r5, #12
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	4607      	mov	r7, r0
 80040f2:	db01      	blt.n	80040f8 <_malloc_r+0x1c>
 80040f4:	42a9      	cmp	r1, r5
 80040f6:	d905      	bls.n	8004104 <_malloc_r+0x28>
 80040f8:	230c      	movs	r3, #12
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	2600      	movs	r6, #0
 80040fe:	4630      	mov	r0, r6
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004104:	4e2e      	ldr	r6, [pc, #184]	; (80041c0 <_malloc_r+0xe4>)
 8004106:	f000 f8c1 	bl	800428c <__malloc_lock>
 800410a:	6833      	ldr	r3, [r6, #0]
 800410c:	461c      	mov	r4, r3
 800410e:	bb34      	cbnz	r4, 800415e <_malloc_r+0x82>
 8004110:	4629      	mov	r1, r5
 8004112:	4638      	mov	r0, r7
 8004114:	f7ff ffc2 	bl	800409c <sbrk_aligned>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	4604      	mov	r4, r0
 800411c:	d14d      	bne.n	80041ba <_malloc_r+0xde>
 800411e:	6834      	ldr	r4, [r6, #0]
 8004120:	4626      	mov	r6, r4
 8004122:	2e00      	cmp	r6, #0
 8004124:	d140      	bne.n	80041a8 <_malloc_r+0xcc>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	4631      	mov	r1, r6
 800412a:	4638      	mov	r0, r7
 800412c:	eb04 0803 	add.w	r8, r4, r3
 8004130:	f000 f848 	bl	80041c4 <_sbrk_r>
 8004134:	4580      	cmp	r8, r0
 8004136:	d13a      	bne.n	80041ae <_malloc_r+0xd2>
 8004138:	6821      	ldr	r1, [r4, #0]
 800413a:	3503      	adds	r5, #3
 800413c:	1a6d      	subs	r5, r5, r1
 800413e:	f025 0503 	bic.w	r5, r5, #3
 8004142:	3508      	adds	r5, #8
 8004144:	2d0c      	cmp	r5, #12
 8004146:	bf38      	it	cc
 8004148:	250c      	movcc	r5, #12
 800414a:	4629      	mov	r1, r5
 800414c:	4638      	mov	r0, r7
 800414e:	f7ff ffa5 	bl	800409c <sbrk_aligned>
 8004152:	3001      	adds	r0, #1
 8004154:	d02b      	beq.n	80041ae <_malloc_r+0xd2>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	442b      	add	r3, r5
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	e00e      	b.n	800417c <_malloc_r+0xa0>
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	1b52      	subs	r2, r2, r5
 8004162:	d41e      	bmi.n	80041a2 <_malloc_r+0xc6>
 8004164:	2a0b      	cmp	r2, #11
 8004166:	d916      	bls.n	8004196 <_malloc_r+0xba>
 8004168:	1961      	adds	r1, r4, r5
 800416a:	42a3      	cmp	r3, r4
 800416c:	6025      	str	r5, [r4, #0]
 800416e:	bf18      	it	ne
 8004170:	6059      	strne	r1, [r3, #4]
 8004172:	6863      	ldr	r3, [r4, #4]
 8004174:	bf08      	it	eq
 8004176:	6031      	streq	r1, [r6, #0]
 8004178:	5162      	str	r2, [r4, r5]
 800417a:	604b      	str	r3, [r1, #4]
 800417c:	4638      	mov	r0, r7
 800417e:	f104 060b 	add.w	r6, r4, #11
 8004182:	f000 f889 	bl	8004298 <__malloc_unlock>
 8004186:	f026 0607 	bic.w	r6, r6, #7
 800418a:	1d23      	adds	r3, r4, #4
 800418c:	1af2      	subs	r2, r6, r3
 800418e:	d0b6      	beq.n	80040fe <_malloc_r+0x22>
 8004190:	1b9b      	subs	r3, r3, r6
 8004192:	50a3      	str	r3, [r4, r2]
 8004194:	e7b3      	b.n	80040fe <_malloc_r+0x22>
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	42a3      	cmp	r3, r4
 800419a:	bf0c      	ite	eq
 800419c:	6032      	streq	r2, [r6, #0]
 800419e:	605a      	strne	r2, [r3, #4]
 80041a0:	e7ec      	b.n	800417c <_malloc_r+0xa0>
 80041a2:	4623      	mov	r3, r4
 80041a4:	6864      	ldr	r4, [r4, #4]
 80041a6:	e7b2      	b.n	800410e <_malloc_r+0x32>
 80041a8:	4634      	mov	r4, r6
 80041aa:	6876      	ldr	r6, [r6, #4]
 80041ac:	e7b9      	b.n	8004122 <_malloc_r+0x46>
 80041ae:	230c      	movs	r3, #12
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4638      	mov	r0, r7
 80041b4:	f000 f870 	bl	8004298 <__malloc_unlock>
 80041b8:	e7a1      	b.n	80040fe <_malloc_r+0x22>
 80041ba:	6025      	str	r5, [r4, #0]
 80041bc:	e7de      	b.n	800417c <_malloc_r+0xa0>
 80041be:	bf00      	nop
 80041c0:	2000020c 	.word	0x2000020c

080041c4 <_sbrk_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d06      	ldr	r5, [pc, #24]	; (80041e0 <_sbrk_r+0x1c>)
 80041c8:	2300      	movs	r3, #0
 80041ca:	4604      	mov	r4, r0
 80041cc:	4608      	mov	r0, r1
 80041ce:	602b      	str	r3, [r5, #0]
 80041d0:	f7fc fd04 	bl	8000bdc <_sbrk>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d102      	bne.n	80041de <_sbrk_r+0x1a>
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	b103      	cbz	r3, 80041de <_sbrk_r+0x1a>
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	20000214 	.word	0x20000214

080041e4 <sniprintf>:
 80041e4:	b40c      	push	{r2, r3}
 80041e6:	b530      	push	{r4, r5, lr}
 80041e8:	4b17      	ldr	r3, [pc, #92]	; (8004248 <sniprintf+0x64>)
 80041ea:	1e0c      	subs	r4, r1, #0
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	b09d      	sub	sp, #116	; 0x74
 80041f0:	da08      	bge.n	8004204 <sniprintf+0x20>
 80041f2:	238b      	movs	r3, #139	; 0x8b
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	f04f 30ff 	mov.w	r0, #4294967295
 80041fa:	b01d      	add	sp, #116	; 0x74
 80041fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004200:	b002      	add	sp, #8
 8004202:	4770      	bx	lr
 8004204:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004208:	f8ad 3014 	strh.w	r3, [sp, #20]
 800420c:	bf14      	ite	ne
 800420e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004212:	4623      	moveq	r3, r4
 8004214:	9304      	str	r3, [sp, #16]
 8004216:	9307      	str	r3, [sp, #28]
 8004218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800421c:	9002      	str	r0, [sp, #8]
 800421e:	9006      	str	r0, [sp, #24]
 8004220:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004224:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004226:	ab21      	add	r3, sp, #132	; 0x84
 8004228:	a902      	add	r1, sp, #8
 800422a:	4628      	mov	r0, r5
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	f000 f895 	bl	800435c <_svfiprintf_r>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	bfbc      	itt	lt
 8004236:	238b      	movlt	r3, #139	; 0x8b
 8004238:	602b      	strlt	r3, [r5, #0]
 800423a:	2c00      	cmp	r4, #0
 800423c:	d0dd      	beq.n	80041fa <sniprintf+0x16>
 800423e:	9b02      	ldr	r3, [sp, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e7d9      	b.n	80041fa <sniprintf+0x16>
 8004246:	bf00      	nop
 8004248:	20000068 	.word	0x20000068

0800424c <siprintf>:
 800424c:	b40e      	push	{r1, r2, r3}
 800424e:	b500      	push	{lr}
 8004250:	b09c      	sub	sp, #112	; 0x70
 8004252:	ab1d      	add	r3, sp, #116	; 0x74
 8004254:	9002      	str	r0, [sp, #8]
 8004256:	9006      	str	r0, [sp, #24]
 8004258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800425c:	4809      	ldr	r0, [pc, #36]	; (8004284 <siprintf+0x38>)
 800425e:	9107      	str	r1, [sp, #28]
 8004260:	9104      	str	r1, [sp, #16]
 8004262:	4909      	ldr	r1, [pc, #36]	; (8004288 <siprintf+0x3c>)
 8004264:	f853 2b04 	ldr.w	r2, [r3], #4
 8004268:	9105      	str	r1, [sp, #20]
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	a902      	add	r1, sp, #8
 8004270:	f000 f874 	bl	800435c <_svfiprintf_r>
 8004274:	9b02      	ldr	r3, [sp, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	b01c      	add	sp, #112	; 0x70
 800427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004280:	b003      	add	sp, #12
 8004282:	4770      	bx	lr
 8004284:	20000068 	.word	0x20000068
 8004288:	ffff0208 	.word	0xffff0208

0800428c <__malloc_lock>:
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <__malloc_lock+0x8>)
 800428e:	f000 baf9 	b.w	8004884 <__retarget_lock_acquire_recursive>
 8004292:	bf00      	nop
 8004294:	20000218 	.word	0x20000218

08004298 <__malloc_unlock>:
 8004298:	4801      	ldr	r0, [pc, #4]	; (80042a0 <__malloc_unlock+0x8>)
 800429a:	f000 baf4 	b.w	8004886 <__retarget_lock_release_recursive>
 800429e:	bf00      	nop
 80042a0:	20000218 	.word	0x20000218

080042a4 <__ssputs_r>:
 80042a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	688e      	ldr	r6, [r1, #8]
 80042aa:	429e      	cmp	r6, r3
 80042ac:	4682      	mov	sl, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4690      	mov	r8, r2
 80042b2:	461f      	mov	r7, r3
 80042b4:	d838      	bhi.n	8004328 <__ssputs_r+0x84>
 80042b6:	898a      	ldrh	r2, [r1, #12]
 80042b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042bc:	d032      	beq.n	8004324 <__ssputs_r+0x80>
 80042be:	6825      	ldr	r5, [r4, #0]
 80042c0:	6909      	ldr	r1, [r1, #16]
 80042c2:	eba5 0901 	sub.w	r9, r5, r1
 80042c6:	6965      	ldr	r5, [r4, #20]
 80042c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042d0:	3301      	adds	r3, #1
 80042d2:	444b      	add	r3, r9
 80042d4:	106d      	asrs	r5, r5, #1
 80042d6:	429d      	cmp	r5, r3
 80042d8:	bf38      	it	cc
 80042da:	461d      	movcc	r5, r3
 80042dc:	0553      	lsls	r3, r2, #21
 80042de:	d531      	bpl.n	8004344 <__ssputs_r+0xa0>
 80042e0:	4629      	mov	r1, r5
 80042e2:	f7ff fefb 	bl	80040dc <_malloc_r>
 80042e6:	4606      	mov	r6, r0
 80042e8:	b950      	cbnz	r0, 8004300 <__ssputs_r+0x5c>
 80042ea:	230c      	movs	r3, #12
 80042ec:	f8ca 3000 	str.w	r3, [sl]
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	6921      	ldr	r1, [r4, #16]
 8004302:	464a      	mov	r2, r9
 8004304:	f000 fac0 	bl	8004888 <memcpy>
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004312:	81a3      	strh	r3, [r4, #12]
 8004314:	6126      	str	r6, [r4, #16]
 8004316:	6165      	str	r5, [r4, #20]
 8004318:	444e      	add	r6, r9
 800431a:	eba5 0509 	sub.w	r5, r5, r9
 800431e:	6026      	str	r6, [r4, #0]
 8004320:	60a5      	str	r5, [r4, #8]
 8004322:	463e      	mov	r6, r7
 8004324:	42be      	cmp	r6, r7
 8004326:	d900      	bls.n	800432a <__ssputs_r+0x86>
 8004328:	463e      	mov	r6, r7
 800432a:	6820      	ldr	r0, [r4, #0]
 800432c:	4632      	mov	r2, r6
 800432e:	4641      	mov	r1, r8
 8004330:	f000 fab8 	bl	80048a4 <memmove>
 8004334:	68a3      	ldr	r3, [r4, #8]
 8004336:	1b9b      	subs	r3, r3, r6
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	4433      	add	r3, r6
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	2000      	movs	r0, #0
 8004342:	e7db      	b.n	80042fc <__ssputs_r+0x58>
 8004344:	462a      	mov	r2, r5
 8004346:	f000 fac7 	bl	80048d8 <_realloc_r>
 800434a:	4606      	mov	r6, r0
 800434c:	2800      	cmp	r0, #0
 800434e:	d1e1      	bne.n	8004314 <__ssputs_r+0x70>
 8004350:	6921      	ldr	r1, [r4, #16]
 8004352:	4650      	mov	r0, sl
 8004354:	f7ff fe56 	bl	8004004 <_free_r>
 8004358:	e7c7      	b.n	80042ea <__ssputs_r+0x46>
	...

0800435c <_svfiprintf_r>:
 800435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004360:	4698      	mov	r8, r3
 8004362:	898b      	ldrh	r3, [r1, #12]
 8004364:	061b      	lsls	r3, r3, #24
 8004366:	b09d      	sub	sp, #116	; 0x74
 8004368:	4607      	mov	r7, r0
 800436a:	460d      	mov	r5, r1
 800436c:	4614      	mov	r4, r2
 800436e:	d50e      	bpl.n	800438e <_svfiprintf_r+0x32>
 8004370:	690b      	ldr	r3, [r1, #16]
 8004372:	b963      	cbnz	r3, 800438e <_svfiprintf_r+0x32>
 8004374:	2140      	movs	r1, #64	; 0x40
 8004376:	f7ff feb1 	bl	80040dc <_malloc_r>
 800437a:	6028      	str	r0, [r5, #0]
 800437c:	6128      	str	r0, [r5, #16]
 800437e:	b920      	cbnz	r0, 800438a <_svfiprintf_r+0x2e>
 8004380:	230c      	movs	r3, #12
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	e0d1      	b.n	800452e <_svfiprintf_r+0x1d2>
 800438a:	2340      	movs	r3, #64	; 0x40
 800438c:	616b      	str	r3, [r5, #20]
 800438e:	2300      	movs	r3, #0
 8004390:	9309      	str	r3, [sp, #36]	; 0x24
 8004392:	2320      	movs	r3, #32
 8004394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004398:	f8cd 800c 	str.w	r8, [sp, #12]
 800439c:	2330      	movs	r3, #48	; 0x30
 800439e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004548 <_svfiprintf_r+0x1ec>
 80043a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043a6:	f04f 0901 	mov.w	r9, #1
 80043aa:	4623      	mov	r3, r4
 80043ac:	469a      	mov	sl, r3
 80043ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b2:	b10a      	cbz	r2, 80043b8 <_svfiprintf_r+0x5c>
 80043b4:	2a25      	cmp	r2, #37	; 0x25
 80043b6:	d1f9      	bne.n	80043ac <_svfiprintf_r+0x50>
 80043b8:	ebba 0b04 	subs.w	fp, sl, r4
 80043bc:	d00b      	beq.n	80043d6 <_svfiprintf_r+0x7a>
 80043be:	465b      	mov	r3, fp
 80043c0:	4622      	mov	r2, r4
 80043c2:	4629      	mov	r1, r5
 80043c4:	4638      	mov	r0, r7
 80043c6:	f7ff ff6d 	bl	80042a4 <__ssputs_r>
 80043ca:	3001      	adds	r0, #1
 80043cc:	f000 80aa 	beq.w	8004524 <_svfiprintf_r+0x1c8>
 80043d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d2:	445a      	add	r2, fp
 80043d4:	9209      	str	r2, [sp, #36]	; 0x24
 80043d6:	f89a 3000 	ldrb.w	r3, [sl]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80a2 	beq.w	8004524 <_svfiprintf_r+0x1c8>
 80043e0:	2300      	movs	r3, #0
 80043e2:	f04f 32ff 	mov.w	r2, #4294967295
 80043e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ea:	f10a 0a01 	add.w	sl, sl, #1
 80043ee:	9304      	str	r3, [sp, #16]
 80043f0:	9307      	str	r3, [sp, #28]
 80043f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043f6:	931a      	str	r3, [sp, #104]	; 0x68
 80043f8:	4654      	mov	r4, sl
 80043fa:	2205      	movs	r2, #5
 80043fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004400:	4851      	ldr	r0, [pc, #324]	; (8004548 <_svfiprintf_r+0x1ec>)
 8004402:	f7fb feed 	bl	80001e0 <memchr>
 8004406:	9a04      	ldr	r2, [sp, #16]
 8004408:	b9d8      	cbnz	r0, 8004442 <_svfiprintf_r+0xe6>
 800440a:	06d0      	lsls	r0, r2, #27
 800440c:	bf44      	itt	mi
 800440e:	2320      	movmi	r3, #32
 8004410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004414:	0711      	lsls	r1, r2, #28
 8004416:	bf44      	itt	mi
 8004418:	232b      	movmi	r3, #43	; 0x2b
 800441a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800441e:	f89a 3000 	ldrb.w	r3, [sl]
 8004422:	2b2a      	cmp	r3, #42	; 0x2a
 8004424:	d015      	beq.n	8004452 <_svfiprintf_r+0xf6>
 8004426:	9a07      	ldr	r2, [sp, #28]
 8004428:	4654      	mov	r4, sl
 800442a:	2000      	movs	r0, #0
 800442c:	f04f 0c0a 	mov.w	ip, #10
 8004430:	4621      	mov	r1, r4
 8004432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004436:	3b30      	subs	r3, #48	; 0x30
 8004438:	2b09      	cmp	r3, #9
 800443a:	d94e      	bls.n	80044da <_svfiprintf_r+0x17e>
 800443c:	b1b0      	cbz	r0, 800446c <_svfiprintf_r+0x110>
 800443e:	9207      	str	r2, [sp, #28]
 8004440:	e014      	b.n	800446c <_svfiprintf_r+0x110>
 8004442:	eba0 0308 	sub.w	r3, r0, r8
 8004446:	fa09 f303 	lsl.w	r3, r9, r3
 800444a:	4313      	orrs	r3, r2
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	46a2      	mov	sl, r4
 8004450:	e7d2      	b.n	80043f8 <_svfiprintf_r+0x9c>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	1d19      	adds	r1, r3, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	9103      	str	r1, [sp, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfbb      	ittet	lt
 800445e:	425b      	neglt	r3, r3
 8004460:	f042 0202 	orrlt.w	r2, r2, #2
 8004464:	9307      	strge	r3, [sp, #28]
 8004466:	9307      	strlt	r3, [sp, #28]
 8004468:	bfb8      	it	lt
 800446a:	9204      	strlt	r2, [sp, #16]
 800446c:	7823      	ldrb	r3, [r4, #0]
 800446e:	2b2e      	cmp	r3, #46	; 0x2e
 8004470:	d10c      	bne.n	800448c <_svfiprintf_r+0x130>
 8004472:	7863      	ldrb	r3, [r4, #1]
 8004474:	2b2a      	cmp	r3, #42	; 0x2a
 8004476:	d135      	bne.n	80044e4 <_svfiprintf_r+0x188>
 8004478:	9b03      	ldr	r3, [sp, #12]
 800447a:	1d1a      	adds	r2, r3, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	9203      	str	r2, [sp, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfb8      	it	lt
 8004484:	f04f 33ff 	movlt.w	r3, #4294967295
 8004488:	3402      	adds	r4, #2
 800448a:	9305      	str	r3, [sp, #20]
 800448c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004558 <_svfiprintf_r+0x1fc>
 8004490:	7821      	ldrb	r1, [r4, #0]
 8004492:	2203      	movs	r2, #3
 8004494:	4650      	mov	r0, sl
 8004496:	f7fb fea3 	bl	80001e0 <memchr>
 800449a:	b140      	cbz	r0, 80044ae <_svfiprintf_r+0x152>
 800449c:	2340      	movs	r3, #64	; 0x40
 800449e:	eba0 000a 	sub.w	r0, r0, sl
 80044a2:	fa03 f000 	lsl.w	r0, r3, r0
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	4303      	orrs	r3, r0
 80044aa:	3401      	adds	r4, #1
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b2:	4826      	ldr	r0, [pc, #152]	; (800454c <_svfiprintf_r+0x1f0>)
 80044b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044b8:	2206      	movs	r2, #6
 80044ba:	f7fb fe91 	bl	80001e0 <memchr>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d038      	beq.n	8004534 <_svfiprintf_r+0x1d8>
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <_svfiprintf_r+0x1f4>)
 80044c4:	bb1b      	cbnz	r3, 800450e <_svfiprintf_r+0x1b2>
 80044c6:	9b03      	ldr	r3, [sp, #12]
 80044c8:	3307      	adds	r3, #7
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	3308      	adds	r3, #8
 80044d0:	9303      	str	r3, [sp, #12]
 80044d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d4:	4433      	add	r3, r6
 80044d6:	9309      	str	r3, [sp, #36]	; 0x24
 80044d8:	e767      	b.n	80043aa <_svfiprintf_r+0x4e>
 80044da:	fb0c 3202 	mla	r2, ip, r2, r3
 80044de:	460c      	mov	r4, r1
 80044e0:	2001      	movs	r0, #1
 80044e2:	e7a5      	b.n	8004430 <_svfiprintf_r+0xd4>
 80044e4:	2300      	movs	r3, #0
 80044e6:	3401      	adds	r4, #1
 80044e8:	9305      	str	r3, [sp, #20]
 80044ea:	4619      	mov	r1, r3
 80044ec:	f04f 0c0a 	mov.w	ip, #10
 80044f0:	4620      	mov	r0, r4
 80044f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f6:	3a30      	subs	r2, #48	; 0x30
 80044f8:	2a09      	cmp	r2, #9
 80044fa:	d903      	bls.n	8004504 <_svfiprintf_r+0x1a8>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0c5      	beq.n	800448c <_svfiprintf_r+0x130>
 8004500:	9105      	str	r1, [sp, #20]
 8004502:	e7c3      	b.n	800448c <_svfiprintf_r+0x130>
 8004504:	fb0c 2101 	mla	r1, ip, r1, r2
 8004508:	4604      	mov	r4, r0
 800450a:	2301      	movs	r3, #1
 800450c:	e7f0      	b.n	80044f0 <_svfiprintf_r+0x194>
 800450e:	ab03      	add	r3, sp, #12
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	462a      	mov	r2, r5
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <_svfiprintf_r+0x1f8>)
 8004516:	a904      	add	r1, sp, #16
 8004518:	4638      	mov	r0, r7
 800451a:	f3af 8000 	nop.w
 800451e:	1c42      	adds	r2, r0, #1
 8004520:	4606      	mov	r6, r0
 8004522:	d1d6      	bne.n	80044d2 <_svfiprintf_r+0x176>
 8004524:	89ab      	ldrh	r3, [r5, #12]
 8004526:	065b      	lsls	r3, r3, #25
 8004528:	f53f af2c 	bmi.w	8004384 <_svfiprintf_r+0x28>
 800452c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800452e:	b01d      	add	sp, #116	; 0x74
 8004530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004534:	ab03      	add	r3, sp, #12
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	462a      	mov	r2, r5
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <_svfiprintf_r+0x1f8>)
 800453c:	a904      	add	r1, sp, #16
 800453e:	4638      	mov	r0, r7
 8004540:	f000 f87a 	bl	8004638 <_printf_i>
 8004544:	e7eb      	b.n	800451e <_svfiprintf_r+0x1c2>
 8004546:	bf00      	nop
 8004548:	08004c55 	.word	0x08004c55
 800454c:	08004c5f 	.word	0x08004c5f
 8004550:	00000000 	.word	0x00000000
 8004554:	080042a5 	.word	0x080042a5
 8004558:	08004c5b 	.word	0x08004c5b

0800455c <_printf_common>:
 800455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	4616      	mov	r6, r2
 8004562:	4699      	mov	r9, r3
 8004564:	688a      	ldr	r2, [r1, #8]
 8004566:	690b      	ldr	r3, [r1, #16]
 8004568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800456c:	4293      	cmp	r3, r2
 800456e:	bfb8      	it	lt
 8004570:	4613      	movlt	r3, r2
 8004572:	6033      	str	r3, [r6, #0]
 8004574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004578:	4607      	mov	r7, r0
 800457a:	460c      	mov	r4, r1
 800457c:	b10a      	cbz	r2, 8004582 <_printf_common+0x26>
 800457e:	3301      	adds	r3, #1
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	0699      	lsls	r1, r3, #26
 8004586:	bf42      	ittt	mi
 8004588:	6833      	ldrmi	r3, [r6, #0]
 800458a:	3302      	addmi	r3, #2
 800458c:	6033      	strmi	r3, [r6, #0]
 800458e:	6825      	ldr	r5, [r4, #0]
 8004590:	f015 0506 	ands.w	r5, r5, #6
 8004594:	d106      	bne.n	80045a4 <_printf_common+0x48>
 8004596:	f104 0a19 	add.w	sl, r4, #25
 800459a:	68e3      	ldr	r3, [r4, #12]
 800459c:	6832      	ldr	r2, [r6, #0]
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	42ab      	cmp	r3, r5
 80045a2:	dc26      	bgt.n	80045f2 <_printf_common+0x96>
 80045a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045a8:	1e13      	subs	r3, r2, #0
 80045aa:	6822      	ldr	r2, [r4, #0]
 80045ac:	bf18      	it	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	0692      	lsls	r2, r2, #26
 80045b2:	d42b      	bmi.n	800460c <_printf_common+0xb0>
 80045b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045b8:	4649      	mov	r1, r9
 80045ba:	4638      	mov	r0, r7
 80045bc:	47c0      	blx	r8
 80045be:	3001      	adds	r0, #1
 80045c0:	d01e      	beq.n	8004600 <_printf_common+0xa4>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	68e5      	ldr	r5, [r4, #12]
 80045c6:	6832      	ldr	r2, [r6, #0]
 80045c8:	f003 0306 	and.w	r3, r3, #6
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	bf08      	it	eq
 80045d0:	1aad      	subeq	r5, r5, r2
 80045d2:	68a3      	ldr	r3, [r4, #8]
 80045d4:	6922      	ldr	r2, [r4, #16]
 80045d6:	bf0c      	ite	eq
 80045d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045dc:	2500      	movne	r5, #0
 80045de:	4293      	cmp	r3, r2
 80045e0:	bfc4      	itt	gt
 80045e2:	1a9b      	subgt	r3, r3, r2
 80045e4:	18ed      	addgt	r5, r5, r3
 80045e6:	2600      	movs	r6, #0
 80045e8:	341a      	adds	r4, #26
 80045ea:	42b5      	cmp	r5, r6
 80045ec:	d11a      	bne.n	8004624 <_printf_common+0xc8>
 80045ee:	2000      	movs	r0, #0
 80045f0:	e008      	b.n	8004604 <_printf_common+0xa8>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4652      	mov	r2, sl
 80045f6:	4649      	mov	r1, r9
 80045f8:	4638      	mov	r0, r7
 80045fa:	47c0      	blx	r8
 80045fc:	3001      	adds	r0, #1
 80045fe:	d103      	bne.n	8004608 <_printf_common+0xac>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004608:	3501      	adds	r5, #1
 800460a:	e7c6      	b.n	800459a <_printf_common+0x3e>
 800460c:	18e1      	adds	r1, r4, r3
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	2030      	movs	r0, #48	; 0x30
 8004612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004616:	4422      	add	r2, r4
 8004618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800461c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004620:	3302      	adds	r3, #2
 8004622:	e7c7      	b.n	80045b4 <_printf_common+0x58>
 8004624:	2301      	movs	r3, #1
 8004626:	4622      	mov	r2, r4
 8004628:	4649      	mov	r1, r9
 800462a:	4638      	mov	r0, r7
 800462c:	47c0      	blx	r8
 800462e:	3001      	adds	r0, #1
 8004630:	d0e6      	beq.n	8004600 <_printf_common+0xa4>
 8004632:	3601      	adds	r6, #1
 8004634:	e7d9      	b.n	80045ea <_printf_common+0x8e>
	...

08004638 <_printf_i>:
 8004638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	7e0f      	ldrb	r7, [r1, #24]
 800463e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004640:	2f78      	cmp	r7, #120	; 0x78
 8004642:	4691      	mov	r9, r2
 8004644:	4680      	mov	r8, r0
 8004646:	460c      	mov	r4, r1
 8004648:	469a      	mov	sl, r3
 800464a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800464e:	d807      	bhi.n	8004660 <_printf_i+0x28>
 8004650:	2f62      	cmp	r7, #98	; 0x62
 8004652:	d80a      	bhi.n	800466a <_printf_i+0x32>
 8004654:	2f00      	cmp	r7, #0
 8004656:	f000 80d8 	beq.w	800480a <_printf_i+0x1d2>
 800465a:	2f58      	cmp	r7, #88	; 0x58
 800465c:	f000 80a3 	beq.w	80047a6 <_printf_i+0x16e>
 8004660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004668:	e03a      	b.n	80046e0 <_printf_i+0xa8>
 800466a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800466e:	2b15      	cmp	r3, #21
 8004670:	d8f6      	bhi.n	8004660 <_printf_i+0x28>
 8004672:	a101      	add	r1, pc, #4	; (adr r1, 8004678 <_printf_i+0x40>)
 8004674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004678:	080046d1 	.word	0x080046d1
 800467c:	080046e5 	.word	0x080046e5
 8004680:	08004661 	.word	0x08004661
 8004684:	08004661 	.word	0x08004661
 8004688:	08004661 	.word	0x08004661
 800468c:	08004661 	.word	0x08004661
 8004690:	080046e5 	.word	0x080046e5
 8004694:	08004661 	.word	0x08004661
 8004698:	08004661 	.word	0x08004661
 800469c:	08004661 	.word	0x08004661
 80046a0:	08004661 	.word	0x08004661
 80046a4:	080047f1 	.word	0x080047f1
 80046a8:	08004715 	.word	0x08004715
 80046ac:	080047d3 	.word	0x080047d3
 80046b0:	08004661 	.word	0x08004661
 80046b4:	08004661 	.word	0x08004661
 80046b8:	08004813 	.word	0x08004813
 80046bc:	08004661 	.word	0x08004661
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004661 	.word	0x08004661
 80046c8:	08004661 	.word	0x08004661
 80046cc:	080047db 	.word	0x080047db
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	602a      	str	r2, [r5, #0]
 80046d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0a3      	b.n	800482c <_printf_i+0x1f4>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	6829      	ldr	r1, [r5, #0]
 80046e8:	0606      	lsls	r6, r0, #24
 80046ea:	f101 0304 	add.w	r3, r1, #4
 80046ee:	d50a      	bpl.n	8004706 <_printf_i+0xce>
 80046f0:	680e      	ldr	r6, [r1, #0]
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	2e00      	cmp	r6, #0
 80046f6:	da03      	bge.n	8004700 <_printf_i+0xc8>
 80046f8:	232d      	movs	r3, #45	; 0x2d
 80046fa:	4276      	negs	r6, r6
 80046fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004700:	485e      	ldr	r0, [pc, #376]	; (800487c <_printf_i+0x244>)
 8004702:	230a      	movs	r3, #10
 8004704:	e019      	b.n	800473a <_printf_i+0x102>
 8004706:	680e      	ldr	r6, [r1, #0]
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800470e:	bf18      	it	ne
 8004710:	b236      	sxthne	r6, r6
 8004712:	e7ef      	b.n	80046f4 <_printf_i+0xbc>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	1d19      	adds	r1, r3, #4
 800471a:	6029      	str	r1, [r5, #0]
 800471c:	0601      	lsls	r1, r0, #24
 800471e:	d501      	bpl.n	8004724 <_printf_i+0xec>
 8004720:	681e      	ldr	r6, [r3, #0]
 8004722:	e002      	b.n	800472a <_printf_i+0xf2>
 8004724:	0646      	lsls	r6, r0, #25
 8004726:	d5fb      	bpl.n	8004720 <_printf_i+0xe8>
 8004728:	881e      	ldrh	r6, [r3, #0]
 800472a:	4854      	ldr	r0, [pc, #336]	; (800487c <_printf_i+0x244>)
 800472c:	2f6f      	cmp	r7, #111	; 0x6f
 800472e:	bf0c      	ite	eq
 8004730:	2308      	moveq	r3, #8
 8004732:	230a      	movne	r3, #10
 8004734:	2100      	movs	r1, #0
 8004736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800473a:	6865      	ldr	r5, [r4, #4]
 800473c:	60a5      	str	r5, [r4, #8]
 800473e:	2d00      	cmp	r5, #0
 8004740:	bfa2      	ittt	ge
 8004742:	6821      	ldrge	r1, [r4, #0]
 8004744:	f021 0104 	bicge.w	r1, r1, #4
 8004748:	6021      	strge	r1, [r4, #0]
 800474a:	b90e      	cbnz	r6, 8004750 <_printf_i+0x118>
 800474c:	2d00      	cmp	r5, #0
 800474e:	d04d      	beq.n	80047ec <_printf_i+0x1b4>
 8004750:	4615      	mov	r5, r2
 8004752:	fbb6 f1f3 	udiv	r1, r6, r3
 8004756:	fb03 6711 	mls	r7, r3, r1, r6
 800475a:	5dc7      	ldrb	r7, [r0, r7]
 800475c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004760:	4637      	mov	r7, r6
 8004762:	42bb      	cmp	r3, r7
 8004764:	460e      	mov	r6, r1
 8004766:	d9f4      	bls.n	8004752 <_printf_i+0x11a>
 8004768:	2b08      	cmp	r3, #8
 800476a:	d10b      	bne.n	8004784 <_printf_i+0x14c>
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	07de      	lsls	r6, r3, #31
 8004770:	d508      	bpl.n	8004784 <_printf_i+0x14c>
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	6861      	ldr	r1, [r4, #4]
 8004776:	4299      	cmp	r1, r3
 8004778:	bfde      	ittt	le
 800477a:	2330      	movle	r3, #48	; 0x30
 800477c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004780:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004784:	1b52      	subs	r2, r2, r5
 8004786:	6122      	str	r2, [r4, #16]
 8004788:	f8cd a000 	str.w	sl, [sp]
 800478c:	464b      	mov	r3, r9
 800478e:	aa03      	add	r2, sp, #12
 8004790:	4621      	mov	r1, r4
 8004792:	4640      	mov	r0, r8
 8004794:	f7ff fee2 	bl	800455c <_printf_common>
 8004798:	3001      	adds	r0, #1
 800479a:	d14c      	bne.n	8004836 <_printf_i+0x1fe>
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	b004      	add	sp, #16
 80047a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a6:	4835      	ldr	r0, [pc, #212]	; (800487c <_printf_i+0x244>)
 80047a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047ac:	6829      	ldr	r1, [r5, #0]
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b4:	6029      	str	r1, [r5, #0]
 80047b6:	061d      	lsls	r5, r3, #24
 80047b8:	d514      	bpl.n	80047e4 <_printf_i+0x1ac>
 80047ba:	07df      	lsls	r7, r3, #31
 80047bc:	bf44      	itt	mi
 80047be:	f043 0320 	orrmi.w	r3, r3, #32
 80047c2:	6023      	strmi	r3, [r4, #0]
 80047c4:	b91e      	cbnz	r6, 80047ce <_printf_i+0x196>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	f023 0320 	bic.w	r3, r3, #32
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	2310      	movs	r3, #16
 80047d0:	e7b0      	b.n	8004734 <_printf_i+0xfc>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f043 0320 	orr.w	r3, r3, #32
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	2378      	movs	r3, #120	; 0x78
 80047dc:	4828      	ldr	r0, [pc, #160]	; (8004880 <_printf_i+0x248>)
 80047de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047e2:	e7e3      	b.n	80047ac <_printf_i+0x174>
 80047e4:	0659      	lsls	r1, r3, #25
 80047e6:	bf48      	it	mi
 80047e8:	b2b6      	uxthmi	r6, r6
 80047ea:	e7e6      	b.n	80047ba <_printf_i+0x182>
 80047ec:	4615      	mov	r5, r2
 80047ee:	e7bb      	b.n	8004768 <_printf_i+0x130>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	6826      	ldr	r6, [r4, #0]
 80047f4:	6961      	ldr	r1, [r4, #20]
 80047f6:	1d18      	adds	r0, r3, #4
 80047f8:	6028      	str	r0, [r5, #0]
 80047fa:	0635      	lsls	r5, r6, #24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	d501      	bpl.n	8004804 <_printf_i+0x1cc>
 8004800:	6019      	str	r1, [r3, #0]
 8004802:	e002      	b.n	800480a <_printf_i+0x1d2>
 8004804:	0670      	lsls	r0, r6, #25
 8004806:	d5fb      	bpl.n	8004800 <_printf_i+0x1c8>
 8004808:	8019      	strh	r1, [r3, #0]
 800480a:	2300      	movs	r3, #0
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	4615      	mov	r5, r2
 8004810:	e7ba      	b.n	8004788 <_printf_i+0x150>
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	602a      	str	r2, [r5, #0]
 8004818:	681d      	ldr	r5, [r3, #0]
 800481a:	6862      	ldr	r2, [r4, #4]
 800481c:	2100      	movs	r1, #0
 800481e:	4628      	mov	r0, r5
 8004820:	f7fb fcde 	bl	80001e0 <memchr>
 8004824:	b108      	cbz	r0, 800482a <_printf_i+0x1f2>
 8004826:	1b40      	subs	r0, r0, r5
 8004828:	6060      	str	r0, [r4, #4]
 800482a:	6863      	ldr	r3, [r4, #4]
 800482c:	6123      	str	r3, [r4, #16]
 800482e:	2300      	movs	r3, #0
 8004830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004834:	e7a8      	b.n	8004788 <_printf_i+0x150>
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	462a      	mov	r2, r5
 800483a:	4649      	mov	r1, r9
 800483c:	4640      	mov	r0, r8
 800483e:	47d0      	blx	sl
 8004840:	3001      	adds	r0, #1
 8004842:	d0ab      	beq.n	800479c <_printf_i+0x164>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	079b      	lsls	r3, r3, #30
 8004848:	d413      	bmi.n	8004872 <_printf_i+0x23a>
 800484a:	68e0      	ldr	r0, [r4, #12]
 800484c:	9b03      	ldr	r3, [sp, #12]
 800484e:	4298      	cmp	r0, r3
 8004850:	bfb8      	it	lt
 8004852:	4618      	movlt	r0, r3
 8004854:	e7a4      	b.n	80047a0 <_printf_i+0x168>
 8004856:	2301      	movs	r3, #1
 8004858:	4632      	mov	r2, r6
 800485a:	4649      	mov	r1, r9
 800485c:	4640      	mov	r0, r8
 800485e:	47d0      	blx	sl
 8004860:	3001      	adds	r0, #1
 8004862:	d09b      	beq.n	800479c <_printf_i+0x164>
 8004864:	3501      	adds	r5, #1
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	9903      	ldr	r1, [sp, #12]
 800486a:	1a5b      	subs	r3, r3, r1
 800486c:	42ab      	cmp	r3, r5
 800486e:	dcf2      	bgt.n	8004856 <_printf_i+0x21e>
 8004870:	e7eb      	b.n	800484a <_printf_i+0x212>
 8004872:	2500      	movs	r5, #0
 8004874:	f104 0619 	add.w	r6, r4, #25
 8004878:	e7f5      	b.n	8004866 <_printf_i+0x22e>
 800487a:	bf00      	nop
 800487c:	08004c66 	.word	0x08004c66
 8004880:	08004c77 	.word	0x08004c77

08004884 <__retarget_lock_acquire_recursive>:
 8004884:	4770      	bx	lr

08004886 <__retarget_lock_release_recursive>:
 8004886:	4770      	bx	lr

08004888 <memcpy>:
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004890:	d100      	bne.n	8004894 <memcpy+0xc>
 8004892:	4770      	bx	lr
 8004894:	b510      	push	{r4, lr}
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489e:	4291      	cmp	r1, r2
 80048a0:	d1f9      	bne.n	8004896 <memcpy+0xe>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <memmove>:
 80048a4:	4288      	cmp	r0, r1
 80048a6:	b510      	push	{r4, lr}
 80048a8:	eb01 0402 	add.w	r4, r1, r2
 80048ac:	d902      	bls.n	80048b4 <memmove+0x10>
 80048ae:	4284      	cmp	r4, r0
 80048b0:	4623      	mov	r3, r4
 80048b2:	d807      	bhi.n	80048c4 <memmove+0x20>
 80048b4:	1e43      	subs	r3, r0, #1
 80048b6:	42a1      	cmp	r1, r4
 80048b8:	d008      	beq.n	80048cc <memmove+0x28>
 80048ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048c2:	e7f8      	b.n	80048b6 <memmove+0x12>
 80048c4:	4402      	add	r2, r0
 80048c6:	4601      	mov	r1, r0
 80048c8:	428a      	cmp	r2, r1
 80048ca:	d100      	bne.n	80048ce <memmove+0x2a>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048d6:	e7f7      	b.n	80048c8 <memmove+0x24>

080048d8 <_realloc_r>:
 80048d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048dc:	4680      	mov	r8, r0
 80048de:	4614      	mov	r4, r2
 80048e0:	460e      	mov	r6, r1
 80048e2:	b921      	cbnz	r1, 80048ee <_realloc_r+0x16>
 80048e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e8:	4611      	mov	r1, r2
 80048ea:	f7ff bbf7 	b.w	80040dc <_malloc_r>
 80048ee:	b92a      	cbnz	r2, 80048fc <_realloc_r+0x24>
 80048f0:	f7ff fb88 	bl	8004004 <_free_r>
 80048f4:	4625      	mov	r5, r4
 80048f6:	4628      	mov	r0, r5
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048fc:	f000 f81b 	bl	8004936 <_malloc_usable_size_r>
 8004900:	4284      	cmp	r4, r0
 8004902:	4607      	mov	r7, r0
 8004904:	d802      	bhi.n	800490c <_realloc_r+0x34>
 8004906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800490a:	d812      	bhi.n	8004932 <_realloc_r+0x5a>
 800490c:	4621      	mov	r1, r4
 800490e:	4640      	mov	r0, r8
 8004910:	f7ff fbe4 	bl	80040dc <_malloc_r>
 8004914:	4605      	mov	r5, r0
 8004916:	2800      	cmp	r0, #0
 8004918:	d0ed      	beq.n	80048f6 <_realloc_r+0x1e>
 800491a:	42bc      	cmp	r4, r7
 800491c:	4622      	mov	r2, r4
 800491e:	4631      	mov	r1, r6
 8004920:	bf28      	it	cs
 8004922:	463a      	movcs	r2, r7
 8004924:	f7ff ffb0 	bl	8004888 <memcpy>
 8004928:	4631      	mov	r1, r6
 800492a:	4640      	mov	r0, r8
 800492c:	f7ff fb6a 	bl	8004004 <_free_r>
 8004930:	e7e1      	b.n	80048f6 <_realloc_r+0x1e>
 8004932:	4635      	mov	r5, r6
 8004934:	e7df      	b.n	80048f6 <_realloc_r+0x1e>

08004936 <_malloc_usable_size_r>:
 8004936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493a:	1f18      	subs	r0, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	bfbc      	itt	lt
 8004940:	580b      	ldrlt	r3, [r1, r0]
 8004942:	18c0      	addlt	r0, r0, r3
 8004944:	4770      	bx	lr
	...

08004948 <_init>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr

08004954 <_fini>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

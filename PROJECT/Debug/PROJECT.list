
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000645c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006970  08006970  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006970  08006970  00016970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006978  08006978  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006978  08006978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000070  080069f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  080069f0  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eb3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002728  00000000  00000000  00030f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00033680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00034430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021329  00000000  00000000  000350d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011df1  00000000  00000000  00056401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c30d7  00000000  00000000  000681f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b2c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c24  00000000  00000000  0012b31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065d4 	.word	0x080065d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080065d4 	.word	0x080065d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DataToGsm>:


int count=0;

void DataToGsm(struct data *d1)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af06      	add	r7, sp, #24
 800058a:	6078      	str	r0, [r7, #4]
	uint8_t sec=d1->sec;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	789b      	ldrb	r3, [r3, #2]
 8000590:	73fb      	strb	r3, [r7, #15]
	uint8_t ST=d1->scan_time;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000598:	73bb      	strb	r3, [r7, #14]
	//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf(buffer_Time,"%02d:%02d:%02d",d1->hr,d1->min,d1->sec);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	460b      	mov	r3, r1
 80005ae:	493e      	ldr	r1, [pc, #248]	; (80006a8 <DataToGsm+0x124>)
 80005b0:	483e      	ldr	r0, [pc, #248]	; (80006ac <DataToGsm+0x128>)
 80005b2:	f005 fc91 	bl	8005ed8 <siprintf>

	if(d1->GPIO[0]=='1')
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80005bc:	2b31      	cmp	r3, #49	; 0x31
 80005be:	d107      	bne.n	80005d0 <DataToGsm+0x4c>
	{
		strcpy(d1->Status1, "High");
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3330      	adds	r3, #48	; 0x30
 80005c4:	4a3a      	ldr	r2, [pc, #232]	; (80006b0 <DataToGsm+0x12c>)
 80005c6:	6810      	ldr	r0, [r2, #0]
 80005c8:	6018      	str	r0, [r3, #0]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	711a      	strb	r2, [r3, #4]
 80005ce:	e004      	b.n	80005da <DataToGsm+0x56>
	}
	else
	{
		strcpy(d1->Status1, "Low");
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3330      	adds	r3, #48	; 0x30
 80005d4:	4a37      	ldr	r2, [pc, #220]	; (80006b4 <DataToGsm+0x130>)
 80005d6:	6810      	ldr	r0, [r2, #0]
 80005d8:	6018      	str	r0, [r3, #0]
	}

	if(d1->GPIO[1]=='1')
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80005e0:	2b31      	cmp	r3, #49	; 0x31
 80005e2:	d107      	bne.n	80005f4 <DataToGsm+0x70>
	{
		strcpy(d1->Status2, "High");
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	333a      	adds	r3, #58	; 0x3a
 80005e8:	4a31      	ldr	r2, [pc, #196]	; (80006b0 <DataToGsm+0x12c>)
 80005ea:	6810      	ldr	r0, [r2, #0]
 80005ec:	6018      	str	r0, [r3, #0]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	711a      	strb	r2, [r3, #4]
 80005f2:	e004      	b.n	80005fe <DataToGsm+0x7a>
	}
	else
	{
		strcpy(d1->Status2, "Low");
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	333a      	adds	r3, #58	; 0x3a
 80005f8:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <DataToGsm+0x130>)
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	6018      	str	r0, [r3, #0]
	}

	if(d1->GPIO[2]=='1')
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000604:	2b31      	cmp	r3, #49	; 0x31
 8000606:	d107      	bne.n	8000618 <DataToGsm+0x94>
	{
		strcpy(d1->Status3, "High");
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3344      	adds	r3, #68	; 0x44
 800060c:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <DataToGsm+0x12c>)
 800060e:	6810      	ldr	r0, [r2, #0]
 8000610:	6018      	str	r0, [r3, #0]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	711a      	strb	r2, [r3, #4]
 8000616:	e004      	b.n	8000622 <DataToGsm+0x9e>
	}
	else
	{
		strcpy(d1->Status3, "Low");
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3344      	adds	r3, #68	; 0x44
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <DataToGsm+0x130>)
 800061e:	6810      	ldr	r0, [r2, #0]
 8000620:	6018      	str	r0, [r3, #0]
	}

	if(d1->GPIO[3]=='1')
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000628:	2b31      	cmp	r3, #49	; 0x31
 800062a:	d107      	bne.n	800063c <DataToGsm+0xb8>
	{
		strcpy(d1->Status4, "High");
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	334e      	adds	r3, #78	; 0x4e
 8000630:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <DataToGsm+0x12c>)
 8000632:	6810      	ldr	r0, [r2, #0]
 8000634:	6018      	str	r0, [r3, #0]
 8000636:	7912      	ldrb	r2, [r2, #4]
 8000638:	711a      	strb	r2, [r3, #4]
 800063a:	e004      	b.n	8000646 <DataToGsm+0xc2>
	}
	else
	{
		strcpy(d1->Status4, "Low");
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	334e      	adds	r3, #78	; 0x4e
 8000640:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <DataToGsm+0x130>)
 8000642:	6810      	ldr	r0, [r2, #0]
 8000644:	6018      	str	r0, [r3, #0]
	}




	if(sec==59)
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	2b3b      	cmp	r3, #59	; 0x3b
 800064a:	d104      	bne.n	8000656 <DataToGsm+0xd2>
	{
		count=count+1;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <DataToGsm+0x134>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <DataToGsm+0x134>)
 8000654:	6013      	str	r3, [r2, #0]

	}


	if(count==ST)
 8000656:	7bba      	ldrb	r2, [r7, #14]
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <DataToGsm+0x134>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	d11f      	bne.n	80006a0 <DataToGsm+0x11c>
	{
		DataToCloud(buffer_Time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->Status1,d1->Status2,d1->Status3,d1->Status4);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1cdd      	adds	r5, r3, #3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f103 060d 	add.w	r6, r3, #13
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f103 0c17 	add.w	ip, r3, #23
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3321      	adds	r3, #33	; 0x21
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	3230      	adds	r2, #48	; 0x30
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	313a      	adds	r1, #58	; 0x3a
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	3044      	adds	r0, #68	; 0x44
 8000680:	687c      	ldr	r4, [r7, #4]
 8000682:	344e      	adds	r4, #78	; 0x4e
 8000684:	9404      	str	r4, [sp, #16]
 8000686:	9003      	str	r0, [sp, #12]
 8000688:	9102      	str	r1, [sp, #8]
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	4663      	mov	r3, ip
 8000690:	4632      	mov	r2, r6
 8000692:	4629      	mov	r1, r5
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <DataToGsm+0x128>)
 8000696:	f000 f8cf 	bl	8000838 <DataToCloud>
		count=0;
 800069a:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <DataToGsm+0x134>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	}


}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a8:	080065ec 	.word	0x080065ec
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	080065fc 	.word	0x080065fc
 80006b4:	08006604 	.word	0x08006604
 80006b8:	2000009c 	.word	0x2000009c

080006bc <UART2_Init>:

UART_HandleTypeDef huart2;


void UART2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <UART2_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <UART2_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <UART2_Init+0x58>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <UART2_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <UART2_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <UART2_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <UART2_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <UART2_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <UART2_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <UART2_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <UART2_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <UART2_Init+0x58>)
 8000700:	f003 fe62 	bl	80043c8 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <UART2_Init+0x52>
	{
		Error_Handler();
 800070a:	f000 fbdf 	bl	8000ecc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000138 	.word	0x20000138
 8000718:	40004400 	.word	0x40004400

0800071c <DataToUart>:
//{
//	HAL_UART_Transmit(&huart2, (uint8_t*)GPIO, 4,1000);
//}

void DataToUart(struct data *d)
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b08f      	sub	sp, #60	; 0x3c
 8000720:	af0a      	add	r7, sp, #40	; 0x28
 8000722:	60f8      	str	r0, [r7, #12]
//	extern buffer_Time;
//	sprintf(buffer_Time,"%02d:%02d:%02d",d1->hr,d1->min,d1->sec);
	sprintf(buf,"%02d:%02d:%02d,%s,%s,%s,%s,%s,%s,%s,%s\r\n",d->hr,d->min,d->sec,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	469c      	mov	ip, r3
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	785b      	ldrb	r3, [r3, #1]
 800072e:	469e      	mov	lr, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	789b      	ldrb	r3, [r3, #2]
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3303      	adds	r3, #3
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	320d      	adds	r2, #13
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	68f9      	ldr	r1, [r7, #12]
 8000742:	3117      	adds	r1, #23
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	3021      	adds	r0, #33	; 0x21
 8000748:	68fc      	ldr	r4, [r7, #12]
 800074a:	3430      	adds	r4, #48	; 0x30
 800074c:	68fd      	ldr	r5, [r7, #12]
 800074e:	353a      	adds	r5, #58	; 0x3a
 8000750:	68fe      	ldr	r6, [r7, #12]
 8000752:	3644      	adds	r6, #68	; 0x44
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	324e      	adds	r2, #78	; 0x4e
 8000758:	9208      	str	r2, [sp, #32]
 800075a:	9607      	str	r6, [sp, #28]
 800075c:	9506      	str	r5, [sp, #24]
 800075e:	9405      	str	r4, [sp, #20]
 8000760:	9004      	str	r0, [sp, #16]
 8000762:	9103      	str	r1, [sp, #12]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	9202      	str	r2, [sp, #8]
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4673      	mov	r3, lr
 8000770:	4662      	mov	r2, ip
 8000772:	490b      	ldr	r1, [pc, #44]	; (80007a0 <DataToUart+0x84>)
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <DataToUart+0x88>)
 8000776:	f005 fbaf 	bl	8005ed8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <DataToUart+0x88>)
 800077c:	f7ff fd28 	bl	80001d0 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <DataToUart+0x88>)
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <DataToUart+0x8c>)
 800078c:	f003 fe6a 	bl	8004464 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f000 fdd8 	bl	8001348 <HAL_Delay>

}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a0:	08006608 	.word	0x08006608
 80007a4:	200000a0 	.word	0x200000a0
 80007a8:	20000138 	.word	0x20000138

080007ac <GsmCommands>:



void GsmCommands(uint8_t* cmd)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fd0b 	bl	80001d0 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b29b      	uxth	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	4808      	ldr	r0, [pc, #32]	; (80007e4 <GsmCommands+0x38>)
 80007c4:	f003 fee2 	bl	800458c <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 80007c8:	2264      	movs	r2, #100	; 0x64
 80007ca:	4907      	ldr	r1, [pc, #28]	; (80007e8 <GsmCommands+0x3c>)
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <GsmCommands+0x38>)
 80007ce:	f003 ff4b 	bl	8004668 <HAL_UART_Receive_IT>
	HAL_Delay(1000);
 80007d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d6:	f000 fdb7 	bl	8001348 <HAL_Delay>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000138 	.word	0x20000138
 80007e8:	200000d4 	.word	0x200000d4

080007ec <Gsm_Init>:



void Gsm_Init()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 80007f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f4:	f000 fda8 	bl	8001348 <HAL_Delay>


	GsmCommands((uint8_t*)"AT\r\n");
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <Gsm_Init+0x34>)
 80007fa:	f7ff ffd7 	bl	80007ac <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <Gsm_Init+0x38>)
 8000800:	f7ff ffd4 	bl	80007ac <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <Gsm_Init+0x3c>)
 8000806:	f7ff ffd1 	bl	80007ac <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <Gsm_Init+0x40>)
 800080c:	f7ff ffce 	bl	80007ac <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <Gsm_Init+0x44>)
 8000812:	f7ff ffcb 	bl	80007ac <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <Gsm_Init+0x48>)
 8000818:	f7ff ffc8 	bl	80007ac <GsmCommands>

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08006634 	.word	0x08006634
 8000824:	0800663c 	.word	0x0800663c
 8000828:	08006648 	.word	0x08006648
 800082c:	08006654 	.word	0x08006654
 8000830:	08006664 	.word	0x08006664
 8000834:	08006684 	.word	0x08006684

08000838 <DataToCloud>:


void DataToCloud(uint8_t* Time,uint8_t* Ch1,uint8_t* Ch2,uint8_t* Ch3,uint8_t* Ch4,uint8_t* D1,uint8_t* D2,uint8_t* D3,uint8_t* D4)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800083e:	af08      	add	r7, sp, #32
 8000840:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8000844:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8000848:	6020      	str	r0, [r4, #0]
 800084a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800084e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8000852:	6001      	str	r1, [r0, #0]
 8000854:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000858:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 800085c:	600a      	str	r2, [r1, #0]
 800085e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000862:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000866:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 8000868:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800086c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f000 f89b 	bl	80009ac <url_encode>
 8000876:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch1 = url_encode(Ch1);
 800087a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800087e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	f000 f892 	bl	80009ac <url_encode>
 8000888:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch2 = url_encode(Ch2);
 800088c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000890:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000894:	6818      	ldr	r0, [r3, #0]
 8000896:	f000 f889 	bl	80009ac <url_encode>
 800089a:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch3 = url_encode(Ch3);
 800089e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80008a2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	f000 f880 	bl	80009ac <url_encode>
 80008ac:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_Ch4 = url_encode(Ch4);
 80008b0:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 80008b4:	f000 f87a 	bl	80009ac <url_encode>
 80008b8:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D1 = url_encode(D1);
 80008bc:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 80008c0:	f000 f874 	bl	80009ac <url_encode>
 80008c4:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D2 = url_encode(D2);
 80008c8:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 80008cc:	f000 f86e 	bl	80009ac <url_encode>
 80008d0:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D3 = url_encode(D3);
 80008d4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80008d8:	f000 f868 	bl	80009ac <url_encode>
 80008dc:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	char* encoded_D4 = url_encode(D4);
 80008e0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80008e4:	f000 f862 	bl	80009ac <url_encode>
 80008e8:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 80008ec:	482b      	ldr	r0, [pc, #172]	; (800099c <DataToCloud+0x164>)
 80008ee:	f7ff ff5d 	bl	80007ac <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 80008f2:	482b      	ldr	r0, [pc, #172]	; (80009a0 <DataToCloud+0x168>)
 80008f4:	f7ff ff5a 	bl	80007ac <GsmCommands>


	snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyM2Si83cN_Ieegenl17V6-CFZDiRIFlvHbPW19ydK0MydLo3YrItC4_J7xeOUK8FtQ/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s\"\r\n",encoded_Time, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 80008f8:	f107 0010 	add.w	r0, r7, #16
 80008fc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000900:	9307      	str	r3, [sp, #28]
 8000902:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000906:	9306      	str	r3, [sp, #24]
 8000908:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800090c:	9305      	str	r3, [sp, #20]
 800090e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000912:	9304      	str	r3, [sp, #16]
 8000914:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000918:	9303      	str	r3, [sp, #12]
 800091a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000930:	4a1c      	ldr	r2, [pc, #112]	; (80009a4 <DataToCloud+0x16c>)
 8000932:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000936:	f005 fa9b 	bl	8005e70 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff34 	bl	80007ac <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <DataToCloud+0x170>)
 8000946:	f7ff ff31 	bl	80007ac <GsmCommands>

	free(encoded_Time);
 800094a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 800094e:	f005 f98f 	bl	8005c70 <free>
	free(encoded_Ch1);
 8000952:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8000956:	f005 f98b 	bl	8005c70 <free>
	free(encoded_Ch2);
 800095a:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800095e:	f005 f987 	bl	8005c70 <free>
	free(encoded_Ch3);
 8000962:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000966:	f005 f983 	bl	8005c70 <free>
	free(encoded_Ch4);
 800096a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800096e:	f005 f97f 	bl	8005c70 <free>
	free(encoded_D1);
 8000972:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000976:	f005 f97b 	bl	8005c70 <free>
	free(encoded_D2);
 800097a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800097e:	f005 f977 	bl	8005c70 <free>
	free(encoded_D3);
 8000982:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8000986:	f005 f973 	bl	8005c70 <free>
	free(encoded_D4);
 800098a:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 800098e:	f005 f96f 	bl	8005c70 <free>

}
 8000992:	bf00      	nop
 8000994:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	08006694 	.word	0x08006694
 80009a0:	080066a4 	.word	0x080066a4
 80009a4:	080066b4 	.word	0x080066b4
 80009a8:	08006798 	.word	0x08006798

080009ac <url_encode>:



char* url_encode(const char* str)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <url_encode+0xc8>)
 80009b6:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff fc09 	bl	80001d0 <strlen>
 80009be:	4602      	mov	r2, r0
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	3301      	adds	r3, #1
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 f949 	bl	8005c60 <malloc>
 80009ce:	4603      	mov	r3, r0
 80009d0:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	617b      	str	r3, [r7, #20]

	while (*str) {
 80009d6:	e040      	b.n	8000a5a <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <url_encode+0xcc>)
 80009e0:	4413      	add	r3, r2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d10f      	bne.n	8000a0c <url_encode+0x60>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b2d      	cmp	r3, #45	; 0x2d
 80009f2:	d00b      	beq.n	8000a0c <url_encode+0x60>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b5f      	cmp	r3, #95	; 0x5f
 80009fa:	d007      	beq.n	8000a0c <url_encode+0x60>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b2e      	cmp	r3, #46	; 0x2e
 8000a02:	d003      	beq.n	8000a0c <url_encode+0x60>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b7e      	cmp	r3, #126	; 0x7e
 8000a0a:	d106      	bne.n	8000a1a <url_encode+0x6e>
			*ptr++ = *str;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	617a      	str	r2, [r7, #20]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e01c      	b.n	8000a54 <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	617a      	str	r2, [r7, #20]
 8000a20:	2225      	movs	r2, #37	; 0x25
 8000a22:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	091b      	lsrs	r3, r3, #4
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 030f 	and.w	r3, r3, #15
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	441a      	add	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	1c59      	adds	r1, r3, #1
 8000a38:	6179      	str	r1, [r7, #20]
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	441a      	add	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	1c59      	adds	r1, r3, #1
 8000a4e:	6179      	str	r1, [r7, #20]
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	701a      	strb	r2, [r3, #0]
		}
		str++;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1ba      	bne.n	80009d8 <url_encode+0x2c>
	}
	*ptr = '\0';
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
	return encoded;
 8000a68:	68fb      	ldr	r3, [r7, #12]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	080067ac 	.word	0x080067ac
 8000a78:	0800683c 	.word	0x0800683c

08000a7c <dec_bcd>:


//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <dec_bcd+0x48>)
 8000a88:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8c:	1092      	asrs	r2, r2, #2
 8000a8e:	17db      	asrs	r3, r3, #31
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b2d8      	uxtb	r0, r3
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <dec_bcd+0x48>)
 8000a9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000aa0:	1099      	asrs	r1, r3, #2
 8000aa2:	17d3      	asrs	r3, r2, #31
 8000aa4:	1ac9      	subs	r1, r1, r3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	1ad1      	subs	r1, r2, r3
 8000ab0:	b2cb      	uxtb	r3, r1
 8000ab2:	4403      	add	r3, r0
 8000ab4:	b2db      	uxtb	r3, r3
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	66666667 	.word	0x66666667

08000ac8 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	091b      	lsrs	r3, r3, #4
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	4413      	add	r3, r2
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09a      	sub	sp, #104	; 0x68
 8000afc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fbae 	bl	800125e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f871 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 f911 	bl	8000d2c <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  MX_I2C3_Init();
 8000b0a:	f000 f8cf 	bl	8000cac <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	UART2_Init();
 8000b0e:	f7ff fdd5 	bl	80006bc <UART2_Init>
	set_time(00,30,2,5,30,7,24);
 8000b12:	2318      	movs	r3, #24
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2307      	movs	r3, #7
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	231e      	movs	r3, #30
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2305      	movs	r3, #5
 8000b20:	2202      	movs	r2, #2
 8000b22:	211e      	movs	r1, #30
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f931 	bl	8000d8c <set_time>

	  Gsm_Init();
 8000b2a:	f7ff fe5f 	bl	80007ec <Gsm_Init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		get_time();
 8000b2e:	f000 f97d 	bl	8000e2c <get_time>

		struct data d={time.hour,time.minutes,time.seconds,"ADC1","ADC2","ADC3","ADC4","1011",1};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2258      	movs	r2, #88	; 0x58
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 f8a1 	bl	8005c80 <memset>
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <main+0xd8>)
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	703b      	strb	r3, [r7, #0]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <main+0xd8>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	707b      	strb	r3, [r7, #1]
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <main+0xd8>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	70bb      	strb	r3, [r7, #2]
 8000b50:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <main+0xdc>)
 8000b52:	1cfb      	adds	r3, r7, #3
 8000b54:	6810      	ldr	r0, [r2, #0]
 8000b56:	6018      	str	r0, [r3, #0]
 8000b58:	7912      	ldrb	r2, [r2, #4]
 8000b5a:	711a      	strb	r2, [r3, #4]
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	711a      	strb	r2, [r3, #4]
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <main+0xe0>)
 8000b68:	f107 030d 	add.w	r3, r7, #13
 8000b6c:	6810      	ldr	r0, [r2, #0]
 8000b6e:	6018      	str	r0, [r3, #0]
 8000b70:	7912      	ldrb	r2, [r2, #4]
 8000b72:	711a      	strb	r2, [r3, #4]
 8000b74:	f107 0312 	add.w	r3, r7, #18
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	711a      	strb	r2, [r3, #4]
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <main+0xe4>)
 8000b80:	f107 0317 	add.w	r3, r7, #23
 8000b84:	6810      	ldr	r0, [r2, #0]
 8000b86:	6018      	str	r0, [r3, #0]
 8000b88:	7912      	ldrb	r2, [r2, #4]
 8000b8a:	711a      	strb	r2, [r3, #4]
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	711a      	strb	r2, [r3, #4]
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <main+0xe8>)
 8000b98:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8000b9c:	6810      	ldr	r0, [r2, #0]
 8000b9e:	6018      	str	r0, [r3, #0]
 8000ba0:	7912      	ldrb	r2, [r2, #4]
 8000ba2:	711a      	strb	r2, [r3, #4]
 8000ba4:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	711a      	strb	r2, [r3, #4]
 8000bae:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <main+0xec>)
 8000bb0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000bb4:	6810      	ldr	r0, [r2, #0]
 8000bb6:	6018      	str	r0, [r3, #0]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		DataToGsm(&d);
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fcdf 	bl	8000584 <DataToGsm>
//		HAL_Delay(2000);
		DataToUart(&d);
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fda7 	bl	800071c <DataToUart>
	{
 8000bce:	e7ae      	b.n	8000b2e <main+0x36>
 8000bd0:	200001bc 	.word	0x200001bc
 8000bd4:	080067c0 	.word	0x080067c0
 8000bd8:	080067cc 	.word	0x080067cc
 8000bdc:	080067d8 	.word	0x080067d8
 8000be0:	080067e4 	.word	0x080067e4
 8000be4:	080067f0 	.word	0x080067f0

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b096      	sub	sp, #88	; 0x58
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2244      	movs	r2, #68	; 0x44
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f005 f842 	bl	8005c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c0e:	f002 fa55 	bl	80030bc <HAL_PWREx_ControlVoltageScaling>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c18:	f000 f958 	bl	8000ecc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c1c:	f002 fa30 	bl	8003080 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <SystemClock_Config+0xc0>)
 8000c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c26:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <SystemClock_Config+0xc0>)
 8000c28:	f023 0318 	bic.w	r3, r3, #24
 8000c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c30:	2314      	movs	r3, #20
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c40:	2360      	movs	r3, #96	; 0x60
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c50:	2310      	movs	r3, #16
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c54:	2307      	movs	r3, #7
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fa7f 	bl	8003168 <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f92c 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c74:	230f      	movs	r3, #15
 8000c76:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fe7f 	bl	8003990 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c98:	f000 f918 	bl	8000ecc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c9c:	f003 fa92 	bl	80041c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ca0:	bf00      	nop
 8000ca2:	3758      	adds	r7, #88	; 0x58
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <MX_I2C3_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <MX_I2C3_Init+0x7c>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000ce8:	f000 fe5a 	bl	80019a0 <HAL_I2C_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000cf2:	f000 f8eb 	bl	8000ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000cfa:	f002 f929 	bl	8002f50 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 f8e2 	bl	8000ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_I2C3_Init+0x74>)
 8000d0c:	f002 f96b 	bl	8002fe6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 f8d9 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001c4 	.word	0x200001c4
 8000d24:	40005c00 	.word	0x40005c00
 8000d28:	00707cbb 	.word	0x00707cbb

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_GPIO_Init+0x5c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <set_time>:

/* USER CODE BEGIN 4 */


void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71bb      	strb	r3, [r7, #6]
 8000da2:	460b      	mov	r3, r1
 8000da4:	717b      	strb	r3, [r7, #5]
 8000da6:	4613      	mov	r3, r2
 8000da8:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fe65 	bl	8000a7c <dec_bcd>
 8000db2:	4603      	mov	r3, r0
 8000db4:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fe5f 	bl	8000a7c <dec_bcd>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8000dc2:	797b      	ldrb	r3, [r7, #5]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe59 	bl	8000a7c <dec_bcd>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 8000dce:	793b      	ldrb	r3, [r7, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fe53 	bl	8000a7c <dec_bcd>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 8000dda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fe4c 	bl	8000a7c <dec_bcd>
 8000de4:	4603      	mov	r3, r0
 8000de6:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8000de8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe45 	bl	8000a7c <dec_bcd>
 8000df2:	4603      	mov	r3, r0
 8000df4:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 8000df6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe3e 	bl	8000a7c <dec_bcd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c3, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2301      	movs	r3, #1
 8000e16:	2200      	movs	r2, #0
 8000e18:	21d0      	movs	r1, #208	; 0xd0
 8000e1a:	4803      	ldr	r0, [pc, #12]	; (8000e28 <set_time+0x9c>)
 8000e1c:	f000 fe50 	bl	8001ac0 <HAL_I2C_Mem_Write>
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	200001c4 	.word	0x200001c4

08000e2c <get_time>:


void get_time()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	2307      	movs	r3, #7
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2200      	movs	r2, #0
 8000e44:	21d0      	movs	r1, #208	; 0xd0
 8000e46:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <get_time+0x98>)
 8000e48:	f000 ff4e 	bl	8001ce8 <HAL_I2C_Mem_Read>
	time.seconds=bcd_dec(get_time[0]);
 8000e4c:	783b      	ldrb	r3, [r7, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe3a 	bl	8000ac8 <bcd_dec>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <get_time+0x9c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
	time.minutes=bcd_dec(get_time[1]);
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fe32 	bl	8000ac8 <bcd_dec>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <get_time+0x9c>)
 8000e6a:	705a      	strb	r2, [r3, #1]
	time.hour=bcd_dec(get_time[2]);
 8000e6c:	78bb      	ldrb	r3, [r7, #2]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fe2a 	bl	8000ac8 <bcd_dec>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <get_time+0x9c>)
 8000e7a:	709a      	strb	r2, [r3, #2]
	time.day=bcd_dec(get_time[3]);
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe22 	bl	8000ac8 <bcd_dec>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <get_time+0x9c>)
 8000e8a:	70da      	strb	r2, [r3, #3]
	time.date=bcd_dec(get_time[4]);
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe1a 	bl	8000ac8 <bcd_dec>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <get_time+0x9c>)
 8000e9a:	711a      	strb	r2, [r3, #4]
	time.month=bcd_dec(get_time[5]);
 8000e9c:	797b      	ldrb	r3, [r7, #5]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe12 	bl	8000ac8 <bcd_dec>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <get_time+0x9c>)
 8000eaa:	715a      	strb	r2, [r3, #5]
	time.year=bcd_dec(get_time[6]);
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe0a 	bl	8000ac8 <bcd_dec>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <get_time+0x9c>)
 8000eba:	719a      	strb	r2, [r3, #6]
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200001c4 	.word	0x200001c4
 8000ec8:	200001bc 	.word	0x200001bc

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x44>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x44>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x44>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6593      	str	r3, [r2, #88]	; 0x58
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x44>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0a0      	sub	sp, #128	; 0x80
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	2254      	movs	r2, #84	; 0x54
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 fe9d 	bl	8005c80 <memset>
  if(hi2c->Instance==I2C3)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a35      	ldr	r2, [pc, #212]	; (8001020 <HAL_I2C_MspInit+0x100>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d163      	bne.n	8001018 <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 ff3a 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f6a:	f7ff ffaf 	bl	8000ecc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a26      	ldr	r2, [pc, #152]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f000 fb86 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc4:	2312      	movs	r3, #18
 8000fc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4813      	ldr	r0, [pc, #76]	; (8001028 <HAL_I2C_MspInit+0x108>)
 8000fdc:	f000 fb76 	bl	80016cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000fe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fea:	6593      	str	r3, [r2, #88]	; 0x58
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_I2C_MspInit+0x104>)
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2048      	movs	r0, #72	; 0x48
 8000ffe:	f000 faa2 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001002:	2048      	movs	r0, #72	; 0x48
 8001004:	f000 fabb 	bl	800157e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2049      	movs	r0, #73	; 0x49
 800100e:	f000 fa9a 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001012:	2049      	movs	r0, #73	; 0x49
 8001014:	f000 fab3 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3780      	adds	r7, #128	; 0x80
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40005c00 	.word	0x40005c00
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09e      	sub	sp, #120	; 0x78
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2254      	movs	r2, #84	; 0x54
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fe17 	bl	8005c80 <memset>
  if(huart->Instance==USART2)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13e      	bne.n	80010da <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f002 feb5 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001074:	f7ff ff2a 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 800107e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001082:	6593      	str	r3, [r2, #88]	; 0x58
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010a8:	230c      	movs	r3, #12
 80010aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b8:	2307      	movs	r3, #7
 80010ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f000 fb01 	bl	80016cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2026      	movs	r0, #38	; 0x26
 80010d0:	f000 fa39 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d4:	2026      	movs	r0, #38	; 0x26
 80010d6:	f000 fa52 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3778      	adds	r7, #120	; 0x78
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40021000 	.word	0x40021000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f8e6 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <USART2_IRQHandler+0x10>)
 8001146:	f003 fae5 	bl	8004714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000138 	.word	0x20000138

08001154 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <I2C3_EV_IRQHandler+0x10>)
 800115a:	f000 fedf 	bl	8001f1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001c4 	.word	0x200001c4

08001168 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <I2C3_ER_IRQHandler+0x10>)
 800116e:	f000 feef 	bl	8001f50 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001c4 	.word	0x200001c4

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f004 fd2e 	bl	8005c0c <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20010000 	.word	0x20010000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	20000218 	.word	0x20000218
 80011e4:	20000230 	.word	0x20000230

080011e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001210:	f7ff ffea 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LoopForever+0xe>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f004 fced 	bl	8005c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123e:	f7ff fc5b 	bl	8000af8 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001244:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001250:	08006980 	.word	0x08006980
  ldr r2, =_sbss
 8001254:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001258:	20000230 	.word	0x20000230

0800125c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_IRQHandler>

0800125e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f961 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f80e 	bl	8001290 <HAL_InitTick>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	e001      	b.n	8001284 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001280:	f7ff fe2a 	bl	8000ed8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001284:	79fb      	ldrb	r3, [r7, #7]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_InitTick+0x6c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d023      	beq.n	80012ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_InitTick+0x70>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_InitTick+0x6c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f96d 	bl	800159a <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d809      	bhi.n	80012e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f937 	bl	8001546 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_InitTick+0x74>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e007      	b.n	80012f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e004      	b.n	80012f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	e001      	b.n	80012f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	2000021c 	.word	0x2000021c

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000021c 	.word	0x2000021c

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d008      	beq.n	80015dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2204      	movs	r2, #4
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e022      	b.n	8001622 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020e 	bic.w	r2, r2, #14
 80015ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f003 021c 	and.w	r2, r3, #28
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d005      	beq.n	8001652 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2204      	movs	r2, #4
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e029      	b.n	80016a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 020e 	bic.w	r2, r2, #14
 8001660:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0201 	bic.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f003 021c 	and.w	r2, r3, #28
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
    }
  }
  return status;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016be:	b2db      	uxtb	r3, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	e148      	b.n	800196e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2101      	movs	r1, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 813a 	beq.w	8001968 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d005      	beq.n	800170c <HAL_GPIO_Init+0x40>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d130      	bne.n	800176e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001742:	2201      	movs	r2, #1
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	f003 0201 	and.w	r2, r3, #1
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b03      	cmp	r3, #3
 8001778:	d017      	beq.n	80017aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d123      	bne.n	80017fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	08da      	lsrs	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3208      	adds	r2, #8
 80017be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	220f      	movs	r2, #15
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	6939      	ldr	r1, [r7, #16]
 80017fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0203 	and.w	r2, r3, #3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8094 	beq.w	8001968 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001840:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_GPIO_Init+0x2c0>)
 8001842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001844:	4a51      	ldr	r2, [pc, #324]	; (800198c <HAL_GPIO_Init+0x2c0>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6613      	str	r3, [r2, #96]	; 0x60
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HAL_GPIO_Init+0x2c0>)
 800184e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001858:	4a4d      	ldr	r2, [pc, #308]	; (8001990 <HAL_GPIO_Init+0x2c4>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1d4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a43      	ldr	r2, [pc, #268]	; (8001994 <HAL_GPIO_Init+0x2c8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1d0>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a42      	ldr	r2, [pc, #264]	; (8001998 <HAL_GPIO_Init+0x2cc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1cc>
 8001894:	2302      	movs	r3, #2
 8001896:	e004      	b.n	80018a2 <HAL_GPIO_Init+0x1d6>
 8001898:	2307      	movs	r3, #7
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x1d6>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_GPIO_Init+0x1d6>
 80018a0:	2300      	movs	r3, #0
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b2:	4937      	ldr	r1, [pc, #220]	; (8001990 <HAL_GPIO_Init+0x2c4>)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e4:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ea:	4b2c      	ldr	r3, [pc, #176]	; (800199c <HAL_GPIO_Init+0x2d0>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190e:	4a23      	ldr	r2, [pc, #140]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001938:	4a18      	ldr	r2, [pc, #96]	; (800199c <HAL_GPIO_Init+0x2d0>)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_GPIO_Init+0x2d0>)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f47f aeaf 	bne.w	80016dc <HAL_GPIO_Init+0x10>
  }
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	48000400 	.word	0x48000400
 8001998:	48000800 	.word	0x48000800
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e081      	b.n	8001ab6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff faaa 	bl	8000f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	e006      	b.n	8001a28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d104      	bne.n	8001a3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69d9      	ldr	r1, [r3, #28]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	817b      	strh	r3, [r7, #10]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	813b      	strh	r3, [r7, #8]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	f040 80f9 	bne.w	8001cda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_I2C_Mem_Write+0x34>
 8001aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0ed      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_I2C_Mem_Write+0x4e>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e0e6      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b16:	f7ff fc0b 	bl	8001330 <HAL_GetTick>
 8001b1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2319      	movs	r3, #25
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 ffd8 	bl	8002ade <I2C_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0d1      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2221      	movs	r2, #33	; 0x21
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2240      	movs	r2, #64	; 0x40
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a3a      	ldr	r2, [r7, #32]
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b60:	88f8      	ldrh	r0, [r7, #6]
 8001b62:	893a      	ldrh	r2, [r7, #8]
 8001b64:	8979      	ldrh	r1, [r7, #10]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4603      	mov	r3, r0
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fb91 	bl	8002298 <I2C_RequestMemoryWrite>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0a9      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	d90e      	bls.n	8001bb0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	22ff      	movs	r2, #255	; 0xff
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	8979      	ldrh	r1, [r7, #10]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f001 f941 	bl	8002e30 <I2C_TransferConfig>
 8001bae:	e00f      	b.n	8001bd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	8979      	ldrh	r1, [r7, #10]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f001 f930 	bl	8002e30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 ffc2 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e07b      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d034      	beq.n	8001c88 <HAL_I2C_Mem_Write+0x1c8>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d130      	bne.n	8001c88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 ff54 	bl	8002ade <I2C_WaitOnFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e04d      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2bff      	cmp	r3, #255	; 0xff
 8001c48:	d90e      	bls.n	8001c68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	22ff      	movs	r2, #255	; 0xff
 8001c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	8979      	ldrh	r1, [r7, #10]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f001 f8e5 	bl	8002e30 <I2C_TransferConfig>
 8001c66:	e00f      	b.n	8001c88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f001 f8d4 	bl	8002e30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d19e      	bne.n	8001bd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 ffa1 	bl	8002bde <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e01a      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2220      	movs	r2, #32
 8001cac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_I2C_Mem_Write+0x224>)
 8001cba:	400b      	ands	r3, r1
 8001cbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
  }
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	fe00e800 	.word	0xfe00e800

08001ce8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	f040 80fd 	bne.w	8001f0a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_I2C_Mem_Read+0x34>
 8001d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0f1      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_Mem_Read+0x4e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e0ea      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d3e:	f7ff faf7 	bl	8001330 <HAL_GetTick>
 8001d42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2319      	movs	r3, #25
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fec4 	bl	8002ade <I2C_WaitOnFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0d5      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2222      	movs	r2, #34	; 0x22
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a3a      	ldr	r2, [r7, #32]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d88:	88f8      	ldrh	r0, [r7, #6]
 8001d8a:	893a      	ldrh	r2, [r7, #8]
 8001d8c:	8979      	ldrh	r1, [r7, #10]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4603      	mov	r3, r0
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fad1 	bl	8002340 <I2C_RequestMemoryRead>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0ad      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d90e      	bls.n	8001dd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	22ff      	movs	r2, #255	; 0xff
 8001dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	8979      	ldrh	r1, [r7, #10]
 8001dc8:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <HAL_I2C_Mem_Read+0x22c>)
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f001 f82d 	bl	8002e30 <I2C_TransferConfig>
 8001dd6:	e00f      	b.n	8001df8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	8979      	ldrh	r1, [r7, #10]
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_I2C_Mem_Read+0x22c>)
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f001 f81c 	bl	8002e30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2104      	movs	r1, #4
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fe6b 	bl	8002ade <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e07c      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d034      	beq.n	8001eb8 <HAL_I2C_Mem_Read+0x1d0>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d130      	bne.n	8001eb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fe3c 	bl	8002ade <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e04d      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d90e      	bls.n	8001e98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	8979      	ldrh	r1, [r7, #10]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 ffcd 	bl	8002e30 <I2C_TransferConfig>
 8001e96:	e00f      	b.n	8001eb8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	8979      	ldrh	r1, [r7, #10]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 ffbc 	bl	8002e30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d19a      	bne.n	8001df8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fe89 	bl	8002bde <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e01a      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2220      	movs	r2, #32
 8001edc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_I2C_Mem_Read+0x230>)
 8001eea:	400b      	ands	r3, r1
 8001eec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e000      	b.n	8001f0c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
  }
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	80002400 	.word	0x80002400
 8001f18:	fe00e800 	.word	0xfe00e800

08001f1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	4798      	blx	r3
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d010      	beq.n	8001f96 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	09db      	lsrs	r3, r3, #7
 8001f78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f94:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	0a9b      	lsrs	r3, r3, #10
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	09db      	lsrs	r3, r3, #7
 8001fa6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f043 0208 	orr.w	r2, r3, #8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	0a5b      	lsrs	r3, r3, #9
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	09db      	lsrs	r3, r3, #7
 8001fd4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f043 0202 	orr.w	r2, r3, #2
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 030b 	and.w	r3, r3, #11
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fc31 	bl	800286c <I2C_ITError>
  }
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	70fb      	strb	r3, [r7, #3]
 8002046:	4613      	mov	r3, r2
 8002048:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <I2C_Slave_ISR_IT+0x24>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0ec      	b.n	8002290 <I2C_Slave_ISR_IT+0x1fe>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80020d6:	6939      	ldr	r1, [r7, #16]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fa67 	bl	80025ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d04d      	beq.n	8002186 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d047      	beq.n	8002186 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d128      	bne.n	8002152 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b28      	cmp	r3, #40	; 0x28
 800210a:	d108      	bne.n	800211e <I2C_Slave_ISR_IT+0x8c>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002112:	d104      	bne.n	800211e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fb52 	bl	80027c0 <I2C_ITListenCplt>
 800211c:	e032      	b.n	8002184 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b29      	cmp	r3, #41	; 0x29
 8002128:	d10e      	bne.n	8002148 <I2C_Slave_ISR_IT+0xb6>
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002130:	d00a      	beq.n	8002148 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2210      	movs	r2, #16
 8002138:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fc8d 	bl	8002a5a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f9d5 	bl	80024f0 <I2C_ITSlaveSeqCplt>
 8002146:	e01d      	b.n	8002184 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2210      	movs	r2, #16
 800214e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002150:	e096      	b.n	8002280 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2210      	movs	r2, #16
 8002158:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f043 0204 	orr.w	r2, r3, #4
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <I2C_Slave_ISR_IT+0xe4>
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002172:	f040 8085 	bne.w	8002280 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4619      	mov	r1, r3
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fb75 	bl	800286c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002182:	e07d      	b.n	8002280 <I2C_Slave_ISR_IT+0x1ee>
 8002184:	e07c      	b.n	8002280 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d030      	beq.n	80021f4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800219a:	2b00      	cmp	r3, #0
 800219c:	d02a      	beq.n	80021f4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d018      	beq.n	80021da <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d14f      	bne.n	8002284 <I2C_Slave_ISR_IT+0x1f2>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021ea:	d04b      	beq.n	8002284 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f97f 	bl	80024f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80021f2:	e047      	b.n	8002284 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	08db      	lsrs	r3, r3, #3
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800220c:	6939      	ldr	r1, [r7, #16]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f8ea 	bl	80023e8 <I2C_ITAddrCplt>
 8002214:	e037      	b.n	8002286 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d031      	beq.n	8002286 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02b      	beq.n	8002286 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d018      	beq.n	800226a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
 8002268:	e00d      	b.n	8002286 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d002      	beq.n	8002278 <I2C_Slave_ISR_IT+0x1e6>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f939 	bl	80024f0 <I2C_ITSlaveSeqCplt>
 800227e:	e002      	b.n	8002286 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002280:	bf00      	nop
 8002282:	e000      	b.n	8002286 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002284:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	817b      	strh	r3, [r7, #10]
 80022aa:	460b      	mov	r3, r1
 80022ac:	813b      	strh	r3, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	8979      	ldrh	r1, [r7, #10]
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <I2C_RequestMemoryWrite+0xa4>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fdb5 	bl	8002e30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	69b9      	ldr	r1, [r7, #24]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fc47 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e02c      	b.n	8002334 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022e0:	893b      	ldrh	r3, [r7, #8]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
 80022ea:	e015      	b.n	8002318 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022ec:	893b      	ldrh	r3, [r7, #8]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	69b9      	ldr	r1, [r7, #24]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fc2d 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e012      	b.n	8002334 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800230e:	893b      	ldrh	r3, [r7, #8]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2200      	movs	r2, #0
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fbdb 	bl	8002ade <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	80002000 	.word	0x80002000

08002340 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	8979      	ldrh	r1, [r7, #10]
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <I2C_RequestMemoryRead+0xa4>)
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2300      	movs	r3, #0
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fd62 	bl	8002e30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fbf4 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e02c      	b.n	80023da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d105      	bne.n	8002392 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002386:	893b      	ldrh	r3, [r7, #8]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
 8002390:	e015      	b.n	80023be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002392:	893b      	ldrh	r3, [r7, #8]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fbda 	bl	8002b5e <I2C_WaitOnTXISFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e012      	b.n	80023da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023b4:	893b      	ldrh	r3, [r7, #8]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fb88 	bl	8002ade <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	80002000 	.word	0x80002000

080023e8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023fe:	2b28      	cmp	r3, #40	; 0x28
 8002400:	d16a      	bne.n	80024d8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	b29b      	uxth	r3, r3
 800241c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002420:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800242e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800243c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d138      	bne.n	80024b8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002446:	897b      	ldrh	r3, [r7, #10]
 8002448:	09db      	lsrs	r3, r3, #7
 800244a:	b29a      	uxth	r2, r3
 800244c:	89bb      	ldrh	r3, [r7, #12]
 800244e:	4053      	eors	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	f003 0306 	and.w	r3, r3, #6
 8002456:	2b00      	cmp	r3, #0
 8002458:	d11c      	bne.n	8002494 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	2b02      	cmp	r3, #2
 800246e:	d13b      	bne.n	80024e8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2208      	movs	r2, #8
 800247c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002486:	89ba      	ldrh	r2, [r7, #12]
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	4619      	mov	r1, r3
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fdd4 	bl	800203a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002492:	e029      	b.n	80024e8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002494:	893b      	ldrh	r3, [r7, #8]
 8002496:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fcf9 	bl	8002e94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024aa:	89ba      	ldrh	r2, [r7, #12]
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fdc2 	bl	800203a <HAL_I2C_AddrCallback>
}
 80024b6:	e017      	b.n	80024e8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fce9 	bl	8002e94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024ca:	89ba      	ldrh	r2, [r7, #12]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fdb2 	bl	800203a <HAL_I2C_AddrCallback>
}
 80024d6:	e007      	b.n	80024e8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2208      	movs	r2, #8
 80024de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	0b9b      	lsrs	r3, r3, #14
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e00d      	b.n	8002542 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	0bdb      	lsrs	r3, r3, #15
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002540:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b29      	cmp	r3, #41	; 0x29
 800254c:	d112      	bne.n	8002574 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2228      	movs	r2, #40	; 0x28
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2221      	movs	r2, #33	; 0x21
 800255a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800255c:	2101      	movs	r1, #1
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fc98 	bl	8002e94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fd50 	bl	8002012 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002572:	e017      	b.n	80025a4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b2a      	cmp	r3, #42	; 0x2a
 800257e:	d111      	bne.n	80025a4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2228      	movs	r2, #40	; 0x28
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2222      	movs	r2, #34	; 0x22
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800258e:	2102      	movs	r1, #2
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fc7f 	bl	8002e94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fd41 	bl	8002026 <HAL_I2C_SlaveRxCpltCallback>
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2220      	movs	r2, #32
 80025d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b21      	cmp	r3, #33	; 0x21
 80025d6:	d002      	beq.n	80025de <I2C_ITSlaveCplt+0x32>
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b29      	cmp	r3, #41	; 0x29
 80025dc:	d108      	bne.n	80025f0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80025de:	f248 0101 	movw	r1, #32769	; 0x8001
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fc56 	bl	8002e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2221      	movs	r2, #33	; 0x21
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
 80025ee:	e00d      	b.n	800260c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b22      	cmp	r3, #34	; 0x22
 80025f4:	d002      	beq.n	80025fc <I2C_ITSlaveCplt+0x50>
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b2a      	cmp	r3, #42	; 0x2a
 80025fa:	d107      	bne.n	800260c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80025fc:	f248 0102 	movw	r1, #32770	; 0x8002
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fc47 	bl	8002e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2222      	movs	r2, #34	; 0x22
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <I2C_ITSlaveCplt+0x20c>)
 8002628:	400b      	ands	r3, r1
 800262a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fa14 	bl	8002a5a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	0b9b      	lsrs	r3, r3, #14
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800264c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	2b00      	cmp	r3, #0
 8002654:	d020      	beq.n	8002698 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002664:	e018      	b.n	8002698 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	0bdb      	lsrs	r3, r3, #15
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002680:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f8a7 	bl	800286c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b28      	cmp	r3, #40	; 0x28
 8002728:	d141      	bne.n	80027ae <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800272a:	6979      	ldr	r1, [r7, #20]
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f847 	bl	80027c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002732:	e03c      	b.n	80027ae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800273c:	d014      	beq.n	8002768 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fed6 	bl	80024f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <I2C_ITSlaveCplt+0x210>)
 8002748:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fc78 	bl	8002056 <HAL_I2C_ListenCpltCallback>
}
 8002766:	e022      	b.n	80027ae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b22      	cmp	r3, #34	; 0x22
 8002772:	d10e      	bne.n	8002792 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fc4b 	bl	8002026 <HAL_I2C_SlaveRxCpltCallback>
}
 8002790:	e00d      	b.n	80027ae <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fc32 	bl	8002012 <HAL_I2C_SlaveTxCpltCallback>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	fe00e800 	.word	0xfe00e800
 80027bc:	ffff0000 	.word	0xffff0000

080027c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a26      	ldr	r2, [pc, #152]	; (8002868 <I2C_ITListenCplt+0xa8>)
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d022      	beq.n	800283e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f043 0204 	orr.w	r2, r3, #4
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800283e:	f248 0103 	movw	r1, #32771	; 0x8003
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fb26 	bl	8002e94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2210      	movs	r2, #16
 800284e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fbfc 	bl	8002056 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	ffff0000 	.word	0xffff0000

0800286c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a5d      	ldr	r2, [pc, #372]	; (8002a00 <I2C_ITError+0x194>)
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b28      	cmp	r3, #40	; 0x28
 80028a2:	d005      	beq.n	80028b0 <I2C_ITError+0x44>
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b29      	cmp	r3, #41	; 0x29
 80028a8:	d002      	beq.n	80028b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b2a      	cmp	r3, #42	; 0x2a
 80028ae:	d10b      	bne.n	80028c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028b0:	2103      	movs	r1, #3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 faee 	bl	8002e94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2228      	movs	r2, #40	; 0x28
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a50      	ldr	r2, [pc, #320]	; (8002a04 <I2C_ITError+0x198>)
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
 80028c6:	e011      	b.n	80028ec <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80028c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fae1 	bl	8002e94 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b60      	cmp	r3, #96	; 0x60
 80028dc:	d003      	beq.n	80028e6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d039      	beq.n	800296e <I2C_ITError+0x102>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b11      	cmp	r3, #17
 80028fe:	d002      	beq.n	8002906 <I2C_ITError+0x9a>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b21      	cmp	r3, #33	; 0x21
 8002904:	d133      	bne.n	800296e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002914:	d107      	bne.n	8002926 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002924:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fec0 	bl	80016b0 <HAL_DMA_GetState>
 8002930:	4603      	mov	r3, r0
 8002932:	2b01      	cmp	r3, #1
 8002934:	d017      	beq.n	8002966 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	4a33      	ldr	r2, [pc, #204]	; (8002a08 <I2C_ITError+0x19c>)
 800293c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fe6f 	bl	800162e <HAL_DMA_Abort_IT>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04d      	beq.n	80029f2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002960:	4610      	mov	r0, r2
 8002962:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002964:	e045      	b.n	80029f2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f850 	bl	8002a0c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800296c:	e041      	b.n	80029f2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d039      	beq.n	80029ea <I2C_ITError+0x17e>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b12      	cmp	r3, #18
 800297a:	d002      	beq.n	8002982 <I2C_ITError+0x116>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b22      	cmp	r3, #34	; 0x22
 8002980:	d133      	bne.n	80029ea <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	d107      	bne.n	80029a2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fe82 	bl	80016b0 <HAL_DMA_GetState>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d017      	beq.n	80029e2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <I2C_ITError+0x19c>)
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fe31 	bl	800162e <HAL_DMA_Abort_IT>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d011      	beq.n	80029f6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029dc:	4610      	mov	r0, r2
 80029de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029e0:	e009      	b.n	80029f6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f812 	bl	8002a0c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029e8:	e005      	b.n	80029f6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f80e 	bl	8002a0c <I2C_TreatErrorCallback>
  }
}
 80029f0:	e002      	b.n	80029f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029f6:	bf00      	nop
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	ffff0000 	.word	0xffff0000
 8002a04:	08002093 	.word	0x08002093
 8002a08:	08002aa3 	.word	0x08002aa3

08002a0c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b60      	cmp	r3, #96	; 0x60
 8002a1e:	d10e      	bne.n	8002a3e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fb21 	bl	800207e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a3c:	e009      	b.n	8002a52 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fb0c 	bl	800206a <HAL_I2C_ErrorCallback>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d103      	bne.n	8002a78 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d007      	beq.n	8002a96 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	619a      	str	r2, [r3, #24]
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	2200      	movs	r2, #0
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	2200      	movs	r2, #0
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff9b 	bl	8002a0c <I2C_TreatErrorCallback>
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aee:	e022      	b.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af6:	d01e      	beq.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af8:	f7fe fc1a 	bl	8001330 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d113      	bne.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00f      	b.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d0cd      	beq.n	8002af0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b6a:	e02c      	b.n	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f871 	bl	8002c58 <I2C_IsErrorOccurred>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e02a      	b.n	8002bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d01e      	beq.n	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe fbd2 	bl	8001330 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d113      	bne.n	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f043 0220 	orr.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e007      	b.n	8002bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d1cb      	bne.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bea:	e028      	b.n	8002c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f831 	bl	8002c58 <I2C_IsErrorOccurred>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e026      	b.n	8002c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c00:	f7fe fb96 	bl	8001330 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d302      	bcc.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f043 0220 	orr.w	r2, r3, #32
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e007      	b.n	8002c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d1cf      	bne.n	8002bec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d075      	beq.n	8002d70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2210      	movs	r2, #16
 8002c8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c8c:	e056      	b.n	8002d3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d052      	beq.n	8002d3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7fe fb4b 	bl	8001330 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_IsErrorOccurred+0x54>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d147      	bne.n	8002d3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cce:	d12e      	bne.n	8002d2e <I2C_IsErrorOccurred+0xd6>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd6:	d02a      	beq.n	8002d2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d027      	beq.n	8002d2e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cee:	f7fe fb1f 	bl	8001330 <HAL_GetTick>
 8002cf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf4:	e01b      	b.n	8002d2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cf6:	f7fe fb1b 	bl	8001330 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b19      	cmp	r3, #25
 8002d02:	d914      	bls.n	8002d2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d1dc      	bne.n	8002cf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d003      	beq.n	8002d52 <I2C_IsErrorOccurred+0xfa>
 8002d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d09d      	beq.n	8002c8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01c      	beq.n	8002e20 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff fe37 	bl	8002a5a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <I2C_IsErrorOccurred+0x1d4>)
 8002df8:	400b      	ands	r3, r1
 8002dfa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	fe00e800 	.word	0xfe00e800

08002e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e42:	897b      	ldrh	r3, [r7, #10]
 8002e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e48:	7a7b      	ldrb	r3, [r7, #9]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	0d5b      	lsrs	r3, r3, #21
 8002e6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <I2C_TransferConfig+0x60>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	43db      	mvns	r3, r3
 8002e74:	ea02 0103 	and.w	r1, r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	03ff63ff 	.word	0x03ff63ff

08002e94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00f      	beq.n	8002ece <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002eb4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ec2:	2b28      	cmp	r3, #40	; 0x28
 8002ec4:	d003      	beq.n	8002ece <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002ecc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00f      	beq.n	8002ef8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002ede:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002eec:	2b28      	cmp	r3, #40	; 0x28
 8002eee:	d003      	beq.n	8002ef8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da03      	bge.n	8002f08 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d103      	bne.n	8002f16 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d103      	bne.n	8002f24 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f043 0320 	orr.w	r3, r3, #32
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	2b40      	cmp	r3, #64	; 0x40
 8002f28:	d103      	bne.n	8002f32 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	400a      	ands	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d138      	bne.n	8002fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e032      	b.n	8002fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d139      	bne.n	8003070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003006:	2302      	movs	r3, #2
 8003008:	e033      	b.n	8003072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2224      	movs	r2, #36	; 0x24
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40007000 	.word	0x40007000

080030a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40007000 	.word	0x40007000

080030bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ca:	d130      	bne.n	800312e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d8:	d038      	beq.n	800314c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e2:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2232      	movs	r2, #50	; 0x32
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0c9b      	lsrs	r3, r3, #18
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003100:	e002      	b.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3b01      	subs	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d102      	bne.n	800311c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f2      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003128:	d110      	bne.n	800314c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e00f      	b.n	800314e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d007      	beq.n	800314c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003144:	4a05      	ldr	r2, [pc, #20]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800314a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40007000 	.word	0x40007000
 8003160:	20000000 	.word	0x20000000
 8003164:	431bde83 	.word	0x431bde83

08003168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f000 bc02 	b.w	8003980 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317c:	4b96      	ldr	r3, [pc, #600]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003186:	4b94      	ldr	r3, [pc, #592]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80e4 	beq.w	8003366 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4c>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	f040 808b 	bne.w	80032c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	f040 8087 	bne.w	80032c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b4:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_OscConfig+0x64>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e3d9      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <HAL_RCC_OscConfig+0x7e>
 80031dc:	4b7e      	ldr	r3, [pc, #504]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e4:	e005      	b.n	80031f2 <HAL_RCC_OscConfig+0x8a>
 80031e6:	4b7c      	ldr	r3, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d223      	bcs.n	800323e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd8c 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e3ba      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320a:	4b73      	ldr	r3, [pc, #460]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a72      	ldr	r2, [pc, #456]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	496d      	ldr	r1, [pc, #436]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003228:	4b6b      	ldr	r3, [pc, #428]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	4968      	ldr	r1, [pc, #416]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
 800323c:	e025      	b.n	800328a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323e:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4960      	ldr	r1, [pc, #384]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325c:	4b5e      	ldr	r3, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	495b      	ldr	r1, [pc, #364]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fd4c 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e37a      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800328a:	f000 fc81 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4950      	ldr	r1, [pc, #320]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a4e      	ldr	r2, [pc, #312]	; (80033e0 <HAL_RCC_OscConfig+0x278>)
 80032a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032aa:	4b4e      	ldr	r3, [pc, #312]	; (80033e4 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd ffee 	bl	8001290 <HAL_InitTick>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d052      	beq.n	8003364 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	e35e      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d032      	beq.n	8003330 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a42      	ldr	r2, [pc, #264]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d6:	f7fe f82b 	bl	8001330 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032de:	f7fe f827 	bl	8001330 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e347      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f0:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a35      	ldr	r2, [pc, #212]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003302:	f043 0308 	orr.w	r3, r3, #8
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4930      	ldr	r1, [pc, #192]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	492b      	ldr	r1, [pc, #172]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
 800332e:	e01a      	b.n	8003366 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800333c:	f7fd fff8 	bl	8001330 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003344:	f7fd fff4 	bl	8001330 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e314      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x1dc>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d073      	beq.n	800345a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x21c>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d10e      	bne.n	800339c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d063      	beq.n	8003458 <HAL_RCC_OscConfig+0x2f0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d15f      	bne.n	8003458 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e2f1      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x24c>
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e025      	b.n	8003400 <HAL_RCC_OscConfig+0x298>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d114      	bne.n	80033e8 <HAL_RCC_OscConfig+0x280>
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a02      	ldr	r2, [pc, #8]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e013      	b.n	8003400 <HAL_RCC_OscConfig+0x298>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	080067f4 	.word	0x080067f4
 80033e0:	20000000 	.word	0x20000000
 80033e4:	20000004 	.word	0x20000004
 80033e8:	4ba0      	ldr	r3, [pc, #640]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a9f      	ldr	r2, [pc, #636]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b9d      	ldr	r3, [pc, #628]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a9c      	ldr	r2, [pc, #624]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd ff92 	bl	8001330 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fd ff8e 	bl	8001330 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e2ae      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003422:	4b92      	ldr	r3, [pc, #584]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x2a8>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fd ff7e 	bl	8001330 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fd ff7a 	bl	8001330 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e29a      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344a:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x504>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x2d0>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d060      	beq.n	8003528 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d005      	beq.n	8003478 <HAL_RCC_OscConfig+0x310>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d119      	bne.n	80034a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d116      	bne.n	80034a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003478:	4b7c      	ldr	r3, [pc, #496]	; (800366c <HAL_RCC_OscConfig+0x504>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_OscConfig+0x328>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e277      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	4973      	ldr	r1, [pc, #460]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a4:	e040      	b.n	8003528 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d023      	beq.n	80034f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ae:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6e      	ldr	r2, [pc, #440]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fd ff39 	bl	8001330 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fd ff35 	bl	8001330 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e255      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d4:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b62      	ldr	r3, [pc, #392]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	495f      	ldr	r1, [pc, #380]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
 80034f4:	e018      	b.n	8003528 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b5d      	ldr	r3, [pc, #372]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5c      	ldr	r2, [pc, #368]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80034fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fd ff15 	bl	8001330 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7fd ff11 	bl	8001330 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e231      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_OscConfig+0x504>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03c      	beq.n	80035ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01c      	beq.n	8003576 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353c:	4b4b      	ldr	r3, [pc, #300]	; (800366c <HAL_RCC_OscConfig+0x504>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003542:	4a4a      	ldr	r2, [pc, #296]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7fd fef0 	bl	8001330 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fd feec 	bl	8001330 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e20c      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCC_OscConfig+0x3ec>
 8003574:	e01b      	b.n	80035ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357c:	4a3b      	ldr	r2, [pc, #236]	; (800366c <HAL_RCC_OscConfig+0x504>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fd fed3 	bl	8001330 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358e:	f7fd fecf 	bl	8001330 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1ef      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a0:	4b32      	ldr	r3, [pc, #200]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ef      	bne.n	800358e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80a6 	beq.w	8003708 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b27      	ldr	r3, [pc, #156]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	4a26      	ldr	r2, [pc, #152]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	6593      	str	r3, [r2, #88]	; 0x58
 80035d8:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCC_OscConfig+0x504>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCC_OscConfig+0x508>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d118      	bne.n	8003626 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_RCC_OscConfig+0x508>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_RCC_OscConfig+0x508>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003600:	f7fd fe96 	bl	8001330 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fd fe92 	bl	8001330 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1b2      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_RCC_OscConfig+0x508>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <HAL_RCC_OscConfig+0x4d8>
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800363e:	e029      	b.n	8003694 <HAL_RCC_OscConfig+0x52c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d115      	bne.n	8003674 <HAL_RCC_OscConfig+0x50c>
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_OscConfig+0x504>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <HAL_RCC_OscConfig+0x504>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	4a03      	ldr	r2, [pc, #12]	; (800366c <HAL_RCC_OscConfig+0x504>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x52c>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
 8003674:	4b9a      	ldr	r3, [pc, #616]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	4a99      	ldr	r2, [pc, #612]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003684:	4b96      	ldr	r3, [pc, #600]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	4a95      	ldr	r2, [pc, #596]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d016      	beq.n	80036ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fe48 	bl	8001330 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fe44 	bl	8001330 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e162      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ed      	beq.n	80036a4 <HAL_RCC_OscConfig+0x53c>
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fd fe31 	bl	8001330 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fd fe2d 	bl	8001330 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e14b      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e8:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ed      	bne.n	80036d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f6:	7ffb      	ldrb	r3, [r7, #31]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b78      	ldr	r3, [pc, #480]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4a77      	ldr	r2, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03c      	beq.n	800378e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01c      	beq.n	8003756 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800371c:	4b70      	ldr	r3, [pc, #448]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800371e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003722:	4a6f      	ldr	r2, [pc, #444]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fd fe00 	bl	8001330 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003734:	f7fd fdfc 	bl	8001330 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e11c      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003746:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ef      	beq.n	8003734 <HAL_RCC_OscConfig+0x5cc>
 8003754:	e01b      	b.n	800378e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003756:	4b62      	ldr	r3, [pc, #392]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800375c:	4a60      	ldr	r2, [pc, #384]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fd fde3 	bl	8001330 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800376e:	f7fd fddf 	bl	8001330 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0ff      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003780:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ef      	bne.n	800376e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80f3 	beq.w	800397e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	2b02      	cmp	r3, #2
 800379e:	f040 80c9 	bne.w	8003934 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037a2:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 0203 	and.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d12c      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	3b01      	subs	r3, #1
 80037c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d123      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d11b      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d113      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d109      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d06b      	beq.n	80038e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d062      	beq.n	80038dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003816:	4b32      	ldr	r3, [pc, #200]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0ac      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003832:	f7fd fd7d 	bl	8001330 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fd fd79 	bl	8001330 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e099      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003858:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <HAL_RCC_OscConfig+0x77c>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003868:	3a01      	subs	r2, #1
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003872:	0212      	lsls	r2, r2, #8
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0552      	lsls	r2, r2, #21
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	3a01      	subs	r2, #1
 800388a:	0652      	lsls	r2, r2, #25
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003892:	06d2      	lsls	r2, r2, #27
 8003894:	430a      	orrs	r2, r1
 8003896:	4912      	ldr	r1, [pc, #72]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b4:	f7fd fd3c 	bl	8001330 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd fd38 	bl	8001330 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e058      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038da:	e050      	b.n	800397e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e04f      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e8:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d144      	bne.n	800397e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a23      	ldr	r2, [pc, #140]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a20      	ldr	r2, [pc, #128]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390c:	f7fd fd10 	bl	8001330 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fd0c 	bl	8001330 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e02c      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x7ac>
 8003932:	e024      	b.n	800397e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d01f      	beq.n	800397a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 8003940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fd fcf3 	bl	8001330 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fd fcef 	bl	8001330 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4905      	ldr	r1, [pc, #20]	; (8003988 <HAL_RCC_OscConfig+0x820>)
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_OscConfig+0x824>)
 8003974:	4013      	ands	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
 8003978:	e001      	b.n	800397e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	feeefffc 	.word	0xfeeefffc

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0e7      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b72      	ldr	r3, [pc, #456]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4970      	ldr	r1, [pc, #448]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b6e      	ldr	r3, [pc, #440]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cf      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d908      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4960      	ldr	r1, [pc, #384]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04c      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b5a      	ldr	r3, [pc, #360]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0a6      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e09a      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a46:	4b4e      	ldr	r3, [pc, #312]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a56:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e086      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4943      	ldr	r1, [pc, #268]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd fc5a 	bl	8001330 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fd fc56 	bl	8001330 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e06e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d208      	bcs.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	492b      	ldr	r1, [pc, #172]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad6:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d210      	bcs.n	8003b06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	4923      	ldr	r1, [pc, #140]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e036      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4918      	ldr	r1, [pc, #96]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4910      	ldr	r1, [pc, #64]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b44:	f000 f824 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	490b      	ldr	r1, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x1f4>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1fc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fb91 	bl	8001290 <HAL_InitTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b72:	7afb      	ldrb	r3, [r7, #11]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	080067f4 	.word	0x080067f4
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000004 	.word	0x20000004

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d11e      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc4:	4b34      	ldr	r3, [pc, #208]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bd0:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e005      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003be0:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bec:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e004      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d134      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xac>
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c38:	617b      	str	r3, [r7, #20]
      break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	617b      	str	r3, [r7, #20]
      break;
 8003c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	3301      	adds	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	fb03 f202 	mul.w	r2, r3, r2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	0e5b      	lsrs	r3, r3, #25
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c88:	69bb      	ldr	r3, [r7, #24]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	0800680c 	.word	0x0800680c
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000000 	.word	0x20000000

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08006804 	.word	0x08006804

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf0:	f7ff ffda 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	08006804 	.word	0x08006804

08003d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d30:	f7ff f9b6 	bl	80030a0 <HAL_PWREx_GetVoltageRange>
 8003d34:	6178      	str	r0, [r7, #20]
 8003d36:	e014      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6593      	str	r3, [r2, #88]	; 0x58
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f9a6 	bl	80030a0 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d10b      	bne.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d919      	bls.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2ba0      	cmp	r3, #160	; 0xa0
 8003d74:	d902      	bls.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d76:	2302      	movs	r3, #2
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e013      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e010      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d902      	bls.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d88:	2303      	movs	r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e00a      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d102      	bne.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d94:	2302      	movs	r3, #2
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e004      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d101      	bne.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da0:	2301      	movs	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 0207 	bic.w	r2, r3, #7
 8003dac:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d031      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dfc:	d01a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003dfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e02:	d814      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e0c:	d10f      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a5c      	ldr	r2, [pc, #368]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e1a:	e00c      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f9de 	bl	80041e4 <RCCEx_PLLSAI1_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	74fb      	strb	r3, [r7, #19]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e3c:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	494e      	ldr	r1, [pc, #312]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e52:	e001      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 809e 	beq.w	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e6a:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	4a3f      	ldr	r2, [pc, #252]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a39      	ldr	r2, [pc, #228]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fa42 	bl	8001330 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eae:	e009      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fd fa3e 	bl	8001330 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec4:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d15a      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01e      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d019      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef2:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003efe:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	4a1b      	ldr	r2, [pc, #108]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd f9fe 	bl	8001330 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f36:	e00b      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd f9fa 	bl	8001330 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d902      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f4e:	e006      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ec      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	4904      	ldr	r1, [pc, #16]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f90:	7c7b      	ldrb	r3, [r7, #17]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4b8a      	ldr	r3, [pc, #552]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	4a89      	ldr	r2, [pc, #548]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fae:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	f023 0203 	bic.w	r2, r3, #3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4980      	ldr	r1, [pc, #512]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 020c 	bic.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	4978      	ldr	r1, [pc, #480]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff2:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	496f      	ldr	r1, [pc, #444]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	4967      	ldr	r1, [pc, #412]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	495e      	ldr	r1, [pc, #376]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004058:	4b59      	ldr	r3, [pc, #356]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4956      	ldr	r1, [pc, #344]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	494d      	ldr	r1, [pc, #308]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d028      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409c:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4945      	ldr	r1, [pc, #276]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ba:	d106      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040bc:	4b40      	ldr	r3, [pc, #256]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a3f      	ldr	r2, [pc, #252]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c6:	60d3      	str	r3, [r2, #12]
 80040c8:	e011      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d2:	d10c      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f882 	bl	80041e4 <RCCEx_PLLSAI1_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d028      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	492d      	ldr	r1, [pc, #180]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004118:	d106      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800411a:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004124:	60d3      	str	r3, [r2, #12]
 8004126:	e011      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004130:	d10c      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f000 f853 	bl	80041e4 <RCCEx_PLLSAI1_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01c      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004158:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004166:	4916      	ldr	r1, [pc, #88]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004176:	d10c      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	2102      	movs	r1, #2
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f830 	bl	80041e4 <RCCEx_PLLSAI1_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004188:	7cfb      	ldrb	r3, [r7, #19]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ac:	4904      	ldr	r1, [pc, #16]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000

080041c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000

080041e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041f2:	4b74      	ldr	r3, [pc, #464]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d018      	beq.n	8004230 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041fe:	4b71      	ldr	r3, [pc, #452]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0203 	and.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d10d      	bne.n	800422a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
       ||
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004216:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
       ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d047      	beq.n	80042ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e044      	b.n	80042ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d018      	beq.n	800426a <RCCEx_PLLSAI1_Config+0x86>
 8004238:	2b03      	cmp	r3, #3
 800423a:	d825      	bhi.n	8004288 <RCCEx_PLLSAI1_Config+0xa4>
 800423c:	2b01      	cmp	r3, #1
 800423e:	d002      	beq.n	8004246 <RCCEx_PLLSAI1_Config+0x62>
 8004240:	2b02      	cmp	r3, #2
 8004242:	d009      	beq.n	8004258 <RCCEx_PLLSAI1_Config+0x74>
 8004244:	e020      	b.n	8004288 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11d      	bne.n	800428e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004256:	e01a      	b.n	800428e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004258:	4b5a      	ldr	r3, [pc, #360]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e013      	b.n	8004292 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004276:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004286:	e006      	b.n	8004296 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	e004      	b.n	8004298 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004296:	bf00      	nop
    }

    if(status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10d      	bne.n	80042ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6819      	ldr	r1, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	430b      	orrs	r3, r1
 80042b4:	4943      	ldr	r1, [pc, #268]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d17c      	bne.n	80043ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042c0:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042cc:	f7fd f830 	bl	8001330 <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042d2:	e009      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042d4:	f7fd f82c 	bl	8001330 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d902      	bls.n	80042e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	73fb      	strb	r3, [r7, #15]
        break;
 80042e6:	e005      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042e8:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ef      	bne.n	80042d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d15f      	bne.n	80043ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d110      	bne.n	8004322 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004300:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004308:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6892      	ldr	r2, [r2, #8]
 8004310:	0211      	lsls	r1, r2, #8
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68d2      	ldr	r2, [r2, #12]
 8004316:	06d2      	lsls	r2, r2, #27
 8004318:	430a      	orrs	r2, r1
 800431a:	492a      	ldr	r1, [pc, #168]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800431c:	4313      	orrs	r3, r2
 800431e:	610b      	str	r3, [r1, #16]
 8004320:	e027      	b.n	8004372 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d112      	bne.n	800434e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004328:	4b26      	ldr	r3, [pc, #152]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004330:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6892      	ldr	r2, [r2, #8]
 8004338:	0211      	lsls	r1, r2, #8
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6912      	ldr	r2, [r2, #16]
 800433e:	0852      	lsrs	r2, r2, #1
 8004340:	3a01      	subs	r2, #1
 8004342:	0552      	lsls	r2, r2, #21
 8004344:	430a      	orrs	r2, r1
 8004346:	491f      	ldr	r1, [pc, #124]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
 800434c:	e011      	b.n	8004372 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004356:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6892      	ldr	r2, [r2, #8]
 800435e:	0211      	lsls	r1, r2, #8
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6952      	ldr	r2, [r2, #20]
 8004364:	0852      	lsrs	r2, r2, #1
 8004366:	3a01      	subs	r2, #1
 8004368:	0652      	lsls	r2, r2, #25
 800436a:	430a      	orrs	r2, r1
 800436c:	4915      	ldr	r1, [pc, #84]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004378:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800437c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fc ffd7 	bl	8001330 <HAL_GetTick>
 8004382:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004384:	e009      	b.n	800439a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004386:	f7fc ffd3 	bl	8001330 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d902      	bls.n	800439a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	73fb      	strb	r3, [r7, #15]
          break;
 8004398:	e005      	b.n	80043a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ef      	beq.n	8004386 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4903      	ldr	r1, [pc, #12]	; (80043c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000

080043c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e040      	b.n	800445c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc fe1e 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fc90 	bl	8004d2c <UART_SetConfig>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e022      	b.n	800445c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 feb0 	bl	8005184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 ff37 	bl	80052c8 <UART_CheckIdleState>
 800445a:	4603      	mov	r3, r0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004478:	2b20      	cmp	r3, #32
 800447a:	f040 8082 	bne.w	8004582 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Transmit+0x26>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07a      	b.n	8004584 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UART_Transmit+0x38>
 8004498:	2302      	movs	r3, #2
 800449a:	e073      	b.n	8004584 <HAL_UART_Transmit+0x120>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2221      	movs	r2, #33	; 0x21
 80044b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044b2:	f7fc ff3d 	bl	8001330 <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d108      	bne.n	80044e4 <HAL_UART_Transmit+0x80>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	e003      	b.n	80044ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044f4:	e02d      	b.n	8004552 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 ff2a 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e039      	b.n	8004584 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004522:	b292      	uxth	r2, r2
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	3302      	adds	r3, #2
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e008      	b.n	8004540 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	b292      	uxth	r2, r2
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1cb      	bne.n	80044f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fef6 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e005      	b.n	8004584 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
  }
}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800458c:	b480      	push	{r7}
 800458e:	b08b      	sub	sp, #44	; 0x2c
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d156      	bne.n	8004650 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_UART_Transmit_IT+0x22>
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e04f      	b.n	8004652 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_UART_Transmit_IT+0x34>
 80045bc:	2302      	movs	r3, #2
 80045be:	e048      	b.n	8004652 <HAL_UART_Transmit_IT+0xc6>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2221      	movs	r2, #33	; 0x21
 80045f0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fa:	d107      	bne.n	800460c <HAL_UART_Transmit_IT+0x80>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d103      	bne.n	800460c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_UART_Transmit_IT+0xd4>)
 8004608:	669a      	str	r2, [r3, #104]	; 0x68
 800460a:	e002      	b.n	8004612 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <HAL_UART_Transmit_IT+0xd8>)
 8004610:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	613b      	str	r3, [r7, #16]
   return(result);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	623b      	str	r3, [r7, #32]
 800463a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	69f9      	ldr	r1, [r7, #28]
 800463e:	6a3a      	ldr	r2, [r7, #32]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	61bb      	str	r3, [r7, #24]
   return(result);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	372c      	adds	r7, #44	; 0x2c
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	08005823 	.word	0x08005823
 8004664:	0800576b 	.word	0x0800576b

08004668 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	2b20      	cmp	r3, #32
 800467c:	d142      	bne.n	8004704 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_UART_Receive_IT+0x22>
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e03b      	b.n	8004706 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_UART_Receive_IT+0x34>
 8004698:	2302      	movs	r3, #2
 800469a:	e034      	b.n	8004706 <HAL_UART_Receive_IT+0x9e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a18      	ldr	r2, [pc, #96]	; (8004710 <HAL_UART_Receive_IT+0xa8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d01f      	beq.n	80046f4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	613b      	str	r3, [r7, #16]
   return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	69f9      	ldr	r1, [r7, #28]
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e6      	bne.n	80046c2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	461a      	mov	r2, r3
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fef2 	bl	80054e4 <UART_Start_Receive_IT>
 8004700:	4603      	mov	r3, r0
 8004702:	e000      	b.n	8004706 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3728      	adds	r7, #40	; 0x28
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40008000 	.word	0x40008000

08004714 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b0ba      	sub	sp, #232	; 0xe8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800473a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800473e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004742:	4013      	ands	r3, r2
 8004744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d115      	bne.n	800477c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00f      	beq.n	800477c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 82a6 	beq.w	8004cbe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
      }
      return;
 800477a:	e2a0      	b.n	8004cbe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800477c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8117 	beq.w	80049b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004792:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004796:	4b85      	ldr	r3, [pc, #532]	; (80049ac <HAL_UART_IRQHandler+0x298>)
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 810a 	beq.w	80049b4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d011      	beq.n	80047d0 <HAL_UART_IRQHandler+0xbc>
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d011      	beq.n	8004800 <HAL_UART_IRQHandler+0xec>
 80047dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2202      	movs	r2, #2
 80047ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d011      	beq.n	8004830 <HAL_UART_IRQHandler+0x11c>
 800480c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2204      	movs	r2, #4
 800481e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	f043 0202 	orr.w	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800483c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2208      	movs	r2, #8
 800485a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <HAL_UART_IRQHandler+0x18a>
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00c      	beq.n	800489e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 820c 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d04f      	beq.n	8004996 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 febe 	bl	8005678 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	d141      	bne.n	800498e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800493a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800494e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1d9      	bne.n	800490a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	2b00      	cmp	r3, #0
 800495c:	d013      	beq.n	8004986 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_UART_IRQHandler+0x29c>)
 8004964:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fe5f 	bl	800162e <HAL_DMA_Abort_IT>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d017      	beq.n	80049a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e00f      	b.n	80049a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9ba 	bl	8004d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e00b      	b.n	80049a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9b6 	bl	8004d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e007      	b.n	80049a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9b2 	bl	8004d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80049a4:	e18d      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a6:	bf00      	nop
    return;
 80049a8:	e18b      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5ae>
 80049aa:	bf00      	nop
 80049ac:	04000120 	.word	0x04000120
 80049b0:	0800573f 	.word	0x0800573f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 8146 	bne.w	8004c4a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 813f 	beq.w	8004c4a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8138 	beq.w	8004c4a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	f040 80b4 	bne.w	8004b5a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 815f 	beq.w	8004cc6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a12:	429a      	cmp	r2, r3
 8004a14:	f080 8157 	bcs.w	8004cc6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 8085 	bne.w	8004b3e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1da      	bne.n	8004a34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004aa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e1      	bne.n	8004a7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ade:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ae0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ae4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e3      	bne.n	8004aba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0e:	f023 0310 	bic.w	r3, r3, #16
 8004b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e4      	bne.n	8004afe <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fc fd3a 	bl	80015b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8de 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b58:	e0b5      	b.n	8004cc6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80a7 	beq.w	8004cca <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a2 	beq.w	8004cca <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8004baa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e4      	bne.n	8004b86 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	623b      	str	r3, [r7, #32]
   return(result);
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3308      	adds	r3, #8
 8004bdc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004be0:	633a      	str	r2, [r7, #48]	; 0x30
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e3      	bne.n	8004bbc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0310 	bic.w	r3, r3, #16
 8004c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e4      	bne.n	8004c06 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f866 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c48:	e03f      	b.n	8004cca <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00e      	beq.n	8004c74 <HAL_UART_IRQHandler+0x560>
 8004c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 ffc2 	bl	8005bf6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c72:	e02d      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00e      	beq.n	8004c9e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01c      	beq.n	8004cce <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	4798      	blx	r3
    }
    return;
 8004c9c:	e017      	b.n	8004cce <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d012      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
 8004caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fe13 	bl	80058e2 <UART_EndTransmit_IT>
    return;
 8004cbc:	e008      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004cbe:	bf00      	nop
 8004cc0:	e006      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004cc2:	bf00      	nop
 8004cc4:	e004      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004cc6:	bf00      	nop
 8004cc8:	e002      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004cce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004cd0:	37e8      	adds	r7, #232	; 0xe8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop

08004cd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b08a      	sub	sp, #40	; 0x28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4bb4      	ldr	r3, [pc, #720]	; (800502c <UART_SetConfig+0x300>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4aa9      	ldr	r2, [pc, #676]	; (8005030 <UART_SetConfig+0x304>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	4313      	orrs	r3, r2
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4aa0      	ldr	r2, [pc, #640]	; (8005034 <UART_SetConfig+0x308>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d126      	bne.n	8004e04 <UART_SetConfig+0xd8>
 8004db6:	4ba0      	ldr	r3, [pc, #640]	; (8005038 <UART_SetConfig+0x30c>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d81b      	bhi.n	8004dfc <UART_SetConfig+0xd0>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <UART_SetConfig+0xa0>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004ded 	.word	0x08004ded
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e080      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004de4:	2302      	movs	r3, #2
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e07c      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004dec:	2304      	movs	r3, #4
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e078      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004df4:	2308      	movs	r3, #8
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e074      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e070      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a8c      	ldr	r2, [pc, #560]	; (800503c <UART_SetConfig+0x310>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d138      	bne.n	8004e80 <UART_SetConfig+0x154>
 8004e0e:	4b8a      	ldr	r3, [pc, #552]	; (8005038 <UART_SetConfig+0x30c>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d82d      	bhi.n	8004e78 <UART_SetConfig+0x14c>
 8004e1c:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <UART_SetConfig+0xf8>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004e79 	.word	0x08004e79
 8004e2c:	08004e79 	.word	0x08004e79
 8004e30:	08004e79 	.word	0x08004e79
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004e79 	.word	0x08004e79
 8004e3c:	08004e79 	.word	0x08004e79
 8004e40:	08004e79 	.word	0x08004e79
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	08004e79 	.word	0x08004e79
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e71 	.word	0x08004e71
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e042      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004e60:	2302      	movs	r3, #2
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e03e      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e03a      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004e70:	2308      	movs	r3, #8
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	e036      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7e:	e032      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a6a      	ldr	r2, [pc, #424]	; (8005030 <UART_SetConfig+0x304>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d12a      	bne.n	8004ee0 <UART_SetConfig+0x1b4>
 8004e8a:	4b6b      	ldr	r3, [pc, #428]	; (8005038 <UART_SetConfig+0x30c>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e98:	d01a      	beq.n	8004ed0 <UART_SetConfig+0x1a4>
 8004e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e9e:	d81b      	bhi.n	8004ed8 <UART_SetConfig+0x1ac>
 8004ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea4:	d00c      	beq.n	8004ec0 <UART_SetConfig+0x194>
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eaa:	d815      	bhi.n	8004ed8 <UART_SetConfig+0x1ac>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <UART_SetConfig+0x18c>
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb4:	d008      	beq.n	8004ec8 <UART_SetConfig+0x19c>
 8004eb6:	e00f      	b.n	8004ed8 <UART_SetConfig+0x1ac>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebe:	e012      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec6:	e00e      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ece:	e00a      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed6:	e006      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e002      	b.n	8004ee6 <UART_SetConfig+0x1ba>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a51      	ldr	r2, [pc, #324]	; (8005030 <UART_SetConfig+0x304>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d17a      	bne.n	8004fe6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d824      	bhi.n	8004f42 <UART_SetConfig+0x216>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x1d4>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f43 	.word	0x08004f43
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f33 	.word	0x08004f33
 8004f14:	08004f43 	.word	0x08004f43
 8004f18:	08004f43 	.word	0x08004f43
 8004f1c:	08004f43 	.word	0x08004f43
 8004f20:	08004f3b 	.word	0x08004f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe fecc 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8004f28:	61f8      	str	r0, [r7, #28]
        break;
 8004f2a:	e010      	b.n	8004f4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f2c:	4b44      	ldr	r3, [pc, #272]	; (8005040 <UART_SetConfig+0x314>)
 8004f2e:	61fb      	str	r3, [r7, #28]
        break;
 8004f30:	e00d      	b.n	8004f4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f32:	f7fe fe2d 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8004f36:	61f8      	str	r0, [r7, #28]
        break;
 8004f38:	e009      	b.n	8004f4e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3e:	61fb      	str	r3, [r7, #28]
        break;
 8004f40:	e005      	b.n	8004f4e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8107 	beq.w	8005164 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d305      	bcc.n	8004f72 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d903      	bls.n	8004f7a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f78:	e0f4      	b.n	8005164 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	461c      	mov	r4, r3
 8004f80:	4615      	mov	r5, r2
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	022b      	lsls	r3, r5, #8
 8004f8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f90:	0222      	lsls	r2, r4, #8
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	6849      	ldr	r1, [r1, #4]
 8004f96:	0849      	lsrs	r1, r1, #1
 8004f98:	2000      	movs	r0, #0
 8004f9a:	4688      	mov	r8, r1
 8004f9c:	4681      	mov	r9, r0
 8004f9e:	eb12 0a08 	adds.w	sl, r2, r8
 8004fa2:	eb43 0b09 	adc.w	fp, r3, r9
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb4:	4650      	mov	r0, sl
 8004fb6:	4659      	mov	r1, fp
 8004fb8:	f7fb f962 	bl	8000280 <__aeabi_uldivmod>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fca:	d308      	bcc.n	8004fde <UART_SetConfig+0x2b2>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd2:	d204      	bcs.n	8004fde <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	e0c2      	b.n	8005164 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe4:	e0be      	b.n	8005164 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fee:	d16a      	bne.n	80050c6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d834      	bhi.n	8005062 <UART_SetConfig+0x336>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0x2d4>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005025 	.word	0x08005025
 8005004:	08005045 	.word	0x08005045
 8005008:	0800504d 	.word	0x0800504d
 800500c:	08005063 	.word	0x08005063
 8005010:	08005053 	.word	0x08005053
 8005014:	08005063 	.word	0x08005063
 8005018:	08005063 	.word	0x08005063
 800501c:	08005063 	.word	0x08005063
 8005020:	0800505b 	.word	0x0800505b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005024:	f7fe fe4c 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8005028:	61f8      	str	r0, [r7, #28]
        break;
 800502a:	e020      	b.n	800506e <UART_SetConfig+0x342>
 800502c:	efff69f3 	.word	0xefff69f3
 8005030:	40008000 	.word	0x40008000
 8005034:	40013800 	.word	0x40013800
 8005038:	40021000 	.word	0x40021000
 800503c:	40004400 	.word	0x40004400
 8005040:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005044:	f7fe fe52 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8005048:	61f8      	str	r0, [r7, #28]
        break;
 800504a:	e010      	b.n	800506e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800504c:	4b4c      	ldr	r3, [pc, #304]	; (8005180 <UART_SetConfig+0x454>)
 800504e:	61fb      	str	r3, [r7, #28]
        break;
 8005050:	e00d      	b.n	800506e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005052:	f7fe fd9d 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005056:	61f8      	str	r0, [r7, #28]
        break;
 8005058:	e009      	b.n	800506e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505e:	61fb      	str	r3, [r7, #28]
        break;
 8005060:	e005      	b.n	800506e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800506c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d077      	beq.n	8005164 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	005a      	lsls	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b0f      	cmp	r3, #15
 800508e:	d916      	bls.n	80050be <UART_SetConfig+0x392>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d212      	bcs.n	80050be <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f023 030f 	bic.w	r3, r3, #15
 80050a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	8afb      	ldrh	r3, [r7, #22]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	8afa      	ldrh	r2, [r7, #22]
 80050ba:	60da      	str	r2, [r3, #12]
 80050bc:	e052      	b.n	8005164 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050c4:	e04e      	b.n	8005164 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d827      	bhi.n	800511e <UART_SetConfig+0x3f2>
 80050ce:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <UART_SetConfig+0x3a8>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	08005101 	.word	0x08005101
 80050dc:	08005109 	.word	0x08005109
 80050e0:	0800511f 	.word	0x0800511f
 80050e4:	0800510f 	.word	0x0800510f
 80050e8:	0800511f 	.word	0x0800511f
 80050ec:	0800511f 	.word	0x0800511f
 80050f0:	0800511f 	.word	0x0800511f
 80050f4:	08005117 	.word	0x08005117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7fe fde2 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 80050fc:	61f8      	str	r0, [r7, #28]
        break;
 80050fe:	e014      	b.n	800512a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005100:	f7fe fdf4 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8005104:	61f8      	str	r0, [r7, #28]
        break;
 8005106:	e010      	b.n	800512a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005108:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <UART_SetConfig+0x454>)
 800510a:	61fb      	str	r3, [r7, #28]
        break;
 800510c:	e00d      	b.n	800512a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510e:	f7fe fd3f 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005112:	61f8      	str	r0, [r7, #28]
        break;
 8005114:	e009      	b.n	800512a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511a:	61fb      	str	r3, [r7, #28]
        break;
 800511c:	e005      	b.n	800512a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005128:	bf00      	nop
    }

    if (pclk != 0U)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d019      	beq.n	8005164 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	085a      	lsrs	r2, r3, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	441a      	add	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b0f      	cmp	r3, #15
 8005148:	d909      	bls.n	800515e <UART_SetConfig+0x432>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005150:	d205      	bcs.n	800515e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60da      	str	r2, [r3, #12]
 800515c:	e002      	b.n	8005164 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005170:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005174:	4618      	mov	r0, r3
 8005176:	3728      	adds	r7, #40	; 0x28
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	00f42400 	.word	0x00f42400

08005184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01a      	beq.n	800529a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005282:	d10a      	bne.n	800529a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d8:	f7fc f82a 	bl	8001330 <HAL_GetTick>
 80052dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	d10e      	bne.n	800530a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f82d 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e023      	b.n	8005352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d10e      	bne.n	8005336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f817 	bl	800535a <UART_WaitOnFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e00d      	b.n	8005352 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b09c      	sub	sp, #112	; 0x70
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4613      	mov	r3, r2
 8005368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536a:	e0a5      	b.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	f000 80a1 	beq.w	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005376:	f7fb ffdb 	bl	8001330 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005382:	429a      	cmp	r2, r3
 8005384:	d302      	bcc.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
 8005386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005388:	2b00      	cmp	r3, #0
 800538a:	d13e      	bne.n	800540a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a0:	667b      	str	r3, [r7, #100]	; 0x64
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e6      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	663b      	str	r3, [r7, #96]	; 0x60
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053de:	64ba      	str	r2, [r7, #72]	; 0x48
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e5      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e067      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d04f      	beq.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005426:	d147      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005430:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005446:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	637b      	str	r3, [r7, #52]	; 0x34
 8005452:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	613b      	str	r3, [r7, #16]
   return(result);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	66bb      	str	r3, [r7, #104]	; 0x68
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3308      	adds	r3, #8
 8005482:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005484:	623a      	str	r2, [r7, #32]
 8005486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	69f9      	ldr	r1, [r7, #28]
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	61bb      	str	r3, [r7, #24]
   return(result);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e010      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	f43f af4a 	beq.w	800536c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3770      	adds	r7, #112	; 0x70
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b097      	sub	sp, #92	; 0x5c
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005516:	d10e      	bne.n	8005536 <UART_Start_Receive_IT+0x52>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <UART_Start_Receive_IT+0x48>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552a:	e02d      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	22ff      	movs	r2, #255	; 0xff
 8005530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005534:	e028      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <UART_Start_Receive_IT+0x76>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d104      	bne.n	8005550 <UART_Start_Receive_IT+0x6c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800554e:	e01b      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	227f      	movs	r2, #127	; 0x7f
 8005554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005558:	e016      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005562:	d10d      	bne.n	8005580 <UART_Start_Receive_IT+0x9c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <UART_Start_Receive_IT+0x92>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	227f      	movs	r2, #127	; 0x7f
 8005570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005574:	e008      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	223f      	movs	r2, #63	; 0x3f
 800557a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800557e:	e003      	b.n	8005588 <UART_Start_Receive_IT+0xa4>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2222      	movs	r2, #34	; 0x22
 8005594:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	657b      	str	r3, [r7, #84]	; 0x54
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80055b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d107      	bne.n	80055e4 <UART_Start_Receive_IT+0x100>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4a24      	ldr	r2, [pc, #144]	; (8005670 <UART_Start_Receive_IT+0x18c>)
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64
 80055e2:	e002      	b.n	80055ea <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a23      	ldr	r2, [pc, #140]	; (8005674 <UART_Start_Receive_IT+0x190>)
 80055e8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d019      	beq.n	800562e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
 800561a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_Start_Receive_IT+0x116>
 800562c:	e018      	b.n	8005660 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	613b      	str	r3, [r7, #16]
   return(result);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f043 0320 	orr.w	r3, r3, #32
 8005642:	653b      	str	r3, [r7, #80]	; 0x50
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	69f9      	ldr	r1, [r7, #28]
 8005652:	6a3a      	ldr	r2, [r7, #32]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	61bb      	str	r3, [r7, #24]
   return(result);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	375c      	adds	r7, #92	; 0x5c
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	08005a97 	.word	0x08005a97
 8005674:	08005937 	.word	0x08005937

08005678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b095      	sub	sp, #84	; 0x54
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569e:	643b      	str	r3, [r7, #64]	; 0x40
 80056a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e6      	bne.n	8005680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3308      	adds	r3, #8
 80056b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3308      	adds	r3, #8
 80056d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e5      	bne.n	80056b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d118      	bne.n	8005720 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0310 	bic.w	r3, r3, #16
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	613b      	str	r3, [r7, #16]
   return(result);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005732:	bf00      	nop
 8005734:	3754      	adds	r7, #84	; 0x54
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff facf 	bl	8004d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800576a:	b480      	push	{r7}
 800576c:	b08f      	sub	sp, #60	; 0x3c
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005776:	2b21      	cmp	r3, #33	; 0x21
 8005778:	d14d      	bne.n	8005816 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d132      	bne.n	80057ec <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	61fb      	str	r3, [r7, #28]
   return(result);
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057cc:	633b      	str	r3, [r7, #48]	; 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	613b      	str	r3, [r7, #16]
   return(result);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e6      	bne.n	80057b8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80057ea:	e014      	b.n	8005816 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	b292      	uxth	r2, r2
 80057f8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005816:	bf00      	nop
 8005818:	373c      	adds	r7, #60	; 0x3c
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005822:	b480      	push	{r7}
 8005824:	b091      	sub	sp, #68	; 0x44
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800582e:	2b21      	cmp	r3, #33	; 0x21
 8005830:	d151      	bne.n	80058d6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d132      	bne.n	80058a4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	e853 3f00 	ldrex	r3, [r3]
 800584a:	623b      	str	r3, [r7, #32]
   return(result);
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005852:	63bb      	str	r3, [r7, #56]	; 0x38
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	461a      	mov	r2, r3
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
 800585e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e6      	bne.n	800583e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	60fb      	str	r3, [r7, #12]
   return(result);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	69b9      	ldr	r1, [r7, #24]
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	617b      	str	r3, [r7, #20]
   return(result);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e6      	bne.n	8005870 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80058a2:	e018      	b.n	80058d6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80058aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ac:	881a      	ldrh	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b6:	b292      	uxth	r2, r2
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	1c9a      	adds	r2, r3, #2
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80058d6:	bf00      	nop
 80058d8:	3744      	adds	r7, #68	; 0x44
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b088      	sub	sp, #32
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	613b      	str	r3, [r7, #16]
   return(result);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e6      	bne.n	80058ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff f9d5 	bl	8004cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800592e:	bf00      	nop
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b096      	sub	sp, #88	; 0x58
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005944:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594c:	2b22      	cmp	r3, #34	; 0x22
 800594e:	f040 8094 	bne.w	8005a7a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005958:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800595c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005960:	b2d9      	uxtb	r1, r3
 8005962:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005966:	b2da      	uxtb	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	400a      	ands	r2, r1
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d179      	bne.n	8005a8e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ae:	653b      	str	r3, [r7, #80]	; 0x50
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e6      	bne.n	800599a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	623b      	str	r3, [r7, #32]
   return(result);
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ec:	633a      	str	r2, [r7, #48]	; 0x30
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e5      	bne.n	80059cc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d12e      	bne.n	8005a72 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0310 	bic.w	r3, r3, #16
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	617b      	str	r3, [r7, #20]
   return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b10      	cmp	r3, #16
 8005a58:	d103      	bne.n	8005a62 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff f952 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a70:	e00d      	b.n	8005a8e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff f93a 	bl	8004cec <HAL_UART_RxCpltCallback>
}
 8005a78:	e009      	b.n	8005a8e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	8b1b      	ldrh	r3, [r3, #24]
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0208 	orr.w	r2, r2, #8
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	831a      	strh	r2, [r3, #24]
}
 8005a8e:	bf00      	nop
 8005a90:	3758      	adds	r7, #88	; 0x58
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b096      	sub	sp, #88	; 0x58
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005aa4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aac:	2b22      	cmp	r3, #34	; 0x22
 8005aae:	f040 8094 	bne.w	8005bda <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ab8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ac2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005ac6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005aca:	4013      	ands	r3, r2
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	1c9a      	adds	r2, r3, #2
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d179      	bne.n	8005bee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e6      	bne.n	8005afa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d12e      	bne.n	8005bd2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e6      	bne.n	8005b7a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d103      	bne.n	8005bc2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff f8a2 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bd0:	e00d      	b.n	8005bee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff f88a 	bl	8004cec <HAL_UART_RxCpltCallback>
}
 8005bd8:	e009      	b.n	8005bee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	8b1b      	ldrh	r3, [r3, #24]
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0208 	orr.w	r2, r2, #8
 8005bea:	b292      	uxth	r2, r2
 8005bec:	831a      	strh	r2, [r3, #24]
}
 8005bee:	bf00      	nop
 8005bf0:	3758      	adds	r7, #88	; 0x58
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <__errno>:
 8005c0c:	4b01      	ldr	r3, [pc, #4]	; (8005c14 <__errno+0x8>)
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	2000000c 	.word	0x2000000c

08005c18 <__libc_init_array>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	4d0d      	ldr	r5, [pc, #52]	; (8005c50 <__libc_init_array+0x38>)
 8005c1c:	4c0d      	ldr	r4, [pc, #52]	; (8005c54 <__libc_init_array+0x3c>)
 8005c1e:	1b64      	subs	r4, r4, r5
 8005c20:	10a4      	asrs	r4, r4, #2
 8005c22:	2600      	movs	r6, #0
 8005c24:	42a6      	cmp	r6, r4
 8005c26:	d109      	bne.n	8005c3c <__libc_init_array+0x24>
 8005c28:	4d0b      	ldr	r5, [pc, #44]	; (8005c58 <__libc_init_array+0x40>)
 8005c2a:	4c0c      	ldr	r4, [pc, #48]	; (8005c5c <__libc_init_array+0x44>)
 8005c2c:	f000 fcd2 	bl	80065d4 <_init>
 8005c30:	1b64      	subs	r4, r4, r5
 8005c32:	10a4      	asrs	r4, r4, #2
 8005c34:	2600      	movs	r6, #0
 8005c36:	42a6      	cmp	r6, r4
 8005c38:	d105      	bne.n	8005c46 <__libc_init_array+0x2e>
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c40:	4798      	blx	r3
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7ee      	b.n	8005c24 <__libc_init_array+0xc>
 8005c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4a:	4798      	blx	r3
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	e7f2      	b.n	8005c36 <__libc_init_array+0x1e>
 8005c50:	08006978 	.word	0x08006978
 8005c54:	08006978 	.word	0x08006978
 8005c58:	08006978 	.word	0x08006978
 8005c5c:	0800697c 	.word	0x0800697c

08005c60 <malloc>:
 8005c60:	4b02      	ldr	r3, [pc, #8]	; (8005c6c <malloc+0xc>)
 8005c62:	4601      	mov	r1, r0
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	f000 b87f 	b.w	8005d68 <_malloc_r>
 8005c6a:	bf00      	nop
 8005c6c:	2000000c 	.word	0x2000000c

08005c70 <free>:
 8005c70:	4b02      	ldr	r3, [pc, #8]	; (8005c7c <free+0xc>)
 8005c72:	4601      	mov	r1, r0
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	f000 b80b 	b.w	8005c90 <_free_r>
 8005c7a:	bf00      	nop
 8005c7c:	2000000c 	.word	0x2000000c

08005c80 <memset>:
 8005c80:	4402      	add	r2, r0
 8005c82:	4603      	mov	r3, r0
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d100      	bne.n	8005c8a <memset+0xa>
 8005c88:	4770      	bx	lr
 8005c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8e:	e7f9      	b.n	8005c84 <memset+0x4>

08005c90 <_free_r>:
 8005c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c92:	2900      	cmp	r1, #0
 8005c94:	d044      	beq.n	8005d20 <_free_r+0x90>
 8005c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9a:	9001      	str	r0, [sp, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ca2:	bfb8      	it	lt
 8005ca4:	18e4      	addlt	r4, r4, r3
 8005ca6:	f000 f937 	bl	8005f18 <__malloc_lock>
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <_free_r+0x94>)
 8005cac:	9801      	ldr	r0, [sp, #4]
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	b933      	cbnz	r3, 8005cc0 <_free_r+0x30>
 8005cb2:	6063      	str	r3, [r4, #4]
 8005cb4:	6014      	str	r4, [r2, #0]
 8005cb6:	b003      	add	sp, #12
 8005cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cbc:	f000 b932 	b.w	8005f24 <__malloc_unlock>
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d908      	bls.n	8005cd6 <_free_r+0x46>
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	bf01      	itttt	eq
 8005ccc:	6819      	ldreq	r1, [r3, #0]
 8005cce:	685b      	ldreq	r3, [r3, #4]
 8005cd0:	1949      	addeq	r1, r1, r5
 8005cd2:	6021      	streq	r1, [r4, #0]
 8005cd4:	e7ed      	b.n	8005cb2 <_free_r+0x22>
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b10b      	cbz	r3, 8005ce0 <_free_r+0x50>
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d9fa      	bls.n	8005cd6 <_free_r+0x46>
 8005ce0:	6811      	ldr	r1, [r2, #0]
 8005ce2:	1855      	adds	r5, r2, r1
 8005ce4:	42a5      	cmp	r5, r4
 8005ce6:	d10b      	bne.n	8005d00 <_free_r+0x70>
 8005ce8:	6824      	ldr	r4, [r4, #0]
 8005cea:	4421      	add	r1, r4
 8005cec:	1854      	adds	r4, r2, r1
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	6011      	str	r1, [r2, #0]
 8005cf2:	d1e0      	bne.n	8005cb6 <_free_r+0x26>
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	6053      	str	r3, [r2, #4]
 8005cfa:	4421      	add	r1, r4
 8005cfc:	6011      	str	r1, [r2, #0]
 8005cfe:	e7da      	b.n	8005cb6 <_free_r+0x26>
 8005d00:	d902      	bls.n	8005d08 <_free_r+0x78>
 8005d02:	230c      	movs	r3, #12
 8005d04:	6003      	str	r3, [r0, #0]
 8005d06:	e7d6      	b.n	8005cb6 <_free_r+0x26>
 8005d08:	6825      	ldr	r5, [r4, #0]
 8005d0a:	1961      	adds	r1, r4, r5
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	bf04      	itt	eq
 8005d10:	6819      	ldreq	r1, [r3, #0]
 8005d12:	685b      	ldreq	r3, [r3, #4]
 8005d14:	6063      	str	r3, [r4, #4]
 8005d16:	bf04      	itt	eq
 8005d18:	1949      	addeq	r1, r1, r5
 8005d1a:	6021      	streq	r1, [r4, #0]
 8005d1c:	6054      	str	r4, [r2, #4]
 8005d1e:	e7ca      	b.n	8005cb6 <_free_r+0x26>
 8005d20:	b003      	add	sp, #12
 8005d22:	bd30      	pop	{r4, r5, pc}
 8005d24:	20000220 	.word	0x20000220

08005d28 <sbrk_aligned>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4e0e      	ldr	r6, [pc, #56]	; (8005d64 <sbrk_aligned+0x3c>)
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	b911      	cbnz	r1, 8005d3a <sbrk_aligned+0x12>
 8005d34:	f000 f88c 	bl	8005e50 <_sbrk_r>
 8005d38:	6030      	str	r0, [r6, #0]
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f887 	bl	8005e50 <_sbrk_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d00a      	beq.n	8005d5c <sbrk_aligned+0x34>
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d007      	beq.n	8005d60 <sbrk_aligned+0x38>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f87c 	bl	8005e50 <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d101      	bne.n	8005d60 <sbrk_aligned+0x38>
 8005d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d60:	4620      	mov	r0, r4
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	20000224 	.word	0x20000224

08005d68 <_malloc_r>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d905      	bls.n	8005d90 <_malloc_r+0x28>
 8005d84:	230c      	movs	r3, #12
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	2600      	movs	r6, #0
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	4e2e      	ldr	r6, [pc, #184]	; (8005e4c <_malloc_r+0xe4>)
 8005d92:	f000 f8c1 	bl	8005f18 <__malloc_lock>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb34      	cbnz	r4, 8005dea <_malloc_r+0x82>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc2 	bl	8005d28 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d14d      	bne.n	8005e46 <_malloc_r+0xde>
 8005daa:	6834      	ldr	r4, [r6, #0]
 8005dac:	4626      	mov	r6, r4
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d140      	bne.n	8005e34 <_malloc_r+0xcc>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4631      	mov	r1, r6
 8005db6:	4638      	mov	r0, r7
 8005db8:	eb04 0803 	add.w	r8, r4, r3
 8005dbc:	f000 f848 	bl	8005e50 <_sbrk_r>
 8005dc0:	4580      	cmp	r8, r0
 8005dc2:	d13a      	bne.n	8005e3a <_malloc_r+0xd2>
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	3503      	adds	r5, #3
 8005dc8:	1a6d      	subs	r5, r5, r1
 8005dca:	f025 0503 	bic.w	r5, r5, #3
 8005dce:	3508      	adds	r5, #8
 8005dd0:	2d0c      	cmp	r5, #12
 8005dd2:	bf38      	it	cc
 8005dd4:	250c      	movcc	r5, #12
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff ffa5 	bl	8005d28 <sbrk_aligned>
 8005dde:	3001      	adds	r0, #1
 8005de0:	d02b      	beq.n	8005e3a <_malloc_r+0xd2>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	442b      	add	r3, r5
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	e00e      	b.n	8005e08 <_malloc_r+0xa0>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	1b52      	subs	r2, r2, r5
 8005dee:	d41e      	bmi.n	8005e2e <_malloc_r+0xc6>
 8005df0:	2a0b      	cmp	r2, #11
 8005df2:	d916      	bls.n	8005e22 <_malloc_r+0xba>
 8005df4:	1961      	adds	r1, r4, r5
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	6025      	str	r5, [r4, #0]
 8005dfa:	bf18      	it	ne
 8005dfc:	6059      	strne	r1, [r3, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	bf08      	it	eq
 8005e02:	6031      	streq	r1, [r6, #0]
 8005e04:	5162      	str	r2, [r4, r5]
 8005e06:	604b      	str	r3, [r1, #4]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f104 060b 	add.w	r6, r4, #11
 8005e0e:	f000 f889 	bl	8005f24 <__malloc_unlock>
 8005e12:	f026 0607 	bic.w	r6, r6, #7
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	1af2      	subs	r2, r6, r3
 8005e1a:	d0b6      	beq.n	8005d8a <_malloc_r+0x22>
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	50a3      	str	r3, [r4, r2]
 8005e20:	e7b3      	b.n	8005d8a <_malloc_r+0x22>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bf0c      	ite	eq
 8005e28:	6032      	streq	r2, [r6, #0]
 8005e2a:	605a      	strne	r2, [r3, #4]
 8005e2c:	e7ec      	b.n	8005e08 <_malloc_r+0xa0>
 8005e2e:	4623      	mov	r3, r4
 8005e30:	6864      	ldr	r4, [r4, #4]
 8005e32:	e7b2      	b.n	8005d9a <_malloc_r+0x32>
 8005e34:	4634      	mov	r4, r6
 8005e36:	6876      	ldr	r6, [r6, #4]
 8005e38:	e7b9      	b.n	8005dae <_malloc_r+0x46>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f000 f870 	bl	8005f24 <__malloc_unlock>
 8005e44:	e7a1      	b.n	8005d8a <_malloc_r+0x22>
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	e7de      	b.n	8005e08 <_malloc_r+0xa0>
 8005e4a:	bf00      	nop
 8005e4c:	20000220 	.word	0x20000220

08005e50 <_sbrk_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d06      	ldr	r5, [pc, #24]	; (8005e6c <_sbrk_r+0x1c>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fb f98e 	bl	800117c <_sbrk>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_sbrk_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_sbrk_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	20000228 	.word	0x20000228

08005e70 <sniprintf>:
 8005e70:	b40c      	push	{r2, r3}
 8005e72:	b530      	push	{r4, r5, lr}
 8005e74:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <sniprintf+0x64>)
 8005e76:	1e0c      	subs	r4, r1, #0
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	b09d      	sub	sp, #116	; 0x74
 8005e7c:	da08      	bge.n	8005e90 <sniprintf+0x20>
 8005e7e:	238b      	movs	r3, #139	; 0x8b
 8005e80:	602b      	str	r3, [r5, #0]
 8005e82:	f04f 30ff 	mov.w	r0, #4294967295
 8005e86:	b01d      	add	sp, #116	; 0x74
 8005e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e8c:	b002      	add	sp, #8
 8005e8e:	4770      	bx	lr
 8005e90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e98:	bf14      	ite	ne
 8005e9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e9e:	4623      	moveq	r3, r4
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	9307      	str	r3, [sp, #28]
 8005ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ea8:	9002      	str	r0, [sp, #8]
 8005eaa:	9006      	str	r0, [sp, #24]
 8005eac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005eb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005eb2:	ab21      	add	r3, sp, #132	; 0x84
 8005eb4:	a902      	add	r1, sp, #8
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	f000 f895 	bl	8005fe8 <_svfiprintf_r>
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	bfbc      	itt	lt
 8005ec2:	238b      	movlt	r3, #139	; 0x8b
 8005ec4:	602b      	strlt	r3, [r5, #0]
 8005ec6:	2c00      	cmp	r4, #0
 8005ec8:	d0dd      	beq.n	8005e86 <sniprintf+0x16>
 8005eca:	9b02      	ldr	r3, [sp, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	e7d9      	b.n	8005e86 <sniprintf+0x16>
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c

08005ed8 <siprintf>:
 8005ed8:	b40e      	push	{r1, r2, r3}
 8005eda:	b500      	push	{lr}
 8005edc:	b09c      	sub	sp, #112	; 0x70
 8005ede:	ab1d      	add	r3, sp, #116	; 0x74
 8005ee0:	9002      	str	r0, [sp, #8]
 8005ee2:	9006      	str	r0, [sp, #24]
 8005ee4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ee8:	4809      	ldr	r0, [pc, #36]	; (8005f10 <siprintf+0x38>)
 8005eea:	9107      	str	r1, [sp, #28]
 8005eec:	9104      	str	r1, [sp, #16]
 8005eee:	4909      	ldr	r1, [pc, #36]	; (8005f14 <siprintf+0x3c>)
 8005ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef4:	9105      	str	r1, [sp, #20]
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	a902      	add	r1, sp, #8
 8005efc:	f000 f874 	bl	8005fe8 <_svfiprintf_r>
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	b01c      	add	sp, #112	; 0x70
 8005f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f0c:	b003      	add	sp, #12
 8005f0e:	4770      	bx	lr
 8005f10:	2000000c 	.word	0x2000000c
 8005f14:	ffff0208 	.word	0xffff0208

08005f18 <__malloc_lock>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__malloc_lock+0x8>)
 8005f1a:	f000 baf9 	b.w	8006510 <__retarget_lock_acquire_recursive>
 8005f1e:	bf00      	nop
 8005f20:	2000022c 	.word	0x2000022c

08005f24 <__malloc_unlock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__malloc_unlock+0x8>)
 8005f26:	f000 baf4 	b.w	8006512 <__retarget_lock_release_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	2000022c 	.word	0x2000022c

08005f30 <__ssputs_r>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	688e      	ldr	r6, [r1, #8]
 8005f36:	429e      	cmp	r6, r3
 8005f38:	4682      	mov	sl, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4690      	mov	r8, r2
 8005f3e:	461f      	mov	r7, r3
 8005f40:	d838      	bhi.n	8005fb4 <__ssputs_r+0x84>
 8005f42:	898a      	ldrh	r2, [r1, #12]
 8005f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f48:	d032      	beq.n	8005fb0 <__ssputs_r+0x80>
 8005f4a:	6825      	ldr	r5, [r4, #0]
 8005f4c:	6909      	ldr	r1, [r1, #16]
 8005f4e:	eba5 0901 	sub.w	r9, r5, r1
 8005f52:	6965      	ldr	r5, [r4, #20]
 8005f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	444b      	add	r3, r9
 8005f60:	106d      	asrs	r5, r5, #1
 8005f62:	429d      	cmp	r5, r3
 8005f64:	bf38      	it	cc
 8005f66:	461d      	movcc	r5, r3
 8005f68:	0553      	lsls	r3, r2, #21
 8005f6a:	d531      	bpl.n	8005fd0 <__ssputs_r+0xa0>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f7ff fefb 	bl	8005d68 <_malloc_r>
 8005f72:	4606      	mov	r6, r0
 8005f74:	b950      	cbnz	r0, 8005f8c <__ssputs_r+0x5c>
 8005f76:	230c      	movs	r3, #12
 8005f78:	f8ca 3000 	str.w	r3, [sl]
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	6921      	ldr	r1, [r4, #16]
 8005f8e:	464a      	mov	r2, r9
 8005f90:	f000 fac0 	bl	8006514 <memcpy>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	6126      	str	r6, [r4, #16]
 8005fa2:	6165      	str	r5, [r4, #20]
 8005fa4:	444e      	add	r6, r9
 8005fa6:	eba5 0509 	sub.w	r5, r5, r9
 8005faa:	6026      	str	r6, [r4, #0]
 8005fac:	60a5      	str	r5, [r4, #8]
 8005fae:	463e      	mov	r6, r7
 8005fb0:	42be      	cmp	r6, r7
 8005fb2:	d900      	bls.n	8005fb6 <__ssputs_r+0x86>
 8005fb4:	463e      	mov	r6, r7
 8005fb6:	6820      	ldr	r0, [r4, #0]
 8005fb8:	4632      	mov	r2, r6
 8005fba:	4641      	mov	r1, r8
 8005fbc:	f000 fab8 	bl	8006530 <memmove>
 8005fc0:	68a3      	ldr	r3, [r4, #8]
 8005fc2:	1b9b      	subs	r3, r3, r6
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	4433      	add	r3, r6
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	2000      	movs	r0, #0
 8005fce:	e7db      	b.n	8005f88 <__ssputs_r+0x58>
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	f000 fac7 	bl	8006564 <_realloc_r>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d1e1      	bne.n	8005fa0 <__ssputs_r+0x70>
 8005fdc:	6921      	ldr	r1, [r4, #16]
 8005fde:	4650      	mov	r0, sl
 8005fe0:	f7ff fe56 	bl	8005c90 <_free_r>
 8005fe4:	e7c7      	b.n	8005f76 <__ssputs_r+0x46>
	...

08005fe8 <_svfiprintf_r>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	4698      	mov	r8, r3
 8005fee:	898b      	ldrh	r3, [r1, #12]
 8005ff0:	061b      	lsls	r3, r3, #24
 8005ff2:	b09d      	sub	sp, #116	; 0x74
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	4614      	mov	r4, r2
 8005ffa:	d50e      	bpl.n	800601a <_svfiprintf_r+0x32>
 8005ffc:	690b      	ldr	r3, [r1, #16]
 8005ffe:	b963      	cbnz	r3, 800601a <_svfiprintf_r+0x32>
 8006000:	2140      	movs	r1, #64	; 0x40
 8006002:	f7ff feb1 	bl	8005d68 <_malloc_r>
 8006006:	6028      	str	r0, [r5, #0]
 8006008:	6128      	str	r0, [r5, #16]
 800600a:	b920      	cbnz	r0, 8006016 <_svfiprintf_r+0x2e>
 800600c:	230c      	movs	r3, #12
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	e0d1      	b.n	80061ba <_svfiprintf_r+0x1d2>
 8006016:	2340      	movs	r3, #64	; 0x40
 8006018:	616b      	str	r3, [r5, #20]
 800601a:	2300      	movs	r3, #0
 800601c:	9309      	str	r3, [sp, #36]	; 0x24
 800601e:	2320      	movs	r3, #32
 8006020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006024:	f8cd 800c 	str.w	r8, [sp, #12]
 8006028:	2330      	movs	r3, #48	; 0x30
 800602a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061d4 <_svfiprintf_r+0x1ec>
 800602e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006032:	f04f 0901 	mov.w	r9, #1
 8006036:	4623      	mov	r3, r4
 8006038:	469a      	mov	sl, r3
 800603a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800603e:	b10a      	cbz	r2, 8006044 <_svfiprintf_r+0x5c>
 8006040:	2a25      	cmp	r2, #37	; 0x25
 8006042:	d1f9      	bne.n	8006038 <_svfiprintf_r+0x50>
 8006044:	ebba 0b04 	subs.w	fp, sl, r4
 8006048:	d00b      	beq.n	8006062 <_svfiprintf_r+0x7a>
 800604a:	465b      	mov	r3, fp
 800604c:	4622      	mov	r2, r4
 800604e:	4629      	mov	r1, r5
 8006050:	4638      	mov	r0, r7
 8006052:	f7ff ff6d 	bl	8005f30 <__ssputs_r>
 8006056:	3001      	adds	r0, #1
 8006058:	f000 80aa 	beq.w	80061b0 <_svfiprintf_r+0x1c8>
 800605c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800605e:	445a      	add	r2, fp
 8006060:	9209      	str	r2, [sp, #36]	; 0x24
 8006062:	f89a 3000 	ldrb.w	r3, [sl]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80a2 	beq.w	80061b0 <_svfiprintf_r+0x1c8>
 800606c:	2300      	movs	r3, #0
 800606e:	f04f 32ff 	mov.w	r2, #4294967295
 8006072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006076:	f10a 0a01 	add.w	sl, sl, #1
 800607a:	9304      	str	r3, [sp, #16]
 800607c:	9307      	str	r3, [sp, #28]
 800607e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006082:	931a      	str	r3, [sp, #104]	; 0x68
 8006084:	4654      	mov	r4, sl
 8006086:	2205      	movs	r2, #5
 8006088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608c:	4851      	ldr	r0, [pc, #324]	; (80061d4 <_svfiprintf_r+0x1ec>)
 800608e:	f7fa f8a7 	bl	80001e0 <memchr>
 8006092:	9a04      	ldr	r2, [sp, #16]
 8006094:	b9d8      	cbnz	r0, 80060ce <_svfiprintf_r+0xe6>
 8006096:	06d0      	lsls	r0, r2, #27
 8006098:	bf44      	itt	mi
 800609a:	2320      	movmi	r3, #32
 800609c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a0:	0711      	lsls	r1, r2, #28
 80060a2:	bf44      	itt	mi
 80060a4:	232b      	movmi	r3, #43	; 0x2b
 80060a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060aa:	f89a 3000 	ldrb.w	r3, [sl]
 80060ae:	2b2a      	cmp	r3, #42	; 0x2a
 80060b0:	d015      	beq.n	80060de <_svfiprintf_r+0xf6>
 80060b2:	9a07      	ldr	r2, [sp, #28]
 80060b4:	4654      	mov	r4, sl
 80060b6:	2000      	movs	r0, #0
 80060b8:	f04f 0c0a 	mov.w	ip, #10
 80060bc:	4621      	mov	r1, r4
 80060be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060c2:	3b30      	subs	r3, #48	; 0x30
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d94e      	bls.n	8006166 <_svfiprintf_r+0x17e>
 80060c8:	b1b0      	cbz	r0, 80060f8 <_svfiprintf_r+0x110>
 80060ca:	9207      	str	r2, [sp, #28]
 80060cc:	e014      	b.n	80060f8 <_svfiprintf_r+0x110>
 80060ce:	eba0 0308 	sub.w	r3, r0, r8
 80060d2:	fa09 f303 	lsl.w	r3, r9, r3
 80060d6:	4313      	orrs	r3, r2
 80060d8:	9304      	str	r3, [sp, #16]
 80060da:	46a2      	mov	sl, r4
 80060dc:	e7d2      	b.n	8006084 <_svfiprintf_r+0x9c>
 80060de:	9b03      	ldr	r3, [sp, #12]
 80060e0:	1d19      	adds	r1, r3, #4
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	9103      	str	r1, [sp, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	bfbb      	ittet	lt
 80060ea:	425b      	neglt	r3, r3
 80060ec:	f042 0202 	orrlt.w	r2, r2, #2
 80060f0:	9307      	strge	r3, [sp, #28]
 80060f2:	9307      	strlt	r3, [sp, #28]
 80060f4:	bfb8      	it	lt
 80060f6:	9204      	strlt	r2, [sp, #16]
 80060f8:	7823      	ldrb	r3, [r4, #0]
 80060fa:	2b2e      	cmp	r3, #46	; 0x2e
 80060fc:	d10c      	bne.n	8006118 <_svfiprintf_r+0x130>
 80060fe:	7863      	ldrb	r3, [r4, #1]
 8006100:	2b2a      	cmp	r3, #42	; 0x2a
 8006102:	d135      	bne.n	8006170 <_svfiprintf_r+0x188>
 8006104:	9b03      	ldr	r3, [sp, #12]
 8006106:	1d1a      	adds	r2, r3, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	9203      	str	r2, [sp, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	bfb8      	it	lt
 8006110:	f04f 33ff 	movlt.w	r3, #4294967295
 8006114:	3402      	adds	r4, #2
 8006116:	9305      	str	r3, [sp, #20]
 8006118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061e4 <_svfiprintf_r+0x1fc>
 800611c:	7821      	ldrb	r1, [r4, #0]
 800611e:	2203      	movs	r2, #3
 8006120:	4650      	mov	r0, sl
 8006122:	f7fa f85d 	bl	80001e0 <memchr>
 8006126:	b140      	cbz	r0, 800613a <_svfiprintf_r+0x152>
 8006128:	2340      	movs	r3, #64	; 0x40
 800612a:	eba0 000a 	sub.w	r0, r0, sl
 800612e:	fa03 f000 	lsl.w	r0, r3, r0
 8006132:	9b04      	ldr	r3, [sp, #16]
 8006134:	4303      	orrs	r3, r0
 8006136:	3401      	adds	r4, #1
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800613e:	4826      	ldr	r0, [pc, #152]	; (80061d8 <_svfiprintf_r+0x1f0>)
 8006140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006144:	2206      	movs	r2, #6
 8006146:	f7fa f84b 	bl	80001e0 <memchr>
 800614a:	2800      	cmp	r0, #0
 800614c:	d038      	beq.n	80061c0 <_svfiprintf_r+0x1d8>
 800614e:	4b23      	ldr	r3, [pc, #140]	; (80061dc <_svfiprintf_r+0x1f4>)
 8006150:	bb1b      	cbnz	r3, 800619a <_svfiprintf_r+0x1b2>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	3307      	adds	r3, #7
 8006156:	f023 0307 	bic.w	r3, r3, #7
 800615a:	3308      	adds	r3, #8
 800615c:	9303      	str	r3, [sp, #12]
 800615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006160:	4433      	add	r3, r6
 8006162:	9309      	str	r3, [sp, #36]	; 0x24
 8006164:	e767      	b.n	8006036 <_svfiprintf_r+0x4e>
 8006166:	fb0c 3202 	mla	r2, ip, r2, r3
 800616a:	460c      	mov	r4, r1
 800616c:	2001      	movs	r0, #1
 800616e:	e7a5      	b.n	80060bc <_svfiprintf_r+0xd4>
 8006170:	2300      	movs	r3, #0
 8006172:	3401      	adds	r4, #1
 8006174:	9305      	str	r3, [sp, #20]
 8006176:	4619      	mov	r1, r3
 8006178:	f04f 0c0a 	mov.w	ip, #10
 800617c:	4620      	mov	r0, r4
 800617e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006182:	3a30      	subs	r2, #48	; 0x30
 8006184:	2a09      	cmp	r2, #9
 8006186:	d903      	bls.n	8006190 <_svfiprintf_r+0x1a8>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0c5      	beq.n	8006118 <_svfiprintf_r+0x130>
 800618c:	9105      	str	r1, [sp, #20]
 800618e:	e7c3      	b.n	8006118 <_svfiprintf_r+0x130>
 8006190:	fb0c 2101 	mla	r1, ip, r1, r2
 8006194:	4604      	mov	r4, r0
 8006196:	2301      	movs	r3, #1
 8006198:	e7f0      	b.n	800617c <_svfiprintf_r+0x194>
 800619a:	ab03      	add	r3, sp, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	462a      	mov	r2, r5
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <_svfiprintf_r+0x1f8>)
 80061a2:	a904      	add	r1, sp, #16
 80061a4:	4638      	mov	r0, r7
 80061a6:	f3af 8000 	nop.w
 80061aa:	1c42      	adds	r2, r0, #1
 80061ac:	4606      	mov	r6, r0
 80061ae:	d1d6      	bne.n	800615e <_svfiprintf_r+0x176>
 80061b0:	89ab      	ldrh	r3, [r5, #12]
 80061b2:	065b      	lsls	r3, r3, #25
 80061b4:	f53f af2c 	bmi.w	8006010 <_svfiprintf_r+0x28>
 80061b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ba:	b01d      	add	sp, #116	; 0x74
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c0:	ab03      	add	r3, sp, #12
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	462a      	mov	r2, r5
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <_svfiprintf_r+0x1f8>)
 80061c8:	a904      	add	r1, sp, #16
 80061ca:	4638      	mov	r0, r7
 80061cc:	f000 f87a 	bl	80062c4 <_printf_i>
 80061d0:	e7eb      	b.n	80061aa <_svfiprintf_r+0x1c2>
 80061d2:	bf00      	nop
 80061d4:	0800693d 	.word	0x0800693d
 80061d8:	08006947 	.word	0x08006947
 80061dc:	00000000 	.word	0x00000000
 80061e0:	08005f31 	.word	0x08005f31
 80061e4:	08006943 	.word	0x08006943

080061e8 <_printf_common>:
 80061e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	4616      	mov	r6, r2
 80061ee:	4699      	mov	r9, r3
 80061f0:	688a      	ldr	r2, [r1, #8]
 80061f2:	690b      	ldr	r3, [r1, #16]
 80061f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061f8:	4293      	cmp	r3, r2
 80061fa:	bfb8      	it	lt
 80061fc:	4613      	movlt	r3, r2
 80061fe:	6033      	str	r3, [r6, #0]
 8006200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006204:	4607      	mov	r7, r0
 8006206:	460c      	mov	r4, r1
 8006208:	b10a      	cbz	r2, 800620e <_printf_common+0x26>
 800620a:	3301      	adds	r3, #1
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	0699      	lsls	r1, r3, #26
 8006212:	bf42      	ittt	mi
 8006214:	6833      	ldrmi	r3, [r6, #0]
 8006216:	3302      	addmi	r3, #2
 8006218:	6033      	strmi	r3, [r6, #0]
 800621a:	6825      	ldr	r5, [r4, #0]
 800621c:	f015 0506 	ands.w	r5, r5, #6
 8006220:	d106      	bne.n	8006230 <_printf_common+0x48>
 8006222:	f104 0a19 	add.w	sl, r4, #25
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	6832      	ldr	r2, [r6, #0]
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	42ab      	cmp	r3, r5
 800622e:	dc26      	bgt.n	800627e <_printf_common+0x96>
 8006230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006234:	1e13      	subs	r3, r2, #0
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	bf18      	it	ne
 800623a:	2301      	movne	r3, #1
 800623c:	0692      	lsls	r2, r2, #26
 800623e:	d42b      	bmi.n	8006298 <_printf_common+0xb0>
 8006240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006244:	4649      	mov	r1, r9
 8006246:	4638      	mov	r0, r7
 8006248:	47c0      	blx	r8
 800624a:	3001      	adds	r0, #1
 800624c:	d01e      	beq.n	800628c <_printf_common+0xa4>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	68e5      	ldr	r5, [r4, #12]
 8006252:	6832      	ldr	r2, [r6, #0]
 8006254:	f003 0306 	and.w	r3, r3, #6
 8006258:	2b04      	cmp	r3, #4
 800625a:	bf08      	it	eq
 800625c:	1aad      	subeq	r5, r5, r2
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	bf0c      	ite	eq
 8006264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006268:	2500      	movne	r5, #0
 800626a:	4293      	cmp	r3, r2
 800626c:	bfc4      	itt	gt
 800626e:	1a9b      	subgt	r3, r3, r2
 8006270:	18ed      	addgt	r5, r5, r3
 8006272:	2600      	movs	r6, #0
 8006274:	341a      	adds	r4, #26
 8006276:	42b5      	cmp	r5, r6
 8006278:	d11a      	bne.n	80062b0 <_printf_common+0xc8>
 800627a:	2000      	movs	r0, #0
 800627c:	e008      	b.n	8006290 <_printf_common+0xa8>
 800627e:	2301      	movs	r3, #1
 8006280:	4652      	mov	r2, sl
 8006282:	4649      	mov	r1, r9
 8006284:	4638      	mov	r0, r7
 8006286:	47c0      	blx	r8
 8006288:	3001      	adds	r0, #1
 800628a:	d103      	bne.n	8006294 <_printf_common+0xac>
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006294:	3501      	adds	r5, #1
 8006296:	e7c6      	b.n	8006226 <_printf_common+0x3e>
 8006298:	18e1      	adds	r1, r4, r3
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	2030      	movs	r0, #48	; 0x30
 800629e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062a2:	4422      	add	r2, r4
 80062a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062ac:	3302      	adds	r3, #2
 80062ae:	e7c7      	b.n	8006240 <_printf_common+0x58>
 80062b0:	2301      	movs	r3, #1
 80062b2:	4622      	mov	r2, r4
 80062b4:	4649      	mov	r1, r9
 80062b6:	4638      	mov	r0, r7
 80062b8:	47c0      	blx	r8
 80062ba:	3001      	adds	r0, #1
 80062bc:	d0e6      	beq.n	800628c <_printf_common+0xa4>
 80062be:	3601      	adds	r6, #1
 80062c0:	e7d9      	b.n	8006276 <_printf_common+0x8e>
	...

080062c4 <_printf_i>:
 80062c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	7e0f      	ldrb	r7, [r1, #24]
 80062ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062cc:	2f78      	cmp	r7, #120	; 0x78
 80062ce:	4691      	mov	r9, r2
 80062d0:	4680      	mov	r8, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	469a      	mov	sl, r3
 80062d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062da:	d807      	bhi.n	80062ec <_printf_i+0x28>
 80062dc:	2f62      	cmp	r7, #98	; 0x62
 80062de:	d80a      	bhi.n	80062f6 <_printf_i+0x32>
 80062e0:	2f00      	cmp	r7, #0
 80062e2:	f000 80d8 	beq.w	8006496 <_printf_i+0x1d2>
 80062e6:	2f58      	cmp	r7, #88	; 0x58
 80062e8:	f000 80a3 	beq.w	8006432 <_printf_i+0x16e>
 80062ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062f4:	e03a      	b.n	800636c <_printf_i+0xa8>
 80062f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062fa:	2b15      	cmp	r3, #21
 80062fc:	d8f6      	bhi.n	80062ec <_printf_i+0x28>
 80062fe:	a101      	add	r1, pc, #4	; (adr r1, 8006304 <_printf_i+0x40>)
 8006300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006304:	0800635d 	.word	0x0800635d
 8006308:	08006371 	.word	0x08006371
 800630c:	080062ed 	.word	0x080062ed
 8006310:	080062ed 	.word	0x080062ed
 8006314:	080062ed 	.word	0x080062ed
 8006318:	080062ed 	.word	0x080062ed
 800631c:	08006371 	.word	0x08006371
 8006320:	080062ed 	.word	0x080062ed
 8006324:	080062ed 	.word	0x080062ed
 8006328:	080062ed 	.word	0x080062ed
 800632c:	080062ed 	.word	0x080062ed
 8006330:	0800647d 	.word	0x0800647d
 8006334:	080063a1 	.word	0x080063a1
 8006338:	0800645f 	.word	0x0800645f
 800633c:	080062ed 	.word	0x080062ed
 8006340:	080062ed 	.word	0x080062ed
 8006344:	0800649f 	.word	0x0800649f
 8006348:	080062ed 	.word	0x080062ed
 800634c:	080063a1 	.word	0x080063a1
 8006350:	080062ed 	.word	0x080062ed
 8006354:	080062ed 	.word	0x080062ed
 8006358:	08006467 	.word	0x08006467
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	602a      	str	r2, [r5, #0]
 8006364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800636c:	2301      	movs	r3, #1
 800636e:	e0a3      	b.n	80064b8 <_printf_i+0x1f4>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	6829      	ldr	r1, [r5, #0]
 8006374:	0606      	lsls	r6, r0, #24
 8006376:	f101 0304 	add.w	r3, r1, #4
 800637a:	d50a      	bpl.n	8006392 <_printf_i+0xce>
 800637c:	680e      	ldr	r6, [r1, #0]
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	2e00      	cmp	r6, #0
 8006382:	da03      	bge.n	800638c <_printf_i+0xc8>
 8006384:	232d      	movs	r3, #45	; 0x2d
 8006386:	4276      	negs	r6, r6
 8006388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638c:	485e      	ldr	r0, [pc, #376]	; (8006508 <_printf_i+0x244>)
 800638e:	230a      	movs	r3, #10
 8006390:	e019      	b.n	80063c6 <_printf_i+0x102>
 8006392:	680e      	ldr	r6, [r1, #0]
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800639a:	bf18      	it	ne
 800639c:	b236      	sxthne	r6, r6
 800639e:	e7ef      	b.n	8006380 <_printf_i+0xbc>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	6820      	ldr	r0, [r4, #0]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	6029      	str	r1, [r5, #0]
 80063a8:	0601      	lsls	r1, r0, #24
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0xec>
 80063ac:	681e      	ldr	r6, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <_printf_i+0xf2>
 80063b0:	0646      	lsls	r6, r0, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0xe8>
 80063b4:	881e      	ldrh	r6, [r3, #0]
 80063b6:	4854      	ldr	r0, [pc, #336]	; (8006508 <_printf_i+0x244>)
 80063b8:	2f6f      	cmp	r7, #111	; 0x6f
 80063ba:	bf0c      	ite	eq
 80063bc:	2308      	moveq	r3, #8
 80063be:	230a      	movne	r3, #10
 80063c0:	2100      	movs	r1, #0
 80063c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063c6:	6865      	ldr	r5, [r4, #4]
 80063c8:	60a5      	str	r5, [r4, #8]
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	bfa2      	ittt	ge
 80063ce:	6821      	ldrge	r1, [r4, #0]
 80063d0:	f021 0104 	bicge.w	r1, r1, #4
 80063d4:	6021      	strge	r1, [r4, #0]
 80063d6:	b90e      	cbnz	r6, 80063dc <_printf_i+0x118>
 80063d8:	2d00      	cmp	r5, #0
 80063da:	d04d      	beq.n	8006478 <_printf_i+0x1b4>
 80063dc:	4615      	mov	r5, r2
 80063de:	fbb6 f1f3 	udiv	r1, r6, r3
 80063e2:	fb03 6711 	mls	r7, r3, r1, r6
 80063e6:	5dc7      	ldrb	r7, [r0, r7]
 80063e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063ec:	4637      	mov	r7, r6
 80063ee:	42bb      	cmp	r3, r7
 80063f0:	460e      	mov	r6, r1
 80063f2:	d9f4      	bls.n	80063de <_printf_i+0x11a>
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d10b      	bne.n	8006410 <_printf_i+0x14c>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07de      	lsls	r6, r3, #31
 80063fc:	d508      	bpl.n	8006410 <_printf_i+0x14c>
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	6861      	ldr	r1, [r4, #4]
 8006402:	4299      	cmp	r1, r3
 8006404:	bfde      	ittt	le
 8006406:	2330      	movle	r3, #48	; 0x30
 8006408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800640c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006410:	1b52      	subs	r2, r2, r5
 8006412:	6122      	str	r2, [r4, #16]
 8006414:	f8cd a000 	str.w	sl, [sp]
 8006418:	464b      	mov	r3, r9
 800641a:	aa03      	add	r2, sp, #12
 800641c:	4621      	mov	r1, r4
 800641e:	4640      	mov	r0, r8
 8006420:	f7ff fee2 	bl	80061e8 <_printf_common>
 8006424:	3001      	adds	r0, #1
 8006426:	d14c      	bne.n	80064c2 <_printf_i+0x1fe>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	b004      	add	sp, #16
 800642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006432:	4835      	ldr	r0, [pc, #212]	; (8006508 <_printf_i+0x244>)
 8006434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006438:	6829      	ldr	r1, [r5, #0]
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006440:	6029      	str	r1, [r5, #0]
 8006442:	061d      	lsls	r5, r3, #24
 8006444:	d514      	bpl.n	8006470 <_printf_i+0x1ac>
 8006446:	07df      	lsls	r7, r3, #31
 8006448:	bf44      	itt	mi
 800644a:	f043 0320 	orrmi.w	r3, r3, #32
 800644e:	6023      	strmi	r3, [r4, #0]
 8006450:	b91e      	cbnz	r6, 800645a <_printf_i+0x196>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	f023 0320 	bic.w	r3, r3, #32
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	2310      	movs	r3, #16
 800645c:	e7b0      	b.n	80063c0 <_printf_i+0xfc>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	f043 0320 	orr.w	r3, r3, #32
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	2378      	movs	r3, #120	; 0x78
 8006468:	4828      	ldr	r0, [pc, #160]	; (800650c <_printf_i+0x248>)
 800646a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800646e:	e7e3      	b.n	8006438 <_printf_i+0x174>
 8006470:	0659      	lsls	r1, r3, #25
 8006472:	bf48      	it	mi
 8006474:	b2b6      	uxthmi	r6, r6
 8006476:	e7e6      	b.n	8006446 <_printf_i+0x182>
 8006478:	4615      	mov	r5, r2
 800647a:	e7bb      	b.n	80063f4 <_printf_i+0x130>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	6826      	ldr	r6, [r4, #0]
 8006480:	6961      	ldr	r1, [r4, #20]
 8006482:	1d18      	adds	r0, r3, #4
 8006484:	6028      	str	r0, [r5, #0]
 8006486:	0635      	lsls	r5, r6, #24
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	d501      	bpl.n	8006490 <_printf_i+0x1cc>
 800648c:	6019      	str	r1, [r3, #0]
 800648e:	e002      	b.n	8006496 <_printf_i+0x1d2>
 8006490:	0670      	lsls	r0, r6, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0x1c8>
 8006494:	8019      	strh	r1, [r3, #0]
 8006496:	2300      	movs	r3, #0
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	4615      	mov	r5, r2
 800649c:	e7ba      	b.n	8006414 <_printf_i+0x150>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	1d1a      	adds	r2, r3, #4
 80064a2:	602a      	str	r2, [r5, #0]
 80064a4:	681d      	ldr	r5, [r3, #0]
 80064a6:	6862      	ldr	r2, [r4, #4]
 80064a8:	2100      	movs	r1, #0
 80064aa:	4628      	mov	r0, r5
 80064ac:	f7f9 fe98 	bl	80001e0 <memchr>
 80064b0:	b108      	cbz	r0, 80064b6 <_printf_i+0x1f2>
 80064b2:	1b40      	subs	r0, r0, r5
 80064b4:	6060      	str	r0, [r4, #4]
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	2300      	movs	r3, #0
 80064bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c0:	e7a8      	b.n	8006414 <_printf_i+0x150>
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	462a      	mov	r2, r5
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d0ab      	beq.n	8006428 <_printf_i+0x164>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	079b      	lsls	r3, r3, #30
 80064d4:	d413      	bmi.n	80064fe <_printf_i+0x23a>
 80064d6:	68e0      	ldr	r0, [r4, #12]
 80064d8:	9b03      	ldr	r3, [sp, #12]
 80064da:	4298      	cmp	r0, r3
 80064dc:	bfb8      	it	lt
 80064de:	4618      	movlt	r0, r3
 80064e0:	e7a4      	b.n	800642c <_printf_i+0x168>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4632      	mov	r2, r6
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	47d0      	blx	sl
 80064ec:	3001      	adds	r0, #1
 80064ee:	d09b      	beq.n	8006428 <_printf_i+0x164>
 80064f0:	3501      	adds	r5, #1
 80064f2:	68e3      	ldr	r3, [r4, #12]
 80064f4:	9903      	ldr	r1, [sp, #12]
 80064f6:	1a5b      	subs	r3, r3, r1
 80064f8:	42ab      	cmp	r3, r5
 80064fa:	dcf2      	bgt.n	80064e2 <_printf_i+0x21e>
 80064fc:	e7eb      	b.n	80064d6 <_printf_i+0x212>
 80064fe:	2500      	movs	r5, #0
 8006500:	f104 0619 	add.w	r6, r4, #25
 8006504:	e7f5      	b.n	80064f2 <_printf_i+0x22e>
 8006506:	bf00      	nop
 8006508:	0800694e 	.word	0x0800694e
 800650c:	0800695f 	.word	0x0800695f

08006510 <__retarget_lock_acquire_recursive>:
 8006510:	4770      	bx	lr

08006512 <__retarget_lock_release_recursive>:
 8006512:	4770      	bx	lr

08006514 <memcpy>:
 8006514:	440a      	add	r2, r1
 8006516:	4291      	cmp	r1, r2
 8006518:	f100 33ff 	add.w	r3, r0, #4294967295
 800651c:	d100      	bne.n	8006520 <memcpy+0xc>
 800651e:	4770      	bx	lr
 8006520:	b510      	push	{r4, lr}
 8006522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800652a:	4291      	cmp	r1, r2
 800652c:	d1f9      	bne.n	8006522 <memcpy+0xe>
 800652e:	bd10      	pop	{r4, pc}

08006530 <memmove>:
 8006530:	4288      	cmp	r0, r1
 8006532:	b510      	push	{r4, lr}
 8006534:	eb01 0402 	add.w	r4, r1, r2
 8006538:	d902      	bls.n	8006540 <memmove+0x10>
 800653a:	4284      	cmp	r4, r0
 800653c:	4623      	mov	r3, r4
 800653e:	d807      	bhi.n	8006550 <memmove+0x20>
 8006540:	1e43      	subs	r3, r0, #1
 8006542:	42a1      	cmp	r1, r4
 8006544:	d008      	beq.n	8006558 <memmove+0x28>
 8006546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800654a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800654e:	e7f8      	b.n	8006542 <memmove+0x12>
 8006550:	4402      	add	r2, r0
 8006552:	4601      	mov	r1, r0
 8006554:	428a      	cmp	r2, r1
 8006556:	d100      	bne.n	800655a <memmove+0x2a>
 8006558:	bd10      	pop	{r4, pc}
 800655a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800655e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006562:	e7f7      	b.n	8006554 <memmove+0x24>

08006564 <_realloc_r>:
 8006564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006568:	4680      	mov	r8, r0
 800656a:	4614      	mov	r4, r2
 800656c:	460e      	mov	r6, r1
 800656e:	b921      	cbnz	r1, 800657a <_realloc_r+0x16>
 8006570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006574:	4611      	mov	r1, r2
 8006576:	f7ff bbf7 	b.w	8005d68 <_malloc_r>
 800657a:	b92a      	cbnz	r2, 8006588 <_realloc_r+0x24>
 800657c:	f7ff fb88 	bl	8005c90 <_free_r>
 8006580:	4625      	mov	r5, r4
 8006582:	4628      	mov	r0, r5
 8006584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006588:	f000 f81b 	bl	80065c2 <_malloc_usable_size_r>
 800658c:	4284      	cmp	r4, r0
 800658e:	4607      	mov	r7, r0
 8006590:	d802      	bhi.n	8006598 <_realloc_r+0x34>
 8006592:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006596:	d812      	bhi.n	80065be <_realloc_r+0x5a>
 8006598:	4621      	mov	r1, r4
 800659a:	4640      	mov	r0, r8
 800659c:	f7ff fbe4 	bl	8005d68 <_malloc_r>
 80065a0:	4605      	mov	r5, r0
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0ed      	beq.n	8006582 <_realloc_r+0x1e>
 80065a6:	42bc      	cmp	r4, r7
 80065a8:	4622      	mov	r2, r4
 80065aa:	4631      	mov	r1, r6
 80065ac:	bf28      	it	cs
 80065ae:	463a      	movcs	r2, r7
 80065b0:	f7ff ffb0 	bl	8006514 <memcpy>
 80065b4:	4631      	mov	r1, r6
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7ff fb6a 	bl	8005c90 <_free_r>
 80065bc:	e7e1      	b.n	8006582 <_realloc_r+0x1e>
 80065be:	4635      	mov	r5, r6
 80065c0:	e7df      	b.n	8006582 <_realloc_r+0x1e>

080065c2 <_malloc_usable_size_r>:
 80065c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065c6:	1f18      	subs	r0, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfbc      	itt	lt
 80065cc:	580b      	ldrlt	r3, [r1, r0]
 80065ce:	18c0      	addlt	r0, r0, r3
 80065d0:	4770      	bx	lr
	...

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr

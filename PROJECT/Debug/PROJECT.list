
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08007648  08007648  00017648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba4  08007ba4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bac  08007bac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001dc  08007d90  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08007d90  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5fd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002330  00000000  00000000  0002d809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00030670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002100d  00000000  00000000  000310a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000debd  00000000  00000000  000520b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0a84  00000000  00000000  0005ff72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001209f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  00120a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007630 	.word	0x08007630

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007630 	.word	0x08007630

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <DataTosend>:
//float adcdata=40.6;



void DataTosend(int rtcdatedata,int rtctimedata,float adcdata)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b096      	sub	sp, #88	; 0x58
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	ed87 0a01 	vstr	s0, [r7, #4]
	char RTC_date_data[20];
	char RTC_time_data[20];
	char ADC_data[20];
	//DataToGsm(data);
	snprintf(RTC_date_data, sizeof(RTC_date_data), "%d", rtcdatedata);
 8000eba:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <DataTosend+0x60>)
 8000ec2:	2114      	movs	r1, #20
 8000ec4:	f004 f928 	bl	8005118 <sniprintf>
	snprintf(RTC_time_data, sizeof(RTC_time_data), "%d", rtctimedata);
 8000ec8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <DataTosend+0x60>)
 8000ed0:	2114      	movs	r1, #20
 8000ed2:	f004 f921 	bl	8005118 <sniprintf>
	snprintf(ADC_data, sizeof(ADC_data), "%.2f", adcdata);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fb36 	bl	8000548 <__aeabi_f2d>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	f107 0014 	add.w	r0, r7, #20
 8000ee4:	e9cd 2300 	strd	r2, r3, [sp]
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <DataTosend+0x64>)
 8000eea:	2114      	movs	r1, #20
 8000eec:	f004 f914 	bl	8005118 <sniprintf>
//	HAL_Delay(5000);
//	DataToCloud(1,RTC_time_data);
//	HAL_Delay(5000);
//	DataToCloud(2,ADC_cloud_data);
//	HAL_Delay(5000);
	DataToCloud(RTC_date_data,RTC_time_data,ADC_data);
 8000ef0:	f107 0214 	add.w	r2, r7, #20
 8000ef4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ef8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f8bb 	bl	8001078 <DataToCloud>


}
 8000f02:	bf00      	nop
 8000f04:	3750      	adds	r7, #80	; 0x50
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	08007648 	.word	0x08007648
 8000f10:	0800764c 	.word	0x0800764c

08000f14 <UART1_Init>:

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void UART1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <UART1_Init+0x58>)
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <UART1_Init+0x5c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <UART1_Init+0x58>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <UART1_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <UART1_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <UART1_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <UART1_Init+0x58>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <UART1_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <UART1_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <UART1_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <UART1_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <UART1_Init+0x58>)
 8000f58:	f002 f8b4 	bl	80030c4 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <UART1_Init+0x52>
  {
    Error_Handler();
 8000f62:	f000 f967 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000025c 	.word	0x2000025c
 8000f70:	40013800 	.word	0x40013800

08000f74 <UART2_Init>:


void UART2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <UART2_Init+0x58>)
 8000f7a:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <UART2_Init+0x5c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <UART2_Init+0x58>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <UART2_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <UART2_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <UART2_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <UART2_Init+0x58>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <UART2_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <UART2_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <UART2_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <UART2_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <UART2_Init+0x58>)
 8000fb8:	f002 f884 	bl	80030c4 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <UART2_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f000 f937 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200002e0 	.word	0x200002e0
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <GsmCommands>:


void GsmCommands(uint8_t* cmd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit_IT(&huart2, cmd, strlen(cmd));
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f8f7 	bl	80001d0 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <GsmCommands+0x4c>)
 8000fec:	f002 f8b8 	bl	8003160 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 8000ff0:	2264      	movs	r2, #100	; 0x64
 8000ff2:	490c      	ldr	r1, [pc, #48]	; (8001024 <GsmCommands+0x50>)
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <GsmCommands+0x4c>)
 8000ff6:	f002 f921 	bl	800323c <HAL_UART_Receive_IT>
	 HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffe:	f000 fb9f 	bl	8001740 <HAL_Delay>
	 HAL_UART_Transmit_IT(&huart1, Reply, strlen(Reply));
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <GsmCommands+0x50>)
 8001004:	f7ff f8e4 	bl	80001d0 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	4905      	ldr	r1, [pc, #20]	; (8001024 <GsmCommands+0x50>)
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <GsmCommands+0x54>)
 8001012:	f002 f8a5 	bl	8003160 <HAL_UART_Transmit_IT>


}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200002e0 	.word	0x200002e0
 8001024:	200001f8 	.word	0x200001f8
 8001028:	2000025c 	.word	0x2000025c

0800102c <Gsm_Init>:



void Gsm_Init()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 8001030:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001034:	f000 fb84 	bl	8001740 <HAL_Delay>
//	          HAL_Delay(1000);


	          //send data to thingspeak

	                    GsmCommands((uint8_t*)"AT\r\n");
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <Gsm_Init+0x34>)
 800103a:	f7ff ffcb 	bl	8000fd4 <GsmCommands>
//	                    HAL_Delay(2000);
	                    GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <Gsm_Init+0x38>)
 8001040:	f7ff ffc8 	bl	8000fd4 <GsmCommands>
//	                    HAL_Delay(2000);
	                    GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <Gsm_Init+0x3c>)
 8001046:	f7ff ffc5 	bl	8000fd4 <GsmCommands>
//	                    HAL_Delay(2000);
	                    GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <Gsm_Init+0x40>)
 800104c:	f7ff ffc2 	bl	8000fd4 <GsmCommands>
//	                    HAL_Delay(2000);
	                    GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <Gsm_Init+0x44>)
 8001052:	f7ff ffbf 	bl	8000fd4 <GsmCommands>
//	                    HAL_Delay(2000);
	                    GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <Gsm_Init+0x48>)
 8001058:	f7ff ffbc 	bl	8000fd4 <GsmCommands>
//	                    HAL_Delay(2000);
//	                    GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
//	                    HAL_Delay(2000);


}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	08007654 	.word	0x08007654
 8001064:	0800765c 	.word	0x0800765c
 8001068:	08007668 	.word	0x08007668
 800106c:	08007674 	.word	0x08007674
 8001070:	08007684 	.word	0x08007684
 8001074:	080076a4 	.word	0x080076a4

08001078 <DataToCloud>:
	GsmCommands((uint8_t*)ch);
}

//DataToCloud(RTC_date_data,RTC_time_data,ADC_data);
void DataToCloud(uint8_t* RTC_date_data,uint8_t* RTC_time_data,uint8_t* adc_data)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0c6      	sub	sp, #280	; 0x118
 800107c:	af02      	add	r7, sp, #8
 800107e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800108c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001090:	6019      	str	r1, [r3, #0]
 8001092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001096:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800109a:	601a      	str	r2, [r3, #0]
			char AT_RTCcloud_data[256];

				//	RTCdata_to_cloud

//				 GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
				 GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <DataToCloud+0x74>)
 800109e:	f7ff ff99 	bl	8000fd4 <GsmCommands>

//					snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data), "AT+HTTPPARA=\"URL\",\https://api.thingspeak.com/update?api_key=Y1KDSHTWPIVWKUFJ&field%d=%s\"\r\n",field,cloud_data);

					snprintf(AT_RTCcloud_data,sizeof(AT_RTCcloud_data), "AT+HTTPPARA=\"URL\",\https://script.google.com/macros/s/AKfycbyqqjCHXcKWwFu4uCEfpEd_f2WFQiKbyG084cx9PSkYiwnDwenu58b_lH7QTOjnUJMlww/exec?field1=%s&field2=%s&field3=%s\"\r\n",RTC_date_data,RTC_time_data,adc_data);
 80010a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80010a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80010aa:	f107 0010 	add.w	r0, r7, #16
 80010ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010b2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010be:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	9200      	str	r2, [sp, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <DataToCloud+0x78>)
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	f004 f823 	bl	8005118 <sniprintf>
					GsmCommands((uint8_t*)AT_RTCcloud_data);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff7c 	bl	8000fd4 <GsmCommands>
					 GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <DataToCloud+0x7c>)
 80010de:	f7ff ff79 	bl	8000fd4 <GsmCommands>

}
 80010e2:	bf00      	nop
 80010e4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	080076b4 	.word	0x080076b4
 80010f0:	080076c4 	.word	0x080076c4
 80010f4:	0800776c 	.word	0x0800776c

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 faab 	bl	8001656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f812 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001104:	f000 f872 	bl	80011ec <MX_GPIO_Init>
//  MX_USART2_UART_Init();
//  MX_USART1_UART_Init();
  UART1_Init();
 8001108:	f7ff ff04 	bl	8000f14 <UART1_Init>
  UART2_Init();
 800110c:	f7ff ff32 	bl	8000f74 <UART2_Init>
  /* USER CODE BEGIN 2 */

  Gsm_Init();
 8001110:	f7ff ff8c 	bl	800102c <Gsm_Init>
  DataTosend(200,300,400.5);
 8001114:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001124 <main+0x2c>
 8001118:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800111c:	20c8      	movs	r0, #200	; 0xc8
 800111e:	f7ff fec5 	bl	8000eac <DataTosend>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001122:	e7fe      	b.n	8001122 <main+0x2a>
 8001124:	43c84000 	.word	0x43c84000

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b096      	sub	sp, #88	; 0x58
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2244      	movs	r2, #68	; 0x44
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fb7c 	bl	8004834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800114a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800114e:	f000 fe33 	bl	8001db8 <HAL_PWREx_ControlVoltageScaling>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001158:	f000 f86c 	bl	8001234 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800115c:	f000 fe0e 	bl	8001d7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <SystemClock_Config+0xc0>)
 8001162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001166:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <SystemClock_Config+0xc0>)
 8001168:	f023 0318 	bic.w	r3, r3, #24
 800116c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001170:	2314      	movs	r3, #20
 8001172:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001180:	2360      	movs	r3, #96	; 0x60
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001184:	2302      	movs	r3, #2
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001188:	2301      	movs	r3, #1
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001190:	2310      	movs	r3, #16
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001194:	2307      	movs	r3, #7
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fe5d 	bl	8001e64 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b0:	f000 f840 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2303      	movs	r3, #3
 80011ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	2101      	movs	r1, #1
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fa5d 	bl	800268c <HAL_RCC_ClockConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011d8:	f000 f82c 	bl	8001234 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011dc:	f001 fe70 	bl	8002ec0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011e0:	bf00      	nop
 80011e2:	3758      	adds	r7, #88	; 0x58
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_GPIO_Init+0x44>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <MX_GPIO_Init+0x44>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_GPIO_Init+0x44>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_GPIO_Init+0x44>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <MX_GPIO_Init+0x44>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_GPIO_Init+0x44>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_MspInit+0x44>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_MspInit+0x44>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_MspInit+0x44>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x44>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x44>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x44>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0a0      	sub	sp, #128	; 0x80
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	2254      	movs	r2, #84	; 0x54
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fac3 	bl	8004834 <memset>
  if(huart->Instance==USART1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a46      	ldr	r2, [pc, #280]	; (80013cc <HAL_UART_MspInit+0x144>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d140      	bne.n	800133a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fc05 	bl	8002ad4 <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d0:	f7ff ffb0 	bl	8001234 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d8:	4a3d      	ldr	r2, [pc, #244]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012de:	6613      	str	r3, [r2, #96]	; 0x60
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	4a37      	ldr	r2, [pc, #220]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_UART_MspInit+0x148>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001304:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001308:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001316:	2307      	movs	r3, #7
 8001318:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f000 fbc0 	bl	8001aa8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2025      	movs	r0, #37	; 0x25
 800132e:	f000 fb06 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001332:	2025      	movs	r0, #37	; 0x25
 8001334:	f000 fb1f 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001338:	e043      	b.n	80013c2 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <HAL_UART_MspInit+0x14c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d13e      	bne.n	80013c2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fbbf 	bl	8002ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800135c:	f7ff ff6a 	bl	8001234 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_UART_MspInit+0x148>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_UART_MspInit+0x148>)
 8001366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136a:	6593      	str	r3, [r2, #88]	; 0x58
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_UART_MspInit+0x148>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_UART_MspInit+0x148>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_UART_MspInit+0x148>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_UART_MspInit+0x148>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001390:	230c      	movs	r3, #12
 8001392:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a0:	2307      	movs	r3, #7
 80013a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f000 fb7b 	bl	8001aa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2026      	movs	r0, #38	; 0x26
 80013b8:	f000 fac1 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013bc:	2026      	movs	r0, #38	; 0x26
 80013be:	f000 fada 	bl	8001976 <HAL_NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3780      	adds	r7, #128	; 0x80
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40013800 	.word	0x40013800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40004400 	.word	0x40004400

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f96c 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <USART1_IRQHandler+0x10>)
 8001432:	f001 ff59 	bl	80032e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000025c 	.word	0x2000025c

08001440 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USART2_IRQHandler+0x10>)
 8001446:	f001 ff4f 	bl	80032e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002e0 	.word	0x200002e0

08001454 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_kill>:

int _kill(int pid, int sig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800146e:	f003 f9b7 	bl	80047e0 <__errno>
 8001472:	4603      	mov	r3, r0
 8001474:	2216      	movs	r2, #22
 8001476:	601a      	str	r2, [r3, #0]
  return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_exit>:

void _exit (int status)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe7 	bl	8001464 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001496:	e7fe      	b.n	8001496 <_exit+0x12>

08001498 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
  }

  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
  }
  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	605a      	str	r2, [r3, #4]
  return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f003 f91c 	bl	80047e0 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20010000 	.word	0x20010000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000364 	.word	0x20000364
 80015dc:	20000380 	.word	0x20000380

080015e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff ffea 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopForever+0x6>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopForever+0xe>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopForever+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f003 f8db 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001636:	f7ff fd5f 	bl	80010f8 <main>

0800163a <LoopForever>:

LoopForever:
    b LoopForever
 800163a:	e7fe      	b.n	800163a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800163c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001648:	08007bb4 	.word	0x08007bb4
  ldr r2, =_sbss
 800164c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001650:	2000037c 	.word	0x2000037c

08001654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_IRQHandler>

08001656 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f961 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f80e 	bl	8001688 <HAL_InitTick>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	e001      	b.n	800167c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001678:	f7ff fde2 	bl	8001240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167c:	79fb      	ldrb	r3, [r7, #7]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_InitTick+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_InitTick+0x70>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_InitTick+0x6c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f96d 	bl	8001992 <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d809      	bhi.n	80016d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f937 	bl	800193e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0x74>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e007      	b.n	80016e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e004      	b.n	80016e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e001      	b.n	80016e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	20000368 	.word	0x20000368

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000368 	.word	0x20000368

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d008      	beq.n	80019d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2204      	movs	r2, #4
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e022      	b.n	8001a1a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 020e 	bic.w	r2, r2, #14
 80019e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f003 021c 	and.w	r2, r3, #28
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f202 	lsl.w	r2, r1, r2
 8001a06:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d005      	beq.n	8001a4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2204      	movs	r2, #4
 8001a42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e029      	b.n	8001a9e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 020e 	bic.w	r2, r2, #14
 8001a58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f003 021c 	and.w	r2, r3, #28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
    }
  }
  return status;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	e148      	b.n	8001d4a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 813a 	beq.w	8001d44 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d005      	beq.n	8001ae8 <HAL_GPIO_Init+0x40>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d130      	bne.n	8001b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1e:	2201      	movs	r2, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 0201 	and.w	r2, r3, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d017      	beq.n	8001b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d123      	bne.n	8001bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	6939      	ldr	r1, [r7, #16]
 8001bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0203 	and.w	r2, r3, #3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8094 	beq.w	8001d44 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1c:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <HAL_GPIO_Init+0x2c0>)
 8001c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c20:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <HAL_GPIO_Init+0x2c0>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6613      	str	r3, [r2, #96]	; 0x60
 8001c28:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <HAL_GPIO_Init+0x2c0>)
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c34:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <HAL_GPIO_Init+0x2c4>)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c5e:	d00d      	beq.n	8001c7c <HAL_GPIO_Init+0x1d4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a43      	ldr	r2, [pc, #268]	; (8001d70 <HAL_GPIO_Init+0x2c8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_GPIO_Init+0x1d0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a42      	ldr	r2, [pc, #264]	; (8001d74 <HAL_GPIO_Init+0x2cc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_GPIO_Init+0x1cc>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e004      	b.n	8001c7e <HAL_GPIO_Init+0x1d6>
 8001c74:	2307      	movs	r3, #7
 8001c76:	e002      	b.n	8001c7e <HAL_GPIO_Init+0x1d6>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_GPIO_Init+0x1d6>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	f002 0203 	and.w	r2, r2, #3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4093      	lsls	r3, r2
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8e:	4937      	ldr	r1, [pc, #220]	; (8001d6c <HAL_GPIO_Init+0x2c4>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cc0:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cea:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_GPIO_Init+0x2d0>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f aeaf 	bne.w	8001ab8 <HAL_GPIO_Init+0x10>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	48000800 	.word	0x48000800
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40007000 	.word	0x40007000

08001d9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40007000 	.word	0x40007000

08001db8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc6:	d130      	bne.n	8001e2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d038      	beq.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2232      	movs	r2, #50	; 0x32
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9b      	lsrs	r3, r3, #18
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfc:	e002      	b.n	8001e04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e10:	d102      	bne.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f2      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e24:	d110      	bne.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e00f      	b.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e36:	d007      	beq.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	431bde83 	.word	0x431bde83

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	f000 bc02 	b.w	800267c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e78:	4b96      	ldr	r3, [pc, #600]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e82:	4b94      	ldr	r3, [pc, #592]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80e4 	beq.w	8002062 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4c>
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	f040 808b 	bne.w	8001fbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	f040 8087 	bne.w	8001fbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb0:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x64>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e3d9      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x7e>
 8001ed8:	4b7e      	ldr	r3, [pc, #504]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee0:	e005      	b.n	8001eee <HAL_RCC_OscConfig+0x8a>
 8001ee2:	4b7c      	ldr	r3, [pc, #496]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d223      	bcs.n	8001f3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fd8c 	bl	8002a14 <RCC_SetFlashLatencyFromMSIRange>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e3ba      	b.n	800267c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f06:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a72      	ldr	r2, [pc, #456]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b70      	ldr	r3, [pc, #448]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	496d      	ldr	r1, [pc, #436]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	4968      	ldr	r1, [pc, #416]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
 8001f38:	e025      	b.n	8001f86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3a:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a65      	ldr	r2, [pc, #404]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4960      	ldr	r1, [pc, #384]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f58:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	495b      	ldr	r1, [pc, #364]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fd4c 	bl	8002a14 <RCC_SetFlashLatencyFromMSIRange>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e37a      	b.n	800267c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f86:	f000 fc81 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4950      	ldr	r1, [pc, #320]	; (80020d8 <HAL_RCC_OscConfig+0x274>)
 8001f98:	5ccb      	ldrb	r3, [r1, r3]
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	4a4e      	ldr	r2, [pc, #312]	; (80020dc <HAL_RCC_OscConfig+0x278>)
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb6c 	bl	8001688 <HAL_InitTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d052      	beq.n	8002060 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	e35e      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d032      	beq.n	800202c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fba9 	bl	8001728 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fda:	f7ff fba5 	bl	8001728 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e347      	b.n	800267c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a35      	ldr	r2, [pc, #212]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4930      	ldr	r1, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	492b      	ldr	r1, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
 800202a:	e01a      	b.n	8002062 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002038:	f7ff fb76 	bl	8001728 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002040:	f7ff fb72 	bl	8001728 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e314      	b.n	800267c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1dc>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d073      	beq.n	8002156 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x21c>
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d10e      	bne.n	8002098 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d10b      	bne.n	8002098 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d063      	beq.n	8002154 <HAL_RCC_OscConfig+0x2f0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d15f      	bne.n	8002154 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e2f1      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCC_OscConfig+0x24c>
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e025      	b.n	80020fc <HAL_RCC_OscConfig+0x298>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b8:	d114      	bne.n	80020e4 <HAL_RCC_OscConfig+0x280>
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a02      	ldr	r2, [pc, #8]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e013      	b.n	80020fc <HAL_RCC_OscConfig+0x298>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08007780 	.word	0x08007780
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000004 	.word	0x20000004
 80020e4:	4ba0      	ldr	r3, [pc, #640]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a9f      	ldr	r2, [pc, #636]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b9d      	ldr	r3, [pc, #628]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a9c      	ldr	r2, [pc, #624]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fb10 	bl	8001728 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fb0c 	bl	8001728 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e2ae      	b.n	800267c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211e:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x2a8>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fafc 	bl	8001728 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff faf8 	bl	8001728 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e29a      	b.n	800267c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002146:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x2d0>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d060      	beq.n	8002224 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d005      	beq.n	8002174 <HAL_RCC_OscConfig+0x310>
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d119      	bne.n	80021a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d116      	bne.n	80021a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002174:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_OscConfig+0x328>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e277      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	4973      	ldr	r1, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a0:	e040      	b.n	8002224 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d023      	beq.n	80021f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021aa:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7ff fab7 	bl	8001728 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021be:	f7ff fab3 	bl	8001728 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e255      	b.n	800267c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b62      	ldr	r3, [pc, #392]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	495f      	ldr	r1, [pc, #380]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e018      	b.n	8002224 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f2:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a5c      	ldr	r2, [pc, #368]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80021f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7ff fa93 	bl	8001728 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fa8f 	bl	8001728 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e231      	b.n	800267c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03c      	beq.n	80022aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01c      	beq.n	8002272 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff fa6e 	bl	8001728 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fa6a 	bl	8001728 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e20c      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ef      	beq.n	8002250 <HAL_RCC_OscConfig+0x3ec>
 8002270:	e01b      	b.n	80022aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002278:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7ff fa51 	bl	8001728 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228a:	f7ff fa4d 	bl	8001728 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1ef      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ef      	bne.n	800228a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80a6 	beq.w	8002404 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10d      	bne.n	80022e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCC_OscConfig+0x508>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d118      	bne.n	8002322 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f0:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_OscConfig+0x508>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_RCC_OscConfig+0x508>)
 80022f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fa14 	bl	8001728 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7ff fa10 	bl	8001728 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1b2      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_RCC_OscConfig+0x508>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d108      	bne.n	800233c <HAL_RCC_OscConfig+0x4d8>
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800233a:	e029      	b.n	8002390 <HAL_RCC_OscConfig+0x52c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d115      	bne.n	8002370 <HAL_RCC_OscConfig+0x50c>
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	4a07      	ldr	r2, [pc, #28]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	4a03      	ldr	r2, [pc, #12]	; (8002368 <HAL_RCC_OscConfig+0x504>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x52c>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	40007000 	.word	0x40007000
 8002370:	4b9a      	ldr	r3, [pc, #616]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	4a99      	ldr	r2, [pc, #612]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002380:	4b96      	ldr	r3, [pc, #600]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4a95      	ldr	r2, [pc, #596]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d016      	beq.n	80023c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7ff f9c6 	bl	8001728 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7ff f9c2 	bl	8001728 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e162      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b6:	4b89      	ldr	r3, [pc, #548]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ed      	beq.n	80023a0 <HAL_RCC_OscConfig+0x53c>
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7ff f9af 	bl	8001728 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7ff f9ab 	bl	8001728 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e14b      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e4:	4b7d      	ldr	r3, [pc, #500]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1ed      	bne.n	80023ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f8:	4b78      	ldr	r3, [pc, #480]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	4a77      	ldr	r2, [pc, #476]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80023fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002402:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03c      	beq.n	800248a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01c      	beq.n	8002452 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 800241a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241e:	4a6f      	ldr	r2, [pc, #444]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff f97e 	bl	8001728 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002430:	f7ff f97a 	bl	8001728 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e11c      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002442:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCC_OscConfig+0x5cc>
 8002450:	e01b      	b.n	800248a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002452:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002458:	4a60      	ldr	r2, [pc, #384]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7ff f961 	bl	8001728 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246a:	f7ff f95d 	bl	8001728 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0ff      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800247c:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 800247e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80f3 	beq.w	800267a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	2b02      	cmp	r3, #2
 800249a:	f040 80c9 	bne.w	8002630 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800249e:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0203 	and.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d12c      	bne.n	800250c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	3b01      	subs	r3, #1
 80024be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d123      	bne.n	800250c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d11b      	bne.n	800250c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d113      	bne.n	800250c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	3b01      	subs	r3, #1
 80024f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d109      	bne.n	800250c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	3b01      	subs	r3, #1
 8002506:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d06b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d062      	beq.n	80025d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0ac      	b.n	800267c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002522:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800252e:	f7ff f8fb 	bl	8001728 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff f8f7 	bl	8001728 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e099      	b.n	800267c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_RCC_OscConfig+0x77c>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002564:	3a01      	subs	r2, #1
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	4311      	orrs	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800256e:	0212      	lsls	r2, r2, #8
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002576:	0852      	lsrs	r2, r2, #1
 8002578:	3a01      	subs	r2, #1
 800257a:	0552      	lsls	r2, r2, #21
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0652      	lsls	r2, r2, #25
 8002588:	4311      	orrs	r1, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800258e:	06d2      	lsls	r2, r2, #27
 8002590:	430a      	orrs	r2, r1
 8002592:	4912      	ldr	r1, [pc, #72]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 8002594:	4313      	orrs	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002598:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 800259e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b0:	f7ff f8ba 	bl	8001728 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7ff f8b6 	bl	8001728 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e058      	b.n	800267c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <HAL_RCC_OscConfig+0x778>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d6:	e050      	b.n	800267a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e04f      	b.n	800267c <HAL_RCC_OscConfig+0x818>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d144      	bne.n	800267a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a20      	ldr	r2, [pc, #128]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002608:	f7ff f88e 	bl	8001728 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7ff f88a 	bl	8001728 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e02c      	b.n	800267c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x7ac>
 800262e:	e024      	b.n	800267a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d01f      	beq.n	8002676 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 800263c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff f871 	bl	8001728 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff f86d 	bl	8001728 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e00f      	b.n	800267c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	4905      	ldr	r1, [pc, #20]	; (8002684 <HAL_RCC_OscConfig+0x820>)
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCC_OscConfig+0x824>)
 8002670:	4013      	ands	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
 8002674:	e001      	b.n	800267a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	feeefffc 	.word	0xfeeefffc

0800268c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0e7      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b75      	ldr	r3, [pc, #468]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d910      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	4970      	ldr	r1, [pc, #448]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b6e      	ldr	r3, [pc, #440]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0cf      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b66      	ldr	r3, [pc, #408]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d908      	bls.n	80026fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4960      	ldr	r1, [pc, #384]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d04c      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	4b5a      	ldr	r3, [pc, #360]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d121      	bne.n	8002762 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0a6      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800272a:	4b54      	ldr	r3, [pc, #336]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d115      	bne.n	8002762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e09a      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002742:	4b4e      	ldr	r3, [pc, #312]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e08e      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e086      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b46      	ldr	r3, [pc, #280]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4943      	ldr	r1, [pc, #268]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002774:	f7fe ffd8 	bl	8001728 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7fe ffd4 	bl	8001728 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e06e      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b3a      	ldr	r3, [pc, #232]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d010      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	4b31      	ldr	r3, [pc, #196]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027bc:	429a      	cmp	r2, r3
 80027be:	d208      	bcs.n	80027d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	492b      	ldr	r1, [pc, #172]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d210      	bcs.n	8002802 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0207 	bic.w	r2, r3, #7
 80027e8:	4923      	ldr	r1, [pc, #140]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_ClockConfig+0x1ec>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e036      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4918      	ldr	r1, [pc, #96]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4910      	ldr	r1, [pc, #64]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002840:	f000 f824 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	490b      	ldr	r1, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1f4>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1f8>)
 800285e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1fc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe ff0f 	bl	8001688 <HAL_InitTick>
 800286a:	4603      	mov	r3, r0
 800286c:	72fb      	strb	r3, [r7, #11]

  return status;
 800286e:	7afb      	ldrb	r3, [r7, #11]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	08007780 	.word	0x08007780
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x34>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d121      	bne.n	80028fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d11e      	bne.n	80028fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028c0:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e005      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028dc:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028e8:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10d      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d102      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_GetSysClockFreq+0x110>)
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e004      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d101      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002912:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d134      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0xa6>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d003      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0xac>
 8002930:	e005      	b.n	800293e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCC_GetSysClockFreq+0x110>)
 8002934:	617b      	str	r3, [r7, #20]
      break;
 8002936:	e005      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800293a:	617b      	str	r3, [r7, #20]
      break;
 800293c:	e002      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	617b      	str	r3, [r7, #20]
      break;
 8002942:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	3301      	adds	r3, #1
 8002950:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	fb03 f202 	mul.w	r2, r3, r2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_RCC_GetSysClockFreq+0x108>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	0e5b      	lsrs	r3, r3, #25
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	3301      	adds	r3, #1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002984:	69bb      	ldr	r3, [r7, #24]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	08007798 	.word	0x08007798
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029c0:	f7ff fff0 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4904      	ldr	r1, [pc, #16]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08007790 	.word	0x08007790

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029ec:	f7ff ffda 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08007790 	.word	0x08007790

08002a14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a20:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a2c:	f7ff f9b6 	bl	8001d9c <HAL_PWREx_GetVoltageRange>
 8002a30:	6178      	str	r0, [r7, #20]
 8002a32:	e014      	b.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a4c:	f7ff f9a6 	bl	8001d9c <HAL_PWREx_GetVoltageRange>
 8002a50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a64:	d10b      	bne.n	8002a7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d919      	bls.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2ba0      	cmp	r3, #160	; 0xa0
 8002a70:	d902      	bls.n	8002a78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a72:	2302      	movs	r3, #2
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e013      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a78:	2301      	movs	r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	e010      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d902      	bls.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a84:	2303      	movs	r3, #3
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	e00a      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b80      	cmp	r3, #128	; 0x80
 8002a8e:	d102      	bne.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a90:	2302      	movs	r3, #2
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e004      	b.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b70      	cmp	r3, #112	; 0x70
 8002a9a:	d101      	bne.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 0207 	bic.w	r2, r3, #7
 8002aa8:	4909      	ldr	r1, [pc, #36]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002adc:	2300      	movs	r3, #0
 8002ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d031      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002af8:	d01a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002afa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002afe:	d814      	bhi.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b08:	d10f      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4a5c      	ldr	r2, [pc, #368]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b16:	e00c      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f9de 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b28:	e003      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b2e:	e000      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b38:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	494e      	ldr	r1, [pc, #312]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b4e:	e001      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 809e 	beq.w	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b62:	2300      	movs	r3, #0
 8002b64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b66:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	4a3f      	ldr	r2, [pc, #252]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	; 0x58
 8002b88:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b94:	2301      	movs	r3, #1
 8002b96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a39      	ldr	r2, [pc, #228]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fdc0 	bl	8001728 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002baa:	e009      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7fe fdbc 	bl	8001728 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	74fb      	strb	r3, [r7, #19]
        break;
 8002bbe:	e005      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d15a      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01e      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d019      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c1a:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d016      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd7c 	bl	8001728 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c32:	e00b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe fd78 	bl	8001728 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d902      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	74fb      	strb	r3, [r7, #19]
            break;
 8002c4a:	e006      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ec      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	4904      	ldr	r1, [pc, #16]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c76:	e009      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
 8002c7c:	e006      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8c:	7c7b      	ldrb	r3, [r7, #17]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c92:	4b8a      	ldr	r3, [pc, #552]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a89      	ldr	r2, [pc, #548]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002caa:	4b84      	ldr	r3, [pc, #528]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f023 0203 	bic.w	r2, r3, #3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4980      	ldr	r1, [pc, #512]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ccc:	4b7b      	ldr	r3, [pc, #492]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f023 020c 	bic.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	4978      	ldr	r1, [pc, #480]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	496f      	ldr	r1, [pc, #444]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d10:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	4967      	ldr	r1, [pc, #412]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d32:	4b62      	ldr	r3, [pc, #392]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	495e      	ldr	r1, [pc, #376]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d54:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4956      	ldr	r1, [pc, #344]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d76:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	494d      	ldr	r1, [pc, #308]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d028      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4945      	ldr	r1, [pc, #276]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db8:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc2:	60d3      	str	r3, [r2, #12]
 8002dc4:	e011      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dce:	d10c      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f882 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d028      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df6:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	492d      	ldr	r1, [pc, #180]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e16:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e20:	60d3      	str	r3, [r2, #12]
 8002e22:	e011      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f853 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01c      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e62:	4916      	ldr	r1, [pc, #88]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f830 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea8:	4904      	ldr	r1, [pc, #16]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eee:	4b74      	ldr	r3, [pc, #464]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002efa:	4b71      	ldr	r3, [pc, #452]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d10d      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f12:	4b6b      	ldr	r3, [pc, #428]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
       ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d047      	beq.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e044      	b.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d018      	beq.n	8002f66 <RCCEx_PLLSAI1_Config+0x86>
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d825      	bhi.n	8002f84 <RCCEx_PLLSAI1_Config+0xa4>
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x62>
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d009      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x74>
 8002f40:	e020      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f42:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11d      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f52:	e01a      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f54:	4b5a      	ldr	r3, [pc, #360]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d116      	bne.n	8002f8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f64:	e013      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f66:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f72:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f82:	e006      	b.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e004      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f9a:	4b49      	ldr	r3, [pc, #292]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	4943      	ldr	r1, [pc, #268]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d17c      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fbae 	bl	8001728 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fce:	e009      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd0:	f7fe fbaa 	bl	8001728 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fe2:	e005      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe4:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ef      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d15f      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d110      	bne.n	800301e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	06d2      	lsls	r2, r2, #27
 8003014:	430a      	orrs	r2, r1
 8003016:	492a      	ldr	r1, [pc, #168]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	610b      	str	r3, [r1, #16]
 800301c:	e027      	b.n	800306e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d112      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800302c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6892      	ldr	r2, [r2, #8]
 8003034:	0211      	lsls	r1, r2, #8
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6912      	ldr	r2, [r2, #16]
 800303a:	0852      	lsrs	r2, r2, #1
 800303c:	3a01      	subs	r2, #1
 800303e:	0552      	lsls	r2, r2, #21
 8003040:	430a      	orrs	r2, r1
 8003042:	491f      	ldr	r1, [pc, #124]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	610b      	str	r3, [r1, #16]
 8003048:	e011      	b.n	800306e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003052:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6892      	ldr	r2, [r2, #8]
 800305a:	0211      	lsls	r1, r2, #8
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6952      	ldr	r2, [r2, #20]
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	3a01      	subs	r2, #1
 8003064:	0652      	lsls	r2, r2, #25
 8003066:	430a      	orrs	r2, r1
 8003068:	4915      	ldr	r1, [pc, #84]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306a:	4313      	orrs	r3, r2
 800306c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003078:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe fb55 	bl	8001728 <HAL_GetTick>
 800307e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003080:	e009      	b.n	8003096 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003082:	f7fe fb51 	bl	8001728 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d902      	bls.n	8003096 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	73fb      	strb	r3, [r7, #15]
          break;
 8003094:	e005      	b.n	80030a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ef      	beq.n	8003082 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e040      	b.n	8003158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe f8ce 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fbfc 	bl	8003900 <UART_SetConfig>
 8003108:	4603      	mov	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e022      	b.n	8003158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fe1c 	bl	8003d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800312e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800313e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fea3 	bl	8003e9c <UART_CheckIdleState>
 8003156:	4603      	mov	r3, r0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003160:	b480      	push	{r7}
 8003162:	b08b      	sub	sp, #44	; 0x2c
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003172:	2b20      	cmp	r3, #32
 8003174:	d156      	bne.n	8003224 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_UART_Transmit_IT+0x22>
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e04f      	b.n	8003226 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_UART_Transmit_IT+0x34>
 8003190:	2302      	movs	r3, #2
 8003192:	e048      	b.n	8003226 <HAL_UART_Transmit_IT+0xc6>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	88fa      	ldrh	r2, [r7, #6]
 80031ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2221      	movs	r2, #33	; 0x21
 80031c4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	d107      	bne.n	80031e0 <HAL_UART_Transmit_IT+0x80>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d103      	bne.n	80031e0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <HAL_UART_Transmit_IT+0xd4>)
 80031dc:	669a      	str	r2, [r3, #104]	; 0x68
 80031de:	e002      	b.n	80031e6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_UART_Transmit_IT+0xd8>)
 80031e4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	613b      	str	r3, [r7, #16]
   return(result);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	623b      	str	r3, [r7, #32]
 800320e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	69f9      	ldr	r1, [r7, #28]
 8003212:	6a3a      	ldr	r2, [r7, #32]
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	61bb      	str	r3, [r7, #24]
   return(result);
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e6      	bne.n	80031ee <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	372c      	adds	r7, #44	; 0x2c
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	080043f7 	.word	0x080043f7
 8003238:	0800433f 	.word	0x0800433f

0800323c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324e:	2b20      	cmp	r3, #32
 8003250:	d142      	bne.n	80032d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_UART_Receive_IT+0x22>
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e03b      	b.n	80032da <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_UART_Receive_IT+0x34>
 800326c:	2302      	movs	r3, #2
 800326e:	e034      	b.n	80032da <HAL_UART_Receive_IT+0x9e>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_UART_Receive_IT+0xa8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d01f      	beq.n	80032c8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d018      	beq.n	80032c8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	613b      	str	r3, [r7, #16]
   return(result);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	623b      	str	r3, [r7, #32]
 80032b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	69f9      	ldr	r1, [r7, #28]
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e6      	bne.n	8003296 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fef2 	bl	80040b8 <UART_Start_Receive_IT>
 80032d4:	4603      	mov	r3, r0
 80032d6:	e000      	b.n	80032da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40008000 	.word	0x40008000

080032e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b0ba      	sub	sp, #232	; 0xe8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800330e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003312:	f640 030f 	movw	r3, #2063	; 0x80f
 8003316:	4013      	ands	r3, r2
 8003318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800331c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d115      	bne.n	8003350 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00f      	beq.n	8003350 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 82a6 	beq.w	8003892 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
      }
      return;
 800334e:	e2a0      	b.n	8003892 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8117 	beq.w	8003588 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800335a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800336a:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_UART_IRQHandler+0x298>)
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 810a 	beq.w	8003588 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d011      	beq.n	80033a4 <HAL_UART_IRQHandler+0xbc>
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d011      	beq.n	80033d4 <HAL_UART_IRQHandler+0xec>
 80033b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2202      	movs	r2, #2
 80033c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ca:	f043 0204 	orr.w	r2, r3, #4
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d011      	beq.n	8003404 <HAL_UART_IRQHandler+0x11c>
 80033e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2204      	movs	r2, #4
 80033f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d017      	beq.n	8003440 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800341c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003420:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	f043 0208 	orr.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d012      	beq.n	8003472 <HAL_UART_IRQHandler+0x18a>
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 820c 	beq.w	8003896 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d005      	beq.n	80034ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d04f      	beq.n	800356a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 febe 	bl	800424c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d141      	bne.n	8003562 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800350a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800350e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1d9      	bne.n	80034de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	2b00      	cmp	r3, #0
 8003530:	d013      	beq.n	800355a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4a13      	ldr	r2, [pc, #76]	; (8003584 <HAL_UART_IRQHandler+0x29c>)
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe fa71 	bl	8001a26 <HAL_DMA_Abort_IT>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d017      	beq.n	800357a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003554:	4610      	mov	r0, r2
 8003556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003558:	e00f      	b.n	800357a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9ba 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	e00b      	b.n	800357a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9b6 	bl	80038d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	e007      	b.n	800357a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9b2 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003578:	e18d      	b.n	8003896 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357a:	bf00      	nop
    return;
 800357c:	e18b      	b.n	8003896 <HAL_UART_IRQHandler+0x5ae>
 800357e:	bf00      	nop
 8003580:	04000120 	.word	0x04000120
 8003584:	08004313 	.word	0x08004313

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 8146 	bne.w	800381e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 813f 	beq.w	800381e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8138 	beq.w	800381e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	f040 80b4 	bne.w	800372e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 815f 	beq.w	800389a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035e6:	429a      	cmp	r2, r3
 80035e8:	f080 8157 	bcs.w	800389a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 8085 	bne.w	8003712 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800361c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003636:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800363e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800364a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1da      	bne.n	8003608 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003676:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800367a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800367e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003682:	e841 2300 	strex	r3, r2, [r1]
 8003686:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e1      	bne.n	8003652 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800369e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3308      	adds	r3, #8
 80036ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e3      	bne.n	800368e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	f023 0310 	bic.w	r3, r3, #16
 80036e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80036f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e4      	bne.n	80036d2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe f94c 	bl	80019aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800371e:	b29b      	uxth	r3, r3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	b29b      	uxth	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8de 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800372c:	e0b5      	b.n	800389a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800373a:	b29b      	uxth	r3, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80a7 	beq.w	800389e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a2 	beq.w	800389e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800376e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
 800377e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e4      	bne.n	800375a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	623b      	str	r3, [r7, #32]
   return(result);
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3308      	adds	r3, #8
 80037b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037b4:	633a      	str	r2, [r7, #48]	; 0x30
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e3      	bne.n	8003790 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0310 	bic.w	r3, r3, #16
 80037ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	69b9      	ldr	r1, [r7, #24]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	617b      	str	r3, [r7, #20]
   return(result);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e4      	bne.n	80037da <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003814:	4619      	mov	r1, r3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f866 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800381c:	e03f      	b.n	800389e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <HAL_UART_IRQHandler+0x560>
 800382a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800383e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 ffc2 	bl	80047ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003846:	e02d      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01c      	beq.n	80038a2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
    }
    return;
 8003870:	e017      	b.n	80038a2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
 800387e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fe13 	bl	80044b6 <UART_EndTransmit_IT>
    return;
 8003890:	e008      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003892:	bf00      	nop
 8003894:	e006      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003896:	bf00      	nop
 8003898:	e004      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800389a:	bf00      	nop
 800389c:	e002      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80038a2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038a4:	37e8      	adds	r7, #232	; 0xe8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop

080038ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003904:	b08a      	sub	sp, #40	; 0x28
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	431a      	orrs	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	4313      	orrs	r3, r2
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4bb4      	ldr	r3, [pc, #720]	; (8003c00 <UART_SetConfig+0x300>)
 8003930:	4013      	ands	r3, r2
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003938:	430b      	orrs	r3, r1
 800393a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4aa9      	ldr	r2, [pc, #676]	; (8003c04 <UART_SetConfig+0x304>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	4313      	orrs	r3, r2
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4aa0      	ldr	r2, [pc, #640]	; (8003c08 <UART_SetConfig+0x308>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d126      	bne.n	80039d8 <UART_SetConfig+0xd8>
 800398a:	4ba0      	ldr	r3, [pc, #640]	; (8003c0c <UART_SetConfig+0x30c>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b03      	cmp	r3, #3
 8003996:	d81b      	bhi.n	80039d0 <UART_SetConfig+0xd0>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0xa0>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039b1 	.word	0x080039b1
 80039a4:	080039c1 	.word	0x080039c1
 80039a8:	080039b9 	.word	0x080039b9
 80039ac:	080039c9 	.word	0x080039c9
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e080      	b.n	8003aba <UART_SetConfig+0x1ba>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039be:	e07c      	b.n	8003aba <UART_SetConfig+0x1ba>
 80039c0:	2304      	movs	r3, #4
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c6:	e078      	b.n	8003aba <UART_SetConfig+0x1ba>
 80039c8:	2308      	movs	r3, #8
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e074      	b.n	8003aba <UART_SetConfig+0x1ba>
 80039d0:	2310      	movs	r3, #16
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e070      	b.n	8003aba <UART_SetConfig+0x1ba>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a8c      	ldr	r2, [pc, #560]	; (8003c10 <UART_SetConfig+0x310>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d138      	bne.n	8003a54 <UART_SetConfig+0x154>
 80039e2:	4b8a      	ldr	r3, [pc, #552]	; (8003c0c <UART_SetConfig+0x30c>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	d82d      	bhi.n	8003a4c <UART_SetConfig+0x14c>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0xf8>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003a4d 	.word	0x08003a4d
 8003a00:	08003a4d 	.word	0x08003a4d
 8003a04:	08003a4d 	.word	0x08003a4d
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003a4d 	.word	0x08003a4d
 8003a10:	08003a4d 	.word	0x08003a4d
 8003a14:	08003a4d 	.word	0x08003a4d
 8003a18:	08003a35 	.word	0x08003a35
 8003a1c:	08003a4d 	.word	0x08003a4d
 8003a20:	08003a4d 	.word	0x08003a4d
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e042      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003a34:	2302      	movs	r3, #2
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e03e      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e03a      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003a44:	2308      	movs	r3, #8
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e036      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a52:	e032      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6a      	ldr	r2, [pc, #424]	; (8003c04 <UART_SetConfig+0x304>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d12a      	bne.n	8003ab4 <UART_SetConfig+0x1b4>
 8003a5e:	4b6b      	ldr	r3, [pc, #428]	; (8003c0c <UART_SetConfig+0x30c>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6c:	d01a      	beq.n	8003aa4 <UART_SetConfig+0x1a4>
 8003a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a72:	d81b      	bhi.n	8003aac <UART_SetConfig+0x1ac>
 8003a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a78:	d00c      	beq.n	8003a94 <UART_SetConfig+0x194>
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7e:	d815      	bhi.n	8003aac <UART_SetConfig+0x1ac>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <UART_SetConfig+0x18c>
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d008      	beq.n	8003a9c <UART_SetConfig+0x19c>
 8003a8a:	e00f      	b.n	8003aac <UART_SetConfig+0x1ac>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e012      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003a94:	2302      	movs	r3, #2
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e00e      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e00a      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e006      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003aac:	2310      	movs	r3, #16
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e002      	b.n	8003aba <UART_SetConfig+0x1ba>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <UART_SetConfig+0x304>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d17a      	bne.n	8003bba <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d824      	bhi.n	8003b16 <UART_SetConfig+0x216>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x1d4>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b17 	.word	0x08003b17
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b17 	.word	0x08003b17
 8003ae4:	08003b07 	.word	0x08003b07
 8003ae8:	08003b17 	.word	0x08003b17
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	08003b17 	.word	0x08003b17
 8003af4:	08003b0f 	.word	0x08003b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7fe ff60 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8003afc:	61f8      	str	r0, [r7, #28]
        break;
 8003afe:	e010      	b.n	8003b22 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b00:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <UART_SetConfig+0x314>)
 8003b02:	61fb      	str	r3, [r7, #28]
        break;
 8003b04:	e00d      	b.n	8003b22 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7fe fec1 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8003b0a:	61f8      	str	r0, [r7, #28]
        break;
 8003b0c:	e009      	b.n	8003b22 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	61fb      	str	r3, [r7, #28]
        break;
 8003b14:	e005      	b.n	8003b22 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8107 	beq.w	8003d38 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d305      	bcc.n	8003b46 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d903      	bls.n	8003b4e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b4c:	e0f4      	b.n	8003d38 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2200      	movs	r2, #0
 8003b52:	461c      	mov	r4, r3
 8003b54:	4615      	mov	r5, r2
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	022b      	lsls	r3, r5, #8
 8003b60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b64:	0222      	lsls	r2, r4, #8
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	6849      	ldr	r1, [r1, #4]
 8003b6a:	0849      	lsrs	r1, r1, #1
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	4688      	mov	r8, r1
 8003b70:	4681      	mov	r9, r0
 8003b72:	eb12 0a08 	adds.w	sl, r2, r8
 8003b76:	eb43 0b09 	adc.w	fp, r3, r9
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b88:	4650      	mov	r0, sl
 8003b8a:	4659      	mov	r1, fp
 8003b8c:	f7fd f80c 	bl	8000ba8 <__aeabi_uldivmod>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4613      	mov	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9e:	d308      	bcc.n	8003bb2 <UART_SetConfig+0x2b2>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d204      	bcs.n	8003bb2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	e0c2      	b.n	8003d38 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bb8:	e0be      	b.n	8003d38 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d16a      	bne.n	8003c9a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d834      	bhi.n	8003c36 <UART_SetConfig+0x336>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0x2d4>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c21 	.word	0x08003c21
 8003be0:	08003c37 	.word	0x08003c37
 8003be4:	08003c27 	.word	0x08003c27
 8003be8:	08003c37 	.word	0x08003c37
 8003bec:	08003c37 	.word	0x08003c37
 8003bf0:	08003c37 	.word	0x08003c37
 8003bf4:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7fe fee0 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8003bfc:	61f8      	str	r0, [r7, #28]
        break;
 8003bfe:	e020      	b.n	8003c42 <UART_SetConfig+0x342>
 8003c00:	efff69f3 	.word	0xefff69f3
 8003c04:	40008000 	.word	0x40008000
 8003c08:	40013800 	.word	0x40013800
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40004400 	.word	0x40004400
 8003c14:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7fe fee6 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	61f8      	str	r0, [r7, #28]
        break;
 8003c1e:	e010      	b.n	8003c42 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <UART_SetConfig+0x454>)
 8003c22:	61fb      	str	r3, [r7, #28]
        break;
 8003c24:	e00d      	b.n	8003c42 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c26:	f7fe fe31 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8003c2a:	61f8      	str	r0, [r7, #28]
        break;
 8003c2c:	e009      	b.n	8003c42 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	61fb      	str	r3, [r7, #28]
        break;
 8003c34:	e005      	b.n	8003c42 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d077      	beq.n	8003d38 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005a      	lsls	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	441a      	add	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d916      	bls.n	8003c92 <UART_SetConfig+0x392>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d212      	bcs.n	8003c92 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f023 030f 	bic.w	r3, r3, #15
 8003c74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	8afb      	ldrh	r3, [r7, #22]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	8afa      	ldrh	r2, [r7, #22]
 8003c8e:	60da      	str	r2, [r3, #12]
 8003c90:	e052      	b.n	8003d38 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c98:	e04e      	b.n	8003d38 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d827      	bhi.n	8003cf2 <UART_SetConfig+0x3f2>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x3a8>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003cf3 	.word	0x08003cf3
 8003cc0:	08003cf3 	.word	0x08003cf3
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fe76 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e014      	b.n	8003cfe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe fe88 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	61f8      	str	r0, [r7, #28]
        break;
 8003cda:	e010      	b.n	8003cfe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <UART_SetConfig+0x454>)
 8003cde:	61fb      	str	r3, [r7, #28]
        break;
 8003ce0:	e00d      	b.n	8003cfe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce2:	f7fe fdd3 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8003ce6:	61f8      	str	r0, [r7, #28]
        break;
 8003ce8:	e009      	b.n	8003cfe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	61fb      	str	r3, [r7, #28]
        break;
 8003cf0:	e005      	b.n	8003cfe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d019      	beq.n	8003d38 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	085a      	lsrs	r2, r3, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	d909      	bls.n	8003d32 <UART_SetConfig+0x432>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d205      	bcs.n	8003d32 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	e002      	b.n	8003d38 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	00f42400 	.word	0x00f42400

08003d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e56:	d10a      	bne.n	8003e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eac:	f7fd fc3c 	bl	8001728 <HAL_GetTick>
 8003eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d10e      	bne.n	8003ede <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f82d 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e023      	b.n	8003f26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d10e      	bne.n	8003f0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f817 	bl	8003f2e <UART_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e00d      	b.n	8003f26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b09c      	sub	sp, #112	; 0x70
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	e0a5      	b.n	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	f000 80a1 	beq.w	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4a:	f7fd fbed 	bl	8001728 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d302      	bcc.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d13e      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f74:	667b      	str	r3, [r7, #100]	; 0x64
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e067      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d04f      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffa:	d147      	bne.n	800408c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004004:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800401a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
 8004026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800402a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e6      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	613b      	str	r3, [r7, #16]
   return(result);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3308      	adds	r3, #8
 8004056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004058:	623a      	str	r2, [r7, #32]
 800405a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69f9      	ldr	r1, [r7, #28]
 800405e:	6a3a      	ldr	r2, [r7, #32]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	61bb      	str	r3, [r7, #24]
   return(result);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e5      	bne.n	8004038 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e010      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	f43f af4a 	beq.w	8003f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3770      	adds	r7, #112	; 0x70
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b097      	sub	sp, #92	; 0x5c
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d10e      	bne.n	800410a <UART_Start_Receive_IT+0x52>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <UART_Start_Receive_IT+0x48>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040fe:	e02d      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	22ff      	movs	r2, #255	; 0xff
 8004104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004108:	e028      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <UART_Start_Receive_IT+0x76>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <UART_Start_Receive_IT+0x6c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004122:	e01b      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	227f      	movs	r2, #127	; 0x7f
 8004128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800412c:	e016      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004136:	d10d      	bne.n	8004154 <UART_Start_Receive_IT+0x9c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <UART_Start_Receive_IT+0x92>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	227f      	movs	r2, #127	; 0x7f
 8004144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004148:	e008      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	223f      	movs	r2, #63	; 0x3f
 800414e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004152:	e003      	b.n	800415c <UART_Start_Receive_IT+0xa4>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2222      	movs	r2, #34	; 0x22
 8004168:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3308      	adds	r3, #8
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	657b      	str	r3, [r7, #84]	; 0x54
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800418a:	64ba      	str	r2, [r7, #72]	; 0x48
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a6:	d107      	bne.n	80041b8 <UART_Start_Receive_IT+0x100>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a24      	ldr	r2, [pc, #144]	; (8004244 <UART_Start_Receive_IT+0x18c>)
 80041b4:	665a      	str	r2, [r3, #100]	; 0x64
 80041b6:	e002      	b.n	80041be <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a23      	ldr	r2, [pc, #140]	; (8004248 <UART_Start_Receive_IT+0x190>)
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d019      	beq.n	8004202 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <UART_Start_Receive_IT+0x116>
 8004200:	e018      	b.n	8004234 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	613b      	str	r3, [r7, #16]
   return(result);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	653b      	str	r3, [r7, #80]	; 0x50
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004220:	623b      	str	r3, [r7, #32]
 8004222:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69f9      	ldr	r1, [r7, #28]
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	61bb      	str	r3, [r7, #24]
   return(result);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	375c      	adds	r7, #92	; 0x5c
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	0800466b 	.word	0x0800466b
 8004248:	0800450b 	.word	0x0800450b

0800424c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b095      	sub	sp, #84	; 0x54
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	643b      	str	r3, [r7, #64]	; 0x40
 8004274:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e6      	bne.n	8004254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	61fb      	str	r3, [r7, #28]
   return(result);
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e5      	bne.n	8004286 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d118      	bne.n	80042f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f023 0310 	bic.w	r3, r3, #16
 80042d6:	647b      	str	r3, [r7, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	613b      	str	r3, [r7, #16]
   return(result);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e6      	bne.n	80042c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004306:	bf00      	nop
 8004308:	3754      	adds	r7, #84	; 0x54
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff facf 	bl	80038d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800433e:	b480      	push	{r7}
 8004340:	b08f      	sub	sp, #60	; 0x3c
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800434a:	2b21      	cmp	r3, #33	; 0x21
 800434c:	d14d      	bne.n	80043ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d132      	bne.n	80043c0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	61fb      	str	r3, [r7, #28]
   return(result);
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800437e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	60bb      	str	r3, [r7, #8]
   return(result);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6979      	ldr	r1, [r7, #20]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	613b      	str	r3, [r7, #16]
   return(result);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043be:	e014      	b.n	80043ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b292      	uxth	r2, r2
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80043ea:	bf00      	nop
 80043ec:	373c      	adds	r7, #60	; 0x3c
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b091      	sub	sp, #68	; 0x44
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004402:	2b21      	cmp	r3, #33	; 0x21
 8004404:	d151      	bne.n	80044aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d132      	bne.n	8004478 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	623b      	str	r3, [r7, #32]
   return(result);
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004426:	63bb      	str	r3, [r7, #56]	; 0x38
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	633b      	str	r3, [r7, #48]	; 0x30
 8004432:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	60fb      	str	r3, [r7, #12]
   return(result);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	69b9      	ldr	r1, [r7, #24]
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	617b      	str	r3, [r7, #20]
   return(result);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e6      	bne.n	8004444 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004476:	e018      	b.n	80044aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448a:	b292      	uxth	r2, r2
 800448c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044aa:	bf00      	nop
 80044ac:	3744      	adds	r7, #68	; 0x44
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b088      	sub	sp, #32
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff f9d5 	bl	80038ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004502:	bf00      	nop
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b096      	sub	sp, #88	; 0x58
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004518:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004520:	2b22      	cmp	r3, #34	; 0x22
 8004522:	f040 8094 	bne.w	800464e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800452c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004530:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004534:	b2d9      	uxtb	r1, r3
 8004536:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800453a:	b2da      	uxtb	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	400a      	ands	r2, r1
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d179      	bne.n	8004662 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004582:	653b      	str	r3, [r7, #80]	; 0x50
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
 800458e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800459a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e6      	bne.n	800456e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3308      	adds	r3, #8
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	623b      	str	r3, [r7, #32]
   return(result);
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045c0:	633a      	str	r2, [r7, #48]	; 0x30
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d12e      	bne.n	8004646 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0310 	bic.w	r3, r3, #16
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	617b      	str	r3, [r7, #20]
   return(result);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e6      	bne.n	80045ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b10      	cmp	r3, #16
 800462c:	d103      	bne.n	8004636 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2210      	movs	r2, #16
 8004634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff f952 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004644:	e00d      	b.n	8004662 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff f93a 	bl	80038c0 <HAL_UART_RxCpltCallback>
}
 800464c:	e009      	b.n	8004662 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	8b1b      	ldrh	r3, [r3, #24]
 8004654:	b29a      	uxth	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0208 	orr.w	r2, r2, #8
 800465e:	b292      	uxth	r2, r2
 8004660:	831a      	strh	r2, [r3, #24]
}
 8004662:	bf00      	nop
 8004664:	3758      	adds	r7, #88	; 0x58
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b096      	sub	sp, #88	; 0x58
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004678:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004680:	2b22      	cmp	r3, #34	; 0x22
 8004682:	f040 8094 	bne.w	80047ae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800468c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004696:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800469a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800469e:	4013      	ands	r3, r2
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	1c9a      	adds	r2, r3, #2
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d179      	bne.n	80047c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ec:	643b      	str	r3, [r7, #64]	; 0x40
 80046ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e6      	bne.n	80046ce <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	64bb      	str	r3, [r7, #72]	; 0x48
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e5      	bne.n	8004700 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	2b01      	cmp	r3, #1
 8004746:	d12e      	bne.n	80047a6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	60bb      	str	r3, [r7, #8]
   return(result);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	647b      	str	r3, [r7, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6979      	ldr	r1, [r7, #20]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	613b      	str	r3, [r7, #16]
   return(result);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e6      	bne.n	800474e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d103      	bne.n	8004796 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2210      	movs	r2, #16
 8004794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff f8a2 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047a4:	e00d      	b.n	80047c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff f88a 	bl	80038c0 <HAL_UART_RxCpltCallback>
}
 80047ac:	e009      	b.n	80047c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	8b1b      	ldrh	r3, [r3, #24]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0208 	orr.w	r2, r2, #8
 80047be:	b292      	uxth	r2, r2
 80047c0:	831a      	strh	r2, [r3, #24]
}
 80047c2:	bf00      	nop
 80047c4:	3758      	adds	r7, #88	; 0x58
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <__errno>:
 80047e0:	4b01      	ldr	r3, [pc, #4]	; (80047e8 <__errno+0x8>)
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	2000000c 	.word	0x2000000c

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4d0d      	ldr	r5, [pc, #52]	; (8004824 <__libc_init_array+0x38>)
 80047f0:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f2:	1b64      	subs	r4, r4, r5
 80047f4:	10a4      	asrs	r4, r4, #2
 80047f6:	2600      	movs	r6, #0
 80047f8:	42a6      	cmp	r6, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	4d0b      	ldr	r5, [pc, #44]	; (800482c <__libc_init_array+0x40>)
 80047fe:	4c0c      	ldr	r4, [pc, #48]	; (8004830 <__libc_init_array+0x44>)
 8004800:	f002 ff16 	bl	8007630 <_init>
 8004804:	1b64      	subs	r4, r4, r5
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	2600      	movs	r6, #0
 800480a:	42a6      	cmp	r6, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f855 3b04 	ldr.w	r3, [r5], #4
 8004814:	4798      	blx	r3
 8004816:	3601      	adds	r6, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f855 3b04 	ldr.w	r3, [r5], #4
 800481e:	4798      	blx	r3
 8004820:	3601      	adds	r6, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	08007bac 	.word	0x08007bac
 8004828:	08007bac 	.word	0x08007bac
 800482c:	08007bac 	.word	0x08007bac
 8004830:	08007bb0 	.word	0x08007bb0

08004834 <memset>:
 8004834:	4402      	add	r2, r0
 8004836:	4603      	mov	r3, r0
 8004838:	4293      	cmp	r3, r2
 800483a:	d100      	bne.n	800483e <memset+0xa>
 800483c:	4770      	bx	lr
 800483e:	f803 1b01 	strb.w	r1, [r3], #1
 8004842:	e7f9      	b.n	8004838 <memset+0x4>

08004844 <__cvt>:
 8004844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004848:	ec55 4b10 	vmov	r4, r5, d0
 800484c:	2d00      	cmp	r5, #0
 800484e:	460e      	mov	r6, r1
 8004850:	4619      	mov	r1, r3
 8004852:	462b      	mov	r3, r5
 8004854:	bfbb      	ittet	lt
 8004856:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800485a:	461d      	movlt	r5, r3
 800485c:	2300      	movge	r3, #0
 800485e:	232d      	movlt	r3, #45	; 0x2d
 8004860:	700b      	strb	r3, [r1, #0]
 8004862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004864:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004868:	4691      	mov	r9, r2
 800486a:	f023 0820 	bic.w	r8, r3, #32
 800486e:	bfbc      	itt	lt
 8004870:	4622      	movlt	r2, r4
 8004872:	4614      	movlt	r4, r2
 8004874:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004878:	d005      	beq.n	8004886 <__cvt+0x42>
 800487a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800487e:	d100      	bne.n	8004882 <__cvt+0x3e>
 8004880:	3601      	adds	r6, #1
 8004882:	2102      	movs	r1, #2
 8004884:	e000      	b.n	8004888 <__cvt+0x44>
 8004886:	2103      	movs	r1, #3
 8004888:	ab03      	add	r3, sp, #12
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	ab02      	add	r3, sp, #8
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	ec45 4b10 	vmov	d0, r4, r5
 8004894:	4653      	mov	r3, sl
 8004896:	4632      	mov	r2, r6
 8004898:	f000 fcfe 	bl	8005298 <_dtoa_r>
 800489c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048a0:	4607      	mov	r7, r0
 80048a2:	d102      	bne.n	80048aa <__cvt+0x66>
 80048a4:	f019 0f01 	tst.w	r9, #1
 80048a8:	d022      	beq.n	80048f0 <__cvt+0xac>
 80048aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048ae:	eb07 0906 	add.w	r9, r7, r6
 80048b2:	d110      	bne.n	80048d6 <__cvt+0x92>
 80048b4:	783b      	ldrb	r3, [r7, #0]
 80048b6:	2b30      	cmp	r3, #48	; 0x30
 80048b8:	d10a      	bne.n	80048d0 <__cvt+0x8c>
 80048ba:	2200      	movs	r2, #0
 80048bc:	2300      	movs	r3, #0
 80048be:	4620      	mov	r0, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	f7fc f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80048c6:	b918      	cbnz	r0, 80048d0 <__cvt+0x8c>
 80048c8:	f1c6 0601 	rsb	r6, r6, #1
 80048cc:	f8ca 6000 	str.w	r6, [sl]
 80048d0:	f8da 3000 	ldr.w	r3, [sl]
 80048d4:	4499      	add	r9, r3
 80048d6:	2200      	movs	r2, #0
 80048d8:	2300      	movs	r3, #0
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	f7fc f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80048e2:	b108      	cbz	r0, 80048e8 <__cvt+0xa4>
 80048e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80048e8:	2230      	movs	r2, #48	; 0x30
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	454b      	cmp	r3, r9
 80048ee:	d307      	bcc.n	8004900 <__cvt+0xbc>
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048f4:	1bdb      	subs	r3, r3, r7
 80048f6:	4638      	mov	r0, r7
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	b004      	add	sp, #16
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	9103      	str	r1, [sp, #12]
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e7f0      	b.n	80048ea <__cvt+0xa6>

08004908 <__exponent>:
 8004908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800490a:	4603      	mov	r3, r0
 800490c:	2900      	cmp	r1, #0
 800490e:	bfb8      	it	lt
 8004910:	4249      	neglt	r1, r1
 8004912:	f803 2b02 	strb.w	r2, [r3], #2
 8004916:	bfb4      	ite	lt
 8004918:	222d      	movlt	r2, #45	; 0x2d
 800491a:	222b      	movge	r2, #43	; 0x2b
 800491c:	2909      	cmp	r1, #9
 800491e:	7042      	strb	r2, [r0, #1]
 8004920:	dd2a      	ble.n	8004978 <__exponent+0x70>
 8004922:	f10d 0407 	add.w	r4, sp, #7
 8004926:	46a4      	mov	ip, r4
 8004928:	270a      	movs	r7, #10
 800492a:	46a6      	mov	lr, r4
 800492c:	460a      	mov	r2, r1
 800492e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004932:	fb07 1516 	mls	r5, r7, r6, r1
 8004936:	3530      	adds	r5, #48	; 0x30
 8004938:	2a63      	cmp	r2, #99	; 0x63
 800493a:	f104 34ff 	add.w	r4, r4, #4294967295
 800493e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004942:	4631      	mov	r1, r6
 8004944:	dcf1      	bgt.n	800492a <__exponent+0x22>
 8004946:	3130      	adds	r1, #48	; 0x30
 8004948:	f1ae 0502 	sub.w	r5, lr, #2
 800494c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004950:	1c44      	adds	r4, r0, #1
 8004952:	4629      	mov	r1, r5
 8004954:	4561      	cmp	r1, ip
 8004956:	d30a      	bcc.n	800496e <__exponent+0x66>
 8004958:	f10d 0209 	add.w	r2, sp, #9
 800495c:	eba2 020e 	sub.w	r2, r2, lr
 8004960:	4565      	cmp	r5, ip
 8004962:	bf88      	it	hi
 8004964:	2200      	movhi	r2, #0
 8004966:	4413      	add	r3, r2
 8004968:	1a18      	subs	r0, r3, r0
 800496a:	b003      	add	sp, #12
 800496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004972:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004976:	e7ed      	b.n	8004954 <__exponent+0x4c>
 8004978:	2330      	movs	r3, #48	; 0x30
 800497a:	3130      	adds	r1, #48	; 0x30
 800497c:	7083      	strb	r3, [r0, #2]
 800497e:	70c1      	strb	r1, [r0, #3]
 8004980:	1d03      	adds	r3, r0, #4
 8004982:	e7f1      	b.n	8004968 <__exponent+0x60>

08004984 <_printf_float>:
 8004984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004988:	ed2d 8b02 	vpush	{d8}
 800498c:	b08d      	sub	sp, #52	; 0x34
 800498e:	460c      	mov	r4, r1
 8004990:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004994:	4616      	mov	r6, r2
 8004996:	461f      	mov	r7, r3
 8004998:	4605      	mov	r5, r0
 800499a:	f001 fa6b 	bl	8005e74 <_localeconv_r>
 800499e:	f8d0 a000 	ldr.w	sl, [r0]
 80049a2:	4650      	mov	r0, sl
 80049a4:	f7fb fc14 	bl	80001d0 <strlen>
 80049a8:	2300      	movs	r3, #0
 80049aa:	930a      	str	r3, [sp, #40]	; 0x28
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	9305      	str	r3, [sp, #20]
 80049b0:	f8d8 3000 	ldr.w	r3, [r8]
 80049b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80049b8:	3307      	adds	r3, #7
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	f103 0208 	add.w	r2, r3, #8
 80049c2:	f8c8 2000 	str.w	r2, [r8]
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049d6:	9307      	str	r3, [sp, #28]
 80049d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80049dc:	ee08 0a10 	vmov	s16, r0
 80049e0:	4b9f      	ldr	r3, [pc, #636]	; (8004c60 <_printf_float+0x2dc>)
 80049e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ea:	f7fc f89f 	bl	8000b2c <__aeabi_dcmpun>
 80049ee:	bb88      	cbnz	r0, 8004a54 <_printf_float+0xd0>
 80049f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049f4:	4b9a      	ldr	r3, [pc, #616]	; (8004c60 <_printf_float+0x2dc>)
 80049f6:	f04f 32ff 	mov.w	r2, #4294967295
 80049fa:	f7fc f879 	bl	8000af0 <__aeabi_dcmple>
 80049fe:	bb48      	cbnz	r0, 8004a54 <_printf_float+0xd0>
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	4640      	mov	r0, r8
 8004a06:	4649      	mov	r1, r9
 8004a08:	f7fc f868 	bl	8000adc <__aeabi_dcmplt>
 8004a0c:	b110      	cbz	r0, 8004a14 <_printf_float+0x90>
 8004a0e:	232d      	movs	r3, #45	; 0x2d
 8004a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a14:	4b93      	ldr	r3, [pc, #588]	; (8004c64 <_printf_float+0x2e0>)
 8004a16:	4894      	ldr	r0, [pc, #592]	; (8004c68 <_printf_float+0x2e4>)
 8004a18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a1c:	bf94      	ite	ls
 8004a1e:	4698      	movls	r8, r3
 8004a20:	4680      	movhi	r8, r0
 8004a22:	2303      	movs	r3, #3
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	9b05      	ldr	r3, [sp, #20]
 8004a28:	f023 0204 	bic.w	r2, r3, #4
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	f04f 0900 	mov.w	r9, #0
 8004a32:	9700      	str	r7, [sp, #0]
 8004a34:	4633      	mov	r3, r6
 8004a36:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 f9d8 	bl	8004df0 <_printf_common>
 8004a40:	3001      	adds	r0, #1
 8004a42:	f040 8090 	bne.w	8004b66 <_printf_float+0x1e2>
 8004a46:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4a:	b00d      	add	sp, #52	; 0x34
 8004a4c:	ecbd 8b02 	vpop	{d8}
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	f7fc f866 	bl	8000b2c <__aeabi_dcmpun>
 8004a60:	b140      	cbz	r0, 8004a74 <_printf_float+0xf0>
 8004a62:	464b      	mov	r3, r9
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bfbc      	itt	lt
 8004a68:	232d      	movlt	r3, #45	; 0x2d
 8004a6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a6e:	487f      	ldr	r0, [pc, #508]	; (8004c6c <_printf_float+0x2e8>)
 8004a70:	4b7f      	ldr	r3, [pc, #508]	; (8004c70 <_printf_float+0x2ec>)
 8004a72:	e7d1      	b.n	8004a18 <_printf_float+0x94>
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a7a:	9206      	str	r2, [sp, #24]
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	d13f      	bne.n	8004b00 <_printf_float+0x17c>
 8004a80:	2306      	movs	r3, #6
 8004a82:	6063      	str	r3, [r4, #4]
 8004a84:	9b05      	ldr	r3, [sp, #20]
 8004a86:	6861      	ldr	r1, [r4, #4]
 8004a88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9303      	str	r3, [sp, #12]
 8004a90:	ab0a      	add	r3, sp, #40	; 0x28
 8004a92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a96:	ab09      	add	r3, sp, #36	; 0x24
 8004a98:	ec49 8b10 	vmov	d0, r8, r9
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6022      	str	r2, [r4, #0]
 8004aa0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f7ff fecd 	bl	8004844 <__cvt>
 8004aaa:	9b06      	ldr	r3, [sp, #24]
 8004aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004aae:	2b47      	cmp	r3, #71	; 0x47
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	d108      	bne.n	8004ac6 <_printf_float+0x142>
 8004ab4:	1cc8      	adds	r0, r1, #3
 8004ab6:	db02      	blt.n	8004abe <_printf_float+0x13a>
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	4299      	cmp	r1, r3
 8004abc:	dd41      	ble.n	8004b42 <_printf_float+0x1be>
 8004abe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ac2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ac6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004aca:	d820      	bhi.n	8004b0e <_printf_float+0x18a>
 8004acc:	3901      	subs	r1, #1
 8004ace:	465a      	mov	r2, fp
 8004ad0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ad4:	9109      	str	r1, [sp, #36]	; 0x24
 8004ad6:	f7ff ff17 	bl	8004908 <__exponent>
 8004ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004adc:	1813      	adds	r3, r2, r0
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	4681      	mov	r9, r0
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	dc02      	bgt.n	8004aec <_printf_float+0x168>
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	07d2      	lsls	r2, r2, #31
 8004aea:	d501      	bpl.n	8004af0 <_printf_float+0x16c>
 8004aec:	3301      	adds	r3, #1
 8004aee:	6123      	str	r3, [r4, #16]
 8004af0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d09c      	beq.n	8004a32 <_printf_float+0xae>
 8004af8:	232d      	movs	r3, #45	; 0x2d
 8004afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004afe:	e798      	b.n	8004a32 <_printf_float+0xae>
 8004b00:	9a06      	ldr	r2, [sp, #24]
 8004b02:	2a47      	cmp	r2, #71	; 0x47
 8004b04:	d1be      	bne.n	8004a84 <_printf_float+0x100>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1bc      	bne.n	8004a84 <_printf_float+0x100>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e7b9      	b.n	8004a82 <_printf_float+0xfe>
 8004b0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b12:	d118      	bne.n	8004b46 <_printf_float+0x1c2>
 8004b14:	2900      	cmp	r1, #0
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	dd0b      	ble.n	8004b32 <_printf_float+0x1ae>
 8004b1a:	6121      	str	r1, [r4, #16]
 8004b1c:	b913      	cbnz	r3, 8004b24 <_printf_float+0x1a0>
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	07d0      	lsls	r0, r2, #31
 8004b22:	d502      	bpl.n	8004b2a <_printf_float+0x1a6>
 8004b24:	3301      	adds	r3, #1
 8004b26:	440b      	add	r3, r1
 8004b28:	6123      	str	r3, [r4, #16]
 8004b2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b2c:	f04f 0900 	mov.w	r9, #0
 8004b30:	e7de      	b.n	8004af0 <_printf_float+0x16c>
 8004b32:	b913      	cbnz	r3, 8004b3a <_printf_float+0x1b6>
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	07d2      	lsls	r2, r2, #31
 8004b38:	d501      	bpl.n	8004b3e <_printf_float+0x1ba>
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	e7f4      	b.n	8004b28 <_printf_float+0x1a4>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e7f2      	b.n	8004b28 <_printf_float+0x1a4>
 8004b42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	db05      	blt.n	8004b58 <_printf_float+0x1d4>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	6121      	str	r1, [r4, #16]
 8004b50:	07d8      	lsls	r0, r3, #31
 8004b52:	d5ea      	bpl.n	8004b2a <_printf_float+0x1a6>
 8004b54:	1c4b      	adds	r3, r1, #1
 8004b56:	e7e7      	b.n	8004b28 <_printf_float+0x1a4>
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	bfd4      	ite	le
 8004b5c:	f1c1 0202 	rsble	r2, r1, #2
 8004b60:	2201      	movgt	r2, #1
 8004b62:	4413      	add	r3, r2
 8004b64:	e7e0      	b.n	8004b28 <_printf_float+0x1a4>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	055a      	lsls	r2, r3, #21
 8004b6a:	d407      	bmi.n	8004b7c <_printf_float+0x1f8>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	4642      	mov	r2, r8
 8004b70:	4631      	mov	r1, r6
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	d12c      	bne.n	8004bd4 <_printf_float+0x250>
 8004b7a:	e764      	b.n	8004a46 <_printf_float+0xc2>
 8004b7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b80:	f240 80e0 	bls.w	8004d44 <_printf_float+0x3c0>
 8004b84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f7fb ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d034      	beq.n	8004bfe <_printf_float+0x27a>
 8004b94:	4a37      	ldr	r2, [pc, #220]	; (8004c74 <_printf_float+0x2f0>)
 8004b96:	2301      	movs	r3, #1
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	f43f af51 	beq.w	8004a46 <_printf_float+0xc2>
 8004ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	db02      	blt.n	8004bb2 <_printf_float+0x22e>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	07d8      	lsls	r0, r3, #31
 8004bb0:	d510      	bpl.n	8004bd4 <_printf_float+0x250>
 8004bb2:	ee18 3a10 	vmov	r3, s16
 8004bb6:	4652      	mov	r2, sl
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f af41 	beq.w	8004a46 <_printf_float+0xc2>
 8004bc4:	f04f 0800 	mov.w	r8, #0
 8004bc8:	f104 091a 	add.w	r9, r4, #26
 8004bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	4543      	cmp	r3, r8
 8004bd2:	dc09      	bgt.n	8004be8 <_printf_float+0x264>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	079b      	lsls	r3, r3, #30
 8004bd8:	f100 8105 	bmi.w	8004de6 <_printf_float+0x462>
 8004bdc:	68e0      	ldr	r0, [r4, #12]
 8004bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be0:	4298      	cmp	r0, r3
 8004be2:	bfb8      	it	lt
 8004be4:	4618      	movlt	r0, r3
 8004be6:	e730      	b.n	8004a4a <_printf_float+0xc6>
 8004be8:	2301      	movs	r3, #1
 8004bea:	464a      	mov	r2, r9
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af27 	beq.w	8004a46 <_printf_float+0xc2>
 8004bf8:	f108 0801 	add.w	r8, r8, #1
 8004bfc:	e7e6      	b.n	8004bcc <_printf_float+0x248>
 8004bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dc39      	bgt.n	8004c78 <_printf_float+0x2f4>
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <_printf_float+0x2f0>)
 8004c06:	2301      	movs	r3, #1
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	f43f af19 	beq.w	8004a46 <_printf_float+0xc2>
 8004c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d102      	bne.n	8004c22 <_printf_float+0x29e>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	07d9      	lsls	r1, r3, #31
 8004c20:	d5d8      	bpl.n	8004bd4 <_printf_float+0x250>
 8004c22:	ee18 3a10 	vmov	r3, s16
 8004c26:	4652      	mov	r2, sl
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	47b8      	blx	r7
 8004c2e:	3001      	adds	r0, #1
 8004c30:	f43f af09 	beq.w	8004a46 <_printf_float+0xc2>
 8004c34:	f04f 0900 	mov.w	r9, #0
 8004c38:	f104 0a1a 	add.w	sl, r4, #26
 8004c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3e:	425b      	negs	r3, r3
 8004c40:	454b      	cmp	r3, r9
 8004c42:	dc01      	bgt.n	8004c48 <_printf_float+0x2c4>
 8004c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c46:	e792      	b.n	8004b6e <_printf_float+0x1ea>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4652      	mov	r2, sl
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f aef7 	beq.w	8004a46 <_printf_float+0xc2>
 8004c58:	f109 0901 	add.w	r9, r9, #1
 8004c5c:	e7ee      	b.n	8004c3c <_printf_float+0x2b8>
 8004c5e:	bf00      	nop
 8004c60:	7fefffff 	.word	0x7fefffff
 8004c64:	080077cc 	.word	0x080077cc
 8004c68:	080077d0 	.word	0x080077d0
 8004c6c:	080077d8 	.word	0x080077d8
 8004c70:	080077d4 	.word	0x080077d4
 8004c74:	080077dc 	.word	0x080077dc
 8004c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	bfa8      	it	ge
 8004c80:	461a      	movge	r2, r3
 8004c82:	2a00      	cmp	r2, #0
 8004c84:	4691      	mov	r9, r2
 8004c86:	dc37      	bgt.n	8004cf8 <_printf_float+0x374>
 8004c88:	f04f 0b00 	mov.w	fp, #0
 8004c8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c90:	f104 021a 	add.w	r2, r4, #26
 8004c94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c96:	9305      	str	r3, [sp, #20]
 8004c98:	eba3 0309 	sub.w	r3, r3, r9
 8004c9c:	455b      	cmp	r3, fp
 8004c9e:	dc33      	bgt.n	8004d08 <_printf_float+0x384>
 8004ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	db3b      	blt.n	8004d20 <_printf_float+0x39c>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	07da      	lsls	r2, r3, #31
 8004cac:	d438      	bmi.n	8004d20 <_printf_float+0x39c>
 8004cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb0:	9a05      	ldr	r2, [sp, #20]
 8004cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cb4:	1a9a      	subs	r2, r3, r2
 8004cb6:	eba3 0901 	sub.w	r9, r3, r1
 8004cba:	4591      	cmp	r9, r2
 8004cbc:	bfa8      	it	ge
 8004cbe:	4691      	movge	r9, r2
 8004cc0:	f1b9 0f00 	cmp.w	r9, #0
 8004cc4:	dc35      	bgt.n	8004d32 <_printf_float+0x3ae>
 8004cc6:	f04f 0800 	mov.w	r8, #0
 8004cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cce:	f104 0a1a 	add.w	sl, r4, #26
 8004cd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	eba3 0309 	sub.w	r3, r3, r9
 8004cdc:	4543      	cmp	r3, r8
 8004cde:	f77f af79 	ble.w	8004bd4 <_printf_float+0x250>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4652      	mov	r2, sl
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4628      	mov	r0, r5
 8004cea:	47b8      	blx	r7
 8004cec:	3001      	adds	r0, #1
 8004cee:	f43f aeaa 	beq.w	8004a46 <_printf_float+0xc2>
 8004cf2:	f108 0801 	add.w	r8, r8, #1
 8004cf6:	e7ec      	b.n	8004cd2 <_printf_float+0x34e>
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	d1c0      	bne.n	8004c88 <_printf_float+0x304>
 8004d06:	e69e      	b.n	8004a46 <_printf_float+0xc2>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	9205      	str	r2, [sp, #20]
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	f43f ae97 	beq.w	8004a46 <_printf_float+0xc2>
 8004d18:	9a05      	ldr	r2, [sp, #20]
 8004d1a:	f10b 0b01 	add.w	fp, fp, #1
 8004d1e:	e7b9      	b.n	8004c94 <_printf_float+0x310>
 8004d20:	ee18 3a10 	vmov	r3, s16
 8004d24:	4652      	mov	r2, sl
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d1be      	bne.n	8004cae <_printf_float+0x32a>
 8004d30:	e689      	b.n	8004a46 <_printf_float+0xc2>
 8004d32:	9a05      	ldr	r2, [sp, #20]
 8004d34:	464b      	mov	r3, r9
 8004d36:	4442      	add	r2, r8
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b8      	blx	r7
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d1c1      	bne.n	8004cc6 <_printf_float+0x342>
 8004d42:	e680      	b.n	8004a46 <_printf_float+0xc2>
 8004d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d46:	2a01      	cmp	r2, #1
 8004d48:	dc01      	bgt.n	8004d4e <_printf_float+0x3ca>
 8004d4a:	07db      	lsls	r3, r3, #31
 8004d4c:	d538      	bpl.n	8004dc0 <_printf_float+0x43c>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4642      	mov	r2, r8
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b8      	blx	r7
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f43f ae74 	beq.w	8004a46 <_printf_float+0xc2>
 8004d5e:	ee18 3a10 	vmov	r3, s16
 8004d62:	4652      	mov	r2, sl
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f ae6b 	beq.w	8004a46 <_printf_float+0xc2>
 8004d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d74:	2200      	movs	r2, #0
 8004d76:	2300      	movs	r3, #0
 8004d78:	f7fb fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d7c:	b9d8      	cbnz	r0, 8004db6 <_printf_float+0x432>
 8004d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d80:	f108 0201 	add.w	r2, r8, #1
 8004d84:	3b01      	subs	r3, #1
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d10e      	bne.n	8004dae <_printf_float+0x42a>
 8004d90:	e659      	b.n	8004a46 <_printf_float+0xc2>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4652      	mov	r2, sl
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f ae52 	beq.w	8004a46 <_printf_float+0xc2>
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	4543      	cmp	r3, r8
 8004dac:	dcf1      	bgt.n	8004d92 <_printf_float+0x40e>
 8004dae:	464b      	mov	r3, r9
 8004db0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004db4:	e6dc      	b.n	8004b70 <_printf_float+0x1ec>
 8004db6:	f04f 0800 	mov.w	r8, #0
 8004dba:	f104 0a1a 	add.w	sl, r4, #26
 8004dbe:	e7f2      	b.n	8004da6 <_printf_float+0x422>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	e7df      	b.n	8004d86 <_printf_float+0x402>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	464a      	mov	r2, r9
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae38 	beq.w	8004a46 <_printf_float+0xc2>
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	68e3      	ldr	r3, [r4, #12]
 8004ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dde:	1a5b      	subs	r3, r3, r1
 8004de0:	4543      	cmp	r3, r8
 8004de2:	dcf0      	bgt.n	8004dc6 <_printf_float+0x442>
 8004de4:	e6fa      	b.n	8004bdc <_printf_float+0x258>
 8004de6:	f04f 0800 	mov.w	r8, #0
 8004dea:	f104 0919 	add.w	r9, r4, #25
 8004dee:	e7f4      	b.n	8004dda <_printf_float+0x456>

08004df0 <_printf_common>:
 8004df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df4:	4616      	mov	r6, r2
 8004df6:	4699      	mov	r9, r3
 8004df8:	688a      	ldr	r2, [r1, #8]
 8004dfa:	690b      	ldr	r3, [r1, #16]
 8004dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	bfb8      	it	lt
 8004e04:	4613      	movlt	r3, r2
 8004e06:	6033      	str	r3, [r6, #0]
 8004e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	b10a      	cbz	r2, 8004e16 <_printf_common+0x26>
 8004e12:	3301      	adds	r3, #1
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	0699      	lsls	r1, r3, #26
 8004e1a:	bf42      	ittt	mi
 8004e1c:	6833      	ldrmi	r3, [r6, #0]
 8004e1e:	3302      	addmi	r3, #2
 8004e20:	6033      	strmi	r3, [r6, #0]
 8004e22:	6825      	ldr	r5, [r4, #0]
 8004e24:	f015 0506 	ands.w	r5, r5, #6
 8004e28:	d106      	bne.n	8004e38 <_printf_common+0x48>
 8004e2a:	f104 0a19 	add.w	sl, r4, #25
 8004e2e:	68e3      	ldr	r3, [r4, #12]
 8004e30:	6832      	ldr	r2, [r6, #0]
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	dc26      	bgt.n	8004e86 <_printf_common+0x96>
 8004e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e3c:	1e13      	subs	r3, r2, #0
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	bf18      	it	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	0692      	lsls	r2, r2, #26
 8004e46:	d42b      	bmi.n	8004ea0 <_printf_common+0xb0>
 8004e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	4638      	mov	r0, r7
 8004e50:	47c0      	blx	r8
 8004e52:	3001      	adds	r0, #1
 8004e54:	d01e      	beq.n	8004e94 <_printf_common+0xa4>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	68e5      	ldr	r5, [r4, #12]
 8004e5a:	6832      	ldr	r2, [r6, #0]
 8004e5c:	f003 0306 	and.w	r3, r3, #6
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	bf08      	it	eq
 8004e64:	1aad      	subeq	r5, r5, r2
 8004e66:	68a3      	ldr	r3, [r4, #8]
 8004e68:	6922      	ldr	r2, [r4, #16]
 8004e6a:	bf0c      	ite	eq
 8004e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e70:	2500      	movne	r5, #0
 8004e72:	4293      	cmp	r3, r2
 8004e74:	bfc4      	itt	gt
 8004e76:	1a9b      	subgt	r3, r3, r2
 8004e78:	18ed      	addgt	r5, r5, r3
 8004e7a:	2600      	movs	r6, #0
 8004e7c:	341a      	adds	r4, #26
 8004e7e:	42b5      	cmp	r5, r6
 8004e80:	d11a      	bne.n	8004eb8 <_printf_common+0xc8>
 8004e82:	2000      	movs	r0, #0
 8004e84:	e008      	b.n	8004e98 <_printf_common+0xa8>
 8004e86:	2301      	movs	r3, #1
 8004e88:	4652      	mov	r2, sl
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	47c0      	blx	r8
 8004e90:	3001      	adds	r0, #1
 8004e92:	d103      	bne.n	8004e9c <_printf_common+0xac>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	e7c6      	b.n	8004e2e <_printf_common+0x3e>
 8004ea0:	18e1      	adds	r1, r4, r3
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	2030      	movs	r0, #48	; 0x30
 8004ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004eaa:	4422      	add	r2, r4
 8004eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	e7c7      	b.n	8004e48 <_printf_common+0x58>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4622      	mov	r2, r4
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c0      	blx	r8
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d0e6      	beq.n	8004e94 <_printf_common+0xa4>
 8004ec6:	3601      	adds	r6, #1
 8004ec8:	e7d9      	b.n	8004e7e <_printf_common+0x8e>
	...

08004ecc <_printf_i>:
 8004ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	7e0f      	ldrb	r7, [r1, #24]
 8004ed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed4:	2f78      	cmp	r7, #120	; 0x78
 8004ed6:	4691      	mov	r9, r2
 8004ed8:	4680      	mov	r8, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	469a      	mov	sl, r3
 8004ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ee2:	d807      	bhi.n	8004ef4 <_printf_i+0x28>
 8004ee4:	2f62      	cmp	r7, #98	; 0x62
 8004ee6:	d80a      	bhi.n	8004efe <_printf_i+0x32>
 8004ee8:	2f00      	cmp	r7, #0
 8004eea:	f000 80d8 	beq.w	800509e <_printf_i+0x1d2>
 8004eee:	2f58      	cmp	r7, #88	; 0x58
 8004ef0:	f000 80a3 	beq.w	800503a <_printf_i+0x16e>
 8004ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004efc:	e03a      	b.n	8004f74 <_printf_i+0xa8>
 8004efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f02:	2b15      	cmp	r3, #21
 8004f04:	d8f6      	bhi.n	8004ef4 <_printf_i+0x28>
 8004f06:	a101      	add	r1, pc, #4	; (adr r1, 8004f0c <_printf_i+0x40>)
 8004f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f79 	.word	0x08004f79
 8004f14:	08004ef5 	.word	0x08004ef5
 8004f18:	08004ef5 	.word	0x08004ef5
 8004f1c:	08004ef5 	.word	0x08004ef5
 8004f20:	08004ef5 	.word	0x08004ef5
 8004f24:	08004f79 	.word	0x08004f79
 8004f28:	08004ef5 	.word	0x08004ef5
 8004f2c:	08004ef5 	.word	0x08004ef5
 8004f30:	08004ef5 	.word	0x08004ef5
 8004f34:	08004ef5 	.word	0x08004ef5
 8004f38:	08005085 	.word	0x08005085
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08005067 	.word	0x08005067
 8004f44:	08004ef5 	.word	0x08004ef5
 8004f48:	08004ef5 	.word	0x08004ef5
 8004f4c:	080050a7 	.word	0x080050a7
 8004f50:	08004ef5 	.word	0x08004ef5
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004ef5 	.word	0x08004ef5
 8004f5c:	08004ef5 	.word	0x08004ef5
 8004f60:	0800506f 	.word	0x0800506f
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	602a      	str	r2, [r5, #0]
 8004f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0a3      	b.n	80050c0 <_printf_i+0x1f4>
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	6829      	ldr	r1, [r5, #0]
 8004f7c:	0606      	lsls	r6, r0, #24
 8004f7e:	f101 0304 	add.w	r3, r1, #4
 8004f82:	d50a      	bpl.n	8004f9a <_printf_i+0xce>
 8004f84:	680e      	ldr	r6, [r1, #0]
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	2e00      	cmp	r6, #0
 8004f8a:	da03      	bge.n	8004f94 <_printf_i+0xc8>
 8004f8c:	232d      	movs	r3, #45	; 0x2d
 8004f8e:	4276      	negs	r6, r6
 8004f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f94:	485e      	ldr	r0, [pc, #376]	; (8005110 <_printf_i+0x244>)
 8004f96:	230a      	movs	r3, #10
 8004f98:	e019      	b.n	8004fce <_printf_i+0x102>
 8004f9a:	680e      	ldr	r6, [r1, #0]
 8004f9c:	602b      	str	r3, [r5, #0]
 8004f9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fa2:	bf18      	it	ne
 8004fa4:	b236      	sxthne	r6, r6
 8004fa6:	e7ef      	b.n	8004f88 <_printf_i+0xbc>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	6820      	ldr	r0, [r4, #0]
 8004fac:	1d19      	adds	r1, r3, #4
 8004fae:	6029      	str	r1, [r5, #0]
 8004fb0:	0601      	lsls	r1, r0, #24
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0xec>
 8004fb4:	681e      	ldr	r6, [r3, #0]
 8004fb6:	e002      	b.n	8004fbe <_printf_i+0xf2>
 8004fb8:	0646      	lsls	r6, r0, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0xe8>
 8004fbc:	881e      	ldrh	r6, [r3, #0]
 8004fbe:	4854      	ldr	r0, [pc, #336]	; (8005110 <_printf_i+0x244>)
 8004fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2308      	moveq	r3, #8
 8004fc6:	230a      	movne	r3, #10
 8004fc8:	2100      	movs	r1, #0
 8004fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fce:	6865      	ldr	r5, [r4, #4]
 8004fd0:	60a5      	str	r5, [r4, #8]
 8004fd2:	2d00      	cmp	r5, #0
 8004fd4:	bfa2      	ittt	ge
 8004fd6:	6821      	ldrge	r1, [r4, #0]
 8004fd8:	f021 0104 	bicge.w	r1, r1, #4
 8004fdc:	6021      	strge	r1, [r4, #0]
 8004fde:	b90e      	cbnz	r6, 8004fe4 <_printf_i+0x118>
 8004fe0:	2d00      	cmp	r5, #0
 8004fe2:	d04d      	beq.n	8005080 <_printf_i+0x1b4>
 8004fe4:	4615      	mov	r5, r2
 8004fe6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fea:	fb03 6711 	mls	r7, r3, r1, r6
 8004fee:	5dc7      	ldrb	r7, [r0, r7]
 8004ff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff4:	4637      	mov	r7, r6
 8004ff6:	42bb      	cmp	r3, r7
 8004ff8:	460e      	mov	r6, r1
 8004ffa:	d9f4      	bls.n	8004fe6 <_printf_i+0x11a>
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d10b      	bne.n	8005018 <_printf_i+0x14c>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	07de      	lsls	r6, r3, #31
 8005004:	d508      	bpl.n	8005018 <_printf_i+0x14c>
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	6861      	ldr	r1, [r4, #4]
 800500a:	4299      	cmp	r1, r3
 800500c:	bfde      	ittt	le
 800500e:	2330      	movle	r3, #48	; 0x30
 8005010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005014:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005018:	1b52      	subs	r2, r2, r5
 800501a:	6122      	str	r2, [r4, #16]
 800501c:	f8cd a000 	str.w	sl, [sp]
 8005020:	464b      	mov	r3, r9
 8005022:	aa03      	add	r2, sp, #12
 8005024:	4621      	mov	r1, r4
 8005026:	4640      	mov	r0, r8
 8005028:	f7ff fee2 	bl	8004df0 <_printf_common>
 800502c:	3001      	adds	r0, #1
 800502e:	d14c      	bne.n	80050ca <_printf_i+0x1fe>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	b004      	add	sp, #16
 8005036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503a:	4835      	ldr	r0, [pc, #212]	; (8005110 <_printf_i+0x244>)
 800503c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005040:	6829      	ldr	r1, [r5, #0]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	f851 6b04 	ldr.w	r6, [r1], #4
 8005048:	6029      	str	r1, [r5, #0]
 800504a:	061d      	lsls	r5, r3, #24
 800504c:	d514      	bpl.n	8005078 <_printf_i+0x1ac>
 800504e:	07df      	lsls	r7, r3, #31
 8005050:	bf44      	itt	mi
 8005052:	f043 0320 	orrmi.w	r3, r3, #32
 8005056:	6023      	strmi	r3, [r4, #0]
 8005058:	b91e      	cbnz	r6, 8005062 <_printf_i+0x196>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	f023 0320 	bic.w	r3, r3, #32
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	2310      	movs	r3, #16
 8005064:	e7b0      	b.n	8004fc8 <_printf_i+0xfc>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	f043 0320 	orr.w	r3, r3, #32
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	2378      	movs	r3, #120	; 0x78
 8005070:	4828      	ldr	r0, [pc, #160]	; (8005114 <_printf_i+0x248>)
 8005072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005076:	e7e3      	b.n	8005040 <_printf_i+0x174>
 8005078:	0659      	lsls	r1, r3, #25
 800507a:	bf48      	it	mi
 800507c:	b2b6      	uxthmi	r6, r6
 800507e:	e7e6      	b.n	800504e <_printf_i+0x182>
 8005080:	4615      	mov	r5, r2
 8005082:	e7bb      	b.n	8004ffc <_printf_i+0x130>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	6826      	ldr	r6, [r4, #0]
 8005088:	6961      	ldr	r1, [r4, #20]
 800508a:	1d18      	adds	r0, r3, #4
 800508c:	6028      	str	r0, [r5, #0]
 800508e:	0635      	lsls	r5, r6, #24
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	d501      	bpl.n	8005098 <_printf_i+0x1cc>
 8005094:	6019      	str	r1, [r3, #0]
 8005096:	e002      	b.n	800509e <_printf_i+0x1d2>
 8005098:	0670      	lsls	r0, r6, #25
 800509a:	d5fb      	bpl.n	8005094 <_printf_i+0x1c8>
 800509c:	8019      	strh	r1, [r3, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	4615      	mov	r5, r2
 80050a4:	e7ba      	b.n	800501c <_printf_i+0x150>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	1d1a      	adds	r2, r3, #4
 80050aa:	602a      	str	r2, [r5, #0]
 80050ac:	681d      	ldr	r5, [r3, #0]
 80050ae:	6862      	ldr	r2, [r4, #4]
 80050b0:	2100      	movs	r1, #0
 80050b2:	4628      	mov	r0, r5
 80050b4:	f7fb f894 	bl	80001e0 <memchr>
 80050b8:	b108      	cbz	r0, 80050be <_printf_i+0x1f2>
 80050ba:	1b40      	subs	r0, r0, r5
 80050bc:	6060      	str	r0, [r4, #4]
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	6123      	str	r3, [r4, #16]
 80050c2:	2300      	movs	r3, #0
 80050c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c8:	e7a8      	b.n	800501c <_printf_i+0x150>
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	462a      	mov	r2, r5
 80050ce:	4649      	mov	r1, r9
 80050d0:	4640      	mov	r0, r8
 80050d2:	47d0      	blx	sl
 80050d4:	3001      	adds	r0, #1
 80050d6:	d0ab      	beq.n	8005030 <_printf_i+0x164>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	079b      	lsls	r3, r3, #30
 80050dc:	d413      	bmi.n	8005106 <_printf_i+0x23a>
 80050de:	68e0      	ldr	r0, [r4, #12]
 80050e0:	9b03      	ldr	r3, [sp, #12]
 80050e2:	4298      	cmp	r0, r3
 80050e4:	bfb8      	it	lt
 80050e6:	4618      	movlt	r0, r3
 80050e8:	e7a4      	b.n	8005034 <_printf_i+0x168>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4632      	mov	r2, r6
 80050ee:	4649      	mov	r1, r9
 80050f0:	4640      	mov	r0, r8
 80050f2:	47d0      	blx	sl
 80050f4:	3001      	adds	r0, #1
 80050f6:	d09b      	beq.n	8005030 <_printf_i+0x164>
 80050f8:	3501      	adds	r5, #1
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	9903      	ldr	r1, [sp, #12]
 80050fe:	1a5b      	subs	r3, r3, r1
 8005100:	42ab      	cmp	r3, r5
 8005102:	dcf2      	bgt.n	80050ea <_printf_i+0x21e>
 8005104:	e7eb      	b.n	80050de <_printf_i+0x212>
 8005106:	2500      	movs	r5, #0
 8005108:	f104 0619 	add.w	r6, r4, #25
 800510c:	e7f5      	b.n	80050fa <_printf_i+0x22e>
 800510e:	bf00      	nop
 8005110:	080077de 	.word	0x080077de
 8005114:	080077ef 	.word	0x080077ef

08005118 <sniprintf>:
 8005118:	b40c      	push	{r2, r3}
 800511a:	b530      	push	{r4, r5, lr}
 800511c:	4b17      	ldr	r3, [pc, #92]	; (800517c <sniprintf+0x64>)
 800511e:	1e0c      	subs	r4, r1, #0
 8005120:	681d      	ldr	r5, [r3, #0]
 8005122:	b09d      	sub	sp, #116	; 0x74
 8005124:	da08      	bge.n	8005138 <sniprintf+0x20>
 8005126:	238b      	movs	r3, #139	; 0x8b
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	f04f 30ff 	mov.w	r0, #4294967295
 800512e:	b01d      	add	sp, #116	; 0x74
 8005130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005134:	b002      	add	sp, #8
 8005136:	4770      	bx	lr
 8005138:	f44f 7302 	mov.w	r3, #520	; 0x208
 800513c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005140:	bf14      	ite	ne
 8005142:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005146:	4623      	moveq	r3, r4
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	9307      	str	r3, [sp, #28]
 800514c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005150:	9002      	str	r0, [sp, #8]
 8005152:	9006      	str	r0, [sp, #24]
 8005154:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800515a:	ab21      	add	r3, sp, #132	; 0x84
 800515c:	a902      	add	r1, sp, #8
 800515e:	4628      	mov	r0, r5
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	f001 fb77 	bl	8006854 <_svfiprintf_r>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	bfbc      	itt	lt
 800516a:	238b      	movlt	r3, #139	; 0x8b
 800516c:	602b      	strlt	r3, [r5, #0]
 800516e:	2c00      	cmp	r4, #0
 8005170:	d0dd      	beq.n	800512e <sniprintf+0x16>
 8005172:	9b02      	ldr	r3, [sp, #8]
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e7d9      	b.n	800512e <sniprintf+0x16>
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c

08005180 <quorem>:
 8005180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	6903      	ldr	r3, [r0, #16]
 8005186:	690c      	ldr	r4, [r1, #16]
 8005188:	42a3      	cmp	r3, r4
 800518a:	4607      	mov	r7, r0
 800518c:	f2c0 8081 	blt.w	8005292 <quorem+0x112>
 8005190:	3c01      	subs	r4, #1
 8005192:	f101 0814 	add.w	r8, r1, #20
 8005196:	f100 0514 	add.w	r5, r0, #20
 800519a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051a8:	3301      	adds	r3, #1
 80051aa:	429a      	cmp	r2, r3
 80051ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051b8:	d331      	bcc.n	800521e <quorem+0x9e>
 80051ba:	f04f 0e00 	mov.w	lr, #0
 80051be:	4640      	mov	r0, r8
 80051c0:	46ac      	mov	ip, r5
 80051c2:	46f2      	mov	sl, lr
 80051c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80051c8:	b293      	uxth	r3, r2
 80051ca:	fb06 e303 	mla	r3, r6, r3, lr
 80051ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	ebaa 0303 	sub.w	r3, sl, r3
 80051d8:	f8dc a000 	ldr.w	sl, [ip]
 80051dc:	0c12      	lsrs	r2, r2, #16
 80051de:	fa13 f38a 	uxtah	r3, r3, sl
 80051e2:	fb06 e202 	mla	r2, r6, r2, lr
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	9b00      	ldr	r3, [sp, #0]
 80051ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051ee:	b292      	uxth	r2, r2
 80051f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80051fc:	4581      	cmp	r9, r0
 80051fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005202:	f84c 3b04 	str.w	r3, [ip], #4
 8005206:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800520a:	d2db      	bcs.n	80051c4 <quorem+0x44>
 800520c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005210:	b92b      	cbnz	r3, 800521e <quorem+0x9e>
 8005212:	9b01      	ldr	r3, [sp, #4]
 8005214:	3b04      	subs	r3, #4
 8005216:	429d      	cmp	r5, r3
 8005218:	461a      	mov	r2, r3
 800521a:	d32e      	bcc.n	800527a <quorem+0xfa>
 800521c:	613c      	str	r4, [r7, #16]
 800521e:	4638      	mov	r0, r7
 8005220:	f001 f8c4 	bl	80063ac <__mcmp>
 8005224:	2800      	cmp	r0, #0
 8005226:	db24      	blt.n	8005272 <quorem+0xf2>
 8005228:	3601      	adds	r6, #1
 800522a:	4628      	mov	r0, r5
 800522c:	f04f 0c00 	mov.w	ip, #0
 8005230:	f858 2b04 	ldr.w	r2, [r8], #4
 8005234:	f8d0 e000 	ldr.w	lr, [r0]
 8005238:	b293      	uxth	r3, r2
 800523a:	ebac 0303 	sub.w	r3, ip, r3
 800523e:	0c12      	lsrs	r2, r2, #16
 8005240:	fa13 f38e 	uxtah	r3, r3, lr
 8005244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800524c:	b29b      	uxth	r3, r3
 800524e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005252:	45c1      	cmp	r9, r8
 8005254:	f840 3b04 	str.w	r3, [r0], #4
 8005258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800525c:	d2e8      	bcs.n	8005230 <quorem+0xb0>
 800525e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005266:	b922      	cbnz	r2, 8005272 <quorem+0xf2>
 8005268:	3b04      	subs	r3, #4
 800526a:	429d      	cmp	r5, r3
 800526c:	461a      	mov	r2, r3
 800526e:	d30a      	bcc.n	8005286 <quorem+0x106>
 8005270:	613c      	str	r4, [r7, #16]
 8005272:	4630      	mov	r0, r6
 8005274:	b003      	add	sp, #12
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	6812      	ldr	r2, [r2, #0]
 800527c:	3b04      	subs	r3, #4
 800527e:	2a00      	cmp	r2, #0
 8005280:	d1cc      	bne.n	800521c <quorem+0x9c>
 8005282:	3c01      	subs	r4, #1
 8005284:	e7c7      	b.n	8005216 <quorem+0x96>
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	3b04      	subs	r3, #4
 800528a:	2a00      	cmp	r2, #0
 800528c:	d1f0      	bne.n	8005270 <quorem+0xf0>
 800528e:	3c01      	subs	r4, #1
 8005290:	e7eb      	b.n	800526a <quorem+0xea>
 8005292:	2000      	movs	r0, #0
 8005294:	e7ee      	b.n	8005274 <quorem+0xf4>
	...

08005298 <_dtoa_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	ed2d 8b04 	vpush	{d8-d9}
 80052a0:	ec57 6b10 	vmov	r6, r7, d0
 80052a4:	b093      	sub	sp, #76	; 0x4c
 80052a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052ac:	9106      	str	r1, [sp, #24]
 80052ae:	ee10 aa10 	vmov	sl, s0
 80052b2:	4604      	mov	r4, r0
 80052b4:	9209      	str	r2, [sp, #36]	; 0x24
 80052b6:	930c      	str	r3, [sp, #48]	; 0x30
 80052b8:	46bb      	mov	fp, r7
 80052ba:	b975      	cbnz	r5, 80052da <_dtoa_r+0x42>
 80052bc:	2010      	movs	r0, #16
 80052be:	f000 fddd 	bl	8005e7c <malloc>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6260      	str	r0, [r4, #36]	; 0x24
 80052c6:	b920      	cbnz	r0, 80052d2 <_dtoa_r+0x3a>
 80052c8:	4ba7      	ldr	r3, [pc, #668]	; (8005568 <_dtoa_r+0x2d0>)
 80052ca:	21ea      	movs	r1, #234	; 0xea
 80052cc:	48a7      	ldr	r0, [pc, #668]	; (800556c <_dtoa_r+0x2d4>)
 80052ce:	f001 fbd1 	bl	8006a74 <__assert_func>
 80052d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052d6:	6005      	str	r5, [r0, #0]
 80052d8:	60c5      	str	r5, [r0, #12]
 80052da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	b151      	cbz	r1, 80052f6 <_dtoa_r+0x5e>
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	604a      	str	r2, [r1, #4]
 80052e4:	2301      	movs	r3, #1
 80052e6:	4093      	lsls	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
 80052ea:	4620      	mov	r0, r4
 80052ec:	f000 fe1c 	bl	8005f28 <_Bfree>
 80052f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	1e3b      	subs	r3, r7, #0
 80052f8:	bfaa      	itet	ge
 80052fa:	2300      	movge	r3, #0
 80052fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005300:	f8c8 3000 	strge.w	r3, [r8]
 8005304:	4b9a      	ldr	r3, [pc, #616]	; (8005570 <_dtoa_r+0x2d8>)
 8005306:	bfbc      	itt	lt
 8005308:	2201      	movlt	r2, #1
 800530a:	f8c8 2000 	strlt.w	r2, [r8]
 800530e:	ea33 030b 	bics.w	r3, r3, fp
 8005312:	d11b      	bne.n	800534c <_dtoa_r+0xb4>
 8005314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005316:	f242 730f 	movw	r3, #9999	; 0x270f
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005320:	4333      	orrs	r3, r6
 8005322:	f000 8592 	beq.w	8005e4a <_dtoa_r+0xbb2>
 8005326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005328:	b963      	cbnz	r3, 8005344 <_dtoa_r+0xac>
 800532a:	4b92      	ldr	r3, [pc, #584]	; (8005574 <_dtoa_r+0x2dc>)
 800532c:	e022      	b.n	8005374 <_dtoa_r+0xdc>
 800532e:	4b92      	ldr	r3, [pc, #584]	; (8005578 <_dtoa_r+0x2e0>)
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	3308      	adds	r3, #8
 8005334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	9801      	ldr	r0, [sp, #4]
 800533a:	b013      	add	sp, #76	; 0x4c
 800533c:	ecbd 8b04 	vpop	{d8-d9}
 8005340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005344:	4b8b      	ldr	r3, [pc, #556]	; (8005574 <_dtoa_r+0x2dc>)
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	3303      	adds	r3, #3
 800534a:	e7f3      	b.n	8005334 <_dtoa_r+0x9c>
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	4650      	mov	r0, sl
 8005352:	4659      	mov	r1, fp
 8005354:	f7fb fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005358:	ec4b ab19 	vmov	d9, sl, fp
 800535c:	4680      	mov	r8, r0
 800535e:	b158      	cbz	r0, 8005378 <_dtoa_r+0xe0>
 8005360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005362:	2301      	movs	r3, #1
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 856b 	beq.w	8005e44 <_dtoa_r+0xbac>
 800536e:	4883      	ldr	r0, [pc, #524]	; (800557c <_dtoa_r+0x2e4>)
 8005370:	6018      	str	r0, [r3, #0]
 8005372:	1e43      	subs	r3, r0, #1
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	e7df      	b.n	8005338 <_dtoa_r+0xa0>
 8005378:	ec4b ab10 	vmov	d0, sl, fp
 800537c:	aa10      	add	r2, sp, #64	; 0x40
 800537e:	a911      	add	r1, sp, #68	; 0x44
 8005380:	4620      	mov	r0, r4
 8005382:	f001 f8b9 	bl	80064f8 <__d2b>
 8005386:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800538a:	ee08 0a10 	vmov	s16, r0
 800538e:	2d00      	cmp	r5, #0
 8005390:	f000 8084 	beq.w	800549c <_dtoa_r+0x204>
 8005394:	ee19 3a90 	vmov	r3, s19
 8005398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053a0:	4656      	mov	r6, sl
 80053a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80053ae:	4b74      	ldr	r3, [pc, #464]	; (8005580 <_dtoa_r+0x2e8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	4630      	mov	r0, r6
 80053b4:	4639      	mov	r1, r7
 80053b6:	f7fa ff67 	bl	8000288 <__aeabi_dsub>
 80053ba:	a365      	add	r3, pc, #404	; (adr r3, 8005550 <_dtoa_r+0x2b8>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fb f91a 	bl	80005f8 <__aeabi_dmul>
 80053c4:	a364      	add	r3, pc, #400	; (adr r3, 8005558 <_dtoa_r+0x2c0>)
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f7fa ff5f 	bl	800028c <__adddf3>
 80053ce:	4606      	mov	r6, r0
 80053d0:	4628      	mov	r0, r5
 80053d2:	460f      	mov	r7, r1
 80053d4:	f7fb f8a6 	bl	8000524 <__aeabi_i2d>
 80053d8:	a361      	add	r3, pc, #388	; (adr r3, 8005560 <_dtoa_r+0x2c8>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fb f90b 	bl	80005f8 <__aeabi_dmul>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fa ff4f 	bl	800028c <__adddf3>
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	f7fb fbb1 	bl	8000b58 <__aeabi_d2iz>
 80053f6:	2200      	movs	r2, #0
 80053f8:	9000      	str	r0, [sp, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fb fb6c 	bl	8000adc <__aeabi_dcmplt>
 8005404:	b150      	cbz	r0, 800541c <_dtoa_r+0x184>
 8005406:	9800      	ldr	r0, [sp, #0]
 8005408:	f7fb f88c 	bl	8000524 <__aeabi_i2d>
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	f7fb fb5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005414:	b910      	cbnz	r0, 800541c <_dtoa_r+0x184>
 8005416:	9b00      	ldr	r3, [sp, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	9b00      	ldr	r3, [sp, #0]
 800541e:	2b16      	cmp	r3, #22
 8005420:	d85a      	bhi.n	80054d8 <_dtoa_r+0x240>
 8005422:	9a00      	ldr	r2, [sp, #0]
 8005424:	4b57      	ldr	r3, [pc, #348]	; (8005584 <_dtoa_r+0x2ec>)
 8005426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	ec51 0b19 	vmov	r0, r1, d9
 8005432:	f7fb fb53 	bl	8000adc <__aeabi_dcmplt>
 8005436:	2800      	cmp	r0, #0
 8005438:	d050      	beq.n	80054dc <_dtoa_r+0x244>
 800543a:	9b00      	ldr	r3, [sp, #0]
 800543c:	3b01      	subs	r3, #1
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	930b      	str	r3, [sp, #44]	; 0x2c
 8005444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005446:	1b5d      	subs	r5, r3, r5
 8005448:	1e6b      	subs	r3, r5, #1
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	bf45      	ittet	mi
 800544e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005452:	9304      	strmi	r3, [sp, #16]
 8005454:	2300      	movpl	r3, #0
 8005456:	2300      	movmi	r3, #0
 8005458:	bf4c      	ite	mi
 800545a:	9305      	strmi	r3, [sp, #20]
 800545c:	9304      	strpl	r3, [sp, #16]
 800545e:	9b00      	ldr	r3, [sp, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db3d      	blt.n	80054e0 <_dtoa_r+0x248>
 8005464:	9b05      	ldr	r3, [sp, #20]
 8005466:	9a00      	ldr	r2, [sp, #0]
 8005468:	920a      	str	r2, [sp, #40]	; 0x28
 800546a:	4413      	add	r3, r2
 800546c:	9305      	str	r3, [sp, #20]
 800546e:	2300      	movs	r3, #0
 8005470:	9307      	str	r3, [sp, #28]
 8005472:	9b06      	ldr	r3, [sp, #24]
 8005474:	2b09      	cmp	r3, #9
 8005476:	f200 8089 	bhi.w	800558c <_dtoa_r+0x2f4>
 800547a:	2b05      	cmp	r3, #5
 800547c:	bfc4      	itt	gt
 800547e:	3b04      	subgt	r3, #4
 8005480:	9306      	strgt	r3, [sp, #24]
 8005482:	9b06      	ldr	r3, [sp, #24]
 8005484:	f1a3 0302 	sub.w	r3, r3, #2
 8005488:	bfcc      	ite	gt
 800548a:	2500      	movgt	r5, #0
 800548c:	2501      	movle	r5, #1
 800548e:	2b03      	cmp	r3, #3
 8005490:	f200 8087 	bhi.w	80055a2 <_dtoa_r+0x30a>
 8005494:	e8df f003 	tbb	[pc, r3]
 8005498:	59383a2d 	.word	0x59383a2d
 800549c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054a0:	441d      	add	r5, r3
 80054a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	bfc1      	itttt	gt
 80054aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80054b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054ba:	bfda      	itte	le
 80054bc:	f1c3 0320 	rsble	r3, r3, #32
 80054c0:	fa06 f003 	lslle.w	r0, r6, r3
 80054c4:	4318      	orrgt	r0, r3
 80054c6:	f7fb f81d 	bl	8000504 <__aeabi_ui2d>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4606      	mov	r6, r0
 80054ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054d2:	3d01      	subs	r5, #1
 80054d4:	930e      	str	r3, [sp, #56]	; 0x38
 80054d6:	e76a      	b.n	80053ae <_dtoa_r+0x116>
 80054d8:	2301      	movs	r3, #1
 80054da:	e7b2      	b.n	8005442 <_dtoa_r+0x1aa>
 80054dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80054de:	e7b1      	b.n	8005444 <_dtoa_r+0x1ac>
 80054e0:	9b04      	ldr	r3, [sp, #16]
 80054e2:	9a00      	ldr	r2, [sp, #0]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	4253      	negs	r3, r2
 80054ea:	9307      	str	r3, [sp, #28]
 80054ec:	2300      	movs	r3, #0
 80054ee:	930a      	str	r3, [sp, #40]	; 0x28
 80054f0:	e7bf      	b.n	8005472 <_dtoa_r+0x1da>
 80054f2:	2300      	movs	r3, #0
 80054f4:	9308      	str	r3, [sp, #32]
 80054f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dc55      	bgt.n	80055a8 <_dtoa_r+0x310>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005502:	461a      	mov	r2, r3
 8005504:	9209      	str	r2, [sp, #36]	; 0x24
 8005506:	e00c      	b.n	8005522 <_dtoa_r+0x28a>
 8005508:	2301      	movs	r3, #1
 800550a:	e7f3      	b.n	80054f4 <_dtoa_r+0x25c>
 800550c:	2300      	movs	r3, #0
 800550e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005510:	9308      	str	r3, [sp, #32]
 8005512:	9b00      	ldr	r3, [sp, #0]
 8005514:	4413      	add	r3, r2
 8005516:	9302      	str	r3, [sp, #8]
 8005518:	3301      	adds	r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	9303      	str	r3, [sp, #12]
 800551e:	bfb8      	it	lt
 8005520:	2301      	movlt	r3, #1
 8005522:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005524:	2200      	movs	r2, #0
 8005526:	6042      	str	r2, [r0, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	f102 0614 	add.w	r6, r2, #20
 800552e:	429e      	cmp	r6, r3
 8005530:	6841      	ldr	r1, [r0, #4]
 8005532:	d93d      	bls.n	80055b0 <_dtoa_r+0x318>
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fcb7 	bl	8005ea8 <_Balloc>
 800553a:	9001      	str	r0, [sp, #4]
 800553c:	2800      	cmp	r0, #0
 800553e:	d13b      	bne.n	80055b8 <_dtoa_r+0x320>
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <_dtoa_r+0x2f0>)
 8005542:	4602      	mov	r2, r0
 8005544:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005548:	e6c0      	b.n	80052cc <_dtoa_r+0x34>
 800554a:	2301      	movs	r3, #1
 800554c:	e7df      	b.n	800550e <_dtoa_r+0x276>
 800554e:	bf00      	nop
 8005550:	636f4361 	.word	0x636f4361
 8005554:	3fd287a7 	.word	0x3fd287a7
 8005558:	8b60c8b3 	.word	0x8b60c8b3
 800555c:	3fc68a28 	.word	0x3fc68a28
 8005560:	509f79fb 	.word	0x509f79fb
 8005564:	3fd34413 	.word	0x3fd34413
 8005568:	0800780d 	.word	0x0800780d
 800556c:	08007824 	.word	0x08007824
 8005570:	7ff00000 	.word	0x7ff00000
 8005574:	08007809 	.word	0x08007809
 8005578:	08007800 	.word	0x08007800
 800557c:	080077dd 	.word	0x080077dd
 8005580:	3ff80000 	.word	0x3ff80000
 8005584:	08007918 	.word	0x08007918
 8005588:	0800787f 	.word	0x0800787f
 800558c:	2501      	movs	r5, #1
 800558e:	2300      	movs	r3, #0
 8005590:	9306      	str	r3, [sp, #24]
 8005592:	9508      	str	r5, [sp, #32]
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	2312      	movs	r3, #18
 80055a0:	e7b0      	b.n	8005504 <_dtoa_r+0x26c>
 80055a2:	2301      	movs	r3, #1
 80055a4:	9308      	str	r3, [sp, #32]
 80055a6:	e7f5      	b.n	8005594 <_dtoa_r+0x2fc>
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055ae:	e7b8      	b.n	8005522 <_dtoa_r+0x28a>
 80055b0:	3101      	adds	r1, #1
 80055b2:	6041      	str	r1, [r0, #4]
 80055b4:	0052      	lsls	r2, r2, #1
 80055b6:	e7b8      	b.n	800552a <_dtoa_r+0x292>
 80055b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ba:	9a01      	ldr	r2, [sp, #4]
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	2b0e      	cmp	r3, #14
 80055c2:	f200 809d 	bhi.w	8005700 <_dtoa_r+0x468>
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	f000 809a 	beq.w	8005700 <_dtoa_r+0x468>
 80055cc:	9b00      	ldr	r3, [sp, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd32      	ble.n	8005638 <_dtoa_r+0x3a0>
 80055d2:	4ab7      	ldr	r2, [pc, #732]	; (80058b0 <_dtoa_r+0x618>)
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055e0:	9b00      	ldr	r3, [sp, #0]
 80055e2:	05d8      	lsls	r0, r3, #23
 80055e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055e8:	d516      	bpl.n	8005618 <_dtoa_r+0x380>
 80055ea:	4bb2      	ldr	r3, [pc, #712]	; (80058b4 <_dtoa_r+0x61c>)
 80055ec:	ec51 0b19 	vmov	r0, r1, d9
 80055f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055f4:	f7fb f92a 	bl	800084c <__aeabi_ddiv>
 80055f8:	f007 070f 	and.w	r7, r7, #15
 80055fc:	4682      	mov	sl, r0
 80055fe:	468b      	mov	fp, r1
 8005600:	2503      	movs	r5, #3
 8005602:	4eac      	ldr	r6, [pc, #688]	; (80058b4 <_dtoa_r+0x61c>)
 8005604:	b957      	cbnz	r7, 800561c <_dtoa_r+0x384>
 8005606:	4642      	mov	r2, r8
 8005608:	464b      	mov	r3, r9
 800560a:	4650      	mov	r0, sl
 800560c:	4659      	mov	r1, fp
 800560e:	f7fb f91d 	bl	800084c <__aeabi_ddiv>
 8005612:	4682      	mov	sl, r0
 8005614:	468b      	mov	fp, r1
 8005616:	e028      	b.n	800566a <_dtoa_r+0x3d2>
 8005618:	2502      	movs	r5, #2
 800561a:	e7f2      	b.n	8005602 <_dtoa_r+0x36a>
 800561c:	07f9      	lsls	r1, r7, #31
 800561e:	d508      	bpl.n	8005632 <_dtoa_r+0x39a>
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005628:	f7fa ffe6 	bl	80005f8 <__aeabi_dmul>
 800562c:	3501      	adds	r5, #1
 800562e:	4680      	mov	r8, r0
 8005630:	4689      	mov	r9, r1
 8005632:	107f      	asrs	r7, r7, #1
 8005634:	3608      	adds	r6, #8
 8005636:	e7e5      	b.n	8005604 <_dtoa_r+0x36c>
 8005638:	f000 809b 	beq.w	8005772 <_dtoa_r+0x4da>
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	4f9d      	ldr	r7, [pc, #628]	; (80058b4 <_dtoa_r+0x61c>)
 8005640:	425e      	negs	r6, r3
 8005642:	4b9b      	ldr	r3, [pc, #620]	; (80058b0 <_dtoa_r+0x618>)
 8005644:	f006 020f 	and.w	r2, r6, #15
 8005648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	ec51 0b19 	vmov	r0, r1, d9
 8005654:	f7fa ffd0 	bl	80005f8 <__aeabi_dmul>
 8005658:	1136      	asrs	r6, r6, #4
 800565a:	4682      	mov	sl, r0
 800565c:	468b      	mov	fp, r1
 800565e:	2300      	movs	r3, #0
 8005660:	2502      	movs	r5, #2
 8005662:	2e00      	cmp	r6, #0
 8005664:	d17a      	bne.n	800575c <_dtoa_r+0x4c4>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1d3      	bne.n	8005612 <_dtoa_r+0x37a>
 800566a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8082 	beq.w	8005776 <_dtoa_r+0x4de>
 8005672:	4b91      	ldr	r3, [pc, #580]	; (80058b8 <_dtoa_r+0x620>)
 8005674:	2200      	movs	r2, #0
 8005676:	4650      	mov	r0, sl
 8005678:	4659      	mov	r1, fp
 800567a:	f7fb fa2f 	bl	8000adc <__aeabi_dcmplt>
 800567e:	2800      	cmp	r0, #0
 8005680:	d079      	beq.n	8005776 <_dtoa_r+0x4de>
 8005682:	9b03      	ldr	r3, [sp, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d076      	beq.n	8005776 <_dtoa_r+0x4de>
 8005688:	9b02      	ldr	r3, [sp, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	dd36      	ble.n	80056fc <_dtoa_r+0x464>
 800568e:	9b00      	ldr	r3, [sp, #0]
 8005690:	4650      	mov	r0, sl
 8005692:	4659      	mov	r1, fp
 8005694:	1e5f      	subs	r7, r3, #1
 8005696:	2200      	movs	r2, #0
 8005698:	4b88      	ldr	r3, [pc, #544]	; (80058bc <_dtoa_r+0x624>)
 800569a:	f7fa ffad 	bl	80005f8 <__aeabi_dmul>
 800569e:	9e02      	ldr	r6, [sp, #8]
 80056a0:	4682      	mov	sl, r0
 80056a2:	468b      	mov	fp, r1
 80056a4:	3501      	adds	r5, #1
 80056a6:	4628      	mov	r0, r5
 80056a8:	f7fa ff3c 	bl	8000524 <__aeabi_i2d>
 80056ac:	4652      	mov	r2, sl
 80056ae:	465b      	mov	r3, fp
 80056b0:	f7fa ffa2 	bl	80005f8 <__aeabi_dmul>
 80056b4:	4b82      	ldr	r3, [pc, #520]	; (80058c0 <_dtoa_r+0x628>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	f7fa fde8 	bl	800028c <__adddf3>
 80056bc:	46d0      	mov	r8, sl
 80056be:	46d9      	mov	r9, fp
 80056c0:	4682      	mov	sl, r0
 80056c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	d158      	bne.n	800577c <_dtoa_r+0x4e4>
 80056ca:	4b7e      	ldr	r3, [pc, #504]	; (80058c4 <_dtoa_r+0x62c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fa fdd9 	bl	8000288 <__aeabi_dsub>
 80056d6:	4652      	mov	r2, sl
 80056d8:	465b      	mov	r3, fp
 80056da:	4680      	mov	r8, r0
 80056dc:	4689      	mov	r9, r1
 80056de:	f7fb fa1b 	bl	8000b18 <__aeabi_dcmpgt>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f040 8295 	bne.w	8005c12 <_dtoa_r+0x97a>
 80056e8:	4652      	mov	r2, sl
 80056ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056ee:	4640      	mov	r0, r8
 80056f0:	4649      	mov	r1, r9
 80056f2:	f7fb f9f3 	bl	8000adc <__aeabi_dcmplt>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f040 8289 	bne.w	8005c0e <_dtoa_r+0x976>
 80056fc:	ec5b ab19 	vmov	sl, fp, d9
 8005700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005702:	2b00      	cmp	r3, #0
 8005704:	f2c0 8148 	blt.w	8005998 <_dtoa_r+0x700>
 8005708:	9a00      	ldr	r2, [sp, #0]
 800570a:	2a0e      	cmp	r2, #14
 800570c:	f300 8144 	bgt.w	8005998 <_dtoa_r+0x700>
 8005710:	4b67      	ldr	r3, [pc, #412]	; (80058b0 <_dtoa_r+0x618>)
 8005712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	f280 80d5 	bge.w	80058cc <_dtoa_r+0x634>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f300 80d1 	bgt.w	80058cc <_dtoa_r+0x634>
 800572a:	f040 826f 	bne.w	8005c0c <_dtoa_r+0x974>
 800572e:	4b65      	ldr	r3, [pc, #404]	; (80058c4 <_dtoa_r+0x62c>)
 8005730:	2200      	movs	r2, #0
 8005732:	4640      	mov	r0, r8
 8005734:	4649      	mov	r1, r9
 8005736:	f7fa ff5f 	bl	80005f8 <__aeabi_dmul>
 800573a:	4652      	mov	r2, sl
 800573c:	465b      	mov	r3, fp
 800573e:	f7fb f9e1 	bl	8000b04 <__aeabi_dcmpge>
 8005742:	9e03      	ldr	r6, [sp, #12]
 8005744:	4637      	mov	r7, r6
 8005746:	2800      	cmp	r0, #0
 8005748:	f040 8245 	bne.w	8005bd6 <_dtoa_r+0x93e>
 800574c:	9d01      	ldr	r5, [sp, #4]
 800574e:	2331      	movs	r3, #49	; 0x31
 8005750:	f805 3b01 	strb.w	r3, [r5], #1
 8005754:	9b00      	ldr	r3, [sp, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	e240      	b.n	8005bde <_dtoa_r+0x946>
 800575c:	07f2      	lsls	r2, r6, #31
 800575e:	d505      	bpl.n	800576c <_dtoa_r+0x4d4>
 8005760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005764:	f7fa ff48 	bl	80005f8 <__aeabi_dmul>
 8005768:	3501      	adds	r5, #1
 800576a:	2301      	movs	r3, #1
 800576c:	1076      	asrs	r6, r6, #1
 800576e:	3708      	adds	r7, #8
 8005770:	e777      	b.n	8005662 <_dtoa_r+0x3ca>
 8005772:	2502      	movs	r5, #2
 8005774:	e779      	b.n	800566a <_dtoa_r+0x3d2>
 8005776:	9f00      	ldr	r7, [sp, #0]
 8005778:	9e03      	ldr	r6, [sp, #12]
 800577a:	e794      	b.n	80056a6 <_dtoa_r+0x40e>
 800577c:	9901      	ldr	r1, [sp, #4]
 800577e:	4b4c      	ldr	r3, [pc, #304]	; (80058b0 <_dtoa_r+0x618>)
 8005780:	4431      	add	r1, r6
 8005782:	910d      	str	r1, [sp, #52]	; 0x34
 8005784:	9908      	ldr	r1, [sp, #32]
 8005786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800578a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800578e:	2900      	cmp	r1, #0
 8005790:	d043      	beq.n	800581a <_dtoa_r+0x582>
 8005792:	494d      	ldr	r1, [pc, #308]	; (80058c8 <_dtoa_r+0x630>)
 8005794:	2000      	movs	r0, #0
 8005796:	f7fb f859 	bl	800084c <__aeabi_ddiv>
 800579a:	4652      	mov	r2, sl
 800579c:	465b      	mov	r3, fp
 800579e:	f7fa fd73 	bl	8000288 <__aeabi_dsub>
 80057a2:	9d01      	ldr	r5, [sp, #4]
 80057a4:	4682      	mov	sl, r0
 80057a6:	468b      	mov	fp, r1
 80057a8:	4649      	mov	r1, r9
 80057aa:	4640      	mov	r0, r8
 80057ac:	f7fb f9d4 	bl	8000b58 <__aeabi_d2iz>
 80057b0:	4606      	mov	r6, r0
 80057b2:	f7fa feb7 	bl	8000524 <__aeabi_i2d>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f7fa fd63 	bl	8000288 <__aeabi_dsub>
 80057c2:	3630      	adds	r6, #48	; 0x30
 80057c4:	f805 6b01 	strb.w	r6, [r5], #1
 80057c8:	4652      	mov	r2, sl
 80057ca:	465b      	mov	r3, fp
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	f7fb f984 	bl	8000adc <__aeabi_dcmplt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d163      	bne.n	80058a0 <_dtoa_r+0x608>
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	4936      	ldr	r1, [pc, #216]	; (80058b8 <_dtoa_r+0x620>)
 80057de:	2000      	movs	r0, #0
 80057e0:	f7fa fd52 	bl	8000288 <__aeabi_dsub>
 80057e4:	4652      	mov	r2, sl
 80057e6:	465b      	mov	r3, fp
 80057e8:	f7fb f978 	bl	8000adc <__aeabi_dcmplt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 80b5 	bne.w	800595c <_dtoa_r+0x6c4>
 80057f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057f4:	429d      	cmp	r5, r3
 80057f6:	d081      	beq.n	80056fc <_dtoa_r+0x464>
 80057f8:	4b30      	ldr	r3, [pc, #192]	; (80058bc <_dtoa_r+0x624>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	4650      	mov	r0, sl
 80057fe:	4659      	mov	r1, fp
 8005800:	f7fa fefa 	bl	80005f8 <__aeabi_dmul>
 8005804:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <_dtoa_r+0x624>)
 8005806:	4682      	mov	sl, r0
 8005808:	468b      	mov	fp, r1
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	2200      	movs	r2, #0
 8005810:	f7fa fef2 	bl	80005f8 <__aeabi_dmul>
 8005814:	4680      	mov	r8, r0
 8005816:	4689      	mov	r9, r1
 8005818:	e7c6      	b.n	80057a8 <_dtoa_r+0x510>
 800581a:	4650      	mov	r0, sl
 800581c:	4659      	mov	r1, fp
 800581e:	f7fa feeb 	bl	80005f8 <__aeabi_dmul>
 8005822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005824:	9d01      	ldr	r5, [sp, #4]
 8005826:	930f      	str	r3, [sp, #60]	; 0x3c
 8005828:	4682      	mov	sl, r0
 800582a:	468b      	mov	fp, r1
 800582c:	4649      	mov	r1, r9
 800582e:	4640      	mov	r0, r8
 8005830:	f7fb f992 	bl	8000b58 <__aeabi_d2iz>
 8005834:	4606      	mov	r6, r0
 8005836:	f7fa fe75 	bl	8000524 <__aeabi_i2d>
 800583a:	3630      	adds	r6, #48	; 0x30
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	f7fa fd20 	bl	8000288 <__aeabi_dsub>
 8005848:	f805 6b01 	strb.w	r6, [r5], #1
 800584c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584e:	429d      	cmp	r5, r3
 8005850:	4680      	mov	r8, r0
 8005852:	4689      	mov	r9, r1
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	d124      	bne.n	80058a4 <_dtoa_r+0x60c>
 800585a:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <_dtoa_r+0x630>)
 800585c:	4650      	mov	r0, sl
 800585e:	4659      	mov	r1, fp
 8005860:	f7fa fd14 	bl	800028c <__adddf3>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	f7fb f954 	bl	8000b18 <__aeabi_dcmpgt>
 8005870:	2800      	cmp	r0, #0
 8005872:	d173      	bne.n	800595c <_dtoa_r+0x6c4>
 8005874:	4652      	mov	r2, sl
 8005876:	465b      	mov	r3, fp
 8005878:	4913      	ldr	r1, [pc, #76]	; (80058c8 <_dtoa_r+0x630>)
 800587a:	2000      	movs	r0, #0
 800587c:	f7fa fd04 	bl	8000288 <__aeabi_dsub>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fb f928 	bl	8000adc <__aeabi_dcmplt>
 800588c:	2800      	cmp	r0, #0
 800588e:	f43f af35 	beq.w	80056fc <_dtoa_r+0x464>
 8005892:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005894:	1e6b      	subs	r3, r5, #1
 8005896:	930f      	str	r3, [sp, #60]	; 0x3c
 8005898:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d0f8      	beq.n	8005892 <_dtoa_r+0x5fa>
 80058a0:	9700      	str	r7, [sp, #0]
 80058a2:	e049      	b.n	8005938 <_dtoa_r+0x6a0>
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <_dtoa_r+0x624>)
 80058a6:	f7fa fea7 	bl	80005f8 <__aeabi_dmul>
 80058aa:	4680      	mov	r8, r0
 80058ac:	4689      	mov	r9, r1
 80058ae:	e7bd      	b.n	800582c <_dtoa_r+0x594>
 80058b0:	08007918 	.word	0x08007918
 80058b4:	080078f0 	.word	0x080078f0
 80058b8:	3ff00000 	.word	0x3ff00000
 80058bc:	40240000 	.word	0x40240000
 80058c0:	401c0000 	.word	0x401c0000
 80058c4:	40140000 	.word	0x40140000
 80058c8:	3fe00000 	.word	0x3fe00000
 80058cc:	9d01      	ldr	r5, [sp, #4]
 80058ce:	4656      	mov	r6, sl
 80058d0:	465f      	mov	r7, fp
 80058d2:	4642      	mov	r2, r8
 80058d4:	464b      	mov	r3, r9
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	f7fa ffb7 	bl	800084c <__aeabi_ddiv>
 80058de:	f7fb f93b 	bl	8000b58 <__aeabi_d2iz>
 80058e2:	4682      	mov	sl, r0
 80058e4:	f7fa fe1e 	bl	8000524 <__aeabi_i2d>
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	f7fa fe84 	bl	80005f8 <__aeabi_dmul>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058fc:	f7fa fcc4 	bl	8000288 <__aeabi_dsub>
 8005900:	f805 6b01 	strb.w	r6, [r5], #1
 8005904:	9e01      	ldr	r6, [sp, #4]
 8005906:	9f03      	ldr	r7, [sp, #12]
 8005908:	1bae      	subs	r6, r5, r6
 800590a:	42b7      	cmp	r7, r6
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	d135      	bne.n	800597e <_dtoa_r+0x6e6>
 8005912:	f7fa fcbb 	bl	800028c <__adddf3>
 8005916:	4642      	mov	r2, r8
 8005918:	464b      	mov	r3, r9
 800591a:	4606      	mov	r6, r0
 800591c:	460f      	mov	r7, r1
 800591e:	f7fb f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 8005922:	b9d0      	cbnz	r0, 800595a <_dtoa_r+0x6c2>
 8005924:	4642      	mov	r2, r8
 8005926:	464b      	mov	r3, r9
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	f7fb f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005930:	b110      	cbz	r0, 8005938 <_dtoa_r+0x6a0>
 8005932:	f01a 0f01 	tst.w	sl, #1
 8005936:	d110      	bne.n	800595a <_dtoa_r+0x6c2>
 8005938:	4620      	mov	r0, r4
 800593a:	ee18 1a10 	vmov	r1, s16
 800593e:	f000 faf3 	bl	8005f28 <_Bfree>
 8005942:	2300      	movs	r3, #0
 8005944:	9800      	ldr	r0, [sp, #0]
 8005946:	702b      	strb	r3, [r5, #0]
 8005948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800594a:	3001      	adds	r0, #1
 800594c:	6018      	str	r0, [r3, #0]
 800594e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005950:	2b00      	cmp	r3, #0
 8005952:	f43f acf1 	beq.w	8005338 <_dtoa_r+0xa0>
 8005956:	601d      	str	r5, [r3, #0]
 8005958:	e4ee      	b.n	8005338 <_dtoa_r+0xa0>
 800595a:	9f00      	ldr	r7, [sp, #0]
 800595c:	462b      	mov	r3, r5
 800595e:	461d      	mov	r5, r3
 8005960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005964:	2a39      	cmp	r2, #57	; 0x39
 8005966:	d106      	bne.n	8005976 <_dtoa_r+0x6de>
 8005968:	9a01      	ldr	r2, [sp, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d1f7      	bne.n	800595e <_dtoa_r+0x6c6>
 800596e:	9901      	ldr	r1, [sp, #4]
 8005970:	2230      	movs	r2, #48	; 0x30
 8005972:	3701      	adds	r7, #1
 8005974:	700a      	strb	r2, [r1, #0]
 8005976:	781a      	ldrb	r2, [r3, #0]
 8005978:	3201      	adds	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	e790      	b.n	80058a0 <_dtoa_r+0x608>
 800597e:	4ba6      	ldr	r3, [pc, #664]	; (8005c18 <_dtoa_r+0x980>)
 8005980:	2200      	movs	r2, #0
 8005982:	f7fa fe39 	bl	80005f8 <__aeabi_dmul>
 8005986:	2200      	movs	r2, #0
 8005988:	2300      	movs	r3, #0
 800598a:	4606      	mov	r6, r0
 800598c:	460f      	mov	r7, r1
 800598e:	f7fb f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005992:	2800      	cmp	r0, #0
 8005994:	d09d      	beq.n	80058d2 <_dtoa_r+0x63a>
 8005996:	e7cf      	b.n	8005938 <_dtoa_r+0x6a0>
 8005998:	9a08      	ldr	r2, [sp, #32]
 800599a:	2a00      	cmp	r2, #0
 800599c:	f000 80d7 	beq.w	8005b4e <_dtoa_r+0x8b6>
 80059a0:	9a06      	ldr	r2, [sp, #24]
 80059a2:	2a01      	cmp	r2, #1
 80059a4:	f300 80ba 	bgt.w	8005b1c <_dtoa_r+0x884>
 80059a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	f000 80b2 	beq.w	8005b14 <_dtoa_r+0x87c>
 80059b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059b4:	9e07      	ldr	r6, [sp, #28]
 80059b6:	9d04      	ldr	r5, [sp, #16]
 80059b8:	9a04      	ldr	r2, [sp, #16]
 80059ba:	441a      	add	r2, r3
 80059bc:	9204      	str	r2, [sp, #16]
 80059be:	9a05      	ldr	r2, [sp, #20]
 80059c0:	2101      	movs	r1, #1
 80059c2:	441a      	add	r2, r3
 80059c4:	4620      	mov	r0, r4
 80059c6:	9205      	str	r2, [sp, #20]
 80059c8:	f000 fb66 	bl	8006098 <__i2b>
 80059cc:	4607      	mov	r7, r0
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	dd0c      	ble.n	80059ec <_dtoa_r+0x754>
 80059d2:	9b05      	ldr	r3, [sp, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dd09      	ble.n	80059ec <_dtoa_r+0x754>
 80059d8:	42ab      	cmp	r3, r5
 80059da:	9a04      	ldr	r2, [sp, #16]
 80059dc:	bfa8      	it	ge
 80059de:	462b      	movge	r3, r5
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	9204      	str	r2, [sp, #16]
 80059e4:	9a05      	ldr	r2, [sp, #20]
 80059e6:	1aed      	subs	r5, r5, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	9305      	str	r3, [sp, #20]
 80059ec:	9b07      	ldr	r3, [sp, #28]
 80059ee:	b31b      	cbz	r3, 8005a38 <_dtoa_r+0x7a0>
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80af 	beq.w	8005b56 <_dtoa_r+0x8be>
 80059f8:	2e00      	cmp	r6, #0
 80059fa:	dd13      	ble.n	8005a24 <_dtoa_r+0x78c>
 80059fc:	4639      	mov	r1, r7
 80059fe:	4632      	mov	r2, r6
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 fc09 	bl	8006218 <__pow5mult>
 8005a06:	ee18 2a10 	vmov	r2, s16
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 fb58 	bl	80060c4 <__multiply>
 8005a14:	ee18 1a10 	vmov	r1, s16
 8005a18:	4680      	mov	r8, r0
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fa84 	bl	8005f28 <_Bfree>
 8005a20:	ee08 8a10 	vmov	s16, r8
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	1b9a      	subs	r2, r3, r6
 8005a28:	d006      	beq.n	8005a38 <_dtoa_r+0x7a0>
 8005a2a:	ee18 1a10 	vmov	r1, s16
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 fbf2 	bl	8006218 <__pow5mult>
 8005a34:	ee08 0a10 	vmov	s16, r0
 8005a38:	2101      	movs	r1, #1
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f000 fb2c 	bl	8006098 <__i2b>
 8005a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	4606      	mov	r6, r0
 8005a46:	f340 8088 	ble.w	8005b5a <_dtoa_r+0x8c2>
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4601      	mov	r1, r0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 fbe2 	bl	8006218 <__pow5mult>
 8005a54:	9b06      	ldr	r3, [sp, #24]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	4606      	mov	r6, r0
 8005a5a:	f340 8081 	ble.w	8005b60 <_dtoa_r+0x8c8>
 8005a5e:	f04f 0800 	mov.w	r8, #0
 8005a62:	6933      	ldr	r3, [r6, #16]
 8005a64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a68:	6918      	ldr	r0, [r3, #16]
 8005a6a:	f000 fac5 	bl	8005ff8 <__hi0bits>
 8005a6e:	f1c0 0020 	rsb	r0, r0, #32
 8005a72:	9b05      	ldr	r3, [sp, #20]
 8005a74:	4418      	add	r0, r3
 8005a76:	f010 001f 	ands.w	r0, r0, #31
 8005a7a:	f000 8092 	beq.w	8005ba2 <_dtoa_r+0x90a>
 8005a7e:	f1c0 0320 	rsb	r3, r0, #32
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	f340 808a 	ble.w	8005b9c <_dtoa_r+0x904>
 8005a88:	f1c0 001c 	rsb	r0, r0, #28
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	4403      	add	r3, r0
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	9b05      	ldr	r3, [sp, #20]
 8005a94:	4403      	add	r3, r0
 8005a96:	4405      	add	r5, r0
 8005a98:	9305      	str	r3, [sp, #20]
 8005a9a:	9b04      	ldr	r3, [sp, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	dd07      	ble.n	8005ab0 <_dtoa_r+0x818>
 8005aa0:	ee18 1a10 	vmov	r1, s16
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fc10 	bl	80062cc <__lshift>
 8005aac:	ee08 0a10 	vmov	s16, r0
 8005ab0:	9b05      	ldr	r3, [sp, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	dd05      	ble.n	8005ac2 <_dtoa_r+0x82a>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 fc06 	bl	80062cc <__lshift>
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d06e      	beq.n	8005ba6 <_dtoa_r+0x90e>
 8005ac8:	ee18 0a10 	vmov	r0, s16
 8005acc:	4631      	mov	r1, r6
 8005ace:	f000 fc6d 	bl	80063ac <__mcmp>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	da67      	bge.n	8005ba6 <_dtoa_r+0x90e>
 8005ad6:	9b00      	ldr	r3, [sp, #0]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	ee18 1a10 	vmov	r1, s16
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fa41 	bl	8005f6c <__multadd>
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	ee08 0a10 	vmov	s16, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 81b1 	beq.w	8005e58 <_dtoa_r+0xbc0>
 8005af6:	2300      	movs	r3, #0
 8005af8:	4639      	mov	r1, r7
 8005afa:	220a      	movs	r2, #10
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fa35 	bl	8005f6c <__multadd>
 8005b02:	9b02      	ldr	r3, [sp, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	4607      	mov	r7, r0
 8005b08:	f300 808e 	bgt.w	8005c28 <_dtoa_r+0x990>
 8005b0c:	9b06      	ldr	r3, [sp, #24]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	dc51      	bgt.n	8005bb6 <_dtoa_r+0x91e>
 8005b12:	e089      	b.n	8005c28 <_dtoa_r+0x990>
 8005b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b1a:	e74b      	b.n	80059b4 <_dtoa_r+0x71c>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	1e5e      	subs	r6, r3, #1
 8005b20:	9b07      	ldr	r3, [sp, #28]
 8005b22:	42b3      	cmp	r3, r6
 8005b24:	bfbf      	itttt	lt
 8005b26:	9b07      	ldrlt	r3, [sp, #28]
 8005b28:	9607      	strlt	r6, [sp, #28]
 8005b2a:	1af2      	sublt	r2, r6, r3
 8005b2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b2e:	bfb6      	itet	lt
 8005b30:	189b      	addlt	r3, r3, r2
 8005b32:	1b9e      	subge	r6, r3, r6
 8005b34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	bfb8      	it	lt
 8005b3a:	2600      	movlt	r6, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bfb7      	itett	lt
 8005b40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b48:	1a9d      	sublt	r5, r3, r2
 8005b4a:	2300      	movlt	r3, #0
 8005b4c:	e734      	b.n	80059b8 <_dtoa_r+0x720>
 8005b4e:	9e07      	ldr	r6, [sp, #28]
 8005b50:	9d04      	ldr	r5, [sp, #16]
 8005b52:	9f08      	ldr	r7, [sp, #32]
 8005b54:	e73b      	b.n	80059ce <_dtoa_r+0x736>
 8005b56:	9a07      	ldr	r2, [sp, #28]
 8005b58:	e767      	b.n	8005a2a <_dtoa_r+0x792>
 8005b5a:	9b06      	ldr	r3, [sp, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	dc18      	bgt.n	8005b92 <_dtoa_r+0x8fa>
 8005b60:	f1ba 0f00 	cmp.w	sl, #0
 8005b64:	d115      	bne.n	8005b92 <_dtoa_r+0x8fa>
 8005b66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b6a:	b993      	cbnz	r3, 8005b92 <_dtoa_r+0x8fa>
 8005b6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b70:	0d1b      	lsrs	r3, r3, #20
 8005b72:	051b      	lsls	r3, r3, #20
 8005b74:	b183      	cbz	r3, 8005b98 <_dtoa_r+0x900>
 8005b76:	9b04      	ldr	r3, [sp, #16]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	9304      	str	r3, [sp, #16]
 8005b7c:	9b05      	ldr	r3, [sp, #20]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	f04f 0801 	mov.w	r8, #1
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f47f af6a 	bne.w	8005a62 <_dtoa_r+0x7ca>
 8005b8e:	2001      	movs	r0, #1
 8005b90:	e76f      	b.n	8005a72 <_dtoa_r+0x7da>
 8005b92:	f04f 0800 	mov.w	r8, #0
 8005b96:	e7f6      	b.n	8005b86 <_dtoa_r+0x8ee>
 8005b98:	4698      	mov	r8, r3
 8005b9a:	e7f4      	b.n	8005b86 <_dtoa_r+0x8ee>
 8005b9c:	f43f af7d 	beq.w	8005a9a <_dtoa_r+0x802>
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	301c      	adds	r0, #28
 8005ba4:	e772      	b.n	8005a8c <_dtoa_r+0x7f4>
 8005ba6:	9b03      	ldr	r3, [sp, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc37      	bgt.n	8005c1c <_dtoa_r+0x984>
 8005bac:	9b06      	ldr	r3, [sp, #24]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	dd34      	ble.n	8005c1c <_dtoa_r+0x984>
 8005bb2:	9b03      	ldr	r3, [sp, #12]
 8005bb4:	9302      	str	r3, [sp, #8]
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	b96b      	cbnz	r3, 8005bd6 <_dtoa_r+0x93e>
 8005bba:	4631      	mov	r1, r6
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 f9d4 	bl	8005f6c <__multadd>
 8005bc4:	4601      	mov	r1, r0
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	ee18 0a10 	vmov	r0, s16
 8005bcc:	f000 fbee 	bl	80063ac <__mcmp>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	f73f adbb 	bgt.w	800574c <_dtoa_r+0x4b4>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	9d01      	ldr	r5, [sp, #4]
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	f04f 0800 	mov.w	r8, #0
 8005be2:	4631      	mov	r1, r6
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 f99f 	bl	8005f28 <_Bfree>
 8005bea:	2f00      	cmp	r7, #0
 8005bec:	f43f aea4 	beq.w	8005938 <_dtoa_r+0x6a0>
 8005bf0:	f1b8 0f00 	cmp.w	r8, #0
 8005bf4:	d005      	beq.n	8005c02 <_dtoa_r+0x96a>
 8005bf6:	45b8      	cmp	r8, r7
 8005bf8:	d003      	beq.n	8005c02 <_dtoa_r+0x96a>
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 f993 	bl	8005f28 <_Bfree>
 8005c02:	4639      	mov	r1, r7
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 f98f 	bl	8005f28 <_Bfree>
 8005c0a:	e695      	b.n	8005938 <_dtoa_r+0x6a0>
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	4637      	mov	r7, r6
 8005c10:	e7e1      	b.n	8005bd6 <_dtoa_r+0x93e>
 8005c12:	9700      	str	r7, [sp, #0]
 8005c14:	4637      	mov	r7, r6
 8005c16:	e599      	b.n	800574c <_dtoa_r+0x4b4>
 8005c18:	40240000 	.word	0x40240000
 8005c1c:	9b08      	ldr	r3, [sp, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80ca 	beq.w	8005db8 <_dtoa_r+0xb20>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	9302      	str	r3, [sp, #8]
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	dd05      	ble.n	8005c38 <_dtoa_r+0x9a0>
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	462a      	mov	r2, r5
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 fb4b 	bl	80062cc <__lshift>
 8005c36:	4607      	mov	r7, r0
 8005c38:	f1b8 0f00 	cmp.w	r8, #0
 8005c3c:	d05b      	beq.n	8005cf6 <_dtoa_r+0xa5e>
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 f931 	bl	8005ea8 <_Balloc>
 8005c46:	4605      	mov	r5, r0
 8005c48:	b928      	cbnz	r0, 8005c56 <_dtoa_r+0x9be>
 8005c4a:	4b87      	ldr	r3, [pc, #540]	; (8005e68 <_dtoa_r+0xbd0>)
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c52:	f7ff bb3b 	b.w	80052cc <_dtoa_r+0x34>
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	3202      	adds	r2, #2
 8005c5a:	0092      	lsls	r2, r2, #2
 8005c5c:	f107 010c 	add.w	r1, r7, #12
 8005c60:	300c      	adds	r0, #12
 8005c62:	f000 f913 	bl	8005e8c <memcpy>
 8005c66:	2201      	movs	r2, #1
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 fb2e 	bl	80062cc <__lshift>
 8005c70:	9b01      	ldr	r3, [sp, #4]
 8005c72:	f103 0901 	add.w	r9, r3, #1
 8005c76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	9305      	str	r3, [sp, #20]
 8005c7e:	f00a 0301 	and.w	r3, sl, #1
 8005c82:	46b8      	mov	r8, r7
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	4607      	mov	r7, r0
 8005c88:	4631      	mov	r1, r6
 8005c8a:	ee18 0a10 	vmov	r0, s16
 8005c8e:	f7ff fa77 	bl	8005180 <quorem>
 8005c92:	4641      	mov	r1, r8
 8005c94:	9002      	str	r0, [sp, #8]
 8005c96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c9a:	ee18 0a10 	vmov	r0, s16
 8005c9e:	f000 fb85 	bl	80063ac <__mcmp>
 8005ca2:	463a      	mov	r2, r7
 8005ca4:	9003      	str	r0, [sp, #12]
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fb9b 	bl	80063e4 <__mdiff>
 8005cae:	68c2      	ldr	r2, [r0, #12]
 8005cb0:	f109 3bff 	add.w	fp, r9, #4294967295
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	bb02      	cbnz	r2, 8005cfa <_dtoa_r+0xa62>
 8005cb8:	4601      	mov	r1, r0
 8005cba:	ee18 0a10 	vmov	r0, s16
 8005cbe:	f000 fb75 	bl	80063ac <__mcmp>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	9207      	str	r2, [sp, #28]
 8005cca:	f000 f92d 	bl	8005f28 <_Bfree>
 8005cce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005cd2:	ea43 0102 	orr.w	r1, r3, r2
 8005cd6:	9b04      	ldr	r3, [sp, #16]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	464d      	mov	r5, r9
 8005cdc:	d10f      	bne.n	8005cfe <_dtoa_r+0xa66>
 8005cde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ce2:	d02a      	beq.n	8005d3a <_dtoa_r+0xaa2>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd02      	ble.n	8005cf0 <_dtoa_r+0xa58>
 8005cea:	9b02      	ldr	r3, [sp, #8]
 8005cec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005cf0:	f88b a000 	strb.w	sl, [fp]
 8005cf4:	e775      	b.n	8005be2 <_dtoa_r+0x94a>
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	e7ba      	b.n	8005c70 <_dtoa_r+0x9d8>
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	e7e2      	b.n	8005cc4 <_dtoa_r+0xa2c>
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	db04      	blt.n	8005d0e <_dtoa_r+0xa76>
 8005d04:	9906      	ldr	r1, [sp, #24]
 8005d06:	430b      	orrs	r3, r1
 8005d08:	9904      	ldr	r1, [sp, #16]
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	d122      	bne.n	8005d54 <_dtoa_r+0xabc>
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	ddee      	ble.n	8005cf0 <_dtoa_r+0xa58>
 8005d12:	ee18 1a10 	vmov	r1, s16
 8005d16:	2201      	movs	r2, #1
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fad7 	bl	80062cc <__lshift>
 8005d1e:	4631      	mov	r1, r6
 8005d20:	ee08 0a10 	vmov	s16, r0
 8005d24:	f000 fb42 	bl	80063ac <__mcmp>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	dc03      	bgt.n	8005d34 <_dtoa_r+0xa9c>
 8005d2c:	d1e0      	bne.n	8005cf0 <_dtoa_r+0xa58>
 8005d2e:	f01a 0f01 	tst.w	sl, #1
 8005d32:	d0dd      	beq.n	8005cf0 <_dtoa_r+0xa58>
 8005d34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d38:	d1d7      	bne.n	8005cea <_dtoa_r+0xa52>
 8005d3a:	2339      	movs	r3, #57	; 0x39
 8005d3c:	f88b 3000 	strb.w	r3, [fp]
 8005d40:	462b      	mov	r3, r5
 8005d42:	461d      	mov	r5, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d4a:	2a39      	cmp	r2, #57	; 0x39
 8005d4c:	d071      	beq.n	8005e32 <_dtoa_r+0xb9a>
 8005d4e:	3201      	adds	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e746      	b.n	8005be2 <_dtoa_r+0x94a>
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	dd07      	ble.n	8005d68 <_dtoa_r+0xad0>
 8005d58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d5c:	d0ed      	beq.n	8005d3a <_dtoa_r+0xaa2>
 8005d5e:	f10a 0301 	add.w	r3, sl, #1
 8005d62:	f88b 3000 	strb.w	r3, [fp]
 8005d66:	e73c      	b.n	8005be2 <_dtoa_r+0x94a>
 8005d68:	9b05      	ldr	r3, [sp, #20]
 8005d6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d6e:	4599      	cmp	r9, r3
 8005d70:	d047      	beq.n	8005e02 <_dtoa_r+0xb6a>
 8005d72:	ee18 1a10 	vmov	r1, s16
 8005d76:	2300      	movs	r3, #0
 8005d78:	220a      	movs	r2, #10
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 f8f6 	bl	8005f6c <__multadd>
 8005d80:	45b8      	cmp	r8, r7
 8005d82:	ee08 0a10 	vmov	s16, r0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	f04f 020a 	mov.w	r2, #10
 8005d8e:	4641      	mov	r1, r8
 8005d90:	4620      	mov	r0, r4
 8005d92:	d106      	bne.n	8005da2 <_dtoa_r+0xb0a>
 8005d94:	f000 f8ea 	bl	8005f6c <__multadd>
 8005d98:	4680      	mov	r8, r0
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	f109 0901 	add.w	r9, r9, #1
 8005da0:	e772      	b.n	8005c88 <_dtoa_r+0x9f0>
 8005da2:	f000 f8e3 	bl	8005f6c <__multadd>
 8005da6:	4639      	mov	r1, r7
 8005da8:	4680      	mov	r8, r0
 8005daa:	2300      	movs	r3, #0
 8005dac:	220a      	movs	r2, #10
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 f8dc 	bl	8005f6c <__multadd>
 8005db4:	4607      	mov	r7, r0
 8005db6:	e7f1      	b.n	8005d9c <_dtoa_r+0xb04>
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	9302      	str	r3, [sp, #8]
 8005dbc:	9d01      	ldr	r5, [sp, #4]
 8005dbe:	ee18 0a10 	vmov	r0, s16
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	f7ff f9dc 	bl	8005180 <quorem>
 8005dc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	f805 ab01 	strb.w	sl, [r5], #1
 8005dd2:	1aea      	subs	r2, r5, r3
 8005dd4:	9b02      	ldr	r3, [sp, #8]
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	dd09      	ble.n	8005dee <_dtoa_r+0xb56>
 8005dda:	ee18 1a10 	vmov	r1, s16
 8005dde:	2300      	movs	r3, #0
 8005de0:	220a      	movs	r2, #10
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f8c2 	bl	8005f6c <__multadd>
 8005de8:	ee08 0a10 	vmov	s16, r0
 8005dec:	e7e7      	b.n	8005dbe <_dtoa_r+0xb26>
 8005dee:	9b02      	ldr	r3, [sp, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bfc8      	it	gt
 8005df4:	461d      	movgt	r5, r3
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	bfd8      	it	le
 8005dfa:	2501      	movle	r5, #1
 8005dfc:	441d      	add	r5, r3
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	ee18 1a10 	vmov	r1, s16
 8005e06:	2201      	movs	r2, #1
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fa5f 	bl	80062cc <__lshift>
 8005e0e:	4631      	mov	r1, r6
 8005e10:	ee08 0a10 	vmov	s16, r0
 8005e14:	f000 faca 	bl	80063ac <__mcmp>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	dc91      	bgt.n	8005d40 <_dtoa_r+0xaa8>
 8005e1c:	d102      	bne.n	8005e24 <_dtoa_r+0xb8c>
 8005e1e:	f01a 0f01 	tst.w	sl, #1
 8005e22:	d18d      	bne.n	8005d40 <_dtoa_r+0xaa8>
 8005e24:	462b      	mov	r3, r5
 8005e26:	461d      	mov	r5, r3
 8005e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e2c:	2a30      	cmp	r2, #48	; 0x30
 8005e2e:	d0fa      	beq.n	8005e26 <_dtoa_r+0xb8e>
 8005e30:	e6d7      	b.n	8005be2 <_dtoa_r+0x94a>
 8005e32:	9a01      	ldr	r2, [sp, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d184      	bne.n	8005d42 <_dtoa_r+0xaaa>
 8005e38:	9b00      	ldr	r3, [sp, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	2331      	movs	r3, #49	; 0x31
 8005e40:	7013      	strb	r3, [r2, #0]
 8005e42:	e6ce      	b.n	8005be2 <_dtoa_r+0x94a>
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <_dtoa_r+0xbd4>)
 8005e46:	f7ff ba95 	b.w	8005374 <_dtoa_r+0xdc>
 8005e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f47f aa6e 	bne.w	800532e <_dtoa_r+0x96>
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <_dtoa_r+0xbd8>)
 8005e54:	f7ff ba8e 	b.w	8005374 <_dtoa_r+0xdc>
 8005e58:	9b02      	ldr	r3, [sp, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dcae      	bgt.n	8005dbc <_dtoa_r+0xb24>
 8005e5e:	9b06      	ldr	r3, [sp, #24]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	f73f aea8 	bgt.w	8005bb6 <_dtoa_r+0x91e>
 8005e66:	e7a9      	b.n	8005dbc <_dtoa_r+0xb24>
 8005e68:	0800787f 	.word	0x0800787f
 8005e6c:	080077dc 	.word	0x080077dc
 8005e70:	08007800 	.word	0x08007800

08005e74 <_localeconv_r>:
 8005e74:	4800      	ldr	r0, [pc, #0]	; (8005e78 <_localeconv_r+0x4>)
 8005e76:	4770      	bx	lr
 8005e78:	20000160 	.word	0x20000160

08005e7c <malloc>:
 8005e7c:	4b02      	ldr	r3, [pc, #8]	; (8005e88 <malloc+0xc>)
 8005e7e:	4601      	mov	r1, r0
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	f000 bc17 	b.w	80066b4 <_malloc_r>
 8005e86:	bf00      	nop
 8005e88:	2000000c 	.word	0x2000000c

08005e8c <memcpy>:
 8005e8c:	440a      	add	r2, r1
 8005e8e:	4291      	cmp	r1, r2
 8005e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e94:	d100      	bne.n	8005e98 <memcpy+0xc>
 8005e96:	4770      	bx	lr
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	d1f9      	bne.n	8005e9a <memcpy+0xe>
 8005ea6:	bd10      	pop	{r4, pc}

08005ea8 <_Balloc>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005eac:	4604      	mov	r4, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	b976      	cbnz	r6, 8005ed0 <_Balloc+0x28>
 8005eb2:	2010      	movs	r0, #16
 8005eb4:	f7ff ffe2 	bl	8005e7c <malloc>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6260      	str	r0, [r4, #36]	; 0x24
 8005ebc:	b920      	cbnz	r0, 8005ec8 <_Balloc+0x20>
 8005ebe:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <_Balloc+0x78>)
 8005ec0:	4818      	ldr	r0, [pc, #96]	; (8005f24 <_Balloc+0x7c>)
 8005ec2:	2166      	movs	r1, #102	; 0x66
 8005ec4:	f000 fdd6 	bl	8006a74 <__assert_func>
 8005ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ecc:	6006      	str	r6, [r0, #0]
 8005ece:	60c6      	str	r6, [r0, #12]
 8005ed0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ed2:	68f3      	ldr	r3, [r6, #12]
 8005ed4:	b183      	cbz	r3, 8005ef8 <_Balloc+0x50>
 8005ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ede:	b9b8      	cbnz	r0, 8005f10 <_Balloc+0x68>
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ee6:	1d72      	adds	r2, r6, #5
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 fb60 	bl	80065b0 <_calloc_r>
 8005ef0:	b160      	cbz	r0, 8005f0c <_Balloc+0x64>
 8005ef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ef6:	e00e      	b.n	8005f16 <_Balloc+0x6e>
 8005ef8:	2221      	movs	r2, #33	; 0x21
 8005efa:	2104      	movs	r1, #4
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fb57 	bl	80065b0 <_calloc_r>
 8005f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f04:	60f0      	str	r0, [r6, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e4      	bne.n	8005ed6 <_Balloc+0x2e>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	6802      	ldr	r2, [r0, #0]
 8005f12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f16:	2300      	movs	r3, #0
 8005f18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f1c:	e7f7      	b.n	8005f0e <_Balloc+0x66>
 8005f1e:	bf00      	nop
 8005f20:	0800780d 	.word	0x0800780d
 8005f24:	08007890 	.word	0x08007890

08005f28 <_Bfree>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	b976      	cbnz	r6, 8005f50 <_Bfree+0x28>
 8005f32:	2010      	movs	r0, #16
 8005f34:	f7ff ffa2 	bl	8005e7c <malloc>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6268      	str	r0, [r5, #36]	; 0x24
 8005f3c:	b920      	cbnz	r0, 8005f48 <_Bfree+0x20>
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <_Bfree+0x3c>)
 8005f40:	4809      	ldr	r0, [pc, #36]	; (8005f68 <_Bfree+0x40>)
 8005f42:	218a      	movs	r1, #138	; 0x8a
 8005f44:	f000 fd96 	bl	8006a74 <__assert_func>
 8005f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f4c:	6006      	str	r6, [r0, #0]
 8005f4e:	60c6      	str	r6, [r0, #12]
 8005f50:	b13c      	cbz	r4, 8005f62 <_Bfree+0x3a>
 8005f52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f54:	6862      	ldr	r2, [r4, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f5c:	6021      	str	r1, [r4, #0]
 8005f5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	0800780d 	.word	0x0800780d
 8005f68:	08007890 	.word	0x08007890

08005f6c <__multadd>:
 8005f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f70:	690d      	ldr	r5, [r1, #16]
 8005f72:	4607      	mov	r7, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	461e      	mov	r6, r3
 8005f78:	f101 0c14 	add.w	ip, r1, #20
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f82:	b299      	uxth	r1, r3
 8005f84:	fb02 6101 	mla	r1, r2, r1, r6
 8005f88:	0c1e      	lsrs	r6, r3, #16
 8005f8a:	0c0b      	lsrs	r3, r1, #16
 8005f8c:	fb02 3306 	mla	r3, r2, r6, r3
 8005f90:	b289      	uxth	r1, r1
 8005f92:	3001      	adds	r0, #1
 8005f94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f98:	4285      	cmp	r5, r0
 8005f9a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fa2:	dcec      	bgt.n	8005f7e <__multadd+0x12>
 8005fa4:	b30e      	cbz	r6, 8005fea <__multadd+0x7e>
 8005fa6:	68a3      	ldr	r3, [r4, #8]
 8005fa8:	42ab      	cmp	r3, r5
 8005faa:	dc19      	bgt.n	8005fe0 <__multadd+0x74>
 8005fac:	6861      	ldr	r1, [r4, #4]
 8005fae:	4638      	mov	r0, r7
 8005fb0:	3101      	adds	r1, #1
 8005fb2:	f7ff ff79 	bl	8005ea8 <_Balloc>
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <__multadd+0x5a>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <__multadd+0x84>)
 8005fbe:	480d      	ldr	r0, [pc, #52]	; (8005ff4 <__multadd+0x88>)
 8005fc0:	21b5      	movs	r1, #181	; 0xb5
 8005fc2:	f000 fd57 	bl	8006a74 <__assert_func>
 8005fc6:	6922      	ldr	r2, [r4, #16]
 8005fc8:	3202      	adds	r2, #2
 8005fca:	f104 010c 	add.w	r1, r4, #12
 8005fce:	0092      	lsls	r2, r2, #2
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	f7ff ff5b 	bl	8005e8c <memcpy>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f7ff ffa5 	bl	8005f28 <_Bfree>
 8005fde:	4644      	mov	r4, r8
 8005fe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	615e      	str	r6, [r3, #20]
 8005fe8:	6125      	str	r5, [r4, #16]
 8005fea:	4620      	mov	r0, r4
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	0800787f 	.word	0x0800787f
 8005ff4:	08007890 	.word	0x08007890

08005ff8 <__hi0bits>:
 8005ff8:	0c03      	lsrs	r3, r0, #16
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	b9d3      	cbnz	r3, 8006034 <__hi0bits+0x3c>
 8005ffe:	0400      	lsls	r0, r0, #16
 8006000:	2310      	movs	r3, #16
 8006002:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006006:	bf04      	itt	eq
 8006008:	0200      	lsleq	r0, r0, #8
 800600a:	3308      	addeq	r3, #8
 800600c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006010:	bf04      	itt	eq
 8006012:	0100      	lsleq	r0, r0, #4
 8006014:	3304      	addeq	r3, #4
 8006016:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800601a:	bf04      	itt	eq
 800601c:	0080      	lsleq	r0, r0, #2
 800601e:	3302      	addeq	r3, #2
 8006020:	2800      	cmp	r0, #0
 8006022:	db05      	blt.n	8006030 <__hi0bits+0x38>
 8006024:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006028:	f103 0301 	add.w	r3, r3, #1
 800602c:	bf08      	it	eq
 800602e:	2320      	moveq	r3, #32
 8006030:	4618      	mov	r0, r3
 8006032:	4770      	bx	lr
 8006034:	2300      	movs	r3, #0
 8006036:	e7e4      	b.n	8006002 <__hi0bits+0xa>

08006038 <__lo0bits>:
 8006038:	6803      	ldr	r3, [r0, #0]
 800603a:	f013 0207 	ands.w	r2, r3, #7
 800603e:	4601      	mov	r1, r0
 8006040:	d00b      	beq.n	800605a <__lo0bits+0x22>
 8006042:	07da      	lsls	r2, r3, #31
 8006044:	d423      	bmi.n	800608e <__lo0bits+0x56>
 8006046:	0798      	lsls	r0, r3, #30
 8006048:	bf49      	itett	mi
 800604a:	085b      	lsrmi	r3, r3, #1
 800604c:	089b      	lsrpl	r3, r3, #2
 800604e:	2001      	movmi	r0, #1
 8006050:	600b      	strmi	r3, [r1, #0]
 8006052:	bf5c      	itt	pl
 8006054:	600b      	strpl	r3, [r1, #0]
 8006056:	2002      	movpl	r0, #2
 8006058:	4770      	bx	lr
 800605a:	b298      	uxth	r0, r3
 800605c:	b9a8      	cbnz	r0, 800608a <__lo0bits+0x52>
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	2010      	movs	r0, #16
 8006062:	b2da      	uxtb	r2, r3
 8006064:	b90a      	cbnz	r2, 800606a <__lo0bits+0x32>
 8006066:	3008      	adds	r0, #8
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	071a      	lsls	r2, r3, #28
 800606c:	bf04      	itt	eq
 800606e:	091b      	lsreq	r3, r3, #4
 8006070:	3004      	addeq	r0, #4
 8006072:	079a      	lsls	r2, r3, #30
 8006074:	bf04      	itt	eq
 8006076:	089b      	lsreq	r3, r3, #2
 8006078:	3002      	addeq	r0, #2
 800607a:	07da      	lsls	r2, r3, #31
 800607c:	d403      	bmi.n	8006086 <__lo0bits+0x4e>
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	f100 0001 	add.w	r0, r0, #1
 8006084:	d005      	beq.n	8006092 <__lo0bits+0x5a>
 8006086:	600b      	str	r3, [r1, #0]
 8006088:	4770      	bx	lr
 800608a:	4610      	mov	r0, r2
 800608c:	e7e9      	b.n	8006062 <__lo0bits+0x2a>
 800608e:	2000      	movs	r0, #0
 8006090:	4770      	bx	lr
 8006092:	2020      	movs	r0, #32
 8006094:	4770      	bx	lr
	...

08006098 <__i2b>:
 8006098:	b510      	push	{r4, lr}
 800609a:	460c      	mov	r4, r1
 800609c:	2101      	movs	r1, #1
 800609e:	f7ff ff03 	bl	8005ea8 <_Balloc>
 80060a2:	4602      	mov	r2, r0
 80060a4:	b928      	cbnz	r0, 80060b2 <__i2b+0x1a>
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <__i2b+0x24>)
 80060a8:	4805      	ldr	r0, [pc, #20]	; (80060c0 <__i2b+0x28>)
 80060aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060ae:	f000 fce1 	bl	8006a74 <__assert_func>
 80060b2:	2301      	movs	r3, #1
 80060b4:	6144      	str	r4, [r0, #20]
 80060b6:	6103      	str	r3, [r0, #16]
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	bf00      	nop
 80060bc:	0800787f 	.word	0x0800787f
 80060c0:	08007890 	.word	0x08007890

080060c4 <__multiply>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	4691      	mov	r9, r2
 80060ca:	690a      	ldr	r2, [r1, #16]
 80060cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	bfb8      	it	lt
 80060d4:	460b      	movlt	r3, r1
 80060d6:	460c      	mov	r4, r1
 80060d8:	bfbc      	itt	lt
 80060da:	464c      	movlt	r4, r9
 80060dc:	4699      	movlt	r9, r3
 80060de:	6927      	ldr	r7, [r4, #16]
 80060e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060e4:	68a3      	ldr	r3, [r4, #8]
 80060e6:	6861      	ldr	r1, [r4, #4]
 80060e8:	eb07 060a 	add.w	r6, r7, sl
 80060ec:	42b3      	cmp	r3, r6
 80060ee:	b085      	sub	sp, #20
 80060f0:	bfb8      	it	lt
 80060f2:	3101      	addlt	r1, #1
 80060f4:	f7ff fed8 	bl	8005ea8 <_Balloc>
 80060f8:	b930      	cbnz	r0, 8006108 <__multiply+0x44>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b44      	ldr	r3, [pc, #272]	; (8006210 <__multiply+0x14c>)
 80060fe:	4845      	ldr	r0, [pc, #276]	; (8006214 <__multiply+0x150>)
 8006100:	f240 115d 	movw	r1, #349	; 0x15d
 8006104:	f000 fcb6 	bl	8006a74 <__assert_func>
 8006108:	f100 0514 	add.w	r5, r0, #20
 800610c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006110:	462b      	mov	r3, r5
 8006112:	2200      	movs	r2, #0
 8006114:	4543      	cmp	r3, r8
 8006116:	d321      	bcc.n	800615c <__multiply+0x98>
 8006118:	f104 0314 	add.w	r3, r4, #20
 800611c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006120:	f109 0314 	add.w	r3, r9, #20
 8006124:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006128:	9202      	str	r2, [sp, #8]
 800612a:	1b3a      	subs	r2, r7, r4
 800612c:	3a15      	subs	r2, #21
 800612e:	f022 0203 	bic.w	r2, r2, #3
 8006132:	3204      	adds	r2, #4
 8006134:	f104 0115 	add.w	r1, r4, #21
 8006138:	428f      	cmp	r7, r1
 800613a:	bf38      	it	cc
 800613c:	2204      	movcc	r2, #4
 800613e:	9201      	str	r2, [sp, #4]
 8006140:	9a02      	ldr	r2, [sp, #8]
 8006142:	9303      	str	r3, [sp, #12]
 8006144:	429a      	cmp	r2, r3
 8006146:	d80c      	bhi.n	8006162 <__multiply+0x9e>
 8006148:	2e00      	cmp	r6, #0
 800614a:	dd03      	ble.n	8006154 <__multiply+0x90>
 800614c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006150:	2b00      	cmp	r3, #0
 8006152:	d05a      	beq.n	800620a <__multiply+0x146>
 8006154:	6106      	str	r6, [r0, #16]
 8006156:	b005      	add	sp, #20
 8006158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615c:	f843 2b04 	str.w	r2, [r3], #4
 8006160:	e7d8      	b.n	8006114 <__multiply+0x50>
 8006162:	f8b3 a000 	ldrh.w	sl, [r3]
 8006166:	f1ba 0f00 	cmp.w	sl, #0
 800616a:	d024      	beq.n	80061b6 <__multiply+0xf2>
 800616c:	f104 0e14 	add.w	lr, r4, #20
 8006170:	46a9      	mov	r9, r5
 8006172:	f04f 0c00 	mov.w	ip, #0
 8006176:	f85e 2b04 	ldr.w	r2, [lr], #4
 800617a:	f8d9 1000 	ldr.w	r1, [r9]
 800617e:	fa1f fb82 	uxth.w	fp, r2
 8006182:	b289      	uxth	r1, r1
 8006184:	fb0a 110b 	mla	r1, sl, fp, r1
 8006188:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800618c:	f8d9 2000 	ldr.w	r2, [r9]
 8006190:	4461      	add	r1, ip
 8006192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006196:	fb0a c20b 	mla	r2, sl, fp, ip
 800619a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800619e:	b289      	uxth	r1, r1
 80061a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061a4:	4577      	cmp	r7, lr
 80061a6:	f849 1b04 	str.w	r1, [r9], #4
 80061aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80061ae:	d8e2      	bhi.n	8006176 <__multiply+0xb2>
 80061b0:	9a01      	ldr	r2, [sp, #4]
 80061b2:	f845 c002 	str.w	ip, [r5, r2]
 80061b6:	9a03      	ldr	r2, [sp, #12]
 80061b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061bc:	3304      	adds	r3, #4
 80061be:	f1b9 0f00 	cmp.w	r9, #0
 80061c2:	d020      	beq.n	8006206 <__multiply+0x142>
 80061c4:	6829      	ldr	r1, [r5, #0]
 80061c6:	f104 0c14 	add.w	ip, r4, #20
 80061ca:	46ae      	mov	lr, r5
 80061cc:	f04f 0a00 	mov.w	sl, #0
 80061d0:	f8bc b000 	ldrh.w	fp, [ip]
 80061d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061d8:	fb09 220b 	mla	r2, r9, fp, r2
 80061dc:	4492      	add	sl, r2
 80061de:	b289      	uxth	r1, r1
 80061e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80061e4:	f84e 1b04 	str.w	r1, [lr], #4
 80061e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061ec:	f8be 1000 	ldrh.w	r1, [lr]
 80061f0:	0c12      	lsrs	r2, r2, #16
 80061f2:	fb09 1102 	mla	r1, r9, r2, r1
 80061f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061fa:	4567      	cmp	r7, ip
 80061fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006200:	d8e6      	bhi.n	80061d0 <__multiply+0x10c>
 8006202:	9a01      	ldr	r2, [sp, #4]
 8006204:	50a9      	str	r1, [r5, r2]
 8006206:	3504      	adds	r5, #4
 8006208:	e79a      	b.n	8006140 <__multiply+0x7c>
 800620a:	3e01      	subs	r6, #1
 800620c:	e79c      	b.n	8006148 <__multiply+0x84>
 800620e:	bf00      	nop
 8006210:	0800787f 	.word	0x0800787f
 8006214:	08007890 	.word	0x08007890

08006218 <__pow5mult>:
 8006218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800621c:	4615      	mov	r5, r2
 800621e:	f012 0203 	ands.w	r2, r2, #3
 8006222:	4606      	mov	r6, r0
 8006224:	460f      	mov	r7, r1
 8006226:	d007      	beq.n	8006238 <__pow5mult+0x20>
 8006228:	4c25      	ldr	r4, [pc, #148]	; (80062c0 <__pow5mult+0xa8>)
 800622a:	3a01      	subs	r2, #1
 800622c:	2300      	movs	r3, #0
 800622e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006232:	f7ff fe9b 	bl	8005f6c <__multadd>
 8006236:	4607      	mov	r7, r0
 8006238:	10ad      	asrs	r5, r5, #2
 800623a:	d03d      	beq.n	80062b8 <__pow5mult+0xa0>
 800623c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800623e:	b97c      	cbnz	r4, 8006260 <__pow5mult+0x48>
 8006240:	2010      	movs	r0, #16
 8006242:	f7ff fe1b 	bl	8005e7c <malloc>
 8006246:	4602      	mov	r2, r0
 8006248:	6270      	str	r0, [r6, #36]	; 0x24
 800624a:	b928      	cbnz	r0, 8006258 <__pow5mult+0x40>
 800624c:	4b1d      	ldr	r3, [pc, #116]	; (80062c4 <__pow5mult+0xac>)
 800624e:	481e      	ldr	r0, [pc, #120]	; (80062c8 <__pow5mult+0xb0>)
 8006250:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006254:	f000 fc0e 	bl	8006a74 <__assert_func>
 8006258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800625c:	6004      	str	r4, [r0, #0]
 800625e:	60c4      	str	r4, [r0, #12]
 8006260:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006268:	b94c      	cbnz	r4, 800627e <__pow5mult+0x66>
 800626a:	f240 2171 	movw	r1, #625	; 0x271
 800626e:	4630      	mov	r0, r6
 8006270:	f7ff ff12 	bl	8006098 <__i2b>
 8006274:	2300      	movs	r3, #0
 8006276:	f8c8 0008 	str.w	r0, [r8, #8]
 800627a:	4604      	mov	r4, r0
 800627c:	6003      	str	r3, [r0, #0]
 800627e:	f04f 0900 	mov.w	r9, #0
 8006282:	07eb      	lsls	r3, r5, #31
 8006284:	d50a      	bpl.n	800629c <__pow5mult+0x84>
 8006286:	4639      	mov	r1, r7
 8006288:	4622      	mov	r2, r4
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ff1a 	bl	80060c4 <__multiply>
 8006290:	4639      	mov	r1, r7
 8006292:	4680      	mov	r8, r0
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff fe47 	bl	8005f28 <_Bfree>
 800629a:	4647      	mov	r7, r8
 800629c:	106d      	asrs	r5, r5, #1
 800629e:	d00b      	beq.n	80062b8 <__pow5mult+0xa0>
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	b938      	cbnz	r0, 80062b4 <__pow5mult+0x9c>
 80062a4:	4622      	mov	r2, r4
 80062a6:	4621      	mov	r1, r4
 80062a8:	4630      	mov	r0, r6
 80062aa:	f7ff ff0b 	bl	80060c4 <__multiply>
 80062ae:	6020      	str	r0, [r4, #0]
 80062b0:	f8c0 9000 	str.w	r9, [r0]
 80062b4:	4604      	mov	r4, r0
 80062b6:	e7e4      	b.n	8006282 <__pow5mult+0x6a>
 80062b8:	4638      	mov	r0, r7
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062be:	bf00      	nop
 80062c0:	080079e0 	.word	0x080079e0
 80062c4:	0800780d 	.word	0x0800780d
 80062c8:	08007890 	.word	0x08007890

080062cc <__lshift>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	460c      	mov	r4, r1
 80062d2:	6849      	ldr	r1, [r1, #4]
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	4607      	mov	r7, r0
 80062de:	4691      	mov	r9, r2
 80062e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062e4:	f108 0601 	add.w	r6, r8, #1
 80062e8:	42b3      	cmp	r3, r6
 80062ea:	db0b      	blt.n	8006304 <__lshift+0x38>
 80062ec:	4638      	mov	r0, r7
 80062ee:	f7ff fddb 	bl	8005ea8 <_Balloc>
 80062f2:	4605      	mov	r5, r0
 80062f4:	b948      	cbnz	r0, 800630a <__lshift+0x3e>
 80062f6:	4602      	mov	r2, r0
 80062f8:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <__lshift+0xd8>)
 80062fa:	482b      	ldr	r0, [pc, #172]	; (80063a8 <__lshift+0xdc>)
 80062fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006300:	f000 fbb8 	bl	8006a74 <__assert_func>
 8006304:	3101      	adds	r1, #1
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	e7ee      	b.n	80062e8 <__lshift+0x1c>
 800630a:	2300      	movs	r3, #0
 800630c:	f100 0114 	add.w	r1, r0, #20
 8006310:	f100 0210 	add.w	r2, r0, #16
 8006314:	4618      	mov	r0, r3
 8006316:	4553      	cmp	r3, sl
 8006318:	db37      	blt.n	800638a <__lshift+0xbe>
 800631a:	6920      	ldr	r0, [r4, #16]
 800631c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006320:	f104 0314 	add.w	r3, r4, #20
 8006324:	f019 091f 	ands.w	r9, r9, #31
 8006328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800632c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006330:	d02f      	beq.n	8006392 <__lshift+0xc6>
 8006332:	f1c9 0e20 	rsb	lr, r9, #32
 8006336:	468a      	mov	sl, r1
 8006338:	f04f 0c00 	mov.w	ip, #0
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	fa02 f209 	lsl.w	r2, r2, r9
 8006342:	ea42 020c 	orr.w	r2, r2, ip
 8006346:	f84a 2b04 	str.w	r2, [sl], #4
 800634a:	f853 2b04 	ldr.w	r2, [r3], #4
 800634e:	4298      	cmp	r0, r3
 8006350:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006354:	d8f2      	bhi.n	800633c <__lshift+0x70>
 8006356:	1b03      	subs	r3, r0, r4
 8006358:	3b15      	subs	r3, #21
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	3304      	adds	r3, #4
 8006360:	f104 0215 	add.w	r2, r4, #21
 8006364:	4290      	cmp	r0, r2
 8006366:	bf38      	it	cc
 8006368:	2304      	movcc	r3, #4
 800636a:	f841 c003 	str.w	ip, [r1, r3]
 800636e:	f1bc 0f00 	cmp.w	ip, #0
 8006372:	d001      	beq.n	8006378 <__lshift+0xac>
 8006374:	f108 0602 	add.w	r6, r8, #2
 8006378:	3e01      	subs	r6, #1
 800637a:	4638      	mov	r0, r7
 800637c:	612e      	str	r6, [r5, #16]
 800637e:	4621      	mov	r1, r4
 8006380:	f7ff fdd2 	bl	8005f28 <_Bfree>
 8006384:	4628      	mov	r0, r5
 8006386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638a:	f842 0f04 	str.w	r0, [r2, #4]!
 800638e:	3301      	adds	r3, #1
 8006390:	e7c1      	b.n	8006316 <__lshift+0x4a>
 8006392:	3904      	subs	r1, #4
 8006394:	f853 2b04 	ldr.w	r2, [r3], #4
 8006398:	f841 2f04 	str.w	r2, [r1, #4]!
 800639c:	4298      	cmp	r0, r3
 800639e:	d8f9      	bhi.n	8006394 <__lshift+0xc8>
 80063a0:	e7ea      	b.n	8006378 <__lshift+0xac>
 80063a2:	bf00      	nop
 80063a4:	0800787f 	.word	0x0800787f
 80063a8:	08007890 	.word	0x08007890

080063ac <__mcmp>:
 80063ac:	b530      	push	{r4, r5, lr}
 80063ae:	6902      	ldr	r2, [r0, #16]
 80063b0:	690c      	ldr	r4, [r1, #16]
 80063b2:	1b12      	subs	r2, r2, r4
 80063b4:	d10e      	bne.n	80063d4 <__mcmp+0x28>
 80063b6:	f100 0314 	add.w	r3, r0, #20
 80063ba:	3114      	adds	r1, #20
 80063bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80063c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80063c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063cc:	42a5      	cmp	r5, r4
 80063ce:	d003      	beq.n	80063d8 <__mcmp+0x2c>
 80063d0:	d305      	bcc.n	80063de <__mcmp+0x32>
 80063d2:	2201      	movs	r2, #1
 80063d4:	4610      	mov	r0, r2
 80063d6:	bd30      	pop	{r4, r5, pc}
 80063d8:	4283      	cmp	r3, r0
 80063da:	d3f3      	bcc.n	80063c4 <__mcmp+0x18>
 80063dc:	e7fa      	b.n	80063d4 <__mcmp+0x28>
 80063de:	f04f 32ff 	mov.w	r2, #4294967295
 80063e2:	e7f7      	b.n	80063d4 <__mcmp+0x28>

080063e4 <__mdiff>:
 80063e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	4606      	mov	r6, r0
 80063ec:	4611      	mov	r1, r2
 80063ee:	4620      	mov	r0, r4
 80063f0:	4690      	mov	r8, r2
 80063f2:	f7ff ffdb 	bl	80063ac <__mcmp>
 80063f6:	1e05      	subs	r5, r0, #0
 80063f8:	d110      	bne.n	800641c <__mdiff+0x38>
 80063fa:	4629      	mov	r1, r5
 80063fc:	4630      	mov	r0, r6
 80063fe:	f7ff fd53 	bl	8005ea8 <_Balloc>
 8006402:	b930      	cbnz	r0, 8006412 <__mdiff+0x2e>
 8006404:	4b3a      	ldr	r3, [pc, #232]	; (80064f0 <__mdiff+0x10c>)
 8006406:	4602      	mov	r2, r0
 8006408:	f240 2132 	movw	r1, #562	; 0x232
 800640c:	4839      	ldr	r0, [pc, #228]	; (80064f4 <__mdiff+0x110>)
 800640e:	f000 fb31 	bl	8006a74 <__assert_func>
 8006412:	2301      	movs	r3, #1
 8006414:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	bfa4      	itt	ge
 800641e:	4643      	movge	r3, r8
 8006420:	46a0      	movge	r8, r4
 8006422:	4630      	mov	r0, r6
 8006424:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006428:	bfa6      	itte	ge
 800642a:	461c      	movge	r4, r3
 800642c:	2500      	movge	r5, #0
 800642e:	2501      	movlt	r5, #1
 8006430:	f7ff fd3a 	bl	8005ea8 <_Balloc>
 8006434:	b920      	cbnz	r0, 8006440 <__mdiff+0x5c>
 8006436:	4b2e      	ldr	r3, [pc, #184]	; (80064f0 <__mdiff+0x10c>)
 8006438:	4602      	mov	r2, r0
 800643a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800643e:	e7e5      	b.n	800640c <__mdiff+0x28>
 8006440:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006444:	6926      	ldr	r6, [r4, #16]
 8006446:	60c5      	str	r5, [r0, #12]
 8006448:	f104 0914 	add.w	r9, r4, #20
 800644c:	f108 0514 	add.w	r5, r8, #20
 8006450:	f100 0e14 	add.w	lr, r0, #20
 8006454:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006458:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800645c:	f108 0210 	add.w	r2, r8, #16
 8006460:	46f2      	mov	sl, lr
 8006462:	2100      	movs	r1, #0
 8006464:	f859 3b04 	ldr.w	r3, [r9], #4
 8006468:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800646c:	fa1f f883 	uxth.w	r8, r3
 8006470:	fa11 f18b 	uxtah	r1, r1, fp
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	eba1 0808 	sub.w	r8, r1, r8
 800647a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800647e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006482:	fa1f f888 	uxth.w	r8, r8
 8006486:	1419      	asrs	r1, r3, #16
 8006488:	454e      	cmp	r6, r9
 800648a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800648e:	f84a 3b04 	str.w	r3, [sl], #4
 8006492:	d8e7      	bhi.n	8006464 <__mdiff+0x80>
 8006494:	1b33      	subs	r3, r6, r4
 8006496:	3b15      	subs	r3, #21
 8006498:	f023 0303 	bic.w	r3, r3, #3
 800649c:	3304      	adds	r3, #4
 800649e:	3415      	adds	r4, #21
 80064a0:	42a6      	cmp	r6, r4
 80064a2:	bf38      	it	cc
 80064a4:	2304      	movcc	r3, #4
 80064a6:	441d      	add	r5, r3
 80064a8:	4473      	add	r3, lr
 80064aa:	469e      	mov	lr, r3
 80064ac:	462e      	mov	r6, r5
 80064ae:	4566      	cmp	r6, ip
 80064b0:	d30e      	bcc.n	80064d0 <__mdiff+0xec>
 80064b2:	f10c 0203 	add.w	r2, ip, #3
 80064b6:	1b52      	subs	r2, r2, r5
 80064b8:	f022 0203 	bic.w	r2, r2, #3
 80064bc:	3d03      	subs	r5, #3
 80064be:	45ac      	cmp	ip, r5
 80064c0:	bf38      	it	cc
 80064c2:	2200      	movcc	r2, #0
 80064c4:	441a      	add	r2, r3
 80064c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80064ca:	b17b      	cbz	r3, 80064ec <__mdiff+0x108>
 80064cc:	6107      	str	r7, [r0, #16]
 80064ce:	e7a3      	b.n	8006418 <__mdiff+0x34>
 80064d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80064d4:	fa11 f288 	uxtah	r2, r1, r8
 80064d8:	1414      	asrs	r4, r2, #16
 80064da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064de:	b292      	uxth	r2, r2
 80064e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80064e4:	f84e 2b04 	str.w	r2, [lr], #4
 80064e8:	1421      	asrs	r1, r4, #16
 80064ea:	e7e0      	b.n	80064ae <__mdiff+0xca>
 80064ec:	3f01      	subs	r7, #1
 80064ee:	e7ea      	b.n	80064c6 <__mdiff+0xe2>
 80064f0:	0800787f 	.word	0x0800787f
 80064f4:	08007890 	.word	0x08007890

080064f8 <__d2b>:
 80064f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	4689      	mov	r9, r1
 80064fe:	2101      	movs	r1, #1
 8006500:	ec57 6b10 	vmov	r6, r7, d0
 8006504:	4690      	mov	r8, r2
 8006506:	f7ff fccf 	bl	8005ea8 <_Balloc>
 800650a:	4604      	mov	r4, r0
 800650c:	b930      	cbnz	r0, 800651c <__d2b+0x24>
 800650e:	4602      	mov	r2, r0
 8006510:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <__d2b+0xb0>)
 8006512:	4826      	ldr	r0, [pc, #152]	; (80065ac <__d2b+0xb4>)
 8006514:	f240 310a 	movw	r1, #778	; 0x30a
 8006518:	f000 faac 	bl	8006a74 <__assert_func>
 800651c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006520:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006524:	bb35      	cbnz	r5, 8006574 <__d2b+0x7c>
 8006526:	2e00      	cmp	r6, #0
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	d028      	beq.n	800657e <__d2b+0x86>
 800652c:	4668      	mov	r0, sp
 800652e:	9600      	str	r6, [sp, #0]
 8006530:	f7ff fd82 	bl	8006038 <__lo0bits>
 8006534:	9900      	ldr	r1, [sp, #0]
 8006536:	b300      	cbz	r0, 800657a <__d2b+0x82>
 8006538:	9a01      	ldr	r2, [sp, #4]
 800653a:	f1c0 0320 	rsb	r3, r0, #32
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	430b      	orrs	r3, r1
 8006544:	40c2      	lsrs	r2, r0
 8006546:	6163      	str	r3, [r4, #20]
 8006548:	9201      	str	r2, [sp, #4]
 800654a:	9b01      	ldr	r3, [sp, #4]
 800654c:	61a3      	str	r3, [r4, #24]
 800654e:	2b00      	cmp	r3, #0
 8006550:	bf14      	ite	ne
 8006552:	2202      	movne	r2, #2
 8006554:	2201      	moveq	r2, #1
 8006556:	6122      	str	r2, [r4, #16]
 8006558:	b1d5      	cbz	r5, 8006590 <__d2b+0x98>
 800655a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800655e:	4405      	add	r5, r0
 8006560:	f8c9 5000 	str.w	r5, [r9]
 8006564:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006568:	f8c8 0000 	str.w	r0, [r8]
 800656c:	4620      	mov	r0, r4
 800656e:	b003      	add	sp, #12
 8006570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006578:	e7d5      	b.n	8006526 <__d2b+0x2e>
 800657a:	6161      	str	r1, [r4, #20]
 800657c:	e7e5      	b.n	800654a <__d2b+0x52>
 800657e:	a801      	add	r0, sp, #4
 8006580:	f7ff fd5a 	bl	8006038 <__lo0bits>
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	6163      	str	r3, [r4, #20]
 8006588:	2201      	movs	r2, #1
 800658a:	6122      	str	r2, [r4, #16]
 800658c:	3020      	adds	r0, #32
 800658e:	e7e3      	b.n	8006558 <__d2b+0x60>
 8006590:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006594:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006598:	f8c9 0000 	str.w	r0, [r9]
 800659c:	6918      	ldr	r0, [r3, #16]
 800659e:	f7ff fd2b 	bl	8005ff8 <__hi0bits>
 80065a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065a6:	e7df      	b.n	8006568 <__d2b+0x70>
 80065a8:	0800787f 	.word	0x0800787f
 80065ac:	08007890 	.word	0x08007890

080065b0 <_calloc_r>:
 80065b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065b2:	fba1 2402 	umull	r2, r4, r1, r2
 80065b6:	b94c      	cbnz	r4, 80065cc <_calloc_r+0x1c>
 80065b8:	4611      	mov	r1, r2
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	f000 f87a 	bl	80066b4 <_malloc_r>
 80065c0:	9a01      	ldr	r2, [sp, #4]
 80065c2:	4605      	mov	r5, r0
 80065c4:	b930      	cbnz	r0, 80065d4 <_calloc_r+0x24>
 80065c6:	4628      	mov	r0, r5
 80065c8:	b003      	add	sp, #12
 80065ca:	bd30      	pop	{r4, r5, pc}
 80065cc:	220c      	movs	r2, #12
 80065ce:	6002      	str	r2, [r0, #0]
 80065d0:	2500      	movs	r5, #0
 80065d2:	e7f8      	b.n	80065c6 <_calloc_r+0x16>
 80065d4:	4621      	mov	r1, r4
 80065d6:	f7fe f92d 	bl	8004834 <memset>
 80065da:	e7f4      	b.n	80065c6 <_calloc_r+0x16>

080065dc <_free_r>:
 80065dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065de:	2900      	cmp	r1, #0
 80065e0:	d044      	beq.n	800666c <_free_r+0x90>
 80065e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e6:	9001      	str	r0, [sp, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f1a1 0404 	sub.w	r4, r1, #4
 80065ee:	bfb8      	it	lt
 80065f0:	18e4      	addlt	r4, r4, r3
 80065f2:	f000 fa9b 	bl	8006b2c <__malloc_lock>
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <_free_r+0x94>)
 80065f8:	9801      	ldr	r0, [sp, #4]
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	b933      	cbnz	r3, 800660c <_free_r+0x30>
 80065fe:	6063      	str	r3, [r4, #4]
 8006600:	6014      	str	r4, [r2, #0]
 8006602:	b003      	add	sp, #12
 8006604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006608:	f000 ba96 	b.w	8006b38 <__malloc_unlock>
 800660c:	42a3      	cmp	r3, r4
 800660e:	d908      	bls.n	8006622 <_free_r+0x46>
 8006610:	6825      	ldr	r5, [r4, #0]
 8006612:	1961      	adds	r1, r4, r5
 8006614:	428b      	cmp	r3, r1
 8006616:	bf01      	itttt	eq
 8006618:	6819      	ldreq	r1, [r3, #0]
 800661a:	685b      	ldreq	r3, [r3, #4]
 800661c:	1949      	addeq	r1, r1, r5
 800661e:	6021      	streq	r1, [r4, #0]
 8006620:	e7ed      	b.n	80065fe <_free_r+0x22>
 8006622:	461a      	mov	r2, r3
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	b10b      	cbz	r3, 800662c <_free_r+0x50>
 8006628:	42a3      	cmp	r3, r4
 800662a:	d9fa      	bls.n	8006622 <_free_r+0x46>
 800662c:	6811      	ldr	r1, [r2, #0]
 800662e:	1855      	adds	r5, r2, r1
 8006630:	42a5      	cmp	r5, r4
 8006632:	d10b      	bne.n	800664c <_free_r+0x70>
 8006634:	6824      	ldr	r4, [r4, #0]
 8006636:	4421      	add	r1, r4
 8006638:	1854      	adds	r4, r2, r1
 800663a:	42a3      	cmp	r3, r4
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	d1e0      	bne.n	8006602 <_free_r+0x26>
 8006640:	681c      	ldr	r4, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	6053      	str	r3, [r2, #4]
 8006646:	4421      	add	r1, r4
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	e7da      	b.n	8006602 <_free_r+0x26>
 800664c:	d902      	bls.n	8006654 <_free_r+0x78>
 800664e:	230c      	movs	r3, #12
 8006650:	6003      	str	r3, [r0, #0]
 8006652:	e7d6      	b.n	8006602 <_free_r+0x26>
 8006654:	6825      	ldr	r5, [r4, #0]
 8006656:	1961      	adds	r1, r4, r5
 8006658:	428b      	cmp	r3, r1
 800665a:	bf04      	itt	eq
 800665c:	6819      	ldreq	r1, [r3, #0]
 800665e:	685b      	ldreq	r3, [r3, #4]
 8006660:	6063      	str	r3, [r4, #4]
 8006662:	bf04      	itt	eq
 8006664:	1949      	addeq	r1, r1, r5
 8006666:	6021      	streq	r1, [r4, #0]
 8006668:	6054      	str	r4, [r2, #4]
 800666a:	e7ca      	b.n	8006602 <_free_r+0x26>
 800666c:	b003      	add	sp, #12
 800666e:	bd30      	pop	{r4, r5, pc}
 8006670:	2000036c 	.word	0x2000036c

08006674 <sbrk_aligned>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4e0e      	ldr	r6, [pc, #56]	; (80066b0 <sbrk_aligned+0x3c>)
 8006678:	460c      	mov	r4, r1
 800667a:	6831      	ldr	r1, [r6, #0]
 800667c:	4605      	mov	r5, r0
 800667e:	b911      	cbnz	r1, 8006686 <sbrk_aligned+0x12>
 8006680:	f000 f9e8 	bl	8006a54 <_sbrk_r>
 8006684:	6030      	str	r0, [r6, #0]
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f9e3 	bl	8006a54 <_sbrk_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d00a      	beq.n	80066a8 <sbrk_aligned+0x34>
 8006692:	1cc4      	adds	r4, r0, #3
 8006694:	f024 0403 	bic.w	r4, r4, #3
 8006698:	42a0      	cmp	r0, r4
 800669a:	d007      	beq.n	80066ac <sbrk_aligned+0x38>
 800669c:	1a21      	subs	r1, r4, r0
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 f9d8 	bl	8006a54 <_sbrk_r>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d101      	bne.n	80066ac <sbrk_aligned+0x38>
 80066a8:	f04f 34ff 	mov.w	r4, #4294967295
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	20000370 	.word	0x20000370

080066b4 <_malloc_r>:
 80066b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b8:	1ccd      	adds	r5, r1, #3
 80066ba:	f025 0503 	bic.w	r5, r5, #3
 80066be:	3508      	adds	r5, #8
 80066c0:	2d0c      	cmp	r5, #12
 80066c2:	bf38      	it	cc
 80066c4:	250c      	movcc	r5, #12
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	4607      	mov	r7, r0
 80066ca:	db01      	blt.n	80066d0 <_malloc_r+0x1c>
 80066cc:	42a9      	cmp	r1, r5
 80066ce:	d905      	bls.n	80066dc <_malloc_r+0x28>
 80066d0:	230c      	movs	r3, #12
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	2600      	movs	r6, #0
 80066d6:	4630      	mov	r0, r6
 80066d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066dc:	4e2e      	ldr	r6, [pc, #184]	; (8006798 <_malloc_r+0xe4>)
 80066de:	f000 fa25 	bl	8006b2c <__malloc_lock>
 80066e2:	6833      	ldr	r3, [r6, #0]
 80066e4:	461c      	mov	r4, r3
 80066e6:	bb34      	cbnz	r4, 8006736 <_malloc_r+0x82>
 80066e8:	4629      	mov	r1, r5
 80066ea:	4638      	mov	r0, r7
 80066ec:	f7ff ffc2 	bl	8006674 <sbrk_aligned>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	4604      	mov	r4, r0
 80066f4:	d14d      	bne.n	8006792 <_malloc_r+0xde>
 80066f6:	6834      	ldr	r4, [r6, #0]
 80066f8:	4626      	mov	r6, r4
 80066fa:	2e00      	cmp	r6, #0
 80066fc:	d140      	bne.n	8006780 <_malloc_r+0xcc>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	4631      	mov	r1, r6
 8006702:	4638      	mov	r0, r7
 8006704:	eb04 0803 	add.w	r8, r4, r3
 8006708:	f000 f9a4 	bl	8006a54 <_sbrk_r>
 800670c:	4580      	cmp	r8, r0
 800670e:	d13a      	bne.n	8006786 <_malloc_r+0xd2>
 8006710:	6821      	ldr	r1, [r4, #0]
 8006712:	3503      	adds	r5, #3
 8006714:	1a6d      	subs	r5, r5, r1
 8006716:	f025 0503 	bic.w	r5, r5, #3
 800671a:	3508      	adds	r5, #8
 800671c:	2d0c      	cmp	r5, #12
 800671e:	bf38      	it	cc
 8006720:	250c      	movcc	r5, #12
 8006722:	4629      	mov	r1, r5
 8006724:	4638      	mov	r0, r7
 8006726:	f7ff ffa5 	bl	8006674 <sbrk_aligned>
 800672a:	3001      	adds	r0, #1
 800672c:	d02b      	beq.n	8006786 <_malloc_r+0xd2>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	442b      	add	r3, r5
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	e00e      	b.n	8006754 <_malloc_r+0xa0>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	1b52      	subs	r2, r2, r5
 800673a:	d41e      	bmi.n	800677a <_malloc_r+0xc6>
 800673c:	2a0b      	cmp	r2, #11
 800673e:	d916      	bls.n	800676e <_malloc_r+0xba>
 8006740:	1961      	adds	r1, r4, r5
 8006742:	42a3      	cmp	r3, r4
 8006744:	6025      	str	r5, [r4, #0]
 8006746:	bf18      	it	ne
 8006748:	6059      	strne	r1, [r3, #4]
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	bf08      	it	eq
 800674e:	6031      	streq	r1, [r6, #0]
 8006750:	5162      	str	r2, [r4, r5]
 8006752:	604b      	str	r3, [r1, #4]
 8006754:	4638      	mov	r0, r7
 8006756:	f104 060b 	add.w	r6, r4, #11
 800675a:	f000 f9ed 	bl	8006b38 <__malloc_unlock>
 800675e:	f026 0607 	bic.w	r6, r6, #7
 8006762:	1d23      	adds	r3, r4, #4
 8006764:	1af2      	subs	r2, r6, r3
 8006766:	d0b6      	beq.n	80066d6 <_malloc_r+0x22>
 8006768:	1b9b      	subs	r3, r3, r6
 800676a:	50a3      	str	r3, [r4, r2]
 800676c:	e7b3      	b.n	80066d6 <_malloc_r+0x22>
 800676e:	6862      	ldr	r2, [r4, #4]
 8006770:	42a3      	cmp	r3, r4
 8006772:	bf0c      	ite	eq
 8006774:	6032      	streq	r2, [r6, #0]
 8006776:	605a      	strne	r2, [r3, #4]
 8006778:	e7ec      	b.n	8006754 <_malloc_r+0xa0>
 800677a:	4623      	mov	r3, r4
 800677c:	6864      	ldr	r4, [r4, #4]
 800677e:	e7b2      	b.n	80066e6 <_malloc_r+0x32>
 8006780:	4634      	mov	r4, r6
 8006782:	6876      	ldr	r6, [r6, #4]
 8006784:	e7b9      	b.n	80066fa <_malloc_r+0x46>
 8006786:	230c      	movs	r3, #12
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4638      	mov	r0, r7
 800678c:	f000 f9d4 	bl	8006b38 <__malloc_unlock>
 8006790:	e7a1      	b.n	80066d6 <_malloc_r+0x22>
 8006792:	6025      	str	r5, [r4, #0]
 8006794:	e7de      	b.n	8006754 <_malloc_r+0xa0>
 8006796:	bf00      	nop
 8006798:	2000036c 	.word	0x2000036c

0800679c <__ssputs_r>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	688e      	ldr	r6, [r1, #8]
 80067a2:	429e      	cmp	r6, r3
 80067a4:	4682      	mov	sl, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	4690      	mov	r8, r2
 80067aa:	461f      	mov	r7, r3
 80067ac:	d838      	bhi.n	8006820 <__ssputs_r+0x84>
 80067ae:	898a      	ldrh	r2, [r1, #12]
 80067b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b4:	d032      	beq.n	800681c <__ssputs_r+0x80>
 80067b6:	6825      	ldr	r5, [r4, #0]
 80067b8:	6909      	ldr	r1, [r1, #16]
 80067ba:	eba5 0901 	sub.w	r9, r5, r1
 80067be:	6965      	ldr	r5, [r4, #20]
 80067c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067c8:	3301      	adds	r3, #1
 80067ca:	444b      	add	r3, r9
 80067cc:	106d      	asrs	r5, r5, #1
 80067ce:	429d      	cmp	r5, r3
 80067d0:	bf38      	it	cc
 80067d2:	461d      	movcc	r5, r3
 80067d4:	0553      	lsls	r3, r2, #21
 80067d6:	d531      	bpl.n	800683c <__ssputs_r+0xa0>
 80067d8:	4629      	mov	r1, r5
 80067da:	f7ff ff6b 	bl	80066b4 <_malloc_r>
 80067de:	4606      	mov	r6, r0
 80067e0:	b950      	cbnz	r0, 80067f8 <__ssputs_r+0x5c>
 80067e2:	230c      	movs	r3, #12
 80067e4:	f8ca 3000 	str.w	r3, [sl]
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	464a      	mov	r2, r9
 80067fc:	f7ff fb46 	bl	8005e8c <memcpy>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	6126      	str	r6, [r4, #16]
 800680e:	6165      	str	r5, [r4, #20]
 8006810:	444e      	add	r6, r9
 8006812:	eba5 0509 	sub.w	r5, r5, r9
 8006816:	6026      	str	r6, [r4, #0]
 8006818:	60a5      	str	r5, [r4, #8]
 800681a:	463e      	mov	r6, r7
 800681c:	42be      	cmp	r6, r7
 800681e:	d900      	bls.n	8006822 <__ssputs_r+0x86>
 8006820:	463e      	mov	r6, r7
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	4632      	mov	r2, r6
 8006826:	4641      	mov	r1, r8
 8006828:	f000 f966 	bl	8006af8 <memmove>
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	1b9b      	subs	r3, r3, r6
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	4433      	add	r3, r6
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	2000      	movs	r0, #0
 800683a:	e7db      	b.n	80067f4 <__ssputs_r+0x58>
 800683c:	462a      	mov	r2, r5
 800683e:	f000 f981 	bl	8006b44 <_realloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	d1e1      	bne.n	800680c <__ssputs_r+0x70>
 8006848:	6921      	ldr	r1, [r4, #16]
 800684a:	4650      	mov	r0, sl
 800684c:	f7ff fec6 	bl	80065dc <_free_r>
 8006850:	e7c7      	b.n	80067e2 <__ssputs_r+0x46>
	...

08006854 <_svfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4698      	mov	r8, r3
 800685a:	898b      	ldrh	r3, [r1, #12]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	b09d      	sub	sp, #116	; 0x74
 8006860:	4607      	mov	r7, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4614      	mov	r4, r2
 8006866:	d50e      	bpl.n	8006886 <_svfiprintf_r+0x32>
 8006868:	690b      	ldr	r3, [r1, #16]
 800686a:	b963      	cbnz	r3, 8006886 <_svfiprintf_r+0x32>
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	f7ff ff21 	bl	80066b4 <_malloc_r>
 8006872:	6028      	str	r0, [r5, #0]
 8006874:	6128      	str	r0, [r5, #16]
 8006876:	b920      	cbnz	r0, 8006882 <_svfiprintf_r+0x2e>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e0d1      	b.n	8006a26 <_svfiprintf_r+0x1d2>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	616b      	str	r3, [r5, #20]
 8006886:	2300      	movs	r3, #0
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	2320      	movs	r3, #32
 800688c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006890:	f8cd 800c 	str.w	r8, [sp, #12]
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a40 <_svfiprintf_r+0x1ec>
 800689a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800689e:	f04f 0901 	mov.w	r9, #1
 80068a2:	4623      	mov	r3, r4
 80068a4:	469a      	mov	sl, r3
 80068a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068aa:	b10a      	cbz	r2, 80068b0 <_svfiprintf_r+0x5c>
 80068ac:	2a25      	cmp	r2, #37	; 0x25
 80068ae:	d1f9      	bne.n	80068a4 <_svfiprintf_r+0x50>
 80068b0:	ebba 0b04 	subs.w	fp, sl, r4
 80068b4:	d00b      	beq.n	80068ce <_svfiprintf_r+0x7a>
 80068b6:	465b      	mov	r3, fp
 80068b8:	4622      	mov	r2, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ff6d 	bl	800679c <__ssputs_r>
 80068c2:	3001      	adds	r0, #1
 80068c4:	f000 80aa 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ca:	445a      	add	r2, fp
 80068cc:	9209      	str	r2, [sp, #36]	; 0x24
 80068ce:	f89a 3000 	ldrb.w	r3, [sl]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a2 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e2:	f10a 0a01 	add.w	sl, sl, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ee:	931a      	str	r3, [sp, #104]	; 0x68
 80068f0:	4654      	mov	r4, sl
 80068f2:	2205      	movs	r2, #5
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	4851      	ldr	r0, [pc, #324]	; (8006a40 <_svfiprintf_r+0x1ec>)
 80068fa:	f7f9 fc71 	bl	80001e0 <memchr>
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xe6>
 8006902:	06d0      	lsls	r0, r2, #27
 8006904:	bf44      	itt	mi
 8006906:	2320      	movmi	r3, #32
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	0711      	lsls	r1, r2, #28
 800690e:	bf44      	itt	mi
 8006910:	232b      	movmi	r3, #43	; 0x2b
 8006912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006916:	f89a 3000 	ldrb.w	r3, [sl]
 800691a:	2b2a      	cmp	r3, #42	; 0x2a
 800691c:	d015      	beq.n	800694a <_svfiprintf_r+0xf6>
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	4654      	mov	r4, sl
 8006922:	2000      	movs	r0, #0
 8006924:	f04f 0c0a 	mov.w	ip, #10
 8006928:	4621      	mov	r1, r4
 800692a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692e:	3b30      	subs	r3, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d94e      	bls.n	80069d2 <_svfiprintf_r+0x17e>
 8006934:	b1b0      	cbz	r0, 8006964 <_svfiprintf_r+0x110>
 8006936:	9207      	str	r2, [sp, #28]
 8006938:	e014      	b.n	8006964 <_svfiprintf_r+0x110>
 800693a:	eba0 0308 	sub.w	r3, r0, r8
 800693e:	fa09 f303 	lsl.w	r3, r9, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	46a2      	mov	sl, r4
 8006948:	e7d2      	b.n	80068f0 <_svfiprintf_r+0x9c>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfbb      	ittet	lt
 8006956:	425b      	neglt	r3, r3
 8006958:	f042 0202 	orrlt.w	r2, r2, #2
 800695c:	9307      	strge	r3, [sp, #28]
 800695e:	9307      	strlt	r3, [sp, #28]
 8006960:	bfb8      	it	lt
 8006962:	9204      	strlt	r2, [sp, #16]
 8006964:	7823      	ldrb	r3, [r4, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10c      	bne.n	8006984 <_svfiprintf_r+0x130>
 800696a:	7863      	ldrb	r3, [r4, #1]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d135      	bne.n	80069dc <_svfiprintf_r+0x188>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	9203      	str	r2, [sp, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfb8      	it	lt
 800697c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006980:	3402      	adds	r4, #2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a50 <_svfiprintf_r+0x1fc>
 8006988:	7821      	ldrb	r1, [r4, #0]
 800698a:	2203      	movs	r2, #3
 800698c:	4650      	mov	r0, sl
 800698e:	f7f9 fc27 	bl	80001e0 <memchr>
 8006992:	b140      	cbz	r0, 80069a6 <_svfiprintf_r+0x152>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	eba0 000a 	sub.w	r0, r0, sl
 800699a:	fa03 f000 	lsl.w	r0, r3, r0
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	4303      	orrs	r3, r0
 80069a2:	3401      	adds	r4, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	4826      	ldr	r0, [pc, #152]	; (8006a44 <_svfiprintf_r+0x1f0>)
 80069ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b0:	2206      	movs	r2, #6
 80069b2:	f7f9 fc15 	bl	80001e0 <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d038      	beq.n	8006a2c <_svfiprintf_r+0x1d8>
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <_svfiprintf_r+0x1f4>)
 80069bc:	bb1b      	cbnz	r3, 8006a06 <_svfiprintf_r+0x1b2>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	4433      	add	r3, r6
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e767      	b.n	80068a2 <_svfiprintf_r+0x4e>
 80069d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	2001      	movs	r0, #1
 80069da:	e7a5      	b.n	8006928 <_svfiprintf_r+0xd4>
 80069dc:	2300      	movs	r3, #0
 80069de:	3401      	adds	r4, #1
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	4619      	mov	r1, r3
 80069e4:	f04f 0c0a 	mov.w	ip, #10
 80069e8:	4620      	mov	r0, r4
 80069ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	2a09      	cmp	r2, #9
 80069f2:	d903      	bls.n	80069fc <_svfiprintf_r+0x1a8>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c5      	beq.n	8006984 <_svfiprintf_r+0x130>
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	e7c3      	b.n	8006984 <_svfiprintf_r+0x130>
 80069fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a00:	4604      	mov	r4, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f0      	b.n	80069e8 <_svfiprintf_r+0x194>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a0e:	a904      	add	r1, sp, #16
 8006a10:	4638      	mov	r0, r7
 8006a12:	f7fd ffb7 	bl	8004984 <_printf_float>
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	d1d6      	bne.n	80069ca <_svfiprintf_r+0x176>
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	065b      	lsls	r3, r3, #25
 8006a20:	f53f af2c 	bmi.w	800687c <_svfiprintf_r+0x28>
 8006a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a26:	b01d      	add	sp, #116	; 0x74
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a34:	a904      	add	r1, sp, #16
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7fe fa48 	bl	8004ecc <_printf_i>
 8006a3c:	e7eb      	b.n	8006a16 <_svfiprintf_r+0x1c2>
 8006a3e:	bf00      	nop
 8006a40:	080079ec 	.word	0x080079ec
 8006a44:	080079f6 	.word	0x080079f6
 8006a48:	08004985 	.word	0x08004985
 8006a4c:	0800679d 	.word	0x0800679d
 8006a50:	080079f2 	.word	0x080079f2

08006a54 <_sbrk_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d06      	ldr	r5, [pc, #24]	; (8006a70 <_sbrk_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	f7fa fd88 	bl	8001574 <_sbrk>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_sbrk_r+0x1a>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_sbrk_r+0x1a>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20000374 	.word	0x20000374

08006a74 <__assert_func>:
 8006a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a76:	4614      	mov	r4, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <__assert_func+0x2c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4605      	mov	r5, r0
 8006a80:	68d8      	ldr	r0, [r3, #12]
 8006a82:	b14c      	cbz	r4, 8006a98 <__assert_func+0x24>
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <__assert_func+0x30>)
 8006a86:	9100      	str	r1, [sp, #0]
 8006a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a8c:	4906      	ldr	r1, [pc, #24]	; (8006aa8 <__assert_func+0x34>)
 8006a8e:	462b      	mov	r3, r5
 8006a90:	f000 f80e 	bl	8006ab0 <fiprintf>
 8006a94:	f000 faac 	bl	8006ff0 <abort>
 8006a98:	4b04      	ldr	r3, [pc, #16]	; (8006aac <__assert_func+0x38>)
 8006a9a:	461c      	mov	r4, r3
 8006a9c:	e7f3      	b.n	8006a86 <__assert_func+0x12>
 8006a9e:	bf00      	nop
 8006aa0:	2000000c 	.word	0x2000000c
 8006aa4:	080079fd 	.word	0x080079fd
 8006aa8:	08007a0a 	.word	0x08007a0a
 8006aac:	08007a38 	.word	0x08007a38

08006ab0 <fiprintf>:
 8006ab0:	b40e      	push	{r1, r2, r3}
 8006ab2:	b503      	push	{r0, r1, lr}
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	ab03      	add	r3, sp, #12
 8006ab8:	4805      	ldr	r0, [pc, #20]	; (8006ad0 <fiprintf+0x20>)
 8006aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abe:	6800      	ldr	r0, [r0, #0]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	f000 f897 	bl	8006bf4 <_vfiprintf_r>
 8006ac6:	b002      	add	sp, #8
 8006ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006acc:	b003      	add	sp, #12
 8006ace:	4770      	bx	lr
 8006ad0:	2000000c 	.word	0x2000000c

08006ad4 <__ascii_mbtowc>:
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	b901      	cbnz	r1, 8006ada <__ascii_mbtowc+0x6>
 8006ad8:	a901      	add	r1, sp, #4
 8006ada:	b142      	cbz	r2, 8006aee <__ascii_mbtowc+0x1a>
 8006adc:	b14b      	cbz	r3, 8006af2 <__ascii_mbtowc+0x1e>
 8006ade:	7813      	ldrb	r3, [r2, #0]
 8006ae0:	600b      	str	r3, [r1, #0]
 8006ae2:	7812      	ldrb	r2, [r2, #0]
 8006ae4:	1e10      	subs	r0, r2, #0
 8006ae6:	bf18      	it	ne
 8006ae8:	2001      	movne	r0, #1
 8006aea:	b002      	add	sp, #8
 8006aec:	4770      	bx	lr
 8006aee:	4610      	mov	r0, r2
 8006af0:	e7fb      	b.n	8006aea <__ascii_mbtowc+0x16>
 8006af2:	f06f 0001 	mvn.w	r0, #1
 8006af6:	e7f8      	b.n	8006aea <__ascii_mbtowc+0x16>

08006af8 <memmove>:
 8006af8:	4288      	cmp	r0, r1
 8006afa:	b510      	push	{r4, lr}
 8006afc:	eb01 0402 	add.w	r4, r1, r2
 8006b00:	d902      	bls.n	8006b08 <memmove+0x10>
 8006b02:	4284      	cmp	r4, r0
 8006b04:	4623      	mov	r3, r4
 8006b06:	d807      	bhi.n	8006b18 <memmove+0x20>
 8006b08:	1e43      	subs	r3, r0, #1
 8006b0a:	42a1      	cmp	r1, r4
 8006b0c:	d008      	beq.n	8006b20 <memmove+0x28>
 8006b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b16:	e7f8      	b.n	8006b0a <memmove+0x12>
 8006b18:	4402      	add	r2, r0
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	428a      	cmp	r2, r1
 8006b1e:	d100      	bne.n	8006b22 <memmove+0x2a>
 8006b20:	bd10      	pop	{r4, pc}
 8006b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b2a:	e7f7      	b.n	8006b1c <memmove+0x24>

08006b2c <__malloc_lock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__malloc_lock+0x8>)
 8006b2e:	f000 bc1f 	b.w	8007370 <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	20000378 	.word	0x20000378

08006b38 <__malloc_unlock>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__malloc_unlock+0x8>)
 8006b3a:	f000 bc1a 	b.w	8007372 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20000378 	.word	0x20000378

08006b44 <_realloc_r>:
 8006b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b48:	4680      	mov	r8, r0
 8006b4a:	4614      	mov	r4, r2
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	b921      	cbnz	r1, 8006b5a <_realloc_r+0x16>
 8006b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b54:	4611      	mov	r1, r2
 8006b56:	f7ff bdad 	b.w	80066b4 <_malloc_r>
 8006b5a:	b92a      	cbnz	r2, 8006b68 <_realloc_r+0x24>
 8006b5c:	f7ff fd3e 	bl	80065dc <_free_r>
 8006b60:	4625      	mov	r5, r4
 8006b62:	4628      	mov	r0, r5
 8006b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b68:	f000 fc6a 	bl	8007440 <_malloc_usable_size_r>
 8006b6c:	4284      	cmp	r4, r0
 8006b6e:	4607      	mov	r7, r0
 8006b70:	d802      	bhi.n	8006b78 <_realloc_r+0x34>
 8006b72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b76:	d812      	bhi.n	8006b9e <_realloc_r+0x5a>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f7ff fd9a 	bl	80066b4 <_malloc_r>
 8006b80:	4605      	mov	r5, r0
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d0ed      	beq.n	8006b62 <_realloc_r+0x1e>
 8006b86:	42bc      	cmp	r4, r7
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	bf28      	it	cs
 8006b8e:	463a      	movcs	r2, r7
 8006b90:	f7ff f97c 	bl	8005e8c <memcpy>
 8006b94:	4631      	mov	r1, r6
 8006b96:	4640      	mov	r0, r8
 8006b98:	f7ff fd20 	bl	80065dc <_free_r>
 8006b9c:	e7e1      	b.n	8006b62 <_realloc_r+0x1e>
 8006b9e:	4635      	mov	r5, r6
 8006ba0:	e7df      	b.n	8006b62 <_realloc_r+0x1e>

08006ba2 <__sfputc_r>:
 8006ba2:	6893      	ldr	r3, [r2, #8]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	b410      	push	{r4}
 8006baa:	6093      	str	r3, [r2, #8]
 8006bac:	da08      	bge.n	8006bc0 <__sfputc_r+0x1e>
 8006bae:	6994      	ldr	r4, [r2, #24]
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	db01      	blt.n	8006bb8 <__sfputc_r+0x16>
 8006bb4:	290a      	cmp	r1, #10
 8006bb6:	d103      	bne.n	8006bc0 <__sfputc_r+0x1e>
 8006bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bbc:	f000 b94a 	b.w	8006e54 <__swbuf_r>
 8006bc0:	6813      	ldr	r3, [r2, #0]
 8006bc2:	1c58      	adds	r0, r3, #1
 8006bc4:	6010      	str	r0, [r2, #0]
 8006bc6:	7019      	strb	r1, [r3, #0]
 8006bc8:	4608      	mov	r0, r1
 8006bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <__sfputs_r>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	18d5      	adds	r5, r2, r3
 8006bda:	42ac      	cmp	r4, r5
 8006bdc:	d101      	bne.n	8006be2 <__sfputs_r+0x12>
 8006bde:	2000      	movs	r0, #0
 8006be0:	e007      	b.n	8006bf2 <__sfputs_r+0x22>
 8006be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be6:	463a      	mov	r2, r7
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff ffda 	bl	8006ba2 <__sfputc_r>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	d1f3      	bne.n	8006bda <__sfputs_r+0xa>
 8006bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bf4 <_vfiprintf_r>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	b09d      	sub	sp, #116	; 0x74
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	4698      	mov	r8, r3
 8006c00:	4606      	mov	r6, r0
 8006c02:	b118      	cbz	r0, 8006c0c <_vfiprintf_r+0x18>
 8006c04:	6983      	ldr	r3, [r0, #24]
 8006c06:	b90b      	cbnz	r3, 8006c0c <_vfiprintf_r+0x18>
 8006c08:	f000 fb14 	bl	8007234 <__sinit>
 8006c0c:	4b89      	ldr	r3, [pc, #548]	; (8006e34 <_vfiprintf_r+0x240>)
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	d11b      	bne.n	8006c4a <_vfiprintf_r+0x56>
 8006c12:	6875      	ldr	r5, [r6, #4]
 8006c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c16:	07d9      	lsls	r1, r3, #31
 8006c18:	d405      	bmi.n	8006c26 <_vfiprintf_r+0x32>
 8006c1a:	89ab      	ldrh	r3, [r5, #12]
 8006c1c:	059a      	lsls	r2, r3, #22
 8006c1e:	d402      	bmi.n	8006c26 <_vfiprintf_r+0x32>
 8006c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c22:	f000 fba5 	bl	8007370 <__retarget_lock_acquire_recursive>
 8006c26:	89ab      	ldrh	r3, [r5, #12]
 8006c28:	071b      	lsls	r3, r3, #28
 8006c2a:	d501      	bpl.n	8006c30 <_vfiprintf_r+0x3c>
 8006c2c:	692b      	ldr	r3, [r5, #16]
 8006c2e:	b9eb      	cbnz	r3, 8006c6c <_vfiprintf_r+0x78>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4630      	mov	r0, r6
 8006c34:	f000 f96e 	bl	8006f14 <__swsetup_r>
 8006c38:	b1c0      	cbz	r0, 8006c6c <_vfiprintf_r+0x78>
 8006c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c3c:	07dc      	lsls	r4, r3, #31
 8006c3e:	d50e      	bpl.n	8006c5e <_vfiprintf_r+0x6a>
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	b01d      	add	sp, #116	; 0x74
 8006c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4a:	4b7b      	ldr	r3, [pc, #492]	; (8006e38 <_vfiprintf_r+0x244>)
 8006c4c:	429d      	cmp	r5, r3
 8006c4e:	d101      	bne.n	8006c54 <_vfiprintf_r+0x60>
 8006c50:	68b5      	ldr	r5, [r6, #8]
 8006c52:	e7df      	b.n	8006c14 <_vfiprintf_r+0x20>
 8006c54:	4b79      	ldr	r3, [pc, #484]	; (8006e3c <_vfiprintf_r+0x248>)
 8006c56:	429d      	cmp	r5, r3
 8006c58:	bf08      	it	eq
 8006c5a:	68f5      	ldreq	r5, [r6, #12]
 8006c5c:	e7da      	b.n	8006c14 <_vfiprintf_r+0x20>
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	0598      	lsls	r0, r3, #22
 8006c62:	d4ed      	bmi.n	8006c40 <_vfiprintf_r+0x4c>
 8006c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c66:	f000 fb84 	bl	8007372 <__retarget_lock_release_recursive>
 8006c6a:	e7e9      	b.n	8006c40 <_vfiprintf_r+0x4c>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c70:	2320      	movs	r3, #32
 8006c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c7a:	2330      	movs	r3, #48	; 0x30
 8006c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e40 <_vfiprintf_r+0x24c>
 8006c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c84:	f04f 0901 	mov.w	r9, #1
 8006c88:	4623      	mov	r3, r4
 8006c8a:	469a      	mov	sl, r3
 8006c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c90:	b10a      	cbz	r2, 8006c96 <_vfiprintf_r+0xa2>
 8006c92:	2a25      	cmp	r2, #37	; 0x25
 8006c94:	d1f9      	bne.n	8006c8a <_vfiprintf_r+0x96>
 8006c96:	ebba 0b04 	subs.w	fp, sl, r4
 8006c9a:	d00b      	beq.n	8006cb4 <_vfiprintf_r+0xc0>
 8006c9c:	465b      	mov	r3, fp
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7ff ff94 	bl	8006bd0 <__sfputs_r>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f000 80aa 	beq.w	8006e02 <_vfiprintf_r+0x20e>
 8006cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb0:	445a      	add	r2, fp
 8006cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80a2 	beq.w	8006e02 <_vfiprintf_r+0x20e>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc8:	f10a 0a01 	add.w	sl, sl, #1
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	9307      	str	r3, [sp, #28]
 8006cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd6:	4654      	mov	r4, sl
 8006cd8:	2205      	movs	r2, #5
 8006cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cde:	4858      	ldr	r0, [pc, #352]	; (8006e40 <_vfiprintf_r+0x24c>)
 8006ce0:	f7f9 fa7e 	bl	80001e0 <memchr>
 8006ce4:	9a04      	ldr	r2, [sp, #16]
 8006ce6:	b9d8      	cbnz	r0, 8006d20 <_vfiprintf_r+0x12c>
 8006ce8:	06d1      	lsls	r1, r2, #27
 8006cea:	bf44      	itt	mi
 8006cec:	2320      	movmi	r3, #32
 8006cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf2:	0713      	lsls	r3, r2, #28
 8006cf4:	bf44      	itt	mi
 8006cf6:	232b      	movmi	r3, #43	; 0x2b
 8006cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8006d00:	2b2a      	cmp	r3, #42	; 0x2a
 8006d02:	d015      	beq.n	8006d30 <_vfiprintf_r+0x13c>
 8006d04:	9a07      	ldr	r2, [sp, #28]
 8006d06:	4654      	mov	r4, sl
 8006d08:	2000      	movs	r0, #0
 8006d0a:	f04f 0c0a 	mov.w	ip, #10
 8006d0e:	4621      	mov	r1, r4
 8006d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d14:	3b30      	subs	r3, #48	; 0x30
 8006d16:	2b09      	cmp	r3, #9
 8006d18:	d94e      	bls.n	8006db8 <_vfiprintf_r+0x1c4>
 8006d1a:	b1b0      	cbz	r0, 8006d4a <_vfiprintf_r+0x156>
 8006d1c:	9207      	str	r2, [sp, #28]
 8006d1e:	e014      	b.n	8006d4a <_vfiprintf_r+0x156>
 8006d20:	eba0 0308 	sub.w	r3, r0, r8
 8006d24:	fa09 f303 	lsl.w	r3, r9, r3
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	46a2      	mov	sl, r4
 8006d2e:	e7d2      	b.n	8006cd6 <_vfiprintf_r+0xe2>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	1d19      	adds	r1, r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	9103      	str	r1, [sp, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	bfbb      	ittet	lt
 8006d3c:	425b      	neglt	r3, r3
 8006d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d42:	9307      	strge	r3, [sp, #28]
 8006d44:	9307      	strlt	r3, [sp, #28]
 8006d46:	bfb8      	it	lt
 8006d48:	9204      	strlt	r2, [sp, #16]
 8006d4a:	7823      	ldrb	r3, [r4, #0]
 8006d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4e:	d10c      	bne.n	8006d6a <_vfiprintf_r+0x176>
 8006d50:	7863      	ldrb	r3, [r4, #1]
 8006d52:	2b2a      	cmp	r3, #42	; 0x2a
 8006d54:	d135      	bne.n	8006dc2 <_vfiprintf_r+0x1ce>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	9203      	str	r2, [sp, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfb8      	it	lt
 8006d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d66:	3402      	adds	r4, #2
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e50 <_vfiprintf_r+0x25c>
 8006d6e:	7821      	ldrb	r1, [r4, #0]
 8006d70:	2203      	movs	r2, #3
 8006d72:	4650      	mov	r0, sl
 8006d74:	f7f9 fa34 	bl	80001e0 <memchr>
 8006d78:	b140      	cbz	r0, 8006d8c <_vfiprintf_r+0x198>
 8006d7a:	2340      	movs	r3, #64	; 0x40
 8006d7c:	eba0 000a 	sub.w	r0, r0, sl
 8006d80:	fa03 f000 	lsl.w	r0, r3, r0
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	4303      	orrs	r3, r0
 8006d88:	3401      	adds	r4, #1
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d90:	482c      	ldr	r0, [pc, #176]	; (8006e44 <_vfiprintf_r+0x250>)
 8006d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d96:	2206      	movs	r2, #6
 8006d98:	f7f9 fa22 	bl	80001e0 <memchr>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d03f      	beq.n	8006e20 <_vfiprintf_r+0x22c>
 8006da0:	4b29      	ldr	r3, [pc, #164]	; (8006e48 <_vfiprintf_r+0x254>)
 8006da2:	bb1b      	cbnz	r3, 8006dec <_vfiprintf_r+0x1f8>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	3307      	adds	r3, #7
 8006da8:	f023 0307 	bic.w	r3, r3, #7
 8006dac:	3308      	adds	r3, #8
 8006dae:	9303      	str	r3, [sp, #12]
 8006db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db2:	443b      	add	r3, r7
 8006db4:	9309      	str	r3, [sp, #36]	; 0x24
 8006db6:	e767      	b.n	8006c88 <_vfiprintf_r+0x94>
 8006db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	e7a5      	b.n	8006d0e <_vfiprintf_r+0x11a>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	3401      	adds	r4, #1
 8006dc6:	9305      	str	r3, [sp, #20]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f04f 0c0a 	mov.w	ip, #10
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd4:	3a30      	subs	r2, #48	; 0x30
 8006dd6:	2a09      	cmp	r2, #9
 8006dd8:	d903      	bls.n	8006de2 <_vfiprintf_r+0x1ee>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0c5      	beq.n	8006d6a <_vfiprintf_r+0x176>
 8006dde:	9105      	str	r1, [sp, #20]
 8006de0:	e7c3      	b.n	8006d6a <_vfiprintf_r+0x176>
 8006de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006de6:	4604      	mov	r4, r0
 8006de8:	2301      	movs	r3, #1
 8006dea:	e7f0      	b.n	8006dce <_vfiprintf_r+0x1da>
 8006dec:	ab03      	add	r3, sp, #12
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	462a      	mov	r2, r5
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <_vfiprintf_r+0x258>)
 8006df4:	a904      	add	r1, sp, #16
 8006df6:	4630      	mov	r0, r6
 8006df8:	f7fd fdc4 	bl	8004984 <_printf_float>
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	1c78      	adds	r0, r7, #1
 8006e00:	d1d6      	bne.n	8006db0 <_vfiprintf_r+0x1bc>
 8006e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e04:	07d9      	lsls	r1, r3, #31
 8006e06:	d405      	bmi.n	8006e14 <_vfiprintf_r+0x220>
 8006e08:	89ab      	ldrh	r3, [r5, #12]
 8006e0a:	059a      	lsls	r2, r3, #22
 8006e0c:	d402      	bmi.n	8006e14 <_vfiprintf_r+0x220>
 8006e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e10:	f000 faaf 	bl	8007372 <__retarget_lock_release_recursive>
 8006e14:	89ab      	ldrh	r3, [r5, #12]
 8006e16:	065b      	lsls	r3, r3, #25
 8006e18:	f53f af12 	bmi.w	8006c40 <_vfiprintf_r+0x4c>
 8006e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1e:	e711      	b.n	8006c44 <_vfiprintf_r+0x50>
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	462a      	mov	r2, r5
 8006e26:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <_vfiprintf_r+0x258>)
 8006e28:	a904      	add	r1, sp, #16
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f7fe f84e 	bl	8004ecc <_printf_i>
 8006e30:	e7e4      	b.n	8006dfc <_vfiprintf_r+0x208>
 8006e32:	bf00      	nop
 8006e34:	08007b64 	.word	0x08007b64
 8006e38:	08007b84 	.word	0x08007b84
 8006e3c:	08007b44 	.word	0x08007b44
 8006e40:	080079ec 	.word	0x080079ec
 8006e44:	080079f6 	.word	0x080079f6
 8006e48:	08004985 	.word	0x08004985
 8006e4c:	08006bd1 	.word	0x08006bd1
 8006e50:	080079f2 	.word	0x080079f2

08006e54 <__swbuf_r>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	460e      	mov	r6, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b118      	cbz	r0, 8006e66 <__swbuf_r+0x12>
 8006e5e:	6983      	ldr	r3, [r0, #24]
 8006e60:	b90b      	cbnz	r3, 8006e66 <__swbuf_r+0x12>
 8006e62:	f000 f9e7 	bl	8007234 <__sinit>
 8006e66:	4b21      	ldr	r3, [pc, #132]	; (8006eec <__swbuf_r+0x98>)
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	d12b      	bne.n	8006ec4 <__swbuf_r+0x70>
 8006e6c:	686c      	ldr	r4, [r5, #4]
 8006e6e:	69a3      	ldr	r3, [r4, #24]
 8006e70:	60a3      	str	r3, [r4, #8]
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	071a      	lsls	r2, r3, #28
 8006e76:	d52f      	bpl.n	8006ed8 <__swbuf_r+0x84>
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	b36b      	cbz	r3, 8006ed8 <__swbuf_r+0x84>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	6820      	ldr	r0, [r4, #0]
 8006e80:	1ac0      	subs	r0, r0, r3
 8006e82:	6963      	ldr	r3, [r4, #20]
 8006e84:	b2f6      	uxtb	r6, r6
 8006e86:	4283      	cmp	r3, r0
 8006e88:	4637      	mov	r7, r6
 8006e8a:	dc04      	bgt.n	8006e96 <__swbuf_r+0x42>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f93c 	bl	800710c <_fflush_r>
 8006e94:	bb30      	cbnz	r0, 8006ee4 <__swbuf_r+0x90>
 8006e96:	68a3      	ldr	r3, [r4, #8]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	60a3      	str	r3, [r4, #8]
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	701e      	strb	r6, [r3, #0]
 8006ea4:	6963      	ldr	r3, [r4, #20]
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	4283      	cmp	r3, r0
 8006eaa:	d004      	beq.n	8006eb6 <__swbuf_r+0x62>
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d506      	bpl.n	8006ec0 <__swbuf_r+0x6c>
 8006eb2:	2e0a      	cmp	r6, #10
 8006eb4:	d104      	bne.n	8006ec0 <__swbuf_r+0x6c>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f927 	bl	800710c <_fflush_r>
 8006ebe:	b988      	cbnz	r0, 8006ee4 <__swbuf_r+0x90>
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <__swbuf_r+0x9c>)
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d101      	bne.n	8006ece <__swbuf_r+0x7a>
 8006eca:	68ac      	ldr	r4, [r5, #8]
 8006ecc:	e7cf      	b.n	8006e6e <__swbuf_r+0x1a>
 8006ece:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <__swbuf_r+0xa0>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	bf08      	it	eq
 8006ed4:	68ec      	ldreq	r4, [r5, #12]
 8006ed6:	e7ca      	b.n	8006e6e <__swbuf_r+0x1a>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 f81a 	bl	8006f14 <__swsetup_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d0cb      	beq.n	8006e7c <__swbuf_r+0x28>
 8006ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ee8:	e7ea      	b.n	8006ec0 <__swbuf_r+0x6c>
 8006eea:	bf00      	nop
 8006eec:	08007b64 	.word	0x08007b64
 8006ef0:	08007b84 	.word	0x08007b84
 8006ef4:	08007b44 	.word	0x08007b44

08006ef8 <__ascii_wctomb>:
 8006ef8:	b149      	cbz	r1, 8006f0e <__ascii_wctomb+0x16>
 8006efa:	2aff      	cmp	r2, #255	; 0xff
 8006efc:	bf85      	ittet	hi
 8006efe:	238a      	movhi	r3, #138	; 0x8a
 8006f00:	6003      	strhi	r3, [r0, #0]
 8006f02:	700a      	strbls	r2, [r1, #0]
 8006f04:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f08:	bf98      	it	ls
 8006f0a:	2001      	movls	r0, #1
 8006f0c:	4770      	bx	lr
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4770      	bx	lr
	...

08006f14 <__swsetup_r>:
 8006f14:	4b32      	ldr	r3, [pc, #200]	; (8006fe0 <__swsetup_r+0xcc>)
 8006f16:	b570      	push	{r4, r5, r6, lr}
 8006f18:	681d      	ldr	r5, [r3, #0]
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	b125      	cbz	r5, 8006f2a <__swsetup_r+0x16>
 8006f20:	69ab      	ldr	r3, [r5, #24]
 8006f22:	b913      	cbnz	r3, 8006f2a <__swsetup_r+0x16>
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 f985 	bl	8007234 <__sinit>
 8006f2a:	4b2e      	ldr	r3, [pc, #184]	; (8006fe4 <__swsetup_r+0xd0>)
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	d10f      	bne.n	8006f50 <__swsetup_r+0x3c>
 8006f30:	686c      	ldr	r4, [r5, #4]
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f38:	0719      	lsls	r1, r3, #28
 8006f3a:	d42c      	bmi.n	8006f96 <__swsetup_r+0x82>
 8006f3c:	06dd      	lsls	r5, r3, #27
 8006f3e:	d411      	bmi.n	8006f64 <__swsetup_r+0x50>
 8006f40:	2309      	movs	r3, #9
 8006f42:	6033      	str	r3, [r6, #0]
 8006f44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f48:	81a3      	strh	r3, [r4, #12]
 8006f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4e:	e03e      	b.n	8006fce <__swsetup_r+0xba>
 8006f50:	4b25      	ldr	r3, [pc, #148]	; (8006fe8 <__swsetup_r+0xd4>)
 8006f52:	429c      	cmp	r4, r3
 8006f54:	d101      	bne.n	8006f5a <__swsetup_r+0x46>
 8006f56:	68ac      	ldr	r4, [r5, #8]
 8006f58:	e7eb      	b.n	8006f32 <__swsetup_r+0x1e>
 8006f5a:	4b24      	ldr	r3, [pc, #144]	; (8006fec <__swsetup_r+0xd8>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	bf08      	it	eq
 8006f60:	68ec      	ldreq	r4, [r5, #12]
 8006f62:	e7e6      	b.n	8006f32 <__swsetup_r+0x1e>
 8006f64:	0758      	lsls	r0, r3, #29
 8006f66:	d512      	bpl.n	8006f8e <__swsetup_r+0x7a>
 8006f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f6a:	b141      	cbz	r1, 8006f7e <__swsetup_r+0x6a>
 8006f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f70:	4299      	cmp	r1, r3
 8006f72:	d002      	beq.n	8006f7a <__swsetup_r+0x66>
 8006f74:	4630      	mov	r0, r6
 8006f76:	f7ff fb31 	bl	80065dc <_free_r>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f84:	81a3      	strh	r3, [r4, #12]
 8006f86:	2300      	movs	r3, #0
 8006f88:	6063      	str	r3, [r4, #4]
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	f043 0308 	orr.w	r3, r3, #8
 8006f94:	81a3      	strh	r3, [r4, #12]
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	b94b      	cbnz	r3, 8006fae <__swsetup_r+0x9a>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa4:	d003      	beq.n	8006fae <__swsetup_r+0x9a>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f000 fa09 	bl	80073c0 <__smakebuf_r>
 8006fae:	89a0      	ldrh	r0, [r4, #12]
 8006fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fb4:	f010 0301 	ands.w	r3, r0, #1
 8006fb8:	d00a      	beq.n	8006fd0 <__swsetup_r+0xbc>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60a3      	str	r3, [r4, #8]
 8006fbe:	6963      	ldr	r3, [r4, #20]
 8006fc0:	425b      	negs	r3, r3
 8006fc2:	61a3      	str	r3, [r4, #24]
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	b943      	cbnz	r3, 8006fda <__swsetup_r+0xc6>
 8006fc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fcc:	d1ba      	bne.n	8006f44 <__swsetup_r+0x30>
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	0781      	lsls	r1, r0, #30
 8006fd2:	bf58      	it	pl
 8006fd4:	6963      	ldrpl	r3, [r4, #20]
 8006fd6:	60a3      	str	r3, [r4, #8]
 8006fd8:	e7f4      	b.n	8006fc4 <__swsetup_r+0xb0>
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e7f7      	b.n	8006fce <__swsetup_r+0xba>
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c
 8006fe4:	08007b64 	.word	0x08007b64
 8006fe8:	08007b84 	.word	0x08007b84
 8006fec:	08007b44 	.word	0x08007b44

08006ff0 <abort>:
 8006ff0:	b508      	push	{r3, lr}
 8006ff2:	2006      	movs	r0, #6
 8006ff4:	f000 fa54 	bl	80074a0 <raise>
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	f7fa fa43 	bl	8001484 <_exit>
	...

08007000 <__sflush_r>:
 8007000:	898a      	ldrh	r2, [r1, #12]
 8007002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	4605      	mov	r5, r0
 8007008:	0710      	lsls	r0, r2, #28
 800700a:	460c      	mov	r4, r1
 800700c:	d458      	bmi.n	80070c0 <__sflush_r+0xc0>
 800700e:	684b      	ldr	r3, [r1, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	dc05      	bgt.n	8007020 <__sflush_r+0x20>
 8007014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	dc02      	bgt.n	8007020 <__sflush_r+0x20>
 800701a:	2000      	movs	r0, #0
 800701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007022:	2e00      	cmp	r6, #0
 8007024:	d0f9      	beq.n	800701a <__sflush_r+0x1a>
 8007026:	2300      	movs	r3, #0
 8007028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800702c:	682f      	ldr	r7, [r5, #0]
 800702e:	602b      	str	r3, [r5, #0]
 8007030:	d032      	beq.n	8007098 <__sflush_r+0x98>
 8007032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007034:	89a3      	ldrh	r3, [r4, #12]
 8007036:	075a      	lsls	r2, r3, #29
 8007038:	d505      	bpl.n	8007046 <__sflush_r+0x46>
 800703a:	6863      	ldr	r3, [r4, #4]
 800703c:	1ac0      	subs	r0, r0, r3
 800703e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007040:	b10b      	cbz	r3, 8007046 <__sflush_r+0x46>
 8007042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007044:	1ac0      	subs	r0, r0, r3
 8007046:	2300      	movs	r3, #0
 8007048:	4602      	mov	r2, r0
 800704a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800704c:	6a21      	ldr	r1, [r4, #32]
 800704e:	4628      	mov	r0, r5
 8007050:	47b0      	blx	r6
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	d106      	bne.n	8007066 <__sflush_r+0x66>
 8007058:	6829      	ldr	r1, [r5, #0]
 800705a:	291d      	cmp	r1, #29
 800705c:	d82c      	bhi.n	80070b8 <__sflush_r+0xb8>
 800705e:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <__sflush_r+0x108>)
 8007060:	40ca      	lsrs	r2, r1
 8007062:	07d6      	lsls	r6, r2, #31
 8007064:	d528      	bpl.n	80070b8 <__sflush_r+0xb8>
 8007066:	2200      	movs	r2, #0
 8007068:	6062      	str	r2, [r4, #4]
 800706a:	04d9      	lsls	r1, r3, #19
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	6022      	str	r2, [r4, #0]
 8007070:	d504      	bpl.n	800707c <__sflush_r+0x7c>
 8007072:	1c42      	adds	r2, r0, #1
 8007074:	d101      	bne.n	800707a <__sflush_r+0x7a>
 8007076:	682b      	ldr	r3, [r5, #0]
 8007078:	b903      	cbnz	r3, 800707c <__sflush_r+0x7c>
 800707a:	6560      	str	r0, [r4, #84]	; 0x54
 800707c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800707e:	602f      	str	r7, [r5, #0]
 8007080:	2900      	cmp	r1, #0
 8007082:	d0ca      	beq.n	800701a <__sflush_r+0x1a>
 8007084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007088:	4299      	cmp	r1, r3
 800708a:	d002      	beq.n	8007092 <__sflush_r+0x92>
 800708c:	4628      	mov	r0, r5
 800708e:	f7ff faa5 	bl	80065dc <_free_r>
 8007092:	2000      	movs	r0, #0
 8007094:	6360      	str	r0, [r4, #52]	; 0x34
 8007096:	e7c1      	b.n	800701c <__sflush_r+0x1c>
 8007098:	6a21      	ldr	r1, [r4, #32]
 800709a:	2301      	movs	r3, #1
 800709c:	4628      	mov	r0, r5
 800709e:	47b0      	blx	r6
 80070a0:	1c41      	adds	r1, r0, #1
 80070a2:	d1c7      	bne.n	8007034 <__sflush_r+0x34>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0c4      	beq.n	8007034 <__sflush_r+0x34>
 80070aa:	2b1d      	cmp	r3, #29
 80070ac:	d001      	beq.n	80070b2 <__sflush_r+0xb2>
 80070ae:	2b16      	cmp	r3, #22
 80070b0:	d101      	bne.n	80070b6 <__sflush_r+0xb6>
 80070b2:	602f      	str	r7, [r5, #0]
 80070b4:	e7b1      	b.n	800701a <__sflush_r+0x1a>
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	e7ad      	b.n	800701c <__sflush_r+0x1c>
 80070c0:	690f      	ldr	r7, [r1, #16]
 80070c2:	2f00      	cmp	r7, #0
 80070c4:	d0a9      	beq.n	800701a <__sflush_r+0x1a>
 80070c6:	0793      	lsls	r3, r2, #30
 80070c8:	680e      	ldr	r6, [r1, #0]
 80070ca:	bf08      	it	eq
 80070cc:	694b      	ldreq	r3, [r1, #20]
 80070ce:	600f      	str	r7, [r1, #0]
 80070d0:	bf18      	it	ne
 80070d2:	2300      	movne	r3, #0
 80070d4:	eba6 0807 	sub.w	r8, r6, r7
 80070d8:	608b      	str	r3, [r1, #8]
 80070da:	f1b8 0f00 	cmp.w	r8, #0
 80070de:	dd9c      	ble.n	800701a <__sflush_r+0x1a>
 80070e0:	6a21      	ldr	r1, [r4, #32]
 80070e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070e4:	4643      	mov	r3, r8
 80070e6:	463a      	mov	r2, r7
 80070e8:	4628      	mov	r0, r5
 80070ea:	47b0      	blx	r6
 80070ec:	2800      	cmp	r0, #0
 80070ee:	dc06      	bgt.n	80070fe <__sflush_r+0xfe>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	e78e      	b.n	800701c <__sflush_r+0x1c>
 80070fe:	4407      	add	r7, r0
 8007100:	eba8 0800 	sub.w	r8, r8, r0
 8007104:	e7e9      	b.n	80070da <__sflush_r+0xda>
 8007106:	bf00      	nop
 8007108:	20400001 	.word	0x20400001

0800710c <_fflush_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	4605      	mov	r5, r0
 8007112:	460c      	mov	r4, r1
 8007114:	b913      	cbnz	r3, 800711c <_fflush_r+0x10>
 8007116:	2500      	movs	r5, #0
 8007118:	4628      	mov	r0, r5
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	b118      	cbz	r0, 8007126 <_fflush_r+0x1a>
 800711e:	6983      	ldr	r3, [r0, #24]
 8007120:	b90b      	cbnz	r3, 8007126 <_fflush_r+0x1a>
 8007122:	f000 f887 	bl	8007234 <__sinit>
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <_fflush_r+0x6c>)
 8007128:	429c      	cmp	r4, r3
 800712a:	d11b      	bne.n	8007164 <_fflush_r+0x58>
 800712c:	686c      	ldr	r4, [r5, #4]
 800712e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0ef      	beq.n	8007116 <_fflush_r+0xa>
 8007136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007138:	07d0      	lsls	r0, r2, #31
 800713a:	d404      	bmi.n	8007146 <_fflush_r+0x3a>
 800713c:	0599      	lsls	r1, r3, #22
 800713e:	d402      	bmi.n	8007146 <_fflush_r+0x3a>
 8007140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007142:	f000 f915 	bl	8007370 <__retarget_lock_acquire_recursive>
 8007146:	4628      	mov	r0, r5
 8007148:	4621      	mov	r1, r4
 800714a:	f7ff ff59 	bl	8007000 <__sflush_r>
 800714e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007150:	07da      	lsls	r2, r3, #31
 8007152:	4605      	mov	r5, r0
 8007154:	d4e0      	bmi.n	8007118 <_fflush_r+0xc>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	059b      	lsls	r3, r3, #22
 800715a:	d4dd      	bmi.n	8007118 <_fflush_r+0xc>
 800715c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800715e:	f000 f908 	bl	8007372 <__retarget_lock_release_recursive>
 8007162:	e7d9      	b.n	8007118 <_fflush_r+0xc>
 8007164:	4b05      	ldr	r3, [pc, #20]	; (800717c <_fflush_r+0x70>)
 8007166:	429c      	cmp	r4, r3
 8007168:	d101      	bne.n	800716e <_fflush_r+0x62>
 800716a:	68ac      	ldr	r4, [r5, #8]
 800716c:	e7df      	b.n	800712e <_fflush_r+0x22>
 800716e:	4b04      	ldr	r3, [pc, #16]	; (8007180 <_fflush_r+0x74>)
 8007170:	429c      	cmp	r4, r3
 8007172:	bf08      	it	eq
 8007174:	68ec      	ldreq	r4, [r5, #12]
 8007176:	e7da      	b.n	800712e <_fflush_r+0x22>
 8007178:	08007b64 	.word	0x08007b64
 800717c:	08007b84 	.word	0x08007b84
 8007180:	08007b44 	.word	0x08007b44

08007184 <std>:
 8007184:	2300      	movs	r3, #0
 8007186:	b510      	push	{r4, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	e9c0 3300 	strd	r3, r3, [r0]
 800718e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007192:	6083      	str	r3, [r0, #8]
 8007194:	8181      	strh	r1, [r0, #12]
 8007196:	6643      	str	r3, [r0, #100]	; 0x64
 8007198:	81c2      	strh	r2, [r0, #14]
 800719a:	6183      	str	r3, [r0, #24]
 800719c:	4619      	mov	r1, r3
 800719e:	2208      	movs	r2, #8
 80071a0:	305c      	adds	r0, #92	; 0x5c
 80071a2:	f7fd fb47 	bl	8004834 <memset>
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <std+0x38>)
 80071a8:	6263      	str	r3, [r4, #36]	; 0x24
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <std+0x3c>)
 80071ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <std+0x40>)
 80071b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <std+0x44>)
 80071b4:	6224      	str	r4, [r4, #32]
 80071b6:	6323      	str	r3, [r4, #48]	; 0x30
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	bf00      	nop
 80071bc:	080074d9 	.word	0x080074d9
 80071c0:	080074fb 	.word	0x080074fb
 80071c4:	08007533 	.word	0x08007533
 80071c8:	08007557 	.word	0x08007557

080071cc <_cleanup_r>:
 80071cc:	4901      	ldr	r1, [pc, #4]	; (80071d4 <_cleanup_r+0x8>)
 80071ce:	f000 b8af 	b.w	8007330 <_fwalk_reent>
 80071d2:	bf00      	nop
 80071d4:	0800710d 	.word	0x0800710d

080071d8 <__sfmoreglue>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	2268      	movs	r2, #104	; 0x68
 80071dc:	1e4d      	subs	r5, r1, #1
 80071de:	4355      	muls	r5, r2
 80071e0:	460e      	mov	r6, r1
 80071e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071e6:	f7ff fa65 	bl	80066b4 <_malloc_r>
 80071ea:	4604      	mov	r4, r0
 80071ec:	b140      	cbz	r0, 8007200 <__sfmoreglue+0x28>
 80071ee:	2100      	movs	r1, #0
 80071f0:	e9c0 1600 	strd	r1, r6, [r0]
 80071f4:	300c      	adds	r0, #12
 80071f6:	60a0      	str	r0, [r4, #8]
 80071f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071fc:	f7fd fb1a 	bl	8004834 <memset>
 8007200:	4620      	mov	r0, r4
 8007202:	bd70      	pop	{r4, r5, r6, pc}

08007204 <__sfp_lock_acquire>:
 8007204:	4801      	ldr	r0, [pc, #4]	; (800720c <__sfp_lock_acquire+0x8>)
 8007206:	f000 b8b3 	b.w	8007370 <__retarget_lock_acquire_recursive>
 800720a:	bf00      	nop
 800720c:	20000379 	.word	0x20000379

08007210 <__sfp_lock_release>:
 8007210:	4801      	ldr	r0, [pc, #4]	; (8007218 <__sfp_lock_release+0x8>)
 8007212:	f000 b8ae 	b.w	8007372 <__retarget_lock_release_recursive>
 8007216:	bf00      	nop
 8007218:	20000379 	.word	0x20000379

0800721c <__sinit_lock_acquire>:
 800721c:	4801      	ldr	r0, [pc, #4]	; (8007224 <__sinit_lock_acquire+0x8>)
 800721e:	f000 b8a7 	b.w	8007370 <__retarget_lock_acquire_recursive>
 8007222:	bf00      	nop
 8007224:	2000037a 	.word	0x2000037a

08007228 <__sinit_lock_release>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__sinit_lock_release+0x8>)
 800722a:	f000 b8a2 	b.w	8007372 <__retarget_lock_release_recursive>
 800722e:	bf00      	nop
 8007230:	2000037a 	.word	0x2000037a

08007234 <__sinit>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	f7ff fff0 	bl	800721c <__sinit_lock_acquire>
 800723c:	69a3      	ldr	r3, [r4, #24]
 800723e:	b11b      	cbz	r3, 8007248 <__sinit+0x14>
 8007240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007244:	f7ff bff0 	b.w	8007228 <__sinit_lock_release>
 8007248:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800724c:	6523      	str	r3, [r4, #80]	; 0x50
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <__sinit+0x68>)
 8007250:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <__sinit+0x6c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	62a2      	str	r2, [r4, #40]	; 0x28
 8007256:	42a3      	cmp	r3, r4
 8007258:	bf04      	itt	eq
 800725a:	2301      	moveq	r3, #1
 800725c:	61a3      	streq	r3, [r4, #24]
 800725e:	4620      	mov	r0, r4
 8007260:	f000 f820 	bl	80072a4 <__sfp>
 8007264:	6060      	str	r0, [r4, #4]
 8007266:	4620      	mov	r0, r4
 8007268:	f000 f81c 	bl	80072a4 <__sfp>
 800726c:	60a0      	str	r0, [r4, #8]
 800726e:	4620      	mov	r0, r4
 8007270:	f000 f818 	bl	80072a4 <__sfp>
 8007274:	2200      	movs	r2, #0
 8007276:	60e0      	str	r0, [r4, #12]
 8007278:	2104      	movs	r1, #4
 800727a:	6860      	ldr	r0, [r4, #4]
 800727c:	f7ff ff82 	bl	8007184 <std>
 8007280:	68a0      	ldr	r0, [r4, #8]
 8007282:	2201      	movs	r2, #1
 8007284:	2109      	movs	r1, #9
 8007286:	f7ff ff7d 	bl	8007184 <std>
 800728a:	68e0      	ldr	r0, [r4, #12]
 800728c:	2202      	movs	r2, #2
 800728e:	2112      	movs	r1, #18
 8007290:	f7ff ff78 	bl	8007184 <std>
 8007294:	2301      	movs	r3, #1
 8007296:	61a3      	str	r3, [r4, #24]
 8007298:	e7d2      	b.n	8007240 <__sinit+0xc>
 800729a:	bf00      	nop
 800729c:	080077c8 	.word	0x080077c8
 80072a0:	080071cd 	.word	0x080071cd

080072a4 <__sfp>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	4607      	mov	r7, r0
 80072a8:	f7ff ffac 	bl	8007204 <__sfp_lock_acquire>
 80072ac:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <__sfp+0x84>)
 80072ae:	681e      	ldr	r6, [r3, #0]
 80072b0:	69b3      	ldr	r3, [r6, #24]
 80072b2:	b913      	cbnz	r3, 80072ba <__sfp+0x16>
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff ffbd 	bl	8007234 <__sinit>
 80072ba:	3648      	adds	r6, #72	; 0x48
 80072bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	d503      	bpl.n	80072cc <__sfp+0x28>
 80072c4:	6833      	ldr	r3, [r6, #0]
 80072c6:	b30b      	cbz	r3, 800730c <__sfp+0x68>
 80072c8:	6836      	ldr	r6, [r6, #0]
 80072ca:	e7f7      	b.n	80072bc <__sfp+0x18>
 80072cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072d0:	b9d5      	cbnz	r5, 8007308 <__sfp+0x64>
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <__sfp+0x88>)
 80072d4:	60e3      	str	r3, [r4, #12]
 80072d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072da:	6665      	str	r5, [r4, #100]	; 0x64
 80072dc:	f000 f847 	bl	800736e <__retarget_lock_init_recursive>
 80072e0:	f7ff ff96 	bl	8007210 <__sfp_lock_release>
 80072e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072ec:	6025      	str	r5, [r4, #0]
 80072ee:	61a5      	str	r5, [r4, #24]
 80072f0:	2208      	movs	r2, #8
 80072f2:	4629      	mov	r1, r5
 80072f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072f8:	f7fd fa9c 	bl	8004834 <memset>
 80072fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007300:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007304:	4620      	mov	r0, r4
 8007306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007308:	3468      	adds	r4, #104	; 0x68
 800730a:	e7d9      	b.n	80072c0 <__sfp+0x1c>
 800730c:	2104      	movs	r1, #4
 800730e:	4638      	mov	r0, r7
 8007310:	f7ff ff62 	bl	80071d8 <__sfmoreglue>
 8007314:	4604      	mov	r4, r0
 8007316:	6030      	str	r0, [r6, #0]
 8007318:	2800      	cmp	r0, #0
 800731a:	d1d5      	bne.n	80072c8 <__sfp+0x24>
 800731c:	f7ff ff78 	bl	8007210 <__sfp_lock_release>
 8007320:	230c      	movs	r3, #12
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	e7ee      	b.n	8007304 <__sfp+0x60>
 8007326:	bf00      	nop
 8007328:	080077c8 	.word	0x080077c8
 800732c:	ffff0001 	.word	0xffff0001

08007330 <_fwalk_reent>:
 8007330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007334:	4606      	mov	r6, r0
 8007336:	4688      	mov	r8, r1
 8007338:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800733c:	2700      	movs	r7, #0
 800733e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007342:	f1b9 0901 	subs.w	r9, r9, #1
 8007346:	d505      	bpl.n	8007354 <_fwalk_reent+0x24>
 8007348:	6824      	ldr	r4, [r4, #0]
 800734a:	2c00      	cmp	r4, #0
 800734c:	d1f7      	bne.n	800733e <_fwalk_reent+0xe>
 800734e:	4638      	mov	r0, r7
 8007350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007354:	89ab      	ldrh	r3, [r5, #12]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d907      	bls.n	800736a <_fwalk_reent+0x3a>
 800735a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800735e:	3301      	adds	r3, #1
 8007360:	d003      	beq.n	800736a <_fwalk_reent+0x3a>
 8007362:	4629      	mov	r1, r5
 8007364:	4630      	mov	r0, r6
 8007366:	47c0      	blx	r8
 8007368:	4307      	orrs	r7, r0
 800736a:	3568      	adds	r5, #104	; 0x68
 800736c:	e7e9      	b.n	8007342 <_fwalk_reent+0x12>

0800736e <__retarget_lock_init_recursive>:
 800736e:	4770      	bx	lr

08007370 <__retarget_lock_acquire_recursive>:
 8007370:	4770      	bx	lr

08007372 <__retarget_lock_release_recursive>:
 8007372:	4770      	bx	lr

08007374 <__swhatbuf_r>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	460e      	mov	r6, r1
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	2900      	cmp	r1, #0
 800737e:	b096      	sub	sp, #88	; 0x58
 8007380:	4614      	mov	r4, r2
 8007382:	461d      	mov	r5, r3
 8007384:	da08      	bge.n	8007398 <__swhatbuf_r+0x24>
 8007386:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	602a      	str	r2, [r5, #0]
 800738e:	061a      	lsls	r2, r3, #24
 8007390:	d410      	bmi.n	80073b4 <__swhatbuf_r+0x40>
 8007392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007396:	e00e      	b.n	80073b6 <__swhatbuf_r+0x42>
 8007398:	466a      	mov	r2, sp
 800739a:	f000 f903 	bl	80075a4 <_fstat_r>
 800739e:	2800      	cmp	r0, #0
 80073a0:	dbf1      	blt.n	8007386 <__swhatbuf_r+0x12>
 80073a2:	9a01      	ldr	r2, [sp, #4]
 80073a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073ac:	425a      	negs	r2, r3
 80073ae:	415a      	adcs	r2, r3
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	e7ee      	b.n	8007392 <__swhatbuf_r+0x1e>
 80073b4:	2340      	movs	r3, #64	; 0x40
 80073b6:	2000      	movs	r0, #0
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	b016      	add	sp, #88	; 0x58
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080073c0 <__smakebuf_r>:
 80073c0:	898b      	ldrh	r3, [r1, #12]
 80073c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073c4:	079d      	lsls	r5, r3, #30
 80073c6:	4606      	mov	r6, r0
 80073c8:	460c      	mov	r4, r1
 80073ca:	d507      	bpl.n	80073dc <__smakebuf_r+0x1c>
 80073cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	6123      	str	r3, [r4, #16]
 80073d4:	2301      	movs	r3, #1
 80073d6:	6163      	str	r3, [r4, #20]
 80073d8:	b002      	add	sp, #8
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	ab01      	add	r3, sp, #4
 80073de:	466a      	mov	r2, sp
 80073e0:	f7ff ffc8 	bl	8007374 <__swhatbuf_r>
 80073e4:	9900      	ldr	r1, [sp, #0]
 80073e6:	4605      	mov	r5, r0
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7ff f963 	bl	80066b4 <_malloc_r>
 80073ee:	b948      	cbnz	r0, 8007404 <__smakebuf_r+0x44>
 80073f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f4:	059a      	lsls	r2, r3, #22
 80073f6:	d4ef      	bmi.n	80073d8 <__smakebuf_r+0x18>
 80073f8:	f023 0303 	bic.w	r3, r3, #3
 80073fc:	f043 0302 	orr.w	r3, r3, #2
 8007400:	81a3      	strh	r3, [r4, #12]
 8007402:	e7e3      	b.n	80073cc <__smakebuf_r+0xc>
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <__smakebuf_r+0x7c>)
 8007406:	62b3      	str	r3, [r6, #40]	; 0x28
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	6020      	str	r0, [r4, #0]
 800740c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007410:	81a3      	strh	r3, [r4, #12]
 8007412:	9b00      	ldr	r3, [sp, #0]
 8007414:	6163      	str	r3, [r4, #20]
 8007416:	9b01      	ldr	r3, [sp, #4]
 8007418:	6120      	str	r0, [r4, #16]
 800741a:	b15b      	cbz	r3, 8007434 <__smakebuf_r+0x74>
 800741c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007420:	4630      	mov	r0, r6
 8007422:	f000 f8d1 	bl	80075c8 <_isatty_r>
 8007426:	b128      	cbz	r0, 8007434 <__smakebuf_r+0x74>
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	f023 0303 	bic.w	r3, r3, #3
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	89a0      	ldrh	r0, [r4, #12]
 8007436:	4305      	orrs	r5, r0
 8007438:	81a5      	strh	r5, [r4, #12]
 800743a:	e7cd      	b.n	80073d8 <__smakebuf_r+0x18>
 800743c:	080071cd 	.word	0x080071cd

08007440 <_malloc_usable_size_r>:
 8007440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007444:	1f18      	subs	r0, r3, #4
 8007446:	2b00      	cmp	r3, #0
 8007448:	bfbc      	itt	lt
 800744a:	580b      	ldrlt	r3, [r1, r0]
 800744c:	18c0      	addlt	r0, r0, r3
 800744e:	4770      	bx	lr

08007450 <_raise_r>:
 8007450:	291f      	cmp	r1, #31
 8007452:	b538      	push	{r3, r4, r5, lr}
 8007454:	4604      	mov	r4, r0
 8007456:	460d      	mov	r5, r1
 8007458:	d904      	bls.n	8007464 <_raise_r+0x14>
 800745a:	2316      	movs	r3, #22
 800745c:	6003      	str	r3, [r0, #0]
 800745e:	f04f 30ff 	mov.w	r0, #4294967295
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007466:	b112      	cbz	r2, 800746e <_raise_r+0x1e>
 8007468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800746c:	b94b      	cbnz	r3, 8007482 <_raise_r+0x32>
 800746e:	4620      	mov	r0, r4
 8007470:	f000 f830 	bl	80074d4 <_getpid_r>
 8007474:	462a      	mov	r2, r5
 8007476:	4601      	mov	r1, r0
 8007478:	4620      	mov	r0, r4
 800747a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800747e:	f000 b817 	b.w	80074b0 <_kill_r>
 8007482:	2b01      	cmp	r3, #1
 8007484:	d00a      	beq.n	800749c <_raise_r+0x4c>
 8007486:	1c59      	adds	r1, r3, #1
 8007488:	d103      	bne.n	8007492 <_raise_r+0x42>
 800748a:	2316      	movs	r3, #22
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	2001      	movs	r0, #1
 8007490:	e7e7      	b.n	8007462 <_raise_r+0x12>
 8007492:	2400      	movs	r4, #0
 8007494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007498:	4628      	mov	r0, r5
 800749a:	4798      	blx	r3
 800749c:	2000      	movs	r0, #0
 800749e:	e7e0      	b.n	8007462 <_raise_r+0x12>

080074a0 <raise>:
 80074a0:	4b02      	ldr	r3, [pc, #8]	; (80074ac <raise+0xc>)
 80074a2:	4601      	mov	r1, r0
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	f7ff bfd3 	b.w	8007450 <_raise_r>
 80074aa:	bf00      	nop
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <_kill_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_kill_r+0x20>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	f7f9 ffd1 	bl	8001464 <_kill>
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	d102      	bne.n	80074cc <_kill_r+0x1c>
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	b103      	cbz	r3, 80074cc <_kill_r+0x1c>
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	bf00      	nop
 80074d0:	20000374 	.word	0x20000374

080074d4 <_getpid_r>:
 80074d4:	f7f9 bfbe 	b.w	8001454 <_getpid>

080074d8 <__sread>:
 80074d8:	b510      	push	{r4, lr}
 80074da:	460c      	mov	r4, r1
 80074dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e0:	f000 f894 	bl	800760c <_read_r>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	bfab      	itete	ge
 80074e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074ea:	89a3      	ldrhlt	r3, [r4, #12]
 80074ec:	181b      	addge	r3, r3, r0
 80074ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074f2:	bfac      	ite	ge
 80074f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80074f6:	81a3      	strhlt	r3, [r4, #12]
 80074f8:	bd10      	pop	{r4, pc}

080074fa <__swrite>:
 80074fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fe:	461f      	mov	r7, r3
 8007500:	898b      	ldrh	r3, [r1, #12]
 8007502:	05db      	lsls	r3, r3, #23
 8007504:	4605      	mov	r5, r0
 8007506:	460c      	mov	r4, r1
 8007508:	4616      	mov	r6, r2
 800750a:	d505      	bpl.n	8007518 <__swrite+0x1e>
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	2302      	movs	r3, #2
 8007512:	2200      	movs	r2, #0
 8007514:	f000 f868 	bl	80075e8 <_lseek_r>
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800751e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	4632      	mov	r2, r6
 8007526:	463b      	mov	r3, r7
 8007528:	4628      	mov	r0, r5
 800752a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800752e:	f000 b817 	b.w	8007560 <_write_r>

08007532 <__sseek>:
 8007532:	b510      	push	{r4, lr}
 8007534:	460c      	mov	r4, r1
 8007536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753a:	f000 f855 	bl	80075e8 <_lseek_r>
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	bf15      	itete	ne
 8007544:	6560      	strne	r0, [r4, #84]	; 0x54
 8007546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800754a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800754e:	81a3      	strheq	r3, [r4, #12]
 8007550:	bf18      	it	ne
 8007552:	81a3      	strhne	r3, [r4, #12]
 8007554:	bd10      	pop	{r4, pc}

08007556 <__sclose>:
 8007556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755a:	f000 b813 	b.w	8007584 <_close_r>
	...

08007560 <_write_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d07      	ldr	r5, [pc, #28]	; (8007580 <_write_r+0x20>)
 8007564:	4604      	mov	r4, r0
 8007566:	4608      	mov	r0, r1
 8007568:	4611      	mov	r1, r2
 800756a:	2200      	movs	r2, #0
 800756c:	602a      	str	r2, [r5, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	f7f9 ffaf 	bl	80014d2 <_write>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_write_r+0x1e>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_write_r+0x1e>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	20000374 	.word	0x20000374

08007584 <_close_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d06      	ldr	r5, [pc, #24]	; (80075a0 <_close_r+0x1c>)
 8007588:	2300      	movs	r3, #0
 800758a:	4604      	mov	r4, r0
 800758c:	4608      	mov	r0, r1
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	f7f9 ffbb 	bl	800150a <_close>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_close_r+0x1a>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_close_r+0x1a>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	20000374 	.word	0x20000374

080075a4 <_fstat_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	; (80075c4 <_fstat_r+0x20>)
 80075a8:	2300      	movs	r3, #0
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	f7f9 ffb6 	bl	8001522 <_fstat>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d102      	bne.n	80075c0 <_fstat_r+0x1c>
 80075ba:	682b      	ldr	r3, [r5, #0]
 80075bc:	b103      	cbz	r3, 80075c0 <_fstat_r+0x1c>
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	bf00      	nop
 80075c4:	20000374 	.word	0x20000374

080075c8 <_isatty_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_isatty_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7f9 ffb5 	bl	8001542 <_isatty>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_isatty_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_isatty_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20000374 	.word	0x20000374

080075e8 <_lseek_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	; (8007608 <_lseek_r+0x20>)
 80075ec:	4604      	mov	r4, r0
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7f9 ffae 	bl	8001558 <_lseek>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_lseek_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_lseek_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	20000374 	.word	0x20000374

0800760c <_read_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	; (800762c <_read_r+0x20>)
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	602a      	str	r2, [r5, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f7f9 ff3c 	bl	8001498 <_read>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_read_r+0x1e>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_read_r+0x1e>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20000374 	.word	0x20000374

08007630 <_init>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr

0800763c <_fini>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

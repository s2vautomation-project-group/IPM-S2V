
UPLOAD_RETRIEVE_ESP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d420  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800d5f0  0800d5f0  0001d5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dce0  0800dce0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dce0  0800dce0  0001dce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dce8  0800dce8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dce8  0800dce8  0001dce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcec  0800dcec  0001dcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f08  200001e0  0800ded0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040e8  0800ded0  000240e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b39  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a8  00000000  00000000  00034d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000383f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000392e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b97  00000000  00000000  0003a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001878e  00000000  00000000  00060bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da4f5  00000000  00000000  0007936d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005074  00000000  00000000  001538b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d5d8 	.word	0x0800d5d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d5d8 	.word	0x0800d5d8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <application>:


struct data d;

void application(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

	Configurator();
 800105c:	f000 fb6c 	bl	8001738 <Configurator>
//	strcpy(d.Status1, "GPIO1");
//	strcpy(d.Status2, "GPIO2");
//	strcpy(d.Status3, "GPIO3");
//	strcpy(d.Status4, "GPIO4");
//	set_time(57,11,03,5,05,12,24);
	get_time(&d);
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <application+0x28>)
 8001062:	f000 fb19 	bl	8001698 <get_time>
    ADC_handler(&d);
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <application+0x28>)
 8001068:	f000 f834 	bl	80010d4 <ADC_handler>
    DataToCloud(&d);
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <application+0x28>)
 800106e:	f000 f999 	bl	80013a4 <DataToCloud>
	EEPROM_transmit(&d);
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <application+0x28>)
 8001074:	f000 f8b0 	bl	80011d8 <EEPROM_transmit>
	datafromgs();
 8001078:	f001 fad6 	bl	8002628 <datafromgs>
//	terminal(&d);


}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200001fc 	.word	0x200001fc
 8001084:	00000000 	.word	0x00000000

08001088 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 800108c:	f001 f95e 	bl	800234c <adc_value>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <voltage_cal+0x48>)
 8001096:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <voltage_cal+0x48>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa71 	bl	8000584 <__aeabi_i2d>
 80010a2:	a309      	add	r3, pc, #36	; (adr r3, 80010c8 <voltage_cal+0x40>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff fad6 	bl	8000658 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fdc8 	bl	8000c48 <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	ee07 3a90 	vmov	s15, r3
}
 80010be:	eeb0 0a67 	vmov.f32	s0, s15
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	f3af 8000 	nop.w
 80010c8:	e734d9b4 	.word	0xe734d9b4
 80010cc:	3f4a680c 	.word	0x3f4a680c
 80010d0:	20000298 	.word	0x20000298

080010d4 <ADC_handler>:

void ADC_handler(struct data *d)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 80010dc:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <ADC_handler+0x100>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10f      	bne.n	8001104 <ADC_handler+0x30>
	{

		ADC_select_CH1();
 80010e4:	f001 f83c 	bl	8002160 <ADC_select_CH1>
		adc_start();
 80010e8:	f001 f91a 	bl	8002320 <adc_start>
		adc_conversion();
 80010ec:	f001 f922 	bl	8002334 <adc_conversion>
		d->adc1_value = voltage_cal();
 80010f0:	f7ff ffca 	bl	8001088 <voltage_cal>
 80010f4:	eef0 7a40 	vmov.f32	s15, s0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		adc_stop();
 80010fe:	f001 f931 	bl	8002364 <adc_stop>
 8001102:	e005      	b.n	8001110 <ADC_handler+0x3c>
	}
	else if (adcChnlChecker[0] == 0)
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <ADC_handler+0x100>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <ADC_handler+0x3c>
	{
		ADC_select_CH1();
 800110c:	f001 f828 	bl	8002160 <ADC_select_CH1>
	}

	if(adcChnlChecker[1] == 1)
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <ADC_handler+0x100>)
 8001112:	785b      	ldrb	r3, [r3, #1]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d10f      	bne.n	8001138 <ADC_handler+0x64>
	{
		ADC_select_CH2();
 8001118:	f001 f85a 	bl	80021d0 <ADC_select_CH2>
		adc_start();
 800111c:	f001 f900 	bl	8002320 <adc_start>
		adc_conversion();
 8001120:	f001 f908 	bl	8002334 <adc_conversion>
		d->adc2_value = voltage_cal();
 8001124:	f7ff ffb0 	bl	8001088 <voltage_cal>
 8001128:	eef0 7a40 	vmov.f32	s15, s0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		adc_stop();
 8001132:	f001 f917 	bl	8002364 <adc_stop>
 8001136:	e005      	b.n	8001144 <ADC_handler+0x70>
	}
	else if (adcChnlChecker[1] == 0)
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <ADC_handler+0x100>)
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <ADC_handler+0x70>
	{
		ADC_select_CH2();
 8001140:	f001 f846 	bl	80021d0 <ADC_select_CH2>
	}

	if(adcChnlChecker[2] == 1)
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <ADC_handler+0x100>)
 8001146:	789b      	ldrb	r3, [r3, #2]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10f      	bne.n	800116c <ADC_handler+0x98>
	{
		ADC_select_CH3();
 800114c:	f001 f878 	bl	8002240 <ADC_select_CH3>
		adc_start();
 8001150:	f001 f8e6 	bl	8002320 <adc_start>
		adc_conversion();
 8001154:	f001 f8ee 	bl	8002334 <adc_conversion>
		d->adc3_value = voltage_cal();
 8001158:	f7ff ff96 	bl	8001088 <voltage_cal>
 800115c:	eef0 7a40 	vmov.f32	s15, s0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		adc_stop();
 8001166:	f001 f8fd 	bl	8002364 <adc_stop>
 800116a:	e005      	b.n	8001178 <ADC_handler+0xa4>
	}
	else if (adcChnlChecker[2] == 0)
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <ADC_handler+0x100>)
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <ADC_handler+0xa4>
	{
		ADC_select_CH3();
 8001174:	f001 f864 	bl	8002240 <ADC_select_CH3>
	}

	if(adcChnlChecker[3] == 1)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <ADC_handler+0x100>)
 800117a:	78db      	ldrb	r3, [r3, #3]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10f      	bne.n	80011a0 <ADC_handler+0xcc>
	{
		ADC_select_CH4();
 8001180:	f001 f896 	bl	80022b0 <ADC_select_CH4>
		adc_start();
 8001184:	f001 f8cc 	bl	8002320 <adc_start>
		adc_conversion();
 8001188:	f001 f8d4 	bl	8002334 <adc_conversion>
		d->adc4_value = voltage_cal();
 800118c:	f7ff ff7c 	bl	8001088 <voltage_cal>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		adc_stop();
 800119a:	f001 f8e3 	bl	8002364 <adc_stop>
 800119e:	e005      	b.n	80011ac <ADC_handler+0xd8>
	}
	else if (adcChnlChecker[3] == 0)
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <ADC_handler+0x100>)
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <ADC_handler+0xd8>
	{
		ADC_select_CH4();
 80011a8:	f001 f882 	bl	80022b0 <ADC_select_CH4>
	}

	d->MDS_value=(d->adc1_value*d->adc2_value)/d->adc3_value;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//	adc_stop();



}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20003c74 	.word	0x20003c74

080011d8 <EEPROM_transmit>:
static uint8_t counth=0;
static uint8_t Old_valueh = 0;
extern uint8_t page_number;

void EEPROM_transmit(struct data *d)
{
 80011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011dc:	b09f      	sub	sp, #124	; 0x7c
 80011de:	af12      	add	r7, sp, #72	; 0x48
 80011e0:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t New_value=d->minutes;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t New_valueh=d->hour;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	789b      	ldrb	r3, [r3, #2]
 80011ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
			d->hour, d->minutes, d->seconds,d->dayofmonth, d->month, d->year,
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 80011f6:	623b      	str	r3, [r7, #32]
			d->hour, d->minutes, d->seconds,d->dayofmonth, d->month, d->year,
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 80011fc:	61fb      	str	r3, [r7, #28]
			d->hour, d->minutes, d->seconds,d->dayofmonth, d->month, d->year,
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001202:	461e      	mov	r6, r3
			d->hour, d->minutes, d->seconds,d->dayofmonth, d->month, d->year,
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	791b      	ldrb	r3, [r3, #4]
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001208:	61bb      	str	r3, [r7, #24]
			d->hour, d->minutes, d->seconds,d->dayofmonth, d->month, d->year,
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	795b      	ldrb	r3, [r3, #5]
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 800120e:	617b      	str	r3, [r7, #20]
			d->hour, d->minutes, d->seconds,d->dayofmonth, d->month, d->year,
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	799b      	ldrb	r3, [r3, #6]
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001214:	613b      	str	r3, [r7, #16]
			d->adc1_value, d->adc2_value, d->adc3_value, d->adc4_value,
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f9c4 	bl	80005a8 <__aeabi_f2d>
 8001220:	e9c7 0102 	strd	r0, r1, [r7, #8]
			d->adc1_value, d->adc2_value, d->adc3_value, d->adc4_value,
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f9bd 	bl	80005a8 <__aeabi_f2d>
 800122e:	e9c7 0100 	strd	r0, r1, [r7]
			d->adc1_value, d->adc2_value, d->adc3_value, d->adc4_value,
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f9b6 	bl	80005a8 <__aeabi_f2d>
 800123c:	4682      	mov	sl, r0
 800123e:	468b      	mov	fp, r1
			d->adc1_value, d->adc2_value, d->adc3_value, d->adc4_value,
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f9af 	bl	80005a8 <__aeabi_f2d>
 800124a:	4680      	mov	r8, r0
 800124c:	4689      	mov	r9, r1
			d->MDS_value, d->Status1, d->Status2, d->Status3, d->Status4);
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f9a8 	bl	80005a8 <__aeabi_f2d>
 8001258:	4604      	mov	r4, r0
 800125a:	460d      	mov	r5, r1
			d->MDS_value, d->Status1, d->Status2, d->Status3, d->Status4);
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	f103 014b 	add.w	r1, r3, #75	; 0x4b
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	f103 0255 	add.w	r2, r3, #85	; 0x55
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	335f      	adds	r3, #95	; 0x5f
	sprintf((char *)eeprom_data,"Time:%02d:%02d:%02d,Date:%02d:%02d:%02d,CH1:%.2f,CH2:%.2f,CH3:%.2f,CH4:%.2f,MDS:%.2f,Status1:%s,Status2:%s,Status3:%s,Status4:%s",
 8001272:	9311      	str	r3, [sp, #68]	; 0x44
 8001274:	9210      	str	r2, [sp, #64]	; 0x40
 8001276:	910f      	str	r1, [sp, #60]	; 0x3c
 8001278:	900e      	str	r0, [sp, #56]	; 0x38
 800127a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800127e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001282:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001286:	ed97 7b00 	vldr	d7, [r7]
 800128a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800128e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001292:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	9103      	str	r1, [sp, #12]
 800129a:	6979      	ldr	r1, [r7, #20]
 800129c:	9102      	str	r1, [sp, #8]
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	9101      	str	r1, [sp, #4]
 80012a2:	9600      	str	r6, [sp, #0]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	6a3a      	ldr	r2, [r7, #32]
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <EEPROM_transmit+0x1a8>)
 80012aa:	4836      	ldr	r0, [pc, #216]	; (8001384 <EEPROM_transmit+0x1ac>)
 80012ac:	f008 fb20 	bl	80098f0 <siprintf>
//	EEPROM_Read(0,0,DataRead,650);
//		Data_To_EEPROM(eeprom_data);
//		EEPROM_Read(0,0,DataRead,650);


	if (New_value != Old_value) {
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <EEPROM_transmit+0x1b0>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d005      	beq.n	80012c8 <EEPROM_transmit+0xf0>
		count++;
 80012bc:	4b33      	ldr	r3, [pc, #204]	; (800138c <EEPROM_transmit+0x1b4>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <EEPROM_transmit+0x1b4>)
 80012c6:	701a      	strb	r2, [r3, #0]
	}


	if (count >= d->scan_time) {
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <EEPROM_transmit+0x1b4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d80a      	bhi.n	80012ec <EEPROM_transmit+0x114>
		// Transmit data
		if(d->scan_time>0)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <EEPROM_transmit+0x114>
		{
			Data_To_EEPROM(eeprom_data);
 80012e0:	4828      	ldr	r0, [pc, #160]	; (8001384 <EEPROM_transmit+0x1ac>)
 80012e2:	f001 f849 	bl	8002378 <Data_To_EEPROM>
			count = 0; // Reset the counter after transmission
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <EEPROM_transmit+0x1b4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
		}
	}

	Old_value = New_value;
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <EEPROM_transmit+0x1b0>)
 80012ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80012f2:	7013      	strb	r3, [r2, #0]

//	EEPROM_Read(0,0,DataRead,14400);

	if (New_valueh != Old_valueh) {
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <EEPROM_transmit+0x1b8>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d005      	beq.n	800130c <EEPROM_transmit+0x134>
		counth++;
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <EEPROM_transmit+0x1bc>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <EEPROM_transmit+0x1bc>)
 800130a:	701a      	strb	r2, [r3, #0]
	}

	if (counth >= 1) {
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <EEPROM_transmit+0x1bc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d014      	beq.n	800133e <EEPROM_transmit+0x166>
		if(1>0)
		{
			for (int i=0; i<300; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001318:	e007      	b.n	800132a <EEPROM_transmit+0x152>
			{
				EEPROM_PageErase(i);
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	b29b      	uxth	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fd02 	bl	8002d28 <EEPROM_PageErase>
			for (int i=0; i<300; i++)
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	3301      	adds	r3, #1
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001330:	dbf3      	blt.n	800131a <EEPROM_transmit+0x142>
			}

			counth=0;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <EEPROM_transmit+0x1bc>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
			page_number = 0;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <EEPROM_transmit+0x1c0>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
		}
	}
	Old_valueh = New_valueh;
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <EEPROM_transmit+0x1b8>)
 8001340:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001344:	7013      	strb	r3, [r2, #0]
//	EEPROM_Read(0,0,DataRead,14400);

	if(strcmp(d->eeprom_data,"READDATA")==0)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	3391      	adds	r3, #145	; 0x91
 800134a:	4914      	ldr	r1, [pc, #80]	; (800139c <EEPROM_transmit+0x1c4>)
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff5f 	bl	8000210 <strcmp>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d106      	bne.n	8001366 <EEPROM_transmit+0x18e>
	{
	EEPROM_Read(0,0,DataRead,14400);
 8001358:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <EEPROM_transmit+0x1c8>)
 800135e:	2100      	movs	r1, #0
 8001360:	2000      	movs	r0, #0
 8001362:	f001 fc7f 	bl	8002c64 <EEPROM_Read>

	}
	memset(d->eeprom_data,0,sizeof (d->eeprom_data));
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3391      	adds	r3, #145	; 0x91
 800136a:	220a      	movs	r2, #10
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f007 fc36 	bl	8008be0 <memset>
}
 8001374:	bf00      	nop
 8001376:	3734      	adds	r7, #52	; 0x34
 8001378:	46bd      	mov	sp, r7
 800137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800137e:	bf00      	nop
 8001380:	0800d5f0 	.word	0x0800d5f0
 8001384:	20003adc 	.word	0x20003adc
 8001388:	20003ba4 	.word	0x20003ba4
 800138c:	20003ba5 	.word	0x20003ba5
 8001390:	20003ba7 	.word	0x20003ba7
 8001394:	20003ba6 	.word	0x20003ba6
 8001398:	20003d30 	.word	0x20003d30
 800139c:	0800d674 	.word	0x0800d674
 80013a0:	2000029c 	.word	0x2000029c

080013a4 <DataToCloud>:


UART_HandleTypeDef huart2;

void DataToCloud(struct data *d)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	6078      	str	r0, [r7, #4]

	uint8_t New_value=d->minutes;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	73fb      	strb	r3, [r7, #15]

//	//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf((char*)buffer_Time,"%02d:%02d:%02d",d->hour,d->minutes,d->seconds);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	4619      	mov	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	460b      	mov	r3, r1
 80013c6:	495a      	ldr	r1, [pc, #360]	; (8001530 <DataToCloud+0x18c>)
 80013c8:	485a      	ldr	r0, [pc, #360]	; (8001534 <DataToCloud+0x190>)
 80013ca:	f008 fa91 	bl	80098f0 <siprintf>
	sprintf((char*)buffer_Date,"%02d/%02d/%02d",d->dayofmonth,d->month,d->year);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	4619      	mov	r1, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	799b      	ldrb	r3, [r3, #6]
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	460b      	mov	r3, r1
 80013e2:	4955      	ldr	r1, [pc, #340]	; (8001538 <DataToCloud+0x194>)
 80013e4:	4855      	ldr	r0, [pc, #340]	; (800153c <DataToCloud+0x198>)
 80013e6:	f008 fa83 	bl	80098f0 <siprintf>

	//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf((char*)CH1,"%f",d->adc1_value);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f8da 	bl	80005a8 <__aeabi_f2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4951      	ldr	r1, [pc, #324]	; (8001540 <DataToCloud+0x19c>)
 80013fa:	4852      	ldr	r0, [pc, #328]	; (8001544 <DataToCloud+0x1a0>)
 80013fc:	f008 fa78 	bl	80098f0 <siprintf>
	sprintf((char*)CH2,"%f",d->adc2_value);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8cf 	bl	80005a8 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	494c      	ldr	r1, [pc, #304]	; (8001540 <DataToCloud+0x19c>)
 8001410:	484d      	ldr	r0, [pc, #308]	; (8001548 <DataToCloud+0x1a4>)
 8001412:	f008 fa6d 	bl	80098f0 <siprintf>
	sprintf((char*)CH3,"%f",d->adc3_value);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f8c4 	bl	80005a8 <__aeabi_f2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4946      	ldr	r1, [pc, #280]	; (8001540 <DataToCloud+0x19c>)
 8001426:	4849      	ldr	r0, [pc, #292]	; (800154c <DataToCloud+0x1a8>)
 8001428:	f008 fa62 	bl	80098f0 <siprintf>
	sprintf((char*)CH4,"%f",d->adc4_value);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8b9 	bl	80005a8 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4941      	ldr	r1, [pc, #260]	; (8001540 <DataToCloud+0x19c>)
 800143c:	4844      	ldr	r0, [pc, #272]	; (8001550 <DataToCloud+0x1ac>)
 800143e:	f008 fa57 	bl	80098f0 <siprintf>
	sprintf((char*)MDS,"%f",d->MDS_value);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f8ae 	bl	80005a8 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	493b      	ldr	r1, [pc, #236]	; (8001540 <DataToCloud+0x19c>)
 8001452:	4840      	ldr	r0, [pc, #256]	; (8001554 <DataToCloud+0x1b0>)
 8001454:	f008 fa4c 	bl	80098f0 <siprintf>

	if(d->GPIO[0]==1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800145e:	2b01      	cmp	r3, #1
 8001460:	d107      	bne.n	8001472 <DataToCloud+0xce>
	{
		strcpy(d->Status1, "HIGH");
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3341      	adds	r3, #65	; 0x41
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <DataToCloud+0x1b4>)
 8001468:	6810      	ldr	r0, [r2, #0]
 800146a:	6018      	str	r0, [r3, #0]
 800146c:	7912      	ldrb	r2, [r2, #4]
 800146e:	711a      	strb	r2, [r3, #4]
 8001470:	e004      	b.n	800147c <DataToCloud+0xd8>
	}
	else
	{
		strcpy(d->Status1, "LOW");
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3341      	adds	r3, #65	; 0x41
 8001476:	4a39      	ldr	r2, [pc, #228]	; (800155c <DataToCloud+0x1b8>)
 8001478:	6810      	ldr	r0, [r2, #0]
 800147a:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <DataToCloud+0xf2>
	{
		strcpy(d->Status2, "HIGH");
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	334b      	adds	r3, #75	; 0x4b
 800148a:	4a33      	ldr	r2, [pc, #204]	; (8001558 <DataToCloud+0x1b4>)
 800148c:	6810      	ldr	r0, [r2, #0]
 800148e:	6018      	str	r0, [r3, #0]
 8001490:	7912      	ldrb	r2, [r2, #4]
 8001492:	711a      	strb	r2, [r3, #4]
 8001494:	e004      	b.n	80014a0 <DataToCloud+0xfc>
	}
	else
	{
		strcpy(d->Status2, "LOW");
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	334b      	adds	r3, #75	; 0x4b
 800149a:	4a30      	ldr	r2, [pc, #192]	; (800155c <DataToCloud+0x1b8>)
 800149c:	6810      	ldr	r0, [r2, #0]
 800149e:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <DataToCloud+0x116>
	{
		strcpy(d->Status3, "HIGH");
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3355      	adds	r3, #85	; 0x55
 80014ae:	4a2a      	ldr	r2, [pc, #168]	; (8001558 <DataToCloud+0x1b4>)
 80014b0:	6810      	ldr	r0, [r2, #0]
 80014b2:	6018      	str	r0, [r3, #0]
 80014b4:	7912      	ldrb	r2, [r2, #4]
 80014b6:	711a      	strb	r2, [r3, #4]
 80014b8:	e004      	b.n	80014c4 <DataToCloud+0x120>
	}
	else
	{
		strcpy(d->Status3, "LOW");
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3355      	adds	r3, #85	; 0x55
 80014be:	4a27      	ldr	r2, [pc, #156]	; (800155c <DataToCloud+0x1b8>)
 80014c0:	6810      	ldr	r0, [r2, #0]
 80014c2:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <DataToCloud+0x13a>
	{
		strcpy(d->Status4, "HIGH");
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	335f      	adds	r3, #95	; 0x5f
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <DataToCloud+0x1b4>)
 80014d4:	6810      	ldr	r0, [r2, #0]
 80014d6:	6018      	str	r0, [r3, #0]
 80014d8:	7912      	ldrb	r2, [r2, #4]
 80014da:	711a      	strb	r2, [r3, #4]
 80014dc:	e004      	b.n	80014e8 <DataToCloud+0x144>
	}
	else
	{
		strcpy(d->Status4, "LOW");
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	335f      	adds	r3, #95	; 0x5f
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <DataToCloud+0x1b8>)
 80014e4:	6810      	ldr	r0, [r2, #0]
 80014e6:	6018      	str	r0, [r3, #0]
	}

//	DataToPass();

	if (New_value != Old_value) {
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <DataToCloud+0x1bc>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d005      	beq.n	80014fe <DataToCloud+0x15a>
		count++;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <DataToCloud+0x1c0>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <DataToCloud+0x1c0>)
 80014fc:	701a      	strb	r2, [r3, #0]
	}

	if (count >= d->scan_time) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <DataToCloud+0x1c0>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d809      	bhi.n	8001520 <DataToCloud+0x17c>
		// Transmit data
		if(d->scan_time>0)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <DataToCloud+0x17c>
		{
			DataToPass();
 8001516:	f000 f827 	bl	8001568 <DataToPass>
			count = 0; // Reset the counter after transmission
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <DataToCloud+0x1c0>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
		}
	}
	Old_value = New_value;
 8001520:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <DataToCloud+0x1bc>)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	7013      	strb	r3, [r2, #0]

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	0800d680 	.word	0x0800d680
 8001534:	20003ba8 	.word	0x20003ba8
 8001538:	0800d690 	.word	0x0800d690
 800153c:	20003bb8 	.word	0x20003bb8
 8001540:	0800d6a0 	.word	0x0800d6a0
 8001544:	20003bc8 	.word	0x20003bc8
 8001548:	20003bd4 	.word	0x20003bd4
 800154c:	20003be0 	.word	0x20003be0
 8001550:	20003bec 	.word	0x20003bec
 8001554:	20003bf8 	.word	0x20003bf8
 8001558:	0800d6a4 	.word	0x0800d6a4
 800155c:	0800d6ac 	.word	0x0800d6ac
 8001560:	20003c02 	.word	0x20003c02
 8001564:	20003c03 	.word	0x20003c03

08001568 <DataToPass>:

void DataToPass()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	DataToWiFi(&d);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <DataToPass+0x10>)
 800156e:	f000 fff5 	bl	800255c <DataToWiFi>
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001fc 	.word	0x200001fc

0800157c <dec_bcd>:
#define RTC_add 0xD0

//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <dec_bcd+0x48>)
 8001588:	fb82 1203 	smull	r1, r2, r2, r3
 800158c:	1092      	asrs	r2, r2, #2
 800158e:	17db      	asrs	r3, r3, #31
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	b2d8      	uxtb	r0, r3
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <dec_bcd+0x48>)
 800159c:	fb83 1302 	smull	r1, r3, r3, r2
 80015a0:	1099      	asrs	r1, r3, #2
 80015a2:	17d3      	asrs	r3, r2, #31
 80015a4:	1ac9      	subs	r1, r1, r3
 80015a6:	460b      	mov	r3, r1
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	1ad1      	subs	r1, r2, r3
 80015b0:	b2cb      	uxtb	r3, r1
 80015b2:	4403      	add	r3, r0
 80015b4:	b2db      	uxtb	r3, r3
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	66666667 	.word	0x66666667

080015c8 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	461a      	mov	r2, r3
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	4413      	add	r3, r2
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <set_time>:



uint8_t Set_time[7];
void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4623      	mov	r3, r4
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	4603      	mov	r3, r0
 800160c:	71bb      	strb	r3, [r7, #6]
 800160e:	460b      	mov	r3, r1
 8001610:	717b      	strb	r3, [r7, #5]
 8001612:	4613      	mov	r3, r2
 8001614:	713b      	strb	r3, [r7, #4]
	uint8_t Set_time[7];
	Set_time[0]=dec_bcd(sec);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffaf 	bl	800157c <dec_bcd>
 800161e:	4603      	mov	r3, r0
 8001620:	723b      	strb	r3, [r7, #8]
	Set_time[1]=dec_bcd(min);
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ffa9 	bl	800157c <dec_bcd>
 800162a:	4603      	mov	r3, r0
 800162c:	727b      	strb	r3, [r7, #9]
	Set_time[2]=dec_bcd(hr);
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ffa3 	bl	800157c <dec_bcd>
 8001636:	4603      	mov	r3, r0
 8001638:	72bb      	strb	r3, [r7, #10]
	Set_time[3]=dec_bcd(day);
 800163a:	793b      	ldrb	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff9d 	bl	800157c <dec_bcd>
 8001642:	4603      	mov	r3, r0
 8001644:	72fb      	strb	r3, [r7, #11]
	Set_time[4]=dec_bcd(dat);
 8001646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff96 	bl	800157c <dec_bcd>
 8001650:	4603      	mov	r3, r0
 8001652:	733b      	strb	r3, [r7, #12]
	Set_time[5]=dec_bcd(mon);
 8001654:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff8f 	bl	800157c <dec_bcd>
 800165e:	4603      	mov	r3, r0
 8001660:	737b      	strb	r3, [r7, #13]
	Set_time[6]=dec_bcd(yr);
 8001662:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff88 	bl	800157c <dec_bcd>
 800166c:	4603      	mov	r3, r0
 800166e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, Set_time, 7, HAL_MAX_DELAY);  //1 bytes
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	2307      	movs	r3, #7
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	2200      	movs	r2, #0
 8001684:	21d0      	movs	r1, #208	; 0xd0
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <set_time+0x9c>)
 8001688:	f003 f8c6 	bl	8004818 <HAL_I2C_Mem_Write>
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	20003fe4 	.word	0x20003fe4

08001698 <get_time>:


uint8_t Get_time[7];
void get_time(struct data *d)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af04      	add	r7, sp, #16
 800169e:	6078      	str	r0, [r7, #4]
	uint8_t Get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, Get_time, 7, HAL_MAX_DELAY);
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2307      	movs	r3, #7
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	2200      	movs	r2, #0
 80016b4:	21d0      	movs	r1, #208	; 0xd0
 80016b6:	481f      	ldr	r0, [pc, #124]	; (8001734 <get_time+0x9c>)
 80016b8:	f003 f9a8 	bl	8004a0c <HAL_I2C_Mem_Read>
	d->seconds=bcd_dec(Get_time[0]);
 80016bc:	7a3b      	ldrb	r3, [r7, #8]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff82 	bl	80015c8 <bcd_dec>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	701a      	strb	r2, [r3, #0]
	d->minutes=bcd_dec(Get_time[1]);
 80016cc:	7a7b      	ldrb	r3, [r7, #9]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff7a 	bl	80015c8 <bcd_dec>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	705a      	strb	r2, [r3, #1]
	d->hour=bcd_dec(Get_time[2]);
 80016dc:	7abb      	ldrb	r3, [r7, #10]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff72 	bl	80015c8 <bcd_dec>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	709a      	strb	r2, [r3, #2]
	d->dayofweek=bcd_dec(Get_time[3]);
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff6a 	bl	80015c8 <bcd_dec>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	70da      	strb	r2, [r3, #3]
	d->dayofmonth=bcd_dec(Get_time[4]);
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff62 	bl	80015c8 <bcd_dec>
 8001704:	4603      	mov	r3, r0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	711a      	strb	r2, [r3, #4]
	d->month=bcd_dec(Get_time[5]);
 800170c:	7b7b      	ldrb	r3, [r7, #13]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff5a 	bl	80015c8 <bcd_dec>
 8001714:	4603      	mov	r3, r0
 8001716:	b2da      	uxtb	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	715a      	strb	r2, [r3, #5]
	d->year=bcd_dec(Get_time[6]);
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff52 	bl	80015c8 <bcd_dec>
 8001724:	4603      	mov	r3, r0
 8001726:	b2da      	uxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	719a      	strb	r2, [r3, #6]
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20003fe4 	.word	0x20003fe4

08001738 <Configurator>:
extern CircularQueue rxwifiQueue;

extern  UART_HandleTypeDef huart4;

void Configurator()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	data_receive();
 800173c:	f001 f99a 	bl	8002a74 <data_receive>
	//		flag=0;
	//	}
	//
	//	if (flag)

	Process_Commands();
 8001740:	f000 f846 	bl	80017d0 <Process_Commands>
	reset_output(&d);
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <Configurator+0x24>)
 8001746:	f000 f8cb 	bl	80018e0 <reset_output>
	set_output(&d);
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <Configurator+0x24>)
 800174c:	f000 f882 	bl	8001854 <set_output>
	read_pinstatus(&d);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <Configurator+0x24>)
 8001752:	f000 f90b 	bl	800196c <read_pinstatus>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200001fc 	.word	0x200001fc

08001760 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_UART_RxCpltCallback+0x50>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10a      	bne.n	8001788 <HAL_UART_RxCpltCallback+0x28>
	{
		// Enqueue received bytes into the circular queue

		if (!CircularQueue_Enqueue(&rxQueue, rxBuffer))
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_UART_RxCpltCallback+0x54>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	480f      	ldr	r0, [pc, #60]	; (80017b8 <HAL_UART_RxCpltCallback+0x58>)
 800177a:	f000 fc65 	bl	8002048 <CircularQueue_Enqueue>
		{
			// Handle queue overflow if necessary (optional)
		}

		// Restart UART reception for the next chunk of data
		HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);
 800177e:	2201      	movs	r2, #1
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <HAL_UART_RxCpltCallback+0x54>)
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <HAL_UART_RxCpltCallback+0x5c>)
 8001784:	f006 fa65 	bl	8007c52 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <HAL_UART_RxCpltCallback+0x60>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10a      	bne.n	80017a8 <HAL_UART_RxCpltCallback+0x48>
		{
			// Enqueue received bytes into the circular queue

			if (!CircularQueue_Enqueue(&rxwifiQueue, rxwifiBuffer))
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_UART_RxCpltCallback+0x64>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <HAL_UART_RxCpltCallback+0x68>)
 800179a:	f000 fc55 	bl	8002048 <CircularQueue_Enqueue>
			{
				// Handle queue overflow if necessary (optional)
			}

			// Restart UART reception for the next chunk of data
			HAL_UART_Receive_IT(&huart4, &rxwifiBuffer, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	4908      	ldr	r1, [pc, #32]	; (80017c4 <HAL_UART_RxCpltCallback+0x64>)
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <HAL_UART_RxCpltCallback+0x6c>)
 80017a4:	f006 fa55 	bl	8007c52 <HAL_UART_Receive_IT>
		}
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40011000 	.word	0x40011000
 80017b4:	20003c78 	.word	0x20003c78
 80017b8:	20003c7c 	.word	0x20003c7c
 80017bc:	20003c08 	.word	0x20003c08
 80017c0:	40004c00 	.word	0x40004c00
 80017c4:	20003e98 	.word	0x20003e98
 80017c8:	20003e9c 	.word	0x20003e9c
 80017cc:	20003f40 	.word	0x20003f40

080017d0 <Process_Commands>:

void Process_Commands(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
	static uint8_t cmdIndex = 0;  // Persistent index to track the current command
	uint8_t byte;

	while (!CircularQueue_IsEmpty(&rxQueue)) {
 80017d6:	e028      	b.n	800182a <Process_Commands+0x5a>
		CircularQueue_Dequeue(&rxQueue, &byte);
 80017d8:	1dfb      	adds	r3, r7, #7
 80017da:	4619      	mov	r1, r3
 80017dc:	481a      	ldr	r0, [pc, #104]	; (8001848 <Process_Commands+0x78>)
 80017de:	f000 fc5c 	bl	800209a <CircularQueue_Dequeue>

		// Add byte to the command
		if (byte != ';') {
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b3b      	cmp	r3, #59	; 0x3b
 80017e6:	d012      	beq.n	800180e <Process_Commands+0x3e>
			if (cmdIndex < sizeof(command) - 1) {
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <Process_Commands+0x7c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b1c      	cmp	r3, #28
 80017ee:	d80a      	bhi.n	8001806 <Process_Commands+0x36>
				command[cmdIndex++] = byte;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <Process_Commands+0x7c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	b2d1      	uxtb	r1, r2
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <Process_Commands+0x7c>)
 80017fa:	7011      	strb	r1, [r2, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	79f9      	ldrb	r1, [r7, #7]
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <Process_Commands+0x80>)
 8001802:	5499      	strb	r1, [r3, r2]
 8001804:	e011      	b.n	800182a <Process_Commands+0x5a>
			} else {
				// Handle command overflow (optional)
				cmdIndex = 0;  // Reset on overflow
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <Process_Commands+0x7c>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e00d      	b.n	800182a <Process_Commands+0x5a>
			}
		} else {
			// Command completed when '\n' is received
			command[cmdIndex] = '\0';  // Null-terminate the command
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <Process_Commands+0x7c>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <Process_Commands+0x80>)
 8001816:	2100      	movs	r1, #0
 8001818:	5499      	strb	r1, [r3, r2]
			cmdIndex = 0;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <Process_Commands+0x7c>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]

			// Process the command
			extract_data(command);
 8001820:	480b      	ldr	r0, [pc, #44]	; (8001850 <Process_Commands+0x80>)
 8001822:	f000 f8e5 	bl	80019f0 <extract_data>
			pin_config();
 8001826:	f000 f929 	bl	8001a7c <pin_config>
	while (!CircularQueue_IsEmpty(&rxQueue)) {
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <Process_Commands+0x78>)
 800182c:	f000 fbf7 	bl	800201e <CircularQueue_IsEmpty>
 8001830:	4603      	mov	r3, r0
 8001832:	f083 0301 	eor.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1cd      	bne.n	80017d8 <Process_Commands+0x8>
		}
	}
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20003c7c 	.word	0x20003c7c
 800184c:	20003d1e 	.word	0x20003d1e
 8001850:	20003d00 	.word	0x20003d00

08001854 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

void set_output(struct data *d)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <set_output+0x80>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <set_output+0x24>
	{
		d->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2104      	movs	r1, #4
 8001868:	481b      	ldr	r0, [pc, #108]	; (80018d8 <set_output+0x84>)
 800186a:	f001 f925 	bl	8002ab8 <write_gpio>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	if(config[1] == 0)
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <set_output+0x80>)
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <set_output+0x40>
	{
		d->GPIO[1] = write_gpio(GPIOC,GPIO_PIN_1, PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	2102      	movs	r1, #2
 8001884:	4815      	ldr	r0, [pc, #84]	; (80018dc <set_output+0x88>)
 8001886:	f001 f917 	bl	8002ab8 <write_gpio>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	if(config[2] == 0)
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <set_output+0x80>)
 8001896:	789b      	ldrb	r3, [r3, #2]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <set_output+0x5c>
	{
		d->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	2110      	movs	r1, #16
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <set_output+0x84>)
 80018a2:	f001 f909 	bl	8002ab8 <write_gpio>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}

	if(config[3] == 0)
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <set_output+0x80>)
 80018b2:	78db      	ldrb	r3, [r3, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <set_output+0x78>
	{
		d->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2120      	movs	r1, #32
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <set_output+0x84>)
 80018be:	f001 f8fb 	bl	8002ab8 <write_gpio>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	}
	//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20003c70 	.word	0x20003c70
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800

080018e0 <reset_output>:

void reset_output(struct data *d1)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <reset_output+0x80>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <reset_output+0x24>
	{
		d1->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2104      	movs	r1, #4
 80018f4:	481b      	ldr	r0, [pc, #108]	; (8001964 <reset_output+0x84>)
 80018f6:	f001 f8df 	bl	8002ab8 <write_gpio>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	if(config[1] == 0)
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <reset_output+0x80>)
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <reset_output+0x40>
	{
		d1->GPIO[1]=write_gpio(GPIOC,GPIO_PIN_1, PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2102      	movs	r1, #2
 8001910:	4815      	ldr	r0, [pc, #84]	; (8001968 <reset_output+0x88>)
 8001912:	f001 f8d1 	bl	8002ab8 <write_gpio>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	if(config[2] == 0)
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <reset_output+0x80>)
 8001922:	789b      	ldrb	r3, [r3, #2]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <reset_output+0x5c>
	{
		d1->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2110      	movs	r1, #16
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <reset_output+0x84>)
 800192e:	f001 f8c3 	bl	8002ab8 <write_gpio>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}

	if(config[3] == 0)
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <reset_output+0x80>)
 800193e:	78db      	ldrb	r3, [r3, #3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <reset_output+0x78>
	{
		d1->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2120      	movs	r1, #32
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <reset_output+0x84>)
 800194a:	f001 f8b5 	bl	8002ab8 <write_gpio>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	}
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20003c70 	.word	0x20003c70
 8001964:	40020400 	.word	0x40020400
 8001968:	40020800 	.word	0x40020800

0800196c <read_pinstatus>:

void read_pinstatus(struct data *d2)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	if(config[0]==1)
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <read_pinstatus+0x78>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <read_pinstatus+0x22>
	{
		d2->GPIO[0]=read_gpio( GPIOB,GPIO_PIN_2);
 800197c:	2104      	movs	r1, #4
 800197e:	481a      	ldr	r0, [pc, #104]	; (80019e8 <read_pinstatus+0x7c>)
 8001980:	f001 f88a 	bl	8002a98 <read_gpio>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}
	if(config[1]==1)
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <read_pinstatus+0x78>)
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <read_pinstatus+0x3c>
	{
		d2->GPIO[1]=read_gpio(GPIOC,GPIO_PIN_1);
 8001996:	2102      	movs	r1, #2
 8001998:	4814      	ldr	r0, [pc, #80]	; (80019ec <read_pinstatus+0x80>)
 800199a:	f001 f87d 	bl	8002a98 <read_gpio>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}
	if(config[2]==1)
 80019a8:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <read_pinstatus+0x78>)
 80019aa:	789b      	ldrb	r3, [r3, #2]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d108      	bne.n	80019c2 <read_pinstatus+0x56>
	{
		d2->GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 80019b0:	2110      	movs	r1, #16
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <read_pinstatus+0x7c>)
 80019b4:	f001 f870 	bl	8002a98 <read_gpio>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	}
	if(config[3]==1)
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <read_pinstatus+0x78>)
 80019c4:	78db      	ldrb	r3, [r3, #3]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <read_pinstatus+0x70>
	{
		d2->GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 80019ca:	2120      	movs	r1, #32
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <read_pinstatus+0x7c>)
 80019ce:	f001 f863 	bl	8002a98 <read_gpio>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	}
	//	 return d->GPIO;
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20003c70 	.word	0x20003c70
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020800 	.word	0x40020800

080019f0 <extract_data>:


void extract_data(char* command)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	token = strtok(command, ",");
 80019f8:	491a      	ldr	r1, [pc, #104]	; (8001a64 <extract_data+0x74>)
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f008 fddc 	bl	800a5b8 <strtok>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <extract_data+0x78>)
 8001a04:	6013      	str	r3, [r2, #0]


	if (token != NULL)
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <extract_data+0x78>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d014      	beq.n	8001a38 <extract_data+0x48>
	{
		strncpy(arr1, token, sizeof(arr1) - 1);
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <extract_data+0x78>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2209      	movs	r2, #9
 8001a14:	4619      	mov	r1, r3
 8001a16:	4815      	ldr	r0, [pc, #84]	; (8001a6c <extract_data+0x7c>)
 8001a18:	f007 ff92 	bl	8009940 <strncpy>

		arr1[sizeof(arr1) - 1] = '\0';// Ensure null-termination
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <extract_data+0x7c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr1,arr1);
 8001a22:	4912      	ldr	r1, [pc, #72]	; (8001a6c <extract_data+0x7c>)
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <extract_data+0x80>)
 8001a26:	f007 ff83 	bl	8009930 <strcpy>


		token = strtok(NULL, ",");
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <extract_data+0x74>)
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f008 fdc3 	bl	800a5b8 <strtok>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <extract_data+0x78>)
 8001a36:	6013      	str	r3, [r2, #0]
	}

	// Get the second token and store it in arr2
	if (token != NULL)
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <extract_data+0x78>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00d      	beq.n	8001a5c <extract_data+0x6c>
	{
		strncpy(arr2, token, sizeof(arr2) - 1);
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <extract_data+0x78>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2213      	movs	r2, #19
 8001a46:	4619      	mov	r1, r3
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <extract_data+0x84>)
 8001a4a:	f007 ff79 	bl	8009940 <strncpy>

		arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <extract_data+0x84>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	74da      	strb	r2, [r3, #19]
		strcpy(d.arr2,arr2);
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <extract_data+0x84>)
 8001a56:	4808      	ldr	r0, [pc, #32]	; (8001a78 <extract_data+0x88>)
 8001a58:	f007 ff6a 	bl	8009930 <strcpy>

		//token = strtok(NULL, ",");
	}


}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0800d6b0 	.word	0x0800d6b0
 8001a68:	20003c6c 	.word	0x20003c6c
 8001a6c:	20003c4c 	.word	0x20003c4c
 8001a70:	20000203 	.word	0x20000203
 8001a74:	20003c58 	.word	0x20003c58
 8001a78:	2000020d 	.word	0x2000020d

08001a7c <pin_config>:


void pin_config()
{
 8001a7c:	b5b0      	push	{r4, r5, r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af04      	add	r7, sp, #16

	if(strcmp(arr1,"B2")==0)
 8001a82:	49a8      	ldr	r1, [pc, #672]	; (8001d24 <pin_config+0x2a8>)
 8001a84:	48a8      	ldr	r0, [pc, #672]	; (8001d28 <pin_config+0x2ac>)
 8001a86:	f7fe fbc3 	bl	8000210 <strcmp>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <pin_config+0x1c>
	{
		switch_val=1;
 8001a90:	4ba6      	ldr	r3, [pc, #664]	; (8001d2c <pin_config+0x2b0>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e077      	b.n	8001b88 <pin_config+0x10c>
	}

	else if(strcmp(arr1,"C1")==0)
 8001a98:	49a5      	ldr	r1, [pc, #660]	; (8001d30 <pin_config+0x2b4>)
 8001a9a:	48a3      	ldr	r0, [pc, #652]	; (8001d28 <pin_config+0x2ac>)
 8001a9c:	f7fe fbb8 	bl	8000210 <strcmp>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <pin_config+0x32>
	{
		switch_val=2;
 8001aa6:	4ba1      	ldr	r3, [pc, #644]	; (8001d2c <pin_config+0x2b0>)
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e06c      	b.n	8001b88 <pin_config+0x10c>
	}

	else if(strcmp(arr1,"B4")==0)
 8001aae:	49a1      	ldr	r1, [pc, #644]	; (8001d34 <pin_config+0x2b8>)
 8001ab0:	489d      	ldr	r0, [pc, #628]	; (8001d28 <pin_config+0x2ac>)
 8001ab2:	f7fe fbad 	bl	8000210 <strcmp>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <pin_config+0x48>
	{
		switch_val=3;
 8001abc:	4b9b      	ldr	r3, [pc, #620]	; (8001d2c <pin_config+0x2b0>)
 8001abe:	2203      	movs	r2, #3
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e061      	b.n	8001b88 <pin_config+0x10c>
	}

	else if(strcmp(arr1,"B5")==0)
 8001ac4:	499c      	ldr	r1, [pc, #624]	; (8001d38 <pin_config+0x2bc>)
 8001ac6:	4898      	ldr	r0, [pc, #608]	; (8001d28 <pin_config+0x2ac>)
 8001ac8:	f7fe fba2 	bl	8000210 <strcmp>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <pin_config+0x5e>
	{
		switch_val=4;
 8001ad2:	4b96      	ldr	r3, [pc, #600]	; (8001d2c <pin_config+0x2b0>)
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e056      	b.n	8001b88 <pin_config+0x10c>
	}

	else if(strcmp(arr1,"ADC1")==0)
 8001ada:	4998      	ldr	r1, [pc, #608]	; (8001d3c <pin_config+0x2c0>)
 8001adc:	4892      	ldr	r0, [pc, #584]	; (8001d28 <pin_config+0x2ac>)
 8001ade:	f7fe fb97 	bl	8000210 <strcmp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <pin_config+0x74>
	{
		switch_val=5;
 8001ae8:	4b90      	ldr	r3, [pc, #576]	; (8001d2c <pin_config+0x2b0>)
 8001aea:	2205      	movs	r2, #5
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e04b      	b.n	8001b88 <pin_config+0x10c>
	}
	else if(strcmp(arr1,"DISABLE")==0)
 8001af0:	4993      	ldr	r1, [pc, #588]	; (8001d40 <pin_config+0x2c4>)
 8001af2:	488d      	ldr	r0, [pc, #564]	; (8001d28 <pin_config+0x2ac>)
 8001af4:	f7fe fb8c 	bl	8000210 <strcmp>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d103      	bne.n	8001b06 <pin_config+0x8a>
	{
		switch_val=6;
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <pin_config+0x2b0>)
 8001b00:	2206      	movs	r2, #6
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e040      	b.n	8001b88 <pin_config+0x10c>
	}

	else if(strcmp(arr1,"TIME")==0)
 8001b06:	498f      	ldr	r1, [pc, #572]	; (8001d44 <pin_config+0x2c8>)
 8001b08:	4887      	ldr	r0, [pc, #540]	; (8001d28 <pin_config+0x2ac>)
 8001b0a:	f7fe fb81 	bl	8000210 <strcmp>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <pin_config+0xa0>
	{
		switch_val=7;
 8001b14:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <pin_config+0x2b0>)
 8001b16:	2207      	movs	r2, #7
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e035      	b.n	8001b88 <pin_config+0x10c>
	}

	else if(strcmp(arr1,"DATE")==0)
 8001b1c:	498a      	ldr	r1, [pc, #552]	; (8001d48 <pin_config+0x2cc>)
 8001b1e:	4882      	ldr	r0, [pc, #520]	; (8001d28 <pin_config+0x2ac>)
 8001b20:	f7fe fb76 	bl	8000210 <strcmp>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d103      	bne.n	8001b32 <pin_config+0xb6>
	{
		switch_val=8;
 8001b2a:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <pin_config+0x2b0>)
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e02a      	b.n	8001b88 <pin_config+0x10c>
	}

	else if(strcmp(arr1,"SCANTIME")==0)
 8001b32:	4986      	ldr	r1, [pc, #536]	; (8001d4c <pin_config+0x2d0>)
 8001b34:	487c      	ldr	r0, [pc, #496]	; (8001d28 <pin_config+0x2ac>)
 8001b36:	f7fe fb6b 	bl	8000210 <strcmp>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <pin_config+0xcc>
	{
		switch_val=9;
 8001b40:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <pin_config+0x2b0>)
 8001b42:	2209      	movs	r2, #9
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e01f      	b.n	8001b88 <pin_config+0x10c>
	}
	else if(strcmp(arr1,"USERNAME")==0)
 8001b48:	4981      	ldr	r1, [pc, #516]	; (8001d50 <pin_config+0x2d4>)
 8001b4a:	4877      	ldr	r0, [pc, #476]	; (8001d28 <pin_config+0x2ac>)
 8001b4c:	f7fe fb60 	bl	8000210 <strcmp>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <pin_config+0xe2>
	{
		switch_val=10;
 8001b56:	4b75      	ldr	r3, [pc, #468]	; (8001d2c <pin_config+0x2b0>)
 8001b58:	220a      	movs	r2, #10
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e014      	b.n	8001b88 <pin_config+0x10c>
	}
	else if(strcmp(arr1,"PASSWORD")==0)
 8001b5e:	497d      	ldr	r1, [pc, #500]	; (8001d54 <pin_config+0x2d8>)
 8001b60:	4871      	ldr	r0, [pc, #452]	; (8001d28 <pin_config+0x2ac>)
 8001b62:	f7fe fb55 	bl	8000210 <strcmp>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <pin_config+0xf8>
	{
		switch_val=11;
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <pin_config+0x2b0>)
 8001b6e:	220b      	movs	r2, #11
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e009      	b.n	8001b88 <pin_config+0x10c>
	}
	else if(strcmp(arr1,"EEPROM")==0)
 8001b74:	4978      	ldr	r1, [pc, #480]	; (8001d58 <pin_config+0x2dc>)
 8001b76:	486c      	ldr	r0, [pc, #432]	; (8001d28 <pin_config+0x2ac>)
 8001b78:	f7fe fb4a 	bl	8000210 <strcmp>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <pin_config+0x10c>
		{
			switch_val=12;
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <pin_config+0x2b0>)
 8001b84:	220c      	movs	r2, #12
 8001b86:	601a      	str	r2, [r3, #0]
		}


	switch(switch_val)
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <pin_config+0x2b0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	2b0b      	cmp	r3, #11
 8001b90:	f200 81fa 	bhi.w	8001f88 <pin_config+0x50c>
 8001b94:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <pin_config+0x120>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001bcd 	.word	0x08001bcd
 8001ba0:	08001c0f 	.word	0x08001c0f
 8001ba4:	08001c51 	.word	0x08001c51
 8001ba8:	08001c93 	.word	0x08001c93
 8001bac:	08001cd5 	.word	0x08001cd5
 8001bb0:	08001da1 	.word	0x08001da1
 8001bb4:	08001e0b 	.word	0x08001e0b
 8001bb8:	08001ea3 	.word	0x08001ea3
 8001bbc:	08001f43 	.word	0x08001f43
 8001bc0:	08001f55 	.word	0x08001f55
 8001bc4:	08001f5f 	.word	0x08001f5f
 8001bc8:	08001f69 	.word	0x08001f69
	{

	case 1:
		if(strcmp(arr2,"OUTPUT")==0)
 8001bcc:	4963      	ldr	r1, [pc, #396]	; (8001d5c <pin_config+0x2e0>)
 8001bce:	4864      	ldr	r0, [pc, #400]	; (8001d60 <pin_config+0x2e4>)
 8001bd0:	f7fe fb1e 	bl	8000210 <strcmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <pin_config+0x170>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,OUTPUT);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2104      	movs	r1, #4
 8001bde:	4861      	ldr	r0, [pc, #388]	; (8001d64 <pin_config+0x2e8>)
 8001be0:	f000 fea6 	bl	8002930 <user_GPIO_Init>
			config[0] = 0;
 8001be4:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <pin_config+0x2ec>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
			config[0] = 1;
		}
		break;
 8001bea:	e1c2      	b.n	8001f72 <pin_config+0x4f6>
		else if(strcmp(arr2,"INPUT")==0)
 8001bec:	495f      	ldr	r1, [pc, #380]	; (8001d6c <pin_config+0x2f0>)
 8001bee:	485c      	ldr	r0, [pc, #368]	; (8001d60 <pin_config+0x2e4>)
 8001bf0:	f7fe fb0e 	bl	8000210 <strcmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 81bb 	bne.w	8001f72 <pin_config+0x4f6>
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4858      	ldr	r0, [pc, #352]	; (8001d64 <pin_config+0x2e8>)
 8001c02:	f000 fe95 	bl	8002930 <user_GPIO_Init>
			config[0] = 1;
 8001c06:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <pin_config+0x2ec>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
		break;
 8001c0c:	e1b1      	b.n	8001f72 <pin_config+0x4f6>

	case 2:
		if(strcmp(arr2,"OUTPUT")==0)
 8001c0e:	4953      	ldr	r1, [pc, #332]	; (8001d5c <pin_config+0x2e0>)
 8001c10:	4853      	ldr	r0, [pc, #332]	; (8001d60 <pin_config+0x2e4>)
 8001c12:	f7fe fafd 	bl	8000210 <strcmp>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d108      	bne.n	8001c2e <pin_config+0x1b2>
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,OUTPUT);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2102      	movs	r1, #2
 8001c20:	4853      	ldr	r0, [pc, #332]	; (8001d70 <pin_config+0x2f4>)
 8001c22:	f000 fe85 	bl	8002930 <user_GPIO_Init>
			config[1]=0;
 8001c26:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <pin_config+0x2ec>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	705a      	strb	r2, [r3, #1]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
			config[1]=1;
		}
		break;
 8001c2c:	e1a3      	b.n	8001f76 <pin_config+0x4fa>
		else if(strcmp(arr2,"INPUT")==0)
 8001c2e:	494f      	ldr	r1, [pc, #316]	; (8001d6c <pin_config+0x2f0>)
 8001c30:	484b      	ldr	r0, [pc, #300]	; (8001d60 <pin_config+0x2e4>)
 8001c32:	f7fe faed 	bl	8000210 <strcmp>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 819c 	bne.w	8001f76 <pin_config+0x4fa>
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2102      	movs	r1, #2
 8001c42:	484b      	ldr	r0, [pc, #300]	; (8001d70 <pin_config+0x2f4>)
 8001c44:	f000 fe74 	bl	8002930 <user_GPIO_Init>
			config[1]=1;
 8001c48:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <pin_config+0x2ec>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	705a      	strb	r2, [r3, #1]
		break;
 8001c4e:	e192      	b.n	8001f76 <pin_config+0x4fa>

	case 3:
		if(strcmp(arr2,"OUTPUT")==0)
 8001c50:	4942      	ldr	r1, [pc, #264]	; (8001d5c <pin_config+0x2e0>)
 8001c52:	4843      	ldr	r0, [pc, #268]	; (8001d60 <pin_config+0x2e4>)
 8001c54:	f7fe fadc 	bl	8000210 <strcmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d108      	bne.n	8001c70 <pin_config+0x1f4>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2110      	movs	r1, #16
 8001c62:	4840      	ldr	r0, [pc, #256]	; (8001d64 <pin_config+0x2e8>)
 8001c64:	f000 fe64 	bl	8002930 <user_GPIO_Init>
			config[2]=0;
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <pin_config+0x2ec>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	709a      	strb	r2, [r3, #2]
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			config[2]=1;
		}

		break;
 8001c6e:	e184      	b.n	8001f7a <pin_config+0x4fe>
		else if(strcmp(arr2,"INPUT")==0)
 8001c70:	493e      	ldr	r1, [pc, #248]	; (8001d6c <pin_config+0x2f0>)
 8001c72:	483b      	ldr	r0, [pc, #236]	; (8001d60 <pin_config+0x2e4>)
 8001c74:	f7fe facc 	bl	8000210 <strcmp>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 817d 	bne.w	8001f7a <pin_config+0x4fe>
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2110      	movs	r1, #16
 8001c84:	4837      	ldr	r0, [pc, #220]	; (8001d64 <pin_config+0x2e8>)
 8001c86:	f000 fe53 	bl	8002930 <user_GPIO_Init>
			config[2]=1;
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <pin_config+0x2ec>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	709a      	strb	r2, [r3, #2]
		break;
 8001c90:	e173      	b.n	8001f7a <pin_config+0x4fe>

	case 4:
		if(strcmp(arr2,"OUTPUT")==0)
 8001c92:	4932      	ldr	r1, [pc, #200]	; (8001d5c <pin_config+0x2e0>)
 8001c94:	4832      	ldr	r0, [pc, #200]	; (8001d60 <pin_config+0x2e4>)
 8001c96:	f7fe fabb 	bl	8000210 <strcmp>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d108      	bne.n	8001cb2 <pin_config+0x236>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	482f      	ldr	r0, [pc, #188]	; (8001d64 <pin_config+0x2e8>)
 8001ca6:	f000 fe43 	bl	8002930 <user_GPIO_Init>
			config[3]=0;
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <pin_config+0x2ec>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	70da      	strb	r2, [r3, #3]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			config[3]=1;
		}
		break;
 8001cb0:	e165      	b.n	8001f7e <pin_config+0x502>
		else if(strcmp(arr2,"INPUT")==0)
 8001cb2:	492e      	ldr	r1, [pc, #184]	; (8001d6c <pin_config+0x2f0>)
 8001cb4:	482a      	ldr	r0, [pc, #168]	; (8001d60 <pin_config+0x2e4>)
 8001cb6:	f7fe faab 	bl	8000210 <strcmp>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 815e 	bne.w	8001f7e <pin_config+0x502>
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	4827      	ldr	r0, [pc, #156]	; (8001d64 <pin_config+0x2e8>)
 8001cc8:	f000 fe32 	bl	8002930 <user_GPIO_Init>
			config[3]=1;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <pin_config+0x2ec>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	70da      	strb	r2, [r3, #3]
		break;
 8001cd2:	e154      	b.n	8001f7e <pin_config+0x502>

	case 5:
		if(strcmp(arr2,"CH1")==0)
 8001cd4:	4927      	ldr	r1, [pc, #156]	; (8001d74 <pin_config+0x2f8>)
 8001cd6:	4822      	ldr	r0, [pc, #136]	; (8001d60 <pin_config+0x2e4>)
 8001cd8:	f7fe fa9a 	bl	8000210 <strcmp>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <pin_config+0x272>
		{
			ADC_select_CH1();
 8001ce2:	f000 fa3d 	bl	8002160 <ADC_select_CH1>
			adcChnlChecker[0] = 1;
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <pin_config+0x2fc>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
		//		}
		//		else
		//		{
		//			__NOP();
		//		}
		break;
 8001cec:	e149      	b.n	8001f82 <pin_config+0x506>
		else if(strcmp(arr2,"CH2")==0)
 8001cee:	4923      	ldr	r1, [pc, #140]	; (8001d7c <pin_config+0x300>)
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <pin_config+0x2e4>)
 8001cf2:	f7fe fa8d 	bl	8000210 <strcmp>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <pin_config+0x28c>
			ADC_select_CH2();
 8001cfc:	f000 fa68 	bl	80021d0 <ADC_select_CH2>
			adcChnlChecker[1] = 1;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <pin_config+0x2fc>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	705a      	strb	r2, [r3, #1]
		break;
 8001d06:	e13c      	b.n	8001f82 <pin_config+0x506>
		else if(strcmp(arr2,"CH3")==0)
 8001d08:	491d      	ldr	r1, [pc, #116]	; (8001d80 <pin_config+0x304>)
 8001d0a:	4815      	ldr	r0, [pc, #84]	; (8001d60 <pin_config+0x2e4>)
 8001d0c:	f7fe fa80 	bl	8000210 <strcmp>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d136      	bne.n	8001d84 <pin_config+0x308>
			ADC_select_CH3();
 8001d16:	f000 fa93 	bl	8002240 <ADC_select_CH3>
			adcChnlChecker[2] = 1;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <pin_config+0x2fc>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	709a      	strb	r2, [r3, #2]
		break;
 8001d20:	e12f      	b.n	8001f82 <pin_config+0x506>
 8001d22:	bf00      	nop
 8001d24:	0800d6b4 	.word	0x0800d6b4
 8001d28:	20003c4c 	.word	0x20003c4c
 8001d2c:	20003c04 	.word	0x20003c04
 8001d30:	0800d6b8 	.word	0x0800d6b8
 8001d34:	0800d6bc 	.word	0x0800d6bc
 8001d38:	0800d6c0 	.word	0x0800d6c0
 8001d3c:	0800d6c4 	.word	0x0800d6c4
 8001d40:	0800d6cc 	.word	0x0800d6cc
 8001d44:	0800d6d4 	.word	0x0800d6d4
 8001d48:	0800d6dc 	.word	0x0800d6dc
 8001d4c:	0800d6e4 	.word	0x0800d6e4
 8001d50:	0800d6f0 	.word	0x0800d6f0
 8001d54:	0800d6fc 	.word	0x0800d6fc
 8001d58:	0800d708 	.word	0x0800d708
 8001d5c:	0800d710 	.word	0x0800d710
 8001d60:	20003c58 	.word	0x20003c58
 8001d64:	40020400 	.word	0x40020400
 8001d68:	20003c70 	.word	0x20003c70
 8001d6c:	0800d718 	.word	0x0800d718
 8001d70:	40020800 	.word	0x40020800
 8001d74:	0800d720 	.word	0x0800d720
 8001d78:	20003c74 	.word	0x20003c74
 8001d7c:	0800d724 	.word	0x0800d724
 8001d80:	0800d728 	.word	0x0800d728
		else if(strcmp(arr2,"CH4")==0)
 8001d84:	4982      	ldr	r1, [pc, #520]	; (8001f90 <pin_config+0x514>)
 8001d86:	4883      	ldr	r0, [pc, #524]	; (8001f94 <pin_config+0x518>)
 8001d88:	f7fe fa42 	bl	8000210 <strcmp>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 80f7 	bne.w	8001f82 <pin_config+0x506>
			ADC_select_CH4();
 8001d94:	f000 fa8c 	bl	80022b0 <ADC_select_CH4>
			adcChnlChecker[3] = 1;
 8001d98:	4b7f      	ldr	r3, [pc, #508]	; (8001f98 <pin_config+0x51c>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	70da      	strb	r2, [r3, #3]
		break;
 8001d9e:	e0f0      	b.n	8001f82 <pin_config+0x506>

	case 6:
		if(strcmp(arr2,"CH1")==0)
 8001da0:	497e      	ldr	r1, [pc, #504]	; (8001f9c <pin_config+0x520>)
 8001da2:	487c      	ldr	r0, [pc, #496]	; (8001f94 <pin_config+0x518>)
 8001da4:	f7fe fa34 	bl	8000210 <strcmp>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <pin_config+0x33e>
		{
			ADC_select_CH1();
 8001dae:	f000 f9d7 	bl	8002160 <ADC_select_CH1>
			adcChnlChecker[0] = 0;
 8001db2:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <pin_config+0x51c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
		{
			ADC_select_CH4();
			adcChnlChecker[3] = 0;
		}

		break;
 8001db8:	e0e5      	b.n	8001f86 <pin_config+0x50a>
		else if(strcmp(arr2,"CH2")==0)
 8001dba:	4979      	ldr	r1, [pc, #484]	; (8001fa0 <pin_config+0x524>)
 8001dbc:	4875      	ldr	r0, [pc, #468]	; (8001f94 <pin_config+0x518>)
 8001dbe:	f7fe fa27 	bl	8000210 <strcmp>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <pin_config+0x358>
			ADC_select_CH2();
 8001dc8:	f000 fa02 	bl	80021d0 <ADC_select_CH2>
			adcChnlChecker[1] = 0;
 8001dcc:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <pin_config+0x51c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	705a      	strb	r2, [r3, #1]
		break;
 8001dd2:	e0d8      	b.n	8001f86 <pin_config+0x50a>
		else if(strcmp(arr2,"CH3")==0)
 8001dd4:	4973      	ldr	r1, [pc, #460]	; (8001fa4 <pin_config+0x528>)
 8001dd6:	486f      	ldr	r0, [pc, #444]	; (8001f94 <pin_config+0x518>)
 8001dd8:	f7fe fa1a 	bl	8000210 <strcmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <pin_config+0x372>
			ADC_select_CH3();
 8001de2:	f000 fa2d 	bl	8002240 <ADC_select_CH3>
			adcChnlChecker[2] = 0;
 8001de6:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <pin_config+0x51c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	709a      	strb	r2, [r3, #2]
		break;
 8001dec:	e0cb      	b.n	8001f86 <pin_config+0x50a>
		else if(strcmp(arr2,"CH4")==0)
 8001dee:	4968      	ldr	r1, [pc, #416]	; (8001f90 <pin_config+0x514>)
 8001df0:	4868      	ldr	r0, [pc, #416]	; (8001f94 <pin_config+0x518>)
 8001df2:	f7fe fa0d 	bl	8000210 <strcmp>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 80c4 	bne.w	8001f86 <pin_config+0x50a>
			ADC_select_CH4();
 8001dfe:	f000 fa57 	bl	80022b0 <ADC_select_CH4>
			adcChnlChecker[3] = 0;
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <pin_config+0x51c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	70da      	strb	r2, [r3, #3]
		break;
 8001e08:	e0bd      	b.n	8001f86 <pin_config+0x50a>

	case 7:

		token = strtok(arr2, ":");
 8001e0a:	4967      	ldr	r1, [pc, #412]	; (8001fa8 <pin_config+0x52c>)
 8001e0c:	4861      	ldr	r0, [pc, #388]	; (8001f94 <pin_config+0x518>)
 8001e0e:	f008 fbd3 	bl	800a5b8 <strtok>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a65      	ldr	r2, [pc, #404]	; (8001fac <pin_config+0x530>)
 8001e16:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8001e18:	4b64      	ldr	r3, [pc, #400]	; (8001fac <pin_config+0x530>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00f      	beq.n	8001e40 <pin_config+0x3c4>
		{
			d.hour = atoi(token);
 8001e20:	4b62      	ldr	r3, [pc, #392]	; (8001fac <pin_config+0x530>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f006 fead 	bl	8008b84 <atoi>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <pin_config+0x534>)
 8001e30:	709a      	strb	r2, [r3, #2]
			token = strtok(NULL, ":");
 8001e32:	495d      	ldr	r1, [pc, #372]	; (8001fa8 <pin_config+0x52c>)
 8001e34:	2000      	movs	r0, #0
 8001e36:	f008 fbbf 	bl	800a5b8 <strtok>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a5b      	ldr	r2, [pc, #364]	; (8001fac <pin_config+0x530>)
 8001e3e:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <pin_config+0x530>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00f      	beq.n	8001e68 <pin_config+0x3ec>
		{
			d.minutes = atoi(token);
 8001e48:	4b58      	ldr	r3, [pc, #352]	; (8001fac <pin_config+0x530>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f006 fe99 	bl	8008b84 <atoi>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <pin_config+0x534>)
 8001e58:	705a      	strb	r2, [r3, #1]
			token = strtok(NULL, ":");
 8001e5a:	4953      	ldr	r1, [pc, #332]	; (8001fa8 <pin_config+0x52c>)
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f008 fbab 	bl	800a5b8 <strtok>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <pin_config+0x530>)
 8001e66:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <pin_config+0x530>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <pin_config+0x406>
		{
			d.seconds = atoi(token);
 8001e70:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <pin_config+0x530>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f006 fe85 	bl	8008b84 <atoi>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <pin_config+0x534>)
 8001e80:	701a      	strb	r2, [r3, #0]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,0,0,0);
 8001e82:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <pin_config+0x534>)
 8001e84:	7818      	ldrb	r0, [r3, #0]
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <pin_config+0x534>)
 8001e88:	7859      	ldrb	r1, [r3, #1]
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <pin_config+0x534>)
 8001e8c:	789a      	ldrb	r2, [r3, #2]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f7ff fbac 	bl	80015f8 <set_time>

		break;
 8001ea0:	e072      	b.n	8001f88 <pin_config+0x50c>

	case 8:

		token = strtok(arr2, ":");
 8001ea2:	4941      	ldr	r1, [pc, #260]	; (8001fa8 <pin_config+0x52c>)
 8001ea4:	483b      	ldr	r0, [pc, #236]	; (8001f94 <pin_config+0x518>)
 8001ea6:	f008 fb87 	bl	800a5b8 <strtok>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <pin_config+0x530>)
 8001eae:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <pin_config+0x530>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00f      	beq.n	8001ed8 <pin_config+0x45c>
		{
			d.dayofmonth = atoi(token);
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <pin_config+0x530>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f006 fe61 	bl	8008b84 <atoi>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <pin_config+0x534>)
 8001ec8:	711a      	strb	r2, [r3, #4]
			token = strtok(NULL, ":");
 8001eca:	4937      	ldr	r1, [pc, #220]	; (8001fa8 <pin_config+0x52c>)
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f008 fb73 	bl	800a5b8 <strtok>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a35      	ldr	r2, [pc, #212]	; (8001fac <pin_config+0x530>)
 8001ed6:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <pin_config+0x530>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00f      	beq.n	8001f00 <pin_config+0x484>
		{
			d.month = atoi(token);
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <pin_config+0x530>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f006 fe4d 	bl	8008b84 <atoi>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <pin_config+0x534>)
 8001ef0:	715a      	strb	r2, [r3, #5]
			token = strtok(NULL, ":");
 8001ef2:	492d      	ldr	r1, [pc, #180]	; (8001fa8 <pin_config+0x52c>)
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f008 fb5f 	bl	800a5b8 <strtok>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <pin_config+0x530>)
 8001efe:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <pin_config+0x530>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <pin_config+0x49e>
		{
			d.year = atoi(token);
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <pin_config+0x530>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 fe39 	bl	8008b84 <atoi>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <pin_config+0x534>)
 8001f18:	719a      	strb	r2, [r3, #6]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,d.dayofmonth,d.month,d.year);
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <pin_config+0x534>)
 8001f1c:	7818      	ldrb	r0, [r3, #0]
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <pin_config+0x534>)
 8001f20:	785c      	ldrb	r4, [r3, #1]
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <pin_config+0x534>)
 8001f24:	789d      	ldrb	r5, [r3, #2]
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <pin_config+0x534>)
 8001f28:	791b      	ldrb	r3, [r3, #4]
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <pin_config+0x534>)
 8001f2c:	7952      	ldrb	r2, [r2, #5]
 8001f2e:	4920      	ldr	r1, [pc, #128]	; (8001fb0 <pin_config+0x534>)
 8001f30:	7989      	ldrb	r1, [r1, #6]
 8001f32:	9102      	str	r1, [sp, #8]
 8001f34:	9201      	str	r2, [sp, #4]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	462a      	mov	r2, r5
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	f7ff fb5b 	bl	80015f8 <set_time>


	case 9:
		d.scan_time = (uint8_t)atoi(arr2);
 8001f42:	4814      	ldr	r0, [pc, #80]	; (8001f94 <pin_config+0x518>)
 8001f44:	f006 fe1e 	bl	8008b84 <atoi>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <pin_config+0x534>)
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		break;
 8001f52:	e019      	b.n	8001f88 <pin_config+0x50c>
	case 10:
		strcpy(d.username,arr2);
 8001f54:	490f      	ldr	r1, [pc, #60]	; (8001f94 <pin_config+0x518>)
 8001f56:	4817      	ldr	r0, [pc, #92]	; (8001fb4 <pin_config+0x538>)
 8001f58:	f007 fcea 	bl	8009930 <strcpy>
		break;
 8001f5c:	e014      	b.n	8001f88 <pin_config+0x50c>

	case 11:
		strcpy(d.password,arr2);
 8001f5e:	490d      	ldr	r1, [pc, #52]	; (8001f94 <pin_config+0x518>)
 8001f60:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <pin_config+0x53c>)
 8001f62:	f007 fce5 	bl	8009930 <strcpy>
		break;
 8001f66:	e00f      	b.n	8001f88 <pin_config+0x50c>
	case 12:
			strcpy(d.eeprom_data,arr2);
 8001f68:	490a      	ldr	r1, [pc, #40]	; (8001f94 <pin_config+0x518>)
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <pin_config+0x540>)
 8001f6c:	f007 fce0 	bl	8009930 <strcpy>
			break;
 8001f70:	e00a      	b.n	8001f88 <pin_config+0x50c>
		break;
 8001f72:	bf00      	nop
 8001f74:	e008      	b.n	8001f88 <pin_config+0x50c>
		break;
 8001f76:	bf00      	nop
 8001f78:	e006      	b.n	8001f88 <pin_config+0x50c>
		break;
 8001f7a:	bf00      	nop
 8001f7c:	e004      	b.n	8001f88 <pin_config+0x50c>
		break;
 8001f7e:	bf00      	nop
 8001f80:	e002      	b.n	8001f88 <pin_config+0x50c>
		break;
 8001f82:	bf00      	nop
 8001f84:	e000      	b.n	8001f88 <pin_config+0x50c>
		break;
 8001f86:	bf00      	nop


	}
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	0800d72c 	.word	0x0800d72c
 8001f94:	20003c58 	.word	0x20003c58
 8001f98:	20003c74 	.word	0x20003c74
 8001f9c:	0800d720 	.word	0x0800d720
 8001fa0:	0800d724 	.word	0x0800d724
 8001fa4:	0800d728 	.word	0x0800d728
 8001fa8:	0800d730 	.word	0x0800d730
 8001fac:	20003c6c 	.word	0x20003c6c
 8001fb0:	200001fc 	.word	0x200001fc
 8001fb4:	20000265 	.word	0x20000265
 8001fb8:	20000279 	.word	0x20000279
 8001fbc:	2000028d 	.word	0x2000028d

08001fc0 <CircularQueue_Init>:
 */


#include "circular_queue.h"

void CircularQueue_Init(CircularQueue *queue) {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    queue->tail = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <CircularQueue_IsFull>:

bool CircularQueue_IsFull(CircularQueue *queue) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    return ((queue->head + 1) % BUFFER_SIZE) == queue->tail;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	425a      	negs	r2, r3
 8001ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ffa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ffe:	bf58      	it	pl
 8002000:	4253      	negpl	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8002008:	4293      	cmp	r3, r2
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <CircularQueue_IsEmpty>:

bool CircularQueue_IsEmpty(CircularQueue *queue) {
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
    return queue->head == queue->tail;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002032:	429a      	cmp	r2, r3
 8002034:	bf0c      	ite	eq
 8002036:	2301      	moveq	r3, #1
 8002038:	2300      	movne	r3, #0
 800203a:	b2db      	uxtb	r3, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <CircularQueue_Enqueue>:

bool CircularQueue_Enqueue(CircularQueue *queue, uint8_t data) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
    if (CircularQueue_IsFull(queue)) {
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffc5 	bl	8001fe4 <CircularQueue_IsFull>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <CircularQueue_Enqueue+0x1c>
        return false;  // Queue is full
 8002060:	2300      	movs	r3, #0
 8002062:	e016      	b.n	8002092 <CircularQueue_Enqueue+0x4a>
    }
    queue->buffer[queue->head] = data;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800206a:	4619      	mov	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	545a      	strb	r2, [r3, r1]
    queue->head = (queue->head + 1) % BUFFER_SIZE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002078:	3301      	adds	r3, #1
 800207a:	425a      	negs	r2, r3
 800207c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002080:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002084:	bf58      	it	pl
 8002086:	4253      	negpl	r3, r2
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    return true;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <CircularQueue_Dequeue>:

bool CircularQueue_Dequeue(CircularQueue *queue, uint8_t *data) {
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
    if (CircularQueue_IsEmpty(queue)) {
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ffba 	bl	800201e <CircularQueue_IsEmpty>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <CircularQueue_Dequeue+0x1a>
        return false;  // Queue is empty
 80020b0:	2300      	movs	r3, #0
 80020b2:	e017      	b.n	80020e4 <CircularQueue_Dequeue+0x4a>
    }
    *data = queue->buffer[queue->tail];
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	5c9a      	ldrb	r2, [r3, r2]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	701a      	strb	r2, [r3, #0]
    queue->tail = (queue->tail + 1) % BUFFER_SIZE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80020ca:	3301      	adds	r3, #1
 80020cc:	425a      	negs	r2, r3
 80020ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020d6:	bf58      	it	pl
 80020d8:	4253      	negpl	r3, r2
 80020da:	b29a      	uxth	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    return true;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <USER_ADC1_Init>:
//	 */
//	HAL_RCCEx_EnableMSIPLLMode();
//}

void USER_ADC1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	//
	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <USER_ADC1_Init+0x68>)
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <USER_ADC1_Init+0x6c>)
 80020f4:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <USER_ADC1_Init+0x68>)
 80020f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020fc:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <USER_ADC1_Init+0x68>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <USER_ADC1_Init+0x68>)
 8002106:	2201      	movs	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <USER_ADC1_Init+0x68>)
 800210c:	2201      	movs	r2, #1
 800210e:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <USER_ADC1_Init+0x68>)
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <USER_ADC1_Init+0x68>)
 800211a:	2200      	movs	r2, #0
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <USER_ADC1_Init+0x68>)
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <USER_ADC1_Init+0x70>)
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <USER_ADC1_Init+0x68>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 4;
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <USER_ADC1_Init+0x68>)
 800212c:	2204      	movs	r2, #4
 800212e:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <USER_ADC1_Init+0x68>)
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <USER_ADC1_Init+0x68>)
 800213a:	2201      	movs	r2, #1
 800213c:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <USER_ADC1_Init+0x68>)
 8002140:	f001 fa9e 	bl	8003680 <HAL_ADC_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <USER_ADC1_Init+0x62>
	  {
	    Error_Handler();
 800214a:	f000 fe3b 	bl	8002dc4 <Error_Handler>
//	  }
	  /* USER CODE BEGIN ADC1_Init 2 */
	//
	  /* USER CODE END ADC1_Init 2 */

	}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20003f9c 	.word	0x20003f9c
 8002158:	40012000 	.word	0x40012000
 800215c:	0f000001 	.word	0x0f000001

08002160 <ADC_select_CH1>:
	/* USER CODE END MX_GPIO_Init_2 */
}
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 8002164:	4916      	ldr	r1, [pc, #88]	; (80021c0 <ADC_select_CH1+0x60>)
 8002166:	4817      	ldr	r0, [pc, #92]	; (80021c4 <ADC_select_CH1+0x64>)
 8002168:	f7fe f852 	bl	8000210 <strcmp>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d112      	bne.n	8002198 <ADC_select_CH1+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_5;
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <ADC_select_CH1+0x68>)
 8002174:	2205      	movs	r2, #5
 8002176:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <ADC_select_CH1+0x68>)
 800217a:	2200      	movs	r2, #0
 800217c:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <ADC_select_CH1+0x68>)
 8002180:	2207      	movs	r2, #7
 8002182:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002184:	4910      	ldr	r1, [pc, #64]	; (80021c8 <ADC_select_CH1+0x68>)
 8002186:	4811      	ldr	r0, [pc, #68]	; (80021cc <ADC_select_CH1+0x6c>)
 8002188:	f001 fc5c 	bl	8003a44 <HAL_ADC_ConfigChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d014      	beq.n	80021bc <ADC_select_CH1+0x5c>
		{
			Error_Handler();
 8002192:	f000 fe17 	bl	8002dc4 <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 8002196:	e011      	b.n	80021bc <ADC_select_CH1+0x5c>
	sConfig.Channel = ADC_CHANNEL_5;
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <ADC_select_CH1+0x68>)
 800219a:	2205      	movs	r2, #5
 800219c:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <ADC_select_CH1+0x68>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <ADC_select_CH1+0x68>)
 80021a6:	2207      	movs	r2, #7
 80021a8:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021aa:	4907      	ldr	r1, [pc, #28]	; (80021c8 <ADC_select_CH1+0x68>)
 80021ac:	4807      	ldr	r0, [pc, #28]	; (80021cc <ADC_select_CH1+0x6c>)
 80021ae:	f001 fc49 	bl	8003a44 <HAL_ADC_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <ADC_select_CH1+0x5c>
		    Error_Handler();
 80021b8:	f000 fe04 	bl	8002dc4 <Error_Handler>
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	0800d734 	.word	0x0800d734
 80021c4:	20003c4c 	.word	0x20003c4c
 80021c8:	20003d20 	.word	0x20003d20
 80021cc:	20003f9c 	.word	0x20003f9c

080021d0 <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 80021d4:	4916      	ldr	r1, [pc, #88]	; (8002230 <ADC_select_CH2+0x60>)
 80021d6:	4817      	ldr	r0, [pc, #92]	; (8002234 <ADC_select_CH2+0x64>)
 80021d8:	f7fe f81a 	bl	8000210 <strcmp>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d112      	bne.n	8002208 <ADC_select_CH2+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_6;
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <ADC_select_CH2+0x68>)
 80021e4:	2206      	movs	r2, #6
 80021e6:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <ADC_select_CH2+0x68>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <ADC_select_CH2+0x68>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021f4:	4910      	ldr	r1, [pc, #64]	; (8002238 <ADC_select_CH2+0x68>)
 80021f6:	4811      	ldr	r0, [pc, #68]	; (800223c <ADC_select_CH2+0x6c>)
 80021f8:	f001 fc24 	bl	8003a44 <HAL_ADC_ConfigChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d014      	beq.n	800222c <ADC_select_CH2+0x5c>
		{
			Error_Handler();
 8002202:	f000 fddf 	bl	8002dc4 <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 8002206:	e011      	b.n	800222c <ADC_select_CH2+0x5c>
	sConfig.Channel = ADC_CHANNEL_6;
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <ADC_select_CH2+0x68>)
 800220a:	2206      	movs	r2, #6
 800220c:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <ADC_select_CH2+0x68>)
 8002210:	2201      	movs	r2, #1
 8002212:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <ADC_select_CH2+0x68>)
 8002216:	2207      	movs	r2, #7
 8002218:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800221a:	4907      	ldr	r1, [pc, #28]	; (8002238 <ADC_select_CH2+0x68>)
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <ADC_select_CH2+0x6c>)
 800221e:	f001 fc11 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <ADC_select_CH2+0x5c>
		    Error_Handler();
 8002228:	f000 fdcc 	bl	8002dc4 <Error_Handler>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	0800d734 	.word	0x0800d734
 8002234:	20003c4c 	.word	0x20003c4c
 8002238:	20003d20 	.word	0x20003d20
 800223c:	20003f9c 	.word	0x20003f9c

08002240 <ADC_select_CH3>:


void ADC_select_CH3(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <ADC_select_CH3+0x60>)
 8002246:	4817      	ldr	r0, [pc, #92]	; (80022a4 <ADC_select_CH3+0x64>)
 8002248:	f7fd ffe2 	bl	8000210 <strcmp>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d112      	bne.n	8002278 <ADC_select_CH3+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_9;
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <ADC_select_CH3+0x68>)
 8002254:	2209      	movs	r2, #9
 8002256:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <ADC_select_CH3+0x68>)
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <ADC_select_CH3+0x68>)
 8002260:	2207      	movs	r2, #7
 8002262:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002264:	4910      	ldr	r1, [pc, #64]	; (80022a8 <ADC_select_CH3+0x68>)
 8002266:	4811      	ldr	r0, [pc, #68]	; (80022ac <ADC_select_CH3+0x6c>)
 8002268:	f001 fbec 	bl	8003a44 <HAL_ADC_ConfigChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d014      	beq.n	800229c <ADC_select_CH3+0x5c>
		{
			Error_Handler();
 8002272:	f000 fda7 	bl	8002dc4 <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 8002276:	e011      	b.n	800229c <ADC_select_CH3+0x5c>
	sConfig.Channel = ADC_CHANNEL_9;
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <ADC_select_CH3+0x68>)
 800227a:	2209      	movs	r2, #9
 800227c:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <ADC_select_CH3+0x68>)
 8002280:	2201      	movs	r2, #1
 8002282:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <ADC_select_CH3+0x68>)
 8002286:	2207      	movs	r2, #7
 8002288:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800228a:	4907      	ldr	r1, [pc, #28]	; (80022a8 <ADC_select_CH3+0x68>)
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <ADC_select_CH3+0x6c>)
 800228e:	f001 fbd9 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <ADC_select_CH3+0x5c>
		    Error_Handler();
 8002298:	f000 fd94 	bl	8002dc4 <Error_Handler>
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	0800d734 	.word	0x0800d734
 80022a4:	20003c4c 	.word	0x20003c4c
 80022a8:	20003d20 	.word	0x20003d20
 80022ac:	20003f9c 	.word	0x20003f9c

080022b0 <ADC_select_CH4>:


void ADC_select_CH4(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 80022b4:	4916      	ldr	r1, [pc, #88]	; (8002310 <ADC_select_CH4+0x60>)
 80022b6:	4817      	ldr	r0, [pc, #92]	; (8002314 <ADC_select_CH4+0x64>)
 80022b8:	f7fd ffaa 	bl	8000210 <strcmp>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d112      	bne.n	80022e8 <ADC_select_CH4+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_10;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <ADC_select_CH4+0x68>)
 80022c4:	220a      	movs	r2, #10
 80022c6:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <ADC_select_CH4+0x68>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <ADC_select_CH4+0x68>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d4:	4910      	ldr	r1, [pc, #64]	; (8002318 <ADC_select_CH4+0x68>)
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <ADC_select_CH4+0x6c>)
 80022d8:	f001 fbb4 	bl	8003a44 <HAL_ADC_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d014      	beq.n	800230c <ADC_select_CH4+0x5c>
		{
			Error_Handler();
 80022e2:	f000 fd6f 	bl	8002dc4 <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 80022e6:	e011      	b.n	800230c <ADC_select_CH4+0x5c>
	sConfig.Channel = ADC_CHANNEL_10;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <ADC_select_CH4+0x68>)
 80022ea:	220a      	movs	r2, #10
 80022ec:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <ADC_select_CH4+0x68>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <ADC_select_CH4+0x68>)
 80022f6:	2207      	movs	r2, #7
 80022f8:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022fa:	4907      	ldr	r1, [pc, #28]	; (8002318 <ADC_select_CH4+0x68>)
 80022fc:	4807      	ldr	r0, [pc, #28]	; (800231c <ADC_select_CH4+0x6c>)
 80022fe:	f001 fba1 	bl	8003a44 <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <ADC_select_CH4+0x5c>
		    Error_Handler();
 8002308:	f000 fd5c 	bl	8002dc4 <Error_Handler>
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	0800d734 	.word	0x0800d734
 8002314:	20003c4c 	.word	0x20003c4c
 8002318:	20003d20 	.word	0x20003d20
 800231c:	20003f9c 	.word	0x20003f9c

08002320 <adc_start>:
//}



void adc_start(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <adc_start+0x10>)
 8002326:	f001 f9ef 	bl	8003708 <HAL_ADC_Start>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20003f9c 	.word	0x20003f9c

08002334 <adc_conversion>:

void adc_conversion(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 8002338:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <adc_conversion+0x14>)
 800233e:	f001 fae8 	bl	8003912 <HAL_ADC_PollForConversion>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20003f9c 	.word	0x20003f9c

0800234c <adc_value>:

uint16_t adc_value(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <adc_value+0x14>)
 8002352:	f001 fb69 	bl	8003a28 <HAL_ADC_GetValue>
 8002356:	4603      	mov	r3, r0
 8002358:	b29b      	uxth	r3, r3
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20003f9c 	.word	0x20003f9c

08002364 <adc_stop>:

void adc_stop(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <adc_stop+0x10>)
 800236a:	f001 fa9f 	bl	80038ac <HAL_ADC_Stop>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20003f9c 	.word	0x20003f9c

08002378 <Data_To_EEPROM>:

uint8_t page_number;  // Start with page 0
uint8_t offset = 0;       // Start with offset 0

void Data_To_EEPROM(char *eeprom_data)
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]


	EEPROM_Write(page_number,offset,(uint8_t*)eeprom_data,strlen(eeprom_data));
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <Data_To_EEPROM+0x3c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b29c      	uxth	r4, r3
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <Data_To_EEPROM+0x40>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b29d      	uxth	r5, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7fd ff49 	bl	8000224 <strlen>
 8002392:	4603      	mov	r3, r0
 8002394:	b29b      	uxth	r3, r3
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4629      	mov	r1, r5
 800239a:	4620      	mov	r0, r4
 800239c:	f000 fbfc 	bl	8002b98 <EEPROM_Write>
	page_number+=3;
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <Data_To_EEPROM+0x3c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	3303      	adds	r3, #3
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <Data_To_EEPROM+0x3c>)
 80023aa:	701a      	strb	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdb0      	pop	{r4, r5, r7, pc}
 80023b4:	20003d30 	.word	0x20003d30
 80023b8:	20003d31 	.word	0x20003d31

080023bc <USER_I2C3_INIT>:

void USER_I2C3_INIT(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C3_Init 0 */

	  /* USER CODE BEGIN I2C3_Init 1 */
	//
	  /* USER CODE END I2C3_Init 1 */
	  hi2c3.Instance = I2C3;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <USER_I2C3_INIT+0x50>)
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <USER_I2C3_INIT+0x54>)
 80023c4:	601a      	str	r2, [r3, #0]
	  hi2c3.Init.ClockSpeed = 400000;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <USER_I2C3_INIT+0x50>)
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <USER_I2C3_INIT+0x58>)
 80023ca:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <USER_I2C3_INIT+0x50>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.OwnAddress1 = 0;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <USER_I2C3_INIT+0x50>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <USER_I2C3_INIT+0x50>)
 80023da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023de:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <USER_I2C3_INIT+0x50>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2 = 0;
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <USER_I2C3_INIT+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <USER_I2C3_INIT+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <USER_I2C3_INIT+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <USER_I2C3_INIT+0x50>)
 80023fa:	f002 f8c9 	bl	8004590 <HAL_I2C_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <USER_I2C3_INIT+0x4c>
	  {
	    Error_Handler();
 8002404:	f000 fcde 	bl	8002dc4 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C3_Init 2 */
	//
	  /* USER CODE END I2C3_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20004038 	.word	0x20004038
 8002410:	40005c00 	.word	0x40005c00
 8002414:	00061a80 	.word	0x00061a80

08002418 <UART4_Init>:

UART_HandleTypeDef huart4;


void UART4_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <UART4_Init+0x4c>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <UART4_Init+0x50>)
 8002420:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <UART4_Init+0x4c>)
 8002424:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002428:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <UART4_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <UART4_Init+0x4c>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <UART4_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <UART4_Init+0x4c>)
 800243e:	220c      	movs	r2, #12
 8002440:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <UART4_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <UART4_Init+0x4c>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <UART4_Init+0x4c>)
 8002450:	f005 fb20 	bl	8007a94 <HAL_UART_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <UART4_Init+0x46>
	{
		Error_Handler();
 800245a:	f000 fcb3 	bl	8002dc4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20003f40 	.word	0x20003f40
 8002468:	40004c00 	.word	0x40004c00

0800246c <USERRCV_GPIO_Init>:


void USERRCV_GPIO_Init()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b32      	ldr	r3, [pc, #200]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a31      	ldr	r2, [pc, #196]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 800248c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <USERRCV_GPIO_Init+0xe4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f8:	4816      	ldr	r0, [pc, #88]	; (8002554 <USERRCV_GPIO_Init+0xe8>)
 80024fa:	f002 f82f 	bl	800455c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002504:	4814      	ldr	r0, [pc, #80]	; (8002558 <USERRCV_GPIO_Init+0xec>)
 8002506:	f002 f829 	bl	800455c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 800250a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	480c      	ldr	r0, [pc, #48]	; (8002554 <USERRCV_GPIO_Init+0xe8>)
 8002524:	f001 fe6e 	bl	8004204 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC7 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002528:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800252c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	2301      	movs	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <USERRCV_GPIO_Init+0xec>)
 8002542:	f001 fe5f 	bl	8004204 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	; 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800

0800255c <DataToWiFi>:




void DataToWiFi(struct data *d)
{
 800255c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255e:	b097      	sub	sp, #92	; 0x5c
 8002560:	af10      	add	r7, sp, #64	; 0x40
 8002562:	6178      	str	r0, [r7, #20]

	sprintf((char*)WiFi_cloud_data,"U:%s,P:%s,TIME:%02d:%02d:%02d,DATE:%02d/%02d/%02d,CH1:%s,CH2:%s,CH3:%s,CH4:%s,MDS:%s,GPIO1:%s,GPIO2:%s,GPIO3:%s,GPIO4:%s\r\n",d->username,d->password,d->hour,d->minutes,d->seconds,d->dayofmonth,d->month,d->year,CH1,CH2,CH3,CH4,MDS,d->Status1,d->Status2,d->Status3,d->Status4);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f103 0469 	add.w	r4, r3, #105	; 0x69
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f103 057d 	add.w	r5, r3, #125	; 0x7d
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	461e      	mov	r6, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	791b      	ldrb	r3, [r3, #4]
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	795b      	ldrb	r3, [r3, #5]
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	799b      	ldrb	r3, [r3, #6]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3341      	adds	r3, #65	; 0x41
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	324b      	adds	r2, #75	; 0x4b
 800259c:	6979      	ldr	r1, [r7, #20]
 800259e:	3155      	adds	r1, #85	; 0x55
 80025a0:	6978      	ldr	r0, [r7, #20]
 80025a2:	305f      	adds	r0, #95	; 0x5f
 80025a4:	900e      	str	r0, [sp, #56]	; 0x38
 80025a6:	910d      	str	r1, [sp, #52]	; 0x34
 80025a8:	920c      	str	r2, [sp, #48]	; 0x30
 80025aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <DataToWiFi+0xac>)
 80025ae:	930a      	str	r3, [sp, #40]	; 0x28
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <DataToWiFi+0xb0>)
 80025b2:	9309      	str	r3, [sp, #36]	; 0x24
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <DataToWiFi+0xb4>)
 80025b6:	9308      	str	r3, [sp, #32]
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <DataToWiFi+0xb8>)
 80025ba:	9307      	str	r3, [sp, #28]
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <DataToWiFi+0xbc>)
 80025be:	9306      	str	r3, [sp, #24]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	9205      	str	r2, [sp, #20]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	9204      	str	r2, [sp, #16]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	9203      	str	r2, [sp, #12]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	9202      	str	r2, [sp, #8]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	9600      	str	r6, [sp, #0]
 80025d6:	462b      	mov	r3, r5
 80025d8:	4622      	mov	r2, r4
 80025da:	4910      	ldr	r1, [pc, #64]	; (800261c <DataToWiFi+0xc0>)
 80025dc:	4810      	ldr	r0, [pc, #64]	; (8002620 <DataToWiFi+0xc4>)
 80025de:	f007 f987 	bl	80098f0 <siprintf>
	HAL_UART_Transmit(&huart4, WiFi_cloud_data, strlen((char*)WiFi_cloud_data), HAL_MAX_DELAY);
 80025e2:	480f      	ldr	r0, [pc, #60]	; (8002620 <DataToWiFi+0xc4>)
 80025e4:	f7fd fe1e 	bl	8000224 <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	490b      	ldr	r1, [pc, #44]	; (8002620 <DataToWiFi+0xc4>)
 80025f2:	480c      	ldr	r0, [pc, #48]	; (8002624 <DataToWiFi+0xc8>)
 80025f4:	f005 fa9b 	bl	8007b2e <HAL_UART_Transmit>
	HAL_Delay(100);
 80025f8:	2064      	movs	r0, #100	; 0x64
 80025fa:	f001 f81d 	bl	8003638 <HAL_Delay>

}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002606:	bf00      	nop
 8002608:	20003bf8 	.word	0x20003bf8
 800260c:	20003bec 	.word	0x20003bec
 8002610:	20003be0 	.word	0x20003be0
 8002614:	20003bd4 	.word	0x20003bd4
 8002618:	20003bc8 	.word	0x20003bc8
 800261c:	0800d73c 	.word	0x0800d73c
 8002620:	20003d34 	.word	0x20003d34
 8002624:	20003f40 	.word	0x20003f40

08002628 <datafromgs>:

void datafromgs()
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	wifi_data_receive();
 800262c:	f000 f806 	bl	800263c <wifi_data_receive>
	wifi_Process_Commands();
 8002630:	f000 f816 	bl	8002660 <wifi_Process_Commands>
	Process_GPIO_Status();
 8002634:	f000 f858 	bl	80026e8 <Process_GPIO_Status>

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <wifi_data_receive>:

void wifi_data_receive()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart4, &rxwifiBuffer,1) == HAL_ERROR)
 8002640:	2201      	movs	r2, #1
 8002642:	4905      	ldr	r1, [pc, #20]	; (8002658 <wifi_data_receive+0x1c>)
 8002644:	4805      	ldr	r0, [pc, #20]	; (800265c <wifi_data_receive+0x20>)
 8002646:	f005 fb04 	bl	8007c52 <HAL_UART_Receive_IT>
 800264a:	4603      	mov	r3, r0
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <wifi_data_receive+0x18>
	{
		Error_Handler();
 8002650:	f000 fbb8 	bl	8002dc4 <Error_Handler>
	}
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20003e98 	.word	0x20003e98
 800265c:	20003f40 	.word	0x20003f40

08002660 <wifi_Process_Commands>:
//}



void wifi_Process_Commands(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
	static uint8_t cmdIndex = 0;  // Persistent index to track the current command
	uint8_t byte;
	memset(WifiData, 0, sizeof(WifiData));  // Clear the response buffer
 8002666:	2264      	movs	r2, #100	; 0x64
 8002668:	2100      	movs	r1, #0
 800266a:	481c      	ldr	r0, [pc, #112]	; (80026dc <wifi_Process_Commands+0x7c>)
 800266c:	f006 fab8 	bl	8008be0 <memset>

	while (!CircularQueue_IsEmpty(&rxwifiQueue)) {
 8002670:	e026      	b.n	80026c0 <wifi_Process_Commands+0x60>
		CircularQueue_Dequeue(&rxwifiQueue, &byte);
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	4619      	mov	r1, r3
 8002676:	481a      	ldr	r0, [pc, #104]	; (80026e0 <wifi_Process_Commands+0x80>)
 8002678:	f7ff fd0f 	bl	800209a <CircularQueue_Dequeue>

		// Add byte to the command
		if (byte != ';') {
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b3b      	cmp	r3, #59	; 0x3b
 8002680:	d012      	beq.n	80026a8 <wifi_Process_Commands+0x48>
			if (cmdIndex < sizeof(WifiData) - 1) {
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <wifi_Process_Commands+0x84>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b62      	cmp	r3, #98	; 0x62
 8002688:	d80a      	bhi.n	80026a0 <wifi_Process_Commands+0x40>
				WifiData[cmdIndex++] = byte;
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <wifi_Process_Commands+0x84>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	b2d1      	uxtb	r1, r2
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <wifi_Process_Commands+0x84>)
 8002694:	7011      	strb	r1, [r2, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	79f9      	ldrb	r1, [r7, #7]
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <wifi_Process_Commands+0x7c>)
 800269c:	5499      	strb	r1, [r3, r2]
 800269e:	e00c      	b.n	80026ba <wifi_Process_Commands+0x5a>
			} else {
				// Handle command overflow (optional)
				cmdIndex = 0;  // Reset on overflow
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <wifi_Process_Commands+0x84>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e008      	b.n	80026ba <wifi_Process_Commands+0x5a>
			}
		} else {
			// Command completed when '\n' is received
			WifiData[cmdIndex] = '\0';  // Null-terminate the command
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <wifi_Process_Commands+0x84>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <wifi_Process_Commands+0x7c>)
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]
			cmdIndex = 0;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <wifi_Process_Commands+0x84>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]


		}
		uart3_tx((char*)WifiData);
 80026ba:	4808      	ldr	r0, [pc, #32]	; (80026dc <wifi_Process_Commands+0x7c>)
 80026bc:	f000 fa10 	bl	8002ae0 <uart3_tx>
	while (!CircularQueue_IsEmpty(&rxwifiQueue)) {
 80026c0:	4807      	ldr	r0, [pc, #28]	; (80026e0 <wifi_Process_Commands+0x80>)
 80026c2:	f7ff fcac 	bl	800201e <CircularQueue_IsEmpty>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f083 0301 	eor.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1cf      	bne.n	8002672 <wifi_Process_Commands+0x12>
//					else if(strcmp(WifiData,"Data to EEPROM")==0)
//					{
//		//				Data_To_EEPROM(eeprom_data);
//					}
	}
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20003e34 	.word	0x20003e34
 80026e0:	20003e9c 	.word	0x20003e9c
 80026e4:	20003f84 	.word	0x20003f84

080026e8 <Process_GPIO_Status>:

}


void Process_GPIO_Status()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
//	HAL_Delay(1000);



	if(strcmp(RCV_GPIO1,"HIGH")==0)
 80026ec:	4926      	ldr	r1, [pc, #152]	; (8002788 <Process_GPIO_Status+0xa0>)
 80026ee:	4827      	ldr	r0, [pc, #156]	; (800278c <Process_GPIO_Status+0xa4>)
 80026f0:	f7fd fd8e 	bl	8000210 <strcmp>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <Process_GPIO_Status+0x20>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 80026fa:	2201      	movs	r2, #1
 80026fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002700:	4823      	ldr	r0, [pc, #140]	; (8002790 <Process_GPIO_Status+0xa8>)
 8002702:	f001 ff2b 	bl	800455c <HAL_GPIO_WritePin>
 8002706:	e005      	b.n	8002714 <Process_GPIO_Status+0x2c>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800270e:	4820      	ldr	r0, [pc, #128]	; (8002790 <Process_GPIO_Status+0xa8>)
 8002710:	f001 ff24 	bl	800455c <HAL_GPIO_WritePin>
	}

	if(strcmp(RCV_GPIO2,"HIGH")==0)
 8002714:	491c      	ldr	r1, [pc, #112]	; (8002788 <Process_GPIO_Status+0xa0>)
 8002716:	481f      	ldr	r0, [pc, #124]	; (8002794 <Process_GPIO_Status+0xac>)
 8002718:	f7fd fd7a 	bl	8000210 <strcmp>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <Process_GPIO_Status+0x46>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8002722:	2201      	movs	r2, #1
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	481a      	ldr	r0, [pc, #104]	; (8002790 <Process_GPIO_Status+0xa8>)
 8002728:	f001 ff18 	bl	800455c <HAL_GPIO_WritePin>
 800272c:	e004      	b.n	8002738 <Process_GPIO_Status+0x50>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	4817      	ldr	r0, [pc, #92]	; (8002790 <Process_GPIO_Status+0xa8>)
 8002734:	f001 ff12 	bl	800455c <HAL_GPIO_WritePin>
		}

	if(strcmp(RCV_GPIO3,"HIGH")==0)
 8002738:	4913      	ldr	r1, [pc, #76]	; (8002788 <Process_GPIO_Status+0xa0>)
 800273a:	4817      	ldr	r0, [pc, #92]	; (8002798 <Process_GPIO_Status+0xb0>)
 800273c:	f7fd fd68 	bl	8000210 <strcmp>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <Process_GPIO_Status+0x6a>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8002746:	2201      	movs	r2, #1
 8002748:	2140      	movs	r1, #64	; 0x40
 800274a:	4811      	ldr	r0, [pc, #68]	; (8002790 <Process_GPIO_Status+0xa8>)
 800274c:	f001 ff06 	bl	800455c <HAL_GPIO_WritePin>
 8002750:	e004      	b.n	800275c <Process_GPIO_Status+0x74>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	480e      	ldr	r0, [pc, #56]	; (8002790 <Process_GPIO_Status+0xa8>)
 8002758:	f001 ff00 	bl	800455c <HAL_GPIO_WritePin>
		}

	if(strcmp(RCV_GPIO4,"HIGH")==0)
 800275c:	490a      	ldr	r1, [pc, #40]	; (8002788 <Process_GPIO_Status+0xa0>)
 800275e:	480f      	ldr	r0, [pc, #60]	; (800279c <Process_GPIO_Status+0xb4>)
 8002760:	f7fd fd56 	bl	8000210 <strcmp>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <Process_GPIO_Status+0x90>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 800276a:	2201      	movs	r2, #1
 800276c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002770:	480b      	ldr	r0, [pc, #44]	; (80027a0 <Process_GPIO_Status+0xb8>)
 8002772:	f001 fef3 	bl	800455c <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
		}

}
 8002776:	e005      	b.n	8002784 <Process_GPIO_Status+0x9c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277e:	4808      	ldr	r0, [pc, #32]	; (80027a0 <Process_GPIO_Status+0xb8>)
 8002780:	f001 feec 	bl	800455c <HAL_GPIO_WritePin>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	0800d7bc 	.word	0x0800d7bc
 800278c:	20003f20 	.word	0x20003f20
 8002790:	40020800 	.word	0x40020800
 8002794:	20003f28 	.word	0x20003f28
 8002798:	20003f30 	.word	0x20003f30
 800279c:	20003f38 	.word	0x20003f38
 80027a0:	40020400 	.word	0x40020400

080027a4 <USER_I2C1_Init>:




void USER_I2C1_Init()
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <USER_I2C1_Init+0x54>)
 80027ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <USER_I2C1_Init+0x58>)
 80027b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027e0:	4804      	ldr	r0, [pc, #16]	; (80027f4 <USER_I2C1_Init+0x50>)
 80027e2:	f001 fed5 	bl	8004590 <HAL_I2C_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <USER_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027ec:	f000 faea 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20003fe4 	.word	0x20003fe4
 80027f8:	40005400 	.word	0x40005400
 80027fc:	000186a0 	.word	0x000186a0

08002800 <SystemClock_Config>:
extern UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t GPIO[4];

void SystemClock_Config(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b094      	sub	sp, #80	; 0x50
 8002804:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	2234      	movs	r2, #52	; 0x34
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f006 f9e6 	bl	8008be0 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <SystemClock_Config+0xd4>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <SystemClock_Config+0xd4>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6413      	str	r3, [r2, #64]	; 0x40
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <SystemClock_Config+0xd4>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <SystemClock_Config+0xd8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <SystemClock_Config+0xd8>)
 800284e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <SystemClock_Config+0xd8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002860:	2302      	movs	r3, #2
 8002862:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002864:	2301      	movs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002868:	2310      	movs	r3, #16
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286c:	2302      	movs	r3, #2
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002870:	2300      	movs	r3, #0
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 8002874:	2310      	movs	r3, #16
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 8002878:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800287e:	2304      	movs	r3, #4
 8002880:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002882:	2302      	movs	r3, #2
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8002886:	2302      	movs	r3, #2
 8002888:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4618      	mov	r0, r3
 8002890:	f004 fe62 	bl	8007558 <HAL_RCC_OscConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 800289a:	f000 fa93 	bl	8002dc4 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289e:	230f      	movs	r3, #15
 80028a0:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a2:	2302      	movs	r3, #2
 80028a4:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ae:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	2102      	movs	r1, #2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 fb02 	bl	8006ec4 <HAL_RCC_ClockConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 80028c6:	f000 fa7d 	bl	8002dc4 <Error_Handler>
	  }
	}
 80028ca:	bf00      	nop
 80028cc:	3750      	adds	r7, #80	; 0x50
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000

080028dc <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	   /* USER CODE END USART1_Init 0 */

	   /* USER CODE BEGIN USART1_Init 1 */

	   /* USER CODE END USART1_Init 1 */
	   huart1.Instance = USART1;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <user_USART1_UART_Init+0x4c>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <user_USART1_UART_Init+0x50>)
 80028e4:	601a      	str	r2, [r3, #0]
	   huart1.Init.BaudRate = 9600;
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <user_USART1_UART_Init+0x4c>)
 80028e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028ec:	605a      	str	r2, [r3, #4]
	   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <user_USART1_UART_Init+0x4c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
	   huart1.Init.StopBits = UART_STOPBITS_1;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <user_USART1_UART_Init+0x4c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
	   huart1.Init.Parity = UART_PARITY_NONE;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <user_USART1_UART_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
	   huart1.Init.Mode = UART_MODE_TX_RX;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <user_USART1_UART_Init+0x4c>)
 8002902:	220c      	movs	r2, #12
 8002904:	615a      	str	r2, [r3, #20]
	   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <user_USART1_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
	   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <user_USART1_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
	   if (HAL_UART_Init(&huart1) != HAL_OK)
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <user_USART1_UART_Init+0x4c>)
 8002914:	f005 f8be 	bl	8007a94 <HAL_UART_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <user_USART1_UART_Init+0x46>
	   {
	     Error_Handler();
 800291e:	f000 fa51 	bl	8002dc4 <Error_Handler>
	   }
	   /* USER CODE BEGIN USART1_Init 2 */

	   /* USER CODE END USART1_Init 2 */

	 }
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20003c08 	.word	0x20003c08
 800292c:	40011000 	.word	0x40011000

08002930 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <user_GPIO_Init+0xb8>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <user_GPIO_Init+0xb8>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <user_GPIO_Init+0xb8>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <user_GPIO_Init+0xb8>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a20      	ldr	r2, [pc, #128]	; (80029e8 <user_GPIO_Init+0xb8>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <user_GPIO_Init+0xb8>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <user_GPIO_Init+0xb8>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <user_GPIO_Init+0xb8>)
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <user_GPIO_Init+0xb8>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8002994:	787a      	ldrb	r2, [r7, #1]
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f001 fdde 	bl	800455c <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 80029a0:	787b      	ldrb	r3, [r7, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <user_GPIO_Init+0x84>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 80029a6:	787a      	ldrb	r2, [r7, #1]
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f81f 	bl	80029f0 <gpio_output>
 80029b2:	e008      	b.n	80029c6 <user_GPIO_Init+0x96>
     }
     else if(PIN_mode == INPUT)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <user_GPIO_Init+0x96>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 80029ba:	787a      	ldrb	r2, [r7, #1]
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f837 	bl	8002a34 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <user_GPIO_Init+0xbc>)
 80029c8:	2202      	movs	r2, #2
 80029ca:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <user_GPIO_Init+0xbc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <user_GPIO_Init+0xbc>)
 80029d4:	2203      	movs	r2, #3
 80029d6:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <user_GPIO_Init+0xbc>)
 80029da:	2207      	movs	r2, #7
 80029dc:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	20003f88 	.word	0x20003f88

080029f0 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
 80029fc:	4613      	mov	r3, r2
 80029fe:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	4619      	mov	r1, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f001 fbec 	bl	8004204 <HAL_GPIO_Init>
 }
 8002a2c:	bf00      	nop
 8002a2e:	3720      	adds	r7, #32
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f001 fbcc 	bl	8004204 <HAL_GPIO_Init>
 }
 8002a6c:	bf00      	nop
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <data_receive>:




void data_receive()
 {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive_IT(&huart1, &rxBuffer,1) == HAL_ERROR)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4905      	ldr	r1, [pc, #20]	; (8002a90 <data_receive+0x1c>)
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <data_receive+0x20>)
 8002a7e:	f005 f8e8 	bl	8007c52 <HAL_UART_Receive_IT>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <data_receive+0x18>
	 {
			 Error_Handler();
 8002a88:	f000 f99c 	bl	8002dc4 <Error_Handler>
	 }
 }
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20003c78 	.word	0x20003c78
 8002a94:	20003c08 	.word	0x20003c08

08002a98 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f001 fd3f 	bl	800452c <HAL_GPIO_ReadPin>
 8002aae:	4603      	mov	r3, r0

 }
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8002ac8:	787a      	ldrb	r2, [r7, #1]
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f001 fd44 	bl	800455c <HAL_GPIO_WritePin>
    return PinState;
 8002ad4:	787b      	ldrb	r3, [r7, #1]
 }
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <uart3_tx>:


extern UART_HandleTypeDef huart3;

void uart3_tx(uint8_t* buf)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fd fb9b 	bl	8000224 <strlen>
 8002aee:	4603      	mov	r3, r0
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <uart3_tx+0x2c>)
 8002afa:	f005 f818 	bl	8007b2e <HAL_UART_Transmit>
	 HAL_Delay(100);
 8002afe:	2064      	movs	r0, #100	; 0x64
 8002b00:	f000 fd9a 	bl	8003638 <HAL_Delay>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000408c 	.word	0x2000408c

08002b10 <USER_USART3_UART_Init>:


void USER_USART3_UART_Init()
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <USER_USART3_UART_Init+0x50>)
 8002b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b36:	220c      	movs	r2, #12
 8002b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <USER_USART3_UART_Init+0x4c>)
 8002b48:	f004 ffa4 	bl	8007a94 <HAL_UART_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <USER_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b52:	f000 f937 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000408c 	.word	0x2000408c
 8002b60:	40004800 	.word	0x40004800

08002b64 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	80fb      	strh	r3, [r7, #6]
 8002b70:	4613      	mov	r3, r2
 8002b72:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	88bb      	ldrh	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b7c:	dc01      	bgt.n	8002b82 <bytestowrite+0x1e>
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	e003      	b.n	8002b8a <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8002b82:	88bb      	ldrh	r3, [r7, #4]
 8002b84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002b88:	b29b      	uxth	r3, r3
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	60ba      	str	r2, [r7, #8]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	81fb      	strh	r3, [r7, #14]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	81bb      	strh	r3, [r7, #12]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8002bae:	2306      	movs	r3, #6
 8002bb0:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	89bb      	ldrh	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	da00      	bge.n	8002bc2 <EEPROM_Write+0x2a>
 8002bc0:	333f      	adds	r3, #63	; 0x3f
 8002bc2:	119b      	asrs	r3, r3, #6
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	89fb      	ldrh	r3, [r7, #14]
 8002bc8:	4413      	add	r3, r2
 8002bca:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8002bcc:	8b7a      	ldrh	r2, [r7, #26]
 8002bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	e034      	b.n	8002c4c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8002be2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8002bf6:	89ba      	ldrh	r2, [r7, #12]
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ffb1 	bl	8002b64 <bytestowrite>
 8002c02:	4603      	mov	r3, r0
 8002c04:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8002c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	8af9      	ldrh	r1, [r7, #22]
 8002c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c12:	9202      	str	r2, [sp, #8]
 8002c14:	8aba      	ldrh	r2, [r7, #20]
 8002c16:	9201      	str	r2, [sp, #4]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	21a0      	movs	r1, #160	; 0xa0
 8002c20:	480f      	ldr	r0, [pc, #60]	; (8002c60 <EEPROM_Write+0xc8>)
 8002c22:	f001 fdf9 	bl	8004818 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8002c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c28:	3301      	adds	r3, #1
 8002c2a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	8abb      	ldrh	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8002c38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c3a:	8abb      	ldrh	r3, [r7, #20]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8002c40:	2005      	movs	r0, #5
 8002c42:	f000 fcf9 	bl	8003638 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	8b3b      	ldrh	r3, [r7, #24]
 8002c4e:	6a3a      	ldr	r2, [r7, #32]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	dbc6      	blt.n	8002be2 <EEPROM_Write+0x4a>
	}
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3728      	adds	r7, #40	; 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20004038 	.word	0x20004038

08002c64 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	60ba      	str	r2, [r7, #8]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	81fb      	strh	r3, [r7, #14]
 8002c72:	460b      	mov	r3, r1
 8002c74:	81bb      	strh	r3, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	89bb      	ldrh	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	da00      	bge.n	8002c8e <EEPROM_Read+0x2a>
 8002c8c:	333f      	adds	r3, #63	; 0x3f
 8002c8e:	119b      	asrs	r3, r3, #6
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	4413      	add	r3, r2
 8002c96:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8002c98:	8b7a      	ldrh	r2, [r7, #26]
 8002c9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	e031      	b.n	8002d12 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8002cae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8002cc2:	89ba      	ldrh	r2, [r7, #12]
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff4b 	bl	8002b64 <bytestowrite>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8002cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	8af9      	ldrh	r1, [r7, #22]
 8002cda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cde:	9202      	str	r2, [sp, #8]
 8002ce0:	8aba      	ldrh	r2, [r7, #20]
 8002ce2:	9201      	str	r2, [sp, #4]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	460a      	mov	r2, r1
 8002cea:	21a0      	movs	r1, #160	; 0xa0
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <EEPROM_Read+0xc0>)
 8002cee:	f001 fe8d 	bl	8004a0c <HAL_I2C_Mem_Read>
		startPage += 1;
 8002cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	8abb      	ldrh	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8002d04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d06:	8abb      	ldrh	r3, [r7, #20]
 8002d08:	4413      	add	r3, r2
 8002d0a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	8b3b      	ldrh	r3, [r7, #24]
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	dbc9      	blt.n	8002cae <EEPROM_Read+0x4a>
	}
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	3728      	adds	r7, #40	; 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20004038 	.word	0x20004038

08002d28 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b098      	sub	sp, #96	; 0x60
 8002d2c:	af04      	add	r7, sp, #16
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 8002d32:	2306      	movs	r3, #6
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	21ff      	movs	r1, #255	; 0xff
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f005 ff48 	bl	8008be0 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8002d50:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	2340      	movs	r3, #64	; 0x40
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2302      	movs	r3, #2
 8002d66:	21a0      	movs	r1, #160	; 0xa0
 8002d68:	4804      	ldr	r0, [pc, #16]	; (8002d7c <EEPROM_PageErase+0x54>)
 8002d6a:	f001 fd55 	bl	8004818 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay 
 8002d6e:	2005      	movs	r0, #5
 8002d70:	f000 fc62 	bl	8003638 <HAL_Delay>
}
 8002d74:	bf00      	nop
 8002d76:	3750      	adds	r7, #80	; 0x50
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20004038 	.word	0x20004038

08002d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d84:	f000 fbe6 	bl	8003554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d88:	f7ff fd3a 	bl	8002800 <SystemClock_Config>
//  MX_UART4_Init();
//  MX_USART1_UART_Init();
//  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  user_USART1_UART_Init();
 8002d8c:	f7ff fda6 	bl	80028dc <user_USART1_UART_Init>
   USER_I2C3_INIT();
 8002d90:	f7ff fb14 	bl	80023bc <USER_I2C3_INIT>
   USER_I2C1_Init();
 8002d94:	f7ff fd06 	bl	80027a4 <USER_I2C1_Init>
   USER_ADC1_Init();
 8002d98:	f7ff f9a8 	bl	80020ec <USER_ADC1_Init>
   UART4_Init();
 8002d9c:	f7ff fb3c 	bl	8002418 <UART4_Init>
   USER_USART3_UART_Init();
 8002da0:	f7ff feb6 	bl	8002b10 <USER_USART3_UART_Init>
    CircularQueue_Init(&rxQueue);
 8002da4:	4805      	ldr	r0, [pc, #20]	; (8002dbc <main+0x3c>)
 8002da6:	f7ff f90b 	bl	8001fc0 <CircularQueue_Init>
    CircularQueue_Init(&rxwifiQueue);
 8002daa:	4805      	ldr	r0, [pc, #20]	; (8002dc0 <main+0x40>)
 8002dac:	f7ff f908 	bl	8001fc0 <CircularQueue_Init>
    USERRCV_GPIO_Init();
 8002db0:	f7ff fb5c 	bl	800246c <USERRCV_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  application();
 8002db4:	f7fe f950 	bl	8001058 <application>
 8002db8:	e7fc      	b.n	8002db4 <main+0x34>
 8002dba:	bf00      	nop
 8002dbc:	20003c7c 	.word	0x20003c7c
 8002dc0:	20003e9c 	.word	0x20003e9c

08002dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <Error_Handler+0x8>
	...

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_MspInit+0x4c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <HAL_MspInit+0x4c>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_MspInit+0x4c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_MspInit+0x4c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_MspInit+0x4c>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e0e:	2007      	movs	r0, #7
 8002e10:	f001 f916 	bl	8004040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <HAL_ADC_MspInit+0xe4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d15b      	bne.n	8002efa <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_ADC_MspInit+0xe8>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4811      	ldr	r0, [pc, #68]	; (8002f0c <HAL_ADC_MspInit+0xec>)
 8002ec6:	f001 f99d 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002eca:	2360      	movs	r3, #96	; 0x60
 8002ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	4619      	mov	r1, r3
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <HAL_ADC_MspInit+0xf0>)
 8002ede:	f001 f991 	bl	8004204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eee:	f107 031c 	add.w	r3, r7, #28
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <HAL_ADC_MspInit+0xf4>)
 8002ef6:	f001 f985 	bl	8004204 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40012000 	.word	0x40012000
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40020400 	.word	0x40020400

08002f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08c      	sub	sp, #48	; 0x30
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_I2C_MspInit+0x168>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d13d      	bne.n	8002fb6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a50      	ldr	r2, [pc, #320]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f5c:	2312      	movs	r3, #18
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f68:	2304      	movs	r3, #4
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	4845      	ldr	r0, [pc, #276]	; (8003088 <HAL_I2C_MspInit+0x170>)
 8002f74:	f001 f946 	bl	8004204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f86:	6413      	str	r3, [r2, #64]	; 0x40
 8002f88:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2100      	movs	r1, #0
 8002f98:	201f      	movs	r0, #31
 8002f9a:	f001 f85c 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f9e:	201f      	movs	r0, #31
 8002fa0:	f001 f875 	bl	800408e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2020      	movs	r0, #32
 8002faa:	f001 f854 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002fae:	2020      	movs	r0, #32
 8002fb0:	f001 f86d 	bl	800408e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002fb4:	e060      	b.n	8003078 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <HAL_I2C_MspInit+0x174>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d15b      	bne.n	8003078 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4a2e      	ldr	r2, [pc, #184]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6313      	str	r3, [r2, #48]	; 0x30
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ffe:	2312      	movs	r3, #18
 8003000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003006:	2303      	movs	r3, #3
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800300a:	2304      	movs	r3, #4
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4619      	mov	r1, r3
 8003014:	481e      	ldr	r0, [pc, #120]	; (8003090 <HAL_I2C_MspInit+0x178>)
 8003016:	f001 f8f5 	bl	8004204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800301a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003020:	2312      	movs	r3, #18
 8003022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800302c:	2304      	movs	r3, #4
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4619      	mov	r1, r3
 8003036:	4817      	ldr	r0, [pc, #92]	; (8003094 <HAL_I2C_MspInit+0x17c>)
 8003038:	f001 f8e4 	bl	8004204 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 8003046:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800304a:	6413      	str	r3, [r2, #64]	; 0x40
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <HAL_I2C_MspInit+0x16c>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	2048      	movs	r0, #72	; 0x48
 800305e:	f000 fffa 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003062:	2048      	movs	r0, #72	; 0x48
 8003064:	f001 f813 	bl	800408e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003068:	2200      	movs	r2, #0
 800306a:	2100      	movs	r1, #0
 800306c:	2049      	movs	r0, #73	; 0x49
 800306e:	f000 fff2 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003072:	2049      	movs	r0, #73	; 0x49
 8003074:	f001 f80b 	bl	800408e <HAL_NVIC_EnableIRQ>
}
 8003078:	bf00      	nop
 800307a:	3730      	adds	r7, #48	; 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40005400 	.word	0x40005400
 8003084:	40023800 	.word	0x40023800
 8003088:	40020400 	.word	0x40020400
 800308c:	40005c00 	.word	0x40005c00
 8003090:	40020800 	.word	0x40020800
 8003094:	40020000 	.word	0x40020000

08003098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a67      	ldr	r2, [pc, #412]	; (8003254 <HAL_UART_MspInit+0x1bc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d134      	bne.n	8003124 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a65      	ldr	r2, [pc, #404]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80030c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030f2:	2303      	movs	r3, #3
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fe:	2303      	movs	r3, #3
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003102:	2308      	movs	r3, #8
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310a:	4619      	mov	r1, r3
 800310c:	4853      	ldr	r0, [pc, #332]	; (800325c <HAL_UART_MspInit+0x1c4>)
 800310e:	f001 f879 	bl	8004204 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	2034      	movs	r0, #52	; 0x34
 8003118:	f000 ff9d 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800311c:	2034      	movs	r0, #52	; 0x34
 800311e:	f000 ffb6 	bl	800408e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003122:	e092      	b.n	800324a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a4d      	ldr	r2, [pc, #308]	; (8003260 <HAL_UART_MspInit+0x1c8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d135      	bne.n	800319a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a48      	ldr	r2, [pc, #288]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 8003138:	f043 0310 	orr.w	r3, r3, #16
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	4b42      	ldr	r3, [pc, #264]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a41      	ldr	r2, [pc, #260]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003178:	2307      	movs	r3, #7
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003180:	4619      	mov	r1, r3
 8003182:	4836      	ldr	r0, [pc, #216]	; (800325c <HAL_UART_MspInit+0x1c4>)
 8003184:	f001 f83e 	bl	8004204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	2025      	movs	r0, #37	; 0x25
 800318e:	f000 ff62 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003192:	2025      	movs	r0, #37	; 0x25
 8003194:	f000 ff7b 	bl	800408e <HAL_NVIC_EnableIRQ>
}
 8003198:	e057      	b.n	800324a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_UART_MspInit+0x1cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d152      	bne.n	800324a <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4a23      	ldr	r2, [pc, #140]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6313      	str	r3, [r2, #48]	; 0x30
 80031d0:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	6313      	str	r3, [r2, #48]	; 0x30
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_UART_MspInit+0x1c0>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031f8:	2320      	movs	r3, #32
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003204:	2303      	movs	r3, #3
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003208:	2307      	movs	r3, #7
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	4815      	ldr	r0, [pc, #84]	; (8003268 <HAL_UART_MspInit+0x1d0>)
 8003214:	f000 fff6 	bl	8004204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800322a:	2307      	movs	r3, #7
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003232:	4619      	mov	r1, r3
 8003234:	480d      	ldr	r0, [pc, #52]	; (800326c <HAL_UART_MspInit+0x1d4>)
 8003236:	f000 ffe5 	bl	8004204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	2027      	movs	r0, #39	; 0x27
 8003240:	f000 ff09 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003244:	2027      	movs	r0, #39	; 0x27
 8003246:	f000 ff22 	bl	800408e <HAL_NVIC_EnableIRQ>
}
 800324a:	bf00      	nop
 800324c:	3738      	adds	r7, #56	; 0x38
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40004c00 	.word	0x40004c00
 8003258:	40023800 	.word	0x40023800
 800325c:	40020000 	.word	0x40020000
 8003260:	40011000 	.word	0x40011000
 8003264:	40004800 	.word	0x40004800
 8003268:	40020800 	.word	0x40020800
 800326c:	40020400 	.word	0x40020400

08003270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <NMI_Handler+0x4>

08003276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800327a:	e7fe      	b.n	800327a <HardFault_Handler+0x4>

0800327c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <MemManage_Handler+0x4>

08003282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <BusFault_Handler+0x4>

08003288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <UsageFault_Handler+0x4>

0800328e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032bc:	f000 f99c 	bl	80035f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <I2C1_EV_IRQHandler+0x10>)
 80032ca:	f001 fdc5 	bl	8004e58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20003fe4 	.word	0x20003fe4

080032d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <I2C1_ER_IRQHandler+0x10>)
 80032de:	f001 ff2c 	bl	800513a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20003fe4 	.word	0x20003fe4

080032ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <USART1_IRQHandler+0x10>)
 80032f2:	f004 fcdf 	bl	8007cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20003c08 	.word	0x20003c08

08003300 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <USART3_IRQHandler+0x10>)
 8003306:	f004 fcd5 	bl	8007cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000408c 	.word	0x2000408c

08003314 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <UART4_IRQHandler+0x10>)
 800331a:	f004 fccb 	bl	8007cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20003f40 	.word	0x20003f40

08003328 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <I2C3_EV_IRQHandler+0x10>)
 800332e:	f001 fd93 	bl	8004e58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20004038 	.word	0x20004038

0800333c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <I2C3_ER_IRQHandler+0x10>)
 8003342:	f001 fefa 	bl	800513a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20004038 	.word	0x20004038

08003350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <_kill>:

int _kill(int pid, int sig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800336a:	f005 fc0f 	bl	8008b8c <__errno>
 800336e:	4603      	mov	r3, r0
 8003370:	2216      	movs	r2, #22
 8003372:	601a      	str	r2, [r3, #0]
  return -1;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_exit>:

void _exit (int status)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffe7 	bl	8003360 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003392:	e7fe      	b.n	8003392 <_exit+0x12>

08003394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e00a      	b.n	80033bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033a6:	f3af 8000 	nop.w
 80033aa:	4601      	mov	r1, r0
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	b2ca      	uxtb	r2, r1
 80033b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3301      	adds	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dbf0      	blt.n	80033a6 <_read+0x12>
  }

  return len;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e009      	b.n	80033f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	60ba      	str	r2, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dbf1      	blt.n	80033e0 <_write+0x12>
  }
  return len;
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_close>:

int _close(int file)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342e:	605a      	str	r2, [r3, #4]
  return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_isatty>:

int _isatty(int file)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003446:	2301      	movs	r3, #1
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	; (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f005 fb74 	bl	8008b8c <__errno>
 80034a4:	4603      	mov	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <_sbrk+0x64>)
 80034c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20020000 	.word	0x20020000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	200040d0 	.word	0x200040d0
 80034d8:	200040e8 	.word	0x200040e8

080034dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003506:	490e      	ldr	r1, [pc, #56]	; (8003540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800350c:	e002      	b.n	8003514 <LoopCopyDataInit>

0800350e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003512:	3304      	adds	r3, #4

08003514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003518:	d3f9      	bcc.n	800350e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800351c:	4c0b      	ldr	r4, [pc, #44]	; (800354c <LoopFillZerobss+0x26>)
  movs r3, #0
 800351e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003520:	e001      	b.n	8003526 <LoopFillZerobss>

08003522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003524:	3204      	adds	r2, #4

08003526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003528:	d3fb      	bcc.n	8003522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800352a:	f7ff ffd7 	bl	80034dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352e:	f005 fb33 	bl	8008b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003532:	f7ff fc25 	bl	8002d80 <main>
  bx  lr    
 8003536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003540:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003544:	0800dcf0 	.word	0x0800dcf0
  ldr r2, =_sbss
 8003548:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800354c:	200040e8 	.word	0x200040e8

08003550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003550:	e7fe      	b.n	8003550 <ADC_IRQHandler>
	...

08003554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_Init+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_Init+0x40>)
 800355e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <HAL_Init+0x40>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <HAL_Init+0x40>)
 800356a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_Init+0x40>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <HAL_Init+0x40>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800357c:	2003      	movs	r0, #3
 800357e:	f000 fd5f 	bl	8004040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003582:	2000      	movs	r0, #0
 8003584:	f000 f808 	bl	8003598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003588:	f7ff fc22 	bl	8002dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023c00 	.word	0x40023c00

08003598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_InitTick+0x54>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_InitTick+0x58>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fd77 	bl	80040aa <HAL_SYSTICK_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00e      	b.n	80035e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b0f      	cmp	r3, #15
 80035ca:	d80a      	bhi.n	80035e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035cc:	2200      	movs	r2, #0
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	f000 fd3f 	bl	8004056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <HAL_InitTick+0x5c>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000008 	.word	0x20000008
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_IncTick+0x20>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_IncTick+0x24>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4413      	add	r3, r2
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_IncTick+0x24>)
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000008 	.word	0x20000008
 800361c:	200040d4 	.word	0x200040d4

08003620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_GetTick+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	200040d4 	.word	0x200040d4

08003638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff ffee 	bl	8003620 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d005      	beq.n	800365e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_Delay+0x44>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800365e:	bf00      	nop
 8003660:	f7ff ffde 	bl	8003620 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	429a      	cmp	r2, r3
 800366e:	d8f7      	bhi.n	8003660 <HAL_Delay+0x28>
  {
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000008 	.word	0x20000008

08003680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e033      	b.n	80036fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff fbbe 	bl	8002e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d118      	bne.n	80036f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036c6:	f023 0302 	bic.w	r3, r3, #2
 80036ca:	f043 0202 	orr.w	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fae8 	bl	8003ca8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
 80036ee:	e001      	b.n	80036f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_ADC_Start+0x1a>
 800371e:	2302      	movs	r3, #2
 8003720:	e0b2      	b.n	8003888 <HAL_ADC_Start+0x180>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d018      	beq.n	800376a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003748:	4b52      	ldr	r3, [pc, #328]	; (8003894 <HAL_ADC_Start+0x18c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_ADC_Start+0x190>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0c9a      	lsrs	r2, r3, #18
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800375c:	e002      	b.n	8003764 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3b01      	subs	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f9      	bne.n	800375e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d17a      	bne.n	800386e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d106      	bne.n	80037c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f023 0206 	bic.w	r2, r3, #6
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
 80037c4:	e002      	b.n	80037cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_ADC_Start+0x194>)
 80037d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d12a      	bne.n	8003844 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <HAL_ADC_Start+0x198>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d015      	beq.n	8003824 <HAL_ADC_Start+0x11c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a29      	ldr	r2, [pc, #164]	; (80038a4 <HAL_ADC_Start+0x19c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d105      	bne.n	800380e <HAL_ADC_Start+0x106>
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <HAL_ADC_Start+0x194>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <HAL_ADC_Start+0x1a0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d136      	bne.n	8003886 <HAL_ADC_Start+0x17e>
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_ADC_Start+0x194>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d130      	bne.n	8003886 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d129      	bne.n	8003886 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	e020      	b.n	8003886 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <HAL_ADC_Start+0x198>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d11b      	bne.n	8003886 <HAL_ADC_Start+0x17e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d114      	bne.n	8003886 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e00b      	b.n	8003886 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0210 	orr.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000000 	.word	0x20000000
 8003898:	431bde83 	.word	0x431bde83
 800389c:	40012300 	.word	0x40012300
 80038a0:	40012000 	.word	0x40012000
 80038a4:	40012100 	.word	0x40012100
 80038a8:	40012200 	.word	0x40012200

080038ac <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_Stop+0x16>
 80038be:	2302      	movs	r3, #2
 80038c0:	e021      	b.n	8003906 <HAL_ADC_Stop+0x5a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392e:	d113      	bne.n	8003958 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d10b      	bne.n	8003958 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e063      	b.n	8003a20 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003958:	f7ff fe62 	bl	8003620 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800395e:	e021      	b.n	80039a4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d01d      	beq.n	80039a4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_ADC_PollForConversion+0x6c>
 800396e:	f7ff fe57 	bl	8003620 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d212      	bcs.n	80039a4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b02      	cmp	r3, #2
 800398a:	d00b      	beq.n	80039a4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e03d      	b.n	8003a20 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d1d6      	bne.n	8003960 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f06f 0212 	mvn.w	r2, #18
 80039ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d123      	bne.n	8003a1e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11f      	bne.n	8003a1e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d111      	bne.n	8003a1e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e113      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x244>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d925      	bls.n	8003abc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68d9      	ldr	r1, [r3, #12]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	3b1e      	subs	r3, #30
 8003a86:	2207      	movs	r2, #7
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	400a      	ands	r2, r1
 8003a94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68d9      	ldr	r1, [r3, #12]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4403      	add	r3, r0
 8003aae:	3b1e      	subs	r3, #30
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e022      	b.n	8003b02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6919      	ldr	r1, [r3, #16]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4618      	mov	r0, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4403      	add	r3, r0
 8003af8:	409a      	lsls	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d824      	bhi.n	8003b54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	3b05      	subs	r3, #5
 8003b1c:	221f      	movs	r2, #31
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	400a      	ands	r2, r1
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4618      	mov	r0, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	3b05      	subs	r3, #5
 8003b46:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34
 8003b52:	e04c      	b.n	8003bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b0c      	cmp	r3, #12
 8003b5a:	d824      	bhi.n	8003ba6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3b23      	subs	r3, #35	; 0x23
 8003b6e:	221f      	movs	r2, #31
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43da      	mvns	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	3b23      	subs	r3, #35	; 0x23
 8003b98:	fa00 f203 	lsl.w	r2, r0, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba4:	e023      	b.n	8003bee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b41      	subs	r3, #65	; 0x41
 8003bb8:	221f      	movs	r2, #31
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	3b41      	subs	r3, #65	; 0x41
 8003be2:	fa00 f203 	lsl.w	r2, r0, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_ADC_ConfigChannel+0x250>)
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a28      	ldr	r2, [pc, #160]	; (8003c98 <HAL_ADC_ConfigChannel+0x254>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d10f      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1d8>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b12      	cmp	r3, #18
 8003c02:	d10b      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_ADC_ConfigChannel+0x254>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d12b      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x23a>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_ADC_ConfigChannel+0x258>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0x1f4>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b11      	cmp	r3, #17
 8003c36:	d122      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <HAL_ADC_ConfigChannel+0x258>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d111      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_ADC_ConfigChannel+0x25c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <HAL_ADC_ConfigChannel+0x260>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	0c9a      	lsrs	r2, r3, #18
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c70:	e002      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f9      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40012300 	.word	0x40012300
 8003c98:	40012000 	.word	0x40012000
 8003c9c:	10000012 	.word	0x10000012
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	431bde83 	.word	0x431bde83

08003ca8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cb0:	4b79      	ldr	r3, [pc, #484]	; (8003e98 <ADC_Init+0x1f0>)
 8003cb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	021a      	lsls	r2, r3, #8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <ADC_Init+0x1f4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d022      	beq.n	8003d86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6899      	ldr	r1, [r3, #8]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	e00f      	b.n	8003da6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0202 	bic.w	r2, r2, #2
 8003db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6899      	ldr	r1, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7e1b      	ldrb	r3, [r3, #24]
 8003dc0:	005a      	lsls	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01b      	beq.n	8003e0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	035a      	lsls	r2, r3, #13
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	e007      	b.n	8003e1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	051a      	lsls	r2, r3, #20
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6899      	ldr	r1, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e5e:	025a      	lsls	r2, r3, #9
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6899      	ldr	r1, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	029a      	lsls	r2, r3, #10
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40012300 	.word	0x40012300
 8003e9c:	0f000001 	.word	0x0f000001

08003ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ed2:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	60d3      	str	r3, [r2, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <__NVIC_GetPriorityGrouping+0x18>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	f003 0307 	and.w	r3, r3, #7
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	db0b      	blt.n	8003f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	4907      	ldr	r1, [pc, #28]	; (8003f3c <__NVIC_EnableIRQ+0x38>)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2001      	movs	r0, #1
 8003f26:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800400c:	d301      	bcc.n	8004012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <SysTick_Config+0x40>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401a:	210f      	movs	r1, #15
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f7ff ff8e 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <SysTick_Config+0x40>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <SysTick_Config+0x40>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff29 	bl	8003ea0 <__NVIC_SetPriorityGrouping>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004068:	f7ff ff3e 	bl	8003ee8 <__NVIC_GetPriorityGrouping>
 800406c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7ff ff8e 	bl	8003f94 <NVIC_EncodePriority>
 8004078:	4602      	mov	r2, r0
 800407a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff5d 	bl	8003f40 <__NVIC_SetPriority>
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	4603      	mov	r3, r0
 8004096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ff31 	bl	8003f04 <__NVIC_EnableIRQ>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff ffa2 	bl	8003ffc <SysTick_Config>
 80040b8:	4603      	mov	r3, r0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7ff faa6 	bl	8003620 <HAL_GetTick>
 80040d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d008      	beq.n	80040f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e052      	b.n	800419a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0216 	bic.w	r2, r2, #22
 8004102:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004112:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d103      	bne.n	8004124 <HAL_DMA_Abort+0x62>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0208 	bic.w	r2, r2, #8
 8004132:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004144:	e013      	b.n	800416e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004146:	f7ff fa6b 	bl	8003620 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b05      	cmp	r3, #5
 8004152:	d90c      	bls.n	800416e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2203      	movs	r2, #3
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e015      	b.n	800419a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e4      	bne.n	8004146 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	223f      	movs	r2, #63	; 0x3f
 8004182:	409a      	lsls	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d004      	beq.n	80041c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e00c      	b.n	80041da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2205      	movs	r2, #5
 80041c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f4:	b2db      	uxtb	r3, r3
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e165      	b.n	80044ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004220:	2201      	movs	r2, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4013      	ands	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	f040 8154 	bne.w	80044e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d005      	beq.n	8004256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004252:	2b02      	cmp	r3, #2
 8004254:	d130      	bne.n	80042b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2203      	movs	r2, #3
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800428c:	2201      	movs	r2, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 0201 	and.w	r2, r3, #1
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d017      	beq.n	80042f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2203      	movs	r2, #3
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d123      	bne.n	8004348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	08da      	lsrs	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3208      	adds	r2, #8
 8004308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	220f      	movs	r2, #15
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	08da      	lsrs	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3208      	adds	r2, #8
 8004342:	69b9      	ldr	r1, [r7, #24]
 8004344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	2203      	movs	r2, #3
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0203 	and.w	r2, r3, #3
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80ae 	beq.w	80044e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	4b5d      	ldr	r3, [pc, #372]	; (8004504 <HAL_GPIO_Init+0x300>)
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	4a5c      	ldr	r2, [pc, #368]	; (8004504 <HAL_GPIO_Init+0x300>)
 8004394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004398:	6453      	str	r3, [r2, #68]	; 0x44
 800439a:	4b5a      	ldr	r3, [pc, #360]	; (8004504 <HAL_GPIO_Init+0x300>)
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043a6:	4a58      	ldr	r2, [pc, #352]	; (8004508 <HAL_GPIO_Init+0x304>)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	220f      	movs	r2, #15
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a4f      	ldr	r2, [pc, #316]	; (800450c <HAL_GPIO_Init+0x308>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d025      	beq.n	800441e <HAL_GPIO_Init+0x21a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a4e      	ldr	r2, [pc, #312]	; (8004510 <HAL_GPIO_Init+0x30c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01f      	beq.n	800441a <HAL_GPIO_Init+0x216>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4d      	ldr	r2, [pc, #308]	; (8004514 <HAL_GPIO_Init+0x310>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d019      	beq.n	8004416 <HAL_GPIO_Init+0x212>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a4c      	ldr	r2, [pc, #304]	; (8004518 <HAL_GPIO_Init+0x314>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_GPIO_Init+0x20e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	; (800451c <HAL_GPIO_Init+0x318>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00d      	beq.n	800440e <HAL_GPIO_Init+0x20a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a4a      	ldr	r2, [pc, #296]	; (8004520 <HAL_GPIO_Init+0x31c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <HAL_GPIO_Init+0x206>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a49      	ldr	r2, [pc, #292]	; (8004524 <HAL_GPIO_Init+0x320>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_GPIO_Init+0x202>
 8004402:	2306      	movs	r3, #6
 8004404:	e00c      	b.n	8004420 <HAL_GPIO_Init+0x21c>
 8004406:	2307      	movs	r3, #7
 8004408:	e00a      	b.n	8004420 <HAL_GPIO_Init+0x21c>
 800440a:	2305      	movs	r3, #5
 800440c:	e008      	b.n	8004420 <HAL_GPIO_Init+0x21c>
 800440e:	2304      	movs	r3, #4
 8004410:	e006      	b.n	8004420 <HAL_GPIO_Init+0x21c>
 8004412:	2303      	movs	r3, #3
 8004414:	e004      	b.n	8004420 <HAL_GPIO_Init+0x21c>
 8004416:	2302      	movs	r3, #2
 8004418:	e002      	b.n	8004420 <HAL_GPIO_Init+0x21c>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_GPIO_Init+0x21c>
 800441e:	2300      	movs	r3, #0
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	f002 0203 	and.w	r2, r2, #3
 8004426:	0092      	lsls	r2, r2, #2
 8004428:	4093      	lsls	r3, r2
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004430:	4935      	ldr	r1, [pc, #212]	; (8004508 <HAL_GPIO_Init+0x304>)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	3302      	adds	r3, #2
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800443e:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <HAL_GPIO_Init+0x324>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004462:	4a31      	ldr	r2, [pc, #196]	; (8004528 <HAL_GPIO_Init+0x324>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004468:	4b2f      	ldr	r3, [pc, #188]	; (8004528 <HAL_GPIO_Init+0x324>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_GPIO_Init+0x324>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004492:	4b25      	ldr	r3, [pc, #148]	; (8004528 <HAL_GPIO_Init+0x324>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044b6:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_GPIO_Init+0x324>)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044bc:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <HAL_GPIO_Init+0x324>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <HAL_GPIO_Init+0x324>)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3301      	adds	r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b0f      	cmp	r3, #15
 80044f0:	f67f ae96 	bls.w	8004220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	40013800 	.word	0x40013800
 800450c:	40020000 	.word	0x40020000
 8004510:	40020400 	.word	0x40020400
 8004514:	40020800 	.word	0x40020800
 8004518:	40020c00 	.word	0x40020c00
 800451c:	40021000 	.word	0x40021000
 8004520:	40021400 	.word	0x40021400
 8004524:	40021800 	.word	0x40021800
 8004528:	40013c00 	.word	0x40013c00

0800452c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	887b      	ldrh	r3, [r7, #2]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e001      	b.n	800454e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
 8004568:	4613      	mov	r3, r2
 800456a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800456c:	787b      	ldrb	r3, [r7, #1]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004572:	887a      	ldrh	r2, [r7, #2]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004578:	e003      	b.n	8004582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800457a:	887b      	ldrh	r3, [r7, #2]
 800457c:	041a      	lsls	r2, r3, #16
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	619a      	str	r2, [r3, #24]
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e12b      	b.n	80047fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fe fcae 	bl	8002f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2224      	movs	r2, #36	; 0x24
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045f4:	f002 fd58 	bl	80070a8 <HAL_RCC_GetPCLK1Freq>
 80045f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4a81      	ldr	r2, [pc, #516]	; (8004804 <HAL_I2C_Init+0x274>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d807      	bhi.n	8004614 <HAL_I2C_Init+0x84>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a80      	ldr	r2, [pc, #512]	; (8004808 <HAL_I2C_Init+0x278>)
 8004608:	4293      	cmp	r3, r2
 800460a:	bf94      	ite	ls
 800460c:	2301      	movls	r3, #1
 800460e:	2300      	movhi	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e006      	b.n	8004622 <HAL_I2C_Init+0x92>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a7d      	ldr	r2, [pc, #500]	; (800480c <HAL_I2C_Init+0x27c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	bf94      	ite	ls
 800461c:	2301      	movls	r3, #1
 800461e:	2300      	movhi	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e0e7      	b.n	80047fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a78      	ldr	r2, [pc, #480]	; (8004810 <HAL_I2C_Init+0x280>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0c9b      	lsrs	r3, r3, #18
 8004634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a6a      	ldr	r2, [pc, #424]	; (8004804 <HAL_I2C_Init+0x274>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d802      	bhi.n	8004664 <HAL_I2C_Init+0xd4>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3301      	adds	r3, #1
 8004662:	e009      	b.n	8004678 <HAL_I2C_Init+0xe8>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	4a69      	ldr	r2, [pc, #420]	; (8004814 <HAL_I2C_Init+0x284>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	099b      	lsrs	r3, r3, #6
 8004676:	3301      	adds	r3, #1
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	430b      	orrs	r3, r1
 800467e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800468a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	495c      	ldr	r1, [pc, #368]	; (8004804 <HAL_I2C_Init+0x274>)
 8004694:	428b      	cmp	r3, r1
 8004696:	d819      	bhi.n	80046cc <HAL_I2C_Init+0x13c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e59      	subs	r1, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046ac:	400b      	ands	r3, r1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_I2C_Init+0x138>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1e59      	subs	r1, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c0:	3301      	adds	r3, #1
 80046c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c6:	e051      	b.n	800476c <HAL_I2C_Init+0x1dc>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e04f      	b.n	800476c <HAL_I2C_Init+0x1dc>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d111      	bne.n	80046f8 <HAL_I2C_Init+0x168>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1e58      	subs	r0, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e012      	b.n	800471e <HAL_I2C_Init+0x18e>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1e58      	subs	r0, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	0099      	lsls	r1, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	fbb0 f3f3 	udiv	r3, r0, r3
 800470e:	3301      	adds	r3, #1
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Init+0x196>
 8004722:	2301      	movs	r3, #1
 8004724:	e022      	b.n	800476c <HAL_I2C_Init+0x1dc>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10e      	bne.n	800474c <HAL_I2C_Init+0x1bc>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1e58      	subs	r0, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	440b      	add	r3, r1
 800473c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	e00f      	b.n	800476c <HAL_I2C_Init+0x1dc>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1e58      	subs	r0, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	0099      	lsls	r1, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004762:	3301      	adds	r3, #1
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	6809      	ldr	r1, [r1, #0]
 8004770:	4313      	orrs	r3, r2
 8004772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800479a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6911      	ldr	r1, [r2, #16]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68d2      	ldr	r2, [r2, #12]
 80047a6:	4311      	orrs	r1, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	000186a0 	.word	0x000186a0
 8004808:	001e847f 	.word	0x001e847f
 800480c:	003d08ff 	.word	0x003d08ff
 8004810:	431bde83 	.word	0x431bde83
 8004814:	10624dd3 	.word	0x10624dd3

08004818 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	460b      	mov	r3, r1
 800482c:	813b      	strh	r3, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004832:	f7fe fef5 	bl	8003620 <HAL_GetTick>
 8004836:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b20      	cmp	r3, #32
 8004842:	f040 80d9 	bne.w	80049f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2319      	movs	r3, #25
 800484c:	2201      	movs	r2, #1
 800484e:	496d      	ldr	r1, [pc, #436]	; (8004a04 <HAL_I2C_Mem_Write+0x1ec>)
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f002 f90d 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	e0cc      	b.n	80049fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_I2C_Mem_Write+0x56>
 800486a:	2302      	movs	r3, #2
 800486c:	e0c5      	b.n	80049fa <HAL_I2C_Mem_Write+0x1e2>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d007      	beq.n	8004894 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2221      	movs	r2, #33	; 0x21
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2240      	movs	r2, #64	; 0x40
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a3a      	ldr	r2, [r7, #32]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a4d      	ldr	r2, [pc, #308]	; (8004a08 <HAL_I2C_Mem_Write+0x1f0>)
 80048d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048d6:	88f8      	ldrh	r0, [r7, #6]
 80048d8:	893a      	ldrh	r2, [r7, #8]
 80048da:	8979      	ldrh	r1, [r7, #10]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4603      	mov	r3, r0
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f001 fe9c 	bl	8006624 <I2C_RequestMemoryWrite>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d052      	beq.n	8004998 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e081      	b.n	80049fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f002 f98e 	bl	8006c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b04      	cmp	r3, #4
 800490c:	d107      	bne.n	800491e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e06b      	b.n	80049fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b04      	cmp	r3, #4
 800495e:	d11b      	bne.n	8004998 <HAL_I2C_Mem_Write+0x180>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d017      	beq.n	8004998 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1aa      	bne.n	80048f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f002 f97a 	bl	8006c9e <I2C_WaitOnBTFFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d107      	bne.n	80049c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e016      	b.n	80049fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	00100002 	.word	0x00100002
 8004a08:	ffff0000 	.word	0xffff0000

08004a0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	817b      	strh	r3, [r7, #10]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	813b      	strh	r3, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a26:	f7fe fdfb 	bl	8003620 <HAL_GetTick>
 8004a2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	f040 8208 	bne.w	8004e4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	2319      	movs	r3, #25
 8004a40:	2201      	movs	r2, #1
 8004a42:	497b      	ldr	r1, [pc, #492]	; (8004c30 <HAL_I2C_Mem_Read+0x224>)
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f002 f813 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
 8004a52:	e1fb      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_I2C_Mem_Read+0x56>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e1f4      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d007      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2222      	movs	r2, #34	; 0x22
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2240      	movs	r2, #64	; 0x40
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a5b      	ldr	r2, [pc, #364]	; (8004c34 <HAL_I2C_Mem_Read+0x228>)
 8004ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aca:	88f8      	ldrh	r0, [r7, #6]
 8004acc:	893a      	ldrh	r2, [r7, #8]
 8004ace:	8979      	ldrh	r1, [r7, #10]
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4603      	mov	r3, r0
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f001 fe38 	bl	8006750 <I2C_RequestMemoryRead>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e1b0      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d113      	bne.n	8004b1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004af2:	2300      	movs	r3, #0
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e184      	b.n	8004e24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d11b      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e164      	b.n	8004e24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d11b      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b82:	2300      	movs	r3, #0
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	e144      	b.n	8004e24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bb0:	e138      	b.n	8004e24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	f200 80f1 	bhi.w	8004d9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d123      	bne.n	8004c0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f002 f8db 	bl	8006d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e139      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c0a:	e10b      	b.n	8004e24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d14e      	bne.n	8004cb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4906      	ldr	r1, [pc, #24]	; (8004c38 <HAL_I2C_Mem_Read+0x22c>)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f001 ff26 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e10e      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
 8004c2e:	bf00      	nop
 8004c30:	00100002 	.word	0x00100002
 8004c34:	ffff0000 	.word	0xffff0000
 8004c38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb0:	e0b8      	b.n	8004e24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2200      	movs	r2, #0
 8004cba:	4966      	ldr	r1, [pc, #408]	; (8004e54 <HAL_I2C_Mem_Read+0x448>)
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f001 fed7 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0bf      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2200      	movs	r2, #0
 8004d16:	494f      	ldr	r1, [pc, #316]	; (8004e54 <HAL_I2C_Mem_Read+0x448>)
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f001 fea9 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e091      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d9c:	e042      	b.n	8004e24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f001 ffee 	bl	8006d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e04c      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d118      	bne.n	8004e24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f aec2 	bne.w	8004bb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e000      	b.n	8004e4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3728      	adds	r7, #40	; 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00010004 	.word	0x00010004

08004e58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d003      	beq.n	8004e90 <HAL_I2C_EV_IRQHandler+0x38>
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	f040 80c1 	bne.w	8005012 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10d      	bne.n	8004ec6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004eb0:	d003      	beq.n	8004eba <HAL_I2C_EV_IRQHandler+0x62>
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004eb8:	d101      	bne.n	8004ebe <HAL_I2C_EV_IRQHandler+0x66>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_I2C_EV_IRQHandler+0x68>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f000 8132 	beq.w	800512a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_I2C_EV_IRQHandler+0x92>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	0a5b      	lsrs	r3, r3, #9
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d006      	beq.n	8004eea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 ffd6 	bl	8006e8e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd83 	bl	80059ee <I2C_Master_SB>
 8004ee8:	e092      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0xb2>
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	0a5b      	lsrs	r3, r3, #9
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fdf9 	bl	8005afa <I2C_Master_ADD10>
 8004f08:	e082      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0xd2>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	0a5b      	lsrs	r3, r3, #9
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fe13 	bl	8005b4e <I2C_Master_ADDR>
 8004f28:	e072      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	089b      	lsrs	r3, r3, #2
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03b      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f44:	f000 80f3 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	09db      	lsrs	r3, r3, #7
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00f      	beq.n	8004f74 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0a9b      	lsrs	r3, r3, #10
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9f3 	bl	8005358 <I2C_MasterTransmit_TXE>
 8004f72:	e04d      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	089b      	lsrs	r3, r3, #2
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80d6 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	0a5b      	lsrs	r3, r3, #9
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80cf 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	2b21      	cmp	r3, #33	; 0x21
 8004f94:	d103      	bne.n	8004f9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa7a 	bl	8005490 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f9c:	e0c7      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	f040 80c4 	bne.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fae8 	bl	800557c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fac:	e0bf      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbc:	f000 80b7 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00f      	beq.n	8004fec <HAL_I2C_EV_IRQHandler+0x194>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	0a9b      	lsrs	r3, r3, #10
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <HAL_I2C_EV_IRQHandler+0x194>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fb5d 	bl	80056a4 <I2C_MasterReceive_RXNE>
 8004fea:	e011      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 809a 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	0a5b      	lsrs	r3, r3, #9
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8093 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fc06 	bl	800581a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800500e:	e08e      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005010:	e08d      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e007      	b.n	8005034 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d012      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0x20e>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	0a5b      	lsrs	r3, r3, #9
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00c      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 ffc4 	bl	8005fec <I2C_Slave_ADDR>
 8005064:	e066      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_I2C_EV_IRQHandler+0x22e>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	0a5b      	lsrs	r3, r3, #9
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fffe 	bl	8006080 <I2C_Slave_STOPF>
 8005084:	e056      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005086:	7bbb      	ldrb	r3, [r7, #14]
 8005088:	2b21      	cmp	r3, #33	; 0x21
 800508a:	d002      	beq.n	8005092 <HAL_I2C_EV_IRQHandler+0x23a>
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	2b29      	cmp	r3, #41	; 0x29
 8005090:	d125      	bne.n	80050de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00f      	beq.n	80050be <HAL_I2C_EV_IRQHandler+0x266>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	0a9b      	lsrs	r3, r3, #10
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_I2C_EV_IRQHandler+0x266>
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 feda 	bl	8005e70 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050bc:	e039      	b.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d033      	beq.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	0a5b      	lsrs	r3, r3, #9
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02d      	beq.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 ff07 	bl	8005eea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050dc:	e029      	b.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	099b      	lsrs	r3, r3, #6
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00f      	beq.n	800510a <HAL_I2C_EV_IRQHandler+0x2b2>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	0a9b      	lsrs	r3, r3, #10
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_I2C_EV_IRQHandler+0x2b2>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	089b      	lsrs	r3, r3, #2
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 ff12 	bl	8005f2c <I2C_SlaveReceive_RXNE>
 8005108:	e014      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00e      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	0a5b      	lsrs	r3, r3, #9
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 ff40 	bl	8005fa8 <I2C_SlaveReceive_BTF>
 8005128:	e004      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800512a:	bf00      	nop
 800512c:	e002      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800512e:	bf00      	nop
 8005130:	e000      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005132:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b08a      	sub	sp, #40	; 0x28
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00e      	beq.n	8005188 <HAL_I2C_ER_IRQHandler+0x4e>
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005186:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	0a5b      	lsrs	r3, r3, #9
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00e      	beq.n	80051b2 <HAL_I2C_ER_IRQHandler+0x78>
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80051b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	0a9b      	lsrs	r3, r3, #10
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03f      	beq.n	800523e <HAL_I2C_ER_IRQHandler+0x104>
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d039      	beq.n	800523e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80051ca:	7efb      	ldrb	r3, [r7, #27]
 80051cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80051e4:	7ebb      	ldrb	r3, [r7, #26]
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d112      	bne.n	8005210 <HAL_I2C_ER_IRQHandler+0xd6>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10f      	bne.n	8005210 <HAL_I2C_ER_IRQHandler+0xd6>
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	2b21      	cmp	r3, #33	; 0x21
 80051f4:	d008      	beq.n	8005208 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	2b29      	cmp	r3, #41	; 0x29
 80051fa:	d005      	beq.n	8005208 <HAL_I2C_ER_IRQHandler+0xce>
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	2b28      	cmp	r3, #40	; 0x28
 8005200:	d106      	bne.n	8005210 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b21      	cmp	r3, #33	; 0x21
 8005206:	d103      	bne.n	8005210 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 f869 	bl	80062e0 <I2C_Slave_AF>
 800520e:	e016      	b.n	800523e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005218:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005222:	7efb      	ldrb	r3, [r7, #27]
 8005224:	2b10      	cmp	r3, #16
 8005226:	d002      	beq.n	800522e <HAL_I2C_ER_IRQHandler+0xf4>
 8005228:	7efb      	ldrb	r3, [r7, #27]
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	d107      	bne.n	800523e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	0adb      	lsrs	r3, r3, #11
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <HAL_I2C_ER_IRQHandler+0x12e>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	0a1b      	lsrs	r3, r3, #8
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	f043 0308 	orr.w	r3, r3, #8
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005266:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 f8a0 	bl	80063c0 <I2C_ITError>
  }
}
 8005280:	bf00      	nop
 8005282:	3728      	adds	r7, #40	; 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
 80052e4:	4613      	mov	r3, r2
 80052e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005366:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800536e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	d150      	bne.n	8005420 <I2C_MasterTransmit_TXE+0xc8>
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	2b21      	cmp	r3, #33	; 0x21
 8005382:	d14d      	bne.n	8005420 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b08      	cmp	r3, #8
 8005388:	d01d      	beq.n	80053c6 <I2C_MasterTransmit_TXE+0x6e>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b20      	cmp	r3, #32
 800538e:	d01a      	beq.n	80053c6 <I2C_MasterTransmit_TXE+0x6e>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005396:	d016      	beq.n	80053c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2211      	movs	r2, #17
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff62 	bl	8005288 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053c4:	e060      	b.n	8005488 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b40      	cmp	r3, #64	; 0x40
 80053fe:	d107      	bne.n	8005410 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff7d 	bl	8005308 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800540e:	e03b      	b.n	8005488 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff ff35 	bl	8005288 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800541e:	e033      	b.n	8005488 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b21      	cmp	r3, #33	; 0x21
 8005424:	d005      	beq.n	8005432 <I2C_MasterTransmit_TXE+0xda>
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d12d      	bne.n	8005488 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b22      	cmp	r3, #34	; 0x22
 8005430:	d12a      	bne.n	8005488 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d108      	bne.n	800544e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800544c:	e01c      	b.n	8005488 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b40      	cmp	r3, #64	; 0x40
 8005458:	d103      	bne.n	8005462 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f88e 	bl	800557c <I2C_MemoryTransmit_TXE_BTF>
}
 8005460:	e012      	b.n	8005488 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005486:	e7ff      	b.n	8005488 <I2C_MasterTransmit_TXE+0x130>
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b21      	cmp	r3, #33	; 0x21
 80054a8:	d164      	bne.n	8005574 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d012      	beq.n	80054da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80054d8:	e04c      	b.n	8005574 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d01d      	beq.n	800551c <I2C_MasterTransmit_BTF+0x8c>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d01a      	beq.n	800551c <I2C_MasterTransmit_BTF+0x8c>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ec:	d016      	beq.n	800551c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2211      	movs	r2, #17
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff feb7 	bl	8005288 <HAL_I2C_MasterTxCpltCallback>
}
 800551a:	e02b      	b.n	8005574 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800552a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d107      	bne.n	8005566 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff fed2 	bl	8005308 <HAL_I2C_MemTxCpltCallback>
}
 8005564:	e006      	b.n	8005574 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fe8a 	bl	8005288 <HAL_I2C_MasterTxCpltCallback>
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11d      	bne.n	80055d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10b      	bne.n	80055b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ac:	1c9a      	adds	r2, r3, #2
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80055b2:	e073      	b.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	121b      	asrs	r3, r3, #8
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055ce:	e065      	b.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10b      	bne.n	80055f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055ee:	e055      	b.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d151      	bne.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b22      	cmp	r3, #34	; 0x22
 80055fc:	d10d      	bne.n	800561a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005618:	e040      	b.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d015      	beq.n	8005650 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b21      	cmp	r3, #33	; 0x21
 8005628:	d112      	bne.n	8005650 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800564e:	e025      	b.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d120      	bne.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b21      	cmp	r3, #33	; 0x21
 800565e:	d11d      	bne.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800566e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fe36 	bl	8005308 <HAL_I2C_MemTxCpltCallback>
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b22      	cmp	r3, #34	; 0x22
 80056b6:	f040 80ac 	bne.w	8005812 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d921      	bls.n	800570c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	f040 808c 	bne.w	8005812 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005708:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800570a:	e082      	b.n	8005812 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	2b02      	cmp	r3, #2
 8005712:	d075      	beq.n	8005800 <I2C_MasterReceive_RXNE+0x15c>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d002      	beq.n	8005720 <I2C_MasterReceive_RXNE+0x7c>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d16f      	bne.n	8005800 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 fafd 	bl	8006d20 <I2C_WaitOnSTOPRequestThroughIT>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d142      	bne.n	80057b2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800574a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d10a      	bne.n	800579c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fdc1 	bl	800531c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800579a:	e03a      	b.n	8005812 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2212      	movs	r2, #18
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fd76 	bl	800529c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057b0:	e02f      	b.n	8005812 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fd99 	bl	8005330 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057fe:	e008      	b.n	8005812 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	605a      	str	r2, [r3, #4]
}
 8005810:	e7ff      	b.n	8005812 <I2C_MasterReceive_RXNE+0x16e>
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b04      	cmp	r3, #4
 8005830:	d11b      	bne.n	800586a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005840:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005868:	e0bd      	b.n	80059e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b03      	cmp	r3, #3
 8005872:	d129      	bne.n	80058c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005882:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d00a      	beq.n	80058a0 <I2C_MasterReceive_BTF+0x86>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d007      	beq.n	80058a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058c6:	e08e      	b.n	80059e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d176      	bne.n	80059c0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d002      	beq.n	80058de <I2C_MasterReceive_BTF+0xc4>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d108      	bne.n	80058f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e019      	b.n	8005924 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d002      	beq.n	80058fc <I2C_MasterReceive_BTF+0xe2>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d108      	bne.n	800590e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e00a      	b.n	8005924 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b10      	cmp	r3, #16
 8005912:	d007      	beq.n	8005924 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005922:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800597e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d10a      	bne.n	80059aa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fcba 	bl	800531c <HAL_I2C_MemRxCpltCallback>
}
 80059a8:	e01d      	b.n	80059e6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2212      	movs	r2, #18
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff fc6f 	bl	800529c <HAL_I2C_MasterRxCpltCallback>
}
 80059be:	e012      	b.n	80059e6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d117      	bne.n	8005a32 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a1a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005a1c:	e067      	b.n	8005aee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	611a      	str	r2, [r3, #16]
}
 8005a30:	e05d      	b.n	8005aee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a3a:	d133      	bne.n	8005aa4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b21      	cmp	r3, #33	; 0x21
 8005a46:	d109      	bne.n	8005a5c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a58:	611a      	str	r2, [r3, #16]
 8005a5a:	e008      	b.n	8005a6e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d004      	beq.n	8005a80 <I2C_Master_SB+0x92>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d108      	bne.n	8005a92 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d032      	beq.n	8005aee <I2C_Master_SB+0x100>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d02d      	beq.n	8005aee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa0:	605a      	str	r2, [r3, #4]
}
 8005aa2:	e024      	b.n	8005aee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10e      	bne.n	8005aca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	11db      	asrs	r3, r3, #7
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f003 0306 	and.w	r3, r3, #6
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f063 030f 	orn	r3, r3, #15
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	611a      	str	r2, [r3, #16]
}
 8005ac8:	e011      	b.n	8005aee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d10d      	bne.n	8005aee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	11db      	asrs	r3, r3, #7
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0306 	and.w	r3, r3, #6
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f063 030e 	orn	r3, r3, #14
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	611a      	str	r2, [r3, #16]
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <I2C_Master_ADD10+0x26>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00c      	beq.n	8005b42 <I2C_Master_ADD10+0x48>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b40:	605a      	str	r2, [r3, #4]
  }
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b091      	sub	sp, #68	; 0x44
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b22      	cmp	r3, #34	; 0x22
 8005b76:	f040 8169 	bne.w	8005e4c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10f      	bne.n	8005ba2 <I2C_Master_ADDR+0x54>
 8005b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d10b      	bne.n	8005ba2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	e160      	b.n	8005e64 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11d      	bne.n	8005be6 <I2C_Master_ADDR+0x98>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bb2:	d118      	bne.n	8005be6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	651a      	str	r2, [r3, #80]	; 0x50
 8005be4:	e13e      	b.n	8005e64 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d113      	bne.n	8005c18 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e115      	b.n	8005e44 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	f040 808a 	bne.w	8005d38 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c2a:	d137      	bne.n	8005c9c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4a:	d113      	bne.n	8005c74 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	e0e7      	b.n	8005e44 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c74:	2300      	movs	r3, #0
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	623b      	str	r3, [r7, #32]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	623b      	str	r3, [r7, #32]
 8005c88:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e0d3      	b.n	8005e44 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d02e      	beq.n	8005d00 <I2C_Master_ADDR+0x1b2>
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d02b      	beq.n	8005d00 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	2b12      	cmp	r3, #18
 8005cac:	d102      	bne.n	8005cb4 <I2C_Master_ADDR+0x166>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d125      	bne.n	8005d00 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d00e      	beq.n	8005cd8 <I2C_Master_ADDR+0x18a>
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d00b      	beq.n	8005cd8 <I2C_Master_ADDR+0x18a>
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d008      	beq.n	8005cd8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e007      	b.n	8005ce8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ce6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	61fb      	str	r3, [r7, #28]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	e0a1      	b.n	8005e44 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e085      	b.n	8005e44 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d14d      	bne.n	8005dde <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d016      	beq.n	8005d76 <I2C_Master_ADDR+0x228>
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d013      	beq.n	8005d76 <I2C_Master_ADDR+0x228>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d010      	beq.n	8005d76 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d62:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e007      	b.n	8005d86 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d84:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d94:	d117      	bne.n	8005dc6 <I2C_Master_ADDR+0x278>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d9c:	d00b      	beq.n	8005db6 <I2C_Master_ADDR+0x268>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d008      	beq.n	8005db6 <I2C_Master_ADDR+0x268>
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d005      	beq.n	8005db6 <I2C_Master_ADDR+0x268>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d002      	beq.n	8005db6 <I2C_Master_ADDR+0x268>
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d107      	bne.n	8005dc6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dc4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	e032      	b.n	8005e44 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfc:	d117      	bne.n	8005e2e <I2C_Master_ADDR+0x2e0>
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e04:	d00b      	beq.n	8005e1e <I2C_Master_ADDR+0x2d0>
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d008      	beq.n	8005e1e <I2C_Master_ADDR+0x2d0>
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d005      	beq.n	8005e1e <I2C_Master_ADDR+0x2d0>
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d002      	beq.n	8005e1e <I2C_Master_ADDR+0x2d0>
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d107      	bne.n	8005e2e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005e4a:	e00b      	b.n	8005e64 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
}
 8005e62:	e7ff      	b.n	8005e64 <I2C_Master_ADDR+0x316>
 8005e64:	bf00      	nop
 8005e66:	3744      	adds	r7, #68	; 0x44
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d02b      	beq.n	8005ee2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	781a      	ldrb	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d114      	bne.n	8005ee2 <I2C_SlaveTransmit_TXE+0x72>
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	2b29      	cmp	r3, #41	; 0x29
 8005ebc:	d111      	bne.n	8005ee2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ecc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2221      	movs	r2, #33	; 0x21
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2228      	movs	r2, #40	; 0x28
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff f9e7 	bl	80052b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d02c      	beq.n	8005fa0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d114      	bne.n	8005fa0 <I2C_SlaveReceive_RXNE+0x74>
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7a:	d111      	bne.n	8005fa0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2222      	movs	r2, #34	; 0x22
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2228      	movs	r2, #40	; 0x28
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff f992 	bl	80052c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006006:	2b28      	cmp	r3, #40	; 0x28
 8006008:	d127      	bne.n	800605a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006018:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006026:	2301      	movs	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	09db      	lsrs	r3, r3, #7
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	81bb      	strh	r3, [r7, #12]
 800603c:	e002      	b.n	8006044 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800604c:	89ba      	ldrh	r2, [r7, #12]
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff f940 	bl	80052d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006058:	e00e      	b.n	8006078 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800609e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d172      	bne.n	80061c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b22      	cmp	r3, #34	; 0x22
 80060e2:	d002      	beq.n	80060ea <I2C_Slave_STOPF+0x6a>
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2b2a      	cmp	r3, #42	; 0x2a
 80060e8:	d135      	bne.n	8006156 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f043 0204 	orr.w	r2, r3, #4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800611c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe f85f 	bl	80041e6 <HAL_DMA_GetState>
 8006128:	4603      	mov	r3, r0
 800612a:	2b01      	cmp	r3, #1
 800612c:	d049      	beq.n	80061c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	4a69      	ldr	r2, [pc, #420]	; (80062d8 <I2C_Slave_STOPF+0x258>)
 8006134:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe f831 	bl	80041a2 <HAL_DMA_Abort_IT>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d03d      	beq.n	80061c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006150:	4610      	mov	r0, r2
 8006152:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006154:	e035      	b.n	80061c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f043 0204 	orr.w	r2, r3, #4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006188:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe f829 	bl	80041e6 <HAL_DMA_GetState>
 8006194:	4603      	mov	r3, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	d014      	beq.n	80061c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619e:	4a4e      	ldr	r2, [pc, #312]	; (80062d8 <I2C_Slave_STOPF+0x258>)
 80061a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fd fffb 	bl	80041a2 <HAL_DMA_Abort_IT>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061bc:	4610      	mov	r0, r2
 80061be:	4798      	blx	r3
 80061c0:	e000      	b.n	80061c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d03e      	beq.n	800624c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d112      	bne.n	8006202 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	d112      	bne.n	8006236 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691a      	ldr	r2, [r3, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	f043 0204 	orr.w	r2, r3, #4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8b3 	bl	80063c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800625a:	e039      	b.n	80062d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b2a      	cmp	r3, #42	; 0x2a
 8006260:	d109      	bne.n	8006276 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2228      	movs	r2, #40	; 0x28
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff f827 	bl	80052c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b28      	cmp	r3, #40	; 0x28
 8006280:	d111      	bne.n	80062a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <I2C_Slave_STOPF+0x25c>)
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff f828 	bl	80052f4 <HAL_I2C_ListenCpltCallback>
}
 80062a4:	e014      	b.n	80062d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	2b22      	cmp	r3, #34	; 0x22
 80062ac:	d002      	beq.n	80062b4 <I2C_Slave_STOPF+0x234>
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	2b22      	cmp	r3, #34	; 0x22
 80062b2:	d10d      	bne.n	80062d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fe fffa 	bl	80052c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	08006921 	.word	0x08006921
 80062dc:	ffff0000 	.word	0xffff0000

080062e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d002      	beq.n	8006302 <I2C_Slave_AF+0x22>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d129      	bne.n	8006356 <I2C_Slave_AF+0x76>
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2b28      	cmp	r3, #40	; 0x28
 8006306:	d126      	bne.n	8006356 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a2c      	ldr	r2, [pc, #176]	; (80063bc <I2C_Slave_AF+0xdc>)
 800630c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800631c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006326:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006336:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fe ffd0 	bl	80052f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006354:	e02e      	b.n	80063b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2b21      	cmp	r3, #33	; 0x21
 800635a:	d126      	bne.n	80063aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a17      	ldr	r2, [pc, #92]	; (80063bc <I2C_Slave_AF+0xdc>)
 8006360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2221      	movs	r2, #33	; 0x21
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006386:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006390:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fe ff84 	bl	80052b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80063a8:	e004      	b.n	80063b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063b2:	615a      	str	r2, [r3, #20]
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	ffff0000 	.word	0xffff0000

080063c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d002      	beq.n	80063e4 <I2C_ITError+0x24>
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d10a      	bne.n	80063fa <I2C_ITError+0x3a>
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b22      	cmp	r3, #34	; 0x22
 80063e8:	d107      	bne.n	80063fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006400:	2b28      	cmp	r3, #40	; 0x28
 8006402:	d107      	bne.n	8006414 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2228      	movs	r2, #40	; 0x28
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006412:	e015      	b.n	8006440 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006422:	d00a      	beq.n	800643a <I2C_ITError+0x7a>
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	2b60      	cmp	r3, #96	; 0x60
 8006428:	d007      	beq.n	800643a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644e:	d162      	bne.n	8006516 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800645e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	d020      	beq.n	80064b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	4a6a      	ldr	r2, [pc, #424]	; (800661c <I2C_ITError+0x25c>)
 8006474:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd fe91 	bl	80041a2 <HAL_DMA_Abort_IT>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8089 	beq.w	800659a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064aa:	4610      	mov	r0, r2
 80064ac:	4798      	blx	r3
 80064ae:	e074      	b.n	800659a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	4a59      	ldr	r2, [pc, #356]	; (800661c <I2C_ITError+0x25c>)
 80064b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fd fe70 	bl	80041a2 <HAL_DMA_Abort_IT>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d068      	beq.n	800659a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d10b      	bne.n	80064ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006510:	4610      	mov	r0, r2
 8006512:	4798      	blx	r3
 8006514:	e041      	b.n	800659a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b60      	cmp	r3, #96	; 0x60
 8006520:	d125      	bne.n	800656e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	d10b      	bne.n	8006556 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fe feec 	bl	8005344 <HAL_I2C_AbortCpltCallback>
 800656c:	e015      	b.n	800659a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d10b      	bne.n	8006594 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fe fecb 	bl	8005330 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10e      	bne.n	80065c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d007      	beq.n	80065d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d113      	bne.n	8006614 <I2C_ITError+0x254>
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b28      	cmp	r3, #40	; 0x28
 80065f0:	d110      	bne.n	8006614 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <I2C_ITError+0x260>)
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fe fe70 	bl	80052f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	08006921 	.word	0x08006921
 8006620:	ffff0000 	.word	0xffff0000

08006624 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af02      	add	r7, sp, #8
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	4608      	mov	r0, r1
 800662e:	4611      	mov	r1, r2
 8006630:	461a      	mov	r2, r3
 8006632:	4603      	mov	r3, r0
 8006634:	817b      	strh	r3, [r7, #10]
 8006636:	460b      	mov	r3, r1
 8006638:	813b      	strh	r3, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800664c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	2200      	movs	r2, #0
 8006656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fa08 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d103      	bne.n	800667e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e05f      	b.n	8006742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006682:	897b      	ldrh	r3, [r7, #10]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	492d      	ldr	r1, [pc, #180]	; (800674c <I2C_RequestMemoryWrite+0x128>)
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fa40 	bl	8006b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e04c      	b.n	8006742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c0:	6a39      	ldr	r1, [r7, #32]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 faaa 	bl	8006c1c <I2C_WaitOnTXEFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d107      	bne.n	80066e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e02b      	b.n	8006742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066f0:	893b      	ldrh	r3, [r7, #8]
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	611a      	str	r2, [r3, #16]
 80066fa:	e021      	b.n	8006740 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066fc:	893b      	ldrh	r3, [r7, #8]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	b29b      	uxth	r3, r3
 8006702:	b2da      	uxtb	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800670a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670c:	6a39      	ldr	r1, [r7, #32]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fa84 	bl	8006c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00d      	beq.n	8006736 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	2b04      	cmp	r3, #4
 8006720:	d107      	bne.n	8006732 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e005      	b.n	8006742 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006736:	893b      	ldrh	r3, [r7, #8]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	00010002 	.word	0x00010002

08006750 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af02      	add	r7, sp, #8
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	461a      	mov	r2, r3
 800675e:	4603      	mov	r3, r0
 8006760:	817b      	strh	r3, [r7, #10]
 8006762:	460b      	mov	r3, r1
 8006764:	813b      	strh	r3, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006778:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	2200      	movs	r2, #0
 8006792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 f96a 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d103      	bne.n	80067ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e0aa      	b.n	8006914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067be:	897b      	ldrh	r3, [r7, #10]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	4952      	ldr	r1, [pc, #328]	; (800691c <I2C_RequestMemoryRead+0x1cc>)
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f9a2 	bl	8006b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e097      	b.n	8006914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fc:	6a39      	ldr	r1, [r7, #32]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fa0c 	bl	8006c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	2b04      	cmp	r3, #4
 8006810:	d107      	bne.n	8006822 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e076      	b.n	8006914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d105      	bne.n	8006838 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800682c:	893b      	ldrh	r3, [r7, #8]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	611a      	str	r2, [r3, #16]
 8006836:	e021      	b.n	800687c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006838:	893b      	ldrh	r3, [r7, #8]
 800683a:	0a1b      	lsrs	r3, r3, #8
 800683c:	b29b      	uxth	r3, r3
 800683e:	b2da      	uxtb	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006848:	6a39      	ldr	r1, [r7, #32]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f9e6 	bl	8006c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	2b04      	cmp	r3, #4
 800685c:	d107      	bne.n	800686e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e050      	b.n	8006914 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006872:	893b      	ldrh	r3, [r7, #8]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	6a39      	ldr	r1, [r7, #32]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f9cb 	bl	8006c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00d      	beq.n	80068a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	2b04      	cmp	r3, #4
 8006892:	d107      	bne.n	80068a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e035      	b.n	8006914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	2200      	movs	r2, #0
 80068c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f8d3 	bl	8006a70 <I2C_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d103      	bne.n	80068e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e013      	b.n	8006914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068ec:	897b      	ldrh	r3, [r7, #10]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	6a3a      	ldr	r2, [r7, #32]
 8006900:	4906      	ldr	r1, [pc, #24]	; (800691c <I2C_RequestMemoryRead+0x1cc>)
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 f90b 	bl	8006b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	00010002 	.word	0x00010002

08006920 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006938:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800693a:	4b4b      	ldr	r3, [pc, #300]	; (8006a68 <I2C_DMAAbort+0x148>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	4a4a      	ldr	r2, [pc, #296]	; (8006a6c <I2C_DMAAbort+0x14c>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	0a1a      	lsrs	r2, r3, #8
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	00da      	lsls	r2, r3, #3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006966:	e00a      	b.n	800697e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3b01      	subs	r3, #1
 800696c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d0ea      	beq.n	8006954 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698a:	2200      	movs	r2, #0
 800698c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	2200      	movs	r2, #0
 800699c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2200      	movs	r2, #0
 80069b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	2200      	movs	r2, #0
 80069c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	2200      	movs	r2, #0
 80069d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0201 	bic.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b60      	cmp	r3, #96	; 0x60
 80069ee:	d10e      	bne.n	8006a0e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2200      	movs	r2, #0
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a06:	6978      	ldr	r0, [r7, #20]
 8006a08:	f7fe fc9c 	bl	8005344 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a0c:	e027      	b.n	8006a5e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a0e:	7cfb      	ldrb	r3, [r7, #19]
 8006a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a14:	2b28      	cmp	r3, #40	; 0x28
 8006a16:	d117      	bne.n	8006a48 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2228      	movs	r2, #40	; 0x28
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a46:	e007      	b.n	8006a58 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006a58:	6978      	ldr	r0, [r7, #20]
 8006a5a:	f7fe fc69 	bl	8005330 <HAL_I2C_ErrorCallback>
}
 8006a5e:	bf00      	nop
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000000 	.word	0x20000000
 8006a6c:	14f8b589 	.word	0x14f8b589

08006a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a80:	e025      	b.n	8006ace <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d021      	beq.n	8006ace <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8a:	f7fc fdc9 	bl	8003620 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d302      	bcc.n	8006aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d116      	bne.n	8006ace <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f043 0220 	orr.w	r2, r3, #32
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e023      	b.n	8006b16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	0c1b      	lsrs	r3, r3, #16
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d10d      	bne.n	8006af4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bf0c      	ite	eq
 8006aea:	2301      	moveq	r3, #1
 8006aec:	2300      	movne	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	e00c      	b.n	8006b0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	43da      	mvns	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d0b6      	beq.n	8006a82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	607a      	str	r2, [r7, #4]
 8006b2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b2c:	e051      	b.n	8006bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3c:	d123      	bne.n	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f043 0204 	orr.w	r2, r3, #4
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e046      	b.n	8006c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d021      	beq.n	8006bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8e:	f7fc fd47 	bl	8003620 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d302      	bcc.n	8006ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d116      	bne.n	8006bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f043 0220 	orr.w	r2, r3, #32
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e020      	b.n	8006c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d10c      	bne.n	8006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	43da      	mvns	r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4013      	ands	r3, r2
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bf14      	ite	ne
 8006bee:	2301      	movne	r3, #1
 8006bf0:	2300      	moveq	r3, #0
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	e00b      	b.n	8006c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	43da      	mvns	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4013      	ands	r3, r2
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bf14      	ite	ne
 8006c08:	2301      	movne	r3, #1
 8006c0a:	2300      	moveq	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d18d      	bne.n	8006b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c28:	e02d      	b.n	8006c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f900 	bl	8006e30 <I2C_IsAcknowledgeFailed>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e02d      	b.n	8006c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d021      	beq.n	8006c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c42:	f7fc fced 	bl	8003620 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d302      	bcc.n	8006c58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d116      	bne.n	8006c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f043 0220 	orr.w	r2, r3, #32
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e007      	b.n	8006c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d1ca      	bne.n	8006c2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006caa:	e02d      	b.n	8006d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f8bf 	bl	8006e30 <I2C_IsAcknowledgeFailed>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e02d      	b.n	8006d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d021      	beq.n	8006d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc4:	f7fc fcac 	bl	8003620 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d302      	bcc.n	8006cda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d116      	bne.n	8006d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	f043 0220 	orr.w	r2, r3, #32
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e007      	b.n	8006d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d1ca      	bne.n	8006cac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d2c:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	4a13      	ldr	r2, [pc, #76]	; (8006d80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006d34:	fba2 2303 	umull	r2, r3, r2, r3
 8006d38:	0a1a      	lsrs	r2, r3, #8
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d107      	bne.n	8006d5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f043 0220 	orr.w	r2, r3, #32
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e008      	b.n	8006d70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	d0e9      	beq.n	8006d42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000000 	.word	0x20000000
 8006d80:	14f8b589 	.word	0x14f8b589

08006d84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d90:	e042      	b.n	8006e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d119      	bne.n	8006dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0210 	mvn.w	r2, #16
 8006da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e029      	b.n	8006e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd4:	f7fc fc24 	bl	8003620 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d302      	bcc.n	8006dea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d116      	bne.n	8006e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e007      	b.n	8006e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d1b5      	bne.n	8006d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e46:	d11b      	bne.n	8006e80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	f043 0204 	orr.w	r2, r3, #4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e9e:	d103      	bne.n	8006ea8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ea6:	e007      	b.n	8006eb8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006eb0:	d102      	bne.n	8006eb8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2208      	movs	r2, #8
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0cc      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ed8:	4b68      	ldr	r3, [pc, #416]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d90c      	bls.n	8006f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee6:	4b65      	ldr	r3, [pc, #404]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eee:	4b63      	ldr	r3, [pc, #396]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d001      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0b8      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d020      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f18:	4b59      	ldr	r3, [pc, #356]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	4a58      	ldr	r2, [pc, #352]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f30:	4b53      	ldr	r3, [pc, #332]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4a52      	ldr	r2, [pc, #328]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f3c:	4b50      	ldr	r3, [pc, #320]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	494d      	ldr	r1, [pc, #308]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d044      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d107      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f62:	4b47      	ldr	r3, [pc, #284]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d119      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e07f      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d003      	beq.n	8006f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d107      	bne.n	8006f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f82:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e06f      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f92:	4b3b      	ldr	r3, [pc, #236]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e067      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa2:	4b37      	ldr	r3, [pc, #220]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f023 0203 	bic.w	r2, r3, #3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4934      	ldr	r1, [pc, #208]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb4:	f7fc fb34 	bl	8003620 <HAL_GetTick>
 8006fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fba:	e00a      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fbc:	f7fc fb30 	bl	8003620 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e04f      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd2:	4b2b      	ldr	r3, [pc, #172]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 020c 	and.w	r2, r3, #12
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d1eb      	bne.n	8006fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fe4:	4b25      	ldr	r3, [pc, #148]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d20c      	bcs.n	800700c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff2:	4b22      	ldr	r3, [pc, #136]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ffa:	4b20      	ldr	r3, [pc, #128]	; (800707c <HAL_RCC_ClockConfig+0x1b8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d001      	beq.n	800700c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e032      	b.n	8007072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	4916      	ldr	r1, [pc, #88]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	4313      	orrs	r3, r2
 8007028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007036:	4b12      	ldr	r3, [pc, #72]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	490e      	ldr	r1, [pc, #56]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	4313      	orrs	r3, r2
 8007048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800704a:	f000 f855 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 800704e:	4602      	mov	r2, r0
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCC_ClockConfig+0x1bc>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 030f 	and.w	r3, r3, #15
 800705a:	490a      	ldr	r1, [pc, #40]	; (8007084 <HAL_RCC_ClockConfig+0x1c0>)
 800705c:	5ccb      	ldrb	r3, [r1, r3]
 800705e:	fa22 f303 	lsr.w	r3, r2, r3
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <HAL_RCC_ClockConfig+0x1c4>)
 8007064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <HAL_RCC_ClockConfig+0x1c8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7fc fa94 	bl	8003598 <HAL_InitTick>

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40023c00 	.word	0x40023c00
 8007080:	40023800 	.word	0x40023800
 8007084:	0800d7c4 	.word	0x0800d7c4
 8007088:	20000000 	.word	0x20000000
 800708c:	20000004 	.word	0x20000004

08007090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007096:	681b      	ldr	r3, [r3, #0]
}
 8007098:	4618      	mov	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000000 	.word	0x20000000

080070a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070ac:	f7ff fff0 	bl	8007090 <HAL_RCC_GetHCLKFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	0a9b      	lsrs	r3, r3, #10
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	4903      	ldr	r1, [pc, #12]	; (80070cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070be:	5ccb      	ldrb	r3, [r1, r3]
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	40023800 	.word	0x40023800
 80070cc:	0800d7d4 	.word	0x0800d7d4

080070d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070d4:	f7ff ffdc 	bl	8007090 <HAL_RCC_GetHCLKFreq>
 80070d8:	4602      	mov	r2, r0
 80070da:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	0b5b      	lsrs	r3, r3, #13
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	4903      	ldr	r1, [pc, #12]	; (80070f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070e6:	5ccb      	ldrb	r3, [r1, r3]
 80070e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	40023800 	.word	0x40023800
 80070f4:	0800d7d4 	.word	0x0800d7d4

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070fc:	b0ae      	sub	sp, #184	; 0xb8
 80070fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800711e:	4bcb      	ldr	r3, [pc, #812]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 030c 	and.w	r3, r3, #12
 8007126:	2b0c      	cmp	r3, #12
 8007128:	f200 8206 	bhi.w	8007538 <HAL_RCC_GetSysClockFreq+0x440>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <HAL_RCC_GetSysClockFreq+0x3c>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007169 	.word	0x08007169
 8007138:	08007539 	.word	0x08007539
 800713c:	08007539 	.word	0x08007539
 8007140:	08007539 	.word	0x08007539
 8007144:	08007171 	.word	0x08007171
 8007148:	08007539 	.word	0x08007539
 800714c:	08007539 	.word	0x08007539
 8007150:	08007539 	.word	0x08007539
 8007154:	08007179 	.word	0x08007179
 8007158:	08007539 	.word	0x08007539
 800715c:	08007539 	.word	0x08007539
 8007160:	08007539 	.word	0x08007539
 8007164:	08007369 	.word	0x08007369
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007168:	4bb9      	ldr	r3, [pc, #740]	; (8007450 <HAL_RCC_GetSysClockFreq+0x358>)
 800716a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800716e:	e1e7      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007170:	4bb8      	ldr	r3, [pc, #736]	; (8007454 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007176:	e1e3      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007178:	4bb4      	ldr	r3, [pc, #720]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007184:	4bb1      	ldr	r3, [pc, #708]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d071      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007190:	4bae      	ldr	r3, [pc, #696]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	099b      	lsrs	r3, r3, #6
 8007196:	2200      	movs	r2, #0
 8007198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800719c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80071a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071ac:	2300      	movs	r3, #0
 80071ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071b6:	4622      	mov	r2, r4
 80071b8:	462b      	mov	r3, r5
 80071ba:	f04f 0000 	mov.w	r0, #0
 80071be:	f04f 0100 	mov.w	r1, #0
 80071c2:	0159      	lsls	r1, r3, #5
 80071c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071c8:	0150      	lsls	r0, r2, #5
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4621      	mov	r1, r4
 80071d0:	1a51      	subs	r1, r2, r1
 80071d2:	6439      	str	r1, [r7, #64]	; 0x40
 80071d4:	4629      	mov	r1, r5
 80071d6:	eb63 0301 	sbc.w	r3, r3, r1
 80071da:	647b      	str	r3, [r7, #68]	; 0x44
 80071dc:	f04f 0200 	mov.w	r2, #0
 80071e0:	f04f 0300 	mov.w	r3, #0
 80071e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80071e8:	4649      	mov	r1, r9
 80071ea:	018b      	lsls	r3, r1, #6
 80071ec:	4641      	mov	r1, r8
 80071ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071f2:	4641      	mov	r1, r8
 80071f4:	018a      	lsls	r2, r1, #6
 80071f6:	4641      	mov	r1, r8
 80071f8:	1a51      	subs	r1, r2, r1
 80071fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80071fc:	4649      	mov	r1, r9
 80071fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007210:	4649      	mov	r1, r9
 8007212:	00cb      	lsls	r3, r1, #3
 8007214:	4641      	mov	r1, r8
 8007216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800721a:	4641      	mov	r1, r8
 800721c:	00ca      	lsls	r2, r1, #3
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	4603      	mov	r3, r0
 8007224:	4622      	mov	r2, r4
 8007226:	189b      	adds	r3, r3, r2
 8007228:	633b      	str	r3, [r7, #48]	; 0x30
 800722a:	462b      	mov	r3, r5
 800722c:	460a      	mov	r2, r1
 800722e:	eb42 0303 	adc.w	r3, r2, r3
 8007232:	637b      	str	r3, [r7, #52]	; 0x34
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007240:	4629      	mov	r1, r5
 8007242:	024b      	lsls	r3, r1, #9
 8007244:	4621      	mov	r1, r4
 8007246:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800724a:	4621      	mov	r1, r4
 800724c:	024a      	lsls	r2, r1, #9
 800724e:	4610      	mov	r0, r2
 8007250:	4619      	mov	r1, r3
 8007252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007256:	2200      	movs	r2, #0
 8007258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800725c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007260:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007264:	f7f9 fd40 	bl	8000ce8 <__aeabi_uldivmod>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4613      	mov	r3, r2
 800726e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007272:	e067      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007274:	4b75      	ldr	r3, [pc, #468]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	099b      	lsrs	r3, r3, #6
 800727a:	2200      	movs	r2, #0
 800727c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007280:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	67bb      	str	r3, [r7, #120]	; 0x78
 800728e:	2300      	movs	r3, #0
 8007290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007292:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007296:	4622      	mov	r2, r4
 8007298:	462b      	mov	r3, r5
 800729a:	f04f 0000 	mov.w	r0, #0
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	0159      	lsls	r1, r3, #5
 80072a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072a8:	0150      	lsls	r0, r2, #5
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4621      	mov	r1, r4
 80072b0:	1a51      	subs	r1, r2, r1
 80072b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80072b4:	4629      	mov	r1, r5
 80072b6:	eb63 0301 	sbc.w	r3, r3, r1
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80072c8:	4649      	mov	r1, r9
 80072ca:	018b      	lsls	r3, r1, #6
 80072cc:	4641      	mov	r1, r8
 80072ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072d2:	4641      	mov	r1, r8
 80072d4:	018a      	lsls	r2, r1, #6
 80072d6:	4641      	mov	r1, r8
 80072d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80072dc:	4649      	mov	r1, r9
 80072de:	eb63 0b01 	sbc.w	fp, r3, r1
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f6:	4692      	mov	sl, r2
 80072f8:	469b      	mov	fp, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	eb1a 0303 	adds.w	r3, sl, r3
 8007300:	623b      	str	r3, [r7, #32]
 8007302:	462b      	mov	r3, r5
 8007304:	eb4b 0303 	adc.w	r3, fp, r3
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007316:	4629      	mov	r1, r5
 8007318:	028b      	lsls	r3, r1, #10
 800731a:	4621      	mov	r1, r4
 800731c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007320:	4621      	mov	r1, r4
 8007322:	028a      	lsls	r2, r1, #10
 8007324:	4610      	mov	r0, r2
 8007326:	4619      	mov	r1, r3
 8007328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800732c:	2200      	movs	r2, #0
 800732e:	673b      	str	r3, [r7, #112]	; 0x70
 8007330:	677a      	str	r2, [r7, #116]	; 0x74
 8007332:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007336:	f7f9 fcd7 	bl	8000ce8 <__aeabi_uldivmod>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4613      	mov	r3, r2
 8007340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007344:	4b41      	ldr	r3, [pc, #260]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	3301      	adds	r3, #1
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800735a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007366:	e0eb      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007368:	4b38      	ldr	r3, [pc, #224]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007374:	4b35      	ldr	r3, [pc, #212]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d06b      	beq.n	8007458 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007380:	4b32      	ldr	r3, [pc, #200]	; (800744c <HAL_RCC_GetSysClockFreq+0x354>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	099b      	lsrs	r3, r3, #6
 8007386:	2200      	movs	r2, #0
 8007388:	66bb      	str	r3, [r7, #104]	; 0x68
 800738a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800738c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800738e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007392:	663b      	str	r3, [r7, #96]	; 0x60
 8007394:	2300      	movs	r3, #0
 8007396:	667b      	str	r3, [r7, #100]	; 0x64
 8007398:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800739c:	4622      	mov	r2, r4
 800739e:	462b      	mov	r3, r5
 80073a0:	f04f 0000 	mov.w	r0, #0
 80073a4:	f04f 0100 	mov.w	r1, #0
 80073a8:	0159      	lsls	r1, r3, #5
 80073aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073ae:	0150      	lsls	r0, r2, #5
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4621      	mov	r1, r4
 80073b6:	1a51      	subs	r1, r2, r1
 80073b8:	61b9      	str	r1, [r7, #24]
 80073ba:	4629      	mov	r1, r5
 80073bc:	eb63 0301 	sbc.w	r3, r3, r1
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80073ce:	4659      	mov	r1, fp
 80073d0:	018b      	lsls	r3, r1, #6
 80073d2:	4651      	mov	r1, sl
 80073d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073d8:	4651      	mov	r1, sl
 80073da:	018a      	lsls	r2, r1, #6
 80073dc:	4651      	mov	r1, sl
 80073de:	ebb2 0801 	subs.w	r8, r2, r1
 80073e2:	4659      	mov	r1, fp
 80073e4:	eb63 0901 	sbc.w	r9, r3, r1
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073fc:	4690      	mov	r8, r2
 80073fe:	4699      	mov	r9, r3
 8007400:	4623      	mov	r3, r4
 8007402:	eb18 0303 	adds.w	r3, r8, r3
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	462b      	mov	r3, r5
 800740a:	eb49 0303 	adc.w	r3, r9, r3
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800741c:	4629      	mov	r1, r5
 800741e:	024b      	lsls	r3, r1, #9
 8007420:	4621      	mov	r1, r4
 8007422:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007426:	4621      	mov	r1, r4
 8007428:	024a      	lsls	r2, r1, #9
 800742a:	4610      	mov	r0, r2
 800742c:	4619      	mov	r1, r3
 800742e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007432:	2200      	movs	r2, #0
 8007434:	65bb      	str	r3, [r7, #88]	; 0x58
 8007436:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800743c:	f7f9 fc54 	bl	8000ce8 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4613      	mov	r3, r2
 8007446:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800744a:	e065      	b.n	8007518 <HAL_RCC_GetSysClockFreq+0x420>
 800744c:	40023800 	.word	0x40023800
 8007450:	00f42400 	.word	0x00f42400
 8007454:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007458:	4b3d      	ldr	r3, [pc, #244]	; (8007550 <HAL_RCC_GetSysClockFreq+0x458>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	099b      	lsrs	r3, r3, #6
 800745e:	2200      	movs	r2, #0
 8007460:	4618      	mov	r0, r3
 8007462:	4611      	mov	r1, r2
 8007464:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007468:	653b      	str	r3, [r7, #80]	; 0x50
 800746a:	2300      	movs	r3, #0
 800746c:	657b      	str	r3, [r7, #84]	; 0x54
 800746e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007472:	4642      	mov	r2, r8
 8007474:	464b      	mov	r3, r9
 8007476:	f04f 0000 	mov.w	r0, #0
 800747a:	f04f 0100 	mov.w	r1, #0
 800747e:	0159      	lsls	r1, r3, #5
 8007480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007484:	0150      	lsls	r0, r2, #5
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4641      	mov	r1, r8
 800748c:	1a51      	subs	r1, r2, r1
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	4649      	mov	r1, r9
 8007492:	eb63 0301 	sbc.w	r3, r3, r1
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80074a4:	4659      	mov	r1, fp
 80074a6:	018b      	lsls	r3, r1, #6
 80074a8:	4651      	mov	r1, sl
 80074aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074ae:	4651      	mov	r1, sl
 80074b0:	018a      	lsls	r2, r1, #6
 80074b2:	4651      	mov	r1, sl
 80074b4:	1a54      	subs	r4, r2, r1
 80074b6:	4659      	mov	r1, fp
 80074b8:	eb63 0501 	sbc.w	r5, r3, r1
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	00eb      	lsls	r3, r5, #3
 80074c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ca:	00e2      	lsls	r2, r4, #3
 80074cc:	4614      	mov	r4, r2
 80074ce:	461d      	mov	r5, r3
 80074d0:	4643      	mov	r3, r8
 80074d2:	18e3      	adds	r3, r4, r3
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	464b      	mov	r3, r9
 80074d8:	eb45 0303 	adc.w	r3, r5, r3
 80074dc:	607b      	str	r3, [r7, #4]
 80074de:	f04f 0200 	mov.w	r2, #0
 80074e2:	f04f 0300 	mov.w	r3, #0
 80074e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074ea:	4629      	mov	r1, r5
 80074ec:	028b      	lsls	r3, r1, #10
 80074ee:	4621      	mov	r1, r4
 80074f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074f4:	4621      	mov	r1, r4
 80074f6:	028a      	lsls	r2, r1, #10
 80074f8:	4610      	mov	r0, r2
 80074fa:	4619      	mov	r1, r3
 80074fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007500:	2200      	movs	r2, #0
 8007502:	64bb      	str	r3, [r7, #72]	; 0x48
 8007504:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007506:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800750a:	f7f9 fbed 	bl	8000ce8 <__aeabi_uldivmod>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4613      	mov	r3, r2
 8007514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007518:	4b0d      	ldr	r3, [pc, #52]	; (8007550 <HAL_RCC_GetSysClockFreq+0x458>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	0f1b      	lsrs	r3, r3, #28
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800752a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800752e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007536:	e003      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <HAL_RCC_GetSysClockFreq+0x45c>)
 800753a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800753e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007540:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007544:	4618      	mov	r0, r3
 8007546:	37b8      	adds	r7, #184	; 0xb8
 8007548:	46bd      	mov	sp, r7
 800754a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754e:	bf00      	nop
 8007550:	40023800 	.word	0x40023800
 8007554:	00f42400 	.word	0x00f42400

08007558 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e28d      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8083 	beq.w	800767e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007578:	4b94      	ldr	r3, [pc, #592]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 030c 	and.w	r3, r3, #12
 8007580:	2b04      	cmp	r3, #4
 8007582:	d019      	beq.n	80075b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007584:	4b91      	ldr	r3, [pc, #580]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800758c:	2b08      	cmp	r3, #8
 800758e:	d106      	bne.n	800759e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007590:	4b8e      	ldr	r3, [pc, #568]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759c:	d00c      	beq.n	80075b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800759e:	4b8b      	ldr	r3, [pc, #556]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80075a6:	2b0c      	cmp	r3, #12
 80075a8:	d112      	bne.n	80075d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075aa:	4b88      	ldr	r3, [pc, #544]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075b6:	d10b      	bne.n	80075d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b8:	4b84      	ldr	r3, [pc, #528]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d05b      	beq.n	800767c <HAL_RCC_OscConfig+0x124>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d157      	bne.n	800767c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e25a      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d8:	d106      	bne.n	80075e8 <HAL_RCC_OscConfig+0x90>
 80075da:	4b7c      	ldr	r3, [pc, #496]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a7b      	ldr	r2, [pc, #492]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80075e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	e01d      	b.n	8007624 <HAL_RCC_OscConfig+0xcc>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075f0:	d10c      	bne.n	800760c <HAL_RCC_OscConfig+0xb4>
 80075f2:	4b76      	ldr	r3, [pc, #472]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a75      	ldr	r2, [pc, #468]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80075f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b73      	ldr	r3, [pc, #460]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a72      	ldr	r2, [pc, #456]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e00b      	b.n	8007624 <HAL_RCC_OscConfig+0xcc>
 800760c:	4b6f      	ldr	r3, [pc, #444]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a6e      	ldr	r2, [pc, #440]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4b6c      	ldr	r3, [pc, #432]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a6b      	ldr	r2, [pc, #428]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 800761e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d013      	beq.n	8007654 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762c:	f7fb fff8 	bl	8003620 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007634:	f7fb fff4 	bl	8003620 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b64      	cmp	r3, #100	; 0x64
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e21f      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007646:	4b61      	ldr	r3, [pc, #388]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f0      	beq.n	8007634 <HAL_RCC_OscConfig+0xdc>
 8007652:	e014      	b.n	800767e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fb ffe4 	bl	8003620 <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800765c:	f7fb ffe0 	bl	8003620 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b64      	cmp	r3, #100	; 0x64
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e20b      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800766e:	4b57      	ldr	r3, [pc, #348]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f0      	bne.n	800765c <HAL_RCC_OscConfig+0x104>
 800767a:	e000      	b.n	800767e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800767c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d06f      	beq.n	800776a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800768a:	4b50      	ldr	r3, [pc, #320]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
 8007692:	2b00      	cmp	r3, #0
 8007694:	d017      	beq.n	80076c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007696:	4b4d      	ldr	r3, [pc, #308]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d105      	bne.n	80076ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80076a2:	4b4a      	ldr	r3, [pc, #296]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ae:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80076b6:	2b0c      	cmp	r3, #12
 80076b8:	d11c      	bne.n	80076f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ba:	4b44      	ldr	r3, [pc, #272]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d116      	bne.n	80076f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076c6:	4b41      	ldr	r3, [pc, #260]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <HAL_RCC_OscConfig+0x186>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e1d3      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076de:	4b3b      	ldr	r3, [pc, #236]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4937      	ldr	r1, [pc, #220]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076f2:	e03a      	b.n	800776a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d020      	beq.n	800773e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076fc:	4b34      	ldr	r3, [pc, #208]	; (80077d0 <HAL_RCC_OscConfig+0x278>)
 80076fe:	2201      	movs	r2, #1
 8007700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007702:	f7fb ff8d 	bl	8003620 <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800770a:	f7fb ff89 	bl	8003620 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e1b4      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771c:	4b2b      	ldr	r3, [pc, #172]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0f0      	beq.n	800770a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007728:	4b28      	ldr	r3, [pc, #160]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4925      	ldr	r1, [pc, #148]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007738:	4313      	orrs	r3, r2
 800773a:	600b      	str	r3, [r1, #0]
 800773c:	e015      	b.n	800776a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800773e:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <HAL_RCC_OscConfig+0x278>)
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007744:	f7fb ff6c 	bl	8003620 <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800774c:	f7fb ff68 	bl	8003620 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e193      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800775e:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0308 	and.w	r3, r3, #8
 8007772:	2b00      	cmp	r3, #0
 8007774:	d036      	beq.n	80077e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d016      	beq.n	80077ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <HAL_RCC_OscConfig+0x27c>)
 8007780:	2201      	movs	r2, #1
 8007782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007784:	f7fb ff4c 	bl	8003620 <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800778c:	f7fb ff48 	bl	8003620 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e173      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80077a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0f0      	beq.n	800778c <HAL_RCC_OscConfig+0x234>
 80077aa:	e01b      	b.n	80077e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ac:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <HAL_RCC_OscConfig+0x27c>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b2:	f7fb ff35 	bl	8003620 <HAL_GetTick>
 80077b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b8:	e00e      	b.n	80077d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ba:	f7fb ff31 	bl	8003620 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d907      	bls.n	80077d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e15c      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
 80077cc:	40023800 	.word	0x40023800
 80077d0:	42470000 	.word	0x42470000
 80077d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077d8:	4b8a      	ldr	r3, [pc, #552]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 80077da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1ea      	bne.n	80077ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8097 	beq.w	8007920 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077f2:	2300      	movs	r3, #0
 80077f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077f6:	4b83      	ldr	r3, [pc, #524]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10f      	bne.n	8007822 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007802:	2300      	movs	r3, #0
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	4b7f      	ldr	r3, [pc, #508]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	4a7e      	ldr	r2, [pc, #504]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800780c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007810:	6413      	str	r3, [r2, #64]	; 0x40
 8007812:	4b7c      	ldr	r3, [pc, #496]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800781e:	2301      	movs	r3, #1
 8007820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007822:	4b79      	ldr	r3, [pc, #484]	; (8007a08 <HAL_RCC_OscConfig+0x4b0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782a:	2b00      	cmp	r3, #0
 800782c:	d118      	bne.n	8007860 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800782e:	4b76      	ldr	r3, [pc, #472]	; (8007a08 <HAL_RCC_OscConfig+0x4b0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a75      	ldr	r2, [pc, #468]	; (8007a08 <HAL_RCC_OscConfig+0x4b0>)
 8007834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800783a:	f7fb fef1 	bl	8003620 <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007842:	f7fb feed 	bl	8003620 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e118      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007854:	4b6c      	ldr	r3, [pc, #432]	; (8007a08 <HAL_RCC_OscConfig+0x4b0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0f0      	beq.n	8007842 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d106      	bne.n	8007876 <HAL_RCC_OscConfig+0x31e>
 8007868:	4b66      	ldr	r3, [pc, #408]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800786a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786c:	4a65      	ldr	r2, [pc, #404]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	6713      	str	r3, [r2, #112]	; 0x70
 8007874:	e01c      	b.n	80078b0 <HAL_RCC_OscConfig+0x358>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b05      	cmp	r3, #5
 800787c:	d10c      	bne.n	8007898 <HAL_RCC_OscConfig+0x340>
 800787e:	4b61      	ldr	r3, [pc, #388]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007882:	4a60      	ldr	r2, [pc, #384]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007884:	f043 0304 	orr.w	r3, r3, #4
 8007888:	6713      	str	r3, [r2, #112]	; 0x70
 800788a:	4b5e      	ldr	r3, [pc, #376]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	4a5d      	ldr	r2, [pc, #372]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	6713      	str	r3, [r2, #112]	; 0x70
 8007896:	e00b      	b.n	80078b0 <HAL_RCC_OscConfig+0x358>
 8007898:	4b5a      	ldr	r3, [pc, #360]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	4a59      	ldr	r2, [pc, #356]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	6713      	str	r3, [r2, #112]	; 0x70
 80078a4:	4b57      	ldr	r3, [pc, #348]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 80078a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a8:	4a56      	ldr	r2, [pc, #344]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 80078aa:	f023 0304 	bic.w	r3, r3, #4
 80078ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d015      	beq.n	80078e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b8:	f7fb feb2 	bl	8003620 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078be:	e00a      	b.n	80078d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078c0:	f7fb feae 	bl	8003620 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e0d7      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d6:	4b4b      	ldr	r3, [pc, #300]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0ee      	beq.n	80078c0 <HAL_RCC_OscConfig+0x368>
 80078e2:	e014      	b.n	800790e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e4:	f7fb fe9c 	bl	8003620 <HAL_GetTick>
 80078e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ea:	e00a      	b.n	8007902 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078ec:	f7fb fe98 	bl	8003620 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e0c1      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007902:	4b40      	ldr	r3, [pc, #256]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1ee      	bne.n	80078ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d105      	bne.n	8007920 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007914:	4b3b      	ldr	r3, [pc, #236]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	4a3a      	ldr	r2, [pc, #232]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800791a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800791e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80ad 	beq.w	8007a84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800792a:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 030c 	and.w	r3, r3, #12
 8007932:	2b08      	cmp	r3, #8
 8007934:	d060      	beq.n	80079f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d145      	bne.n	80079ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793e:	4b33      	ldr	r3, [pc, #204]	; (8007a0c <HAL_RCC_OscConfig+0x4b4>)
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7fb fe6c 	bl	8003620 <HAL_GetTick>
 8007948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800794c:	f7fb fe68 	bl	8003620 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e093      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795e:	4b29      	ldr	r3, [pc, #164]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1f0      	bne.n	800794c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69da      	ldr	r2, [r3, #28]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	019b      	lsls	r3, r3, #6
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	085b      	lsrs	r3, r3, #1
 8007982:	3b01      	subs	r3, #1
 8007984:	041b      	lsls	r3, r3, #16
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	061b      	lsls	r3, r3, #24
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	071b      	lsls	r3, r3, #28
 8007996:	491b      	ldr	r1, [pc, #108]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 8007998:	4313      	orrs	r3, r2
 800799a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800799c:	4b1b      	ldr	r3, [pc, #108]	; (8007a0c <HAL_RCC_OscConfig+0x4b4>)
 800799e:	2201      	movs	r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a2:	f7fb fe3d 	bl	8003620 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a8:	e008      	b.n	80079bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079aa:	f7fb fe39 	bl	8003620 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e064      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079bc:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0f0      	beq.n	80079aa <HAL_RCC_OscConfig+0x452>
 80079c8:	e05c      	b.n	8007a84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ca:	4b10      	ldr	r3, [pc, #64]	; (8007a0c <HAL_RCC_OscConfig+0x4b4>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7fb fe26 	bl	8003620 <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079d8:	f7fb fe22 	bl	8003620 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e04d      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ea:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <HAL_RCC_OscConfig+0x4ac>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0x480>
 80079f6:	e045      	b.n	8007a84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d107      	bne.n	8007a10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e040      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
 8007a04:	40023800 	.word	0x40023800
 8007a08:	40007000 	.word	0x40007000
 8007a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a10:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <HAL_RCC_OscConfig+0x538>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d030      	beq.n	8007a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d129      	bne.n	8007a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d122      	bne.n	8007a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a40:	4013      	ands	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d119      	bne.n	8007a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d10f      	bne.n	8007a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d107      	bne.n	8007a80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d001      	beq.n	8007a84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e000      	b.n	8007a86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40023800 	.word	0x40023800

08007a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e03f      	b.n	8007b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7fb faec 	bl	8003098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2224      	movs	r2, #36	; 0x24
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fddf 	bl	800869c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695a      	ldr	r2, [r3, #20]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b08a      	sub	sp, #40	; 0x28
 8007b32:	af02      	add	r7, sp, #8
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	d17c      	bne.n	8007c48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <HAL_UART_Transmit+0x2c>
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e075      	b.n	8007c4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <HAL_UART_Transmit+0x3e>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e06e      	b.n	8007c4a <HAL_UART_Transmit+0x11c>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2221      	movs	r2, #33	; 0x21
 8007b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b82:	f7fb fd4d 	bl	8003620 <HAL_GetTick>
 8007b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9c:	d108      	bne.n	8007bb0 <HAL_UART_Transmit+0x82>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e003      	b.n	8007bb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007bc0:	e02a      	b.n	8007c18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2180      	movs	r1, #128	; 0x80
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fb1f 	bl	8008210 <UART_WaitOnFlagUntilTimeout>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e036      	b.n	8007c4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10b      	bne.n	8007bfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	e007      	b.n	8007c0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	3301      	adds	r3, #1
 8007c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1cf      	bne.n	8007bc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2140      	movs	r1, #64	; 0x40
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 faef 	bl	8008210 <UART_WaitOnFlagUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e006      	b.n	8007c4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e000      	b.n	8007c4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
  }
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d11d      	bne.n	8007ca8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <HAL_UART_Receive_IT+0x26>
 8007c72:	88fb      	ldrh	r3, [r7, #6]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e016      	b.n	8007caa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <HAL_UART_Receive_IT+0x38>
 8007c86:	2302      	movs	r3, #2
 8007c88:	e00f      	b.n	8007caa <HAL_UART_Receive_IT+0x58>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fb24 	bl	80082ec <UART_Start_Receive_IT>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	e000      	b.n	8007caa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007ca8:	2302      	movs	r3, #2
  }
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b0ba      	sub	sp, #232	; 0xe8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10f      	bne.n	8007d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d009      	beq.n	8007d1a <HAL_UART_IRQHandler+0x66>
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc07 	bl	8008526 <UART_Receive_IT>
      return;
 8007d18:	e256      	b.n	80081c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80de 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x22c>
 8007d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80d1 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <HAL_UART_IRQHandler+0xae>
 8007d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f043 0201 	orr.w	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <HAL_UART_IRQHandler+0xd2>
 8007d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d005      	beq.n	8007d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f043 0202 	orr.w	r2, r3, #2
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <HAL_UART_IRQHandler+0xf6>
 8007d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	f043 0204 	orr.w	r2, r3, #4
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d011      	beq.n	8007dda <HAL_UART_IRQHandler+0x126>
 8007db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d105      	bne.n	8007dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	f043 0208 	orr.w	r2, r3, #8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 81ed 	beq.w	80081be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <HAL_UART_IRQHandler+0x14e>
 8007df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fb92 	bl	8008526 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b40      	cmp	r3, #64	; 0x40
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	f003 0308 	and.w	r3, r3, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <HAL_UART_IRQHandler+0x17a>
 8007e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d04f      	beq.n	8007ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa9a 	bl	8008368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d141      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3314      	adds	r3, #20
 8007e48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3314      	adds	r3, #20
 8007e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1d9      	bne.n	8007e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d013      	beq.n	8007ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	4a7d      	ldr	r2, [pc, #500]	; (8008090 <HAL_UART_IRQHandler+0x3dc>)
 8007e9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fc f97d 	bl	80041a2 <HAL_DMA_Abort_IT>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d016      	beq.n	8007edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebc:	e00e      	b.n	8007edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f990 	bl	80081e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec4:	e00a      	b.n	8007edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f98c 	bl	80081e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ecc:	e006      	b.n	8007edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f988 	bl	80081e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007eda:	e170      	b.n	80081be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007edc:	bf00      	nop
    return;
 8007ede:	e16e      	b.n	80081be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	f040 814a 	bne.w	800817e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 8143 	beq.w	800817e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007efc:	f003 0310 	and.w	r3, r3, #16
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 813c 	beq.w	800817e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	60bb      	str	r3, [r7, #8]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b40      	cmp	r3, #64	; 0x40
 8007f28:	f040 80b4 	bne.w	8008094 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8140 	beq.w	80081c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	f080 8139 	bcs.w	80081c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f62:	f000 8088 	beq.w	8008076 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1d9      	bne.n	8007f66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3314      	adds	r3, #20
 8007fb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fc4:	f023 0301 	bic.w	r3, r3, #1
 8007fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e1      	bne.n	8007fb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3314      	adds	r3, #20
 800800e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008012:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008014:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008018:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e3      	bne.n	8007fee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800803e:	e853 3f00 	ldrex	r3, [r3]
 8008042:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008046:	f023 0310 	bic.w	r3, r3, #16
 800804a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008058:	65ba      	str	r2, [r7, #88]	; 0x58
 800805a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800805e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e3      	bne.n	8008034 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	4618      	mov	r0, r3
 8008072:	f7fc f826 	bl	80040c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800807e:	b29b      	uxth	r3, r3
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	b29b      	uxth	r3, r3
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8b6 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800808c:	e099      	b.n	80081c2 <HAL_UART_IRQHandler+0x50e>
 800808e:	bf00      	nop
 8008090:	0800842f 	.word	0x0800842f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800809c:	b29b      	uxth	r3, r3
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 808b 	beq.w	80081c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8086 	beq.w	80081c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	330c      	adds	r3, #12
 80080c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	330c      	adds	r3, #12
 80080da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080de:	647a      	str	r2, [r7, #68]	; 0x44
 80080e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e3      	bne.n	80080ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3314      	adds	r3, #20
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	623b      	str	r3, [r7, #32]
   return(result);
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3314      	adds	r3, #20
 8008112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008116:	633a      	str	r2, [r7, #48]	; 0x30
 8008118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800811c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e3      	bne.n	80080f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2220      	movs	r2, #32
 800812e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	330c      	adds	r3, #12
 800813e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	60fb      	str	r3, [r7, #12]
   return(result);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0310 	bic.w	r3, r3, #16
 800814e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	330c      	adds	r3, #12
 8008158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800815c:	61fa      	str	r2, [r7, #28]
 800815e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	69b9      	ldr	r1, [r7, #24]
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	617b      	str	r3, [r7, #20]
   return(result);
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e3      	bne.n	8008138 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f83e 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800817c:	e023      	b.n	80081c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_UART_IRQHandler+0x4ea>
 800818a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f95d 	bl	8008456 <UART_Transmit_IT>
    return;
 800819c:	e014      	b.n	80081c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800819e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00e      	beq.n	80081c8 <HAL_UART_IRQHandler+0x514>
 80081aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d008      	beq.n	80081c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f99d 	bl	80084f6 <UART_EndTransmit_IT>
    return;
 80081bc:	e004      	b.n	80081c8 <HAL_UART_IRQHandler+0x514>
    return;
 80081be:	bf00      	nop
 80081c0:	e002      	b.n	80081c8 <HAL_UART_IRQHandler+0x514>
      return;
 80081c2:	bf00      	nop
 80081c4:	e000      	b.n	80081c8 <HAL_UART_IRQHandler+0x514>
      return;
 80081c6:	bf00      	nop
  }
}
 80081c8:	37e8      	adds	r7, #232	; 0xe8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop

080081d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b090      	sub	sp, #64	; 0x40
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	4613      	mov	r3, r2
 800821e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008220:	e050      	b.n	80082c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008228:	d04c      	beq.n	80082c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800822a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <UART_WaitOnFlagUntilTimeout+0x30>
 8008230:	f7fb f9f6 	bl	8003620 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800823c:	429a      	cmp	r2, r3
 800823e:	d241      	bcs.n	80082c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	330c      	adds	r3, #12
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008260:	637a      	str	r2, [r7, #52]	; 0x34
 8008262:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e5      	bne.n	8008240 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3314      	adds	r3, #20
 800827a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	613b      	str	r3, [r7, #16]
   return(result);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	63bb      	str	r3, [r7, #56]	; 0x38
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3314      	adds	r3, #20
 8008292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008294:	623a      	str	r2, [r7, #32]
 8008296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	6a3a      	ldr	r2, [r7, #32]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e5      	bne.n	8008274 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e00f      	b.n	80082e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4013      	ands	r3, r2
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	bf0c      	ite	eq
 80082d4:	2301      	moveq	r3, #1
 80082d6:	2300      	movne	r3, #0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d09f      	beq.n	8008222 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3740      	adds	r7, #64	; 0x40
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	88fa      	ldrh	r2, [r7, #6]
 8008304:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2222      	movs	r2, #34	; 0x22
 8008316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d007      	beq.n	800833a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008338:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	695a      	ldr	r2, [r3, #20]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0201 	orr.w	r2, r2, #1
 8008348:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0220 	orr.w	r2, r2, #32
 8008358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b095      	sub	sp, #84	; 0x54
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	330c      	adds	r3, #12
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	330c      	adds	r3, #12
 800838e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008390:	643a      	str	r2, [r7, #64]	; 0x40
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e5      	bne.n	8008370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f023 0301 	bic.w	r3, r3, #1
 80083ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3314      	adds	r3, #20
 80083c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e5      	bne.n	80083a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d119      	bne.n	8008414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	330c      	adds	r3, #12
 80083e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f023 0310 	bic.w	r3, r3, #16
 80083f6:	647b      	str	r3, [r7, #68]	; 0x44
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008400:	61ba      	str	r2, [r7, #24]
 8008402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6979      	ldr	r1, [r7, #20]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	613b      	str	r3, [r7, #16]
   return(result);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e5      	bne.n	80083e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2220      	movs	r2, #32
 8008418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008422:	bf00      	nop
 8008424:	3754      	adds	r7, #84	; 0x54
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7ff fecb 	bl	80081e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008456:	b480      	push	{r7}
 8008458:	b085      	sub	sp, #20
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b21      	cmp	r3, #33	; 0x21
 8008468:	d13e      	bne.n	80084e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008472:	d114      	bne.n	800849e <UART_Transmit_IT+0x48>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d110      	bne.n	800849e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008490:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	1c9a      	adds	r2, r3, #2
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	621a      	str	r2, [r3, #32]
 800849c:	e008      	b.n	80084b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	1c59      	adds	r1, r3, #1
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6211      	str	r1, [r2, #32]
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	4619      	mov	r1, r3
 80084be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10f      	bne.n	80084e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	e000      	b.n	80084ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084e8:	2302      	movs	r3, #2
  }
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7ff fe5a 	bl	80081d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b08c      	sub	sp, #48	; 0x30
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b22      	cmp	r3, #34	; 0x22
 8008538:	f040 80ab 	bne.w	8008692 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008544:	d117      	bne.n	8008576 <UART_Receive_IT+0x50>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d113      	bne.n	8008576 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800854e:	2300      	movs	r3, #0
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008564:	b29a      	uxth	r2, r3
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	1c9a      	adds	r2, r3, #2
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	629a      	str	r2, [r3, #40]	; 0x28
 8008574:	e026      	b.n	80085c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008588:	d007      	beq.n	800859a <UART_Receive_IT+0x74>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <UART_Receive_IT+0x82>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	e008      	b.n	80085ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	4619      	mov	r1, r3
 80085d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d15a      	bne.n	800868e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0220 	bic.w	r2, r2, #32
 80085e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	695a      	ldr	r2, [r3, #20]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0201 	bic.w	r2, r2, #1
 8008606:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2220      	movs	r2, #32
 800860c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	2b01      	cmp	r3, #1
 8008616:	d135      	bne.n	8008684 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	330c      	adds	r3, #12
 8008624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	613b      	str	r3, [r7, #16]
   return(result);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f023 0310 	bic.w	r3, r3, #16
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	330c      	adds	r3, #12
 800863c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863e:	623a      	str	r2, [r7, #32]
 8008640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	69f9      	ldr	r1, [r7, #28]
 8008644:	6a3a      	ldr	r2, [r7, #32]
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	61bb      	str	r3, [r7, #24]
   return(result);
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e5      	bne.n	800861e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0310 	and.w	r3, r3, #16
 800865c:	2b10      	cmp	r3, #16
 800865e:	d10a      	bne.n	8008676 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff fdbb 	bl	80081f8 <HAL_UARTEx_RxEventCallback>
 8008682:	e002      	b.n	800868a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7f9 f86b 	bl	8001760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	e002      	b.n	8008694 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	e000      	b.n	8008694 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008692:	2302      	movs	r3, #2
  }
}
 8008694:	4618      	mov	r0, r3
 8008696:	3730      	adds	r7, #48	; 0x30
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800869c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086a0:	b0c0      	sub	sp, #256	; 0x100
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b8:	68d9      	ldr	r1, [r3, #12]
 80086ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	ea40 0301 	orr.w	r3, r0, r1
 80086c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	431a      	orrs	r2, r3
 80086dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80086f4:	f021 010c 	bic.w	r1, r1, #12
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008702:	430b      	orrs	r3, r1
 8008704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008716:	6999      	ldr	r1, [r3, #24]
 8008718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	ea40 0301 	orr.w	r3, r0, r1
 8008722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	4b8f      	ldr	r3, [pc, #572]	; (8008968 <UART_SetConfig+0x2cc>)
 800872c:	429a      	cmp	r2, r3
 800872e:	d005      	beq.n	800873c <UART_SetConfig+0xa0>
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b8d      	ldr	r3, [pc, #564]	; (800896c <UART_SetConfig+0x2d0>)
 8008738:	429a      	cmp	r2, r3
 800873a:	d104      	bne.n	8008746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800873c:	f7fe fcc8 	bl	80070d0 <HAL_RCC_GetPCLK2Freq>
 8008740:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008744:	e003      	b.n	800874e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008746:	f7fe fcaf 	bl	80070a8 <HAL_RCC_GetPCLK1Freq>
 800874a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800874e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008758:	f040 810c 	bne.w	8008974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800875c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008760:	2200      	movs	r2, #0
 8008762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008766:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800876a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800876e:	4622      	mov	r2, r4
 8008770:	462b      	mov	r3, r5
 8008772:	1891      	adds	r1, r2, r2
 8008774:	65b9      	str	r1, [r7, #88]	; 0x58
 8008776:	415b      	adcs	r3, r3
 8008778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800877a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800877e:	4621      	mov	r1, r4
 8008780:	eb12 0801 	adds.w	r8, r2, r1
 8008784:	4629      	mov	r1, r5
 8008786:	eb43 0901 	adc.w	r9, r3, r1
 800878a:	f04f 0200 	mov.w	r2, #0
 800878e:	f04f 0300 	mov.w	r3, #0
 8008792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800879a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800879e:	4690      	mov	r8, r2
 80087a0:	4699      	mov	r9, r3
 80087a2:	4623      	mov	r3, r4
 80087a4:	eb18 0303 	adds.w	r3, r8, r3
 80087a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087ac:	462b      	mov	r3, r5
 80087ae:	eb49 0303 	adc.w	r3, r9, r3
 80087b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087ca:	460b      	mov	r3, r1
 80087cc:	18db      	adds	r3, r3, r3
 80087ce:	653b      	str	r3, [r7, #80]	; 0x50
 80087d0:	4613      	mov	r3, r2
 80087d2:	eb42 0303 	adc.w	r3, r2, r3
 80087d6:	657b      	str	r3, [r7, #84]	; 0x54
 80087d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80087e0:	f7f8 fa82 	bl	8000ce8 <__aeabi_uldivmod>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4b61      	ldr	r3, [pc, #388]	; (8008970 <UART_SetConfig+0x2d4>)
 80087ea:	fba3 2302 	umull	r2, r3, r3, r2
 80087ee:	095b      	lsrs	r3, r3, #5
 80087f0:	011c      	lsls	r4, r3, #4
 80087f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008804:	4642      	mov	r2, r8
 8008806:	464b      	mov	r3, r9
 8008808:	1891      	adds	r1, r2, r2
 800880a:	64b9      	str	r1, [r7, #72]	; 0x48
 800880c:	415b      	adcs	r3, r3
 800880e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008814:	4641      	mov	r1, r8
 8008816:	eb12 0a01 	adds.w	sl, r2, r1
 800881a:	4649      	mov	r1, r9
 800881c:	eb43 0b01 	adc.w	fp, r3, r1
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	f04f 0300 	mov.w	r3, #0
 8008828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800882c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008834:	4692      	mov	sl, r2
 8008836:	469b      	mov	fp, r3
 8008838:	4643      	mov	r3, r8
 800883a:	eb1a 0303 	adds.w	r3, sl, r3
 800883e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008842:	464b      	mov	r3, r9
 8008844:	eb4b 0303 	adc.w	r3, fp, r3
 8008848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800884c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008858:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800885c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008860:	460b      	mov	r3, r1
 8008862:	18db      	adds	r3, r3, r3
 8008864:	643b      	str	r3, [r7, #64]	; 0x40
 8008866:	4613      	mov	r3, r2
 8008868:	eb42 0303 	adc.w	r3, r2, r3
 800886c:	647b      	str	r3, [r7, #68]	; 0x44
 800886e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008876:	f7f8 fa37 	bl	8000ce8 <__aeabi_uldivmod>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4611      	mov	r1, r2
 8008880:	4b3b      	ldr	r3, [pc, #236]	; (8008970 <UART_SetConfig+0x2d4>)
 8008882:	fba3 2301 	umull	r2, r3, r3, r1
 8008886:	095b      	lsrs	r3, r3, #5
 8008888:	2264      	movs	r2, #100	; 0x64
 800888a:	fb02 f303 	mul.w	r3, r2, r3
 800888e:	1acb      	subs	r3, r1, r3
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008896:	4b36      	ldr	r3, [pc, #216]	; (8008970 <UART_SetConfig+0x2d4>)
 8008898:	fba3 2302 	umull	r2, r3, r3, r2
 800889c:	095b      	lsrs	r3, r3, #5
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088a4:	441c      	add	r4, r3
 80088a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80088b8:	4642      	mov	r2, r8
 80088ba:	464b      	mov	r3, r9
 80088bc:	1891      	adds	r1, r2, r2
 80088be:	63b9      	str	r1, [r7, #56]	; 0x38
 80088c0:	415b      	adcs	r3, r3
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088c8:	4641      	mov	r1, r8
 80088ca:	1851      	adds	r1, r2, r1
 80088cc:	6339      	str	r1, [r7, #48]	; 0x30
 80088ce:	4649      	mov	r1, r9
 80088d0:	414b      	adcs	r3, r1
 80088d2:	637b      	str	r3, [r7, #52]	; 0x34
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	f04f 0300 	mov.w	r3, #0
 80088dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80088e0:	4659      	mov	r1, fp
 80088e2:	00cb      	lsls	r3, r1, #3
 80088e4:	4651      	mov	r1, sl
 80088e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ea:	4651      	mov	r1, sl
 80088ec:	00ca      	lsls	r2, r1, #3
 80088ee:	4610      	mov	r0, r2
 80088f0:	4619      	mov	r1, r3
 80088f2:	4603      	mov	r3, r0
 80088f4:	4642      	mov	r2, r8
 80088f6:	189b      	adds	r3, r3, r2
 80088f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088fc:	464b      	mov	r3, r9
 80088fe:	460a      	mov	r2, r1
 8008900:	eb42 0303 	adc.w	r3, r2, r3
 8008904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008914:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800891c:	460b      	mov	r3, r1
 800891e:	18db      	adds	r3, r3, r3
 8008920:	62bb      	str	r3, [r7, #40]	; 0x28
 8008922:	4613      	mov	r3, r2
 8008924:	eb42 0303 	adc.w	r3, r2, r3
 8008928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800892e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008932:	f7f8 f9d9 	bl	8000ce8 <__aeabi_uldivmod>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <UART_SetConfig+0x2d4>)
 800893c:	fba3 1302 	umull	r1, r3, r3, r2
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	2164      	movs	r1, #100	; 0x64
 8008944:	fb01 f303 	mul.w	r3, r1, r3
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	3332      	adds	r3, #50	; 0x32
 800894e:	4a08      	ldr	r2, [pc, #32]	; (8008970 <UART_SetConfig+0x2d4>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	f003 0207 	and.w	r2, r3, #7
 800895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4422      	add	r2, r4
 8008962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008964:	e105      	b.n	8008b72 <UART_SetConfig+0x4d6>
 8008966:	bf00      	nop
 8008968:	40011000 	.word	0x40011000
 800896c:	40011400 	.word	0x40011400
 8008970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008978:	2200      	movs	r2, #0
 800897a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800897e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008986:	4642      	mov	r2, r8
 8008988:	464b      	mov	r3, r9
 800898a:	1891      	adds	r1, r2, r2
 800898c:	6239      	str	r1, [r7, #32]
 800898e:	415b      	adcs	r3, r3
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
 8008992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008996:	4641      	mov	r1, r8
 8008998:	1854      	adds	r4, r2, r1
 800899a:	4649      	mov	r1, r9
 800899c:	eb43 0501 	adc.w	r5, r3, r1
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	f04f 0300 	mov.w	r3, #0
 80089a8:	00eb      	lsls	r3, r5, #3
 80089aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089ae:	00e2      	lsls	r2, r4, #3
 80089b0:	4614      	mov	r4, r2
 80089b2:	461d      	mov	r5, r3
 80089b4:	4643      	mov	r3, r8
 80089b6:	18e3      	adds	r3, r4, r3
 80089b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089bc:	464b      	mov	r3, r9
 80089be:	eb45 0303 	adc.w	r3, r5, r3
 80089c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089d6:	f04f 0200 	mov.w	r2, #0
 80089da:	f04f 0300 	mov.w	r3, #0
 80089de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80089e2:	4629      	mov	r1, r5
 80089e4:	008b      	lsls	r3, r1, #2
 80089e6:	4621      	mov	r1, r4
 80089e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ec:	4621      	mov	r1, r4
 80089ee:	008a      	lsls	r2, r1, #2
 80089f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80089f4:	f7f8 f978 	bl	8000ce8 <__aeabi_uldivmod>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4b60      	ldr	r3, [pc, #384]	; (8008b80 <UART_SetConfig+0x4e4>)
 80089fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	011c      	lsls	r4, r3, #4
 8008a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a18:	4642      	mov	r2, r8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	1891      	adds	r1, r2, r2
 8008a1e:	61b9      	str	r1, [r7, #24]
 8008a20:	415b      	adcs	r3, r3
 8008a22:	61fb      	str	r3, [r7, #28]
 8008a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a28:	4641      	mov	r1, r8
 8008a2a:	1851      	adds	r1, r2, r1
 8008a2c:	6139      	str	r1, [r7, #16]
 8008a2e:	4649      	mov	r1, r9
 8008a30:	414b      	adcs	r3, r1
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a40:	4659      	mov	r1, fp
 8008a42:	00cb      	lsls	r3, r1, #3
 8008a44:	4651      	mov	r1, sl
 8008a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a4a:	4651      	mov	r1, sl
 8008a4c:	00ca      	lsls	r2, r1, #3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4619      	mov	r1, r3
 8008a52:	4603      	mov	r3, r0
 8008a54:	4642      	mov	r2, r8
 8008a56:	189b      	adds	r3, r3, r2
 8008a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a5c:	464b      	mov	r3, r9
 8008a5e:	460a      	mov	r2, r1
 8008a60:	eb42 0303 	adc.w	r3, r2, r3
 8008a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	f04f 0300 	mov.w	r3, #0
 8008a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a80:	4649      	mov	r1, r9
 8008a82:	008b      	lsls	r3, r1, #2
 8008a84:	4641      	mov	r1, r8
 8008a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	008a      	lsls	r2, r1, #2
 8008a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a92:	f7f8 f929 	bl	8000ce8 <__aeabi_uldivmod>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4b39      	ldr	r3, [pc, #228]	; (8008b80 <UART_SetConfig+0x4e4>)
 8008a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008aa0:	095b      	lsrs	r3, r3, #5
 8008aa2:	2164      	movs	r1, #100	; 0x64
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	011b      	lsls	r3, r3, #4
 8008aac:	3332      	adds	r3, #50	; 0x32
 8008aae:	4a34      	ldr	r2, [pc, #208]	; (8008b80 <UART_SetConfig+0x4e4>)
 8008ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aba:	441c      	add	r4, r3
 8008abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ac4:	677a      	str	r2, [r7, #116]	; 0x74
 8008ac6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008aca:	4642      	mov	r2, r8
 8008acc:	464b      	mov	r3, r9
 8008ace:	1891      	adds	r1, r2, r2
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	415b      	adcs	r3, r3
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ada:	4641      	mov	r1, r8
 8008adc:	1851      	adds	r1, r2, r1
 8008ade:	6039      	str	r1, [r7, #0]
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	414b      	adcs	r3, r1
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	f04f 0300 	mov.w	r3, #0
 8008aee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008af2:	4659      	mov	r1, fp
 8008af4:	00cb      	lsls	r3, r1, #3
 8008af6:	4651      	mov	r1, sl
 8008af8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008afc:	4651      	mov	r1, sl
 8008afe:	00ca      	lsls	r2, r1, #3
 8008b00:	4610      	mov	r0, r2
 8008b02:	4619      	mov	r1, r3
 8008b04:	4603      	mov	r3, r0
 8008b06:	4642      	mov	r2, r8
 8008b08:	189b      	adds	r3, r3, r2
 8008b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	460a      	mov	r2, r1
 8008b10:	eb42 0303 	adc.w	r3, r2, r3
 8008b14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b20:	667a      	str	r2, [r7, #100]	; 0x64
 8008b22:	f04f 0200 	mov.w	r2, #0
 8008b26:	f04f 0300 	mov.w	r3, #0
 8008b2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b2e:	4649      	mov	r1, r9
 8008b30:	008b      	lsls	r3, r1, #2
 8008b32:	4641      	mov	r1, r8
 8008b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b38:	4641      	mov	r1, r8
 8008b3a:	008a      	lsls	r2, r1, #2
 8008b3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b40:	f7f8 f8d2 	bl	8000ce8 <__aeabi_uldivmod>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <UART_SetConfig+0x4e4>)
 8008b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b4e:	095b      	lsrs	r3, r3, #5
 8008b50:	2164      	movs	r1, #100	; 0x64
 8008b52:	fb01 f303 	mul.w	r3, r1, r3
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	3332      	adds	r3, #50	; 0x32
 8008b5c:	4a08      	ldr	r2, [pc, #32]	; (8008b80 <UART_SetConfig+0x4e4>)
 8008b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b62:	095b      	lsrs	r3, r3, #5
 8008b64:	f003 020f 	and.w	r2, r3, #15
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4422      	add	r2, r4
 8008b70:	609a      	str	r2, [r3, #8]
}
 8008b72:	bf00      	nop
 8008b74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b7e:	bf00      	nop
 8008b80:	51eb851f 	.word	0x51eb851f

08008b84 <atoi>:
 8008b84:	220a      	movs	r2, #10
 8008b86:	2100      	movs	r1, #0
 8008b88:	f001 bdf6 	b.w	800a778 <strtol>

08008b8c <__errno>:
 8008b8c:	4b01      	ldr	r3, [pc, #4]	; (8008b94 <__errno+0x8>)
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2000000c 	.word	0x2000000c

08008b98 <__libc_init_array>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	4d0d      	ldr	r5, [pc, #52]	; (8008bd0 <__libc_init_array+0x38>)
 8008b9c:	4c0d      	ldr	r4, [pc, #52]	; (8008bd4 <__libc_init_array+0x3c>)
 8008b9e:	1b64      	subs	r4, r4, r5
 8008ba0:	10a4      	asrs	r4, r4, #2
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	42a6      	cmp	r6, r4
 8008ba6:	d109      	bne.n	8008bbc <__libc_init_array+0x24>
 8008ba8:	4d0b      	ldr	r5, [pc, #44]	; (8008bd8 <__libc_init_array+0x40>)
 8008baa:	4c0c      	ldr	r4, [pc, #48]	; (8008bdc <__libc_init_array+0x44>)
 8008bac:	f004 fd14 	bl	800d5d8 <_init>
 8008bb0:	1b64      	subs	r4, r4, r5
 8008bb2:	10a4      	asrs	r4, r4, #2
 8008bb4:	2600      	movs	r6, #0
 8008bb6:	42a6      	cmp	r6, r4
 8008bb8:	d105      	bne.n	8008bc6 <__libc_init_array+0x2e>
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc0:	4798      	blx	r3
 8008bc2:	3601      	adds	r6, #1
 8008bc4:	e7ee      	b.n	8008ba4 <__libc_init_array+0xc>
 8008bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bca:	4798      	blx	r3
 8008bcc:	3601      	adds	r6, #1
 8008bce:	e7f2      	b.n	8008bb6 <__libc_init_array+0x1e>
 8008bd0:	0800dce8 	.word	0x0800dce8
 8008bd4:	0800dce8 	.word	0x0800dce8
 8008bd8:	0800dce8 	.word	0x0800dce8
 8008bdc:	0800dcec 	.word	0x0800dcec

08008be0 <memset>:
 8008be0:	4402      	add	r2, r0
 8008be2:	4603      	mov	r3, r0
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d100      	bne.n	8008bea <memset+0xa>
 8008be8:	4770      	bx	lr
 8008bea:	f803 1b01 	strb.w	r1, [r3], #1
 8008bee:	e7f9      	b.n	8008be4 <memset+0x4>

08008bf0 <__cvt>:
 8008bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	ec55 4b10 	vmov	r4, r5, d0
 8008bf8:	2d00      	cmp	r5, #0
 8008bfa:	460e      	mov	r6, r1
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	462b      	mov	r3, r5
 8008c00:	bfbb      	ittet	lt
 8008c02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c06:	461d      	movlt	r5, r3
 8008c08:	2300      	movge	r3, #0
 8008c0a:	232d      	movlt	r3, #45	; 0x2d
 8008c0c:	700b      	strb	r3, [r1, #0]
 8008c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c14:	4691      	mov	r9, r2
 8008c16:	f023 0820 	bic.w	r8, r3, #32
 8008c1a:	bfbc      	itt	lt
 8008c1c:	4622      	movlt	r2, r4
 8008c1e:	4614      	movlt	r4, r2
 8008c20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c24:	d005      	beq.n	8008c32 <__cvt+0x42>
 8008c26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c2a:	d100      	bne.n	8008c2e <__cvt+0x3e>
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	2102      	movs	r1, #2
 8008c30:	e000      	b.n	8008c34 <__cvt+0x44>
 8008c32:	2103      	movs	r1, #3
 8008c34:	ab03      	add	r3, sp, #12
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	ab02      	add	r3, sp, #8
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	ec45 4b10 	vmov	d0, r4, r5
 8008c40:	4653      	mov	r3, sl
 8008c42:	4632      	mov	r2, r6
 8008c44:	f001 fe4c 	bl	800a8e0 <_dtoa_r>
 8008c48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	d102      	bne.n	8008c56 <__cvt+0x66>
 8008c50:	f019 0f01 	tst.w	r9, #1
 8008c54:	d022      	beq.n	8008c9c <__cvt+0xac>
 8008c56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c5a:	eb07 0906 	add.w	r9, r7, r6
 8008c5e:	d110      	bne.n	8008c82 <__cvt+0x92>
 8008c60:	783b      	ldrb	r3, [r7, #0]
 8008c62:	2b30      	cmp	r3, #48	; 0x30
 8008c64:	d10a      	bne.n	8008c7c <__cvt+0x8c>
 8008c66:	2200      	movs	r2, #0
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	f7f7 ff5b 	bl	8000b28 <__aeabi_dcmpeq>
 8008c72:	b918      	cbnz	r0, 8008c7c <__cvt+0x8c>
 8008c74:	f1c6 0601 	rsb	r6, r6, #1
 8008c78:	f8ca 6000 	str.w	r6, [sl]
 8008c7c:	f8da 3000 	ldr.w	r3, [sl]
 8008c80:	4499      	add	r9, r3
 8008c82:	2200      	movs	r2, #0
 8008c84:	2300      	movs	r3, #0
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7f7 ff4d 	bl	8000b28 <__aeabi_dcmpeq>
 8008c8e:	b108      	cbz	r0, 8008c94 <__cvt+0xa4>
 8008c90:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c94:	2230      	movs	r2, #48	; 0x30
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	454b      	cmp	r3, r9
 8008c9a:	d307      	bcc.n	8008cac <__cvt+0xbc>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ca0:	1bdb      	subs	r3, r3, r7
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	b004      	add	sp, #16
 8008ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cac:	1c59      	adds	r1, r3, #1
 8008cae:	9103      	str	r1, [sp, #12]
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	e7f0      	b.n	8008c96 <__cvt+0xa6>

08008cb4 <__exponent>:
 8008cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	bfb8      	it	lt
 8008cbc:	4249      	neglt	r1, r1
 8008cbe:	f803 2b02 	strb.w	r2, [r3], #2
 8008cc2:	bfb4      	ite	lt
 8008cc4:	222d      	movlt	r2, #45	; 0x2d
 8008cc6:	222b      	movge	r2, #43	; 0x2b
 8008cc8:	2909      	cmp	r1, #9
 8008cca:	7042      	strb	r2, [r0, #1]
 8008ccc:	dd2a      	ble.n	8008d24 <__exponent+0x70>
 8008cce:	f10d 0407 	add.w	r4, sp, #7
 8008cd2:	46a4      	mov	ip, r4
 8008cd4:	270a      	movs	r7, #10
 8008cd6:	46a6      	mov	lr, r4
 8008cd8:	460a      	mov	r2, r1
 8008cda:	fb91 f6f7 	sdiv	r6, r1, r7
 8008cde:	fb07 1516 	mls	r5, r7, r6, r1
 8008ce2:	3530      	adds	r5, #48	; 0x30
 8008ce4:	2a63      	cmp	r2, #99	; 0x63
 8008ce6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008cee:	4631      	mov	r1, r6
 8008cf0:	dcf1      	bgt.n	8008cd6 <__exponent+0x22>
 8008cf2:	3130      	adds	r1, #48	; 0x30
 8008cf4:	f1ae 0502 	sub.w	r5, lr, #2
 8008cf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cfc:	1c44      	adds	r4, r0, #1
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4561      	cmp	r1, ip
 8008d02:	d30a      	bcc.n	8008d1a <__exponent+0x66>
 8008d04:	f10d 0209 	add.w	r2, sp, #9
 8008d08:	eba2 020e 	sub.w	r2, r2, lr
 8008d0c:	4565      	cmp	r5, ip
 8008d0e:	bf88      	it	hi
 8008d10:	2200      	movhi	r2, #0
 8008d12:	4413      	add	r3, r2
 8008d14:	1a18      	subs	r0, r3, r0
 8008d16:	b003      	add	sp, #12
 8008d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d22:	e7ed      	b.n	8008d00 <__exponent+0x4c>
 8008d24:	2330      	movs	r3, #48	; 0x30
 8008d26:	3130      	adds	r1, #48	; 0x30
 8008d28:	7083      	strb	r3, [r0, #2]
 8008d2a:	70c1      	strb	r1, [r0, #3]
 8008d2c:	1d03      	adds	r3, r0, #4
 8008d2e:	e7f1      	b.n	8008d14 <__exponent+0x60>

08008d30 <_printf_float>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	ed2d 8b02 	vpush	{d8}
 8008d38:	b08d      	sub	sp, #52	; 0x34
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d40:	4616      	mov	r6, r2
 8008d42:	461f      	mov	r7, r3
 8008d44:	4605      	mov	r5, r0
 8008d46:	f002 ff3b 	bl	800bbc0 <_localeconv_r>
 8008d4a:	f8d0 a000 	ldr.w	sl, [r0]
 8008d4e:	4650      	mov	r0, sl
 8008d50:	f7f7 fa68 	bl	8000224 <strlen>
 8008d54:	2300      	movs	r3, #0
 8008d56:	930a      	str	r3, [sp, #40]	; 0x28
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	9305      	str	r3, [sp, #20]
 8008d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008d64:	3307      	adds	r3, #7
 8008d66:	f023 0307 	bic.w	r3, r3, #7
 8008d6a:	f103 0208 	add.w	r2, r3, #8
 8008d6e:	f8c8 2000 	str.w	r2, [r8]
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d82:	9307      	str	r3, [sp, #28]
 8008d84:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d88:	ee08 0a10 	vmov	s16, r0
 8008d8c:	4b9f      	ldr	r3, [pc, #636]	; (800900c <_printf_float+0x2dc>)
 8008d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295
 8008d96:	f7f7 fef9 	bl	8000b8c <__aeabi_dcmpun>
 8008d9a:	bb88      	cbnz	r0, 8008e00 <_printf_float+0xd0>
 8008d9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008da0:	4b9a      	ldr	r3, [pc, #616]	; (800900c <_printf_float+0x2dc>)
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295
 8008da6:	f7f7 fed3 	bl	8000b50 <__aeabi_dcmple>
 8008daa:	bb48      	cbnz	r0, 8008e00 <_printf_float+0xd0>
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	4640      	mov	r0, r8
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7f7 fec2 	bl	8000b3c <__aeabi_dcmplt>
 8008db8:	b110      	cbz	r0, 8008dc0 <_printf_float+0x90>
 8008dba:	232d      	movs	r3, #45	; 0x2d
 8008dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dc0:	4b93      	ldr	r3, [pc, #588]	; (8009010 <_printf_float+0x2e0>)
 8008dc2:	4894      	ldr	r0, [pc, #592]	; (8009014 <_printf_float+0x2e4>)
 8008dc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008dc8:	bf94      	ite	ls
 8008dca:	4698      	movls	r8, r3
 8008dcc:	4680      	movhi	r8, r0
 8008dce:	2303      	movs	r3, #3
 8008dd0:	6123      	str	r3, [r4, #16]
 8008dd2:	9b05      	ldr	r3, [sp, #20]
 8008dd4:	f023 0204 	bic.w	r2, r3, #4
 8008dd8:	6022      	str	r2, [r4, #0]
 8008dda:	f04f 0900 	mov.w	r9, #0
 8008dde:	9700      	str	r7, [sp, #0]
 8008de0:	4633      	mov	r3, r6
 8008de2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008de4:	4621      	mov	r1, r4
 8008de6:	4628      	mov	r0, r5
 8008de8:	f000 f9d8 	bl	800919c <_printf_common>
 8008dec:	3001      	adds	r0, #1
 8008dee:	f040 8090 	bne.w	8008f12 <_printf_float+0x1e2>
 8008df2:	f04f 30ff 	mov.w	r0, #4294967295
 8008df6:	b00d      	add	sp, #52	; 0x34
 8008df8:	ecbd 8b02 	vpop	{d8}
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	4640      	mov	r0, r8
 8008e06:	4649      	mov	r1, r9
 8008e08:	f7f7 fec0 	bl	8000b8c <__aeabi_dcmpun>
 8008e0c:	b140      	cbz	r0, 8008e20 <_printf_float+0xf0>
 8008e0e:	464b      	mov	r3, r9
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bfbc      	itt	lt
 8008e14:	232d      	movlt	r3, #45	; 0x2d
 8008e16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e1a:	487f      	ldr	r0, [pc, #508]	; (8009018 <_printf_float+0x2e8>)
 8008e1c:	4b7f      	ldr	r3, [pc, #508]	; (800901c <_printf_float+0x2ec>)
 8008e1e:	e7d1      	b.n	8008dc4 <_printf_float+0x94>
 8008e20:	6863      	ldr	r3, [r4, #4]
 8008e22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e26:	9206      	str	r2, [sp, #24]
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	d13f      	bne.n	8008eac <_printf_float+0x17c>
 8008e2c:	2306      	movs	r3, #6
 8008e2e:	6063      	str	r3, [r4, #4]
 8008e30:	9b05      	ldr	r3, [sp, #20]
 8008e32:	6861      	ldr	r1, [r4, #4]
 8008e34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9303      	str	r3, [sp, #12]
 8008e3c:	ab0a      	add	r3, sp, #40	; 0x28
 8008e3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e42:	ab09      	add	r3, sp, #36	; 0x24
 8008e44:	ec49 8b10 	vmov	d0, r8, r9
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e50:	4628      	mov	r0, r5
 8008e52:	f7ff fecd 	bl	8008bf0 <__cvt>
 8008e56:	9b06      	ldr	r3, [sp, #24]
 8008e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e5a:	2b47      	cmp	r3, #71	; 0x47
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	d108      	bne.n	8008e72 <_printf_float+0x142>
 8008e60:	1cc8      	adds	r0, r1, #3
 8008e62:	db02      	blt.n	8008e6a <_printf_float+0x13a>
 8008e64:	6863      	ldr	r3, [r4, #4]
 8008e66:	4299      	cmp	r1, r3
 8008e68:	dd41      	ble.n	8008eee <_printf_float+0x1be>
 8008e6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008e6e:	fa5f fb8b 	uxtb.w	fp, fp
 8008e72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e76:	d820      	bhi.n	8008eba <_printf_float+0x18a>
 8008e78:	3901      	subs	r1, #1
 8008e7a:	465a      	mov	r2, fp
 8008e7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e80:	9109      	str	r1, [sp, #36]	; 0x24
 8008e82:	f7ff ff17 	bl	8008cb4 <__exponent>
 8008e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e88:	1813      	adds	r3, r2, r0
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	4681      	mov	r9, r0
 8008e8e:	6123      	str	r3, [r4, #16]
 8008e90:	dc02      	bgt.n	8008e98 <_printf_float+0x168>
 8008e92:	6822      	ldr	r2, [r4, #0]
 8008e94:	07d2      	lsls	r2, r2, #31
 8008e96:	d501      	bpl.n	8008e9c <_printf_float+0x16c>
 8008e98:	3301      	adds	r3, #1
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d09c      	beq.n	8008dde <_printf_float+0xae>
 8008ea4:	232d      	movs	r3, #45	; 0x2d
 8008ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eaa:	e798      	b.n	8008dde <_printf_float+0xae>
 8008eac:	9a06      	ldr	r2, [sp, #24]
 8008eae:	2a47      	cmp	r2, #71	; 0x47
 8008eb0:	d1be      	bne.n	8008e30 <_printf_float+0x100>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1bc      	bne.n	8008e30 <_printf_float+0x100>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e7b9      	b.n	8008e2e <_printf_float+0xfe>
 8008eba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ebe:	d118      	bne.n	8008ef2 <_printf_float+0x1c2>
 8008ec0:	2900      	cmp	r1, #0
 8008ec2:	6863      	ldr	r3, [r4, #4]
 8008ec4:	dd0b      	ble.n	8008ede <_printf_float+0x1ae>
 8008ec6:	6121      	str	r1, [r4, #16]
 8008ec8:	b913      	cbnz	r3, 8008ed0 <_printf_float+0x1a0>
 8008eca:	6822      	ldr	r2, [r4, #0]
 8008ecc:	07d0      	lsls	r0, r2, #31
 8008ece:	d502      	bpl.n	8008ed6 <_printf_float+0x1a6>
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	440b      	add	r3, r1
 8008ed4:	6123      	str	r3, [r4, #16]
 8008ed6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ed8:	f04f 0900 	mov.w	r9, #0
 8008edc:	e7de      	b.n	8008e9c <_printf_float+0x16c>
 8008ede:	b913      	cbnz	r3, 8008ee6 <_printf_float+0x1b6>
 8008ee0:	6822      	ldr	r2, [r4, #0]
 8008ee2:	07d2      	lsls	r2, r2, #31
 8008ee4:	d501      	bpl.n	8008eea <_printf_float+0x1ba>
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	e7f4      	b.n	8008ed4 <_printf_float+0x1a4>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e7f2      	b.n	8008ed4 <_printf_float+0x1a4>
 8008eee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef4:	4299      	cmp	r1, r3
 8008ef6:	db05      	blt.n	8008f04 <_printf_float+0x1d4>
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	6121      	str	r1, [r4, #16]
 8008efc:	07d8      	lsls	r0, r3, #31
 8008efe:	d5ea      	bpl.n	8008ed6 <_printf_float+0x1a6>
 8008f00:	1c4b      	adds	r3, r1, #1
 8008f02:	e7e7      	b.n	8008ed4 <_printf_float+0x1a4>
 8008f04:	2900      	cmp	r1, #0
 8008f06:	bfd4      	ite	le
 8008f08:	f1c1 0202 	rsble	r2, r1, #2
 8008f0c:	2201      	movgt	r2, #1
 8008f0e:	4413      	add	r3, r2
 8008f10:	e7e0      	b.n	8008ed4 <_printf_float+0x1a4>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	055a      	lsls	r2, r3, #21
 8008f16:	d407      	bmi.n	8008f28 <_printf_float+0x1f8>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	4642      	mov	r2, r8
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b8      	blx	r7
 8008f22:	3001      	adds	r0, #1
 8008f24:	d12c      	bne.n	8008f80 <_printf_float+0x250>
 8008f26:	e764      	b.n	8008df2 <_printf_float+0xc2>
 8008f28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f2c:	f240 80e0 	bls.w	80090f0 <_printf_float+0x3c0>
 8008f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f34:	2200      	movs	r2, #0
 8008f36:	2300      	movs	r3, #0
 8008f38:	f7f7 fdf6 	bl	8000b28 <__aeabi_dcmpeq>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d034      	beq.n	8008faa <_printf_float+0x27a>
 8008f40:	4a37      	ldr	r2, [pc, #220]	; (8009020 <_printf_float+0x2f0>)
 8008f42:	2301      	movs	r3, #1
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f43f af51 	beq.w	8008df2 <_printf_float+0xc2>
 8008f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f54:	429a      	cmp	r2, r3
 8008f56:	db02      	blt.n	8008f5e <_printf_float+0x22e>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	07d8      	lsls	r0, r3, #31
 8008f5c:	d510      	bpl.n	8008f80 <_printf_float+0x250>
 8008f5e:	ee18 3a10 	vmov	r3, s16
 8008f62:	4652      	mov	r2, sl
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	f43f af41 	beq.w	8008df2 <_printf_float+0xc2>
 8008f70:	f04f 0800 	mov.w	r8, #0
 8008f74:	f104 091a 	add.w	r9, r4, #26
 8008f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4543      	cmp	r3, r8
 8008f7e:	dc09      	bgt.n	8008f94 <_printf_float+0x264>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	079b      	lsls	r3, r3, #30
 8008f84:	f100 8105 	bmi.w	8009192 <_printf_float+0x462>
 8008f88:	68e0      	ldr	r0, [r4, #12]
 8008f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f8c:	4298      	cmp	r0, r3
 8008f8e:	bfb8      	it	lt
 8008f90:	4618      	movlt	r0, r3
 8008f92:	e730      	b.n	8008df6 <_printf_float+0xc6>
 8008f94:	2301      	movs	r3, #1
 8008f96:	464a      	mov	r2, r9
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f43f af27 	beq.w	8008df2 <_printf_float+0xc2>
 8008fa4:	f108 0801 	add.w	r8, r8, #1
 8008fa8:	e7e6      	b.n	8008f78 <_printf_float+0x248>
 8008faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dc39      	bgt.n	8009024 <_printf_float+0x2f4>
 8008fb0:	4a1b      	ldr	r2, [pc, #108]	; (8009020 <_printf_float+0x2f0>)
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f af19 	beq.w	8008df2 <_printf_float+0xc2>
 8008fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	d102      	bne.n	8008fce <_printf_float+0x29e>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	07d9      	lsls	r1, r3, #31
 8008fcc:	d5d8      	bpl.n	8008f80 <_printf_float+0x250>
 8008fce:	ee18 3a10 	vmov	r3, s16
 8008fd2:	4652      	mov	r2, sl
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	f43f af09 	beq.w	8008df2 <_printf_float+0xc2>
 8008fe0:	f04f 0900 	mov.w	r9, #0
 8008fe4:	f104 0a1a 	add.w	sl, r4, #26
 8008fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fea:	425b      	negs	r3, r3
 8008fec:	454b      	cmp	r3, r9
 8008fee:	dc01      	bgt.n	8008ff4 <_printf_float+0x2c4>
 8008ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff2:	e792      	b.n	8008f1a <_printf_float+0x1ea>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4652      	mov	r2, sl
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	47b8      	blx	r7
 8008ffe:	3001      	adds	r0, #1
 8009000:	f43f aef7 	beq.w	8008df2 <_printf_float+0xc2>
 8009004:	f109 0901 	add.w	r9, r9, #1
 8009008:	e7ee      	b.n	8008fe8 <_printf_float+0x2b8>
 800900a:	bf00      	nop
 800900c:	7fefffff 	.word	0x7fefffff
 8009010:	0800d7e0 	.word	0x0800d7e0
 8009014:	0800d7e4 	.word	0x0800d7e4
 8009018:	0800d7ec 	.word	0x0800d7ec
 800901c:	0800d7e8 	.word	0x0800d7e8
 8009020:	0800d7f0 	.word	0x0800d7f0
 8009024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009028:	429a      	cmp	r2, r3
 800902a:	bfa8      	it	ge
 800902c:	461a      	movge	r2, r3
 800902e:	2a00      	cmp	r2, #0
 8009030:	4691      	mov	r9, r2
 8009032:	dc37      	bgt.n	80090a4 <_printf_float+0x374>
 8009034:	f04f 0b00 	mov.w	fp, #0
 8009038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800903c:	f104 021a 	add.w	r2, r4, #26
 8009040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	eba3 0309 	sub.w	r3, r3, r9
 8009048:	455b      	cmp	r3, fp
 800904a:	dc33      	bgt.n	80090b4 <_printf_float+0x384>
 800904c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009050:	429a      	cmp	r2, r3
 8009052:	db3b      	blt.n	80090cc <_printf_float+0x39c>
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	07da      	lsls	r2, r3, #31
 8009058:	d438      	bmi.n	80090cc <_printf_float+0x39c>
 800905a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800905c:	9a05      	ldr	r2, [sp, #20]
 800905e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009060:	1a9a      	subs	r2, r3, r2
 8009062:	eba3 0901 	sub.w	r9, r3, r1
 8009066:	4591      	cmp	r9, r2
 8009068:	bfa8      	it	ge
 800906a:	4691      	movge	r9, r2
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	dc35      	bgt.n	80090de <_printf_float+0x3ae>
 8009072:	f04f 0800 	mov.w	r8, #0
 8009076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800907a:	f104 0a1a 	add.w	sl, r4, #26
 800907e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	eba3 0309 	sub.w	r3, r3, r9
 8009088:	4543      	cmp	r3, r8
 800908a:	f77f af79 	ble.w	8008f80 <_printf_float+0x250>
 800908e:	2301      	movs	r3, #1
 8009090:	4652      	mov	r2, sl
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	47b8      	blx	r7
 8009098:	3001      	adds	r0, #1
 800909a:	f43f aeaa 	beq.w	8008df2 <_printf_float+0xc2>
 800909e:	f108 0801 	add.w	r8, r8, #1
 80090a2:	e7ec      	b.n	800907e <_printf_float+0x34e>
 80090a4:	4613      	mov	r3, r2
 80090a6:	4631      	mov	r1, r6
 80090a8:	4642      	mov	r2, r8
 80090aa:	4628      	mov	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	3001      	adds	r0, #1
 80090b0:	d1c0      	bne.n	8009034 <_printf_float+0x304>
 80090b2:	e69e      	b.n	8008df2 <_printf_float+0xc2>
 80090b4:	2301      	movs	r3, #1
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	9205      	str	r2, [sp, #20]
 80090bc:	47b8      	blx	r7
 80090be:	3001      	adds	r0, #1
 80090c0:	f43f ae97 	beq.w	8008df2 <_printf_float+0xc2>
 80090c4:	9a05      	ldr	r2, [sp, #20]
 80090c6:	f10b 0b01 	add.w	fp, fp, #1
 80090ca:	e7b9      	b.n	8009040 <_printf_float+0x310>
 80090cc:	ee18 3a10 	vmov	r3, s16
 80090d0:	4652      	mov	r2, sl
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	d1be      	bne.n	800905a <_printf_float+0x32a>
 80090dc:	e689      	b.n	8008df2 <_printf_float+0xc2>
 80090de:	9a05      	ldr	r2, [sp, #20]
 80090e0:	464b      	mov	r3, r9
 80090e2:	4442      	add	r2, r8
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	d1c1      	bne.n	8009072 <_printf_float+0x342>
 80090ee:	e680      	b.n	8008df2 <_printf_float+0xc2>
 80090f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090f2:	2a01      	cmp	r2, #1
 80090f4:	dc01      	bgt.n	80090fa <_printf_float+0x3ca>
 80090f6:	07db      	lsls	r3, r3, #31
 80090f8:	d538      	bpl.n	800916c <_printf_float+0x43c>
 80090fa:	2301      	movs	r3, #1
 80090fc:	4642      	mov	r2, r8
 80090fe:	4631      	mov	r1, r6
 8009100:	4628      	mov	r0, r5
 8009102:	47b8      	blx	r7
 8009104:	3001      	adds	r0, #1
 8009106:	f43f ae74 	beq.w	8008df2 <_printf_float+0xc2>
 800910a:	ee18 3a10 	vmov	r3, s16
 800910e:	4652      	mov	r2, sl
 8009110:	4631      	mov	r1, r6
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	f43f ae6b 	beq.w	8008df2 <_printf_float+0xc2>
 800911c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009120:	2200      	movs	r2, #0
 8009122:	2300      	movs	r3, #0
 8009124:	f7f7 fd00 	bl	8000b28 <__aeabi_dcmpeq>
 8009128:	b9d8      	cbnz	r0, 8009162 <_printf_float+0x432>
 800912a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800912c:	f108 0201 	add.w	r2, r8, #1
 8009130:	3b01      	subs	r3, #1
 8009132:	4631      	mov	r1, r6
 8009134:	4628      	mov	r0, r5
 8009136:	47b8      	blx	r7
 8009138:	3001      	adds	r0, #1
 800913a:	d10e      	bne.n	800915a <_printf_float+0x42a>
 800913c:	e659      	b.n	8008df2 <_printf_float+0xc2>
 800913e:	2301      	movs	r3, #1
 8009140:	4652      	mov	r2, sl
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f ae52 	beq.w	8008df2 <_printf_float+0xc2>
 800914e:	f108 0801 	add.w	r8, r8, #1
 8009152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009154:	3b01      	subs	r3, #1
 8009156:	4543      	cmp	r3, r8
 8009158:	dcf1      	bgt.n	800913e <_printf_float+0x40e>
 800915a:	464b      	mov	r3, r9
 800915c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009160:	e6dc      	b.n	8008f1c <_printf_float+0x1ec>
 8009162:	f04f 0800 	mov.w	r8, #0
 8009166:	f104 0a1a 	add.w	sl, r4, #26
 800916a:	e7f2      	b.n	8009152 <_printf_float+0x422>
 800916c:	2301      	movs	r3, #1
 800916e:	4642      	mov	r2, r8
 8009170:	e7df      	b.n	8009132 <_printf_float+0x402>
 8009172:	2301      	movs	r3, #1
 8009174:	464a      	mov	r2, r9
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae38 	beq.w	8008df2 <_printf_float+0xc2>
 8009182:	f108 0801 	add.w	r8, r8, #1
 8009186:	68e3      	ldr	r3, [r4, #12]
 8009188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800918a:	1a5b      	subs	r3, r3, r1
 800918c:	4543      	cmp	r3, r8
 800918e:	dcf0      	bgt.n	8009172 <_printf_float+0x442>
 8009190:	e6fa      	b.n	8008f88 <_printf_float+0x258>
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	f104 0919 	add.w	r9, r4, #25
 800919a:	e7f4      	b.n	8009186 <_printf_float+0x456>

0800919c <_printf_common>:
 800919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	4616      	mov	r6, r2
 80091a2:	4699      	mov	r9, r3
 80091a4:	688a      	ldr	r2, [r1, #8]
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	bfb8      	it	lt
 80091b0:	4613      	movlt	r3, r2
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091b8:	4607      	mov	r7, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	b10a      	cbz	r2, 80091c2 <_printf_common+0x26>
 80091be:	3301      	adds	r3, #1
 80091c0:	6033      	str	r3, [r6, #0]
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	0699      	lsls	r1, r3, #26
 80091c6:	bf42      	ittt	mi
 80091c8:	6833      	ldrmi	r3, [r6, #0]
 80091ca:	3302      	addmi	r3, #2
 80091cc:	6033      	strmi	r3, [r6, #0]
 80091ce:	6825      	ldr	r5, [r4, #0]
 80091d0:	f015 0506 	ands.w	r5, r5, #6
 80091d4:	d106      	bne.n	80091e4 <_printf_common+0x48>
 80091d6:	f104 0a19 	add.w	sl, r4, #25
 80091da:	68e3      	ldr	r3, [r4, #12]
 80091dc:	6832      	ldr	r2, [r6, #0]
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	42ab      	cmp	r3, r5
 80091e2:	dc26      	bgt.n	8009232 <_printf_common+0x96>
 80091e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091e8:	1e13      	subs	r3, r2, #0
 80091ea:	6822      	ldr	r2, [r4, #0]
 80091ec:	bf18      	it	ne
 80091ee:	2301      	movne	r3, #1
 80091f0:	0692      	lsls	r2, r2, #26
 80091f2:	d42b      	bmi.n	800924c <_printf_common+0xb0>
 80091f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091f8:	4649      	mov	r1, r9
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c0      	blx	r8
 80091fe:	3001      	adds	r0, #1
 8009200:	d01e      	beq.n	8009240 <_printf_common+0xa4>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	68e5      	ldr	r5, [r4, #12]
 8009206:	6832      	ldr	r2, [r6, #0]
 8009208:	f003 0306 	and.w	r3, r3, #6
 800920c:	2b04      	cmp	r3, #4
 800920e:	bf08      	it	eq
 8009210:	1aad      	subeq	r5, r5, r2
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	6922      	ldr	r2, [r4, #16]
 8009216:	bf0c      	ite	eq
 8009218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800921c:	2500      	movne	r5, #0
 800921e:	4293      	cmp	r3, r2
 8009220:	bfc4      	itt	gt
 8009222:	1a9b      	subgt	r3, r3, r2
 8009224:	18ed      	addgt	r5, r5, r3
 8009226:	2600      	movs	r6, #0
 8009228:	341a      	adds	r4, #26
 800922a:	42b5      	cmp	r5, r6
 800922c:	d11a      	bne.n	8009264 <_printf_common+0xc8>
 800922e:	2000      	movs	r0, #0
 8009230:	e008      	b.n	8009244 <_printf_common+0xa8>
 8009232:	2301      	movs	r3, #1
 8009234:	4652      	mov	r2, sl
 8009236:	4649      	mov	r1, r9
 8009238:	4638      	mov	r0, r7
 800923a:	47c0      	blx	r8
 800923c:	3001      	adds	r0, #1
 800923e:	d103      	bne.n	8009248 <_printf_common+0xac>
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
 8009244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009248:	3501      	adds	r5, #1
 800924a:	e7c6      	b.n	80091da <_printf_common+0x3e>
 800924c:	18e1      	adds	r1, r4, r3
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	2030      	movs	r0, #48	; 0x30
 8009252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009256:	4422      	add	r2, r4
 8009258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800925c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009260:	3302      	adds	r3, #2
 8009262:	e7c7      	b.n	80091f4 <_printf_common+0x58>
 8009264:	2301      	movs	r3, #1
 8009266:	4622      	mov	r2, r4
 8009268:	4649      	mov	r1, r9
 800926a:	4638      	mov	r0, r7
 800926c:	47c0      	blx	r8
 800926e:	3001      	adds	r0, #1
 8009270:	d0e6      	beq.n	8009240 <_printf_common+0xa4>
 8009272:	3601      	adds	r6, #1
 8009274:	e7d9      	b.n	800922a <_printf_common+0x8e>
	...

08009278 <_printf_i>:
 8009278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	7e0f      	ldrb	r7, [r1, #24]
 800927e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009280:	2f78      	cmp	r7, #120	; 0x78
 8009282:	4691      	mov	r9, r2
 8009284:	4680      	mov	r8, r0
 8009286:	460c      	mov	r4, r1
 8009288:	469a      	mov	sl, r3
 800928a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800928e:	d807      	bhi.n	80092a0 <_printf_i+0x28>
 8009290:	2f62      	cmp	r7, #98	; 0x62
 8009292:	d80a      	bhi.n	80092aa <_printf_i+0x32>
 8009294:	2f00      	cmp	r7, #0
 8009296:	f000 80d8 	beq.w	800944a <_printf_i+0x1d2>
 800929a:	2f58      	cmp	r7, #88	; 0x58
 800929c:	f000 80a3 	beq.w	80093e6 <_printf_i+0x16e>
 80092a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092a8:	e03a      	b.n	8009320 <_printf_i+0xa8>
 80092aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092ae:	2b15      	cmp	r3, #21
 80092b0:	d8f6      	bhi.n	80092a0 <_printf_i+0x28>
 80092b2:	a101      	add	r1, pc, #4	; (adr r1, 80092b8 <_printf_i+0x40>)
 80092b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092b8:	08009311 	.word	0x08009311
 80092bc:	08009325 	.word	0x08009325
 80092c0:	080092a1 	.word	0x080092a1
 80092c4:	080092a1 	.word	0x080092a1
 80092c8:	080092a1 	.word	0x080092a1
 80092cc:	080092a1 	.word	0x080092a1
 80092d0:	08009325 	.word	0x08009325
 80092d4:	080092a1 	.word	0x080092a1
 80092d8:	080092a1 	.word	0x080092a1
 80092dc:	080092a1 	.word	0x080092a1
 80092e0:	080092a1 	.word	0x080092a1
 80092e4:	08009431 	.word	0x08009431
 80092e8:	08009355 	.word	0x08009355
 80092ec:	08009413 	.word	0x08009413
 80092f0:	080092a1 	.word	0x080092a1
 80092f4:	080092a1 	.word	0x080092a1
 80092f8:	08009453 	.word	0x08009453
 80092fc:	080092a1 	.word	0x080092a1
 8009300:	08009355 	.word	0x08009355
 8009304:	080092a1 	.word	0x080092a1
 8009308:	080092a1 	.word	0x080092a1
 800930c:	0800941b 	.word	0x0800941b
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	1d1a      	adds	r2, r3, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	602a      	str	r2, [r5, #0]
 8009318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800931c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009320:	2301      	movs	r3, #1
 8009322:	e0a3      	b.n	800946c <_printf_i+0x1f4>
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	6829      	ldr	r1, [r5, #0]
 8009328:	0606      	lsls	r6, r0, #24
 800932a:	f101 0304 	add.w	r3, r1, #4
 800932e:	d50a      	bpl.n	8009346 <_printf_i+0xce>
 8009330:	680e      	ldr	r6, [r1, #0]
 8009332:	602b      	str	r3, [r5, #0]
 8009334:	2e00      	cmp	r6, #0
 8009336:	da03      	bge.n	8009340 <_printf_i+0xc8>
 8009338:	232d      	movs	r3, #45	; 0x2d
 800933a:	4276      	negs	r6, r6
 800933c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009340:	485e      	ldr	r0, [pc, #376]	; (80094bc <_printf_i+0x244>)
 8009342:	230a      	movs	r3, #10
 8009344:	e019      	b.n	800937a <_printf_i+0x102>
 8009346:	680e      	ldr	r6, [r1, #0]
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800934e:	bf18      	it	ne
 8009350:	b236      	sxthne	r6, r6
 8009352:	e7ef      	b.n	8009334 <_printf_i+0xbc>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	6820      	ldr	r0, [r4, #0]
 8009358:	1d19      	adds	r1, r3, #4
 800935a:	6029      	str	r1, [r5, #0]
 800935c:	0601      	lsls	r1, r0, #24
 800935e:	d501      	bpl.n	8009364 <_printf_i+0xec>
 8009360:	681e      	ldr	r6, [r3, #0]
 8009362:	e002      	b.n	800936a <_printf_i+0xf2>
 8009364:	0646      	lsls	r6, r0, #25
 8009366:	d5fb      	bpl.n	8009360 <_printf_i+0xe8>
 8009368:	881e      	ldrh	r6, [r3, #0]
 800936a:	4854      	ldr	r0, [pc, #336]	; (80094bc <_printf_i+0x244>)
 800936c:	2f6f      	cmp	r7, #111	; 0x6f
 800936e:	bf0c      	ite	eq
 8009370:	2308      	moveq	r3, #8
 8009372:	230a      	movne	r3, #10
 8009374:	2100      	movs	r1, #0
 8009376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800937a:	6865      	ldr	r5, [r4, #4]
 800937c:	60a5      	str	r5, [r4, #8]
 800937e:	2d00      	cmp	r5, #0
 8009380:	bfa2      	ittt	ge
 8009382:	6821      	ldrge	r1, [r4, #0]
 8009384:	f021 0104 	bicge.w	r1, r1, #4
 8009388:	6021      	strge	r1, [r4, #0]
 800938a:	b90e      	cbnz	r6, 8009390 <_printf_i+0x118>
 800938c:	2d00      	cmp	r5, #0
 800938e:	d04d      	beq.n	800942c <_printf_i+0x1b4>
 8009390:	4615      	mov	r5, r2
 8009392:	fbb6 f1f3 	udiv	r1, r6, r3
 8009396:	fb03 6711 	mls	r7, r3, r1, r6
 800939a:	5dc7      	ldrb	r7, [r0, r7]
 800939c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093a0:	4637      	mov	r7, r6
 80093a2:	42bb      	cmp	r3, r7
 80093a4:	460e      	mov	r6, r1
 80093a6:	d9f4      	bls.n	8009392 <_printf_i+0x11a>
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d10b      	bne.n	80093c4 <_printf_i+0x14c>
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	07de      	lsls	r6, r3, #31
 80093b0:	d508      	bpl.n	80093c4 <_printf_i+0x14c>
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	6861      	ldr	r1, [r4, #4]
 80093b6:	4299      	cmp	r1, r3
 80093b8:	bfde      	ittt	le
 80093ba:	2330      	movle	r3, #48	; 0x30
 80093bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093c4:	1b52      	subs	r2, r2, r5
 80093c6:	6122      	str	r2, [r4, #16]
 80093c8:	f8cd a000 	str.w	sl, [sp]
 80093cc:	464b      	mov	r3, r9
 80093ce:	aa03      	add	r2, sp, #12
 80093d0:	4621      	mov	r1, r4
 80093d2:	4640      	mov	r0, r8
 80093d4:	f7ff fee2 	bl	800919c <_printf_common>
 80093d8:	3001      	adds	r0, #1
 80093da:	d14c      	bne.n	8009476 <_printf_i+0x1fe>
 80093dc:	f04f 30ff 	mov.w	r0, #4294967295
 80093e0:	b004      	add	sp, #16
 80093e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e6:	4835      	ldr	r0, [pc, #212]	; (80094bc <_printf_i+0x244>)
 80093e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093ec:	6829      	ldr	r1, [r5, #0]
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80093f4:	6029      	str	r1, [r5, #0]
 80093f6:	061d      	lsls	r5, r3, #24
 80093f8:	d514      	bpl.n	8009424 <_printf_i+0x1ac>
 80093fa:	07df      	lsls	r7, r3, #31
 80093fc:	bf44      	itt	mi
 80093fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009402:	6023      	strmi	r3, [r4, #0]
 8009404:	b91e      	cbnz	r6, 800940e <_printf_i+0x196>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	f023 0320 	bic.w	r3, r3, #32
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	2310      	movs	r3, #16
 8009410:	e7b0      	b.n	8009374 <_printf_i+0xfc>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f043 0320 	orr.w	r3, r3, #32
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	2378      	movs	r3, #120	; 0x78
 800941c:	4828      	ldr	r0, [pc, #160]	; (80094c0 <_printf_i+0x248>)
 800941e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009422:	e7e3      	b.n	80093ec <_printf_i+0x174>
 8009424:	0659      	lsls	r1, r3, #25
 8009426:	bf48      	it	mi
 8009428:	b2b6      	uxthmi	r6, r6
 800942a:	e7e6      	b.n	80093fa <_printf_i+0x182>
 800942c:	4615      	mov	r5, r2
 800942e:	e7bb      	b.n	80093a8 <_printf_i+0x130>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	6826      	ldr	r6, [r4, #0]
 8009434:	6961      	ldr	r1, [r4, #20]
 8009436:	1d18      	adds	r0, r3, #4
 8009438:	6028      	str	r0, [r5, #0]
 800943a:	0635      	lsls	r5, r6, #24
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	d501      	bpl.n	8009444 <_printf_i+0x1cc>
 8009440:	6019      	str	r1, [r3, #0]
 8009442:	e002      	b.n	800944a <_printf_i+0x1d2>
 8009444:	0670      	lsls	r0, r6, #25
 8009446:	d5fb      	bpl.n	8009440 <_printf_i+0x1c8>
 8009448:	8019      	strh	r1, [r3, #0]
 800944a:	2300      	movs	r3, #0
 800944c:	6123      	str	r3, [r4, #16]
 800944e:	4615      	mov	r5, r2
 8009450:	e7ba      	b.n	80093c8 <_printf_i+0x150>
 8009452:	682b      	ldr	r3, [r5, #0]
 8009454:	1d1a      	adds	r2, r3, #4
 8009456:	602a      	str	r2, [r5, #0]
 8009458:	681d      	ldr	r5, [r3, #0]
 800945a:	6862      	ldr	r2, [r4, #4]
 800945c:	2100      	movs	r1, #0
 800945e:	4628      	mov	r0, r5
 8009460:	f7f6 feee 	bl	8000240 <memchr>
 8009464:	b108      	cbz	r0, 800946a <_printf_i+0x1f2>
 8009466:	1b40      	subs	r0, r0, r5
 8009468:	6060      	str	r0, [r4, #4]
 800946a:	6863      	ldr	r3, [r4, #4]
 800946c:	6123      	str	r3, [r4, #16]
 800946e:	2300      	movs	r3, #0
 8009470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009474:	e7a8      	b.n	80093c8 <_printf_i+0x150>
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	462a      	mov	r2, r5
 800947a:	4649      	mov	r1, r9
 800947c:	4640      	mov	r0, r8
 800947e:	47d0      	blx	sl
 8009480:	3001      	adds	r0, #1
 8009482:	d0ab      	beq.n	80093dc <_printf_i+0x164>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	079b      	lsls	r3, r3, #30
 8009488:	d413      	bmi.n	80094b2 <_printf_i+0x23a>
 800948a:	68e0      	ldr	r0, [r4, #12]
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	4298      	cmp	r0, r3
 8009490:	bfb8      	it	lt
 8009492:	4618      	movlt	r0, r3
 8009494:	e7a4      	b.n	80093e0 <_printf_i+0x168>
 8009496:	2301      	movs	r3, #1
 8009498:	4632      	mov	r2, r6
 800949a:	4649      	mov	r1, r9
 800949c:	4640      	mov	r0, r8
 800949e:	47d0      	blx	sl
 80094a0:	3001      	adds	r0, #1
 80094a2:	d09b      	beq.n	80093dc <_printf_i+0x164>
 80094a4:	3501      	adds	r5, #1
 80094a6:	68e3      	ldr	r3, [r4, #12]
 80094a8:	9903      	ldr	r1, [sp, #12]
 80094aa:	1a5b      	subs	r3, r3, r1
 80094ac:	42ab      	cmp	r3, r5
 80094ae:	dcf2      	bgt.n	8009496 <_printf_i+0x21e>
 80094b0:	e7eb      	b.n	800948a <_printf_i+0x212>
 80094b2:	2500      	movs	r5, #0
 80094b4:	f104 0619 	add.w	r6, r4, #25
 80094b8:	e7f5      	b.n	80094a6 <_printf_i+0x22e>
 80094ba:	bf00      	nop
 80094bc:	0800d7f2 	.word	0x0800d7f2
 80094c0:	0800d803 	.word	0x0800d803

080094c4 <_scanf_float>:
 80094c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c8:	b087      	sub	sp, #28
 80094ca:	4617      	mov	r7, r2
 80094cc:	9303      	str	r3, [sp, #12]
 80094ce:	688b      	ldr	r3, [r1, #8]
 80094d0:	1e5a      	subs	r2, r3, #1
 80094d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80094d6:	bf83      	ittte	hi
 80094d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80094dc:	195b      	addhi	r3, r3, r5
 80094de:	9302      	strhi	r3, [sp, #8]
 80094e0:	2300      	movls	r3, #0
 80094e2:	bf86      	itte	hi
 80094e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80094e8:	608b      	strhi	r3, [r1, #8]
 80094ea:	9302      	strls	r3, [sp, #8]
 80094ec:	680b      	ldr	r3, [r1, #0]
 80094ee:	468b      	mov	fp, r1
 80094f0:	2500      	movs	r5, #0
 80094f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80094f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80094fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094fe:	4680      	mov	r8, r0
 8009500:	460c      	mov	r4, r1
 8009502:	465e      	mov	r6, fp
 8009504:	46aa      	mov	sl, r5
 8009506:	46a9      	mov	r9, r5
 8009508:	9501      	str	r5, [sp, #4]
 800950a:	68a2      	ldr	r2, [r4, #8]
 800950c:	b152      	cbz	r2, 8009524 <_scanf_float+0x60>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2b4e      	cmp	r3, #78	; 0x4e
 8009514:	d864      	bhi.n	80095e0 <_scanf_float+0x11c>
 8009516:	2b40      	cmp	r3, #64	; 0x40
 8009518:	d83c      	bhi.n	8009594 <_scanf_float+0xd0>
 800951a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800951e:	b2c8      	uxtb	r0, r1
 8009520:	280e      	cmp	r0, #14
 8009522:	d93a      	bls.n	800959a <_scanf_float+0xd6>
 8009524:	f1b9 0f00 	cmp.w	r9, #0
 8009528:	d003      	beq.n	8009532 <_scanf_float+0x6e>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009536:	f1ba 0f01 	cmp.w	sl, #1
 800953a:	f200 8113 	bhi.w	8009764 <_scanf_float+0x2a0>
 800953e:	455e      	cmp	r6, fp
 8009540:	f200 8105 	bhi.w	800974e <_scanf_float+0x28a>
 8009544:	2501      	movs	r5, #1
 8009546:	4628      	mov	r0, r5
 8009548:	b007      	add	sp, #28
 800954a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009552:	2a0d      	cmp	r2, #13
 8009554:	d8e6      	bhi.n	8009524 <_scanf_float+0x60>
 8009556:	a101      	add	r1, pc, #4	; (adr r1, 800955c <_scanf_float+0x98>)
 8009558:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800955c:	0800969b 	.word	0x0800969b
 8009560:	08009525 	.word	0x08009525
 8009564:	08009525 	.word	0x08009525
 8009568:	08009525 	.word	0x08009525
 800956c:	080096fb 	.word	0x080096fb
 8009570:	080096d3 	.word	0x080096d3
 8009574:	08009525 	.word	0x08009525
 8009578:	08009525 	.word	0x08009525
 800957c:	080096a9 	.word	0x080096a9
 8009580:	08009525 	.word	0x08009525
 8009584:	08009525 	.word	0x08009525
 8009588:	08009525 	.word	0x08009525
 800958c:	08009525 	.word	0x08009525
 8009590:	08009661 	.word	0x08009661
 8009594:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009598:	e7db      	b.n	8009552 <_scanf_float+0x8e>
 800959a:	290e      	cmp	r1, #14
 800959c:	d8c2      	bhi.n	8009524 <_scanf_float+0x60>
 800959e:	a001      	add	r0, pc, #4	; (adr r0, 80095a4 <_scanf_float+0xe0>)
 80095a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095a4:	08009653 	.word	0x08009653
 80095a8:	08009525 	.word	0x08009525
 80095ac:	08009653 	.word	0x08009653
 80095b0:	080096e7 	.word	0x080096e7
 80095b4:	08009525 	.word	0x08009525
 80095b8:	08009601 	.word	0x08009601
 80095bc:	0800963d 	.word	0x0800963d
 80095c0:	0800963d 	.word	0x0800963d
 80095c4:	0800963d 	.word	0x0800963d
 80095c8:	0800963d 	.word	0x0800963d
 80095cc:	0800963d 	.word	0x0800963d
 80095d0:	0800963d 	.word	0x0800963d
 80095d4:	0800963d 	.word	0x0800963d
 80095d8:	0800963d 	.word	0x0800963d
 80095dc:	0800963d 	.word	0x0800963d
 80095e0:	2b6e      	cmp	r3, #110	; 0x6e
 80095e2:	d809      	bhi.n	80095f8 <_scanf_float+0x134>
 80095e4:	2b60      	cmp	r3, #96	; 0x60
 80095e6:	d8b2      	bhi.n	800954e <_scanf_float+0x8a>
 80095e8:	2b54      	cmp	r3, #84	; 0x54
 80095ea:	d077      	beq.n	80096dc <_scanf_float+0x218>
 80095ec:	2b59      	cmp	r3, #89	; 0x59
 80095ee:	d199      	bne.n	8009524 <_scanf_float+0x60>
 80095f0:	2d07      	cmp	r5, #7
 80095f2:	d197      	bne.n	8009524 <_scanf_float+0x60>
 80095f4:	2508      	movs	r5, #8
 80095f6:	e029      	b.n	800964c <_scanf_float+0x188>
 80095f8:	2b74      	cmp	r3, #116	; 0x74
 80095fa:	d06f      	beq.n	80096dc <_scanf_float+0x218>
 80095fc:	2b79      	cmp	r3, #121	; 0x79
 80095fe:	e7f6      	b.n	80095ee <_scanf_float+0x12a>
 8009600:	6821      	ldr	r1, [r4, #0]
 8009602:	05c8      	lsls	r0, r1, #23
 8009604:	d51a      	bpl.n	800963c <_scanf_float+0x178>
 8009606:	9b02      	ldr	r3, [sp, #8]
 8009608:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800960c:	6021      	str	r1, [r4, #0]
 800960e:	f109 0901 	add.w	r9, r9, #1
 8009612:	b11b      	cbz	r3, 800961c <_scanf_float+0x158>
 8009614:	3b01      	subs	r3, #1
 8009616:	3201      	adds	r2, #1
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	60a2      	str	r2, [r4, #8]
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	3b01      	subs	r3, #1
 8009620:	60a3      	str	r3, [r4, #8]
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	3301      	adds	r3, #1
 8009626:	6123      	str	r3, [r4, #16]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3b01      	subs	r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	607b      	str	r3, [r7, #4]
 8009630:	f340 8084 	ble.w	800973c <_scanf_float+0x278>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	3301      	adds	r3, #1
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	e766      	b.n	800950a <_scanf_float+0x46>
 800963c:	eb1a 0f05 	cmn.w	sl, r5
 8009640:	f47f af70 	bne.w	8009524 <_scanf_float+0x60>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800964a:	6022      	str	r2, [r4, #0]
 800964c:	f806 3b01 	strb.w	r3, [r6], #1
 8009650:	e7e4      	b.n	800961c <_scanf_float+0x158>
 8009652:	6822      	ldr	r2, [r4, #0]
 8009654:	0610      	lsls	r0, r2, #24
 8009656:	f57f af65 	bpl.w	8009524 <_scanf_float+0x60>
 800965a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800965e:	e7f4      	b.n	800964a <_scanf_float+0x186>
 8009660:	f1ba 0f00 	cmp.w	sl, #0
 8009664:	d10e      	bne.n	8009684 <_scanf_float+0x1c0>
 8009666:	f1b9 0f00 	cmp.w	r9, #0
 800966a:	d10e      	bne.n	800968a <_scanf_float+0x1c6>
 800966c:	6822      	ldr	r2, [r4, #0]
 800966e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009672:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009676:	d108      	bne.n	800968a <_scanf_float+0x1c6>
 8009678:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800967c:	6022      	str	r2, [r4, #0]
 800967e:	f04f 0a01 	mov.w	sl, #1
 8009682:	e7e3      	b.n	800964c <_scanf_float+0x188>
 8009684:	f1ba 0f02 	cmp.w	sl, #2
 8009688:	d055      	beq.n	8009736 <_scanf_float+0x272>
 800968a:	2d01      	cmp	r5, #1
 800968c:	d002      	beq.n	8009694 <_scanf_float+0x1d0>
 800968e:	2d04      	cmp	r5, #4
 8009690:	f47f af48 	bne.w	8009524 <_scanf_float+0x60>
 8009694:	3501      	adds	r5, #1
 8009696:	b2ed      	uxtb	r5, r5
 8009698:	e7d8      	b.n	800964c <_scanf_float+0x188>
 800969a:	f1ba 0f01 	cmp.w	sl, #1
 800969e:	f47f af41 	bne.w	8009524 <_scanf_float+0x60>
 80096a2:	f04f 0a02 	mov.w	sl, #2
 80096a6:	e7d1      	b.n	800964c <_scanf_float+0x188>
 80096a8:	b97d      	cbnz	r5, 80096ca <_scanf_float+0x206>
 80096aa:	f1b9 0f00 	cmp.w	r9, #0
 80096ae:	f47f af3c 	bne.w	800952a <_scanf_float+0x66>
 80096b2:	6822      	ldr	r2, [r4, #0]
 80096b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096bc:	f47f af39 	bne.w	8009532 <_scanf_float+0x6e>
 80096c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096c4:	6022      	str	r2, [r4, #0]
 80096c6:	2501      	movs	r5, #1
 80096c8:	e7c0      	b.n	800964c <_scanf_float+0x188>
 80096ca:	2d03      	cmp	r5, #3
 80096cc:	d0e2      	beq.n	8009694 <_scanf_float+0x1d0>
 80096ce:	2d05      	cmp	r5, #5
 80096d0:	e7de      	b.n	8009690 <_scanf_float+0x1cc>
 80096d2:	2d02      	cmp	r5, #2
 80096d4:	f47f af26 	bne.w	8009524 <_scanf_float+0x60>
 80096d8:	2503      	movs	r5, #3
 80096da:	e7b7      	b.n	800964c <_scanf_float+0x188>
 80096dc:	2d06      	cmp	r5, #6
 80096de:	f47f af21 	bne.w	8009524 <_scanf_float+0x60>
 80096e2:	2507      	movs	r5, #7
 80096e4:	e7b2      	b.n	800964c <_scanf_float+0x188>
 80096e6:	6822      	ldr	r2, [r4, #0]
 80096e8:	0591      	lsls	r1, r2, #22
 80096ea:	f57f af1b 	bpl.w	8009524 <_scanf_float+0x60>
 80096ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80096f2:	6022      	str	r2, [r4, #0]
 80096f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80096f8:	e7a8      	b.n	800964c <_scanf_float+0x188>
 80096fa:	6822      	ldr	r2, [r4, #0]
 80096fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009700:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009704:	d006      	beq.n	8009714 <_scanf_float+0x250>
 8009706:	0550      	lsls	r0, r2, #21
 8009708:	f57f af0c 	bpl.w	8009524 <_scanf_float+0x60>
 800970c:	f1b9 0f00 	cmp.w	r9, #0
 8009710:	f43f af0f 	beq.w	8009532 <_scanf_float+0x6e>
 8009714:	0591      	lsls	r1, r2, #22
 8009716:	bf58      	it	pl
 8009718:	9901      	ldrpl	r1, [sp, #4]
 800971a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800971e:	bf58      	it	pl
 8009720:	eba9 0101 	subpl.w	r1, r9, r1
 8009724:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009728:	bf58      	it	pl
 800972a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800972e:	6022      	str	r2, [r4, #0]
 8009730:	f04f 0900 	mov.w	r9, #0
 8009734:	e78a      	b.n	800964c <_scanf_float+0x188>
 8009736:	f04f 0a03 	mov.w	sl, #3
 800973a:	e787      	b.n	800964c <_scanf_float+0x188>
 800973c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009740:	4639      	mov	r1, r7
 8009742:	4640      	mov	r0, r8
 8009744:	4798      	blx	r3
 8009746:	2800      	cmp	r0, #0
 8009748:	f43f aedf 	beq.w	800950a <_scanf_float+0x46>
 800974c:	e6ea      	b.n	8009524 <_scanf_float+0x60>
 800974e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009752:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009756:	463a      	mov	r2, r7
 8009758:	4640      	mov	r0, r8
 800975a:	4798      	blx	r3
 800975c:	6923      	ldr	r3, [r4, #16]
 800975e:	3b01      	subs	r3, #1
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	e6ec      	b.n	800953e <_scanf_float+0x7a>
 8009764:	1e6b      	subs	r3, r5, #1
 8009766:	2b06      	cmp	r3, #6
 8009768:	d825      	bhi.n	80097b6 <_scanf_float+0x2f2>
 800976a:	2d02      	cmp	r5, #2
 800976c:	d836      	bhi.n	80097dc <_scanf_float+0x318>
 800976e:	455e      	cmp	r6, fp
 8009770:	f67f aee8 	bls.w	8009544 <_scanf_float+0x80>
 8009774:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009778:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800977c:	463a      	mov	r2, r7
 800977e:	4640      	mov	r0, r8
 8009780:	4798      	blx	r3
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	3b01      	subs	r3, #1
 8009786:	6123      	str	r3, [r4, #16]
 8009788:	e7f1      	b.n	800976e <_scanf_float+0x2aa>
 800978a:	9802      	ldr	r0, [sp, #8]
 800978c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009790:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009794:	9002      	str	r0, [sp, #8]
 8009796:	463a      	mov	r2, r7
 8009798:	4640      	mov	r0, r8
 800979a:	4798      	blx	r3
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	3b01      	subs	r3, #1
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097a6:	fa5f fa8a 	uxtb.w	sl, sl
 80097aa:	f1ba 0f02 	cmp.w	sl, #2
 80097ae:	d1ec      	bne.n	800978a <_scanf_float+0x2c6>
 80097b0:	3d03      	subs	r5, #3
 80097b2:	b2ed      	uxtb	r5, r5
 80097b4:	1b76      	subs	r6, r6, r5
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	05da      	lsls	r2, r3, #23
 80097ba:	d52f      	bpl.n	800981c <_scanf_float+0x358>
 80097bc:	055b      	lsls	r3, r3, #21
 80097be:	d510      	bpl.n	80097e2 <_scanf_float+0x31e>
 80097c0:	455e      	cmp	r6, fp
 80097c2:	f67f aebf 	bls.w	8009544 <_scanf_float+0x80>
 80097c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097ce:	463a      	mov	r2, r7
 80097d0:	4640      	mov	r0, r8
 80097d2:	4798      	blx	r3
 80097d4:	6923      	ldr	r3, [r4, #16]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	6123      	str	r3, [r4, #16]
 80097da:	e7f1      	b.n	80097c0 <_scanf_float+0x2fc>
 80097dc:	46aa      	mov	sl, r5
 80097de:	9602      	str	r6, [sp, #8]
 80097e0:	e7df      	b.n	80097a2 <_scanf_float+0x2de>
 80097e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	2965      	cmp	r1, #101	; 0x65
 80097ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80097ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	d00c      	beq.n	8009810 <_scanf_float+0x34c>
 80097f6:	2945      	cmp	r1, #69	; 0x45
 80097f8:	d00a      	beq.n	8009810 <_scanf_float+0x34c>
 80097fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097fe:	463a      	mov	r2, r7
 8009800:	4640      	mov	r0, r8
 8009802:	4798      	blx	r3
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800980a:	3b01      	subs	r3, #1
 800980c:	1eb5      	subs	r5, r6, #2
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009814:	463a      	mov	r2, r7
 8009816:	4640      	mov	r0, r8
 8009818:	4798      	blx	r3
 800981a:	462e      	mov	r6, r5
 800981c:	6825      	ldr	r5, [r4, #0]
 800981e:	f015 0510 	ands.w	r5, r5, #16
 8009822:	d159      	bne.n	80098d8 <_scanf_float+0x414>
 8009824:	7035      	strb	r5, [r6, #0]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800982c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009830:	d11b      	bne.n	800986a <_scanf_float+0x3a6>
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	454b      	cmp	r3, r9
 8009836:	eba3 0209 	sub.w	r2, r3, r9
 800983a:	d123      	bne.n	8009884 <_scanf_float+0x3c0>
 800983c:	2200      	movs	r2, #0
 800983e:	4659      	mov	r1, fp
 8009840:	4640      	mov	r0, r8
 8009842:	f000 feb3 	bl	800a5ac <_strtod_r>
 8009846:	6822      	ldr	r2, [r4, #0]
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	f012 0f02 	tst.w	r2, #2
 800984e:	ec57 6b10 	vmov	r6, r7, d0
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	d021      	beq.n	800989a <_scanf_float+0x3d6>
 8009856:	9903      	ldr	r1, [sp, #12]
 8009858:	1d1a      	adds	r2, r3, #4
 800985a:	600a      	str	r2, [r1, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	e9c3 6700 	strd	r6, r7, [r3]
 8009862:	68e3      	ldr	r3, [r4, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60e3      	str	r3, [r4, #12]
 8009868:	e66d      	b.n	8009546 <_scanf_float+0x82>
 800986a:	9b04      	ldr	r3, [sp, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0e5      	beq.n	800983c <_scanf_float+0x378>
 8009870:	9905      	ldr	r1, [sp, #20]
 8009872:	230a      	movs	r3, #10
 8009874:	462a      	mov	r2, r5
 8009876:	3101      	adds	r1, #1
 8009878:	4640      	mov	r0, r8
 800987a:	f000 ff7b 	bl	800a774 <_strtol_r>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	9e05      	ldr	r6, [sp, #20]
 8009882:	1ac2      	subs	r2, r0, r3
 8009884:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009888:	429e      	cmp	r6, r3
 800988a:	bf28      	it	cs
 800988c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009890:	4912      	ldr	r1, [pc, #72]	; (80098dc <_scanf_float+0x418>)
 8009892:	4630      	mov	r0, r6
 8009894:	f000 f82c 	bl	80098f0 <siprintf>
 8009898:	e7d0      	b.n	800983c <_scanf_float+0x378>
 800989a:	9903      	ldr	r1, [sp, #12]
 800989c:	f012 0f04 	tst.w	r2, #4
 80098a0:	f103 0204 	add.w	r2, r3, #4
 80098a4:	600a      	str	r2, [r1, #0]
 80098a6:	d1d9      	bne.n	800985c <_scanf_float+0x398>
 80098a8:	f8d3 8000 	ldr.w	r8, [r3]
 80098ac:	ee10 2a10 	vmov	r2, s0
 80098b0:	ee10 0a10 	vmov	r0, s0
 80098b4:	463b      	mov	r3, r7
 80098b6:	4639      	mov	r1, r7
 80098b8:	f7f7 f968 	bl	8000b8c <__aeabi_dcmpun>
 80098bc:	b128      	cbz	r0, 80098ca <_scanf_float+0x406>
 80098be:	4808      	ldr	r0, [pc, #32]	; (80098e0 <_scanf_float+0x41c>)
 80098c0:	f000 f810 	bl	80098e4 <nanf>
 80098c4:	ed88 0a00 	vstr	s0, [r8]
 80098c8:	e7cb      	b.n	8009862 <_scanf_float+0x39e>
 80098ca:	4630      	mov	r0, r6
 80098cc:	4639      	mov	r1, r7
 80098ce:	f7f7 f9bb 	bl	8000c48 <__aeabi_d2f>
 80098d2:	f8c8 0000 	str.w	r0, [r8]
 80098d6:	e7c4      	b.n	8009862 <_scanf_float+0x39e>
 80098d8:	2500      	movs	r5, #0
 80098da:	e634      	b.n	8009546 <_scanf_float+0x82>
 80098dc:	0800d814 	.word	0x0800d814
 80098e0:	0800d91f 	.word	0x0800d91f

080098e4 <nanf>:
 80098e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80098ec <nanf+0x8>
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	7fc00000 	.word	0x7fc00000

080098f0 <siprintf>:
 80098f0:	b40e      	push	{r1, r2, r3}
 80098f2:	b500      	push	{lr}
 80098f4:	b09c      	sub	sp, #112	; 0x70
 80098f6:	ab1d      	add	r3, sp, #116	; 0x74
 80098f8:	9002      	str	r0, [sp, #8]
 80098fa:	9006      	str	r0, [sp, #24]
 80098fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009900:	4809      	ldr	r0, [pc, #36]	; (8009928 <siprintf+0x38>)
 8009902:	9107      	str	r1, [sp, #28]
 8009904:	9104      	str	r1, [sp, #16]
 8009906:	4909      	ldr	r1, [pc, #36]	; (800992c <siprintf+0x3c>)
 8009908:	f853 2b04 	ldr.w	r2, [r3], #4
 800990c:	9105      	str	r1, [sp, #20]
 800990e:	6800      	ldr	r0, [r0, #0]
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	a902      	add	r1, sp, #8
 8009914:	f002 ff94 	bl	800c840 <_svfiprintf_r>
 8009918:	9b02      	ldr	r3, [sp, #8]
 800991a:	2200      	movs	r2, #0
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	b01c      	add	sp, #112	; 0x70
 8009920:	f85d eb04 	ldr.w	lr, [sp], #4
 8009924:	b003      	add	sp, #12
 8009926:	4770      	bx	lr
 8009928:	2000000c 	.word	0x2000000c
 800992c:	ffff0208 	.word	0xffff0208

08009930 <strcpy>:
 8009930:	4603      	mov	r3, r0
 8009932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009936:	f803 2b01 	strb.w	r2, [r3], #1
 800993a:	2a00      	cmp	r2, #0
 800993c:	d1f9      	bne.n	8009932 <strcpy+0x2>
 800993e:	4770      	bx	lr

08009940 <strncpy>:
 8009940:	b510      	push	{r4, lr}
 8009942:	3901      	subs	r1, #1
 8009944:	4603      	mov	r3, r0
 8009946:	b132      	cbz	r2, 8009956 <strncpy+0x16>
 8009948:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800994c:	f803 4b01 	strb.w	r4, [r3], #1
 8009950:	3a01      	subs	r2, #1
 8009952:	2c00      	cmp	r4, #0
 8009954:	d1f7      	bne.n	8009946 <strncpy+0x6>
 8009956:	441a      	add	r2, r3
 8009958:	2100      	movs	r1, #0
 800995a:	4293      	cmp	r3, r2
 800995c:	d100      	bne.n	8009960 <strncpy+0x20>
 800995e:	bd10      	pop	{r4, pc}
 8009960:	f803 1b01 	strb.w	r1, [r3], #1
 8009964:	e7f9      	b.n	800995a <strncpy+0x1a>

08009966 <sulp>:
 8009966:	b570      	push	{r4, r5, r6, lr}
 8009968:	4604      	mov	r4, r0
 800996a:	460d      	mov	r5, r1
 800996c:	ec45 4b10 	vmov	d0, r4, r5
 8009970:	4616      	mov	r6, r2
 8009972:	f002 fcc3 	bl	800c2fc <__ulp>
 8009976:	ec51 0b10 	vmov	r0, r1, d0
 800997a:	b17e      	cbz	r6, 800999c <sulp+0x36>
 800997c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd09      	ble.n	800999c <sulp+0x36>
 8009988:	051b      	lsls	r3, r3, #20
 800998a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800998e:	2400      	movs	r4, #0
 8009990:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009994:	4622      	mov	r2, r4
 8009996:	462b      	mov	r3, r5
 8009998:	f7f6 fe5e 	bl	8000658 <__aeabi_dmul>
 800999c:	bd70      	pop	{r4, r5, r6, pc}
	...

080099a0 <_strtod_l>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	ed2d 8b02 	vpush	{d8}
 80099a8:	b09d      	sub	sp, #116	; 0x74
 80099aa:	461f      	mov	r7, r3
 80099ac:	2300      	movs	r3, #0
 80099ae:	9318      	str	r3, [sp, #96]	; 0x60
 80099b0:	4ba2      	ldr	r3, [pc, #648]	; (8009c3c <_strtod_l+0x29c>)
 80099b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9305      	str	r3, [sp, #20]
 80099b8:	4604      	mov	r4, r0
 80099ba:	4618      	mov	r0, r3
 80099bc:	4688      	mov	r8, r1
 80099be:	f7f6 fc31 	bl	8000224 <strlen>
 80099c2:	f04f 0a00 	mov.w	sl, #0
 80099c6:	4605      	mov	r5, r0
 80099c8:	f04f 0b00 	mov.w	fp, #0
 80099cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80099d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099d2:	781a      	ldrb	r2, [r3, #0]
 80099d4:	2a2b      	cmp	r2, #43	; 0x2b
 80099d6:	d04e      	beq.n	8009a76 <_strtod_l+0xd6>
 80099d8:	d83b      	bhi.n	8009a52 <_strtod_l+0xb2>
 80099da:	2a0d      	cmp	r2, #13
 80099dc:	d834      	bhi.n	8009a48 <_strtod_l+0xa8>
 80099de:	2a08      	cmp	r2, #8
 80099e0:	d834      	bhi.n	8009a4c <_strtod_l+0xac>
 80099e2:	2a00      	cmp	r2, #0
 80099e4:	d03e      	beq.n	8009a64 <_strtod_l+0xc4>
 80099e6:	2300      	movs	r3, #0
 80099e8:	930a      	str	r3, [sp, #40]	; 0x28
 80099ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80099ec:	7833      	ldrb	r3, [r6, #0]
 80099ee:	2b30      	cmp	r3, #48	; 0x30
 80099f0:	f040 80b0 	bne.w	8009b54 <_strtod_l+0x1b4>
 80099f4:	7873      	ldrb	r3, [r6, #1]
 80099f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099fa:	2b58      	cmp	r3, #88	; 0x58
 80099fc:	d168      	bne.n	8009ad0 <_strtod_l+0x130>
 80099fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a00:	9301      	str	r3, [sp, #4]
 8009a02:	ab18      	add	r3, sp, #96	; 0x60
 8009a04:	9702      	str	r7, [sp, #8]
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	4a8d      	ldr	r2, [pc, #564]	; (8009c40 <_strtod_l+0x2a0>)
 8009a0a:	ab19      	add	r3, sp, #100	; 0x64
 8009a0c:	a917      	add	r1, sp, #92	; 0x5c
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f001 fdce 	bl	800b5b0 <__gethex>
 8009a14:	f010 0707 	ands.w	r7, r0, #7
 8009a18:	4605      	mov	r5, r0
 8009a1a:	d005      	beq.n	8009a28 <_strtod_l+0x88>
 8009a1c:	2f06      	cmp	r7, #6
 8009a1e:	d12c      	bne.n	8009a7a <_strtod_l+0xda>
 8009a20:	3601      	adds	r6, #1
 8009a22:	2300      	movs	r3, #0
 8009a24:	9617      	str	r6, [sp, #92]	; 0x5c
 8009a26:	930a      	str	r3, [sp, #40]	; 0x28
 8009a28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f040 8590 	bne.w	800a550 <_strtod_l+0xbb0>
 8009a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a32:	b1eb      	cbz	r3, 8009a70 <_strtod_l+0xd0>
 8009a34:	4652      	mov	r2, sl
 8009a36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a3a:	ec43 2b10 	vmov	d0, r2, r3
 8009a3e:	b01d      	add	sp, #116	; 0x74
 8009a40:	ecbd 8b02 	vpop	{d8}
 8009a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a48:	2a20      	cmp	r2, #32
 8009a4a:	d1cc      	bne.n	80099e6 <_strtod_l+0x46>
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a50:	e7be      	b.n	80099d0 <_strtod_l+0x30>
 8009a52:	2a2d      	cmp	r2, #45	; 0x2d
 8009a54:	d1c7      	bne.n	80099e6 <_strtod_l+0x46>
 8009a56:	2201      	movs	r2, #1
 8009a58:	920a      	str	r2, [sp, #40]	; 0x28
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a5e:	785b      	ldrb	r3, [r3, #1]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1c2      	bne.n	80099ea <_strtod_l+0x4a>
 8009a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f040 856e 	bne.w	800a54c <_strtod_l+0xbac>
 8009a70:	4652      	mov	r2, sl
 8009a72:	465b      	mov	r3, fp
 8009a74:	e7e1      	b.n	8009a3a <_strtod_l+0x9a>
 8009a76:	2200      	movs	r2, #0
 8009a78:	e7ee      	b.n	8009a58 <_strtod_l+0xb8>
 8009a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a7c:	b13a      	cbz	r2, 8009a8e <_strtod_l+0xee>
 8009a7e:	2135      	movs	r1, #53	; 0x35
 8009a80:	a81a      	add	r0, sp, #104	; 0x68
 8009a82:	f002 fd46 	bl	800c512 <__copybits>
 8009a86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f002 f905 	bl	800bc98 <_Bfree>
 8009a8e:	3f01      	subs	r7, #1
 8009a90:	2f04      	cmp	r7, #4
 8009a92:	d806      	bhi.n	8009aa2 <_strtod_l+0x102>
 8009a94:	e8df f007 	tbb	[pc, r7]
 8009a98:	1714030a 	.word	0x1714030a
 8009a9c:	0a          	.byte	0x0a
 8009a9d:	00          	.byte	0x00
 8009a9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009aa2:	0728      	lsls	r0, r5, #28
 8009aa4:	d5c0      	bpl.n	8009a28 <_strtod_l+0x88>
 8009aa6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009aaa:	e7bd      	b.n	8009a28 <_strtod_l+0x88>
 8009aac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009ab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ab2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ab6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009aba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009abe:	e7f0      	b.n	8009aa2 <_strtod_l+0x102>
 8009ac0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009c44 <_strtod_l+0x2a4>
 8009ac4:	e7ed      	b.n	8009aa2 <_strtod_l+0x102>
 8009ac6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009aca:	f04f 3aff 	mov.w	sl, #4294967295
 8009ace:	e7e8      	b.n	8009aa2 <_strtod_l+0x102>
 8009ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	2b30      	cmp	r3, #48	; 0x30
 8009ada:	d0f9      	beq.n	8009ad0 <_strtod_l+0x130>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d0a3      	beq.n	8009a28 <_strtod_l+0x88>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f04f 0900 	mov.w	r9, #0
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aea:	9308      	str	r3, [sp, #32]
 8009aec:	f8cd 901c 	str.w	r9, [sp, #28]
 8009af0:	464f      	mov	r7, r9
 8009af2:	220a      	movs	r2, #10
 8009af4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009af6:	7806      	ldrb	r6, [r0, #0]
 8009af8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009afc:	b2d9      	uxtb	r1, r3
 8009afe:	2909      	cmp	r1, #9
 8009b00:	d92a      	bls.n	8009b58 <_strtod_l+0x1b8>
 8009b02:	9905      	ldr	r1, [sp, #20]
 8009b04:	462a      	mov	r2, r5
 8009b06:	f003 f90f 	bl	800cd28 <strncmp>
 8009b0a:	b398      	cbz	r0, 8009b74 <_strtod_l+0x1d4>
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	4632      	mov	r2, r6
 8009b10:	463d      	mov	r5, r7
 8009b12:	9005      	str	r0, [sp, #20]
 8009b14:	4603      	mov	r3, r0
 8009b16:	2a65      	cmp	r2, #101	; 0x65
 8009b18:	d001      	beq.n	8009b1e <_strtod_l+0x17e>
 8009b1a:	2a45      	cmp	r2, #69	; 0x45
 8009b1c:	d118      	bne.n	8009b50 <_strtod_l+0x1b0>
 8009b1e:	b91d      	cbnz	r5, 8009b28 <_strtod_l+0x188>
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	4302      	orrs	r2, r0
 8009b24:	d09e      	beq.n	8009a64 <_strtod_l+0xc4>
 8009b26:	2500      	movs	r5, #0
 8009b28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009b2c:	f108 0201 	add.w	r2, r8, #1
 8009b30:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b32:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009b36:	2a2b      	cmp	r2, #43	; 0x2b
 8009b38:	d075      	beq.n	8009c26 <_strtod_l+0x286>
 8009b3a:	2a2d      	cmp	r2, #45	; 0x2d
 8009b3c:	d07b      	beq.n	8009c36 <_strtod_l+0x296>
 8009b3e:	f04f 0c00 	mov.w	ip, #0
 8009b42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009b46:	2909      	cmp	r1, #9
 8009b48:	f240 8082 	bls.w	8009c50 <_strtod_l+0x2b0>
 8009b4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b50:	2600      	movs	r6, #0
 8009b52:	e09d      	b.n	8009c90 <_strtod_l+0x2f0>
 8009b54:	2300      	movs	r3, #0
 8009b56:	e7c4      	b.n	8009ae2 <_strtod_l+0x142>
 8009b58:	2f08      	cmp	r7, #8
 8009b5a:	bfd8      	it	le
 8009b5c:	9907      	ldrle	r1, [sp, #28]
 8009b5e:	f100 0001 	add.w	r0, r0, #1
 8009b62:	bfda      	itte	le
 8009b64:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b68:	9307      	strle	r3, [sp, #28]
 8009b6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009b6e:	3701      	adds	r7, #1
 8009b70:	9017      	str	r0, [sp, #92]	; 0x5c
 8009b72:	e7bf      	b.n	8009af4 <_strtod_l+0x154>
 8009b74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b76:	195a      	adds	r2, r3, r5
 8009b78:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b7a:	5d5a      	ldrb	r2, [r3, r5]
 8009b7c:	2f00      	cmp	r7, #0
 8009b7e:	d037      	beq.n	8009bf0 <_strtod_l+0x250>
 8009b80:	9005      	str	r0, [sp, #20]
 8009b82:	463d      	mov	r5, r7
 8009b84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009b88:	2b09      	cmp	r3, #9
 8009b8a:	d912      	bls.n	8009bb2 <_strtod_l+0x212>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e7c2      	b.n	8009b16 <_strtod_l+0x176>
 8009b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b96:	785a      	ldrb	r2, [r3, #1]
 8009b98:	3001      	adds	r0, #1
 8009b9a:	2a30      	cmp	r2, #48	; 0x30
 8009b9c:	d0f8      	beq.n	8009b90 <_strtod_l+0x1f0>
 8009b9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	f200 84d9 	bhi.w	800a55a <_strtod_l+0xbba>
 8009ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009baa:	9005      	str	r0, [sp, #20]
 8009bac:	2000      	movs	r0, #0
 8009bae:	9308      	str	r3, [sp, #32]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	3a30      	subs	r2, #48	; 0x30
 8009bb4:	f100 0301 	add.w	r3, r0, #1
 8009bb8:	d014      	beq.n	8009be4 <_strtod_l+0x244>
 8009bba:	9905      	ldr	r1, [sp, #20]
 8009bbc:	4419      	add	r1, r3
 8009bbe:	9105      	str	r1, [sp, #20]
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	eb00 0e05 	add.w	lr, r0, r5
 8009bc6:	210a      	movs	r1, #10
 8009bc8:	4573      	cmp	r3, lr
 8009bca:	d113      	bne.n	8009bf4 <_strtod_l+0x254>
 8009bcc:	182b      	adds	r3, r5, r0
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	f105 0501 	add.w	r5, r5, #1
 8009bd4:	4405      	add	r5, r0
 8009bd6:	dc1c      	bgt.n	8009c12 <_strtod_l+0x272>
 8009bd8:	9907      	ldr	r1, [sp, #28]
 8009bda:	230a      	movs	r3, #10
 8009bdc:	fb03 2301 	mla	r3, r3, r1, r2
 8009be0:	9307      	str	r3, [sp, #28]
 8009be2:	2300      	movs	r3, #0
 8009be4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009be6:	1c51      	adds	r1, r2, #1
 8009be8:	9117      	str	r1, [sp, #92]	; 0x5c
 8009bea:	7852      	ldrb	r2, [r2, #1]
 8009bec:	4618      	mov	r0, r3
 8009bee:	e7c9      	b.n	8009b84 <_strtod_l+0x1e4>
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	e7d2      	b.n	8009b9a <_strtod_l+0x1fa>
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	dc04      	bgt.n	8009c02 <_strtod_l+0x262>
 8009bf8:	9e07      	ldr	r6, [sp, #28]
 8009bfa:	434e      	muls	r6, r1
 8009bfc:	9607      	str	r6, [sp, #28]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	e7e2      	b.n	8009bc8 <_strtod_l+0x228>
 8009c02:	f103 0c01 	add.w	ip, r3, #1
 8009c06:	f1bc 0f10 	cmp.w	ip, #16
 8009c0a:	bfd8      	it	le
 8009c0c:	fb01 f909 	mulle.w	r9, r1, r9
 8009c10:	e7f5      	b.n	8009bfe <_strtod_l+0x25e>
 8009c12:	2d10      	cmp	r5, #16
 8009c14:	bfdc      	itt	le
 8009c16:	230a      	movle	r3, #10
 8009c18:	fb03 2909 	mlale	r9, r3, r9, r2
 8009c1c:	e7e1      	b.n	8009be2 <_strtod_l+0x242>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	2301      	movs	r3, #1
 8009c24:	e77c      	b.n	8009b20 <_strtod_l+0x180>
 8009c26:	f04f 0c00 	mov.w	ip, #0
 8009c2a:	f108 0202 	add.w	r2, r8, #2
 8009c2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c30:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009c34:	e785      	b.n	8009b42 <_strtod_l+0x1a2>
 8009c36:	f04f 0c01 	mov.w	ip, #1
 8009c3a:	e7f6      	b.n	8009c2a <_strtod_l+0x28a>
 8009c3c:	0800db00 	.word	0x0800db00
 8009c40:	0800d81c 	.word	0x0800d81c
 8009c44:	7ff00000 	.word	0x7ff00000
 8009c48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c4a:	1c51      	adds	r1, r2, #1
 8009c4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009c4e:	7852      	ldrb	r2, [r2, #1]
 8009c50:	2a30      	cmp	r2, #48	; 0x30
 8009c52:	d0f9      	beq.n	8009c48 <_strtod_l+0x2a8>
 8009c54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009c58:	2908      	cmp	r1, #8
 8009c5a:	f63f af79 	bhi.w	8009b50 <_strtod_l+0x1b0>
 8009c5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009c62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c64:	9206      	str	r2, [sp, #24]
 8009c66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c68:	1c51      	adds	r1, r2, #1
 8009c6a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009c6c:	7852      	ldrb	r2, [r2, #1]
 8009c6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009c72:	2e09      	cmp	r6, #9
 8009c74:	d937      	bls.n	8009ce6 <_strtod_l+0x346>
 8009c76:	9e06      	ldr	r6, [sp, #24]
 8009c78:	1b89      	subs	r1, r1, r6
 8009c7a:	2908      	cmp	r1, #8
 8009c7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009c80:	dc02      	bgt.n	8009c88 <_strtod_l+0x2e8>
 8009c82:	4576      	cmp	r6, lr
 8009c84:	bfa8      	it	ge
 8009c86:	4676      	movge	r6, lr
 8009c88:	f1bc 0f00 	cmp.w	ip, #0
 8009c8c:	d000      	beq.n	8009c90 <_strtod_l+0x2f0>
 8009c8e:	4276      	negs	r6, r6
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	d14d      	bne.n	8009d30 <_strtod_l+0x390>
 8009c94:	9904      	ldr	r1, [sp, #16]
 8009c96:	4301      	orrs	r1, r0
 8009c98:	f47f aec6 	bne.w	8009a28 <_strtod_l+0x88>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f47f aee1 	bne.w	8009a64 <_strtod_l+0xc4>
 8009ca2:	2a69      	cmp	r2, #105	; 0x69
 8009ca4:	d027      	beq.n	8009cf6 <_strtod_l+0x356>
 8009ca6:	dc24      	bgt.n	8009cf2 <_strtod_l+0x352>
 8009ca8:	2a49      	cmp	r2, #73	; 0x49
 8009caa:	d024      	beq.n	8009cf6 <_strtod_l+0x356>
 8009cac:	2a4e      	cmp	r2, #78	; 0x4e
 8009cae:	f47f aed9 	bne.w	8009a64 <_strtod_l+0xc4>
 8009cb2:	499f      	ldr	r1, [pc, #636]	; (8009f30 <_strtod_l+0x590>)
 8009cb4:	a817      	add	r0, sp, #92	; 0x5c
 8009cb6:	f001 fed3 	bl	800ba60 <__match>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	f43f aed2 	beq.w	8009a64 <_strtod_l+0xc4>
 8009cc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b28      	cmp	r3, #40	; 0x28
 8009cc6:	d12d      	bne.n	8009d24 <_strtod_l+0x384>
 8009cc8:	499a      	ldr	r1, [pc, #616]	; (8009f34 <_strtod_l+0x594>)
 8009cca:	aa1a      	add	r2, sp, #104	; 0x68
 8009ccc:	a817      	add	r0, sp, #92	; 0x5c
 8009cce:	f001 fedb 	bl	800ba88 <__hexnan>
 8009cd2:	2805      	cmp	r0, #5
 8009cd4:	d126      	bne.n	8009d24 <_strtod_l+0x384>
 8009cd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cd8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009cdc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ce0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ce4:	e6a0      	b.n	8009a28 <_strtod_l+0x88>
 8009ce6:	210a      	movs	r1, #10
 8009ce8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009cec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009cf0:	e7b9      	b.n	8009c66 <_strtod_l+0x2c6>
 8009cf2:	2a6e      	cmp	r2, #110	; 0x6e
 8009cf4:	e7db      	b.n	8009cae <_strtod_l+0x30e>
 8009cf6:	4990      	ldr	r1, [pc, #576]	; (8009f38 <_strtod_l+0x598>)
 8009cf8:	a817      	add	r0, sp, #92	; 0x5c
 8009cfa:	f001 feb1 	bl	800ba60 <__match>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f aeb0 	beq.w	8009a64 <_strtod_l+0xc4>
 8009d04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d06:	498d      	ldr	r1, [pc, #564]	; (8009f3c <_strtod_l+0x59c>)
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	a817      	add	r0, sp, #92	; 0x5c
 8009d0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d0e:	f001 fea7 	bl	800ba60 <__match>
 8009d12:	b910      	cbnz	r0, 8009d1a <_strtod_l+0x37a>
 8009d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d16:	3301      	adds	r3, #1
 8009d18:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009f4c <_strtod_l+0x5ac>
 8009d1e:	f04f 0a00 	mov.w	sl, #0
 8009d22:	e681      	b.n	8009a28 <_strtod_l+0x88>
 8009d24:	4886      	ldr	r0, [pc, #536]	; (8009f40 <_strtod_l+0x5a0>)
 8009d26:	f002 ffe7 	bl	800ccf8 <nan>
 8009d2a:	ec5b ab10 	vmov	sl, fp, d0
 8009d2e:	e67b      	b.n	8009a28 <_strtod_l+0x88>
 8009d30:	9b05      	ldr	r3, [sp, #20]
 8009d32:	9807      	ldr	r0, [sp, #28]
 8009d34:	1af3      	subs	r3, r6, r3
 8009d36:	2f00      	cmp	r7, #0
 8009d38:	bf08      	it	eq
 8009d3a:	462f      	moveq	r7, r5
 8009d3c:	2d10      	cmp	r5, #16
 8009d3e:	9306      	str	r3, [sp, #24]
 8009d40:	46a8      	mov	r8, r5
 8009d42:	bfa8      	it	ge
 8009d44:	f04f 0810 	movge.w	r8, #16
 8009d48:	f7f6 fc0c 	bl	8000564 <__aeabi_ui2d>
 8009d4c:	2d09      	cmp	r5, #9
 8009d4e:	4682      	mov	sl, r0
 8009d50:	468b      	mov	fp, r1
 8009d52:	dd13      	ble.n	8009d7c <_strtod_l+0x3dc>
 8009d54:	4b7b      	ldr	r3, [pc, #492]	; (8009f44 <_strtod_l+0x5a4>)
 8009d56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d5e:	f7f6 fc7b 	bl	8000658 <__aeabi_dmul>
 8009d62:	4682      	mov	sl, r0
 8009d64:	4648      	mov	r0, r9
 8009d66:	468b      	mov	fp, r1
 8009d68:	f7f6 fbfc 	bl	8000564 <__aeabi_ui2d>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4650      	mov	r0, sl
 8009d72:	4659      	mov	r1, fp
 8009d74:	f7f6 faba 	bl	80002ec <__adddf3>
 8009d78:	4682      	mov	sl, r0
 8009d7a:	468b      	mov	fp, r1
 8009d7c:	2d0f      	cmp	r5, #15
 8009d7e:	dc38      	bgt.n	8009df2 <_strtod_l+0x452>
 8009d80:	9b06      	ldr	r3, [sp, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f43f ae50 	beq.w	8009a28 <_strtod_l+0x88>
 8009d88:	dd24      	ble.n	8009dd4 <_strtod_l+0x434>
 8009d8a:	2b16      	cmp	r3, #22
 8009d8c:	dc0b      	bgt.n	8009da6 <_strtod_l+0x406>
 8009d8e:	496d      	ldr	r1, [pc, #436]	; (8009f44 <_strtod_l+0x5a4>)
 8009d90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d98:	4652      	mov	r2, sl
 8009d9a:	465b      	mov	r3, fp
 8009d9c:	f7f6 fc5c 	bl	8000658 <__aeabi_dmul>
 8009da0:	4682      	mov	sl, r0
 8009da2:	468b      	mov	fp, r1
 8009da4:	e640      	b.n	8009a28 <_strtod_l+0x88>
 8009da6:	9a06      	ldr	r2, [sp, #24]
 8009da8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009dac:	4293      	cmp	r3, r2
 8009dae:	db20      	blt.n	8009df2 <_strtod_l+0x452>
 8009db0:	4c64      	ldr	r4, [pc, #400]	; (8009f44 <_strtod_l+0x5a4>)
 8009db2:	f1c5 050f 	rsb	r5, r5, #15
 8009db6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009dba:	4652      	mov	r2, sl
 8009dbc:	465b      	mov	r3, fp
 8009dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc2:	f7f6 fc49 	bl	8000658 <__aeabi_dmul>
 8009dc6:	9b06      	ldr	r3, [sp, #24]
 8009dc8:	1b5d      	subs	r5, r3, r5
 8009dca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009dce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009dd2:	e7e3      	b.n	8009d9c <_strtod_l+0x3fc>
 8009dd4:	9b06      	ldr	r3, [sp, #24]
 8009dd6:	3316      	adds	r3, #22
 8009dd8:	db0b      	blt.n	8009df2 <_strtod_l+0x452>
 8009dda:	9b05      	ldr	r3, [sp, #20]
 8009ddc:	1b9e      	subs	r6, r3, r6
 8009dde:	4b59      	ldr	r3, [pc, #356]	; (8009f44 <_strtod_l+0x5a4>)
 8009de0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009de4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009de8:	4650      	mov	r0, sl
 8009dea:	4659      	mov	r1, fp
 8009dec:	f7f6 fd5e 	bl	80008ac <__aeabi_ddiv>
 8009df0:	e7d6      	b.n	8009da0 <_strtod_l+0x400>
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	eba5 0808 	sub.w	r8, r5, r8
 8009df8:	4498      	add	r8, r3
 8009dfa:	f1b8 0f00 	cmp.w	r8, #0
 8009dfe:	dd74      	ble.n	8009eea <_strtod_l+0x54a>
 8009e00:	f018 030f 	ands.w	r3, r8, #15
 8009e04:	d00a      	beq.n	8009e1c <_strtod_l+0x47c>
 8009e06:	494f      	ldr	r1, [pc, #316]	; (8009f44 <_strtod_l+0x5a4>)
 8009e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e0c:	4652      	mov	r2, sl
 8009e0e:	465b      	mov	r3, fp
 8009e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e14:	f7f6 fc20 	bl	8000658 <__aeabi_dmul>
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	f038 080f 	bics.w	r8, r8, #15
 8009e20:	d04f      	beq.n	8009ec2 <_strtod_l+0x522>
 8009e22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009e26:	dd22      	ble.n	8009e6e <_strtod_l+0x4ce>
 8009e28:	2500      	movs	r5, #0
 8009e2a:	462e      	mov	r6, r5
 8009e2c:	9507      	str	r5, [sp, #28]
 8009e2e:	9505      	str	r5, [sp, #20]
 8009e30:	2322      	movs	r3, #34	; 0x22
 8009e32:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009f4c <_strtod_l+0x5ac>
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	9b07      	ldr	r3, [sp, #28]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f43f adf2 	beq.w	8009a28 <_strtod_l+0x88>
 8009e44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e46:	4620      	mov	r0, r4
 8009e48:	f001 ff26 	bl	800bc98 <_Bfree>
 8009e4c:	9905      	ldr	r1, [sp, #20]
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f001 ff22 	bl	800bc98 <_Bfree>
 8009e54:	4631      	mov	r1, r6
 8009e56:	4620      	mov	r0, r4
 8009e58:	f001 ff1e 	bl	800bc98 <_Bfree>
 8009e5c:	9907      	ldr	r1, [sp, #28]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f001 ff1a 	bl	800bc98 <_Bfree>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4620      	mov	r0, r4
 8009e68:	f001 ff16 	bl	800bc98 <_Bfree>
 8009e6c:	e5dc      	b.n	8009a28 <_strtod_l+0x88>
 8009e6e:	4b36      	ldr	r3, [pc, #216]	; (8009f48 <_strtod_l+0x5a8>)
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	2300      	movs	r3, #0
 8009e74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009e78:	4650      	mov	r0, sl
 8009e7a:	4659      	mov	r1, fp
 8009e7c:	4699      	mov	r9, r3
 8009e7e:	f1b8 0f01 	cmp.w	r8, #1
 8009e82:	dc21      	bgt.n	8009ec8 <_strtod_l+0x528>
 8009e84:	b10b      	cbz	r3, 8009e8a <_strtod_l+0x4ea>
 8009e86:	4682      	mov	sl, r0
 8009e88:	468b      	mov	fp, r1
 8009e8a:	4b2f      	ldr	r3, [pc, #188]	; (8009f48 <_strtod_l+0x5a8>)
 8009e8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009e90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009e94:	4652      	mov	r2, sl
 8009e96:	465b      	mov	r3, fp
 8009e98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009e9c:	f7f6 fbdc 	bl	8000658 <__aeabi_dmul>
 8009ea0:	4b2a      	ldr	r3, [pc, #168]	; (8009f4c <_strtod_l+0x5ac>)
 8009ea2:	460a      	mov	r2, r1
 8009ea4:	400b      	ands	r3, r1
 8009ea6:	492a      	ldr	r1, [pc, #168]	; (8009f50 <_strtod_l+0x5b0>)
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	4682      	mov	sl, r0
 8009eac:	d8bc      	bhi.n	8009e28 <_strtod_l+0x488>
 8009eae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009eb2:	428b      	cmp	r3, r1
 8009eb4:	bf86      	itte	hi
 8009eb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009f54 <_strtod_l+0x5b4>
 8009eba:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ebe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	e084      	b.n	8009fd2 <_strtod_l+0x632>
 8009ec8:	f018 0f01 	tst.w	r8, #1
 8009ecc:	d005      	beq.n	8009eda <_strtod_l+0x53a>
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 fbc0 	bl	8000658 <__aeabi_dmul>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	9a04      	ldr	r2, [sp, #16]
 8009edc:	3208      	adds	r2, #8
 8009ede:	f109 0901 	add.w	r9, r9, #1
 8009ee2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009ee6:	9204      	str	r2, [sp, #16]
 8009ee8:	e7c9      	b.n	8009e7e <_strtod_l+0x4de>
 8009eea:	d0ea      	beq.n	8009ec2 <_strtod_l+0x522>
 8009eec:	f1c8 0800 	rsb	r8, r8, #0
 8009ef0:	f018 020f 	ands.w	r2, r8, #15
 8009ef4:	d00a      	beq.n	8009f0c <_strtod_l+0x56c>
 8009ef6:	4b13      	ldr	r3, [pc, #76]	; (8009f44 <_strtod_l+0x5a4>)
 8009ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009efc:	4650      	mov	r0, sl
 8009efe:	4659      	mov	r1, fp
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7f6 fcd2 	bl	80008ac <__aeabi_ddiv>
 8009f08:	4682      	mov	sl, r0
 8009f0a:	468b      	mov	fp, r1
 8009f0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009f10:	d0d7      	beq.n	8009ec2 <_strtod_l+0x522>
 8009f12:	f1b8 0f1f 	cmp.w	r8, #31
 8009f16:	dd1f      	ble.n	8009f58 <_strtod_l+0x5b8>
 8009f18:	2500      	movs	r5, #0
 8009f1a:	462e      	mov	r6, r5
 8009f1c:	9507      	str	r5, [sp, #28]
 8009f1e:	9505      	str	r5, [sp, #20]
 8009f20:	2322      	movs	r3, #34	; 0x22
 8009f22:	f04f 0a00 	mov.w	sl, #0
 8009f26:	f04f 0b00 	mov.w	fp, #0
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	e786      	b.n	8009e3c <_strtod_l+0x49c>
 8009f2e:	bf00      	nop
 8009f30:	0800d7ed 	.word	0x0800d7ed
 8009f34:	0800d830 	.word	0x0800d830
 8009f38:	0800d7e5 	.word	0x0800d7e5
 8009f3c:	0800da24 	.word	0x0800da24
 8009f40:	0800d91f 	.word	0x0800d91f
 8009f44:	0800db98 	.word	0x0800db98
 8009f48:	0800db70 	.word	0x0800db70
 8009f4c:	7ff00000 	.word	0x7ff00000
 8009f50:	7ca00000 	.word	0x7ca00000
 8009f54:	7fefffff 	.word	0x7fefffff
 8009f58:	f018 0310 	ands.w	r3, r8, #16
 8009f5c:	bf18      	it	ne
 8009f5e:	236a      	movne	r3, #106	; 0x6a
 8009f60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a310 <_strtod_l+0x970>
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	4650      	mov	r0, sl
 8009f68:	4659      	mov	r1, fp
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f018 0f01 	tst.w	r8, #1
 8009f70:	d004      	beq.n	8009f7c <_strtod_l+0x5dc>
 8009f72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f76:	f7f6 fb6f 	bl	8000658 <__aeabi_dmul>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009f80:	f109 0908 	add.w	r9, r9, #8
 8009f84:	d1f2      	bne.n	8009f6c <_strtod_l+0x5cc>
 8009f86:	b10b      	cbz	r3, 8009f8c <_strtod_l+0x5ec>
 8009f88:	4682      	mov	sl, r0
 8009f8a:	468b      	mov	fp, r1
 8009f8c:	9b04      	ldr	r3, [sp, #16]
 8009f8e:	b1c3      	cbz	r3, 8009fc2 <_strtod_l+0x622>
 8009f90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	4659      	mov	r1, fp
 8009f9c:	dd11      	ble.n	8009fc2 <_strtod_l+0x622>
 8009f9e:	2b1f      	cmp	r3, #31
 8009fa0:	f340 8124 	ble.w	800a1ec <_strtod_l+0x84c>
 8009fa4:	2b34      	cmp	r3, #52	; 0x34
 8009fa6:	bfde      	ittt	le
 8009fa8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009fac:	f04f 33ff 	movle.w	r3, #4294967295
 8009fb0:	fa03 f202 	lslle.w	r2, r3, r2
 8009fb4:	f04f 0a00 	mov.w	sl, #0
 8009fb8:	bfcc      	ite	gt
 8009fba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009fbe:	ea02 0b01 	andle.w	fp, r2, r1
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	4659      	mov	r1, fp
 8009fca:	f7f6 fdad 	bl	8000b28 <__aeabi_dcmpeq>
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d1a2      	bne.n	8009f18 <_strtod_l+0x578>
 8009fd2:	9b07      	ldr	r3, [sp, #28]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	9908      	ldr	r1, [sp, #32]
 8009fd8:	462b      	mov	r3, r5
 8009fda:	463a      	mov	r2, r7
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f001 fec3 	bl	800bd68 <__s2b>
 8009fe2:	9007      	str	r0, [sp, #28]
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	f43f af1f 	beq.w	8009e28 <_strtod_l+0x488>
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	1b9e      	subs	r6, r3, r6
 8009fee:	9b06      	ldr	r3, [sp, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	bfb4      	ite	lt
 8009ff4:	4633      	movlt	r3, r6
 8009ff6:	2300      	movge	r3, #0
 8009ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8009ffa:	9b06      	ldr	r3, [sp, #24]
 8009ffc:	2500      	movs	r5, #0
 8009ffe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a002:	9312      	str	r3, [sp, #72]	; 0x48
 800a004:	462e      	mov	r6, r5
 800a006:	9b07      	ldr	r3, [sp, #28]
 800a008:	4620      	mov	r0, r4
 800a00a:	6859      	ldr	r1, [r3, #4]
 800a00c:	f001 fe04 	bl	800bc18 <_Balloc>
 800a010:	9005      	str	r0, [sp, #20]
 800a012:	2800      	cmp	r0, #0
 800a014:	f43f af0c 	beq.w	8009e30 <_strtod_l+0x490>
 800a018:	9b07      	ldr	r3, [sp, #28]
 800a01a:	691a      	ldr	r2, [r3, #16]
 800a01c:	3202      	adds	r2, #2
 800a01e:	f103 010c 	add.w	r1, r3, #12
 800a022:	0092      	lsls	r2, r2, #2
 800a024:	300c      	adds	r0, #12
 800a026:	f001 fde9 	bl	800bbfc <memcpy>
 800a02a:	ec4b ab10 	vmov	d0, sl, fp
 800a02e:	aa1a      	add	r2, sp, #104	; 0x68
 800a030:	a919      	add	r1, sp, #100	; 0x64
 800a032:	4620      	mov	r0, r4
 800a034:	f002 f9de 	bl	800c3f4 <__d2b>
 800a038:	ec4b ab18 	vmov	d8, sl, fp
 800a03c:	9018      	str	r0, [sp, #96]	; 0x60
 800a03e:	2800      	cmp	r0, #0
 800a040:	f43f aef6 	beq.w	8009e30 <_strtod_l+0x490>
 800a044:	2101      	movs	r1, #1
 800a046:	4620      	mov	r0, r4
 800a048:	f001 ff28 	bl	800be9c <__i2b>
 800a04c:	4606      	mov	r6, r0
 800a04e:	2800      	cmp	r0, #0
 800a050:	f43f aeee 	beq.w	8009e30 <_strtod_l+0x490>
 800a054:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a056:	9904      	ldr	r1, [sp, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bfab      	itete	ge
 800a05c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a05e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a060:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a062:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a066:	bfac      	ite	ge
 800a068:	eb03 0902 	addge.w	r9, r3, r2
 800a06c:	1ad7      	sublt	r7, r2, r3
 800a06e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a070:	eba3 0801 	sub.w	r8, r3, r1
 800a074:	4490      	add	r8, r2
 800a076:	4ba1      	ldr	r3, [pc, #644]	; (800a2fc <_strtod_l+0x95c>)
 800a078:	f108 38ff 	add.w	r8, r8, #4294967295
 800a07c:	4598      	cmp	r8, r3
 800a07e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a082:	f280 80c7 	bge.w	800a214 <_strtod_l+0x874>
 800a086:	eba3 0308 	sub.w	r3, r3, r8
 800a08a:	2b1f      	cmp	r3, #31
 800a08c:	eba2 0203 	sub.w	r2, r2, r3
 800a090:	f04f 0101 	mov.w	r1, #1
 800a094:	f300 80b1 	bgt.w	800a1fa <_strtod_l+0x85a>
 800a098:	fa01 f303 	lsl.w	r3, r1, r3
 800a09c:	930d      	str	r3, [sp, #52]	; 0x34
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	eb09 0802 	add.w	r8, r9, r2
 800a0a6:	9b04      	ldr	r3, [sp, #16]
 800a0a8:	45c1      	cmp	r9, r8
 800a0aa:	4417      	add	r7, r2
 800a0ac:	441f      	add	r7, r3
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	bfa8      	it	ge
 800a0b2:	4643      	movge	r3, r8
 800a0b4:	42bb      	cmp	r3, r7
 800a0b6:	bfa8      	it	ge
 800a0b8:	463b      	movge	r3, r7
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfc2      	ittt	gt
 800a0be:	eba8 0803 	subgt.w	r8, r8, r3
 800a0c2:	1aff      	subgt	r7, r7, r3
 800a0c4:	eba9 0903 	subgt.w	r9, r9, r3
 800a0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	dd17      	ble.n	800a0fe <_strtod_l+0x75e>
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f001 ffa2 	bl	800c01c <__pow5mult>
 800a0d8:	4606      	mov	r6, r0
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f43f aea8 	beq.w	8009e30 <_strtod_l+0x490>
 800a0e0:	4601      	mov	r1, r0
 800a0e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f001 feef 	bl	800bec8 <__multiply>
 800a0ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	f43f ae9f 	beq.w	8009e30 <_strtod_l+0x490>
 800a0f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f001 fdcf 	bl	800bc98 <_Bfree>
 800a0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0fc:	9318      	str	r3, [sp, #96]	; 0x60
 800a0fe:	f1b8 0f00 	cmp.w	r8, #0
 800a102:	f300 808c 	bgt.w	800a21e <_strtod_l+0x87e>
 800a106:	9b06      	ldr	r3, [sp, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dd08      	ble.n	800a11e <_strtod_l+0x77e>
 800a10c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a10e:	9905      	ldr	r1, [sp, #20]
 800a110:	4620      	mov	r0, r4
 800a112:	f001 ff83 	bl	800c01c <__pow5mult>
 800a116:	9005      	str	r0, [sp, #20]
 800a118:	2800      	cmp	r0, #0
 800a11a:	f43f ae89 	beq.w	8009e30 <_strtod_l+0x490>
 800a11e:	2f00      	cmp	r7, #0
 800a120:	dd08      	ble.n	800a134 <_strtod_l+0x794>
 800a122:	9905      	ldr	r1, [sp, #20]
 800a124:	463a      	mov	r2, r7
 800a126:	4620      	mov	r0, r4
 800a128:	f001 ffd2 	bl	800c0d0 <__lshift>
 800a12c:	9005      	str	r0, [sp, #20]
 800a12e:	2800      	cmp	r0, #0
 800a130:	f43f ae7e 	beq.w	8009e30 <_strtod_l+0x490>
 800a134:	f1b9 0f00 	cmp.w	r9, #0
 800a138:	dd08      	ble.n	800a14c <_strtod_l+0x7ac>
 800a13a:	4631      	mov	r1, r6
 800a13c:	464a      	mov	r2, r9
 800a13e:	4620      	mov	r0, r4
 800a140:	f001 ffc6 	bl	800c0d0 <__lshift>
 800a144:	4606      	mov	r6, r0
 800a146:	2800      	cmp	r0, #0
 800a148:	f43f ae72 	beq.w	8009e30 <_strtod_l+0x490>
 800a14c:	9a05      	ldr	r2, [sp, #20]
 800a14e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a150:	4620      	mov	r0, r4
 800a152:	f002 f849 	bl	800c1e8 <__mdiff>
 800a156:	4605      	mov	r5, r0
 800a158:	2800      	cmp	r0, #0
 800a15a:	f43f ae69 	beq.w	8009e30 <_strtod_l+0x490>
 800a15e:	68c3      	ldr	r3, [r0, #12]
 800a160:	930b      	str	r3, [sp, #44]	; 0x2c
 800a162:	2300      	movs	r3, #0
 800a164:	60c3      	str	r3, [r0, #12]
 800a166:	4631      	mov	r1, r6
 800a168:	f002 f822 	bl	800c1b0 <__mcmp>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	da60      	bge.n	800a232 <_strtod_l+0x892>
 800a170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a172:	ea53 030a 	orrs.w	r3, r3, sl
 800a176:	f040 8082 	bne.w	800a27e <_strtod_l+0x8de>
 800a17a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d17d      	bne.n	800a27e <_strtod_l+0x8de>
 800a182:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a186:	0d1b      	lsrs	r3, r3, #20
 800a188:	051b      	lsls	r3, r3, #20
 800a18a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a18e:	d976      	bls.n	800a27e <_strtod_l+0x8de>
 800a190:	696b      	ldr	r3, [r5, #20]
 800a192:	b913      	cbnz	r3, 800a19a <_strtod_l+0x7fa>
 800a194:	692b      	ldr	r3, [r5, #16]
 800a196:	2b01      	cmp	r3, #1
 800a198:	dd71      	ble.n	800a27e <_strtod_l+0x8de>
 800a19a:	4629      	mov	r1, r5
 800a19c:	2201      	movs	r2, #1
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f001 ff96 	bl	800c0d0 <__lshift>
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	f002 f802 	bl	800c1b0 <__mcmp>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	dd66      	ble.n	800a27e <_strtod_l+0x8de>
 800a1b0:	9904      	ldr	r1, [sp, #16]
 800a1b2:	4a53      	ldr	r2, [pc, #332]	; (800a300 <_strtod_l+0x960>)
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	2900      	cmp	r1, #0
 800a1b8:	f000 8081 	beq.w	800a2be <_strtod_l+0x91e>
 800a1bc:	ea02 010b 	and.w	r1, r2, fp
 800a1c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a1c4:	dc7b      	bgt.n	800a2be <_strtod_l+0x91e>
 800a1c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a1ca:	f77f aea9 	ble.w	8009f20 <_strtod_l+0x580>
 800a1ce:	4b4d      	ldr	r3, [pc, #308]	; (800a304 <_strtod_l+0x964>)
 800a1d0:	4650      	mov	r0, sl
 800a1d2:	4659      	mov	r1, fp
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f7f6 fa3f 	bl	8000658 <__aeabi_dmul>
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4303      	orrs	r3, r0
 800a1de:	bf08      	it	eq
 800a1e0:	2322      	moveq	r3, #34	; 0x22
 800a1e2:	4682      	mov	sl, r0
 800a1e4:	468b      	mov	fp, r1
 800a1e6:	bf08      	it	eq
 800a1e8:	6023      	streq	r3, [r4, #0]
 800a1ea:	e62b      	b.n	8009e44 <_strtod_l+0x4a4>
 800a1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a1f8:	e6e3      	b.n	8009fc2 <_strtod_l+0x622>
 800a1fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a1fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a202:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a206:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a20a:	fa01 f308 	lsl.w	r3, r1, r8
 800a20e:	9308      	str	r3, [sp, #32]
 800a210:	910d      	str	r1, [sp, #52]	; 0x34
 800a212:	e746      	b.n	800a0a2 <_strtod_l+0x702>
 800a214:	2300      	movs	r3, #0
 800a216:	9308      	str	r3, [sp, #32]
 800a218:	2301      	movs	r3, #1
 800a21a:	930d      	str	r3, [sp, #52]	; 0x34
 800a21c:	e741      	b.n	800a0a2 <_strtod_l+0x702>
 800a21e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a220:	4642      	mov	r2, r8
 800a222:	4620      	mov	r0, r4
 800a224:	f001 ff54 	bl	800c0d0 <__lshift>
 800a228:	9018      	str	r0, [sp, #96]	; 0x60
 800a22a:	2800      	cmp	r0, #0
 800a22c:	f47f af6b 	bne.w	800a106 <_strtod_l+0x766>
 800a230:	e5fe      	b.n	8009e30 <_strtod_l+0x490>
 800a232:	465f      	mov	r7, fp
 800a234:	d16e      	bne.n	800a314 <_strtod_l+0x974>
 800a236:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a238:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a23c:	b342      	cbz	r2, 800a290 <_strtod_l+0x8f0>
 800a23e:	4a32      	ldr	r2, [pc, #200]	; (800a308 <_strtod_l+0x968>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d128      	bne.n	800a296 <_strtod_l+0x8f6>
 800a244:	9b04      	ldr	r3, [sp, #16]
 800a246:	4651      	mov	r1, sl
 800a248:	b1eb      	cbz	r3, 800a286 <_strtod_l+0x8e6>
 800a24a:	4b2d      	ldr	r3, [pc, #180]	; (800a300 <_strtod_l+0x960>)
 800a24c:	403b      	ands	r3, r7
 800a24e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a252:	f04f 32ff 	mov.w	r2, #4294967295
 800a256:	d819      	bhi.n	800a28c <_strtod_l+0x8ec>
 800a258:	0d1b      	lsrs	r3, r3, #20
 800a25a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a25e:	fa02 f303 	lsl.w	r3, r2, r3
 800a262:	4299      	cmp	r1, r3
 800a264:	d117      	bne.n	800a296 <_strtod_l+0x8f6>
 800a266:	4b29      	ldr	r3, [pc, #164]	; (800a30c <_strtod_l+0x96c>)
 800a268:	429f      	cmp	r7, r3
 800a26a:	d102      	bne.n	800a272 <_strtod_l+0x8d2>
 800a26c:	3101      	adds	r1, #1
 800a26e:	f43f addf 	beq.w	8009e30 <_strtod_l+0x490>
 800a272:	4b23      	ldr	r3, [pc, #140]	; (800a300 <_strtod_l+0x960>)
 800a274:	403b      	ands	r3, r7
 800a276:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a27a:	f04f 0a00 	mov.w	sl, #0
 800a27e:	9b04      	ldr	r3, [sp, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1a4      	bne.n	800a1ce <_strtod_l+0x82e>
 800a284:	e5de      	b.n	8009e44 <_strtod_l+0x4a4>
 800a286:	f04f 33ff 	mov.w	r3, #4294967295
 800a28a:	e7ea      	b.n	800a262 <_strtod_l+0x8c2>
 800a28c:	4613      	mov	r3, r2
 800a28e:	e7e8      	b.n	800a262 <_strtod_l+0x8c2>
 800a290:	ea53 030a 	orrs.w	r3, r3, sl
 800a294:	d08c      	beq.n	800a1b0 <_strtod_l+0x810>
 800a296:	9b08      	ldr	r3, [sp, #32]
 800a298:	b1db      	cbz	r3, 800a2d2 <_strtod_l+0x932>
 800a29a:	423b      	tst	r3, r7
 800a29c:	d0ef      	beq.n	800a27e <_strtod_l+0x8de>
 800a29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a0:	9a04      	ldr	r2, [sp, #16]
 800a2a2:	4650      	mov	r0, sl
 800a2a4:	4659      	mov	r1, fp
 800a2a6:	b1c3      	cbz	r3, 800a2da <_strtod_l+0x93a>
 800a2a8:	f7ff fb5d 	bl	8009966 <sulp>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	ec51 0b18 	vmov	r0, r1, d8
 800a2b4:	f7f6 f81a 	bl	80002ec <__adddf3>
 800a2b8:	4682      	mov	sl, r0
 800a2ba:	468b      	mov	fp, r1
 800a2bc:	e7df      	b.n	800a27e <_strtod_l+0x8de>
 800a2be:	4013      	ands	r3, r2
 800a2c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a2c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a2d0:	e7d5      	b.n	800a27e <_strtod_l+0x8de>
 800a2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2d4:	ea13 0f0a 	tst.w	r3, sl
 800a2d8:	e7e0      	b.n	800a29c <_strtod_l+0x8fc>
 800a2da:	f7ff fb44 	bl	8009966 <sulp>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	ec51 0b18 	vmov	r0, r1, d8
 800a2e6:	f7f5 ffff 	bl	80002e8 <__aeabi_dsub>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4682      	mov	sl, r0
 800a2f0:	468b      	mov	fp, r1
 800a2f2:	f7f6 fc19 	bl	8000b28 <__aeabi_dcmpeq>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d0c1      	beq.n	800a27e <_strtod_l+0x8de>
 800a2fa:	e611      	b.n	8009f20 <_strtod_l+0x580>
 800a2fc:	fffffc02 	.word	0xfffffc02
 800a300:	7ff00000 	.word	0x7ff00000
 800a304:	39500000 	.word	0x39500000
 800a308:	000fffff 	.word	0x000fffff
 800a30c:	7fefffff 	.word	0x7fefffff
 800a310:	0800d848 	.word	0x0800d848
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	f002 f8c8 	bl	800c4ac <__ratio>
 800a31c:	ec59 8b10 	vmov	r8, r9, d0
 800a320:	ee10 0a10 	vmov	r0, s0
 800a324:	2200      	movs	r2, #0
 800a326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f6 fc10 	bl	8000b50 <__aeabi_dcmple>
 800a330:	2800      	cmp	r0, #0
 800a332:	d07a      	beq.n	800a42a <_strtod_l+0xa8a>
 800a334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04a      	beq.n	800a3d0 <_strtod_l+0xa30>
 800a33a:	4b95      	ldr	r3, [pc, #596]	; (800a590 <_strtod_l+0xbf0>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a342:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a590 <_strtod_l+0xbf0>
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	4b92      	ldr	r3, [pc, #584]	; (800a594 <_strtod_l+0xbf4>)
 800a34c:	403b      	ands	r3, r7
 800a34e:	930d      	str	r3, [sp, #52]	; 0x34
 800a350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a352:	4b91      	ldr	r3, [pc, #580]	; (800a598 <_strtod_l+0xbf8>)
 800a354:	429a      	cmp	r2, r3
 800a356:	f040 80b0 	bne.w	800a4ba <_strtod_l+0xb1a>
 800a35a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a35e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a362:	ec4b ab10 	vmov	d0, sl, fp
 800a366:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a36a:	f001 ffc7 	bl	800c2fc <__ulp>
 800a36e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a372:	ec53 2b10 	vmov	r2, r3, d0
 800a376:	f7f6 f96f 	bl	8000658 <__aeabi_dmul>
 800a37a:	4652      	mov	r2, sl
 800a37c:	465b      	mov	r3, fp
 800a37e:	f7f5 ffb5 	bl	80002ec <__adddf3>
 800a382:	460b      	mov	r3, r1
 800a384:	4983      	ldr	r1, [pc, #524]	; (800a594 <_strtod_l+0xbf4>)
 800a386:	4a85      	ldr	r2, [pc, #532]	; (800a59c <_strtod_l+0xbfc>)
 800a388:	4019      	ands	r1, r3
 800a38a:	4291      	cmp	r1, r2
 800a38c:	4682      	mov	sl, r0
 800a38e:	d960      	bls.n	800a452 <_strtod_l+0xab2>
 800a390:	ee18 3a90 	vmov	r3, s17
 800a394:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a398:	4293      	cmp	r3, r2
 800a39a:	d104      	bne.n	800a3a6 <_strtod_l+0xa06>
 800a39c:	ee18 3a10 	vmov	r3, s16
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	f43f ad45 	beq.w	8009e30 <_strtod_l+0x490>
 800a3a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a5a8 <_strtod_l+0xc08>
 800a3aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a3ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f001 fc71 	bl	800bc98 <_Bfree>
 800a3b6:	9905      	ldr	r1, [sp, #20]
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f001 fc6d 	bl	800bc98 <_Bfree>
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f001 fc69 	bl	800bc98 <_Bfree>
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f001 fc65 	bl	800bc98 <_Bfree>
 800a3ce:	e61a      	b.n	800a006 <_strtod_l+0x666>
 800a3d0:	f1ba 0f00 	cmp.w	sl, #0
 800a3d4:	d11b      	bne.n	800a40e <_strtod_l+0xa6e>
 800a3d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3da:	b9f3      	cbnz	r3, 800a41a <_strtod_l+0xa7a>
 800a3dc:	4b6c      	ldr	r3, [pc, #432]	; (800a590 <_strtod_l+0xbf0>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f6 fbaa 	bl	8000b3c <__aeabi_dcmplt>
 800a3e8:	b9d0      	cbnz	r0, 800a420 <_strtod_l+0xa80>
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	4b6c      	ldr	r3, [pc, #432]	; (800a5a0 <_strtod_l+0xc00>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f7f6 f931 	bl	8000658 <__aeabi_dmul>
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4689      	mov	r9, r1
 800a3fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a402:	9315      	str	r3, [sp, #84]	; 0x54
 800a404:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a408:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a40c:	e79d      	b.n	800a34a <_strtod_l+0x9aa>
 800a40e:	f1ba 0f01 	cmp.w	sl, #1
 800a412:	d102      	bne.n	800a41a <_strtod_l+0xa7a>
 800a414:	2f00      	cmp	r7, #0
 800a416:	f43f ad83 	beq.w	8009f20 <_strtod_l+0x580>
 800a41a:	4b62      	ldr	r3, [pc, #392]	; (800a5a4 <_strtod_l+0xc04>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	e78e      	b.n	800a33e <_strtod_l+0x99e>
 800a420:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a5a0 <_strtod_l+0xc00>
 800a424:	f04f 0800 	mov.w	r8, #0
 800a428:	e7e7      	b.n	800a3fa <_strtod_l+0xa5a>
 800a42a:	4b5d      	ldr	r3, [pc, #372]	; (800a5a0 <_strtod_l+0xc00>)
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	2200      	movs	r2, #0
 800a432:	f7f6 f911 	bl	8000658 <__aeabi_dmul>
 800a436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a438:	4680      	mov	r8, r0
 800a43a:	4689      	mov	r9, r1
 800a43c:	b933      	cbnz	r3, 800a44c <_strtod_l+0xaac>
 800a43e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a442:	900e      	str	r0, [sp, #56]	; 0x38
 800a444:	930f      	str	r3, [sp, #60]	; 0x3c
 800a446:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a44a:	e7dd      	b.n	800a408 <_strtod_l+0xa68>
 800a44c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a450:	e7f9      	b.n	800a446 <_strtod_l+0xaa6>
 800a452:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1a8      	bne.n	800a3ae <_strtod_l+0xa0e>
 800a45c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a462:	0d1b      	lsrs	r3, r3, #20
 800a464:	051b      	lsls	r3, r3, #20
 800a466:	429a      	cmp	r2, r3
 800a468:	d1a1      	bne.n	800a3ae <_strtod_l+0xa0e>
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	f7f6 fc53 	bl	8000d18 <__aeabi_d2lz>
 800a472:	f7f6 f8c3 	bl	80005fc <__aeabi_l2d>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4640      	mov	r0, r8
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f5 ff33 	bl	80002e8 <__aeabi_dsub>
 800a482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a488:	ea43 030a 	orr.w	r3, r3, sl
 800a48c:	4313      	orrs	r3, r2
 800a48e:	4680      	mov	r8, r0
 800a490:	4689      	mov	r9, r1
 800a492:	d055      	beq.n	800a540 <_strtod_l+0xba0>
 800a494:	a336      	add	r3, pc, #216	; (adr r3, 800a570 <_strtod_l+0xbd0>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	f7f6 fb4f 	bl	8000b3c <__aeabi_dcmplt>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f47f acd0 	bne.w	8009e44 <_strtod_l+0x4a4>
 800a4a4:	a334      	add	r3, pc, #208	; (adr r3, 800a578 <_strtod_l+0xbd8>)
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	f7f6 fb63 	bl	8000b78 <__aeabi_dcmpgt>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	f43f af7b 	beq.w	800a3ae <_strtod_l+0xa0e>
 800a4b8:	e4c4      	b.n	8009e44 <_strtod_l+0x4a4>
 800a4ba:	9b04      	ldr	r3, [sp, #16]
 800a4bc:	b333      	cbz	r3, 800a50c <_strtod_l+0xb6c>
 800a4be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4c4:	d822      	bhi.n	800a50c <_strtod_l+0xb6c>
 800a4c6:	a32e      	add	r3, pc, #184	; (adr r3, 800a580 <_strtod_l+0xbe0>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	f7f6 fb3e 	bl	8000b50 <__aeabi_dcmple>
 800a4d4:	b1a0      	cbz	r0, 800a500 <_strtod_l+0xb60>
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	4640      	mov	r0, r8
 800a4da:	f7f6 fb95 	bl	8000c08 <__aeabi_d2uiz>
 800a4de:	2801      	cmp	r0, #1
 800a4e0:	bf38      	it	cc
 800a4e2:	2001      	movcc	r0, #1
 800a4e4:	f7f6 f83e 	bl	8000564 <__aeabi_ui2d>
 800a4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ea:	4680      	mov	r8, r0
 800a4ec:	4689      	mov	r9, r1
 800a4ee:	bb23      	cbnz	r3, 800a53a <_strtod_l+0xb9a>
 800a4f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4f4:	9010      	str	r0, [sp, #64]	; 0x40
 800a4f6:	9311      	str	r3, [sp, #68]	; 0x44
 800a4f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a504:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	9309      	str	r3, [sp, #36]	; 0x24
 800a50c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a510:	eeb0 0a48 	vmov.f32	s0, s16
 800a514:	eef0 0a68 	vmov.f32	s1, s17
 800a518:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a51c:	f001 feee 	bl	800c2fc <__ulp>
 800a520:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a524:	ec53 2b10 	vmov	r2, r3, d0
 800a528:	f7f6 f896 	bl	8000658 <__aeabi_dmul>
 800a52c:	ec53 2b18 	vmov	r2, r3, d8
 800a530:	f7f5 fedc 	bl	80002ec <__adddf3>
 800a534:	4682      	mov	sl, r0
 800a536:	468b      	mov	fp, r1
 800a538:	e78d      	b.n	800a456 <_strtod_l+0xab6>
 800a53a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a53e:	e7db      	b.n	800a4f8 <_strtod_l+0xb58>
 800a540:	a311      	add	r3, pc, #68	; (adr r3, 800a588 <_strtod_l+0xbe8>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f6 faf9 	bl	8000b3c <__aeabi_dcmplt>
 800a54a:	e7b2      	b.n	800a4b2 <_strtod_l+0xb12>
 800a54c:	2300      	movs	r3, #0
 800a54e:	930a      	str	r3, [sp, #40]	; 0x28
 800a550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	f7ff ba6b 	b.w	8009a30 <_strtod_l+0x90>
 800a55a:	2a65      	cmp	r2, #101	; 0x65
 800a55c:	f43f ab5f 	beq.w	8009c1e <_strtod_l+0x27e>
 800a560:	2a45      	cmp	r2, #69	; 0x45
 800a562:	f43f ab5c 	beq.w	8009c1e <_strtod_l+0x27e>
 800a566:	2301      	movs	r3, #1
 800a568:	f7ff bb94 	b.w	8009c94 <_strtod_l+0x2f4>
 800a56c:	f3af 8000 	nop.w
 800a570:	94a03595 	.word	0x94a03595
 800a574:	3fdfffff 	.word	0x3fdfffff
 800a578:	35afe535 	.word	0x35afe535
 800a57c:	3fe00000 	.word	0x3fe00000
 800a580:	ffc00000 	.word	0xffc00000
 800a584:	41dfffff 	.word	0x41dfffff
 800a588:	94a03595 	.word	0x94a03595
 800a58c:	3fcfffff 	.word	0x3fcfffff
 800a590:	3ff00000 	.word	0x3ff00000
 800a594:	7ff00000 	.word	0x7ff00000
 800a598:	7fe00000 	.word	0x7fe00000
 800a59c:	7c9fffff 	.word	0x7c9fffff
 800a5a0:	3fe00000 	.word	0x3fe00000
 800a5a4:	bff00000 	.word	0xbff00000
 800a5a8:	7fefffff 	.word	0x7fefffff

0800a5ac <_strtod_r>:
 800a5ac:	4b01      	ldr	r3, [pc, #4]	; (800a5b4 <_strtod_r+0x8>)
 800a5ae:	f7ff b9f7 	b.w	80099a0 <_strtod_l>
 800a5b2:	bf00      	nop
 800a5b4:	20000074 	.word	0x20000074

0800a5b8 <strtok>:
 800a5b8:	4b16      	ldr	r3, [pc, #88]	; (800a614 <strtok+0x5c>)
 800a5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5bc:	681e      	ldr	r6, [r3, #0]
 800a5be:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	b9fc      	cbnz	r4, 800a604 <strtok+0x4c>
 800a5c4:	2050      	movs	r0, #80	; 0x50
 800a5c6:	9101      	str	r1, [sp, #4]
 800a5c8:	f001 fafe 	bl	800bbc8 <malloc>
 800a5cc:	9901      	ldr	r1, [sp, #4]
 800a5ce:	65b0      	str	r0, [r6, #88]	; 0x58
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	b920      	cbnz	r0, 800a5de <strtok+0x26>
 800a5d4:	4b10      	ldr	r3, [pc, #64]	; (800a618 <strtok+0x60>)
 800a5d6:	4811      	ldr	r0, [pc, #68]	; (800a61c <strtok+0x64>)
 800a5d8:	2157      	movs	r1, #87	; 0x57
 800a5da:	f000 f8d7 	bl	800a78c <__assert_func>
 800a5de:	e9c0 4400 	strd	r4, r4, [r0]
 800a5e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a5e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a5ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a5ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a5f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a5f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a5fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a5fe:	6184      	str	r4, [r0, #24]
 800a600:	7704      	strb	r4, [r0, #28]
 800a602:	6244      	str	r4, [r0, #36]	; 0x24
 800a604:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a606:	2301      	movs	r3, #1
 800a608:	4628      	mov	r0, r5
 800a60a:	b002      	add	sp, #8
 800a60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a610:	f000 b806 	b.w	800a620 <__strtok_r>
 800a614:	2000000c 	.word	0x2000000c
 800a618:	0800d870 	.word	0x0800d870
 800a61c:	0800d887 	.word	0x0800d887

0800a620 <__strtok_r>:
 800a620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a622:	b908      	cbnz	r0, 800a628 <__strtok_r+0x8>
 800a624:	6810      	ldr	r0, [r2, #0]
 800a626:	b188      	cbz	r0, 800a64c <__strtok_r+0x2c>
 800a628:	4604      	mov	r4, r0
 800a62a:	4620      	mov	r0, r4
 800a62c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a630:	460f      	mov	r7, r1
 800a632:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a636:	b91e      	cbnz	r6, 800a640 <__strtok_r+0x20>
 800a638:	b965      	cbnz	r5, 800a654 <__strtok_r+0x34>
 800a63a:	6015      	str	r5, [r2, #0]
 800a63c:	4628      	mov	r0, r5
 800a63e:	e005      	b.n	800a64c <__strtok_r+0x2c>
 800a640:	42b5      	cmp	r5, r6
 800a642:	d1f6      	bne.n	800a632 <__strtok_r+0x12>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1f0      	bne.n	800a62a <__strtok_r+0xa>
 800a648:	6014      	str	r4, [r2, #0]
 800a64a:	7003      	strb	r3, [r0, #0]
 800a64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a64e:	461c      	mov	r4, r3
 800a650:	e00c      	b.n	800a66c <__strtok_r+0x4c>
 800a652:	b915      	cbnz	r5, 800a65a <__strtok_r+0x3a>
 800a654:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a658:	460e      	mov	r6, r1
 800a65a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a65e:	42ab      	cmp	r3, r5
 800a660:	d1f7      	bne.n	800a652 <__strtok_r+0x32>
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0f3      	beq.n	800a64e <__strtok_r+0x2e>
 800a666:	2300      	movs	r3, #0
 800a668:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a66c:	6014      	str	r4, [r2, #0]
 800a66e:	e7ed      	b.n	800a64c <__strtok_r+0x2c>

0800a670 <_strtol_l.constprop.0>:
 800a670:	2b01      	cmp	r3, #1
 800a672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a676:	d001      	beq.n	800a67c <_strtol_l.constprop.0+0xc>
 800a678:	2b24      	cmp	r3, #36	; 0x24
 800a67a:	d906      	bls.n	800a68a <_strtol_l.constprop.0+0x1a>
 800a67c:	f7fe fa86 	bl	8008b8c <__errno>
 800a680:	2316      	movs	r3, #22
 800a682:	6003      	str	r3, [r0, #0]
 800a684:	2000      	movs	r0, #0
 800a686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a770 <_strtol_l.constprop.0+0x100>
 800a68e:	460d      	mov	r5, r1
 800a690:	462e      	mov	r6, r5
 800a692:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a696:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a69a:	f017 0708 	ands.w	r7, r7, #8
 800a69e:	d1f7      	bne.n	800a690 <_strtol_l.constprop.0+0x20>
 800a6a0:	2c2d      	cmp	r4, #45	; 0x2d
 800a6a2:	d132      	bne.n	800a70a <_strtol_l.constprop.0+0x9a>
 800a6a4:	782c      	ldrb	r4, [r5, #0]
 800a6a6:	2701      	movs	r7, #1
 800a6a8:	1cb5      	adds	r5, r6, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d05b      	beq.n	800a766 <_strtol_l.constprop.0+0xf6>
 800a6ae:	2b10      	cmp	r3, #16
 800a6b0:	d109      	bne.n	800a6c6 <_strtol_l.constprop.0+0x56>
 800a6b2:	2c30      	cmp	r4, #48	; 0x30
 800a6b4:	d107      	bne.n	800a6c6 <_strtol_l.constprop.0+0x56>
 800a6b6:	782c      	ldrb	r4, [r5, #0]
 800a6b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6bc:	2c58      	cmp	r4, #88	; 0x58
 800a6be:	d14d      	bne.n	800a75c <_strtol_l.constprop.0+0xec>
 800a6c0:	786c      	ldrb	r4, [r5, #1]
 800a6c2:	2310      	movs	r3, #16
 800a6c4:	3502      	adds	r5, #2
 800a6c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6ce:	f04f 0c00 	mov.w	ip, #0
 800a6d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6d6:	4666      	mov	r6, ip
 800a6d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a6dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a6e0:	f1be 0f09 	cmp.w	lr, #9
 800a6e4:	d816      	bhi.n	800a714 <_strtol_l.constprop.0+0xa4>
 800a6e6:	4674      	mov	r4, lr
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	dd24      	ble.n	800a736 <_strtol_l.constprop.0+0xc6>
 800a6ec:	f1bc 0f00 	cmp.w	ip, #0
 800a6f0:	db1e      	blt.n	800a730 <_strtol_l.constprop.0+0xc0>
 800a6f2:	45b1      	cmp	r9, r6
 800a6f4:	d31c      	bcc.n	800a730 <_strtol_l.constprop.0+0xc0>
 800a6f6:	d101      	bne.n	800a6fc <_strtol_l.constprop.0+0x8c>
 800a6f8:	45a2      	cmp	sl, r4
 800a6fa:	db19      	blt.n	800a730 <_strtol_l.constprop.0+0xc0>
 800a6fc:	fb06 4603 	mla	r6, r6, r3, r4
 800a700:	f04f 0c01 	mov.w	ip, #1
 800a704:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a708:	e7e8      	b.n	800a6dc <_strtol_l.constprop.0+0x6c>
 800a70a:	2c2b      	cmp	r4, #43	; 0x2b
 800a70c:	bf04      	itt	eq
 800a70e:	782c      	ldrbeq	r4, [r5, #0]
 800a710:	1cb5      	addeq	r5, r6, #2
 800a712:	e7ca      	b.n	800a6aa <_strtol_l.constprop.0+0x3a>
 800a714:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a718:	f1be 0f19 	cmp.w	lr, #25
 800a71c:	d801      	bhi.n	800a722 <_strtol_l.constprop.0+0xb2>
 800a71e:	3c37      	subs	r4, #55	; 0x37
 800a720:	e7e2      	b.n	800a6e8 <_strtol_l.constprop.0+0x78>
 800a722:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a726:	f1be 0f19 	cmp.w	lr, #25
 800a72a:	d804      	bhi.n	800a736 <_strtol_l.constprop.0+0xc6>
 800a72c:	3c57      	subs	r4, #87	; 0x57
 800a72e:	e7db      	b.n	800a6e8 <_strtol_l.constprop.0+0x78>
 800a730:	f04f 3cff 	mov.w	ip, #4294967295
 800a734:	e7e6      	b.n	800a704 <_strtol_l.constprop.0+0x94>
 800a736:	f1bc 0f00 	cmp.w	ip, #0
 800a73a:	da05      	bge.n	800a748 <_strtol_l.constprop.0+0xd8>
 800a73c:	2322      	movs	r3, #34	; 0x22
 800a73e:	6003      	str	r3, [r0, #0]
 800a740:	4646      	mov	r6, r8
 800a742:	b942      	cbnz	r2, 800a756 <_strtol_l.constprop.0+0xe6>
 800a744:	4630      	mov	r0, r6
 800a746:	e79e      	b.n	800a686 <_strtol_l.constprop.0+0x16>
 800a748:	b107      	cbz	r7, 800a74c <_strtol_l.constprop.0+0xdc>
 800a74a:	4276      	negs	r6, r6
 800a74c:	2a00      	cmp	r2, #0
 800a74e:	d0f9      	beq.n	800a744 <_strtol_l.constprop.0+0xd4>
 800a750:	f1bc 0f00 	cmp.w	ip, #0
 800a754:	d000      	beq.n	800a758 <_strtol_l.constprop.0+0xe8>
 800a756:	1e69      	subs	r1, r5, #1
 800a758:	6011      	str	r1, [r2, #0]
 800a75a:	e7f3      	b.n	800a744 <_strtol_l.constprop.0+0xd4>
 800a75c:	2430      	movs	r4, #48	; 0x30
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1b1      	bne.n	800a6c6 <_strtol_l.constprop.0+0x56>
 800a762:	2308      	movs	r3, #8
 800a764:	e7af      	b.n	800a6c6 <_strtol_l.constprop.0+0x56>
 800a766:	2c30      	cmp	r4, #48	; 0x30
 800a768:	d0a5      	beq.n	800a6b6 <_strtol_l.constprop.0+0x46>
 800a76a:	230a      	movs	r3, #10
 800a76c:	e7ab      	b.n	800a6c6 <_strtol_l.constprop.0+0x56>
 800a76e:	bf00      	nop
 800a770:	0800d921 	.word	0x0800d921

0800a774 <_strtol_r>:
 800a774:	f7ff bf7c 	b.w	800a670 <_strtol_l.constprop.0>

0800a778 <strtol>:
 800a778:	4613      	mov	r3, r2
 800a77a:	460a      	mov	r2, r1
 800a77c:	4601      	mov	r1, r0
 800a77e:	4802      	ldr	r0, [pc, #8]	; (800a788 <strtol+0x10>)
 800a780:	6800      	ldr	r0, [r0, #0]
 800a782:	f7ff bf75 	b.w	800a670 <_strtol_l.constprop.0>
 800a786:	bf00      	nop
 800a788:	2000000c 	.word	0x2000000c

0800a78c <__assert_func>:
 800a78c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a78e:	4614      	mov	r4, r2
 800a790:	461a      	mov	r2, r3
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <__assert_func+0x2c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4605      	mov	r5, r0
 800a798:	68d8      	ldr	r0, [r3, #12]
 800a79a:	b14c      	cbz	r4, 800a7b0 <__assert_func+0x24>
 800a79c:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <__assert_func+0x30>)
 800a79e:	9100      	str	r1, [sp, #0]
 800a7a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7a4:	4906      	ldr	r1, [pc, #24]	; (800a7c0 <__assert_func+0x34>)
 800a7a6:	462b      	mov	r3, r5
 800a7a8:	f000 fe88 	bl	800b4bc <fiprintf>
 800a7ac:	f002 fb9e 	bl	800ceec <abort>
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <__assert_func+0x38>)
 800a7b2:	461c      	mov	r4, r3
 800a7b4:	e7f3      	b.n	800a79e <__assert_func+0x12>
 800a7b6:	bf00      	nop
 800a7b8:	2000000c 	.word	0x2000000c
 800a7bc:	0800d8e4 	.word	0x0800d8e4
 800a7c0:	0800d8f1 	.word	0x0800d8f1
 800a7c4:	0800d91f 	.word	0x0800d91f

0800a7c8 <quorem>:
 800a7c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	6903      	ldr	r3, [r0, #16]
 800a7ce:	690c      	ldr	r4, [r1, #16]
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	f2c0 8081 	blt.w	800a8da <quorem+0x112>
 800a7d8:	3c01      	subs	r4, #1
 800a7da:	f101 0814 	add.w	r8, r1, #20
 800a7de:	f100 0514 	add.w	r5, r0, #20
 800a7e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a800:	d331      	bcc.n	800a866 <quorem+0x9e>
 800a802:	f04f 0e00 	mov.w	lr, #0
 800a806:	4640      	mov	r0, r8
 800a808:	46ac      	mov	ip, r5
 800a80a:	46f2      	mov	sl, lr
 800a80c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a810:	b293      	uxth	r3, r2
 800a812:	fb06 e303 	mla	r3, r6, r3, lr
 800a816:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	ebaa 0303 	sub.w	r3, sl, r3
 800a820:	f8dc a000 	ldr.w	sl, [ip]
 800a824:	0c12      	lsrs	r2, r2, #16
 800a826:	fa13 f38a 	uxtah	r3, r3, sl
 800a82a:	fb06 e202 	mla	r2, r6, r2, lr
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	9b00      	ldr	r3, [sp, #0]
 800a832:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a836:	b292      	uxth	r2, r2
 800a838:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a83c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a840:	f8bd 3000 	ldrh.w	r3, [sp]
 800a844:	4581      	cmp	r9, r0
 800a846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a84a:	f84c 3b04 	str.w	r3, [ip], #4
 800a84e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a852:	d2db      	bcs.n	800a80c <quorem+0x44>
 800a854:	f855 300b 	ldr.w	r3, [r5, fp]
 800a858:	b92b      	cbnz	r3, 800a866 <quorem+0x9e>
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	3b04      	subs	r3, #4
 800a85e:	429d      	cmp	r5, r3
 800a860:	461a      	mov	r2, r3
 800a862:	d32e      	bcc.n	800a8c2 <quorem+0xfa>
 800a864:	613c      	str	r4, [r7, #16]
 800a866:	4638      	mov	r0, r7
 800a868:	f001 fca2 	bl	800c1b0 <__mcmp>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	db24      	blt.n	800a8ba <quorem+0xf2>
 800a870:	3601      	adds	r6, #1
 800a872:	4628      	mov	r0, r5
 800a874:	f04f 0c00 	mov.w	ip, #0
 800a878:	f858 2b04 	ldr.w	r2, [r8], #4
 800a87c:	f8d0 e000 	ldr.w	lr, [r0]
 800a880:	b293      	uxth	r3, r2
 800a882:	ebac 0303 	sub.w	r3, ip, r3
 800a886:	0c12      	lsrs	r2, r2, #16
 800a888:	fa13 f38e 	uxtah	r3, r3, lr
 800a88c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a894:	b29b      	uxth	r3, r3
 800a896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a89a:	45c1      	cmp	r9, r8
 800a89c:	f840 3b04 	str.w	r3, [r0], #4
 800a8a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8a4:	d2e8      	bcs.n	800a878 <quorem+0xb0>
 800a8a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ae:	b922      	cbnz	r2, 800a8ba <quorem+0xf2>
 800a8b0:	3b04      	subs	r3, #4
 800a8b2:	429d      	cmp	r5, r3
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	d30a      	bcc.n	800a8ce <quorem+0x106>
 800a8b8:	613c      	str	r4, [r7, #16]
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	b003      	add	sp, #12
 800a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	3b04      	subs	r3, #4
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	d1cc      	bne.n	800a864 <quorem+0x9c>
 800a8ca:	3c01      	subs	r4, #1
 800a8cc:	e7c7      	b.n	800a85e <quorem+0x96>
 800a8ce:	6812      	ldr	r2, [r2, #0]
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	2a00      	cmp	r2, #0
 800a8d4:	d1f0      	bne.n	800a8b8 <quorem+0xf0>
 800a8d6:	3c01      	subs	r4, #1
 800a8d8:	e7eb      	b.n	800a8b2 <quorem+0xea>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e7ee      	b.n	800a8bc <quorem+0xf4>
	...

0800a8e0 <_dtoa_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	ed2d 8b04 	vpush	{d8-d9}
 800a8e8:	ec57 6b10 	vmov	r6, r7, d0
 800a8ec:	b093      	sub	sp, #76	; 0x4c
 800a8ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8f4:	9106      	str	r1, [sp, #24]
 800a8f6:	ee10 aa10 	vmov	sl, s0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a900:	46bb      	mov	fp, r7
 800a902:	b975      	cbnz	r5, 800a922 <_dtoa_r+0x42>
 800a904:	2010      	movs	r0, #16
 800a906:	f001 f95f 	bl	800bbc8 <malloc>
 800a90a:	4602      	mov	r2, r0
 800a90c:	6260      	str	r0, [r4, #36]	; 0x24
 800a90e:	b920      	cbnz	r0, 800a91a <_dtoa_r+0x3a>
 800a910:	4ba7      	ldr	r3, [pc, #668]	; (800abb0 <_dtoa_r+0x2d0>)
 800a912:	21ea      	movs	r1, #234	; 0xea
 800a914:	48a7      	ldr	r0, [pc, #668]	; (800abb4 <_dtoa_r+0x2d4>)
 800a916:	f7ff ff39 	bl	800a78c <__assert_func>
 800a91a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a91e:	6005      	str	r5, [r0, #0]
 800a920:	60c5      	str	r5, [r0, #12]
 800a922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a924:	6819      	ldr	r1, [r3, #0]
 800a926:	b151      	cbz	r1, 800a93e <_dtoa_r+0x5e>
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	604a      	str	r2, [r1, #4]
 800a92c:	2301      	movs	r3, #1
 800a92e:	4093      	lsls	r3, r2
 800a930:	608b      	str	r3, [r1, #8]
 800a932:	4620      	mov	r0, r4
 800a934:	f001 f9b0 	bl	800bc98 <_Bfree>
 800a938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	1e3b      	subs	r3, r7, #0
 800a940:	bfaa      	itet	ge
 800a942:	2300      	movge	r3, #0
 800a944:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a948:	f8c8 3000 	strge.w	r3, [r8]
 800a94c:	4b9a      	ldr	r3, [pc, #616]	; (800abb8 <_dtoa_r+0x2d8>)
 800a94e:	bfbc      	itt	lt
 800a950:	2201      	movlt	r2, #1
 800a952:	f8c8 2000 	strlt.w	r2, [r8]
 800a956:	ea33 030b 	bics.w	r3, r3, fp
 800a95a:	d11b      	bne.n	800a994 <_dtoa_r+0xb4>
 800a95c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a95e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a968:	4333      	orrs	r3, r6
 800a96a:	f000 8592 	beq.w	800b492 <_dtoa_r+0xbb2>
 800a96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a970:	b963      	cbnz	r3, 800a98c <_dtoa_r+0xac>
 800a972:	4b92      	ldr	r3, [pc, #584]	; (800abbc <_dtoa_r+0x2dc>)
 800a974:	e022      	b.n	800a9bc <_dtoa_r+0xdc>
 800a976:	4b92      	ldr	r3, [pc, #584]	; (800abc0 <_dtoa_r+0x2e0>)
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	3308      	adds	r3, #8
 800a97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	9801      	ldr	r0, [sp, #4]
 800a982:	b013      	add	sp, #76	; 0x4c
 800a984:	ecbd 8b04 	vpop	{d8-d9}
 800a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98c:	4b8b      	ldr	r3, [pc, #556]	; (800abbc <_dtoa_r+0x2dc>)
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	3303      	adds	r3, #3
 800a992:	e7f3      	b.n	800a97c <_dtoa_r+0x9c>
 800a994:	2200      	movs	r2, #0
 800a996:	2300      	movs	r3, #0
 800a998:	4650      	mov	r0, sl
 800a99a:	4659      	mov	r1, fp
 800a99c:	f7f6 f8c4 	bl	8000b28 <__aeabi_dcmpeq>
 800a9a0:	ec4b ab19 	vmov	d9, sl, fp
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	b158      	cbz	r0, 800a9c0 <_dtoa_r+0xe0>
 800a9a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 856b 	beq.w	800b48c <_dtoa_r+0xbac>
 800a9b6:	4883      	ldr	r0, [pc, #524]	; (800abc4 <_dtoa_r+0x2e4>)
 800a9b8:	6018      	str	r0, [r3, #0]
 800a9ba:	1e43      	subs	r3, r0, #1
 800a9bc:	9301      	str	r3, [sp, #4]
 800a9be:	e7df      	b.n	800a980 <_dtoa_r+0xa0>
 800a9c0:	ec4b ab10 	vmov	d0, sl, fp
 800a9c4:	aa10      	add	r2, sp, #64	; 0x40
 800a9c6:	a911      	add	r1, sp, #68	; 0x44
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f001 fd13 	bl	800c3f4 <__d2b>
 800a9ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a9d2:	ee08 0a10 	vmov	s16, r0
 800a9d6:	2d00      	cmp	r5, #0
 800a9d8:	f000 8084 	beq.w	800aae4 <_dtoa_r+0x204>
 800a9dc:	ee19 3a90 	vmov	r3, s19
 800a9e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a9e8:	4656      	mov	r6, sl
 800a9ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a9ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a9f6:	4b74      	ldr	r3, [pc, #464]	; (800abc8 <_dtoa_r+0x2e8>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	f7f5 fc73 	bl	80002e8 <__aeabi_dsub>
 800aa02:	a365      	add	r3, pc, #404	; (adr r3, 800ab98 <_dtoa_r+0x2b8>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fe26 	bl	8000658 <__aeabi_dmul>
 800aa0c:	a364      	add	r3, pc, #400	; (adr r3, 800aba0 <_dtoa_r+0x2c0>)
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	f7f5 fc6b 	bl	80002ec <__adddf3>
 800aa16:	4606      	mov	r6, r0
 800aa18:	4628      	mov	r0, r5
 800aa1a:	460f      	mov	r7, r1
 800aa1c:	f7f5 fdb2 	bl	8000584 <__aeabi_i2d>
 800aa20:	a361      	add	r3, pc, #388	; (adr r3, 800aba8 <_dtoa_r+0x2c8>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f5 fe17 	bl	8000658 <__aeabi_dmul>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4630      	mov	r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	f7f5 fc5b 	bl	80002ec <__adddf3>
 800aa36:	4606      	mov	r6, r0
 800aa38:	460f      	mov	r7, r1
 800aa3a:	f7f6 f8bd 	bl	8000bb8 <__aeabi_d2iz>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	9000      	str	r0, [sp, #0]
 800aa42:	2300      	movs	r3, #0
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f6 f878 	bl	8000b3c <__aeabi_dcmplt>
 800aa4c:	b150      	cbz	r0, 800aa64 <_dtoa_r+0x184>
 800aa4e:	9800      	ldr	r0, [sp, #0]
 800aa50:	f7f5 fd98 	bl	8000584 <__aeabi_i2d>
 800aa54:	4632      	mov	r2, r6
 800aa56:	463b      	mov	r3, r7
 800aa58:	f7f6 f866 	bl	8000b28 <__aeabi_dcmpeq>
 800aa5c:	b910      	cbnz	r0, 800aa64 <_dtoa_r+0x184>
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	2b16      	cmp	r3, #22
 800aa68:	d85a      	bhi.n	800ab20 <_dtoa_r+0x240>
 800aa6a:	9a00      	ldr	r2, [sp, #0]
 800aa6c:	4b57      	ldr	r3, [pc, #348]	; (800abcc <_dtoa_r+0x2ec>)
 800aa6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	ec51 0b19 	vmov	r0, r1, d9
 800aa7a:	f7f6 f85f 	bl	8000b3c <__aeabi_dcmplt>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d050      	beq.n	800ab24 <_dtoa_r+0x244>
 800aa82:	9b00      	ldr	r3, [sp, #0]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	2300      	movs	r3, #0
 800aa8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa8e:	1b5d      	subs	r5, r3, r5
 800aa90:	1e6b      	subs	r3, r5, #1
 800aa92:	9305      	str	r3, [sp, #20]
 800aa94:	bf45      	ittet	mi
 800aa96:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa9a:	9304      	strmi	r3, [sp, #16]
 800aa9c:	2300      	movpl	r3, #0
 800aa9e:	2300      	movmi	r3, #0
 800aaa0:	bf4c      	ite	mi
 800aaa2:	9305      	strmi	r3, [sp, #20]
 800aaa4:	9304      	strpl	r3, [sp, #16]
 800aaa6:	9b00      	ldr	r3, [sp, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	db3d      	blt.n	800ab28 <_dtoa_r+0x248>
 800aaac:	9b05      	ldr	r3, [sp, #20]
 800aaae:	9a00      	ldr	r2, [sp, #0]
 800aab0:	920a      	str	r2, [sp, #40]	; 0x28
 800aab2:	4413      	add	r3, r2
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	2300      	movs	r3, #0
 800aab8:	9307      	str	r3, [sp, #28]
 800aaba:	9b06      	ldr	r3, [sp, #24]
 800aabc:	2b09      	cmp	r3, #9
 800aabe:	f200 8089 	bhi.w	800abd4 <_dtoa_r+0x2f4>
 800aac2:	2b05      	cmp	r3, #5
 800aac4:	bfc4      	itt	gt
 800aac6:	3b04      	subgt	r3, #4
 800aac8:	9306      	strgt	r3, [sp, #24]
 800aaca:	9b06      	ldr	r3, [sp, #24]
 800aacc:	f1a3 0302 	sub.w	r3, r3, #2
 800aad0:	bfcc      	ite	gt
 800aad2:	2500      	movgt	r5, #0
 800aad4:	2501      	movle	r5, #1
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	f200 8087 	bhi.w	800abea <_dtoa_r+0x30a>
 800aadc:	e8df f003 	tbb	[pc, r3]
 800aae0:	59383a2d 	.word	0x59383a2d
 800aae4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aae8:	441d      	add	r5, r3
 800aaea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	bfc1      	itttt	gt
 800aaf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aaf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aafa:	fa0b f303 	lslgt.w	r3, fp, r3
 800aafe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab02:	bfda      	itte	le
 800ab04:	f1c3 0320 	rsble	r3, r3, #32
 800ab08:	fa06 f003 	lslle.w	r0, r6, r3
 800ab0c:	4318      	orrgt	r0, r3
 800ab0e:	f7f5 fd29 	bl	8000564 <__aeabi_ui2d>
 800ab12:	2301      	movs	r3, #1
 800ab14:	4606      	mov	r6, r0
 800ab16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ab1a:	3d01      	subs	r5, #1
 800ab1c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab1e:	e76a      	b.n	800a9f6 <_dtoa_r+0x116>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e7b2      	b.n	800aa8a <_dtoa_r+0x1aa>
 800ab24:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab26:	e7b1      	b.n	800aa8c <_dtoa_r+0x1ac>
 800ab28:	9b04      	ldr	r3, [sp, #16]
 800ab2a:	9a00      	ldr	r2, [sp, #0]
 800ab2c:	1a9b      	subs	r3, r3, r2
 800ab2e:	9304      	str	r3, [sp, #16]
 800ab30:	4253      	negs	r3, r2
 800ab32:	9307      	str	r3, [sp, #28]
 800ab34:	2300      	movs	r3, #0
 800ab36:	930a      	str	r3, [sp, #40]	; 0x28
 800ab38:	e7bf      	b.n	800aaba <_dtoa_r+0x1da>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	9308      	str	r3, [sp, #32]
 800ab3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dc55      	bgt.n	800abf0 <_dtoa_r+0x310>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab4e:	e00c      	b.n	800ab6a <_dtoa_r+0x28a>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e7f3      	b.n	800ab3c <_dtoa_r+0x25c>
 800ab54:	2300      	movs	r3, #0
 800ab56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab58:	9308      	str	r3, [sp, #32]
 800ab5a:	9b00      	ldr	r3, [sp, #0]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	3301      	adds	r3, #1
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	9303      	str	r3, [sp, #12]
 800ab66:	bfb8      	it	lt
 800ab68:	2301      	movlt	r3, #1
 800ab6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	6042      	str	r2, [r0, #4]
 800ab70:	2204      	movs	r2, #4
 800ab72:	f102 0614 	add.w	r6, r2, #20
 800ab76:	429e      	cmp	r6, r3
 800ab78:	6841      	ldr	r1, [r0, #4]
 800ab7a:	d93d      	bls.n	800abf8 <_dtoa_r+0x318>
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f001 f84b 	bl	800bc18 <_Balloc>
 800ab82:	9001      	str	r0, [sp, #4]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d13b      	bne.n	800ac00 <_dtoa_r+0x320>
 800ab88:	4b11      	ldr	r3, [pc, #68]	; (800abd0 <_dtoa_r+0x2f0>)
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab90:	e6c0      	b.n	800a914 <_dtoa_r+0x34>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e7df      	b.n	800ab56 <_dtoa_r+0x276>
 800ab96:	bf00      	nop
 800ab98:	636f4361 	.word	0x636f4361
 800ab9c:	3fd287a7 	.word	0x3fd287a7
 800aba0:	8b60c8b3 	.word	0x8b60c8b3
 800aba4:	3fc68a28 	.word	0x3fc68a28
 800aba8:	509f79fb 	.word	0x509f79fb
 800abac:	3fd34413 	.word	0x3fd34413
 800abb0:	0800d870 	.word	0x0800d870
 800abb4:	0800da2e 	.word	0x0800da2e
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	0800da2a 	.word	0x0800da2a
 800abc0:	0800da21 	.word	0x0800da21
 800abc4:	0800d7f1 	.word	0x0800d7f1
 800abc8:	3ff80000 	.word	0x3ff80000
 800abcc:	0800db98 	.word	0x0800db98
 800abd0:	0800da89 	.word	0x0800da89
 800abd4:	2501      	movs	r5, #1
 800abd6:	2300      	movs	r3, #0
 800abd8:	9306      	str	r3, [sp, #24]
 800abda:	9508      	str	r5, [sp, #32]
 800abdc:	f04f 33ff 	mov.w	r3, #4294967295
 800abe0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abe4:	2200      	movs	r2, #0
 800abe6:	2312      	movs	r3, #18
 800abe8:	e7b0      	b.n	800ab4c <_dtoa_r+0x26c>
 800abea:	2301      	movs	r3, #1
 800abec:	9308      	str	r3, [sp, #32]
 800abee:	e7f5      	b.n	800abdc <_dtoa_r+0x2fc>
 800abf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abf6:	e7b8      	b.n	800ab6a <_dtoa_r+0x28a>
 800abf8:	3101      	adds	r1, #1
 800abfa:	6041      	str	r1, [r0, #4]
 800abfc:	0052      	lsls	r2, r2, #1
 800abfe:	e7b8      	b.n	800ab72 <_dtoa_r+0x292>
 800ac00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac02:	9a01      	ldr	r2, [sp, #4]
 800ac04:	601a      	str	r2, [r3, #0]
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	2b0e      	cmp	r3, #14
 800ac0a:	f200 809d 	bhi.w	800ad48 <_dtoa_r+0x468>
 800ac0e:	2d00      	cmp	r5, #0
 800ac10:	f000 809a 	beq.w	800ad48 <_dtoa_r+0x468>
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dd32      	ble.n	800ac80 <_dtoa_r+0x3a0>
 800ac1a:	4ab7      	ldr	r2, [pc, #732]	; (800aef8 <_dtoa_r+0x618>)
 800ac1c:	f003 030f 	and.w	r3, r3, #15
 800ac20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac28:	9b00      	ldr	r3, [sp, #0]
 800ac2a:	05d8      	lsls	r0, r3, #23
 800ac2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ac30:	d516      	bpl.n	800ac60 <_dtoa_r+0x380>
 800ac32:	4bb2      	ldr	r3, [pc, #712]	; (800aefc <_dtoa_r+0x61c>)
 800ac34:	ec51 0b19 	vmov	r0, r1, d9
 800ac38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac3c:	f7f5 fe36 	bl	80008ac <__aeabi_ddiv>
 800ac40:	f007 070f 	and.w	r7, r7, #15
 800ac44:	4682      	mov	sl, r0
 800ac46:	468b      	mov	fp, r1
 800ac48:	2503      	movs	r5, #3
 800ac4a:	4eac      	ldr	r6, [pc, #688]	; (800aefc <_dtoa_r+0x61c>)
 800ac4c:	b957      	cbnz	r7, 800ac64 <_dtoa_r+0x384>
 800ac4e:	4642      	mov	r2, r8
 800ac50:	464b      	mov	r3, r9
 800ac52:	4650      	mov	r0, sl
 800ac54:	4659      	mov	r1, fp
 800ac56:	f7f5 fe29 	bl	80008ac <__aeabi_ddiv>
 800ac5a:	4682      	mov	sl, r0
 800ac5c:	468b      	mov	fp, r1
 800ac5e:	e028      	b.n	800acb2 <_dtoa_r+0x3d2>
 800ac60:	2502      	movs	r5, #2
 800ac62:	e7f2      	b.n	800ac4a <_dtoa_r+0x36a>
 800ac64:	07f9      	lsls	r1, r7, #31
 800ac66:	d508      	bpl.n	800ac7a <_dtoa_r+0x39a>
 800ac68:	4640      	mov	r0, r8
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac70:	f7f5 fcf2 	bl	8000658 <__aeabi_dmul>
 800ac74:	3501      	adds	r5, #1
 800ac76:	4680      	mov	r8, r0
 800ac78:	4689      	mov	r9, r1
 800ac7a:	107f      	asrs	r7, r7, #1
 800ac7c:	3608      	adds	r6, #8
 800ac7e:	e7e5      	b.n	800ac4c <_dtoa_r+0x36c>
 800ac80:	f000 809b 	beq.w	800adba <_dtoa_r+0x4da>
 800ac84:	9b00      	ldr	r3, [sp, #0]
 800ac86:	4f9d      	ldr	r7, [pc, #628]	; (800aefc <_dtoa_r+0x61c>)
 800ac88:	425e      	negs	r6, r3
 800ac8a:	4b9b      	ldr	r3, [pc, #620]	; (800aef8 <_dtoa_r+0x618>)
 800ac8c:	f006 020f 	and.w	r2, r6, #15
 800ac90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	ec51 0b19 	vmov	r0, r1, d9
 800ac9c:	f7f5 fcdc 	bl	8000658 <__aeabi_dmul>
 800aca0:	1136      	asrs	r6, r6, #4
 800aca2:	4682      	mov	sl, r0
 800aca4:	468b      	mov	fp, r1
 800aca6:	2300      	movs	r3, #0
 800aca8:	2502      	movs	r5, #2
 800acaa:	2e00      	cmp	r6, #0
 800acac:	d17a      	bne.n	800ada4 <_dtoa_r+0x4c4>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1d3      	bne.n	800ac5a <_dtoa_r+0x37a>
 800acb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 8082 	beq.w	800adbe <_dtoa_r+0x4de>
 800acba:	4b91      	ldr	r3, [pc, #580]	; (800af00 <_dtoa_r+0x620>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	4650      	mov	r0, sl
 800acc0:	4659      	mov	r1, fp
 800acc2:	f7f5 ff3b 	bl	8000b3c <__aeabi_dcmplt>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d079      	beq.n	800adbe <_dtoa_r+0x4de>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d076      	beq.n	800adbe <_dtoa_r+0x4de>
 800acd0:	9b02      	ldr	r3, [sp, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	dd36      	ble.n	800ad44 <_dtoa_r+0x464>
 800acd6:	9b00      	ldr	r3, [sp, #0]
 800acd8:	4650      	mov	r0, sl
 800acda:	4659      	mov	r1, fp
 800acdc:	1e5f      	subs	r7, r3, #1
 800acde:	2200      	movs	r2, #0
 800ace0:	4b88      	ldr	r3, [pc, #544]	; (800af04 <_dtoa_r+0x624>)
 800ace2:	f7f5 fcb9 	bl	8000658 <__aeabi_dmul>
 800ace6:	9e02      	ldr	r6, [sp, #8]
 800ace8:	4682      	mov	sl, r0
 800acea:	468b      	mov	fp, r1
 800acec:	3501      	adds	r5, #1
 800acee:	4628      	mov	r0, r5
 800acf0:	f7f5 fc48 	bl	8000584 <__aeabi_i2d>
 800acf4:	4652      	mov	r2, sl
 800acf6:	465b      	mov	r3, fp
 800acf8:	f7f5 fcae 	bl	8000658 <__aeabi_dmul>
 800acfc:	4b82      	ldr	r3, [pc, #520]	; (800af08 <_dtoa_r+0x628>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	f7f5 faf4 	bl	80002ec <__adddf3>
 800ad04:	46d0      	mov	r8, sl
 800ad06:	46d9      	mov	r9, fp
 800ad08:	4682      	mov	sl, r0
 800ad0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ad0e:	2e00      	cmp	r6, #0
 800ad10:	d158      	bne.n	800adc4 <_dtoa_r+0x4e4>
 800ad12:	4b7e      	ldr	r3, [pc, #504]	; (800af0c <_dtoa_r+0x62c>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	4640      	mov	r0, r8
 800ad18:	4649      	mov	r1, r9
 800ad1a:	f7f5 fae5 	bl	80002e8 <__aeabi_dsub>
 800ad1e:	4652      	mov	r2, sl
 800ad20:	465b      	mov	r3, fp
 800ad22:	4680      	mov	r8, r0
 800ad24:	4689      	mov	r9, r1
 800ad26:	f7f5 ff27 	bl	8000b78 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f040 8295 	bne.w	800b25a <_dtoa_r+0x97a>
 800ad30:	4652      	mov	r2, sl
 800ad32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad36:	4640      	mov	r0, r8
 800ad38:	4649      	mov	r1, r9
 800ad3a:	f7f5 feff 	bl	8000b3c <__aeabi_dcmplt>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f040 8289 	bne.w	800b256 <_dtoa_r+0x976>
 800ad44:	ec5b ab19 	vmov	sl, fp, d9
 800ad48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f2c0 8148 	blt.w	800afe0 <_dtoa_r+0x700>
 800ad50:	9a00      	ldr	r2, [sp, #0]
 800ad52:	2a0e      	cmp	r2, #14
 800ad54:	f300 8144 	bgt.w	800afe0 <_dtoa_r+0x700>
 800ad58:	4b67      	ldr	r3, [pc, #412]	; (800aef8 <_dtoa_r+0x618>)
 800ad5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f280 80d5 	bge.w	800af14 <_dtoa_r+0x634>
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f300 80d1 	bgt.w	800af14 <_dtoa_r+0x634>
 800ad72:	f040 826f 	bne.w	800b254 <_dtoa_r+0x974>
 800ad76:	4b65      	ldr	r3, [pc, #404]	; (800af0c <_dtoa_r+0x62c>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	f7f5 fc6b 	bl	8000658 <__aeabi_dmul>
 800ad82:	4652      	mov	r2, sl
 800ad84:	465b      	mov	r3, fp
 800ad86:	f7f5 feed 	bl	8000b64 <__aeabi_dcmpge>
 800ad8a:	9e03      	ldr	r6, [sp, #12]
 800ad8c:	4637      	mov	r7, r6
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f040 8245 	bne.w	800b21e <_dtoa_r+0x93e>
 800ad94:	9d01      	ldr	r5, [sp, #4]
 800ad96:	2331      	movs	r3, #49	; 0x31
 800ad98:	f805 3b01 	strb.w	r3, [r5], #1
 800ad9c:	9b00      	ldr	r3, [sp, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	e240      	b.n	800b226 <_dtoa_r+0x946>
 800ada4:	07f2      	lsls	r2, r6, #31
 800ada6:	d505      	bpl.n	800adb4 <_dtoa_r+0x4d4>
 800ada8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adac:	f7f5 fc54 	bl	8000658 <__aeabi_dmul>
 800adb0:	3501      	adds	r5, #1
 800adb2:	2301      	movs	r3, #1
 800adb4:	1076      	asrs	r6, r6, #1
 800adb6:	3708      	adds	r7, #8
 800adb8:	e777      	b.n	800acaa <_dtoa_r+0x3ca>
 800adba:	2502      	movs	r5, #2
 800adbc:	e779      	b.n	800acb2 <_dtoa_r+0x3d2>
 800adbe:	9f00      	ldr	r7, [sp, #0]
 800adc0:	9e03      	ldr	r6, [sp, #12]
 800adc2:	e794      	b.n	800acee <_dtoa_r+0x40e>
 800adc4:	9901      	ldr	r1, [sp, #4]
 800adc6:	4b4c      	ldr	r3, [pc, #304]	; (800aef8 <_dtoa_r+0x618>)
 800adc8:	4431      	add	r1, r6
 800adca:	910d      	str	r1, [sp, #52]	; 0x34
 800adcc:	9908      	ldr	r1, [sp, #32]
 800adce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800add2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800add6:	2900      	cmp	r1, #0
 800add8:	d043      	beq.n	800ae62 <_dtoa_r+0x582>
 800adda:	494d      	ldr	r1, [pc, #308]	; (800af10 <_dtoa_r+0x630>)
 800addc:	2000      	movs	r0, #0
 800adde:	f7f5 fd65 	bl	80008ac <__aeabi_ddiv>
 800ade2:	4652      	mov	r2, sl
 800ade4:	465b      	mov	r3, fp
 800ade6:	f7f5 fa7f 	bl	80002e8 <__aeabi_dsub>
 800adea:	9d01      	ldr	r5, [sp, #4]
 800adec:	4682      	mov	sl, r0
 800adee:	468b      	mov	fp, r1
 800adf0:	4649      	mov	r1, r9
 800adf2:	4640      	mov	r0, r8
 800adf4:	f7f5 fee0 	bl	8000bb8 <__aeabi_d2iz>
 800adf8:	4606      	mov	r6, r0
 800adfa:	f7f5 fbc3 	bl	8000584 <__aeabi_i2d>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	4640      	mov	r0, r8
 800ae04:	4649      	mov	r1, r9
 800ae06:	f7f5 fa6f 	bl	80002e8 <__aeabi_dsub>
 800ae0a:	3630      	adds	r6, #48	; 0x30
 800ae0c:	f805 6b01 	strb.w	r6, [r5], #1
 800ae10:	4652      	mov	r2, sl
 800ae12:	465b      	mov	r3, fp
 800ae14:	4680      	mov	r8, r0
 800ae16:	4689      	mov	r9, r1
 800ae18:	f7f5 fe90 	bl	8000b3c <__aeabi_dcmplt>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d163      	bne.n	800aee8 <_dtoa_r+0x608>
 800ae20:	4642      	mov	r2, r8
 800ae22:	464b      	mov	r3, r9
 800ae24:	4936      	ldr	r1, [pc, #216]	; (800af00 <_dtoa_r+0x620>)
 800ae26:	2000      	movs	r0, #0
 800ae28:	f7f5 fa5e 	bl	80002e8 <__aeabi_dsub>
 800ae2c:	4652      	mov	r2, sl
 800ae2e:	465b      	mov	r3, fp
 800ae30:	f7f5 fe84 	bl	8000b3c <__aeabi_dcmplt>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f040 80b5 	bne.w	800afa4 <_dtoa_r+0x6c4>
 800ae3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3c:	429d      	cmp	r5, r3
 800ae3e:	d081      	beq.n	800ad44 <_dtoa_r+0x464>
 800ae40:	4b30      	ldr	r3, [pc, #192]	; (800af04 <_dtoa_r+0x624>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	4650      	mov	r0, sl
 800ae46:	4659      	mov	r1, fp
 800ae48:	f7f5 fc06 	bl	8000658 <__aeabi_dmul>
 800ae4c:	4b2d      	ldr	r3, [pc, #180]	; (800af04 <_dtoa_r+0x624>)
 800ae4e:	4682      	mov	sl, r0
 800ae50:	468b      	mov	fp, r1
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	2200      	movs	r2, #0
 800ae58:	f7f5 fbfe 	bl	8000658 <__aeabi_dmul>
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4689      	mov	r9, r1
 800ae60:	e7c6      	b.n	800adf0 <_dtoa_r+0x510>
 800ae62:	4650      	mov	r0, sl
 800ae64:	4659      	mov	r1, fp
 800ae66:	f7f5 fbf7 	bl	8000658 <__aeabi_dmul>
 800ae6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6c:	9d01      	ldr	r5, [sp, #4]
 800ae6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae70:	4682      	mov	sl, r0
 800ae72:	468b      	mov	fp, r1
 800ae74:	4649      	mov	r1, r9
 800ae76:	4640      	mov	r0, r8
 800ae78:	f7f5 fe9e 	bl	8000bb8 <__aeabi_d2iz>
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	f7f5 fb81 	bl	8000584 <__aeabi_i2d>
 800ae82:	3630      	adds	r6, #48	; 0x30
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	f7f5 fa2c 	bl	80002e8 <__aeabi_dsub>
 800ae90:	f805 6b01 	strb.w	r6, [r5], #1
 800ae94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae96:	429d      	cmp	r5, r3
 800ae98:	4680      	mov	r8, r0
 800ae9a:	4689      	mov	r9, r1
 800ae9c:	f04f 0200 	mov.w	r2, #0
 800aea0:	d124      	bne.n	800aeec <_dtoa_r+0x60c>
 800aea2:	4b1b      	ldr	r3, [pc, #108]	; (800af10 <_dtoa_r+0x630>)
 800aea4:	4650      	mov	r0, sl
 800aea6:	4659      	mov	r1, fp
 800aea8:	f7f5 fa20 	bl	80002ec <__adddf3>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	f7f5 fe60 	bl	8000b78 <__aeabi_dcmpgt>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d173      	bne.n	800afa4 <_dtoa_r+0x6c4>
 800aebc:	4652      	mov	r2, sl
 800aebe:	465b      	mov	r3, fp
 800aec0:	4913      	ldr	r1, [pc, #76]	; (800af10 <_dtoa_r+0x630>)
 800aec2:	2000      	movs	r0, #0
 800aec4:	f7f5 fa10 	bl	80002e8 <__aeabi_dsub>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4640      	mov	r0, r8
 800aece:	4649      	mov	r1, r9
 800aed0:	f7f5 fe34 	bl	8000b3c <__aeabi_dcmplt>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	f43f af35 	beq.w	800ad44 <_dtoa_r+0x464>
 800aeda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aedc:	1e6b      	subs	r3, r5, #1
 800aede:	930f      	str	r3, [sp, #60]	; 0x3c
 800aee0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aee4:	2b30      	cmp	r3, #48	; 0x30
 800aee6:	d0f8      	beq.n	800aeda <_dtoa_r+0x5fa>
 800aee8:	9700      	str	r7, [sp, #0]
 800aeea:	e049      	b.n	800af80 <_dtoa_r+0x6a0>
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <_dtoa_r+0x624>)
 800aeee:	f7f5 fbb3 	bl	8000658 <__aeabi_dmul>
 800aef2:	4680      	mov	r8, r0
 800aef4:	4689      	mov	r9, r1
 800aef6:	e7bd      	b.n	800ae74 <_dtoa_r+0x594>
 800aef8:	0800db98 	.word	0x0800db98
 800aefc:	0800db70 	.word	0x0800db70
 800af00:	3ff00000 	.word	0x3ff00000
 800af04:	40240000 	.word	0x40240000
 800af08:	401c0000 	.word	0x401c0000
 800af0c:	40140000 	.word	0x40140000
 800af10:	3fe00000 	.word	0x3fe00000
 800af14:	9d01      	ldr	r5, [sp, #4]
 800af16:	4656      	mov	r6, sl
 800af18:	465f      	mov	r7, fp
 800af1a:	4642      	mov	r2, r8
 800af1c:	464b      	mov	r3, r9
 800af1e:	4630      	mov	r0, r6
 800af20:	4639      	mov	r1, r7
 800af22:	f7f5 fcc3 	bl	80008ac <__aeabi_ddiv>
 800af26:	f7f5 fe47 	bl	8000bb8 <__aeabi_d2iz>
 800af2a:	4682      	mov	sl, r0
 800af2c:	f7f5 fb2a 	bl	8000584 <__aeabi_i2d>
 800af30:	4642      	mov	r2, r8
 800af32:	464b      	mov	r3, r9
 800af34:	f7f5 fb90 	bl	8000658 <__aeabi_dmul>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4630      	mov	r0, r6
 800af3e:	4639      	mov	r1, r7
 800af40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800af44:	f7f5 f9d0 	bl	80002e8 <__aeabi_dsub>
 800af48:	f805 6b01 	strb.w	r6, [r5], #1
 800af4c:	9e01      	ldr	r6, [sp, #4]
 800af4e:	9f03      	ldr	r7, [sp, #12]
 800af50:	1bae      	subs	r6, r5, r6
 800af52:	42b7      	cmp	r7, r6
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	d135      	bne.n	800afc6 <_dtoa_r+0x6e6>
 800af5a:	f7f5 f9c7 	bl	80002ec <__adddf3>
 800af5e:	4642      	mov	r2, r8
 800af60:	464b      	mov	r3, r9
 800af62:	4606      	mov	r6, r0
 800af64:	460f      	mov	r7, r1
 800af66:	f7f5 fe07 	bl	8000b78 <__aeabi_dcmpgt>
 800af6a:	b9d0      	cbnz	r0, 800afa2 <_dtoa_r+0x6c2>
 800af6c:	4642      	mov	r2, r8
 800af6e:	464b      	mov	r3, r9
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	f7f5 fdd8 	bl	8000b28 <__aeabi_dcmpeq>
 800af78:	b110      	cbz	r0, 800af80 <_dtoa_r+0x6a0>
 800af7a:	f01a 0f01 	tst.w	sl, #1
 800af7e:	d110      	bne.n	800afa2 <_dtoa_r+0x6c2>
 800af80:	4620      	mov	r0, r4
 800af82:	ee18 1a10 	vmov	r1, s16
 800af86:	f000 fe87 	bl	800bc98 <_Bfree>
 800af8a:	2300      	movs	r3, #0
 800af8c:	9800      	ldr	r0, [sp, #0]
 800af8e:	702b      	strb	r3, [r5, #0]
 800af90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af92:	3001      	adds	r0, #1
 800af94:	6018      	str	r0, [r3, #0]
 800af96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f43f acf1 	beq.w	800a980 <_dtoa_r+0xa0>
 800af9e:	601d      	str	r5, [r3, #0]
 800afa0:	e4ee      	b.n	800a980 <_dtoa_r+0xa0>
 800afa2:	9f00      	ldr	r7, [sp, #0]
 800afa4:	462b      	mov	r3, r5
 800afa6:	461d      	mov	r5, r3
 800afa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afac:	2a39      	cmp	r2, #57	; 0x39
 800afae:	d106      	bne.n	800afbe <_dtoa_r+0x6de>
 800afb0:	9a01      	ldr	r2, [sp, #4]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d1f7      	bne.n	800afa6 <_dtoa_r+0x6c6>
 800afb6:	9901      	ldr	r1, [sp, #4]
 800afb8:	2230      	movs	r2, #48	; 0x30
 800afba:	3701      	adds	r7, #1
 800afbc:	700a      	strb	r2, [r1, #0]
 800afbe:	781a      	ldrb	r2, [r3, #0]
 800afc0:	3201      	adds	r2, #1
 800afc2:	701a      	strb	r2, [r3, #0]
 800afc4:	e790      	b.n	800aee8 <_dtoa_r+0x608>
 800afc6:	4ba6      	ldr	r3, [pc, #664]	; (800b260 <_dtoa_r+0x980>)
 800afc8:	2200      	movs	r2, #0
 800afca:	f7f5 fb45 	bl	8000658 <__aeabi_dmul>
 800afce:	2200      	movs	r2, #0
 800afd0:	2300      	movs	r3, #0
 800afd2:	4606      	mov	r6, r0
 800afd4:	460f      	mov	r7, r1
 800afd6:	f7f5 fda7 	bl	8000b28 <__aeabi_dcmpeq>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d09d      	beq.n	800af1a <_dtoa_r+0x63a>
 800afde:	e7cf      	b.n	800af80 <_dtoa_r+0x6a0>
 800afe0:	9a08      	ldr	r2, [sp, #32]
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	f000 80d7 	beq.w	800b196 <_dtoa_r+0x8b6>
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	2a01      	cmp	r2, #1
 800afec:	f300 80ba 	bgt.w	800b164 <_dtoa_r+0x884>
 800aff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	f000 80b2 	beq.w	800b15c <_dtoa_r+0x87c>
 800aff8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800affc:	9e07      	ldr	r6, [sp, #28]
 800affe:	9d04      	ldr	r5, [sp, #16]
 800b000:	9a04      	ldr	r2, [sp, #16]
 800b002:	441a      	add	r2, r3
 800b004:	9204      	str	r2, [sp, #16]
 800b006:	9a05      	ldr	r2, [sp, #20]
 800b008:	2101      	movs	r1, #1
 800b00a:	441a      	add	r2, r3
 800b00c:	4620      	mov	r0, r4
 800b00e:	9205      	str	r2, [sp, #20]
 800b010:	f000 ff44 	bl	800be9c <__i2b>
 800b014:	4607      	mov	r7, r0
 800b016:	2d00      	cmp	r5, #0
 800b018:	dd0c      	ble.n	800b034 <_dtoa_r+0x754>
 800b01a:	9b05      	ldr	r3, [sp, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd09      	ble.n	800b034 <_dtoa_r+0x754>
 800b020:	42ab      	cmp	r3, r5
 800b022:	9a04      	ldr	r2, [sp, #16]
 800b024:	bfa8      	it	ge
 800b026:	462b      	movge	r3, r5
 800b028:	1ad2      	subs	r2, r2, r3
 800b02a:	9204      	str	r2, [sp, #16]
 800b02c:	9a05      	ldr	r2, [sp, #20]
 800b02e:	1aed      	subs	r5, r5, r3
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	9305      	str	r3, [sp, #20]
 800b034:	9b07      	ldr	r3, [sp, #28]
 800b036:	b31b      	cbz	r3, 800b080 <_dtoa_r+0x7a0>
 800b038:	9b08      	ldr	r3, [sp, #32]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 80af 	beq.w	800b19e <_dtoa_r+0x8be>
 800b040:	2e00      	cmp	r6, #0
 800b042:	dd13      	ble.n	800b06c <_dtoa_r+0x78c>
 800b044:	4639      	mov	r1, r7
 800b046:	4632      	mov	r2, r6
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 ffe7 	bl	800c01c <__pow5mult>
 800b04e:	ee18 2a10 	vmov	r2, s16
 800b052:	4601      	mov	r1, r0
 800b054:	4607      	mov	r7, r0
 800b056:	4620      	mov	r0, r4
 800b058:	f000 ff36 	bl	800bec8 <__multiply>
 800b05c:	ee18 1a10 	vmov	r1, s16
 800b060:	4680      	mov	r8, r0
 800b062:	4620      	mov	r0, r4
 800b064:	f000 fe18 	bl	800bc98 <_Bfree>
 800b068:	ee08 8a10 	vmov	s16, r8
 800b06c:	9b07      	ldr	r3, [sp, #28]
 800b06e:	1b9a      	subs	r2, r3, r6
 800b070:	d006      	beq.n	800b080 <_dtoa_r+0x7a0>
 800b072:	ee18 1a10 	vmov	r1, s16
 800b076:	4620      	mov	r0, r4
 800b078:	f000 ffd0 	bl	800c01c <__pow5mult>
 800b07c:	ee08 0a10 	vmov	s16, r0
 800b080:	2101      	movs	r1, #1
 800b082:	4620      	mov	r0, r4
 800b084:	f000 ff0a 	bl	800be9c <__i2b>
 800b088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	4606      	mov	r6, r0
 800b08e:	f340 8088 	ble.w	800b1a2 <_dtoa_r+0x8c2>
 800b092:	461a      	mov	r2, r3
 800b094:	4601      	mov	r1, r0
 800b096:	4620      	mov	r0, r4
 800b098:	f000 ffc0 	bl	800c01c <__pow5mult>
 800b09c:	9b06      	ldr	r3, [sp, #24]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	f340 8081 	ble.w	800b1a8 <_dtoa_r+0x8c8>
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	6933      	ldr	r3, [r6, #16]
 800b0ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b0b0:	6918      	ldr	r0, [r3, #16]
 800b0b2:	f000 fea3 	bl	800bdfc <__hi0bits>
 800b0b6:	f1c0 0020 	rsb	r0, r0, #32
 800b0ba:	9b05      	ldr	r3, [sp, #20]
 800b0bc:	4418      	add	r0, r3
 800b0be:	f010 001f 	ands.w	r0, r0, #31
 800b0c2:	f000 8092 	beq.w	800b1ea <_dtoa_r+0x90a>
 800b0c6:	f1c0 0320 	rsb	r3, r0, #32
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	f340 808a 	ble.w	800b1e4 <_dtoa_r+0x904>
 800b0d0:	f1c0 001c 	rsb	r0, r0, #28
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	4403      	add	r3, r0
 800b0d8:	9304      	str	r3, [sp, #16]
 800b0da:	9b05      	ldr	r3, [sp, #20]
 800b0dc:	4403      	add	r3, r0
 800b0de:	4405      	add	r5, r0
 800b0e0:	9305      	str	r3, [sp, #20]
 800b0e2:	9b04      	ldr	r3, [sp, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd07      	ble.n	800b0f8 <_dtoa_r+0x818>
 800b0e8:	ee18 1a10 	vmov	r1, s16
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 ffee 	bl	800c0d0 <__lshift>
 800b0f4:	ee08 0a10 	vmov	s16, r0
 800b0f8:	9b05      	ldr	r3, [sp, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	dd05      	ble.n	800b10a <_dtoa_r+0x82a>
 800b0fe:	4631      	mov	r1, r6
 800b100:	461a      	mov	r2, r3
 800b102:	4620      	mov	r0, r4
 800b104:	f000 ffe4 	bl	800c0d0 <__lshift>
 800b108:	4606      	mov	r6, r0
 800b10a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d06e      	beq.n	800b1ee <_dtoa_r+0x90e>
 800b110:	ee18 0a10 	vmov	r0, s16
 800b114:	4631      	mov	r1, r6
 800b116:	f001 f84b 	bl	800c1b0 <__mcmp>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	da67      	bge.n	800b1ee <_dtoa_r+0x90e>
 800b11e:	9b00      	ldr	r3, [sp, #0]
 800b120:	3b01      	subs	r3, #1
 800b122:	ee18 1a10 	vmov	r1, s16
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	220a      	movs	r2, #10
 800b12a:	2300      	movs	r3, #0
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 fdd5 	bl	800bcdc <__multadd>
 800b132:	9b08      	ldr	r3, [sp, #32]
 800b134:	ee08 0a10 	vmov	s16, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 81b1 	beq.w	800b4a0 <_dtoa_r+0xbc0>
 800b13e:	2300      	movs	r3, #0
 800b140:	4639      	mov	r1, r7
 800b142:	220a      	movs	r2, #10
 800b144:	4620      	mov	r0, r4
 800b146:	f000 fdc9 	bl	800bcdc <__multadd>
 800b14a:	9b02      	ldr	r3, [sp, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	4607      	mov	r7, r0
 800b150:	f300 808e 	bgt.w	800b270 <_dtoa_r+0x990>
 800b154:	9b06      	ldr	r3, [sp, #24]
 800b156:	2b02      	cmp	r3, #2
 800b158:	dc51      	bgt.n	800b1fe <_dtoa_r+0x91e>
 800b15a:	e089      	b.n	800b270 <_dtoa_r+0x990>
 800b15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b15e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b162:	e74b      	b.n	800affc <_dtoa_r+0x71c>
 800b164:	9b03      	ldr	r3, [sp, #12]
 800b166:	1e5e      	subs	r6, r3, #1
 800b168:	9b07      	ldr	r3, [sp, #28]
 800b16a:	42b3      	cmp	r3, r6
 800b16c:	bfbf      	itttt	lt
 800b16e:	9b07      	ldrlt	r3, [sp, #28]
 800b170:	9607      	strlt	r6, [sp, #28]
 800b172:	1af2      	sublt	r2, r6, r3
 800b174:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b176:	bfb6      	itet	lt
 800b178:	189b      	addlt	r3, r3, r2
 800b17a:	1b9e      	subge	r6, r3, r6
 800b17c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b17e:	9b03      	ldr	r3, [sp, #12]
 800b180:	bfb8      	it	lt
 800b182:	2600      	movlt	r6, #0
 800b184:	2b00      	cmp	r3, #0
 800b186:	bfb7      	itett	lt
 800b188:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b18c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b190:	1a9d      	sublt	r5, r3, r2
 800b192:	2300      	movlt	r3, #0
 800b194:	e734      	b.n	800b000 <_dtoa_r+0x720>
 800b196:	9e07      	ldr	r6, [sp, #28]
 800b198:	9d04      	ldr	r5, [sp, #16]
 800b19a:	9f08      	ldr	r7, [sp, #32]
 800b19c:	e73b      	b.n	800b016 <_dtoa_r+0x736>
 800b19e:	9a07      	ldr	r2, [sp, #28]
 800b1a0:	e767      	b.n	800b072 <_dtoa_r+0x792>
 800b1a2:	9b06      	ldr	r3, [sp, #24]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	dc18      	bgt.n	800b1da <_dtoa_r+0x8fa>
 800b1a8:	f1ba 0f00 	cmp.w	sl, #0
 800b1ac:	d115      	bne.n	800b1da <_dtoa_r+0x8fa>
 800b1ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1b2:	b993      	cbnz	r3, 800b1da <_dtoa_r+0x8fa>
 800b1b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b1b8:	0d1b      	lsrs	r3, r3, #20
 800b1ba:	051b      	lsls	r3, r3, #20
 800b1bc:	b183      	cbz	r3, 800b1e0 <_dtoa_r+0x900>
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	9b05      	ldr	r3, [sp, #20]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	9305      	str	r3, [sp, #20]
 800b1ca:	f04f 0801 	mov.w	r8, #1
 800b1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f47f af6a 	bne.w	800b0aa <_dtoa_r+0x7ca>
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	e76f      	b.n	800b0ba <_dtoa_r+0x7da>
 800b1da:	f04f 0800 	mov.w	r8, #0
 800b1de:	e7f6      	b.n	800b1ce <_dtoa_r+0x8ee>
 800b1e0:	4698      	mov	r8, r3
 800b1e2:	e7f4      	b.n	800b1ce <_dtoa_r+0x8ee>
 800b1e4:	f43f af7d 	beq.w	800b0e2 <_dtoa_r+0x802>
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	301c      	adds	r0, #28
 800b1ec:	e772      	b.n	800b0d4 <_dtoa_r+0x7f4>
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dc37      	bgt.n	800b264 <_dtoa_r+0x984>
 800b1f4:	9b06      	ldr	r3, [sp, #24]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	dd34      	ble.n	800b264 <_dtoa_r+0x984>
 800b1fa:	9b03      	ldr	r3, [sp, #12]
 800b1fc:	9302      	str	r3, [sp, #8]
 800b1fe:	9b02      	ldr	r3, [sp, #8]
 800b200:	b96b      	cbnz	r3, 800b21e <_dtoa_r+0x93e>
 800b202:	4631      	mov	r1, r6
 800b204:	2205      	movs	r2, #5
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fd68 	bl	800bcdc <__multadd>
 800b20c:	4601      	mov	r1, r0
 800b20e:	4606      	mov	r6, r0
 800b210:	ee18 0a10 	vmov	r0, s16
 800b214:	f000 ffcc 	bl	800c1b0 <__mcmp>
 800b218:	2800      	cmp	r0, #0
 800b21a:	f73f adbb 	bgt.w	800ad94 <_dtoa_r+0x4b4>
 800b21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b220:	9d01      	ldr	r5, [sp, #4]
 800b222:	43db      	mvns	r3, r3
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	f04f 0800 	mov.w	r8, #0
 800b22a:	4631      	mov	r1, r6
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 fd33 	bl	800bc98 <_Bfree>
 800b232:	2f00      	cmp	r7, #0
 800b234:	f43f aea4 	beq.w	800af80 <_dtoa_r+0x6a0>
 800b238:	f1b8 0f00 	cmp.w	r8, #0
 800b23c:	d005      	beq.n	800b24a <_dtoa_r+0x96a>
 800b23e:	45b8      	cmp	r8, r7
 800b240:	d003      	beq.n	800b24a <_dtoa_r+0x96a>
 800b242:	4641      	mov	r1, r8
 800b244:	4620      	mov	r0, r4
 800b246:	f000 fd27 	bl	800bc98 <_Bfree>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4620      	mov	r0, r4
 800b24e:	f000 fd23 	bl	800bc98 <_Bfree>
 800b252:	e695      	b.n	800af80 <_dtoa_r+0x6a0>
 800b254:	2600      	movs	r6, #0
 800b256:	4637      	mov	r7, r6
 800b258:	e7e1      	b.n	800b21e <_dtoa_r+0x93e>
 800b25a:	9700      	str	r7, [sp, #0]
 800b25c:	4637      	mov	r7, r6
 800b25e:	e599      	b.n	800ad94 <_dtoa_r+0x4b4>
 800b260:	40240000 	.word	0x40240000
 800b264:	9b08      	ldr	r3, [sp, #32]
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 80ca 	beq.w	800b400 <_dtoa_r+0xb20>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	9302      	str	r3, [sp, #8]
 800b270:	2d00      	cmp	r5, #0
 800b272:	dd05      	ble.n	800b280 <_dtoa_r+0x9a0>
 800b274:	4639      	mov	r1, r7
 800b276:	462a      	mov	r2, r5
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 ff29 	bl	800c0d0 <__lshift>
 800b27e:	4607      	mov	r7, r0
 800b280:	f1b8 0f00 	cmp.w	r8, #0
 800b284:	d05b      	beq.n	800b33e <_dtoa_r+0xa5e>
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	4620      	mov	r0, r4
 800b28a:	f000 fcc5 	bl	800bc18 <_Balloc>
 800b28e:	4605      	mov	r5, r0
 800b290:	b928      	cbnz	r0, 800b29e <_dtoa_r+0x9be>
 800b292:	4b87      	ldr	r3, [pc, #540]	; (800b4b0 <_dtoa_r+0xbd0>)
 800b294:	4602      	mov	r2, r0
 800b296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b29a:	f7ff bb3b 	b.w	800a914 <_dtoa_r+0x34>
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	3202      	adds	r2, #2
 800b2a2:	0092      	lsls	r2, r2, #2
 800b2a4:	f107 010c 	add.w	r1, r7, #12
 800b2a8:	300c      	adds	r0, #12
 800b2aa:	f000 fca7 	bl	800bbfc <memcpy>
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 ff0c 	bl	800c0d0 <__lshift>
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	f103 0901 	add.w	r9, r3, #1
 800b2be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	9305      	str	r3, [sp, #20]
 800b2c6:	f00a 0301 	and.w	r3, sl, #1
 800b2ca:	46b8      	mov	r8, r7
 800b2cc:	9304      	str	r3, [sp, #16]
 800b2ce:	4607      	mov	r7, r0
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	ee18 0a10 	vmov	r0, s16
 800b2d6:	f7ff fa77 	bl	800a7c8 <quorem>
 800b2da:	4641      	mov	r1, r8
 800b2dc:	9002      	str	r0, [sp, #8]
 800b2de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b2e2:	ee18 0a10 	vmov	r0, s16
 800b2e6:	f000 ff63 	bl	800c1b0 <__mcmp>
 800b2ea:	463a      	mov	r2, r7
 800b2ec:	9003      	str	r0, [sp, #12]
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 ff79 	bl	800c1e8 <__mdiff>
 800b2f6:	68c2      	ldr	r2, [r0, #12]
 800b2f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	bb02      	cbnz	r2, 800b342 <_dtoa_r+0xa62>
 800b300:	4601      	mov	r1, r0
 800b302:	ee18 0a10 	vmov	r0, s16
 800b306:	f000 ff53 	bl	800c1b0 <__mcmp>
 800b30a:	4602      	mov	r2, r0
 800b30c:	4629      	mov	r1, r5
 800b30e:	4620      	mov	r0, r4
 800b310:	9207      	str	r2, [sp, #28]
 800b312:	f000 fcc1 	bl	800bc98 <_Bfree>
 800b316:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b31a:	ea43 0102 	orr.w	r1, r3, r2
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	430b      	orrs	r3, r1
 800b322:	464d      	mov	r5, r9
 800b324:	d10f      	bne.n	800b346 <_dtoa_r+0xa66>
 800b326:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b32a:	d02a      	beq.n	800b382 <_dtoa_r+0xaa2>
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	dd02      	ble.n	800b338 <_dtoa_r+0xa58>
 800b332:	9b02      	ldr	r3, [sp, #8]
 800b334:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b338:	f88b a000 	strb.w	sl, [fp]
 800b33c:	e775      	b.n	800b22a <_dtoa_r+0x94a>
 800b33e:	4638      	mov	r0, r7
 800b340:	e7ba      	b.n	800b2b8 <_dtoa_r+0x9d8>
 800b342:	2201      	movs	r2, #1
 800b344:	e7e2      	b.n	800b30c <_dtoa_r+0xa2c>
 800b346:	9b03      	ldr	r3, [sp, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	db04      	blt.n	800b356 <_dtoa_r+0xa76>
 800b34c:	9906      	ldr	r1, [sp, #24]
 800b34e:	430b      	orrs	r3, r1
 800b350:	9904      	ldr	r1, [sp, #16]
 800b352:	430b      	orrs	r3, r1
 800b354:	d122      	bne.n	800b39c <_dtoa_r+0xabc>
 800b356:	2a00      	cmp	r2, #0
 800b358:	ddee      	ble.n	800b338 <_dtoa_r+0xa58>
 800b35a:	ee18 1a10 	vmov	r1, s16
 800b35e:	2201      	movs	r2, #1
 800b360:	4620      	mov	r0, r4
 800b362:	f000 feb5 	bl	800c0d0 <__lshift>
 800b366:	4631      	mov	r1, r6
 800b368:	ee08 0a10 	vmov	s16, r0
 800b36c:	f000 ff20 	bl	800c1b0 <__mcmp>
 800b370:	2800      	cmp	r0, #0
 800b372:	dc03      	bgt.n	800b37c <_dtoa_r+0xa9c>
 800b374:	d1e0      	bne.n	800b338 <_dtoa_r+0xa58>
 800b376:	f01a 0f01 	tst.w	sl, #1
 800b37a:	d0dd      	beq.n	800b338 <_dtoa_r+0xa58>
 800b37c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b380:	d1d7      	bne.n	800b332 <_dtoa_r+0xa52>
 800b382:	2339      	movs	r3, #57	; 0x39
 800b384:	f88b 3000 	strb.w	r3, [fp]
 800b388:	462b      	mov	r3, r5
 800b38a:	461d      	mov	r5, r3
 800b38c:	3b01      	subs	r3, #1
 800b38e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b392:	2a39      	cmp	r2, #57	; 0x39
 800b394:	d071      	beq.n	800b47a <_dtoa_r+0xb9a>
 800b396:	3201      	adds	r2, #1
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	e746      	b.n	800b22a <_dtoa_r+0x94a>
 800b39c:	2a00      	cmp	r2, #0
 800b39e:	dd07      	ble.n	800b3b0 <_dtoa_r+0xad0>
 800b3a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3a4:	d0ed      	beq.n	800b382 <_dtoa_r+0xaa2>
 800b3a6:	f10a 0301 	add.w	r3, sl, #1
 800b3aa:	f88b 3000 	strb.w	r3, [fp]
 800b3ae:	e73c      	b.n	800b22a <_dtoa_r+0x94a>
 800b3b0:	9b05      	ldr	r3, [sp, #20]
 800b3b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b3b6:	4599      	cmp	r9, r3
 800b3b8:	d047      	beq.n	800b44a <_dtoa_r+0xb6a>
 800b3ba:	ee18 1a10 	vmov	r1, s16
 800b3be:	2300      	movs	r3, #0
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 fc8a 	bl	800bcdc <__multadd>
 800b3c8:	45b8      	cmp	r8, r7
 800b3ca:	ee08 0a10 	vmov	s16, r0
 800b3ce:	f04f 0300 	mov.w	r3, #0
 800b3d2:	f04f 020a 	mov.w	r2, #10
 800b3d6:	4641      	mov	r1, r8
 800b3d8:	4620      	mov	r0, r4
 800b3da:	d106      	bne.n	800b3ea <_dtoa_r+0xb0a>
 800b3dc:	f000 fc7e 	bl	800bcdc <__multadd>
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	f109 0901 	add.w	r9, r9, #1
 800b3e8:	e772      	b.n	800b2d0 <_dtoa_r+0x9f0>
 800b3ea:	f000 fc77 	bl	800bcdc <__multadd>
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	4680      	mov	r8, r0
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	220a      	movs	r2, #10
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f000 fc70 	bl	800bcdc <__multadd>
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	e7f1      	b.n	800b3e4 <_dtoa_r+0xb04>
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	9302      	str	r3, [sp, #8]
 800b404:	9d01      	ldr	r5, [sp, #4]
 800b406:	ee18 0a10 	vmov	r0, s16
 800b40a:	4631      	mov	r1, r6
 800b40c:	f7ff f9dc 	bl	800a7c8 <quorem>
 800b410:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	f805 ab01 	strb.w	sl, [r5], #1
 800b41a:	1aea      	subs	r2, r5, r3
 800b41c:	9b02      	ldr	r3, [sp, #8]
 800b41e:	4293      	cmp	r3, r2
 800b420:	dd09      	ble.n	800b436 <_dtoa_r+0xb56>
 800b422:	ee18 1a10 	vmov	r1, s16
 800b426:	2300      	movs	r3, #0
 800b428:	220a      	movs	r2, #10
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 fc56 	bl	800bcdc <__multadd>
 800b430:	ee08 0a10 	vmov	s16, r0
 800b434:	e7e7      	b.n	800b406 <_dtoa_r+0xb26>
 800b436:	9b02      	ldr	r3, [sp, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	bfc8      	it	gt
 800b43c:	461d      	movgt	r5, r3
 800b43e:	9b01      	ldr	r3, [sp, #4]
 800b440:	bfd8      	it	le
 800b442:	2501      	movle	r5, #1
 800b444:	441d      	add	r5, r3
 800b446:	f04f 0800 	mov.w	r8, #0
 800b44a:	ee18 1a10 	vmov	r1, s16
 800b44e:	2201      	movs	r2, #1
 800b450:	4620      	mov	r0, r4
 800b452:	f000 fe3d 	bl	800c0d0 <__lshift>
 800b456:	4631      	mov	r1, r6
 800b458:	ee08 0a10 	vmov	s16, r0
 800b45c:	f000 fea8 	bl	800c1b0 <__mcmp>
 800b460:	2800      	cmp	r0, #0
 800b462:	dc91      	bgt.n	800b388 <_dtoa_r+0xaa8>
 800b464:	d102      	bne.n	800b46c <_dtoa_r+0xb8c>
 800b466:	f01a 0f01 	tst.w	sl, #1
 800b46a:	d18d      	bne.n	800b388 <_dtoa_r+0xaa8>
 800b46c:	462b      	mov	r3, r5
 800b46e:	461d      	mov	r5, r3
 800b470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b474:	2a30      	cmp	r2, #48	; 0x30
 800b476:	d0fa      	beq.n	800b46e <_dtoa_r+0xb8e>
 800b478:	e6d7      	b.n	800b22a <_dtoa_r+0x94a>
 800b47a:	9a01      	ldr	r2, [sp, #4]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d184      	bne.n	800b38a <_dtoa_r+0xaaa>
 800b480:	9b00      	ldr	r3, [sp, #0]
 800b482:	3301      	adds	r3, #1
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	2331      	movs	r3, #49	; 0x31
 800b488:	7013      	strb	r3, [r2, #0]
 800b48a:	e6ce      	b.n	800b22a <_dtoa_r+0x94a>
 800b48c:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <_dtoa_r+0xbd4>)
 800b48e:	f7ff ba95 	b.w	800a9bc <_dtoa_r+0xdc>
 800b492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b494:	2b00      	cmp	r3, #0
 800b496:	f47f aa6e 	bne.w	800a976 <_dtoa_r+0x96>
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <_dtoa_r+0xbd8>)
 800b49c:	f7ff ba8e 	b.w	800a9bc <_dtoa_r+0xdc>
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	dcae      	bgt.n	800b404 <_dtoa_r+0xb24>
 800b4a6:	9b06      	ldr	r3, [sp, #24]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	f73f aea8 	bgt.w	800b1fe <_dtoa_r+0x91e>
 800b4ae:	e7a9      	b.n	800b404 <_dtoa_r+0xb24>
 800b4b0:	0800da89 	.word	0x0800da89
 800b4b4:	0800d7f0 	.word	0x0800d7f0
 800b4b8:	0800da21 	.word	0x0800da21

0800b4bc <fiprintf>:
 800b4bc:	b40e      	push	{r1, r2, r3}
 800b4be:	b503      	push	{r0, r1, lr}
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	ab03      	add	r3, sp, #12
 800b4c4:	4805      	ldr	r0, [pc, #20]	; (800b4dc <fiprintf+0x20>)
 800b4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ca:	6800      	ldr	r0, [r0, #0]
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	f001 fae1 	bl	800ca94 <_vfiprintf_r>
 800b4d2:	b002      	add	sp, #8
 800b4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4d8:	b003      	add	sp, #12
 800b4da:	4770      	bx	lr
 800b4dc:	2000000c 	.word	0x2000000c

0800b4e0 <rshift>:
 800b4e0:	6903      	ldr	r3, [r0, #16]
 800b4e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b4e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4ee:	f100 0414 	add.w	r4, r0, #20
 800b4f2:	dd45      	ble.n	800b580 <rshift+0xa0>
 800b4f4:	f011 011f 	ands.w	r1, r1, #31
 800b4f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b500:	d10c      	bne.n	800b51c <rshift+0x3c>
 800b502:	f100 0710 	add.w	r7, r0, #16
 800b506:	4629      	mov	r1, r5
 800b508:	42b1      	cmp	r1, r6
 800b50a:	d334      	bcc.n	800b576 <rshift+0x96>
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	1eea      	subs	r2, r5, #3
 800b512:	4296      	cmp	r6, r2
 800b514:	bf38      	it	cc
 800b516:	2300      	movcc	r3, #0
 800b518:	4423      	add	r3, r4
 800b51a:	e015      	b.n	800b548 <rshift+0x68>
 800b51c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b520:	f1c1 0820 	rsb	r8, r1, #32
 800b524:	40cf      	lsrs	r7, r1
 800b526:	f105 0e04 	add.w	lr, r5, #4
 800b52a:	46a1      	mov	r9, r4
 800b52c:	4576      	cmp	r6, lr
 800b52e:	46f4      	mov	ip, lr
 800b530:	d815      	bhi.n	800b55e <rshift+0x7e>
 800b532:	1a9a      	subs	r2, r3, r2
 800b534:	0092      	lsls	r2, r2, #2
 800b536:	3a04      	subs	r2, #4
 800b538:	3501      	adds	r5, #1
 800b53a:	42ae      	cmp	r6, r5
 800b53c:	bf38      	it	cc
 800b53e:	2200      	movcc	r2, #0
 800b540:	18a3      	adds	r3, r4, r2
 800b542:	50a7      	str	r7, [r4, r2]
 800b544:	b107      	cbz	r7, 800b548 <rshift+0x68>
 800b546:	3304      	adds	r3, #4
 800b548:	1b1a      	subs	r2, r3, r4
 800b54a:	42a3      	cmp	r3, r4
 800b54c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b550:	bf08      	it	eq
 800b552:	2300      	moveq	r3, #0
 800b554:	6102      	str	r2, [r0, #16]
 800b556:	bf08      	it	eq
 800b558:	6143      	streq	r3, [r0, #20]
 800b55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b55e:	f8dc c000 	ldr.w	ip, [ip]
 800b562:	fa0c fc08 	lsl.w	ip, ip, r8
 800b566:	ea4c 0707 	orr.w	r7, ip, r7
 800b56a:	f849 7b04 	str.w	r7, [r9], #4
 800b56e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b572:	40cf      	lsrs	r7, r1
 800b574:	e7da      	b.n	800b52c <rshift+0x4c>
 800b576:	f851 cb04 	ldr.w	ip, [r1], #4
 800b57a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b57e:	e7c3      	b.n	800b508 <rshift+0x28>
 800b580:	4623      	mov	r3, r4
 800b582:	e7e1      	b.n	800b548 <rshift+0x68>

0800b584 <__hexdig_fun>:
 800b584:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b588:	2b09      	cmp	r3, #9
 800b58a:	d802      	bhi.n	800b592 <__hexdig_fun+0xe>
 800b58c:	3820      	subs	r0, #32
 800b58e:	b2c0      	uxtb	r0, r0
 800b590:	4770      	bx	lr
 800b592:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b596:	2b05      	cmp	r3, #5
 800b598:	d801      	bhi.n	800b59e <__hexdig_fun+0x1a>
 800b59a:	3847      	subs	r0, #71	; 0x47
 800b59c:	e7f7      	b.n	800b58e <__hexdig_fun+0xa>
 800b59e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5a2:	2b05      	cmp	r3, #5
 800b5a4:	d801      	bhi.n	800b5aa <__hexdig_fun+0x26>
 800b5a6:	3827      	subs	r0, #39	; 0x27
 800b5a8:	e7f1      	b.n	800b58e <__hexdig_fun+0xa>
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	4770      	bx	lr
	...

0800b5b0 <__gethex>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	ed2d 8b02 	vpush	{d8}
 800b5b8:	b089      	sub	sp, #36	; 0x24
 800b5ba:	ee08 0a10 	vmov	s16, r0
 800b5be:	9304      	str	r3, [sp, #16]
 800b5c0:	4bb4      	ldr	r3, [pc, #720]	; (800b894 <__gethex+0x2e4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	468b      	mov	fp, r1
 800b5ca:	4690      	mov	r8, r2
 800b5cc:	f7f4 fe2a 	bl	8000224 <strlen>
 800b5d0:	9b01      	ldr	r3, [sp, #4]
 800b5d2:	f8db 2000 	ldr.w	r2, [fp]
 800b5d6:	4403      	add	r3, r0
 800b5d8:	4682      	mov	sl, r0
 800b5da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	1c93      	adds	r3, r2, #2
 800b5e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b5e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b5ea:	32fe      	adds	r2, #254	; 0xfe
 800b5ec:	18d1      	adds	r1, r2, r3
 800b5ee:	461f      	mov	r7, r3
 800b5f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b5f4:	9100      	str	r1, [sp, #0]
 800b5f6:	2830      	cmp	r0, #48	; 0x30
 800b5f8:	d0f8      	beq.n	800b5ec <__gethex+0x3c>
 800b5fa:	f7ff ffc3 	bl	800b584 <__hexdig_fun>
 800b5fe:	4604      	mov	r4, r0
 800b600:	2800      	cmp	r0, #0
 800b602:	d13a      	bne.n	800b67a <__gethex+0xca>
 800b604:	9901      	ldr	r1, [sp, #4]
 800b606:	4652      	mov	r2, sl
 800b608:	4638      	mov	r0, r7
 800b60a:	f001 fb8d 	bl	800cd28 <strncmp>
 800b60e:	4605      	mov	r5, r0
 800b610:	2800      	cmp	r0, #0
 800b612:	d168      	bne.n	800b6e6 <__gethex+0x136>
 800b614:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b618:	eb07 060a 	add.w	r6, r7, sl
 800b61c:	f7ff ffb2 	bl	800b584 <__hexdig_fun>
 800b620:	2800      	cmp	r0, #0
 800b622:	d062      	beq.n	800b6ea <__gethex+0x13a>
 800b624:	4633      	mov	r3, r6
 800b626:	7818      	ldrb	r0, [r3, #0]
 800b628:	2830      	cmp	r0, #48	; 0x30
 800b62a:	461f      	mov	r7, r3
 800b62c:	f103 0301 	add.w	r3, r3, #1
 800b630:	d0f9      	beq.n	800b626 <__gethex+0x76>
 800b632:	f7ff ffa7 	bl	800b584 <__hexdig_fun>
 800b636:	2301      	movs	r3, #1
 800b638:	fab0 f480 	clz	r4, r0
 800b63c:	0964      	lsrs	r4, r4, #5
 800b63e:	4635      	mov	r5, r6
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	463a      	mov	r2, r7
 800b644:	4616      	mov	r6, r2
 800b646:	3201      	adds	r2, #1
 800b648:	7830      	ldrb	r0, [r6, #0]
 800b64a:	f7ff ff9b 	bl	800b584 <__hexdig_fun>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d1f8      	bne.n	800b644 <__gethex+0x94>
 800b652:	9901      	ldr	r1, [sp, #4]
 800b654:	4652      	mov	r2, sl
 800b656:	4630      	mov	r0, r6
 800b658:	f001 fb66 	bl	800cd28 <strncmp>
 800b65c:	b980      	cbnz	r0, 800b680 <__gethex+0xd0>
 800b65e:	b94d      	cbnz	r5, 800b674 <__gethex+0xc4>
 800b660:	eb06 050a 	add.w	r5, r6, sl
 800b664:	462a      	mov	r2, r5
 800b666:	4616      	mov	r6, r2
 800b668:	3201      	adds	r2, #1
 800b66a:	7830      	ldrb	r0, [r6, #0]
 800b66c:	f7ff ff8a 	bl	800b584 <__hexdig_fun>
 800b670:	2800      	cmp	r0, #0
 800b672:	d1f8      	bne.n	800b666 <__gethex+0xb6>
 800b674:	1bad      	subs	r5, r5, r6
 800b676:	00ad      	lsls	r5, r5, #2
 800b678:	e004      	b.n	800b684 <__gethex+0xd4>
 800b67a:	2400      	movs	r4, #0
 800b67c:	4625      	mov	r5, r4
 800b67e:	e7e0      	b.n	800b642 <__gethex+0x92>
 800b680:	2d00      	cmp	r5, #0
 800b682:	d1f7      	bne.n	800b674 <__gethex+0xc4>
 800b684:	7833      	ldrb	r3, [r6, #0]
 800b686:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b68a:	2b50      	cmp	r3, #80	; 0x50
 800b68c:	d13b      	bne.n	800b706 <__gethex+0x156>
 800b68e:	7873      	ldrb	r3, [r6, #1]
 800b690:	2b2b      	cmp	r3, #43	; 0x2b
 800b692:	d02c      	beq.n	800b6ee <__gethex+0x13e>
 800b694:	2b2d      	cmp	r3, #45	; 0x2d
 800b696:	d02e      	beq.n	800b6f6 <__gethex+0x146>
 800b698:	1c71      	adds	r1, r6, #1
 800b69a:	f04f 0900 	mov.w	r9, #0
 800b69e:	7808      	ldrb	r0, [r1, #0]
 800b6a0:	f7ff ff70 	bl	800b584 <__hexdig_fun>
 800b6a4:	1e43      	subs	r3, r0, #1
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b18      	cmp	r3, #24
 800b6aa:	d82c      	bhi.n	800b706 <__gethex+0x156>
 800b6ac:	f1a0 0210 	sub.w	r2, r0, #16
 800b6b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6b4:	f7ff ff66 	bl	800b584 <__hexdig_fun>
 800b6b8:	1e43      	subs	r3, r0, #1
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b18      	cmp	r3, #24
 800b6be:	d91d      	bls.n	800b6fc <__gethex+0x14c>
 800b6c0:	f1b9 0f00 	cmp.w	r9, #0
 800b6c4:	d000      	beq.n	800b6c8 <__gethex+0x118>
 800b6c6:	4252      	negs	r2, r2
 800b6c8:	4415      	add	r5, r2
 800b6ca:	f8cb 1000 	str.w	r1, [fp]
 800b6ce:	b1e4      	cbz	r4, 800b70a <__gethex+0x15a>
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	bf14      	ite	ne
 800b6d6:	2700      	movne	r7, #0
 800b6d8:	2706      	moveq	r7, #6
 800b6da:	4638      	mov	r0, r7
 800b6dc:	b009      	add	sp, #36	; 0x24
 800b6de:	ecbd 8b02 	vpop	{d8}
 800b6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e6:	463e      	mov	r6, r7
 800b6e8:	4625      	mov	r5, r4
 800b6ea:	2401      	movs	r4, #1
 800b6ec:	e7ca      	b.n	800b684 <__gethex+0xd4>
 800b6ee:	f04f 0900 	mov.w	r9, #0
 800b6f2:	1cb1      	adds	r1, r6, #2
 800b6f4:	e7d3      	b.n	800b69e <__gethex+0xee>
 800b6f6:	f04f 0901 	mov.w	r9, #1
 800b6fa:	e7fa      	b.n	800b6f2 <__gethex+0x142>
 800b6fc:	230a      	movs	r3, #10
 800b6fe:	fb03 0202 	mla	r2, r3, r2, r0
 800b702:	3a10      	subs	r2, #16
 800b704:	e7d4      	b.n	800b6b0 <__gethex+0x100>
 800b706:	4631      	mov	r1, r6
 800b708:	e7df      	b.n	800b6ca <__gethex+0x11a>
 800b70a:	1bf3      	subs	r3, r6, r7
 800b70c:	3b01      	subs	r3, #1
 800b70e:	4621      	mov	r1, r4
 800b710:	2b07      	cmp	r3, #7
 800b712:	dc0b      	bgt.n	800b72c <__gethex+0x17c>
 800b714:	ee18 0a10 	vmov	r0, s16
 800b718:	f000 fa7e 	bl	800bc18 <_Balloc>
 800b71c:	4604      	mov	r4, r0
 800b71e:	b940      	cbnz	r0, 800b732 <__gethex+0x182>
 800b720:	4b5d      	ldr	r3, [pc, #372]	; (800b898 <__gethex+0x2e8>)
 800b722:	4602      	mov	r2, r0
 800b724:	21de      	movs	r1, #222	; 0xde
 800b726:	485d      	ldr	r0, [pc, #372]	; (800b89c <__gethex+0x2ec>)
 800b728:	f7ff f830 	bl	800a78c <__assert_func>
 800b72c:	3101      	adds	r1, #1
 800b72e:	105b      	asrs	r3, r3, #1
 800b730:	e7ee      	b.n	800b710 <__gethex+0x160>
 800b732:	f100 0914 	add.w	r9, r0, #20
 800b736:	f04f 0b00 	mov.w	fp, #0
 800b73a:	f1ca 0301 	rsb	r3, sl, #1
 800b73e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b742:	f8cd b000 	str.w	fp, [sp]
 800b746:	9306      	str	r3, [sp, #24]
 800b748:	42b7      	cmp	r7, r6
 800b74a:	d340      	bcc.n	800b7ce <__gethex+0x21e>
 800b74c:	9802      	ldr	r0, [sp, #8]
 800b74e:	9b00      	ldr	r3, [sp, #0]
 800b750:	f840 3b04 	str.w	r3, [r0], #4
 800b754:	eba0 0009 	sub.w	r0, r0, r9
 800b758:	1080      	asrs	r0, r0, #2
 800b75a:	0146      	lsls	r6, r0, #5
 800b75c:	6120      	str	r0, [r4, #16]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fb4c 	bl	800bdfc <__hi0bits>
 800b764:	1a30      	subs	r0, r6, r0
 800b766:	f8d8 6000 	ldr.w	r6, [r8]
 800b76a:	42b0      	cmp	r0, r6
 800b76c:	dd63      	ble.n	800b836 <__gethex+0x286>
 800b76e:	1b87      	subs	r7, r0, r6
 800b770:	4639      	mov	r1, r7
 800b772:	4620      	mov	r0, r4
 800b774:	f000 fef0 	bl	800c558 <__any_on>
 800b778:	4682      	mov	sl, r0
 800b77a:	b1a8      	cbz	r0, 800b7a8 <__gethex+0x1f8>
 800b77c:	1e7b      	subs	r3, r7, #1
 800b77e:	1159      	asrs	r1, r3, #5
 800b780:	f003 021f 	and.w	r2, r3, #31
 800b784:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b788:	f04f 0a01 	mov.w	sl, #1
 800b78c:	fa0a f202 	lsl.w	r2, sl, r2
 800b790:	420a      	tst	r2, r1
 800b792:	d009      	beq.n	800b7a8 <__gethex+0x1f8>
 800b794:	4553      	cmp	r3, sl
 800b796:	dd05      	ble.n	800b7a4 <__gethex+0x1f4>
 800b798:	1eb9      	subs	r1, r7, #2
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 fedc 	bl	800c558 <__any_on>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d145      	bne.n	800b830 <__gethex+0x280>
 800b7a4:	f04f 0a02 	mov.w	sl, #2
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f7ff fe98 	bl	800b4e0 <rshift>
 800b7b0:	443d      	add	r5, r7
 800b7b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7b6:	42ab      	cmp	r3, r5
 800b7b8:	da4c      	bge.n	800b854 <__gethex+0x2a4>
 800b7ba:	ee18 0a10 	vmov	r0, s16
 800b7be:	4621      	mov	r1, r4
 800b7c0:	f000 fa6a 	bl	800bc98 <_Bfree>
 800b7c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	27a3      	movs	r7, #163	; 0xa3
 800b7cc:	e785      	b.n	800b6da <__gethex+0x12a>
 800b7ce:	1e73      	subs	r3, r6, #1
 800b7d0:	9a05      	ldr	r2, [sp, #20]
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d019      	beq.n	800b810 <__gethex+0x260>
 800b7dc:	f1bb 0f20 	cmp.w	fp, #32
 800b7e0:	d107      	bne.n	800b7f2 <__gethex+0x242>
 800b7e2:	9b02      	ldr	r3, [sp, #8]
 800b7e4:	9a00      	ldr	r2, [sp, #0]
 800b7e6:	f843 2b04 	str.w	r2, [r3], #4
 800b7ea:	9302      	str	r3, [sp, #8]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	469b      	mov	fp, r3
 800b7f2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b7f6:	f7ff fec5 	bl	800b584 <__hexdig_fun>
 800b7fa:	9b00      	ldr	r3, [sp, #0]
 800b7fc:	f000 000f 	and.w	r0, r0, #15
 800b800:	fa00 f00b 	lsl.w	r0, r0, fp
 800b804:	4303      	orrs	r3, r0
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	f10b 0b04 	add.w	fp, fp, #4
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	e00d      	b.n	800b82c <__gethex+0x27c>
 800b810:	9b03      	ldr	r3, [sp, #12]
 800b812:	9a06      	ldr	r2, [sp, #24]
 800b814:	4413      	add	r3, r2
 800b816:	42bb      	cmp	r3, r7
 800b818:	d3e0      	bcc.n	800b7dc <__gethex+0x22c>
 800b81a:	4618      	mov	r0, r3
 800b81c:	9901      	ldr	r1, [sp, #4]
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	4652      	mov	r2, sl
 800b822:	f001 fa81 	bl	800cd28 <strncmp>
 800b826:	9b07      	ldr	r3, [sp, #28]
 800b828:	2800      	cmp	r0, #0
 800b82a:	d1d7      	bne.n	800b7dc <__gethex+0x22c>
 800b82c:	461e      	mov	r6, r3
 800b82e:	e78b      	b.n	800b748 <__gethex+0x198>
 800b830:	f04f 0a03 	mov.w	sl, #3
 800b834:	e7b8      	b.n	800b7a8 <__gethex+0x1f8>
 800b836:	da0a      	bge.n	800b84e <__gethex+0x29e>
 800b838:	1a37      	subs	r7, r6, r0
 800b83a:	4621      	mov	r1, r4
 800b83c:	ee18 0a10 	vmov	r0, s16
 800b840:	463a      	mov	r2, r7
 800b842:	f000 fc45 	bl	800c0d0 <__lshift>
 800b846:	1bed      	subs	r5, r5, r7
 800b848:	4604      	mov	r4, r0
 800b84a:	f100 0914 	add.w	r9, r0, #20
 800b84e:	f04f 0a00 	mov.w	sl, #0
 800b852:	e7ae      	b.n	800b7b2 <__gethex+0x202>
 800b854:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b858:	42a8      	cmp	r0, r5
 800b85a:	dd72      	ble.n	800b942 <__gethex+0x392>
 800b85c:	1b45      	subs	r5, r0, r5
 800b85e:	42ae      	cmp	r6, r5
 800b860:	dc36      	bgt.n	800b8d0 <__gethex+0x320>
 800b862:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b866:	2b02      	cmp	r3, #2
 800b868:	d02a      	beq.n	800b8c0 <__gethex+0x310>
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d02c      	beq.n	800b8c8 <__gethex+0x318>
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d11c      	bne.n	800b8ac <__gethex+0x2fc>
 800b872:	42ae      	cmp	r6, r5
 800b874:	d11a      	bne.n	800b8ac <__gethex+0x2fc>
 800b876:	2e01      	cmp	r6, #1
 800b878:	d112      	bne.n	800b8a0 <__gethex+0x2f0>
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b880:	6013      	str	r3, [r2, #0]
 800b882:	2301      	movs	r3, #1
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	f8c9 3000 	str.w	r3, [r9]
 800b88a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b88c:	2762      	movs	r7, #98	; 0x62
 800b88e:	601c      	str	r4, [r3, #0]
 800b890:	e723      	b.n	800b6da <__gethex+0x12a>
 800b892:	bf00      	nop
 800b894:	0800db00 	.word	0x0800db00
 800b898:	0800da89 	.word	0x0800da89
 800b89c:	0800da9a 	.word	0x0800da9a
 800b8a0:	1e71      	subs	r1, r6, #1
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 fe58 	bl	800c558 <__any_on>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d1e6      	bne.n	800b87a <__gethex+0x2ca>
 800b8ac:	ee18 0a10 	vmov	r0, s16
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	f000 f9f1 	bl	800bc98 <_Bfree>
 800b8b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	2750      	movs	r7, #80	; 0x50
 800b8be:	e70c      	b.n	800b6da <__gethex+0x12a>
 800b8c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1f2      	bne.n	800b8ac <__gethex+0x2fc>
 800b8c6:	e7d8      	b.n	800b87a <__gethex+0x2ca>
 800b8c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1d5      	bne.n	800b87a <__gethex+0x2ca>
 800b8ce:	e7ed      	b.n	800b8ac <__gethex+0x2fc>
 800b8d0:	1e6f      	subs	r7, r5, #1
 800b8d2:	f1ba 0f00 	cmp.w	sl, #0
 800b8d6:	d131      	bne.n	800b93c <__gethex+0x38c>
 800b8d8:	b127      	cbz	r7, 800b8e4 <__gethex+0x334>
 800b8da:	4639      	mov	r1, r7
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fe3b 	bl	800c558 <__any_on>
 800b8e2:	4682      	mov	sl, r0
 800b8e4:	117b      	asrs	r3, r7, #5
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b8ec:	f007 071f 	and.w	r7, r7, #31
 800b8f0:	fa01 f707 	lsl.w	r7, r1, r7
 800b8f4:	421f      	tst	r7, r3
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	bf18      	it	ne
 800b8fc:	f04a 0a02 	orrne.w	sl, sl, #2
 800b900:	1b76      	subs	r6, r6, r5
 800b902:	f7ff fded 	bl	800b4e0 <rshift>
 800b906:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b90a:	2702      	movs	r7, #2
 800b90c:	f1ba 0f00 	cmp.w	sl, #0
 800b910:	d048      	beq.n	800b9a4 <__gethex+0x3f4>
 800b912:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b916:	2b02      	cmp	r3, #2
 800b918:	d015      	beq.n	800b946 <__gethex+0x396>
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d017      	beq.n	800b94e <__gethex+0x39e>
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d109      	bne.n	800b936 <__gethex+0x386>
 800b922:	f01a 0f02 	tst.w	sl, #2
 800b926:	d006      	beq.n	800b936 <__gethex+0x386>
 800b928:	f8d9 0000 	ldr.w	r0, [r9]
 800b92c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b930:	f01a 0f01 	tst.w	sl, #1
 800b934:	d10e      	bne.n	800b954 <__gethex+0x3a4>
 800b936:	f047 0710 	orr.w	r7, r7, #16
 800b93a:	e033      	b.n	800b9a4 <__gethex+0x3f4>
 800b93c:	f04f 0a01 	mov.w	sl, #1
 800b940:	e7d0      	b.n	800b8e4 <__gethex+0x334>
 800b942:	2701      	movs	r7, #1
 800b944:	e7e2      	b.n	800b90c <__gethex+0x35c>
 800b946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b948:	f1c3 0301 	rsb	r3, r3, #1
 800b94c:	9315      	str	r3, [sp, #84]	; 0x54
 800b94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0f0      	beq.n	800b936 <__gethex+0x386>
 800b954:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b958:	f104 0314 	add.w	r3, r4, #20
 800b95c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b960:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b964:	f04f 0c00 	mov.w	ip, #0
 800b968:	4618      	mov	r0, r3
 800b96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b96e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b972:	d01c      	beq.n	800b9ae <__gethex+0x3fe>
 800b974:	3201      	adds	r2, #1
 800b976:	6002      	str	r2, [r0, #0]
 800b978:	2f02      	cmp	r7, #2
 800b97a:	f104 0314 	add.w	r3, r4, #20
 800b97e:	d13f      	bne.n	800ba00 <__gethex+0x450>
 800b980:	f8d8 2000 	ldr.w	r2, [r8]
 800b984:	3a01      	subs	r2, #1
 800b986:	42b2      	cmp	r2, r6
 800b988:	d10a      	bne.n	800b9a0 <__gethex+0x3f0>
 800b98a:	1171      	asrs	r1, r6, #5
 800b98c:	2201      	movs	r2, #1
 800b98e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b992:	f006 061f 	and.w	r6, r6, #31
 800b996:	fa02 f606 	lsl.w	r6, r2, r6
 800b99a:	421e      	tst	r6, r3
 800b99c:	bf18      	it	ne
 800b99e:	4617      	movne	r7, r2
 800b9a0:	f047 0720 	orr.w	r7, r7, #32
 800b9a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9a6:	601c      	str	r4, [r3, #0]
 800b9a8:	9b04      	ldr	r3, [sp, #16]
 800b9aa:	601d      	str	r5, [r3, #0]
 800b9ac:	e695      	b.n	800b6da <__gethex+0x12a>
 800b9ae:	4299      	cmp	r1, r3
 800b9b0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b9b4:	d8d8      	bhi.n	800b968 <__gethex+0x3b8>
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	459b      	cmp	fp, r3
 800b9ba:	db19      	blt.n	800b9f0 <__gethex+0x440>
 800b9bc:	6861      	ldr	r1, [r4, #4]
 800b9be:	ee18 0a10 	vmov	r0, s16
 800b9c2:	3101      	adds	r1, #1
 800b9c4:	f000 f928 	bl	800bc18 <_Balloc>
 800b9c8:	4681      	mov	r9, r0
 800b9ca:	b918      	cbnz	r0, 800b9d4 <__gethex+0x424>
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ba38 <__gethex+0x488>)
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	2184      	movs	r1, #132	; 0x84
 800b9d2:	e6a8      	b.n	800b726 <__gethex+0x176>
 800b9d4:	6922      	ldr	r2, [r4, #16]
 800b9d6:	3202      	adds	r2, #2
 800b9d8:	f104 010c 	add.w	r1, r4, #12
 800b9dc:	0092      	lsls	r2, r2, #2
 800b9de:	300c      	adds	r0, #12
 800b9e0:	f000 f90c 	bl	800bbfc <memcpy>
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	ee18 0a10 	vmov	r0, s16
 800b9ea:	f000 f955 	bl	800bc98 <_Bfree>
 800b9ee:	464c      	mov	r4, r9
 800b9f0:	6923      	ldr	r3, [r4, #16]
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9f8:	6122      	str	r2, [r4, #16]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	615a      	str	r2, [r3, #20]
 800b9fe:	e7bb      	b.n	800b978 <__gethex+0x3c8>
 800ba00:	6922      	ldr	r2, [r4, #16]
 800ba02:	455a      	cmp	r2, fp
 800ba04:	dd0b      	ble.n	800ba1e <__gethex+0x46e>
 800ba06:	2101      	movs	r1, #1
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f7ff fd69 	bl	800b4e0 <rshift>
 800ba0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba12:	3501      	adds	r5, #1
 800ba14:	42ab      	cmp	r3, r5
 800ba16:	f6ff aed0 	blt.w	800b7ba <__gethex+0x20a>
 800ba1a:	2701      	movs	r7, #1
 800ba1c:	e7c0      	b.n	800b9a0 <__gethex+0x3f0>
 800ba1e:	f016 061f 	ands.w	r6, r6, #31
 800ba22:	d0fa      	beq.n	800ba1a <__gethex+0x46a>
 800ba24:	4453      	add	r3, sl
 800ba26:	f1c6 0620 	rsb	r6, r6, #32
 800ba2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ba2e:	f000 f9e5 	bl	800bdfc <__hi0bits>
 800ba32:	42b0      	cmp	r0, r6
 800ba34:	dbe7      	blt.n	800ba06 <__gethex+0x456>
 800ba36:	e7f0      	b.n	800ba1a <__gethex+0x46a>
 800ba38:	0800da89 	.word	0x0800da89

0800ba3c <L_shift>:
 800ba3c:	f1c2 0208 	rsb	r2, r2, #8
 800ba40:	0092      	lsls	r2, r2, #2
 800ba42:	b570      	push	{r4, r5, r6, lr}
 800ba44:	f1c2 0620 	rsb	r6, r2, #32
 800ba48:	6843      	ldr	r3, [r0, #4]
 800ba4a:	6804      	ldr	r4, [r0, #0]
 800ba4c:	fa03 f506 	lsl.w	r5, r3, r6
 800ba50:	432c      	orrs	r4, r5
 800ba52:	40d3      	lsrs	r3, r2
 800ba54:	6004      	str	r4, [r0, #0]
 800ba56:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba5a:	4288      	cmp	r0, r1
 800ba5c:	d3f4      	bcc.n	800ba48 <L_shift+0xc>
 800ba5e:	bd70      	pop	{r4, r5, r6, pc}

0800ba60 <__match>:
 800ba60:	b530      	push	{r4, r5, lr}
 800ba62:	6803      	ldr	r3, [r0, #0]
 800ba64:	3301      	adds	r3, #1
 800ba66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba6a:	b914      	cbnz	r4, 800ba72 <__match+0x12>
 800ba6c:	6003      	str	r3, [r0, #0]
 800ba6e:	2001      	movs	r0, #1
 800ba70:	bd30      	pop	{r4, r5, pc}
 800ba72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba7a:	2d19      	cmp	r5, #25
 800ba7c:	bf98      	it	ls
 800ba7e:	3220      	addls	r2, #32
 800ba80:	42a2      	cmp	r2, r4
 800ba82:	d0f0      	beq.n	800ba66 <__match+0x6>
 800ba84:	2000      	movs	r0, #0
 800ba86:	e7f3      	b.n	800ba70 <__match+0x10>

0800ba88 <__hexnan>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	680b      	ldr	r3, [r1, #0]
 800ba8e:	115e      	asrs	r6, r3, #5
 800ba90:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba94:	f013 031f 	ands.w	r3, r3, #31
 800ba98:	b087      	sub	sp, #28
 800ba9a:	bf18      	it	ne
 800ba9c:	3604      	addne	r6, #4
 800ba9e:	2500      	movs	r5, #0
 800baa0:	1f37      	subs	r7, r6, #4
 800baa2:	4690      	mov	r8, r2
 800baa4:	6802      	ldr	r2, [r0, #0]
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	4682      	mov	sl, r0
 800baaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800baae:	46b9      	mov	r9, r7
 800bab0:	463c      	mov	r4, r7
 800bab2:	9502      	str	r5, [sp, #8]
 800bab4:	46ab      	mov	fp, r5
 800bab6:	7851      	ldrb	r1, [r2, #1]
 800bab8:	1c53      	adds	r3, r2, #1
 800baba:	9303      	str	r3, [sp, #12]
 800babc:	b341      	cbz	r1, 800bb10 <__hexnan+0x88>
 800babe:	4608      	mov	r0, r1
 800bac0:	9205      	str	r2, [sp, #20]
 800bac2:	9104      	str	r1, [sp, #16]
 800bac4:	f7ff fd5e 	bl	800b584 <__hexdig_fun>
 800bac8:	2800      	cmp	r0, #0
 800baca:	d14f      	bne.n	800bb6c <__hexnan+0xe4>
 800bacc:	9904      	ldr	r1, [sp, #16]
 800bace:	9a05      	ldr	r2, [sp, #20]
 800bad0:	2920      	cmp	r1, #32
 800bad2:	d818      	bhi.n	800bb06 <__hexnan+0x7e>
 800bad4:	9b02      	ldr	r3, [sp, #8]
 800bad6:	459b      	cmp	fp, r3
 800bad8:	dd13      	ble.n	800bb02 <__hexnan+0x7a>
 800bada:	454c      	cmp	r4, r9
 800badc:	d206      	bcs.n	800baec <__hexnan+0x64>
 800bade:	2d07      	cmp	r5, #7
 800bae0:	dc04      	bgt.n	800baec <__hexnan+0x64>
 800bae2:	462a      	mov	r2, r5
 800bae4:	4649      	mov	r1, r9
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7ff ffa8 	bl	800ba3c <L_shift>
 800baec:	4544      	cmp	r4, r8
 800baee:	d950      	bls.n	800bb92 <__hexnan+0x10a>
 800baf0:	2300      	movs	r3, #0
 800baf2:	f1a4 0904 	sub.w	r9, r4, #4
 800baf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bafa:	f8cd b008 	str.w	fp, [sp, #8]
 800bafe:	464c      	mov	r4, r9
 800bb00:	461d      	mov	r5, r3
 800bb02:	9a03      	ldr	r2, [sp, #12]
 800bb04:	e7d7      	b.n	800bab6 <__hexnan+0x2e>
 800bb06:	2929      	cmp	r1, #41	; 0x29
 800bb08:	d156      	bne.n	800bbb8 <__hexnan+0x130>
 800bb0a:	3202      	adds	r2, #2
 800bb0c:	f8ca 2000 	str.w	r2, [sl]
 800bb10:	f1bb 0f00 	cmp.w	fp, #0
 800bb14:	d050      	beq.n	800bbb8 <__hexnan+0x130>
 800bb16:	454c      	cmp	r4, r9
 800bb18:	d206      	bcs.n	800bb28 <__hexnan+0xa0>
 800bb1a:	2d07      	cmp	r5, #7
 800bb1c:	dc04      	bgt.n	800bb28 <__hexnan+0xa0>
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4649      	mov	r1, r9
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7ff ff8a 	bl	800ba3c <L_shift>
 800bb28:	4544      	cmp	r4, r8
 800bb2a:	d934      	bls.n	800bb96 <__hexnan+0x10e>
 800bb2c:	f1a8 0204 	sub.w	r2, r8, #4
 800bb30:	4623      	mov	r3, r4
 800bb32:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb36:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb3a:	429f      	cmp	r7, r3
 800bb3c:	d2f9      	bcs.n	800bb32 <__hexnan+0xaa>
 800bb3e:	1b3b      	subs	r3, r7, r4
 800bb40:	f023 0303 	bic.w	r3, r3, #3
 800bb44:	3304      	adds	r3, #4
 800bb46:	3401      	adds	r4, #1
 800bb48:	3e03      	subs	r6, #3
 800bb4a:	42b4      	cmp	r4, r6
 800bb4c:	bf88      	it	hi
 800bb4e:	2304      	movhi	r3, #4
 800bb50:	4443      	add	r3, r8
 800bb52:	2200      	movs	r2, #0
 800bb54:	f843 2b04 	str.w	r2, [r3], #4
 800bb58:	429f      	cmp	r7, r3
 800bb5a:	d2fb      	bcs.n	800bb54 <__hexnan+0xcc>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	b91b      	cbnz	r3, 800bb68 <__hexnan+0xe0>
 800bb60:	4547      	cmp	r7, r8
 800bb62:	d127      	bne.n	800bbb4 <__hexnan+0x12c>
 800bb64:	2301      	movs	r3, #1
 800bb66:	603b      	str	r3, [r7, #0]
 800bb68:	2005      	movs	r0, #5
 800bb6a:	e026      	b.n	800bbba <__hexnan+0x132>
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	2d08      	cmp	r5, #8
 800bb70:	f10b 0b01 	add.w	fp, fp, #1
 800bb74:	dd06      	ble.n	800bb84 <__hexnan+0xfc>
 800bb76:	4544      	cmp	r4, r8
 800bb78:	d9c3      	bls.n	800bb02 <__hexnan+0x7a>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb80:	2501      	movs	r5, #1
 800bb82:	3c04      	subs	r4, #4
 800bb84:	6822      	ldr	r2, [r4, #0]
 800bb86:	f000 000f 	and.w	r0, r0, #15
 800bb8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bb8e:	6022      	str	r2, [r4, #0]
 800bb90:	e7b7      	b.n	800bb02 <__hexnan+0x7a>
 800bb92:	2508      	movs	r5, #8
 800bb94:	e7b5      	b.n	800bb02 <__hexnan+0x7a>
 800bb96:	9b01      	ldr	r3, [sp, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d0df      	beq.n	800bb5c <__hexnan+0xd4>
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bba0:	f1c3 0320 	rsb	r3, r3, #32
 800bba4:	fa22 f303 	lsr.w	r3, r2, r3
 800bba8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bbac:	401a      	ands	r2, r3
 800bbae:	f846 2c04 	str.w	r2, [r6, #-4]
 800bbb2:	e7d3      	b.n	800bb5c <__hexnan+0xd4>
 800bbb4:	3f04      	subs	r7, #4
 800bbb6:	e7d1      	b.n	800bb5c <__hexnan+0xd4>
 800bbb8:	2004      	movs	r0, #4
 800bbba:	b007      	add	sp, #28
 800bbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbc0 <_localeconv_r>:
 800bbc0:	4800      	ldr	r0, [pc, #0]	; (800bbc4 <_localeconv_r+0x4>)
 800bbc2:	4770      	bx	lr
 800bbc4:	20000164 	.word	0x20000164

0800bbc8 <malloc>:
 800bbc8:	4b02      	ldr	r3, [pc, #8]	; (800bbd4 <malloc+0xc>)
 800bbca:	4601      	mov	r1, r0
 800bbcc:	6818      	ldr	r0, [r3, #0]
 800bbce:	f000 bd67 	b.w	800c6a0 <_malloc_r>
 800bbd2:	bf00      	nop
 800bbd4:	2000000c 	.word	0x2000000c

0800bbd8 <__ascii_mbtowc>:
 800bbd8:	b082      	sub	sp, #8
 800bbda:	b901      	cbnz	r1, 800bbde <__ascii_mbtowc+0x6>
 800bbdc:	a901      	add	r1, sp, #4
 800bbde:	b142      	cbz	r2, 800bbf2 <__ascii_mbtowc+0x1a>
 800bbe0:	b14b      	cbz	r3, 800bbf6 <__ascii_mbtowc+0x1e>
 800bbe2:	7813      	ldrb	r3, [r2, #0]
 800bbe4:	600b      	str	r3, [r1, #0]
 800bbe6:	7812      	ldrb	r2, [r2, #0]
 800bbe8:	1e10      	subs	r0, r2, #0
 800bbea:	bf18      	it	ne
 800bbec:	2001      	movne	r0, #1
 800bbee:	b002      	add	sp, #8
 800bbf0:	4770      	bx	lr
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	e7fb      	b.n	800bbee <__ascii_mbtowc+0x16>
 800bbf6:	f06f 0001 	mvn.w	r0, #1
 800bbfa:	e7f8      	b.n	800bbee <__ascii_mbtowc+0x16>

0800bbfc <memcpy>:
 800bbfc:	440a      	add	r2, r1
 800bbfe:	4291      	cmp	r1, r2
 800bc00:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc04:	d100      	bne.n	800bc08 <memcpy+0xc>
 800bc06:	4770      	bx	lr
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc12:	4291      	cmp	r1, r2
 800bc14:	d1f9      	bne.n	800bc0a <memcpy+0xe>
 800bc16:	bd10      	pop	{r4, pc}

0800bc18 <_Balloc>:
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	b976      	cbnz	r6, 800bc40 <_Balloc+0x28>
 800bc22:	2010      	movs	r0, #16
 800bc24:	f7ff ffd0 	bl	800bbc8 <malloc>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	6260      	str	r0, [r4, #36]	; 0x24
 800bc2c:	b920      	cbnz	r0, 800bc38 <_Balloc+0x20>
 800bc2e:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <_Balloc+0x78>)
 800bc30:	4818      	ldr	r0, [pc, #96]	; (800bc94 <_Balloc+0x7c>)
 800bc32:	2166      	movs	r1, #102	; 0x66
 800bc34:	f7fe fdaa 	bl	800a78c <__assert_func>
 800bc38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc3c:	6006      	str	r6, [r0, #0]
 800bc3e:	60c6      	str	r6, [r0, #12]
 800bc40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc42:	68f3      	ldr	r3, [r6, #12]
 800bc44:	b183      	cbz	r3, 800bc68 <_Balloc+0x50>
 800bc46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc4e:	b9b8      	cbnz	r0, 800bc80 <_Balloc+0x68>
 800bc50:	2101      	movs	r1, #1
 800bc52:	fa01 f605 	lsl.w	r6, r1, r5
 800bc56:	1d72      	adds	r2, r6, #5
 800bc58:	0092      	lsls	r2, r2, #2
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 fc9d 	bl	800c59a <_calloc_r>
 800bc60:	b160      	cbz	r0, 800bc7c <_Balloc+0x64>
 800bc62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc66:	e00e      	b.n	800bc86 <_Balloc+0x6e>
 800bc68:	2221      	movs	r2, #33	; 0x21
 800bc6a:	2104      	movs	r1, #4
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f000 fc94 	bl	800c59a <_calloc_r>
 800bc72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc74:	60f0      	str	r0, [r6, #12]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e4      	bne.n	800bc46 <_Balloc+0x2e>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	6802      	ldr	r2, [r0, #0]
 800bc82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc86:	2300      	movs	r3, #0
 800bc88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc8c:	e7f7      	b.n	800bc7e <_Balloc+0x66>
 800bc8e:	bf00      	nop
 800bc90:	0800d870 	.word	0x0800d870
 800bc94:	0800db14 	.word	0x0800db14

0800bc98 <_Bfree>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	460c      	mov	r4, r1
 800bca0:	b976      	cbnz	r6, 800bcc0 <_Bfree+0x28>
 800bca2:	2010      	movs	r0, #16
 800bca4:	f7ff ff90 	bl	800bbc8 <malloc>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	6268      	str	r0, [r5, #36]	; 0x24
 800bcac:	b920      	cbnz	r0, 800bcb8 <_Bfree+0x20>
 800bcae:	4b09      	ldr	r3, [pc, #36]	; (800bcd4 <_Bfree+0x3c>)
 800bcb0:	4809      	ldr	r0, [pc, #36]	; (800bcd8 <_Bfree+0x40>)
 800bcb2:	218a      	movs	r1, #138	; 0x8a
 800bcb4:	f7fe fd6a 	bl	800a78c <__assert_func>
 800bcb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcbc:	6006      	str	r6, [r0, #0]
 800bcbe:	60c6      	str	r6, [r0, #12]
 800bcc0:	b13c      	cbz	r4, 800bcd2 <_Bfree+0x3a>
 800bcc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcc4:	6862      	ldr	r2, [r4, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bccc:	6021      	str	r1, [r4, #0]
 800bcce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}
 800bcd4:	0800d870 	.word	0x0800d870
 800bcd8:	0800db14 	.word	0x0800db14

0800bcdc <__multadd>:
 800bcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce0:	690d      	ldr	r5, [r1, #16]
 800bce2:	4607      	mov	r7, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	461e      	mov	r6, r3
 800bce8:	f101 0c14 	add.w	ip, r1, #20
 800bcec:	2000      	movs	r0, #0
 800bcee:	f8dc 3000 	ldr.w	r3, [ip]
 800bcf2:	b299      	uxth	r1, r3
 800bcf4:	fb02 6101 	mla	r1, r2, r1, r6
 800bcf8:	0c1e      	lsrs	r6, r3, #16
 800bcfa:	0c0b      	lsrs	r3, r1, #16
 800bcfc:	fb02 3306 	mla	r3, r2, r6, r3
 800bd00:	b289      	uxth	r1, r1
 800bd02:	3001      	adds	r0, #1
 800bd04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd08:	4285      	cmp	r5, r0
 800bd0a:	f84c 1b04 	str.w	r1, [ip], #4
 800bd0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd12:	dcec      	bgt.n	800bcee <__multadd+0x12>
 800bd14:	b30e      	cbz	r6, 800bd5a <__multadd+0x7e>
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	42ab      	cmp	r3, r5
 800bd1a:	dc19      	bgt.n	800bd50 <__multadd+0x74>
 800bd1c:	6861      	ldr	r1, [r4, #4]
 800bd1e:	4638      	mov	r0, r7
 800bd20:	3101      	adds	r1, #1
 800bd22:	f7ff ff79 	bl	800bc18 <_Balloc>
 800bd26:	4680      	mov	r8, r0
 800bd28:	b928      	cbnz	r0, 800bd36 <__multadd+0x5a>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <__multadd+0x84>)
 800bd2e:	480d      	ldr	r0, [pc, #52]	; (800bd64 <__multadd+0x88>)
 800bd30:	21b5      	movs	r1, #181	; 0xb5
 800bd32:	f7fe fd2b 	bl	800a78c <__assert_func>
 800bd36:	6922      	ldr	r2, [r4, #16]
 800bd38:	3202      	adds	r2, #2
 800bd3a:	f104 010c 	add.w	r1, r4, #12
 800bd3e:	0092      	lsls	r2, r2, #2
 800bd40:	300c      	adds	r0, #12
 800bd42:	f7ff ff5b 	bl	800bbfc <memcpy>
 800bd46:	4621      	mov	r1, r4
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f7ff ffa5 	bl	800bc98 <_Bfree>
 800bd4e:	4644      	mov	r4, r8
 800bd50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd54:	3501      	adds	r5, #1
 800bd56:	615e      	str	r6, [r3, #20]
 800bd58:	6125      	str	r5, [r4, #16]
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd60:	0800da89 	.word	0x0800da89
 800bd64:	0800db14 	.word	0x0800db14

0800bd68 <__s2b>:
 800bd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	4615      	mov	r5, r2
 800bd70:	461f      	mov	r7, r3
 800bd72:	2209      	movs	r2, #9
 800bd74:	3308      	adds	r3, #8
 800bd76:	4606      	mov	r6, r0
 800bd78:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	2201      	movs	r2, #1
 800bd80:	429a      	cmp	r2, r3
 800bd82:	db09      	blt.n	800bd98 <__s2b+0x30>
 800bd84:	4630      	mov	r0, r6
 800bd86:	f7ff ff47 	bl	800bc18 <_Balloc>
 800bd8a:	b940      	cbnz	r0, 800bd9e <__s2b+0x36>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	4b19      	ldr	r3, [pc, #100]	; (800bdf4 <__s2b+0x8c>)
 800bd90:	4819      	ldr	r0, [pc, #100]	; (800bdf8 <__s2b+0x90>)
 800bd92:	21ce      	movs	r1, #206	; 0xce
 800bd94:	f7fe fcfa 	bl	800a78c <__assert_func>
 800bd98:	0052      	lsls	r2, r2, #1
 800bd9a:	3101      	adds	r1, #1
 800bd9c:	e7f0      	b.n	800bd80 <__s2b+0x18>
 800bd9e:	9b08      	ldr	r3, [sp, #32]
 800bda0:	6143      	str	r3, [r0, #20]
 800bda2:	2d09      	cmp	r5, #9
 800bda4:	f04f 0301 	mov.w	r3, #1
 800bda8:	6103      	str	r3, [r0, #16]
 800bdaa:	dd16      	ble.n	800bdda <__s2b+0x72>
 800bdac:	f104 0909 	add.w	r9, r4, #9
 800bdb0:	46c8      	mov	r8, r9
 800bdb2:	442c      	add	r4, r5
 800bdb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bdb8:	4601      	mov	r1, r0
 800bdba:	3b30      	subs	r3, #48	; 0x30
 800bdbc:	220a      	movs	r2, #10
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f7ff ff8c 	bl	800bcdc <__multadd>
 800bdc4:	45a0      	cmp	r8, r4
 800bdc6:	d1f5      	bne.n	800bdb4 <__s2b+0x4c>
 800bdc8:	f1a5 0408 	sub.w	r4, r5, #8
 800bdcc:	444c      	add	r4, r9
 800bdce:	1b2d      	subs	r5, r5, r4
 800bdd0:	1963      	adds	r3, r4, r5
 800bdd2:	42bb      	cmp	r3, r7
 800bdd4:	db04      	blt.n	800bde0 <__s2b+0x78>
 800bdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdda:	340a      	adds	r4, #10
 800bddc:	2509      	movs	r5, #9
 800bdde:	e7f6      	b.n	800bdce <__s2b+0x66>
 800bde0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bde4:	4601      	mov	r1, r0
 800bde6:	3b30      	subs	r3, #48	; 0x30
 800bde8:	220a      	movs	r2, #10
 800bdea:	4630      	mov	r0, r6
 800bdec:	f7ff ff76 	bl	800bcdc <__multadd>
 800bdf0:	e7ee      	b.n	800bdd0 <__s2b+0x68>
 800bdf2:	bf00      	nop
 800bdf4:	0800da89 	.word	0x0800da89
 800bdf8:	0800db14 	.word	0x0800db14

0800bdfc <__hi0bits>:
 800bdfc:	0c03      	lsrs	r3, r0, #16
 800bdfe:	041b      	lsls	r3, r3, #16
 800be00:	b9d3      	cbnz	r3, 800be38 <__hi0bits+0x3c>
 800be02:	0400      	lsls	r0, r0, #16
 800be04:	2310      	movs	r3, #16
 800be06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be0a:	bf04      	itt	eq
 800be0c:	0200      	lsleq	r0, r0, #8
 800be0e:	3308      	addeq	r3, #8
 800be10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be14:	bf04      	itt	eq
 800be16:	0100      	lsleq	r0, r0, #4
 800be18:	3304      	addeq	r3, #4
 800be1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be1e:	bf04      	itt	eq
 800be20:	0080      	lsleq	r0, r0, #2
 800be22:	3302      	addeq	r3, #2
 800be24:	2800      	cmp	r0, #0
 800be26:	db05      	blt.n	800be34 <__hi0bits+0x38>
 800be28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be2c:	f103 0301 	add.w	r3, r3, #1
 800be30:	bf08      	it	eq
 800be32:	2320      	moveq	r3, #32
 800be34:	4618      	mov	r0, r3
 800be36:	4770      	bx	lr
 800be38:	2300      	movs	r3, #0
 800be3a:	e7e4      	b.n	800be06 <__hi0bits+0xa>

0800be3c <__lo0bits>:
 800be3c:	6803      	ldr	r3, [r0, #0]
 800be3e:	f013 0207 	ands.w	r2, r3, #7
 800be42:	4601      	mov	r1, r0
 800be44:	d00b      	beq.n	800be5e <__lo0bits+0x22>
 800be46:	07da      	lsls	r2, r3, #31
 800be48:	d423      	bmi.n	800be92 <__lo0bits+0x56>
 800be4a:	0798      	lsls	r0, r3, #30
 800be4c:	bf49      	itett	mi
 800be4e:	085b      	lsrmi	r3, r3, #1
 800be50:	089b      	lsrpl	r3, r3, #2
 800be52:	2001      	movmi	r0, #1
 800be54:	600b      	strmi	r3, [r1, #0]
 800be56:	bf5c      	itt	pl
 800be58:	600b      	strpl	r3, [r1, #0]
 800be5a:	2002      	movpl	r0, #2
 800be5c:	4770      	bx	lr
 800be5e:	b298      	uxth	r0, r3
 800be60:	b9a8      	cbnz	r0, 800be8e <__lo0bits+0x52>
 800be62:	0c1b      	lsrs	r3, r3, #16
 800be64:	2010      	movs	r0, #16
 800be66:	b2da      	uxtb	r2, r3
 800be68:	b90a      	cbnz	r2, 800be6e <__lo0bits+0x32>
 800be6a:	3008      	adds	r0, #8
 800be6c:	0a1b      	lsrs	r3, r3, #8
 800be6e:	071a      	lsls	r2, r3, #28
 800be70:	bf04      	itt	eq
 800be72:	091b      	lsreq	r3, r3, #4
 800be74:	3004      	addeq	r0, #4
 800be76:	079a      	lsls	r2, r3, #30
 800be78:	bf04      	itt	eq
 800be7a:	089b      	lsreq	r3, r3, #2
 800be7c:	3002      	addeq	r0, #2
 800be7e:	07da      	lsls	r2, r3, #31
 800be80:	d403      	bmi.n	800be8a <__lo0bits+0x4e>
 800be82:	085b      	lsrs	r3, r3, #1
 800be84:	f100 0001 	add.w	r0, r0, #1
 800be88:	d005      	beq.n	800be96 <__lo0bits+0x5a>
 800be8a:	600b      	str	r3, [r1, #0]
 800be8c:	4770      	bx	lr
 800be8e:	4610      	mov	r0, r2
 800be90:	e7e9      	b.n	800be66 <__lo0bits+0x2a>
 800be92:	2000      	movs	r0, #0
 800be94:	4770      	bx	lr
 800be96:	2020      	movs	r0, #32
 800be98:	4770      	bx	lr
	...

0800be9c <__i2b>:
 800be9c:	b510      	push	{r4, lr}
 800be9e:	460c      	mov	r4, r1
 800bea0:	2101      	movs	r1, #1
 800bea2:	f7ff feb9 	bl	800bc18 <_Balloc>
 800bea6:	4602      	mov	r2, r0
 800bea8:	b928      	cbnz	r0, 800beb6 <__i2b+0x1a>
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <__i2b+0x24>)
 800beac:	4805      	ldr	r0, [pc, #20]	; (800bec4 <__i2b+0x28>)
 800beae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800beb2:	f7fe fc6b 	bl	800a78c <__assert_func>
 800beb6:	2301      	movs	r3, #1
 800beb8:	6144      	str	r4, [r0, #20]
 800beba:	6103      	str	r3, [r0, #16]
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	bf00      	nop
 800bec0:	0800da89 	.word	0x0800da89
 800bec4:	0800db14 	.word	0x0800db14

0800bec8 <__multiply>:
 800bec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	4691      	mov	r9, r2
 800bece:	690a      	ldr	r2, [r1, #16]
 800bed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	bfb8      	it	lt
 800bed8:	460b      	movlt	r3, r1
 800beda:	460c      	mov	r4, r1
 800bedc:	bfbc      	itt	lt
 800bede:	464c      	movlt	r4, r9
 800bee0:	4699      	movlt	r9, r3
 800bee2:	6927      	ldr	r7, [r4, #16]
 800bee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bee8:	68a3      	ldr	r3, [r4, #8]
 800beea:	6861      	ldr	r1, [r4, #4]
 800beec:	eb07 060a 	add.w	r6, r7, sl
 800bef0:	42b3      	cmp	r3, r6
 800bef2:	b085      	sub	sp, #20
 800bef4:	bfb8      	it	lt
 800bef6:	3101      	addlt	r1, #1
 800bef8:	f7ff fe8e 	bl	800bc18 <_Balloc>
 800befc:	b930      	cbnz	r0, 800bf0c <__multiply+0x44>
 800befe:	4602      	mov	r2, r0
 800bf00:	4b44      	ldr	r3, [pc, #272]	; (800c014 <__multiply+0x14c>)
 800bf02:	4845      	ldr	r0, [pc, #276]	; (800c018 <__multiply+0x150>)
 800bf04:	f240 115d 	movw	r1, #349	; 0x15d
 800bf08:	f7fe fc40 	bl	800a78c <__assert_func>
 800bf0c:	f100 0514 	add.w	r5, r0, #20
 800bf10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf14:	462b      	mov	r3, r5
 800bf16:	2200      	movs	r2, #0
 800bf18:	4543      	cmp	r3, r8
 800bf1a:	d321      	bcc.n	800bf60 <__multiply+0x98>
 800bf1c:	f104 0314 	add.w	r3, r4, #20
 800bf20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf24:	f109 0314 	add.w	r3, r9, #20
 800bf28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf2c:	9202      	str	r2, [sp, #8]
 800bf2e:	1b3a      	subs	r2, r7, r4
 800bf30:	3a15      	subs	r2, #21
 800bf32:	f022 0203 	bic.w	r2, r2, #3
 800bf36:	3204      	adds	r2, #4
 800bf38:	f104 0115 	add.w	r1, r4, #21
 800bf3c:	428f      	cmp	r7, r1
 800bf3e:	bf38      	it	cc
 800bf40:	2204      	movcc	r2, #4
 800bf42:	9201      	str	r2, [sp, #4]
 800bf44:	9a02      	ldr	r2, [sp, #8]
 800bf46:	9303      	str	r3, [sp, #12]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d80c      	bhi.n	800bf66 <__multiply+0x9e>
 800bf4c:	2e00      	cmp	r6, #0
 800bf4e:	dd03      	ble.n	800bf58 <__multiply+0x90>
 800bf50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d05a      	beq.n	800c00e <__multiply+0x146>
 800bf58:	6106      	str	r6, [r0, #16]
 800bf5a:	b005      	add	sp, #20
 800bf5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf60:	f843 2b04 	str.w	r2, [r3], #4
 800bf64:	e7d8      	b.n	800bf18 <__multiply+0x50>
 800bf66:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf6a:	f1ba 0f00 	cmp.w	sl, #0
 800bf6e:	d024      	beq.n	800bfba <__multiply+0xf2>
 800bf70:	f104 0e14 	add.w	lr, r4, #20
 800bf74:	46a9      	mov	r9, r5
 800bf76:	f04f 0c00 	mov.w	ip, #0
 800bf7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf7e:	f8d9 1000 	ldr.w	r1, [r9]
 800bf82:	fa1f fb82 	uxth.w	fp, r2
 800bf86:	b289      	uxth	r1, r1
 800bf88:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf90:	f8d9 2000 	ldr.w	r2, [r9]
 800bf94:	4461      	add	r1, ip
 800bf96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf9a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bfa2:	b289      	uxth	r1, r1
 800bfa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfa8:	4577      	cmp	r7, lr
 800bfaa:	f849 1b04 	str.w	r1, [r9], #4
 800bfae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfb2:	d8e2      	bhi.n	800bf7a <__multiply+0xb2>
 800bfb4:	9a01      	ldr	r2, [sp, #4]
 800bfb6:	f845 c002 	str.w	ip, [r5, r2]
 800bfba:	9a03      	ldr	r2, [sp, #12]
 800bfbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	f1b9 0f00 	cmp.w	r9, #0
 800bfc6:	d020      	beq.n	800c00a <__multiply+0x142>
 800bfc8:	6829      	ldr	r1, [r5, #0]
 800bfca:	f104 0c14 	add.w	ip, r4, #20
 800bfce:	46ae      	mov	lr, r5
 800bfd0:	f04f 0a00 	mov.w	sl, #0
 800bfd4:	f8bc b000 	ldrh.w	fp, [ip]
 800bfd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bfdc:	fb09 220b 	mla	r2, r9, fp, r2
 800bfe0:	4492      	add	sl, r2
 800bfe2:	b289      	uxth	r1, r1
 800bfe4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bfe8:	f84e 1b04 	str.w	r1, [lr], #4
 800bfec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bff0:	f8be 1000 	ldrh.w	r1, [lr]
 800bff4:	0c12      	lsrs	r2, r2, #16
 800bff6:	fb09 1102 	mla	r1, r9, r2, r1
 800bffa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bffe:	4567      	cmp	r7, ip
 800c000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c004:	d8e6      	bhi.n	800bfd4 <__multiply+0x10c>
 800c006:	9a01      	ldr	r2, [sp, #4]
 800c008:	50a9      	str	r1, [r5, r2]
 800c00a:	3504      	adds	r5, #4
 800c00c:	e79a      	b.n	800bf44 <__multiply+0x7c>
 800c00e:	3e01      	subs	r6, #1
 800c010:	e79c      	b.n	800bf4c <__multiply+0x84>
 800c012:	bf00      	nop
 800c014:	0800da89 	.word	0x0800da89
 800c018:	0800db14 	.word	0x0800db14

0800c01c <__pow5mult>:
 800c01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c020:	4615      	mov	r5, r2
 800c022:	f012 0203 	ands.w	r2, r2, #3
 800c026:	4606      	mov	r6, r0
 800c028:	460f      	mov	r7, r1
 800c02a:	d007      	beq.n	800c03c <__pow5mult+0x20>
 800c02c:	4c25      	ldr	r4, [pc, #148]	; (800c0c4 <__pow5mult+0xa8>)
 800c02e:	3a01      	subs	r2, #1
 800c030:	2300      	movs	r3, #0
 800c032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c036:	f7ff fe51 	bl	800bcdc <__multadd>
 800c03a:	4607      	mov	r7, r0
 800c03c:	10ad      	asrs	r5, r5, #2
 800c03e:	d03d      	beq.n	800c0bc <__pow5mult+0xa0>
 800c040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c042:	b97c      	cbnz	r4, 800c064 <__pow5mult+0x48>
 800c044:	2010      	movs	r0, #16
 800c046:	f7ff fdbf 	bl	800bbc8 <malloc>
 800c04a:	4602      	mov	r2, r0
 800c04c:	6270      	str	r0, [r6, #36]	; 0x24
 800c04e:	b928      	cbnz	r0, 800c05c <__pow5mult+0x40>
 800c050:	4b1d      	ldr	r3, [pc, #116]	; (800c0c8 <__pow5mult+0xac>)
 800c052:	481e      	ldr	r0, [pc, #120]	; (800c0cc <__pow5mult+0xb0>)
 800c054:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c058:	f7fe fb98 	bl	800a78c <__assert_func>
 800c05c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c060:	6004      	str	r4, [r0, #0]
 800c062:	60c4      	str	r4, [r0, #12]
 800c064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c06c:	b94c      	cbnz	r4, 800c082 <__pow5mult+0x66>
 800c06e:	f240 2171 	movw	r1, #625	; 0x271
 800c072:	4630      	mov	r0, r6
 800c074:	f7ff ff12 	bl	800be9c <__i2b>
 800c078:	2300      	movs	r3, #0
 800c07a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c07e:	4604      	mov	r4, r0
 800c080:	6003      	str	r3, [r0, #0]
 800c082:	f04f 0900 	mov.w	r9, #0
 800c086:	07eb      	lsls	r3, r5, #31
 800c088:	d50a      	bpl.n	800c0a0 <__pow5mult+0x84>
 800c08a:	4639      	mov	r1, r7
 800c08c:	4622      	mov	r2, r4
 800c08e:	4630      	mov	r0, r6
 800c090:	f7ff ff1a 	bl	800bec8 <__multiply>
 800c094:	4639      	mov	r1, r7
 800c096:	4680      	mov	r8, r0
 800c098:	4630      	mov	r0, r6
 800c09a:	f7ff fdfd 	bl	800bc98 <_Bfree>
 800c09e:	4647      	mov	r7, r8
 800c0a0:	106d      	asrs	r5, r5, #1
 800c0a2:	d00b      	beq.n	800c0bc <__pow5mult+0xa0>
 800c0a4:	6820      	ldr	r0, [r4, #0]
 800c0a6:	b938      	cbnz	r0, 800c0b8 <__pow5mult+0x9c>
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f7ff ff0b 	bl	800bec8 <__multiply>
 800c0b2:	6020      	str	r0, [r4, #0]
 800c0b4:	f8c0 9000 	str.w	r9, [r0]
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	e7e4      	b.n	800c086 <__pow5mult+0x6a>
 800c0bc:	4638      	mov	r0, r7
 800c0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	bf00      	nop
 800c0c4:	0800dc60 	.word	0x0800dc60
 800c0c8:	0800d870 	.word	0x0800d870
 800c0cc:	0800db14 	.word	0x0800db14

0800c0d0 <__lshift>:
 800c0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	6849      	ldr	r1, [r1, #4]
 800c0d8:	6923      	ldr	r3, [r4, #16]
 800c0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0de:	68a3      	ldr	r3, [r4, #8]
 800c0e0:	4607      	mov	r7, r0
 800c0e2:	4691      	mov	r9, r2
 800c0e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0e8:	f108 0601 	add.w	r6, r8, #1
 800c0ec:	42b3      	cmp	r3, r6
 800c0ee:	db0b      	blt.n	800c108 <__lshift+0x38>
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7ff fd91 	bl	800bc18 <_Balloc>
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	b948      	cbnz	r0, 800c10e <__lshift+0x3e>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	4b2a      	ldr	r3, [pc, #168]	; (800c1a8 <__lshift+0xd8>)
 800c0fe:	482b      	ldr	r0, [pc, #172]	; (800c1ac <__lshift+0xdc>)
 800c100:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c104:	f7fe fb42 	bl	800a78c <__assert_func>
 800c108:	3101      	adds	r1, #1
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	e7ee      	b.n	800c0ec <__lshift+0x1c>
 800c10e:	2300      	movs	r3, #0
 800c110:	f100 0114 	add.w	r1, r0, #20
 800c114:	f100 0210 	add.w	r2, r0, #16
 800c118:	4618      	mov	r0, r3
 800c11a:	4553      	cmp	r3, sl
 800c11c:	db37      	blt.n	800c18e <__lshift+0xbe>
 800c11e:	6920      	ldr	r0, [r4, #16]
 800c120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c124:	f104 0314 	add.w	r3, r4, #20
 800c128:	f019 091f 	ands.w	r9, r9, #31
 800c12c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c134:	d02f      	beq.n	800c196 <__lshift+0xc6>
 800c136:	f1c9 0e20 	rsb	lr, r9, #32
 800c13a:	468a      	mov	sl, r1
 800c13c:	f04f 0c00 	mov.w	ip, #0
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	fa02 f209 	lsl.w	r2, r2, r9
 800c146:	ea42 020c 	orr.w	r2, r2, ip
 800c14a:	f84a 2b04 	str.w	r2, [sl], #4
 800c14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c152:	4298      	cmp	r0, r3
 800c154:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c158:	d8f2      	bhi.n	800c140 <__lshift+0x70>
 800c15a:	1b03      	subs	r3, r0, r4
 800c15c:	3b15      	subs	r3, #21
 800c15e:	f023 0303 	bic.w	r3, r3, #3
 800c162:	3304      	adds	r3, #4
 800c164:	f104 0215 	add.w	r2, r4, #21
 800c168:	4290      	cmp	r0, r2
 800c16a:	bf38      	it	cc
 800c16c:	2304      	movcc	r3, #4
 800c16e:	f841 c003 	str.w	ip, [r1, r3]
 800c172:	f1bc 0f00 	cmp.w	ip, #0
 800c176:	d001      	beq.n	800c17c <__lshift+0xac>
 800c178:	f108 0602 	add.w	r6, r8, #2
 800c17c:	3e01      	subs	r6, #1
 800c17e:	4638      	mov	r0, r7
 800c180:	612e      	str	r6, [r5, #16]
 800c182:	4621      	mov	r1, r4
 800c184:	f7ff fd88 	bl	800bc98 <_Bfree>
 800c188:	4628      	mov	r0, r5
 800c18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c192:	3301      	adds	r3, #1
 800c194:	e7c1      	b.n	800c11a <__lshift+0x4a>
 800c196:	3904      	subs	r1, #4
 800c198:	f853 2b04 	ldr.w	r2, [r3], #4
 800c19c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1a0:	4298      	cmp	r0, r3
 800c1a2:	d8f9      	bhi.n	800c198 <__lshift+0xc8>
 800c1a4:	e7ea      	b.n	800c17c <__lshift+0xac>
 800c1a6:	bf00      	nop
 800c1a8:	0800da89 	.word	0x0800da89
 800c1ac:	0800db14 	.word	0x0800db14

0800c1b0 <__mcmp>:
 800c1b0:	b530      	push	{r4, r5, lr}
 800c1b2:	6902      	ldr	r2, [r0, #16]
 800c1b4:	690c      	ldr	r4, [r1, #16]
 800c1b6:	1b12      	subs	r2, r2, r4
 800c1b8:	d10e      	bne.n	800c1d8 <__mcmp+0x28>
 800c1ba:	f100 0314 	add.w	r3, r0, #20
 800c1be:	3114      	adds	r1, #20
 800c1c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c1cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c1d0:	42a5      	cmp	r5, r4
 800c1d2:	d003      	beq.n	800c1dc <__mcmp+0x2c>
 800c1d4:	d305      	bcc.n	800c1e2 <__mcmp+0x32>
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	4610      	mov	r0, r2
 800c1da:	bd30      	pop	{r4, r5, pc}
 800c1dc:	4283      	cmp	r3, r0
 800c1de:	d3f3      	bcc.n	800c1c8 <__mcmp+0x18>
 800c1e0:	e7fa      	b.n	800c1d8 <__mcmp+0x28>
 800c1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e6:	e7f7      	b.n	800c1d8 <__mcmp+0x28>

0800c1e8 <__mdiff>:
 800c1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	460c      	mov	r4, r1
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	4690      	mov	r8, r2
 800c1f6:	f7ff ffdb 	bl	800c1b0 <__mcmp>
 800c1fa:	1e05      	subs	r5, r0, #0
 800c1fc:	d110      	bne.n	800c220 <__mdiff+0x38>
 800c1fe:	4629      	mov	r1, r5
 800c200:	4630      	mov	r0, r6
 800c202:	f7ff fd09 	bl	800bc18 <_Balloc>
 800c206:	b930      	cbnz	r0, 800c216 <__mdiff+0x2e>
 800c208:	4b3a      	ldr	r3, [pc, #232]	; (800c2f4 <__mdiff+0x10c>)
 800c20a:	4602      	mov	r2, r0
 800c20c:	f240 2132 	movw	r1, #562	; 0x232
 800c210:	4839      	ldr	r0, [pc, #228]	; (800c2f8 <__mdiff+0x110>)
 800c212:	f7fe fabb 	bl	800a78c <__assert_func>
 800c216:	2301      	movs	r3, #1
 800c218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c220:	bfa4      	itt	ge
 800c222:	4643      	movge	r3, r8
 800c224:	46a0      	movge	r8, r4
 800c226:	4630      	mov	r0, r6
 800c228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c22c:	bfa6      	itte	ge
 800c22e:	461c      	movge	r4, r3
 800c230:	2500      	movge	r5, #0
 800c232:	2501      	movlt	r5, #1
 800c234:	f7ff fcf0 	bl	800bc18 <_Balloc>
 800c238:	b920      	cbnz	r0, 800c244 <__mdiff+0x5c>
 800c23a:	4b2e      	ldr	r3, [pc, #184]	; (800c2f4 <__mdiff+0x10c>)
 800c23c:	4602      	mov	r2, r0
 800c23e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c242:	e7e5      	b.n	800c210 <__mdiff+0x28>
 800c244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c248:	6926      	ldr	r6, [r4, #16]
 800c24a:	60c5      	str	r5, [r0, #12]
 800c24c:	f104 0914 	add.w	r9, r4, #20
 800c250:	f108 0514 	add.w	r5, r8, #20
 800c254:	f100 0e14 	add.w	lr, r0, #20
 800c258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c25c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c260:	f108 0210 	add.w	r2, r8, #16
 800c264:	46f2      	mov	sl, lr
 800c266:	2100      	movs	r1, #0
 800c268:	f859 3b04 	ldr.w	r3, [r9], #4
 800c26c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c270:	fa1f f883 	uxth.w	r8, r3
 800c274:	fa11 f18b 	uxtah	r1, r1, fp
 800c278:	0c1b      	lsrs	r3, r3, #16
 800c27a:	eba1 0808 	sub.w	r8, r1, r8
 800c27e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c286:	fa1f f888 	uxth.w	r8, r8
 800c28a:	1419      	asrs	r1, r3, #16
 800c28c:	454e      	cmp	r6, r9
 800c28e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c292:	f84a 3b04 	str.w	r3, [sl], #4
 800c296:	d8e7      	bhi.n	800c268 <__mdiff+0x80>
 800c298:	1b33      	subs	r3, r6, r4
 800c29a:	3b15      	subs	r3, #21
 800c29c:	f023 0303 	bic.w	r3, r3, #3
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	3415      	adds	r4, #21
 800c2a4:	42a6      	cmp	r6, r4
 800c2a6:	bf38      	it	cc
 800c2a8:	2304      	movcc	r3, #4
 800c2aa:	441d      	add	r5, r3
 800c2ac:	4473      	add	r3, lr
 800c2ae:	469e      	mov	lr, r3
 800c2b0:	462e      	mov	r6, r5
 800c2b2:	4566      	cmp	r6, ip
 800c2b4:	d30e      	bcc.n	800c2d4 <__mdiff+0xec>
 800c2b6:	f10c 0203 	add.w	r2, ip, #3
 800c2ba:	1b52      	subs	r2, r2, r5
 800c2bc:	f022 0203 	bic.w	r2, r2, #3
 800c2c0:	3d03      	subs	r5, #3
 800c2c2:	45ac      	cmp	ip, r5
 800c2c4:	bf38      	it	cc
 800c2c6:	2200      	movcc	r2, #0
 800c2c8:	441a      	add	r2, r3
 800c2ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c2ce:	b17b      	cbz	r3, 800c2f0 <__mdiff+0x108>
 800c2d0:	6107      	str	r7, [r0, #16]
 800c2d2:	e7a3      	b.n	800c21c <__mdiff+0x34>
 800c2d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c2d8:	fa11 f288 	uxtah	r2, r1, r8
 800c2dc:	1414      	asrs	r4, r2, #16
 800c2de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c2e2:	b292      	uxth	r2, r2
 800c2e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c2e8:	f84e 2b04 	str.w	r2, [lr], #4
 800c2ec:	1421      	asrs	r1, r4, #16
 800c2ee:	e7e0      	b.n	800c2b2 <__mdiff+0xca>
 800c2f0:	3f01      	subs	r7, #1
 800c2f2:	e7ea      	b.n	800c2ca <__mdiff+0xe2>
 800c2f4:	0800da89 	.word	0x0800da89
 800c2f8:	0800db14 	.word	0x0800db14

0800c2fc <__ulp>:
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	ed8d 0b00 	vstr	d0, [sp]
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	4912      	ldr	r1, [pc, #72]	; (800c350 <__ulp+0x54>)
 800c306:	4019      	ands	r1, r3
 800c308:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c30c:	2900      	cmp	r1, #0
 800c30e:	dd05      	ble.n	800c31c <__ulp+0x20>
 800c310:	2200      	movs	r2, #0
 800c312:	460b      	mov	r3, r1
 800c314:	ec43 2b10 	vmov	d0, r2, r3
 800c318:	b002      	add	sp, #8
 800c31a:	4770      	bx	lr
 800c31c:	4249      	negs	r1, r1
 800c31e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c322:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c326:	f04f 0200 	mov.w	r2, #0
 800c32a:	f04f 0300 	mov.w	r3, #0
 800c32e:	da04      	bge.n	800c33a <__ulp+0x3e>
 800c330:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c334:	fa41 f300 	asr.w	r3, r1, r0
 800c338:	e7ec      	b.n	800c314 <__ulp+0x18>
 800c33a:	f1a0 0114 	sub.w	r1, r0, #20
 800c33e:	291e      	cmp	r1, #30
 800c340:	bfda      	itte	le
 800c342:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c346:	fa20 f101 	lsrle.w	r1, r0, r1
 800c34a:	2101      	movgt	r1, #1
 800c34c:	460a      	mov	r2, r1
 800c34e:	e7e1      	b.n	800c314 <__ulp+0x18>
 800c350:	7ff00000 	.word	0x7ff00000

0800c354 <__b2d>:
 800c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c356:	6905      	ldr	r5, [r0, #16]
 800c358:	f100 0714 	add.w	r7, r0, #20
 800c35c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c360:	1f2e      	subs	r6, r5, #4
 800c362:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c366:	4620      	mov	r0, r4
 800c368:	f7ff fd48 	bl	800bdfc <__hi0bits>
 800c36c:	f1c0 0320 	rsb	r3, r0, #32
 800c370:	280a      	cmp	r0, #10
 800c372:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c3f0 <__b2d+0x9c>
 800c376:	600b      	str	r3, [r1, #0]
 800c378:	dc14      	bgt.n	800c3a4 <__b2d+0x50>
 800c37a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c37e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c382:	42b7      	cmp	r7, r6
 800c384:	ea41 030c 	orr.w	r3, r1, ip
 800c388:	bf34      	ite	cc
 800c38a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c38e:	2100      	movcs	r1, #0
 800c390:	3015      	adds	r0, #21
 800c392:	fa04 f000 	lsl.w	r0, r4, r0
 800c396:	fa21 f10e 	lsr.w	r1, r1, lr
 800c39a:	ea40 0201 	orr.w	r2, r0, r1
 800c39e:	ec43 2b10 	vmov	d0, r2, r3
 800c3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a4:	42b7      	cmp	r7, r6
 800c3a6:	bf3a      	itte	cc
 800c3a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c3ac:	f1a5 0608 	subcc.w	r6, r5, #8
 800c3b0:	2100      	movcs	r1, #0
 800c3b2:	380b      	subs	r0, #11
 800c3b4:	d017      	beq.n	800c3e6 <__b2d+0x92>
 800c3b6:	f1c0 0c20 	rsb	ip, r0, #32
 800c3ba:	fa04 f500 	lsl.w	r5, r4, r0
 800c3be:	42be      	cmp	r6, r7
 800c3c0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c3c4:	ea45 0504 	orr.w	r5, r5, r4
 800c3c8:	bf8c      	ite	hi
 800c3ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c3ce:	2400      	movls	r4, #0
 800c3d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c3d4:	fa01 f000 	lsl.w	r0, r1, r0
 800c3d8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c3dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c3e0:	ea40 0204 	orr.w	r2, r0, r4
 800c3e4:	e7db      	b.n	800c39e <__b2d+0x4a>
 800c3e6:	ea44 030c 	orr.w	r3, r4, ip
 800c3ea:	460a      	mov	r2, r1
 800c3ec:	e7d7      	b.n	800c39e <__b2d+0x4a>
 800c3ee:	bf00      	nop
 800c3f0:	3ff00000 	.word	0x3ff00000

0800c3f4 <__d2b>:
 800c3f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3f8:	4689      	mov	r9, r1
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	ec57 6b10 	vmov	r6, r7, d0
 800c400:	4690      	mov	r8, r2
 800c402:	f7ff fc09 	bl	800bc18 <_Balloc>
 800c406:	4604      	mov	r4, r0
 800c408:	b930      	cbnz	r0, 800c418 <__d2b+0x24>
 800c40a:	4602      	mov	r2, r0
 800c40c:	4b25      	ldr	r3, [pc, #148]	; (800c4a4 <__d2b+0xb0>)
 800c40e:	4826      	ldr	r0, [pc, #152]	; (800c4a8 <__d2b+0xb4>)
 800c410:	f240 310a 	movw	r1, #778	; 0x30a
 800c414:	f7fe f9ba 	bl	800a78c <__assert_func>
 800c418:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c41c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c420:	bb35      	cbnz	r5, 800c470 <__d2b+0x7c>
 800c422:	2e00      	cmp	r6, #0
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	d028      	beq.n	800c47a <__d2b+0x86>
 800c428:	4668      	mov	r0, sp
 800c42a:	9600      	str	r6, [sp, #0]
 800c42c:	f7ff fd06 	bl	800be3c <__lo0bits>
 800c430:	9900      	ldr	r1, [sp, #0]
 800c432:	b300      	cbz	r0, 800c476 <__d2b+0x82>
 800c434:	9a01      	ldr	r2, [sp, #4]
 800c436:	f1c0 0320 	rsb	r3, r0, #32
 800c43a:	fa02 f303 	lsl.w	r3, r2, r3
 800c43e:	430b      	orrs	r3, r1
 800c440:	40c2      	lsrs	r2, r0
 800c442:	6163      	str	r3, [r4, #20]
 800c444:	9201      	str	r2, [sp, #4]
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	61a3      	str	r3, [r4, #24]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	bf14      	ite	ne
 800c44e:	2202      	movne	r2, #2
 800c450:	2201      	moveq	r2, #1
 800c452:	6122      	str	r2, [r4, #16]
 800c454:	b1d5      	cbz	r5, 800c48c <__d2b+0x98>
 800c456:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c45a:	4405      	add	r5, r0
 800c45c:	f8c9 5000 	str.w	r5, [r9]
 800c460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c464:	f8c8 0000 	str.w	r0, [r8]
 800c468:	4620      	mov	r0, r4
 800c46a:	b003      	add	sp, #12
 800c46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c474:	e7d5      	b.n	800c422 <__d2b+0x2e>
 800c476:	6161      	str	r1, [r4, #20]
 800c478:	e7e5      	b.n	800c446 <__d2b+0x52>
 800c47a:	a801      	add	r0, sp, #4
 800c47c:	f7ff fcde 	bl	800be3c <__lo0bits>
 800c480:	9b01      	ldr	r3, [sp, #4]
 800c482:	6163      	str	r3, [r4, #20]
 800c484:	2201      	movs	r2, #1
 800c486:	6122      	str	r2, [r4, #16]
 800c488:	3020      	adds	r0, #32
 800c48a:	e7e3      	b.n	800c454 <__d2b+0x60>
 800c48c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c494:	f8c9 0000 	str.w	r0, [r9]
 800c498:	6918      	ldr	r0, [r3, #16]
 800c49a:	f7ff fcaf 	bl	800bdfc <__hi0bits>
 800c49e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4a2:	e7df      	b.n	800c464 <__d2b+0x70>
 800c4a4:	0800da89 	.word	0x0800da89
 800c4a8:	0800db14 	.word	0x0800db14

0800c4ac <__ratio>:
 800c4ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	4688      	mov	r8, r1
 800c4b2:	4669      	mov	r1, sp
 800c4b4:	4681      	mov	r9, r0
 800c4b6:	f7ff ff4d 	bl	800c354 <__b2d>
 800c4ba:	a901      	add	r1, sp, #4
 800c4bc:	4640      	mov	r0, r8
 800c4be:	ec55 4b10 	vmov	r4, r5, d0
 800c4c2:	f7ff ff47 	bl	800c354 <__b2d>
 800c4c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c4ce:	eba3 0c02 	sub.w	ip, r3, r2
 800c4d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c4d6:	1a9b      	subs	r3, r3, r2
 800c4d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c4dc:	ec51 0b10 	vmov	r0, r1, d0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	bfd6      	itet	le
 800c4e4:	460a      	movle	r2, r1
 800c4e6:	462a      	movgt	r2, r5
 800c4e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c4ec:	468b      	mov	fp, r1
 800c4ee:	462f      	mov	r7, r5
 800c4f0:	bfd4      	ite	le
 800c4f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c4f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	ee10 2a10 	vmov	r2, s0
 800c500:	465b      	mov	r3, fp
 800c502:	4639      	mov	r1, r7
 800c504:	f7f4 f9d2 	bl	80008ac <__aeabi_ddiv>
 800c508:	ec41 0b10 	vmov	d0, r0, r1
 800c50c:	b003      	add	sp, #12
 800c50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c512 <__copybits>:
 800c512:	3901      	subs	r1, #1
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	1149      	asrs	r1, r1, #5
 800c518:	6914      	ldr	r4, [r2, #16]
 800c51a:	3101      	adds	r1, #1
 800c51c:	f102 0314 	add.w	r3, r2, #20
 800c520:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c524:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c528:	1f05      	subs	r5, r0, #4
 800c52a:	42a3      	cmp	r3, r4
 800c52c:	d30c      	bcc.n	800c548 <__copybits+0x36>
 800c52e:	1aa3      	subs	r3, r4, r2
 800c530:	3b11      	subs	r3, #17
 800c532:	f023 0303 	bic.w	r3, r3, #3
 800c536:	3211      	adds	r2, #17
 800c538:	42a2      	cmp	r2, r4
 800c53a:	bf88      	it	hi
 800c53c:	2300      	movhi	r3, #0
 800c53e:	4418      	add	r0, r3
 800c540:	2300      	movs	r3, #0
 800c542:	4288      	cmp	r0, r1
 800c544:	d305      	bcc.n	800c552 <__copybits+0x40>
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	f853 6b04 	ldr.w	r6, [r3], #4
 800c54c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c550:	e7eb      	b.n	800c52a <__copybits+0x18>
 800c552:	f840 3b04 	str.w	r3, [r0], #4
 800c556:	e7f4      	b.n	800c542 <__copybits+0x30>

0800c558 <__any_on>:
 800c558:	f100 0214 	add.w	r2, r0, #20
 800c55c:	6900      	ldr	r0, [r0, #16]
 800c55e:	114b      	asrs	r3, r1, #5
 800c560:	4298      	cmp	r0, r3
 800c562:	b510      	push	{r4, lr}
 800c564:	db11      	blt.n	800c58a <__any_on+0x32>
 800c566:	dd0a      	ble.n	800c57e <__any_on+0x26>
 800c568:	f011 011f 	ands.w	r1, r1, #31
 800c56c:	d007      	beq.n	800c57e <__any_on+0x26>
 800c56e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c572:	fa24 f001 	lsr.w	r0, r4, r1
 800c576:	fa00 f101 	lsl.w	r1, r0, r1
 800c57a:	428c      	cmp	r4, r1
 800c57c:	d10b      	bne.n	800c596 <__any_on+0x3e>
 800c57e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c582:	4293      	cmp	r3, r2
 800c584:	d803      	bhi.n	800c58e <__any_on+0x36>
 800c586:	2000      	movs	r0, #0
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	4603      	mov	r3, r0
 800c58c:	e7f7      	b.n	800c57e <__any_on+0x26>
 800c58e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c592:	2900      	cmp	r1, #0
 800c594:	d0f5      	beq.n	800c582 <__any_on+0x2a>
 800c596:	2001      	movs	r0, #1
 800c598:	e7f6      	b.n	800c588 <__any_on+0x30>

0800c59a <_calloc_r>:
 800c59a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c59c:	fba1 2402 	umull	r2, r4, r1, r2
 800c5a0:	b94c      	cbnz	r4, 800c5b6 <_calloc_r+0x1c>
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	9201      	str	r2, [sp, #4]
 800c5a6:	f000 f87b 	bl	800c6a0 <_malloc_r>
 800c5aa:	9a01      	ldr	r2, [sp, #4]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	b930      	cbnz	r0, 800c5be <_calloc_r+0x24>
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	b003      	add	sp, #12
 800c5b4:	bd30      	pop	{r4, r5, pc}
 800c5b6:	220c      	movs	r2, #12
 800c5b8:	6002      	str	r2, [r0, #0]
 800c5ba:	2500      	movs	r5, #0
 800c5bc:	e7f8      	b.n	800c5b0 <_calloc_r+0x16>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	f7fc fb0e 	bl	8008be0 <memset>
 800c5c4:	e7f4      	b.n	800c5b0 <_calloc_r+0x16>
	...

0800c5c8 <_free_r>:
 800c5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ca:	2900      	cmp	r1, #0
 800c5cc:	d044      	beq.n	800c658 <_free_r+0x90>
 800c5ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5d2:	9001      	str	r0, [sp, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f1a1 0404 	sub.w	r4, r1, #4
 800c5da:	bfb8      	it	lt
 800c5dc:	18e4      	addlt	r4, r4, r3
 800c5de:	f000 fec7 	bl	800d370 <__malloc_lock>
 800c5e2:	4a1e      	ldr	r2, [pc, #120]	; (800c65c <_free_r+0x94>)
 800c5e4:	9801      	ldr	r0, [sp, #4]
 800c5e6:	6813      	ldr	r3, [r2, #0]
 800c5e8:	b933      	cbnz	r3, 800c5f8 <_free_r+0x30>
 800c5ea:	6063      	str	r3, [r4, #4]
 800c5ec:	6014      	str	r4, [r2, #0]
 800c5ee:	b003      	add	sp, #12
 800c5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5f4:	f000 bec2 	b.w	800d37c <__malloc_unlock>
 800c5f8:	42a3      	cmp	r3, r4
 800c5fa:	d908      	bls.n	800c60e <_free_r+0x46>
 800c5fc:	6825      	ldr	r5, [r4, #0]
 800c5fe:	1961      	adds	r1, r4, r5
 800c600:	428b      	cmp	r3, r1
 800c602:	bf01      	itttt	eq
 800c604:	6819      	ldreq	r1, [r3, #0]
 800c606:	685b      	ldreq	r3, [r3, #4]
 800c608:	1949      	addeq	r1, r1, r5
 800c60a:	6021      	streq	r1, [r4, #0]
 800c60c:	e7ed      	b.n	800c5ea <_free_r+0x22>
 800c60e:	461a      	mov	r2, r3
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	b10b      	cbz	r3, 800c618 <_free_r+0x50>
 800c614:	42a3      	cmp	r3, r4
 800c616:	d9fa      	bls.n	800c60e <_free_r+0x46>
 800c618:	6811      	ldr	r1, [r2, #0]
 800c61a:	1855      	adds	r5, r2, r1
 800c61c:	42a5      	cmp	r5, r4
 800c61e:	d10b      	bne.n	800c638 <_free_r+0x70>
 800c620:	6824      	ldr	r4, [r4, #0]
 800c622:	4421      	add	r1, r4
 800c624:	1854      	adds	r4, r2, r1
 800c626:	42a3      	cmp	r3, r4
 800c628:	6011      	str	r1, [r2, #0]
 800c62a:	d1e0      	bne.n	800c5ee <_free_r+0x26>
 800c62c:	681c      	ldr	r4, [r3, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	6053      	str	r3, [r2, #4]
 800c632:	4421      	add	r1, r4
 800c634:	6011      	str	r1, [r2, #0]
 800c636:	e7da      	b.n	800c5ee <_free_r+0x26>
 800c638:	d902      	bls.n	800c640 <_free_r+0x78>
 800c63a:	230c      	movs	r3, #12
 800c63c:	6003      	str	r3, [r0, #0]
 800c63e:	e7d6      	b.n	800c5ee <_free_r+0x26>
 800c640:	6825      	ldr	r5, [r4, #0]
 800c642:	1961      	adds	r1, r4, r5
 800c644:	428b      	cmp	r3, r1
 800c646:	bf04      	itt	eq
 800c648:	6819      	ldreq	r1, [r3, #0]
 800c64a:	685b      	ldreq	r3, [r3, #4]
 800c64c:	6063      	str	r3, [r4, #4]
 800c64e:	bf04      	itt	eq
 800c650:	1949      	addeq	r1, r1, r5
 800c652:	6021      	streq	r1, [r4, #0]
 800c654:	6054      	str	r4, [r2, #4]
 800c656:	e7ca      	b.n	800c5ee <_free_r+0x26>
 800c658:	b003      	add	sp, #12
 800c65a:	bd30      	pop	{r4, r5, pc}
 800c65c:	200040d8 	.word	0x200040d8

0800c660 <sbrk_aligned>:
 800c660:	b570      	push	{r4, r5, r6, lr}
 800c662:	4e0e      	ldr	r6, [pc, #56]	; (800c69c <sbrk_aligned+0x3c>)
 800c664:	460c      	mov	r4, r1
 800c666:	6831      	ldr	r1, [r6, #0]
 800c668:	4605      	mov	r5, r0
 800c66a:	b911      	cbnz	r1, 800c672 <sbrk_aligned+0x12>
 800c66c:	f000 fb4c 	bl	800cd08 <_sbrk_r>
 800c670:	6030      	str	r0, [r6, #0]
 800c672:	4621      	mov	r1, r4
 800c674:	4628      	mov	r0, r5
 800c676:	f000 fb47 	bl	800cd08 <_sbrk_r>
 800c67a:	1c43      	adds	r3, r0, #1
 800c67c:	d00a      	beq.n	800c694 <sbrk_aligned+0x34>
 800c67e:	1cc4      	adds	r4, r0, #3
 800c680:	f024 0403 	bic.w	r4, r4, #3
 800c684:	42a0      	cmp	r0, r4
 800c686:	d007      	beq.n	800c698 <sbrk_aligned+0x38>
 800c688:	1a21      	subs	r1, r4, r0
 800c68a:	4628      	mov	r0, r5
 800c68c:	f000 fb3c 	bl	800cd08 <_sbrk_r>
 800c690:	3001      	adds	r0, #1
 800c692:	d101      	bne.n	800c698 <sbrk_aligned+0x38>
 800c694:	f04f 34ff 	mov.w	r4, #4294967295
 800c698:	4620      	mov	r0, r4
 800c69a:	bd70      	pop	{r4, r5, r6, pc}
 800c69c:	200040dc 	.word	0x200040dc

0800c6a0 <_malloc_r>:
 800c6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a4:	1ccd      	adds	r5, r1, #3
 800c6a6:	f025 0503 	bic.w	r5, r5, #3
 800c6aa:	3508      	adds	r5, #8
 800c6ac:	2d0c      	cmp	r5, #12
 800c6ae:	bf38      	it	cc
 800c6b0:	250c      	movcc	r5, #12
 800c6b2:	2d00      	cmp	r5, #0
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	db01      	blt.n	800c6bc <_malloc_r+0x1c>
 800c6b8:	42a9      	cmp	r1, r5
 800c6ba:	d905      	bls.n	800c6c8 <_malloc_r+0x28>
 800c6bc:	230c      	movs	r3, #12
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	2600      	movs	r6, #0
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c8:	4e2e      	ldr	r6, [pc, #184]	; (800c784 <_malloc_r+0xe4>)
 800c6ca:	f000 fe51 	bl	800d370 <__malloc_lock>
 800c6ce:	6833      	ldr	r3, [r6, #0]
 800c6d0:	461c      	mov	r4, r3
 800c6d2:	bb34      	cbnz	r4, 800c722 <_malloc_r+0x82>
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	f7ff ffc2 	bl	800c660 <sbrk_aligned>
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	4604      	mov	r4, r0
 800c6e0:	d14d      	bne.n	800c77e <_malloc_r+0xde>
 800c6e2:	6834      	ldr	r4, [r6, #0]
 800c6e4:	4626      	mov	r6, r4
 800c6e6:	2e00      	cmp	r6, #0
 800c6e8:	d140      	bne.n	800c76c <_malloc_r+0xcc>
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	eb04 0803 	add.w	r8, r4, r3
 800c6f4:	f000 fb08 	bl	800cd08 <_sbrk_r>
 800c6f8:	4580      	cmp	r8, r0
 800c6fa:	d13a      	bne.n	800c772 <_malloc_r+0xd2>
 800c6fc:	6821      	ldr	r1, [r4, #0]
 800c6fe:	3503      	adds	r5, #3
 800c700:	1a6d      	subs	r5, r5, r1
 800c702:	f025 0503 	bic.w	r5, r5, #3
 800c706:	3508      	adds	r5, #8
 800c708:	2d0c      	cmp	r5, #12
 800c70a:	bf38      	it	cc
 800c70c:	250c      	movcc	r5, #12
 800c70e:	4629      	mov	r1, r5
 800c710:	4638      	mov	r0, r7
 800c712:	f7ff ffa5 	bl	800c660 <sbrk_aligned>
 800c716:	3001      	adds	r0, #1
 800c718:	d02b      	beq.n	800c772 <_malloc_r+0xd2>
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	442b      	add	r3, r5
 800c71e:	6023      	str	r3, [r4, #0]
 800c720:	e00e      	b.n	800c740 <_malloc_r+0xa0>
 800c722:	6822      	ldr	r2, [r4, #0]
 800c724:	1b52      	subs	r2, r2, r5
 800c726:	d41e      	bmi.n	800c766 <_malloc_r+0xc6>
 800c728:	2a0b      	cmp	r2, #11
 800c72a:	d916      	bls.n	800c75a <_malloc_r+0xba>
 800c72c:	1961      	adds	r1, r4, r5
 800c72e:	42a3      	cmp	r3, r4
 800c730:	6025      	str	r5, [r4, #0]
 800c732:	bf18      	it	ne
 800c734:	6059      	strne	r1, [r3, #4]
 800c736:	6863      	ldr	r3, [r4, #4]
 800c738:	bf08      	it	eq
 800c73a:	6031      	streq	r1, [r6, #0]
 800c73c:	5162      	str	r2, [r4, r5]
 800c73e:	604b      	str	r3, [r1, #4]
 800c740:	4638      	mov	r0, r7
 800c742:	f104 060b 	add.w	r6, r4, #11
 800c746:	f000 fe19 	bl	800d37c <__malloc_unlock>
 800c74a:	f026 0607 	bic.w	r6, r6, #7
 800c74e:	1d23      	adds	r3, r4, #4
 800c750:	1af2      	subs	r2, r6, r3
 800c752:	d0b6      	beq.n	800c6c2 <_malloc_r+0x22>
 800c754:	1b9b      	subs	r3, r3, r6
 800c756:	50a3      	str	r3, [r4, r2]
 800c758:	e7b3      	b.n	800c6c2 <_malloc_r+0x22>
 800c75a:	6862      	ldr	r2, [r4, #4]
 800c75c:	42a3      	cmp	r3, r4
 800c75e:	bf0c      	ite	eq
 800c760:	6032      	streq	r2, [r6, #0]
 800c762:	605a      	strne	r2, [r3, #4]
 800c764:	e7ec      	b.n	800c740 <_malloc_r+0xa0>
 800c766:	4623      	mov	r3, r4
 800c768:	6864      	ldr	r4, [r4, #4]
 800c76a:	e7b2      	b.n	800c6d2 <_malloc_r+0x32>
 800c76c:	4634      	mov	r4, r6
 800c76e:	6876      	ldr	r6, [r6, #4]
 800c770:	e7b9      	b.n	800c6e6 <_malloc_r+0x46>
 800c772:	230c      	movs	r3, #12
 800c774:	603b      	str	r3, [r7, #0]
 800c776:	4638      	mov	r0, r7
 800c778:	f000 fe00 	bl	800d37c <__malloc_unlock>
 800c77c:	e7a1      	b.n	800c6c2 <_malloc_r+0x22>
 800c77e:	6025      	str	r5, [r4, #0]
 800c780:	e7de      	b.n	800c740 <_malloc_r+0xa0>
 800c782:	bf00      	nop
 800c784:	200040d8 	.word	0x200040d8

0800c788 <__ssputs_r>:
 800c788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c78c:	688e      	ldr	r6, [r1, #8]
 800c78e:	429e      	cmp	r6, r3
 800c790:	4682      	mov	sl, r0
 800c792:	460c      	mov	r4, r1
 800c794:	4690      	mov	r8, r2
 800c796:	461f      	mov	r7, r3
 800c798:	d838      	bhi.n	800c80c <__ssputs_r+0x84>
 800c79a:	898a      	ldrh	r2, [r1, #12]
 800c79c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7a0:	d032      	beq.n	800c808 <__ssputs_r+0x80>
 800c7a2:	6825      	ldr	r5, [r4, #0]
 800c7a4:	6909      	ldr	r1, [r1, #16]
 800c7a6:	eba5 0901 	sub.w	r9, r5, r1
 800c7aa:	6965      	ldr	r5, [r4, #20]
 800c7ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	444b      	add	r3, r9
 800c7b8:	106d      	asrs	r5, r5, #1
 800c7ba:	429d      	cmp	r5, r3
 800c7bc:	bf38      	it	cc
 800c7be:	461d      	movcc	r5, r3
 800c7c0:	0553      	lsls	r3, r2, #21
 800c7c2:	d531      	bpl.n	800c828 <__ssputs_r+0xa0>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7ff ff6b 	bl	800c6a0 <_malloc_r>
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	b950      	cbnz	r0, 800c7e4 <__ssputs_r+0x5c>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	f8ca 3000 	str.w	r3, [sl]
 800c7d4:	89a3      	ldrh	r3, [r4, #12]
 800c7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7da:	81a3      	strh	r3, [r4, #12]
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e4:	6921      	ldr	r1, [r4, #16]
 800c7e6:	464a      	mov	r2, r9
 800c7e8:	f7ff fa08 	bl	800bbfc <memcpy>
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7f6:	81a3      	strh	r3, [r4, #12]
 800c7f8:	6126      	str	r6, [r4, #16]
 800c7fa:	6165      	str	r5, [r4, #20]
 800c7fc:	444e      	add	r6, r9
 800c7fe:	eba5 0509 	sub.w	r5, r5, r9
 800c802:	6026      	str	r6, [r4, #0]
 800c804:	60a5      	str	r5, [r4, #8]
 800c806:	463e      	mov	r6, r7
 800c808:	42be      	cmp	r6, r7
 800c80a:	d900      	bls.n	800c80e <__ssputs_r+0x86>
 800c80c:	463e      	mov	r6, r7
 800c80e:	6820      	ldr	r0, [r4, #0]
 800c810:	4632      	mov	r2, r6
 800c812:	4641      	mov	r1, r8
 800c814:	f000 fd92 	bl	800d33c <memmove>
 800c818:	68a3      	ldr	r3, [r4, #8]
 800c81a:	1b9b      	subs	r3, r3, r6
 800c81c:	60a3      	str	r3, [r4, #8]
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	4433      	add	r3, r6
 800c822:	6023      	str	r3, [r4, #0]
 800c824:	2000      	movs	r0, #0
 800c826:	e7db      	b.n	800c7e0 <__ssputs_r+0x58>
 800c828:	462a      	mov	r2, r5
 800c82a:	f000 fdad 	bl	800d388 <_realloc_r>
 800c82e:	4606      	mov	r6, r0
 800c830:	2800      	cmp	r0, #0
 800c832:	d1e1      	bne.n	800c7f8 <__ssputs_r+0x70>
 800c834:	6921      	ldr	r1, [r4, #16]
 800c836:	4650      	mov	r0, sl
 800c838:	f7ff fec6 	bl	800c5c8 <_free_r>
 800c83c:	e7c7      	b.n	800c7ce <__ssputs_r+0x46>
	...

0800c840 <_svfiprintf_r>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	4698      	mov	r8, r3
 800c846:	898b      	ldrh	r3, [r1, #12]
 800c848:	061b      	lsls	r3, r3, #24
 800c84a:	b09d      	sub	sp, #116	; 0x74
 800c84c:	4607      	mov	r7, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	4614      	mov	r4, r2
 800c852:	d50e      	bpl.n	800c872 <_svfiprintf_r+0x32>
 800c854:	690b      	ldr	r3, [r1, #16]
 800c856:	b963      	cbnz	r3, 800c872 <_svfiprintf_r+0x32>
 800c858:	2140      	movs	r1, #64	; 0x40
 800c85a:	f7ff ff21 	bl	800c6a0 <_malloc_r>
 800c85e:	6028      	str	r0, [r5, #0]
 800c860:	6128      	str	r0, [r5, #16]
 800c862:	b920      	cbnz	r0, 800c86e <_svfiprintf_r+0x2e>
 800c864:	230c      	movs	r3, #12
 800c866:	603b      	str	r3, [r7, #0]
 800c868:	f04f 30ff 	mov.w	r0, #4294967295
 800c86c:	e0d1      	b.n	800ca12 <_svfiprintf_r+0x1d2>
 800c86e:	2340      	movs	r3, #64	; 0x40
 800c870:	616b      	str	r3, [r5, #20]
 800c872:	2300      	movs	r3, #0
 800c874:	9309      	str	r3, [sp, #36]	; 0x24
 800c876:	2320      	movs	r3, #32
 800c878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c87c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c880:	2330      	movs	r3, #48	; 0x30
 800c882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca2c <_svfiprintf_r+0x1ec>
 800c886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c88a:	f04f 0901 	mov.w	r9, #1
 800c88e:	4623      	mov	r3, r4
 800c890:	469a      	mov	sl, r3
 800c892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c896:	b10a      	cbz	r2, 800c89c <_svfiprintf_r+0x5c>
 800c898:	2a25      	cmp	r2, #37	; 0x25
 800c89a:	d1f9      	bne.n	800c890 <_svfiprintf_r+0x50>
 800c89c:	ebba 0b04 	subs.w	fp, sl, r4
 800c8a0:	d00b      	beq.n	800c8ba <_svfiprintf_r+0x7a>
 800c8a2:	465b      	mov	r3, fp
 800c8a4:	4622      	mov	r2, r4
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	f7ff ff6d 	bl	800c788 <__ssputs_r>
 800c8ae:	3001      	adds	r0, #1
 800c8b0:	f000 80aa 	beq.w	800ca08 <_svfiprintf_r+0x1c8>
 800c8b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8b6:	445a      	add	r2, fp
 800c8b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 80a2 	beq.w	800ca08 <_svfiprintf_r+0x1c8>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8ce:	f10a 0a01 	add.w	sl, sl, #1
 800c8d2:	9304      	str	r3, [sp, #16]
 800c8d4:	9307      	str	r3, [sp, #28]
 800c8d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8da:	931a      	str	r3, [sp, #104]	; 0x68
 800c8dc:	4654      	mov	r4, sl
 800c8de:	2205      	movs	r2, #5
 800c8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e4:	4851      	ldr	r0, [pc, #324]	; (800ca2c <_svfiprintf_r+0x1ec>)
 800c8e6:	f7f3 fcab 	bl	8000240 <memchr>
 800c8ea:	9a04      	ldr	r2, [sp, #16]
 800c8ec:	b9d8      	cbnz	r0, 800c926 <_svfiprintf_r+0xe6>
 800c8ee:	06d0      	lsls	r0, r2, #27
 800c8f0:	bf44      	itt	mi
 800c8f2:	2320      	movmi	r3, #32
 800c8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8f8:	0711      	lsls	r1, r2, #28
 800c8fa:	bf44      	itt	mi
 800c8fc:	232b      	movmi	r3, #43	; 0x2b
 800c8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c902:	f89a 3000 	ldrb.w	r3, [sl]
 800c906:	2b2a      	cmp	r3, #42	; 0x2a
 800c908:	d015      	beq.n	800c936 <_svfiprintf_r+0xf6>
 800c90a:	9a07      	ldr	r2, [sp, #28]
 800c90c:	4654      	mov	r4, sl
 800c90e:	2000      	movs	r0, #0
 800c910:	f04f 0c0a 	mov.w	ip, #10
 800c914:	4621      	mov	r1, r4
 800c916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c91a:	3b30      	subs	r3, #48	; 0x30
 800c91c:	2b09      	cmp	r3, #9
 800c91e:	d94e      	bls.n	800c9be <_svfiprintf_r+0x17e>
 800c920:	b1b0      	cbz	r0, 800c950 <_svfiprintf_r+0x110>
 800c922:	9207      	str	r2, [sp, #28]
 800c924:	e014      	b.n	800c950 <_svfiprintf_r+0x110>
 800c926:	eba0 0308 	sub.w	r3, r0, r8
 800c92a:	fa09 f303 	lsl.w	r3, r9, r3
 800c92e:	4313      	orrs	r3, r2
 800c930:	9304      	str	r3, [sp, #16]
 800c932:	46a2      	mov	sl, r4
 800c934:	e7d2      	b.n	800c8dc <_svfiprintf_r+0x9c>
 800c936:	9b03      	ldr	r3, [sp, #12]
 800c938:	1d19      	adds	r1, r3, #4
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	9103      	str	r1, [sp, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	bfbb      	ittet	lt
 800c942:	425b      	neglt	r3, r3
 800c944:	f042 0202 	orrlt.w	r2, r2, #2
 800c948:	9307      	strge	r3, [sp, #28]
 800c94a:	9307      	strlt	r3, [sp, #28]
 800c94c:	bfb8      	it	lt
 800c94e:	9204      	strlt	r2, [sp, #16]
 800c950:	7823      	ldrb	r3, [r4, #0]
 800c952:	2b2e      	cmp	r3, #46	; 0x2e
 800c954:	d10c      	bne.n	800c970 <_svfiprintf_r+0x130>
 800c956:	7863      	ldrb	r3, [r4, #1]
 800c958:	2b2a      	cmp	r3, #42	; 0x2a
 800c95a:	d135      	bne.n	800c9c8 <_svfiprintf_r+0x188>
 800c95c:	9b03      	ldr	r3, [sp, #12]
 800c95e:	1d1a      	adds	r2, r3, #4
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	9203      	str	r2, [sp, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	bfb8      	it	lt
 800c968:	f04f 33ff 	movlt.w	r3, #4294967295
 800c96c:	3402      	adds	r4, #2
 800c96e:	9305      	str	r3, [sp, #20]
 800c970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca3c <_svfiprintf_r+0x1fc>
 800c974:	7821      	ldrb	r1, [r4, #0]
 800c976:	2203      	movs	r2, #3
 800c978:	4650      	mov	r0, sl
 800c97a:	f7f3 fc61 	bl	8000240 <memchr>
 800c97e:	b140      	cbz	r0, 800c992 <_svfiprintf_r+0x152>
 800c980:	2340      	movs	r3, #64	; 0x40
 800c982:	eba0 000a 	sub.w	r0, r0, sl
 800c986:	fa03 f000 	lsl.w	r0, r3, r0
 800c98a:	9b04      	ldr	r3, [sp, #16]
 800c98c:	4303      	orrs	r3, r0
 800c98e:	3401      	adds	r4, #1
 800c990:	9304      	str	r3, [sp, #16]
 800c992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c996:	4826      	ldr	r0, [pc, #152]	; (800ca30 <_svfiprintf_r+0x1f0>)
 800c998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c99c:	2206      	movs	r2, #6
 800c99e:	f7f3 fc4f 	bl	8000240 <memchr>
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	d038      	beq.n	800ca18 <_svfiprintf_r+0x1d8>
 800c9a6:	4b23      	ldr	r3, [pc, #140]	; (800ca34 <_svfiprintf_r+0x1f4>)
 800c9a8:	bb1b      	cbnz	r3, 800c9f2 <_svfiprintf_r+0x1b2>
 800c9aa:	9b03      	ldr	r3, [sp, #12]
 800c9ac:	3307      	adds	r3, #7
 800c9ae:	f023 0307 	bic.w	r3, r3, #7
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	9303      	str	r3, [sp, #12]
 800c9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b8:	4433      	add	r3, r6
 800c9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c9bc:	e767      	b.n	800c88e <_svfiprintf_r+0x4e>
 800c9be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	2001      	movs	r0, #1
 800c9c6:	e7a5      	b.n	800c914 <_svfiprintf_r+0xd4>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	3401      	adds	r4, #1
 800c9cc:	9305      	str	r3, [sp, #20]
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	f04f 0c0a 	mov.w	ip, #10
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9da:	3a30      	subs	r2, #48	; 0x30
 800c9dc:	2a09      	cmp	r2, #9
 800c9de:	d903      	bls.n	800c9e8 <_svfiprintf_r+0x1a8>
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0c5      	beq.n	800c970 <_svfiprintf_r+0x130>
 800c9e4:	9105      	str	r1, [sp, #20]
 800c9e6:	e7c3      	b.n	800c970 <_svfiprintf_r+0x130>
 800c9e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e7f0      	b.n	800c9d4 <_svfiprintf_r+0x194>
 800c9f2:	ab03      	add	r3, sp, #12
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <_svfiprintf_r+0x1f8>)
 800c9fa:	a904      	add	r1, sp, #16
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	f7fc f997 	bl	8008d30 <_printf_float>
 800ca02:	1c42      	adds	r2, r0, #1
 800ca04:	4606      	mov	r6, r0
 800ca06:	d1d6      	bne.n	800c9b6 <_svfiprintf_r+0x176>
 800ca08:	89ab      	ldrh	r3, [r5, #12]
 800ca0a:	065b      	lsls	r3, r3, #25
 800ca0c:	f53f af2c 	bmi.w	800c868 <_svfiprintf_r+0x28>
 800ca10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca12:	b01d      	add	sp, #116	; 0x74
 800ca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca18:	ab03      	add	r3, sp, #12
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	462a      	mov	r2, r5
 800ca1e:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <_svfiprintf_r+0x1f8>)
 800ca20:	a904      	add	r1, sp, #16
 800ca22:	4638      	mov	r0, r7
 800ca24:	f7fc fc28 	bl	8009278 <_printf_i>
 800ca28:	e7eb      	b.n	800ca02 <_svfiprintf_r+0x1c2>
 800ca2a:	bf00      	nop
 800ca2c:	0800dc6c 	.word	0x0800dc6c
 800ca30:	0800dc76 	.word	0x0800dc76
 800ca34:	08008d31 	.word	0x08008d31
 800ca38:	0800c789 	.word	0x0800c789
 800ca3c:	0800dc72 	.word	0x0800dc72

0800ca40 <__sfputc_r>:
 800ca40:	6893      	ldr	r3, [r2, #8]
 800ca42:	3b01      	subs	r3, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	b410      	push	{r4}
 800ca48:	6093      	str	r3, [r2, #8]
 800ca4a:	da08      	bge.n	800ca5e <__sfputc_r+0x1e>
 800ca4c:	6994      	ldr	r4, [r2, #24]
 800ca4e:	42a3      	cmp	r3, r4
 800ca50:	db01      	blt.n	800ca56 <__sfputc_r+0x16>
 800ca52:	290a      	cmp	r1, #10
 800ca54:	d103      	bne.n	800ca5e <__sfputc_r+0x1e>
 800ca56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca5a:	f000 b979 	b.w	800cd50 <__swbuf_r>
 800ca5e:	6813      	ldr	r3, [r2, #0]
 800ca60:	1c58      	adds	r0, r3, #1
 800ca62:	6010      	str	r0, [r2, #0]
 800ca64:	7019      	strb	r1, [r3, #0]
 800ca66:	4608      	mov	r0, r1
 800ca68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <__sfputs_r>:
 800ca6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca70:	4606      	mov	r6, r0
 800ca72:	460f      	mov	r7, r1
 800ca74:	4614      	mov	r4, r2
 800ca76:	18d5      	adds	r5, r2, r3
 800ca78:	42ac      	cmp	r4, r5
 800ca7a:	d101      	bne.n	800ca80 <__sfputs_r+0x12>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e007      	b.n	800ca90 <__sfputs_r+0x22>
 800ca80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca84:	463a      	mov	r2, r7
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7ff ffda 	bl	800ca40 <__sfputc_r>
 800ca8c:	1c43      	adds	r3, r0, #1
 800ca8e:	d1f3      	bne.n	800ca78 <__sfputs_r+0xa>
 800ca90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca94 <_vfiprintf_r>:
 800ca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	460d      	mov	r5, r1
 800ca9a:	b09d      	sub	sp, #116	; 0x74
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	4698      	mov	r8, r3
 800caa0:	4606      	mov	r6, r0
 800caa2:	b118      	cbz	r0, 800caac <_vfiprintf_r+0x18>
 800caa4:	6983      	ldr	r3, [r0, #24]
 800caa6:	b90b      	cbnz	r3, 800caac <_vfiprintf_r+0x18>
 800caa8:	f000 fb42 	bl	800d130 <__sinit>
 800caac:	4b89      	ldr	r3, [pc, #548]	; (800ccd4 <_vfiprintf_r+0x240>)
 800caae:	429d      	cmp	r5, r3
 800cab0:	d11b      	bne.n	800caea <_vfiprintf_r+0x56>
 800cab2:	6875      	ldr	r5, [r6, #4]
 800cab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cab6:	07d9      	lsls	r1, r3, #31
 800cab8:	d405      	bmi.n	800cac6 <_vfiprintf_r+0x32>
 800caba:	89ab      	ldrh	r3, [r5, #12]
 800cabc:	059a      	lsls	r2, r3, #22
 800cabe:	d402      	bmi.n	800cac6 <_vfiprintf_r+0x32>
 800cac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cac2:	f000 fbd3 	bl	800d26c <__retarget_lock_acquire_recursive>
 800cac6:	89ab      	ldrh	r3, [r5, #12]
 800cac8:	071b      	lsls	r3, r3, #28
 800caca:	d501      	bpl.n	800cad0 <_vfiprintf_r+0x3c>
 800cacc:	692b      	ldr	r3, [r5, #16]
 800cace:	b9eb      	cbnz	r3, 800cb0c <_vfiprintf_r+0x78>
 800cad0:	4629      	mov	r1, r5
 800cad2:	4630      	mov	r0, r6
 800cad4:	f000 f99c 	bl	800ce10 <__swsetup_r>
 800cad8:	b1c0      	cbz	r0, 800cb0c <_vfiprintf_r+0x78>
 800cada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cadc:	07dc      	lsls	r4, r3, #31
 800cade:	d50e      	bpl.n	800cafe <_vfiprintf_r+0x6a>
 800cae0:	f04f 30ff 	mov.w	r0, #4294967295
 800cae4:	b01d      	add	sp, #116	; 0x74
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	4b7b      	ldr	r3, [pc, #492]	; (800ccd8 <_vfiprintf_r+0x244>)
 800caec:	429d      	cmp	r5, r3
 800caee:	d101      	bne.n	800caf4 <_vfiprintf_r+0x60>
 800caf0:	68b5      	ldr	r5, [r6, #8]
 800caf2:	e7df      	b.n	800cab4 <_vfiprintf_r+0x20>
 800caf4:	4b79      	ldr	r3, [pc, #484]	; (800ccdc <_vfiprintf_r+0x248>)
 800caf6:	429d      	cmp	r5, r3
 800caf8:	bf08      	it	eq
 800cafa:	68f5      	ldreq	r5, [r6, #12]
 800cafc:	e7da      	b.n	800cab4 <_vfiprintf_r+0x20>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	0598      	lsls	r0, r3, #22
 800cb02:	d4ed      	bmi.n	800cae0 <_vfiprintf_r+0x4c>
 800cb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb06:	f000 fbb2 	bl	800d26e <__retarget_lock_release_recursive>
 800cb0a:	e7e9      	b.n	800cae0 <_vfiprintf_r+0x4c>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb10:	2320      	movs	r3, #32
 800cb12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb16:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb1a:	2330      	movs	r3, #48	; 0x30
 800cb1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cce0 <_vfiprintf_r+0x24c>
 800cb20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb24:	f04f 0901 	mov.w	r9, #1
 800cb28:	4623      	mov	r3, r4
 800cb2a:	469a      	mov	sl, r3
 800cb2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb30:	b10a      	cbz	r2, 800cb36 <_vfiprintf_r+0xa2>
 800cb32:	2a25      	cmp	r2, #37	; 0x25
 800cb34:	d1f9      	bne.n	800cb2a <_vfiprintf_r+0x96>
 800cb36:	ebba 0b04 	subs.w	fp, sl, r4
 800cb3a:	d00b      	beq.n	800cb54 <_vfiprintf_r+0xc0>
 800cb3c:	465b      	mov	r3, fp
 800cb3e:	4622      	mov	r2, r4
 800cb40:	4629      	mov	r1, r5
 800cb42:	4630      	mov	r0, r6
 800cb44:	f7ff ff93 	bl	800ca6e <__sfputs_r>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	f000 80aa 	beq.w	800cca2 <_vfiprintf_r+0x20e>
 800cb4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb50:	445a      	add	r2, fp
 800cb52:	9209      	str	r2, [sp, #36]	; 0x24
 800cb54:	f89a 3000 	ldrb.w	r3, [sl]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 80a2 	beq.w	800cca2 <_vfiprintf_r+0x20e>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f04f 32ff 	mov.w	r2, #4294967295
 800cb64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb68:	f10a 0a01 	add.w	sl, sl, #1
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	9307      	str	r3, [sp, #28]
 800cb70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb74:	931a      	str	r3, [sp, #104]	; 0x68
 800cb76:	4654      	mov	r4, sl
 800cb78:	2205      	movs	r2, #5
 800cb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb7e:	4858      	ldr	r0, [pc, #352]	; (800cce0 <_vfiprintf_r+0x24c>)
 800cb80:	f7f3 fb5e 	bl	8000240 <memchr>
 800cb84:	9a04      	ldr	r2, [sp, #16]
 800cb86:	b9d8      	cbnz	r0, 800cbc0 <_vfiprintf_r+0x12c>
 800cb88:	06d1      	lsls	r1, r2, #27
 800cb8a:	bf44      	itt	mi
 800cb8c:	2320      	movmi	r3, #32
 800cb8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb92:	0713      	lsls	r3, r2, #28
 800cb94:	bf44      	itt	mi
 800cb96:	232b      	movmi	r3, #43	; 0x2b
 800cb98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cba0:	2b2a      	cmp	r3, #42	; 0x2a
 800cba2:	d015      	beq.n	800cbd0 <_vfiprintf_r+0x13c>
 800cba4:	9a07      	ldr	r2, [sp, #28]
 800cba6:	4654      	mov	r4, sl
 800cba8:	2000      	movs	r0, #0
 800cbaa:	f04f 0c0a 	mov.w	ip, #10
 800cbae:	4621      	mov	r1, r4
 800cbb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbb4:	3b30      	subs	r3, #48	; 0x30
 800cbb6:	2b09      	cmp	r3, #9
 800cbb8:	d94e      	bls.n	800cc58 <_vfiprintf_r+0x1c4>
 800cbba:	b1b0      	cbz	r0, 800cbea <_vfiprintf_r+0x156>
 800cbbc:	9207      	str	r2, [sp, #28]
 800cbbe:	e014      	b.n	800cbea <_vfiprintf_r+0x156>
 800cbc0:	eba0 0308 	sub.w	r3, r0, r8
 800cbc4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	9304      	str	r3, [sp, #16]
 800cbcc:	46a2      	mov	sl, r4
 800cbce:	e7d2      	b.n	800cb76 <_vfiprintf_r+0xe2>
 800cbd0:	9b03      	ldr	r3, [sp, #12]
 800cbd2:	1d19      	adds	r1, r3, #4
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	9103      	str	r1, [sp, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bfbb      	ittet	lt
 800cbdc:	425b      	neglt	r3, r3
 800cbde:	f042 0202 	orrlt.w	r2, r2, #2
 800cbe2:	9307      	strge	r3, [sp, #28]
 800cbe4:	9307      	strlt	r3, [sp, #28]
 800cbe6:	bfb8      	it	lt
 800cbe8:	9204      	strlt	r2, [sp, #16]
 800cbea:	7823      	ldrb	r3, [r4, #0]
 800cbec:	2b2e      	cmp	r3, #46	; 0x2e
 800cbee:	d10c      	bne.n	800cc0a <_vfiprintf_r+0x176>
 800cbf0:	7863      	ldrb	r3, [r4, #1]
 800cbf2:	2b2a      	cmp	r3, #42	; 0x2a
 800cbf4:	d135      	bne.n	800cc62 <_vfiprintf_r+0x1ce>
 800cbf6:	9b03      	ldr	r3, [sp, #12]
 800cbf8:	1d1a      	adds	r2, r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	9203      	str	r2, [sp, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfb8      	it	lt
 800cc02:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc06:	3402      	adds	r4, #2
 800cc08:	9305      	str	r3, [sp, #20]
 800cc0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ccf0 <_vfiprintf_r+0x25c>
 800cc0e:	7821      	ldrb	r1, [r4, #0]
 800cc10:	2203      	movs	r2, #3
 800cc12:	4650      	mov	r0, sl
 800cc14:	f7f3 fb14 	bl	8000240 <memchr>
 800cc18:	b140      	cbz	r0, 800cc2c <_vfiprintf_r+0x198>
 800cc1a:	2340      	movs	r3, #64	; 0x40
 800cc1c:	eba0 000a 	sub.w	r0, r0, sl
 800cc20:	fa03 f000 	lsl.w	r0, r3, r0
 800cc24:	9b04      	ldr	r3, [sp, #16]
 800cc26:	4303      	orrs	r3, r0
 800cc28:	3401      	adds	r4, #1
 800cc2a:	9304      	str	r3, [sp, #16]
 800cc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc30:	482c      	ldr	r0, [pc, #176]	; (800cce4 <_vfiprintf_r+0x250>)
 800cc32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc36:	2206      	movs	r2, #6
 800cc38:	f7f3 fb02 	bl	8000240 <memchr>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d03f      	beq.n	800ccc0 <_vfiprintf_r+0x22c>
 800cc40:	4b29      	ldr	r3, [pc, #164]	; (800cce8 <_vfiprintf_r+0x254>)
 800cc42:	bb1b      	cbnz	r3, 800cc8c <_vfiprintf_r+0x1f8>
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	3307      	adds	r3, #7
 800cc48:	f023 0307 	bic.w	r3, r3, #7
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	9303      	str	r3, [sp, #12]
 800cc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc52:	443b      	add	r3, r7
 800cc54:	9309      	str	r3, [sp, #36]	; 0x24
 800cc56:	e767      	b.n	800cb28 <_vfiprintf_r+0x94>
 800cc58:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	2001      	movs	r0, #1
 800cc60:	e7a5      	b.n	800cbae <_vfiprintf_r+0x11a>
 800cc62:	2300      	movs	r3, #0
 800cc64:	3401      	adds	r4, #1
 800cc66:	9305      	str	r3, [sp, #20]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	f04f 0c0a 	mov.w	ip, #10
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc74:	3a30      	subs	r2, #48	; 0x30
 800cc76:	2a09      	cmp	r2, #9
 800cc78:	d903      	bls.n	800cc82 <_vfiprintf_r+0x1ee>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d0c5      	beq.n	800cc0a <_vfiprintf_r+0x176>
 800cc7e:	9105      	str	r1, [sp, #20]
 800cc80:	e7c3      	b.n	800cc0a <_vfiprintf_r+0x176>
 800cc82:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc86:	4604      	mov	r4, r0
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e7f0      	b.n	800cc6e <_vfiprintf_r+0x1da>
 800cc8c:	ab03      	add	r3, sp, #12
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	462a      	mov	r2, r5
 800cc92:	4b16      	ldr	r3, [pc, #88]	; (800ccec <_vfiprintf_r+0x258>)
 800cc94:	a904      	add	r1, sp, #16
 800cc96:	4630      	mov	r0, r6
 800cc98:	f7fc f84a 	bl	8008d30 <_printf_float>
 800cc9c:	4607      	mov	r7, r0
 800cc9e:	1c78      	adds	r0, r7, #1
 800cca0:	d1d6      	bne.n	800cc50 <_vfiprintf_r+0x1bc>
 800cca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca4:	07d9      	lsls	r1, r3, #31
 800cca6:	d405      	bmi.n	800ccb4 <_vfiprintf_r+0x220>
 800cca8:	89ab      	ldrh	r3, [r5, #12]
 800ccaa:	059a      	lsls	r2, r3, #22
 800ccac:	d402      	bmi.n	800ccb4 <_vfiprintf_r+0x220>
 800ccae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccb0:	f000 fadd 	bl	800d26e <__retarget_lock_release_recursive>
 800ccb4:	89ab      	ldrh	r3, [r5, #12]
 800ccb6:	065b      	lsls	r3, r3, #25
 800ccb8:	f53f af12 	bmi.w	800cae0 <_vfiprintf_r+0x4c>
 800ccbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccbe:	e711      	b.n	800cae4 <_vfiprintf_r+0x50>
 800ccc0:	ab03      	add	r3, sp, #12
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	4b09      	ldr	r3, [pc, #36]	; (800ccec <_vfiprintf_r+0x258>)
 800ccc8:	a904      	add	r1, sp, #16
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7fc fad4 	bl	8009278 <_printf_i>
 800ccd0:	e7e4      	b.n	800cc9c <_vfiprintf_r+0x208>
 800ccd2:	bf00      	nop
 800ccd4:	0800dca0 	.word	0x0800dca0
 800ccd8:	0800dcc0 	.word	0x0800dcc0
 800ccdc:	0800dc80 	.word	0x0800dc80
 800cce0:	0800dc6c 	.word	0x0800dc6c
 800cce4:	0800dc76 	.word	0x0800dc76
 800cce8:	08008d31 	.word	0x08008d31
 800ccec:	0800ca6f 	.word	0x0800ca6f
 800ccf0:	0800dc72 	.word	0x0800dc72
 800ccf4:	00000000 	.word	0x00000000

0800ccf8 <nan>:
 800ccf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd00 <nan+0x8>
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	00000000 	.word	0x00000000
 800cd04:	7ff80000 	.word	0x7ff80000

0800cd08 <_sbrk_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d06      	ldr	r5, [pc, #24]	; (800cd24 <_sbrk_r+0x1c>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	602b      	str	r3, [r5, #0]
 800cd14:	f7f6 fbac 	bl	8003470 <_sbrk>
 800cd18:	1c43      	adds	r3, r0, #1
 800cd1a:	d102      	bne.n	800cd22 <_sbrk_r+0x1a>
 800cd1c:	682b      	ldr	r3, [r5, #0]
 800cd1e:	b103      	cbz	r3, 800cd22 <_sbrk_r+0x1a>
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	200040e4 	.word	0x200040e4

0800cd28 <strncmp>:
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	b17a      	cbz	r2, 800cd4c <strncmp+0x24>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	3901      	subs	r1, #1
 800cd30:	1884      	adds	r4, r0, r2
 800cd32:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd3a:	4290      	cmp	r0, r2
 800cd3c:	d101      	bne.n	800cd42 <strncmp+0x1a>
 800cd3e:	42a3      	cmp	r3, r4
 800cd40:	d101      	bne.n	800cd46 <strncmp+0x1e>
 800cd42:	1a80      	subs	r0, r0, r2
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d1f3      	bne.n	800cd32 <strncmp+0xa>
 800cd4a:	e7fa      	b.n	800cd42 <strncmp+0x1a>
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	e7f9      	b.n	800cd44 <strncmp+0x1c>

0800cd50 <__swbuf_r>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	460e      	mov	r6, r1
 800cd54:	4614      	mov	r4, r2
 800cd56:	4605      	mov	r5, r0
 800cd58:	b118      	cbz	r0, 800cd62 <__swbuf_r+0x12>
 800cd5a:	6983      	ldr	r3, [r0, #24]
 800cd5c:	b90b      	cbnz	r3, 800cd62 <__swbuf_r+0x12>
 800cd5e:	f000 f9e7 	bl	800d130 <__sinit>
 800cd62:	4b21      	ldr	r3, [pc, #132]	; (800cde8 <__swbuf_r+0x98>)
 800cd64:	429c      	cmp	r4, r3
 800cd66:	d12b      	bne.n	800cdc0 <__swbuf_r+0x70>
 800cd68:	686c      	ldr	r4, [r5, #4]
 800cd6a:	69a3      	ldr	r3, [r4, #24]
 800cd6c:	60a3      	str	r3, [r4, #8]
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	071a      	lsls	r2, r3, #28
 800cd72:	d52f      	bpl.n	800cdd4 <__swbuf_r+0x84>
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	b36b      	cbz	r3, 800cdd4 <__swbuf_r+0x84>
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	6820      	ldr	r0, [r4, #0]
 800cd7c:	1ac0      	subs	r0, r0, r3
 800cd7e:	6963      	ldr	r3, [r4, #20]
 800cd80:	b2f6      	uxtb	r6, r6
 800cd82:	4283      	cmp	r3, r0
 800cd84:	4637      	mov	r7, r6
 800cd86:	dc04      	bgt.n	800cd92 <__swbuf_r+0x42>
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f000 f93c 	bl	800d008 <_fflush_r>
 800cd90:	bb30      	cbnz	r0, 800cde0 <__swbuf_r+0x90>
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	60a3      	str	r3, [r4, #8]
 800cd98:	6823      	ldr	r3, [r4, #0]
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	6022      	str	r2, [r4, #0]
 800cd9e:	701e      	strb	r6, [r3, #0]
 800cda0:	6963      	ldr	r3, [r4, #20]
 800cda2:	3001      	adds	r0, #1
 800cda4:	4283      	cmp	r3, r0
 800cda6:	d004      	beq.n	800cdb2 <__swbuf_r+0x62>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	07db      	lsls	r3, r3, #31
 800cdac:	d506      	bpl.n	800cdbc <__swbuf_r+0x6c>
 800cdae:	2e0a      	cmp	r6, #10
 800cdb0:	d104      	bne.n	800cdbc <__swbuf_r+0x6c>
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f000 f927 	bl	800d008 <_fflush_r>
 800cdba:	b988      	cbnz	r0, 800cde0 <__swbuf_r+0x90>
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdc0:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <__swbuf_r+0x9c>)
 800cdc2:	429c      	cmp	r4, r3
 800cdc4:	d101      	bne.n	800cdca <__swbuf_r+0x7a>
 800cdc6:	68ac      	ldr	r4, [r5, #8]
 800cdc8:	e7cf      	b.n	800cd6a <__swbuf_r+0x1a>
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <__swbuf_r+0xa0>)
 800cdcc:	429c      	cmp	r4, r3
 800cdce:	bf08      	it	eq
 800cdd0:	68ec      	ldreq	r4, [r5, #12]
 800cdd2:	e7ca      	b.n	800cd6a <__swbuf_r+0x1a>
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f000 f81a 	bl	800ce10 <__swsetup_r>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d0cb      	beq.n	800cd78 <__swbuf_r+0x28>
 800cde0:	f04f 37ff 	mov.w	r7, #4294967295
 800cde4:	e7ea      	b.n	800cdbc <__swbuf_r+0x6c>
 800cde6:	bf00      	nop
 800cde8:	0800dca0 	.word	0x0800dca0
 800cdec:	0800dcc0 	.word	0x0800dcc0
 800cdf0:	0800dc80 	.word	0x0800dc80

0800cdf4 <__ascii_wctomb>:
 800cdf4:	b149      	cbz	r1, 800ce0a <__ascii_wctomb+0x16>
 800cdf6:	2aff      	cmp	r2, #255	; 0xff
 800cdf8:	bf85      	ittet	hi
 800cdfa:	238a      	movhi	r3, #138	; 0x8a
 800cdfc:	6003      	strhi	r3, [r0, #0]
 800cdfe:	700a      	strbls	r2, [r1, #0]
 800ce00:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce04:	bf98      	it	ls
 800ce06:	2001      	movls	r0, #1
 800ce08:	4770      	bx	lr
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	4770      	bx	lr
	...

0800ce10 <__swsetup_r>:
 800ce10:	4b32      	ldr	r3, [pc, #200]	; (800cedc <__swsetup_r+0xcc>)
 800ce12:	b570      	push	{r4, r5, r6, lr}
 800ce14:	681d      	ldr	r5, [r3, #0]
 800ce16:	4606      	mov	r6, r0
 800ce18:	460c      	mov	r4, r1
 800ce1a:	b125      	cbz	r5, 800ce26 <__swsetup_r+0x16>
 800ce1c:	69ab      	ldr	r3, [r5, #24]
 800ce1e:	b913      	cbnz	r3, 800ce26 <__swsetup_r+0x16>
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 f985 	bl	800d130 <__sinit>
 800ce26:	4b2e      	ldr	r3, [pc, #184]	; (800cee0 <__swsetup_r+0xd0>)
 800ce28:	429c      	cmp	r4, r3
 800ce2a:	d10f      	bne.n	800ce4c <__swsetup_r+0x3c>
 800ce2c:	686c      	ldr	r4, [r5, #4]
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce34:	0719      	lsls	r1, r3, #28
 800ce36:	d42c      	bmi.n	800ce92 <__swsetup_r+0x82>
 800ce38:	06dd      	lsls	r5, r3, #27
 800ce3a:	d411      	bmi.n	800ce60 <__swsetup_r+0x50>
 800ce3c:	2309      	movs	r3, #9
 800ce3e:	6033      	str	r3, [r6, #0]
 800ce40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce44:	81a3      	strh	r3, [r4, #12]
 800ce46:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4a:	e03e      	b.n	800ceca <__swsetup_r+0xba>
 800ce4c:	4b25      	ldr	r3, [pc, #148]	; (800cee4 <__swsetup_r+0xd4>)
 800ce4e:	429c      	cmp	r4, r3
 800ce50:	d101      	bne.n	800ce56 <__swsetup_r+0x46>
 800ce52:	68ac      	ldr	r4, [r5, #8]
 800ce54:	e7eb      	b.n	800ce2e <__swsetup_r+0x1e>
 800ce56:	4b24      	ldr	r3, [pc, #144]	; (800cee8 <__swsetup_r+0xd8>)
 800ce58:	429c      	cmp	r4, r3
 800ce5a:	bf08      	it	eq
 800ce5c:	68ec      	ldreq	r4, [r5, #12]
 800ce5e:	e7e6      	b.n	800ce2e <__swsetup_r+0x1e>
 800ce60:	0758      	lsls	r0, r3, #29
 800ce62:	d512      	bpl.n	800ce8a <__swsetup_r+0x7a>
 800ce64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce66:	b141      	cbz	r1, 800ce7a <__swsetup_r+0x6a>
 800ce68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce6c:	4299      	cmp	r1, r3
 800ce6e:	d002      	beq.n	800ce76 <__swsetup_r+0x66>
 800ce70:	4630      	mov	r0, r6
 800ce72:	f7ff fba9 	bl	800c5c8 <_free_r>
 800ce76:	2300      	movs	r3, #0
 800ce78:	6363      	str	r3, [r4, #52]	; 0x34
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	2300      	movs	r3, #0
 800ce84:	6063      	str	r3, [r4, #4]
 800ce86:	6923      	ldr	r3, [r4, #16]
 800ce88:	6023      	str	r3, [r4, #0]
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	f043 0308 	orr.w	r3, r3, #8
 800ce90:	81a3      	strh	r3, [r4, #12]
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	b94b      	cbnz	r3, 800ceaa <__swsetup_r+0x9a>
 800ce96:	89a3      	ldrh	r3, [r4, #12]
 800ce98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cea0:	d003      	beq.n	800ceaa <__swsetup_r+0x9a>
 800cea2:	4621      	mov	r1, r4
 800cea4:	4630      	mov	r0, r6
 800cea6:	f000 fa09 	bl	800d2bc <__smakebuf_r>
 800ceaa:	89a0      	ldrh	r0, [r4, #12]
 800ceac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ceb0:	f010 0301 	ands.w	r3, r0, #1
 800ceb4:	d00a      	beq.n	800cecc <__swsetup_r+0xbc>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60a3      	str	r3, [r4, #8]
 800ceba:	6963      	ldr	r3, [r4, #20]
 800cebc:	425b      	negs	r3, r3
 800cebe:	61a3      	str	r3, [r4, #24]
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	b943      	cbnz	r3, 800ced6 <__swsetup_r+0xc6>
 800cec4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cec8:	d1ba      	bne.n	800ce40 <__swsetup_r+0x30>
 800ceca:	bd70      	pop	{r4, r5, r6, pc}
 800cecc:	0781      	lsls	r1, r0, #30
 800cece:	bf58      	it	pl
 800ced0:	6963      	ldrpl	r3, [r4, #20]
 800ced2:	60a3      	str	r3, [r4, #8]
 800ced4:	e7f4      	b.n	800cec0 <__swsetup_r+0xb0>
 800ced6:	2000      	movs	r0, #0
 800ced8:	e7f7      	b.n	800ceca <__swsetup_r+0xba>
 800ceda:	bf00      	nop
 800cedc:	2000000c 	.word	0x2000000c
 800cee0:	0800dca0 	.word	0x0800dca0
 800cee4:	0800dcc0 	.word	0x0800dcc0
 800cee8:	0800dc80 	.word	0x0800dc80

0800ceec <abort>:
 800ceec:	b508      	push	{r3, lr}
 800ceee:	2006      	movs	r0, #6
 800cef0:	f000 faa2 	bl	800d438 <raise>
 800cef4:	2001      	movs	r0, #1
 800cef6:	f7f6 fa43 	bl	8003380 <_exit>
	...

0800cefc <__sflush_r>:
 800cefc:	898a      	ldrh	r2, [r1, #12]
 800cefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf02:	4605      	mov	r5, r0
 800cf04:	0710      	lsls	r0, r2, #28
 800cf06:	460c      	mov	r4, r1
 800cf08:	d458      	bmi.n	800cfbc <__sflush_r+0xc0>
 800cf0a:	684b      	ldr	r3, [r1, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dc05      	bgt.n	800cf1c <__sflush_r+0x20>
 800cf10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dc02      	bgt.n	800cf1c <__sflush_r+0x20>
 800cf16:	2000      	movs	r0, #0
 800cf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf1e:	2e00      	cmp	r6, #0
 800cf20:	d0f9      	beq.n	800cf16 <__sflush_r+0x1a>
 800cf22:	2300      	movs	r3, #0
 800cf24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf28:	682f      	ldr	r7, [r5, #0]
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	d032      	beq.n	800cf94 <__sflush_r+0x98>
 800cf2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	075a      	lsls	r2, r3, #29
 800cf34:	d505      	bpl.n	800cf42 <__sflush_r+0x46>
 800cf36:	6863      	ldr	r3, [r4, #4]
 800cf38:	1ac0      	subs	r0, r0, r3
 800cf3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf3c:	b10b      	cbz	r3, 800cf42 <__sflush_r+0x46>
 800cf3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf40:	1ac0      	subs	r0, r0, r3
 800cf42:	2300      	movs	r3, #0
 800cf44:	4602      	mov	r2, r0
 800cf46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf48:	6a21      	ldr	r1, [r4, #32]
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	47b0      	blx	r6
 800cf4e:	1c43      	adds	r3, r0, #1
 800cf50:	89a3      	ldrh	r3, [r4, #12]
 800cf52:	d106      	bne.n	800cf62 <__sflush_r+0x66>
 800cf54:	6829      	ldr	r1, [r5, #0]
 800cf56:	291d      	cmp	r1, #29
 800cf58:	d82c      	bhi.n	800cfb4 <__sflush_r+0xb8>
 800cf5a:	4a2a      	ldr	r2, [pc, #168]	; (800d004 <__sflush_r+0x108>)
 800cf5c:	40ca      	lsrs	r2, r1
 800cf5e:	07d6      	lsls	r6, r2, #31
 800cf60:	d528      	bpl.n	800cfb4 <__sflush_r+0xb8>
 800cf62:	2200      	movs	r2, #0
 800cf64:	6062      	str	r2, [r4, #4]
 800cf66:	04d9      	lsls	r1, r3, #19
 800cf68:	6922      	ldr	r2, [r4, #16]
 800cf6a:	6022      	str	r2, [r4, #0]
 800cf6c:	d504      	bpl.n	800cf78 <__sflush_r+0x7c>
 800cf6e:	1c42      	adds	r2, r0, #1
 800cf70:	d101      	bne.n	800cf76 <__sflush_r+0x7a>
 800cf72:	682b      	ldr	r3, [r5, #0]
 800cf74:	b903      	cbnz	r3, 800cf78 <__sflush_r+0x7c>
 800cf76:	6560      	str	r0, [r4, #84]	; 0x54
 800cf78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf7a:	602f      	str	r7, [r5, #0]
 800cf7c:	2900      	cmp	r1, #0
 800cf7e:	d0ca      	beq.n	800cf16 <__sflush_r+0x1a>
 800cf80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf84:	4299      	cmp	r1, r3
 800cf86:	d002      	beq.n	800cf8e <__sflush_r+0x92>
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f7ff fb1d 	bl	800c5c8 <_free_r>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	6360      	str	r0, [r4, #52]	; 0x34
 800cf92:	e7c1      	b.n	800cf18 <__sflush_r+0x1c>
 800cf94:	6a21      	ldr	r1, [r4, #32]
 800cf96:	2301      	movs	r3, #1
 800cf98:	4628      	mov	r0, r5
 800cf9a:	47b0      	blx	r6
 800cf9c:	1c41      	adds	r1, r0, #1
 800cf9e:	d1c7      	bne.n	800cf30 <__sflush_r+0x34>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0c4      	beq.n	800cf30 <__sflush_r+0x34>
 800cfa6:	2b1d      	cmp	r3, #29
 800cfa8:	d001      	beq.n	800cfae <__sflush_r+0xb2>
 800cfaa:	2b16      	cmp	r3, #22
 800cfac:	d101      	bne.n	800cfb2 <__sflush_r+0xb6>
 800cfae:	602f      	str	r7, [r5, #0]
 800cfb0:	e7b1      	b.n	800cf16 <__sflush_r+0x1a>
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfb8:	81a3      	strh	r3, [r4, #12]
 800cfba:	e7ad      	b.n	800cf18 <__sflush_r+0x1c>
 800cfbc:	690f      	ldr	r7, [r1, #16]
 800cfbe:	2f00      	cmp	r7, #0
 800cfc0:	d0a9      	beq.n	800cf16 <__sflush_r+0x1a>
 800cfc2:	0793      	lsls	r3, r2, #30
 800cfc4:	680e      	ldr	r6, [r1, #0]
 800cfc6:	bf08      	it	eq
 800cfc8:	694b      	ldreq	r3, [r1, #20]
 800cfca:	600f      	str	r7, [r1, #0]
 800cfcc:	bf18      	it	ne
 800cfce:	2300      	movne	r3, #0
 800cfd0:	eba6 0807 	sub.w	r8, r6, r7
 800cfd4:	608b      	str	r3, [r1, #8]
 800cfd6:	f1b8 0f00 	cmp.w	r8, #0
 800cfda:	dd9c      	ble.n	800cf16 <__sflush_r+0x1a>
 800cfdc:	6a21      	ldr	r1, [r4, #32]
 800cfde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfe0:	4643      	mov	r3, r8
 800cfe2:	463a      	mov	r2, r7
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	47b0      	blx	r6
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	dc06      	bgt.n	800cffa <__sflush_r+0xfe>
 800cfec:	89a3      	ldrh	r3, [r4, #12]
 800cfee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cff2:	81a3      	strh	r3, [r4, #12]
 800cff4:	f04f 30ff 	mov.w	r0, #4294967295
 800cff8:	e78e      	b.n	800cf18 <__sflush_r+0x1c>
 800cffa:	4407      	add	r7, r0
 800cffc:	eba8 0800 	sub.w	r8, r8, r0
 800d000:	e7e9      	b.n	800cfd6 <__sflush_r+0xda>
 800d002:	bf00      	nop
 800d004:	20400001 	.word	0x20400001

0800d008 <_fflush_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	690b      	ldr	r3, [r1, #16]
 800d00c:	4605      	mov	r5, r0
 800d00e:	460c      	mov	r4, r1
 800d010:	b913      	cbnz	r3, 800d018 <_fflush_r+0x10>
 800d012:	2500      	movs	r5, #0
 800d014:	4628      	mov	r0, r5
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	b118      	cbz	r0, 800d022 <_fflush_r+0x1a>
 800d01a:	6983      	ldr	r3, [r0, #24]
 800d01c:	b90b      	cbnz	r3, 800d022 <_fflush_r+0x1a>
 800d01e:	f000 f887 	bl	800d130 <__sinit>
 800d022:	4b14      	ldr	r3, [pc, #80]	; (800d074 <_fflush_r+0x6c>)
 800d024:	429c      	cmp	r4, r3
 800d026:	d11b      	bne.n	800d060 <_fflush_r+0x58>
 800d028:	686c      	ldr	r4, [r5, #4]
 800d02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0ef      	beq.n	800d012 <_fflush_r+0xa>
 800d032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d034:	07d0      	lsls	r0, r2, #31
 800d036:	d404      	bmi.n	800d042 <_fflush_r+0x3a>
 800d038:	0599      	lsls	r1, r3, #22
 800d03a:	d402      	bmi.n	800d042 <_fflush_r+0x3a>
 800d03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d03e:	f000 f915 	bl	800d26c <__retarget_lock_acquire_recursive>
 800d042:	4628      	mov	r0, r5
 800d044:	4621      	mov	r1, r4
 800d046:	f7ff ff59 	bl	800cefc <__sflush_r>
 800d04a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d04c:	07da      	lsls	r2, r3, #31
 800d04e:	4605      	mov	r5, r0
 800d050:	d4e0      	bmi.n	800d014 <_fflush_r+0xc>
 800d052:	89a3      	ldrh	r3, [r4, #12]
 800d054:	059b      	lsls	r3, r3, #22
 800d056:	d4dd      	bmi.n	800d014 <_fflush_r+0xc>
 800d058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d05a:	f000 f908 	bl	800d26e <__retarget_lock_release_recursive>
 800d05e:	e7d9      	b.n	800d014 <_fflush_r+0xc>
 800d060:	4b05      	ldr	r3, [pc, #20]	; (800d078 <_fflush_r+0x70>)
 800d062:	429c      	cmp	r4, r3
 800d064:	d101      	bne.n	800d06a <_fflush_r+0x62>
 800d066:	68ac      	ldr	r4, [r5, #8]
 800d068:	e7df      	b.n	800d02a <_fflush_r+0x22>
 800d06a:	4b04      	ldr	r3, [pc, #16]	; (800d07c <_fflush_r+0x74>)
 800d06c:	429c      	cmp	r4, r3
 800d06e:	bf08      	it	eq
 800d070:	68ec      	ldreq	r4, [r5, #12]
 800d072:	e7da      	b.n	800d02a <_fflush_r+0x22>
 800d074:	0800dca0 	.word	0x0800dca0
 800d078:	0800dcc0 	.word	0x0800dcc0
 800d07c:	0800dc80 	.word	0x0800dc80

0800d080 <std>:
 800d080:	2300      	movs	r3, #0
 800d082:	b510      	push	{r4, lr}
 800d084:	4604      	mov	r4, r0
 800d086:	e9c0 3300 	strd	r3, r3, [r0]
 800d08a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d08e:	6083      	str	r3, [r0, #8]
 800d090:	8181      	strh	r1, [r0, #12]
 800d092:	6643      	str	r3, [r0, #100]	; 0x64
 800d094:	81c2      	strh	r2, [r0, #14]
 800d096:	6183      	str	r3, [r0, #24]
 800d098:	4619      	mov	r1, r3
 800d09a:	2208      	movs	r2, #8
 800d09c:	305c      	adds	r0, #92	; 0x5c
 800d09e:	f7fb fd9f 	bl	8008be0 <memset>
 800d0a2:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <std+0x38>)
 800d0a4:	6263      	str	r3, [r4, #36]	; 0x24
 800d0a6:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <std+0x3c>)
 800d0a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0aa:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <std+0x40>)
 800d0ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0ae:	4b05      	ldr	r3, [pc, #20]	; (800d0c4 <std+0x44>)
 800d0b0:	6224      	str	r4, [r4, #32]
 800d0b2:	6323      	str	r3, [r4, #48]	; 0x30
 800d0b4:	bd10      	pop	{r4, pc}
 800d0b6:	bf00      	nop
 800d0b8:	0800d471 	.word	0x0800d471
 800d0bc:	0800d493 	.word	0x0800d493
 800d0c0:	0800d4cb 	.word	0x0800d4cb
 800d0c4:	0800d4ef 	.word	0x0800d4ef

0800d0c8 <_cleanup_r>:
 800d0c8:	4901      	ldr	r1, [pc, #4]	; (800d0d0 <_cleanup_r+0x8>)
 800d0ca:	f000 b8af 	b.w	800d22c <_fwalk_reent>
 800d0ce:	bf00      	nop
 800d0d0:	0800d009 	.word	0x0800d009

0800d0d4 <__sfmoreglue>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	2268      	movs	r2, #104	; 0x68
 800d0d8:	1e4d      	subs	r5, r1, #1
 800d0da:	4355      	muls	r5, r2
 800d0dc:	460e      	mov	r6, r1
 800d0de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0e2:	f7ff fadd 	bl	800c6a0 <_malloc_r>
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	b140      	cbz	r0, 800d0fc <__sfmoreglue+0x28>
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	e9c0 1600 	strd	r1, r6, [r0]
 800d0f0:	300c      	adds	r0, #12
 800d0f2:	60a0      	str	r0, [r4, #8]
 800d0f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0f8:	f7fb fd72 	bl	8008be0 <memset>
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	bd70      	pop	{r4, r5, r6, pc}

0800d100 <__sfp_lock_acquire>:
 800d100:	4801      	ldr	r0, [pc, #4]	; (800d108 <__sfp_lock_acquire+0x8>)
 800d102:	f000 b8b3 	b.w	800d26c <__retarget_lock_acquire_recursive>
 800d106:	bf00      	nop
 800d108:	200040e1 	.word	0x200040e1

0800d10c <__sfp_lock_release>:
 800d10c:	4801      	ldr	r0, [pc, #4]	; (800d114 <__sfp_lock_release+0x8>)
 800d10e:	f000 b8ae 	b.w	800d26e <__retarget_lock_release_recursive>
 800d112:	bf00      	nop
 800d114:	200040e1 	.word	0x200040e1

0800d118 <__sinit_lock_acquire>:
 800d118:	4801      	ldr	r0, [pc, #4]	; (800d120 <__sinit_lock_acquire+0x8>)
 800d11a:	f000 b8a7 	b.w	800d26c <__retarget_lock_acquire_recursive>
 800d11e:	bf00      	nop
 800d120:	200040e2 	.word	0x200040e2

0800d124 <__sinit_lock_release>:
 800d124:	4801      	ldr	r0, [pc, #4]	; (800d12c <__sinit_lock_release+0x8>)
 800d126:	f000 b8a2 	b.w	800d26e <__retarget_lock_release_recursive>
 800d12a:	bf00      	nop
 800d12c:	200040e2 	.word	0x200040e2

0800d130 <__sinit>:
 800d130:	b510      	push	{r4, lr}
 800d132:	4604      	mov	r4, r0
 800d134:	f7ff fff0 	bl	800d118 <__sinit_lock_acquire>
 800d138:	69a3      	ldr	r3, [r4, #24]
 800d13a:	b11b      	cbz	r3, 800d144 <__sinit+0x14>
 800d13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d140:	f7ff bff0 	b.w	800d124 <__sinit_lock_release>
 800d144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d148:	6523      	str	r3, [r4, #80]	; 0x50
 800d14a:	4b13      	ldr	r3, [pc, #76]	; (800d198 <__sinit+0x68>)
 800d14c:	4a13      	ldr	r2, [pc, #76]	; (800d19c <__sinit+0x6c>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	62a2      	str	r2, [r4, #40]	; 0x28
 800d152:	42a3      	cmp	r3, r4
 800d154:	bf04      	itt	eq
 800d156:	2301      	moveq	r3, #1
 800d158:	61a3      	streq	r3, [r4, #24]
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 f820 	bl	800d1a0 <__sfp>
 800d160:	6060      	str	r0, [r4, #4]
 800d162:	4620      	mov	r0, r4
 800d164:	f000 f81c 	bl	800d1a0 <__sfp>
 800d168:	60a0      	str	r0, [r4, #8]
 800d16a:	4620      	mov	r0, r4
 800d16c:	f000 f818 	bl	800d1a0 <__sfp>
 800d170:	2200      	movs	r2, #0
 800d172:	60e0      	str	r0, [r4, #12]
 800d174:	2104      	movs	r1, #4
 800d176:	6860      	ldr	r0, [r4, #4]
 800d178:	f7ff ff82 	bl	800d080 <std>
 800d17c:	68a0      	ldr	r0, [r4, #8]
 800d17e:	2201      	movs	r2, #1
 800d180:	2109      	movs	r1, #9
 800d182:	f7ff ff7d 	bl	800d080 <std>
 800d186:	68e0      	ldr	r0, [r4, #12]
 800d188:	2202      	movs	r2, #2
 800d18a:	2112      	movs	r1, #18
 800d18c:	f7ff ff78 	bl	800d080 <std>
 800d190:	2301      	movs	r3, #1
 800d192:	61a3      	str	r3, [r4, #24]
 800d194:	e7d2      	b.n	800d13c <__sinit+0xc>
 800d196:	bf00      	nop
 800d198:	0800d7dc 	.word	0x0800d7dc
 800d19c:	0800d0c9 	.word	0x0800d0c9

0800d1a0 <__sfp>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	f7ff ffac 	bl	800d100 <__sfp_lock_acquire>
 800d1a8:	4b1e      	ldr	r3, [pc, #120]	; (800d224 <__sfp+0x84>)
 800d1aa:	681e      	ldr	r6, [r3, #0]
 800d1ac:	69b3      	ldr	r3, [r6, #24]
 800d1ae:	b913      	cbnz	r3, 800d1b6 <__sfp+0x16>
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7ff ffbd 	bl	800d130 <__sinit>
 800d1b6:	3648      	adds	r6, #72	; 0x48
 800d1b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	d503      	bpl.n	800d1c8 <__sfp+0x28>
 800d1c0:	6833      	ldr	r3, [r6, #0]
 800d1c2:	b30b      	cbz	r3, 800d208 <__sfp+0x68>
 800d1c4:	6836      	ldr	r6, [r6, #0]
 800d1c6:	e7f7      	b.n	800d1b8 <__sfp+0x18>
 800d1c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d1cc:	b9d5      	cbnz	r5, 800d204 <__sfp+0x64>
 800d1ce:	4b16      	ldr	r3, [pc, #88]	; (800d228 <__sfp+0x88>)
 800d1d0:	60e3      	str	r3, [r4, #12]
 800d1d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d1d6:	6665      	str	r5, [r4, #100]	; 0x64
 800d1d8:	f000 f847 	bl	800d26a <__retarget_lock_init_recursive>
 800d1dc:	f7ff ff96 	bl	800d10c <__sfp_lock_release>
 800d1e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d1e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d1e8:	6025      	str	r5, [r4, #0]
 800d1ea:	61a5      	str	r5, [r4, #24]
 800d1ec:	2208      	movs	r2, #8
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1f4:	f7fb fcf4 	bl	8008be0 <memset>
 800d1f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d200:	4620      	mov	r0, r4
 800d202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d204:	3468      	adds	r4, #104	; 0x68
 800d206:	e7d9      	b.n	800d1bc <__sfp+0x1c>
 800d208:	2104      	movs	r1, #4
 800d20a:	4638      	mov	r0, r7
 800d20c:	f7ff ff62 	bl	800d0d4 <__sfmoreglue>
 800d210:	4604      	mov	r4, r0
 800d212:	6030      	str	r0, [r6, #0]
 800d214:	2800      	cmp	r0, #0
 800d216:	d1d5      	bne.n	800d1c4 <__sfp+0x24>
 800d218:	f7ff ff78 	bl	800d10c <__sfp_lock_release>
 800d21c:	230c      	movs	r3, #12
 800d21e:	603b      	str	r3, [r7, #0]
 800d220:	e7ee      	b.n	800d200 <__sfp+0x60>
 800d222:	bf00      	nop
 800d224:	0800d7dc 	.word	0x0800d7dc
 800d228:	ffff0001 	.word	0xffff0001

0800d22c <_fwalk_reent>:
 800d22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d230:	4606      	mov	r6, r0
 800d232:	4688      	mov	r8, r1
 800d234:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d238:	2700      	movs	r7, #0
 800d23a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d23e:	f1b9 0901 	subs.w	r9, r9, #1
 800d242:	d505      	bpl.n	800d250 <_fwalk_reent+0x24>
 800d244:	6824      	ldr	r4, [r4, #0]
 800d246:	2c00      	cmp	r4, #0
 800d248:	d1f7      	bne.n	800d23a <_fwalk_reent+0xe>
 800d24a:	4638      	mov	r0, r7
 800d24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d250:	89ab      	ldrh	r3, [r5, #12]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d907      	bls.n	800d266 <_fwalk_reent+0x3a>
 800d256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d25a:	3301      	adds	r3, #1
 800d25c:	d003      	beq.n	800d266 <_fwalk_reent+0x3a>
 800d25e:	4629      	mov	r1, r5
 800d260:	4630      	mov	r0, r6
 800d262:	47c0      	blx	r8
 800d264:	4307      	orrs	r7, r0
 800d266:	3568      	adds	r5, #104	; 0x68
 800d268:	e7e9      	b.n	800d23e <_fwalk_reent+0x12>

0800d26a <__retarget_lock_init_recursive>:
 800d26a:	4770      	bx	lr

0800d26c <__retarget_lock_acquire_recursive>:
 800d26c:	4770      	bx	lr

0800d26e <__retarget_lock_release_recursive>:
 800d26e:	4770      	bx	lr

0800d270 <__swhatbuf_r>:
 800d270:	b570      	push	{r4, r5, r6, lr}
 800d272:	460e      	mov	r6, r1
 800d274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d278:	2900      	cmp	r1, #0
 800d27a:	b096      	sub	sp, #88	; 0x58
 800d27c:	4614      	mov	r4, r2
 800d27e:	461d      	mov	r5, r3
 800d280:	da08      	bge.n	800d294 <__swhatbuf_r+0x24>
 800d282:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	602a      	str	r2, [r5, #0]
 800d28a:	061a      	lsls	r2, r3, #24
 800d28c:	d410      	bmi.n	800d2b0 <__swhatbuf_r+0x40>
 800d28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d292:	e00e      	b.n	800d2b2 <__swhatbuf_r+0x42>
 800d294:	466a      	mov	r2, sp
 800d296:	f000 f951 	bl	800d53c <_fstat_r>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	dbf1      	blt.n	800d282 <__swhatbuf_r+0x12>
 800d29e:	9a01      	ldr	r2, [sp, #4]
 800d2a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2a8:	425a      	negs	r2, r3
 800d2aa:	415a      	adcs	r2, r3
 800d2ac:	602a      	str	r2, [r5, #0]
 800d2ae:	e7ee      	b.n	800d28e <__swhatbuf_r+0x1e>
 800d2b0:	2340      	movs	r3, #64	; 0x40
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	6023      	str	r3, [r4, #0]
 800d2b6:	b016      	add	sp, #88	; 0x58
 800d2b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2bc <__smakebuf_r>:
 800d2bc:	898b      	ldrh	r3, [r1, #12]
 800d2be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2c0:	079d      	lsls	r5, r3, #30
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	d507      	bpl.n	800d2d8 <__smakebuf_r+0x1c>
 800d2c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	6123      	str	r3, [r4, #16]
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	6163      	str	r3, [r4, #20]
 800d2d4:	b002      	add	sp, #8
 800d2d6:	bd70      	pop	{r4, r5, r6, pc}
 800d2d8:	ab01      	add	r3, sp, #4
 800d2da:	466a      	mov	r2, sp
 800d2dc:	f7ff ffc8 	bl	800d270 <__swhatbuf_r>
 800d2e0:	9900      	ldr	r1, [sp, #0]
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f7ff f9db 	bl	800c6a0 <_malloc_r>
 800d2ea:	b948      	cbnz	r0, 800d300 <__smakebuf_r+0x44>
 800d2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f0:	059a      	lsls	r2, r3, #22
 800d2f2:	d4ef      	bmi.n	800d2d4 <__smakebuf_r+0x18>
 800d2f4:	f023 0303 	bic.w	r3, r3, #3
 800d2f8:	f043 0302 	orr.w	r3, r3, #2
 800d2fc:	81a3      	strh	r3, [r4, #12]
 800d2fe:	e7e3      	b.n	800d2c8 <__smakebuf_r+0xc>
 800d300:	4b0d      	ldr	r3, [pc, #52]	; (800d338 <__smakebuf_r+0x7c>)
 800d302:	62b3      	str	r3, [r6, #40]	; 0x28
 800d304:	89a3      	ldrh	r3, [r4, #12]
 800d306:	6020      	str	r0, [r4, #0]
 800d308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d30c:	81a3      	strh	r3, [r4, #12]
 800d30e:	9b00      	ldr	r3, [sp, #0]
 800d310:	6163      	str	r3, [r4, #20]
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	6120      	str	r0, [r4, #16]
 800d316:	b15b      	cbz	r3, 800d330 <__smakebuf_r+0x74>
 800d318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d31c:	4630      	mov	r0, r6
 800d31e:	f000 f91f 	bl	800d560 <_isatty_r>
 800d322:	b128      	cbz	r0, 800d330 <__smakebuf_r+0x74>
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	f023 0303 	bic.w	r3, r3, #3
 800d32a:	f043 0301 	orr.w	r3, r3, #1
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	89a0      	ldrh	r0, [r4, #12]
 800d332:	4305      	orrs	r5, r0
 800d334:	81a5      	strh	r5, [r4, #12]
 800d336:	e7cd      	b.n	800d2d4 <__smakebuf_r+0x18>
 800d338:	0800d0c9 	.word	0x0800d0c9

0800d33c <memmove>:
 800d33c:	4288      	cmp	r0, r1
 800d33e:	b510      	push	{r4, lr}
 800d340:	eb01 0402 	add.w	r4, r1, r2
 800d344:	d902      	bls.n	800d34c <memmove+0x10>
 800d346:	4284      	cmp	r4, r0
 800d348:	4623      	mov	r3, r4
 800d34a:	d807      	bhi.n	800d35c <memmove+0x20>
 800d34c:	1e43      	subs	r3, r0, #1
 800d34e:	42a1      	cmp	r1, r4
 800d350:	d008      	beq.n	800d364 <memmove+0x28>
 800d352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d35a:	e7f8      	b.n	800d34e <memmove+0x12>
 800d35c:	4402      	add	r2, r0
 800d35e:	4601      	mov	r1, r0
 800d360:	428a      	cmp	r2, r1
 800d362:	d100      	bne.n	800d366 <memmove+0x2a>
 800d364:	bd10      	pop	{r4, pc}
 800d366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d36a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d36e:	e7f7      	b.n	800d360 <memmove+0x24>

0800d370 <__malloc_lock>:
 800d370:	4801      	ldr	r0, [pc, #4]	; (800d378 <__malloc_lock+0x8>)
 800d372:	f7ff bf7b 	b.w	800d26c <__retarget_lock_acquire_recursive>
 800d376:	bf00      	nop
 800d378:	200040e0 	.word	0x200040e0

0800d37c <__malloc_unlock>:
 800d37c:	4801      	ldr	r0, [pc, #4]	; (800d384 <__malloc_unlock+0x8>)
 800d37e:	f7ff bf76 	b.w	800d26e <__retarget_lock_release_recursive>
 800d382:	bf00      	nop
 800d384:	200040e0 	.word	0x200040e0

0800d388 <_realloc_r>:
 800d388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d38c:	4680      	mov	r8, r0
 800d38e:	4614      	mov	r4, r2
 800d390:	460e      	mov	r6, r1
 800d392:	b921      	cbnz	r1, 800d39e <_realloc_r+0x16>
 800d394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d398:	4611      	mov	r1, r2
 800d39a:	f7ff b981 	b.w	800c6a0 <_malloc_r>
 800d39e:	b92a      	cbnz	r2, 800d3ac <_realloc_r+0x24>
 800d3a0:	f7ff f912 	bl	800c5c8 <_free_r>
 800d3a4:	4625      	mov	r5, r4
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ac:	f000 f8fa 	bl	800d5a4 <_malloc_usable_size_r>
 800d3b0:	4284      	cmp	r4, r0
 800d3b2:	4607      	mov	r7, r0
 800d3b4:	d802      	bhi.n	800d3bc <_realloc_r+0x34>
 800d3b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3ba:	d812      	bhi.n	800d3e2 <_realloc_r+0x5a>
 800d3bc:	4621      	mov	r1, r4
 800d3be:	4640      	mov	r0, r8
 800d3c0:	f7ff f96e 	bl	800c6a0 <_malloc_r>
 800d3c4:	4605      	mov	r5, r0
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d0ed      	beq.n	800d3a6 <_realloc_r+0x1e>
 800d3ca:	42bc      	cmp	r4, r7
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	bf28      	it	cs
 800d3d2:	463a      	movcs	r2, r7
 800d3d4:	f7fe fc12 	bl	800bbfc <memcpy>
 800d3d8:	4631      	mov	r1, r6
 800d3da:	4640      	mov	r0, r8
 800d3dc:	f7ff f8f4 	bl	800c5c8 <_free_r>
 800d3e0:	e7e1      	b.n	800d3a6 <_realloc_r+0x1e>
 800d3e2:	4635      	mov	r5, r6
 800d3e4:	e7df      	b.n	800d3a6 <_realloc_r+0x1e>

0800d3e6 <_raise_r>:
 800d3e6:	291f      	cmp	r1, #31
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	460d      	mov	r5, r1
 800d3ee:	d904      	bls.n	800d3fa <_raise_r+0x14>
 800d3f0:	2316      	movs	r3, #22
 800d3f2:	6003      	str	r3, [r0, #0]
 800d3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3fc:	b112      	cbz	r2, 800d404 <_raise_r+0x1e>
 800d3fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d402:	b94b      	cbnz	r3, 800d418 <_raise_r+0x32>
 800d404:	4620      	mov	r0, r4
 800d406:	f000 f831 	bl	800d46c <_getpid_r>
 800d40a:	462a      	mov	r2, r5
 800d40c:	4601      	mov	r1, r0
 800d40e:	4620      	mov	r0, r4
 800d410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d414:	f000 b818 	b.w	800d448 <_kill_r>
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d00a      	beq.n	800d432 <_raise_r+0x4c>
 800d41c:	1c59      	adds	r1, r3, #1
 800d41e:	d103      	bne.n	800d428 <_raise_r+0x42>
 800d420:	2316      	movs	r3, #22
 800d422:	6003      	str	r3, [r0, #0]
 800d424:	2001      	movs	r0, #1
 800d426:	e7e7      	b.n	800d3f8 <_raise_r+0x12>
 800d428:	2400      	movs	r4, #0
 800d42a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d42e:	4628      	mov	r0, r5
 800d430:	4798      	blx	r3
 800d432:	2000      	movs	r0, #0
 800d434:	e7e0      	b.n	800d3f8 <_raise_r+0x12>
	...

0800d438 <raise>:
 800d438:	4b02      	ldr	r3, [pc, #8]	; (800d444 <raise+0xc>)
 800d43a:	4601      	mov	r1, r0
 800d43c:	6818      	ldr	r0, [r3, #0]
 800d43e:	f7ff bfd2 	b.w	800d3e6 <_raise_r>
 800d442:	bf00      	nop
 800d444:	2000000c 	.word	0x2000000c

0800d448 <_kill_r>:
 800d448:	b538      	push	{r3, r4, r5, lr}
 800d44a:	4d07      	ldr	r5, [pc, #28]	; (800d468 <_kill_r+0x20>)
 800d44c:	2300      	movs	r3, #0
 800d44e:	4604      	mov	r4, r0
 800d450:	4608      	mov	r0, r1
 800d452:	4611      	mov	r1, r2
 800d454:	602b      	str	r3, [r5, #0]
 800d456:	f7f5 ff83 	bl	8003360 <_kill>
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	d102      	bne.n	800d464 <_kill_r+0x1c>
 800d45e:	682b      	ldr	r3, [r5, #0]
 800d460:	b103      	cbz	r3, 800d464 <_kill_r+0x1c>
 800d462:	6023      	str	r3, [r4, #0]
 800d464:	bd38      	pop	{r3, r4, r5, pc}
 800d466:	bf00      	nop
 800d468:	200040e4 	.word	0x200040e4

0800d46c <_getpid_r>:
 800d46c:	f7f5 bf70 	b.w	8003350 <_getpid>

0800d470 <__sread>:
 800d470:	b510      	push	{r4, lr}
 800d472:	460c      	mov	r4, r1
 800d474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d478:	f000 f89c 	bl	800d5b4 <_read_r>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	bfab      	itete	ge
 800d480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d482:	89a3      	ldrhlt	r3, [r4, #12]
 800d484:	181b      	addge	r3, r3, r0
 800d486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d48a:	bfac      	ite	ge
 800d48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d48e:	81a3      	strhlt	r3, [r4, #12]
 800d490:	bd10      	pop	{r4, pc}

0800d492 <__swrite>:
 800d492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d496:	461f      	mov	r7, r3
 800d498:	898b      	ldrh	r3, [r1, #12]
 800d49a:	05db      	lsls	r3, r3, #23
 800d49c:	4605      	mov	r5, r0
 800d49e:	460c      	mov	r4, r1
 800d4a0:	4616      	mov	r6, r2
 800d4a2:	d505      	bpl.n	800d4b0 <__swrite+0x1e>
 800d4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f000 f868 	bl	800d580 <_lseek_r>
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4ba:	81a3      	strh	r3, [r4, #12]
 800d4bc:	4632      	mov	r2, r6
 800d4be:	463b      	mov	r3, r7
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c6:	f000 b817 	b.w	800d4f8 <_write_r>

0800d4ca <__sseek>:
 800d4ca:	b510      	push	{r4, lr}
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d2:	f000 f855 	bl	800d580 <_lseek_r>
 800d4d6:	1c43      	adds	r3, r0, #1
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	bf15      	itete	ne
 800d4dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4e6:	81a3      	strheq	r3, [r4, #12]
 800d4e8:	bf18      	it	ne
 800d4ea:	81a3      	strhne	r3, [r4, #12]
 800d4ec:	bd10      	pop	{r4, pc}

0800d4ee <__sclose>:
 800d4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f2:	f000 b813 	b.w	800d51c <_close_r>
	...

0800d4f8 <_write_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	; (800d518 <_write_r+0x20>)
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	4608      	mov	r0, r1
 800d500:	4611      	mov	r1, r2
 800d502:	2200      	movs	r2, #0
 800d504:	602a      	str	r2, [r5, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	f7f5 ff61 	bl	80033ce <_write>
 800d50c:	1c43      	adds	r3, r0, #1
 800d50e:	d102      	bne.n	800d516 <_write_r+0x1e>
 800d510:	682b      	ldr	r3, [r5, #0]
 800d512:	b103      	cbz	r3, 800d516 <_write_r+0x1e>
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	bd38      	pop	{r3, r4, r5, pc}
 800d518:	200040e4 	.word	0x200040e4

0800d51c <_close_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4d06      	ldr	r5, [pc, #24]	; (800d538 <_close_r+0x1c>)
 800d520:	2300      	movs	r3, #0
 800d522:	4604      	mov	r4, r0
 800d524:	4608      	mov	r0, r1
 800d526:	602b      	str	r3, [r5, #0]
 800d528:	f7f5 ff6d 	bl	8003406 <_close>
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	d102      	bne.n	800d536 <_close_r+0x1a>
 800d530:	682b      	ldr	r3, [r5, #0]
 800d532:	b103      	cbz	r3, 800d536 <_close_r+0x1a>
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	bd38      	pop	{r3, r4, r5, pc}
 800d538:	200040e4 	.word	0x200040e4

0800d53c <_fstat_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d07      	ldr	r5, [pc, #28]	; (800d55c <_fstat_r+0x20>)
 800d540:	2300      	movs	r3, #0
 800d542:	4604      	mov	r4, r0
 800d544:	4608      	mov	r0, r1
 800d546:	4611      	mov	r1, r2
 800d548:	602b      	str	r3, [r5, #0]
 800d54a:	f7f5 ff68 	bl	800341e <_fstat>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d102      	bne.n	800d558 <_fstat_r+0x1c>
 800d552:	682b      	ldr	r3, [r5, #0]
 800d554:	b103      	cbz	r3, 800d558 <_fstat_r+0x1c>
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	bd38      	pop	{r3, r4, r5, pc}
 800d55a:	bf00      	nop
 800d55c:	200040e4 	.word	0x200040e4

0800d560 <_isatty_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d06      	ldr	r5, [pc, #24]	; (800d57c <_isatty_r+0x1c>)
 800d564:	2300      	movs	r3, #0
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	f7f5 ff67 	bl	800343e <_isatty>
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	d102      	bne.n	800d57a <_isatty_r+0x1a>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	b103      	cbz	r3, 800d57a <_isatty_r+0x1a>
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	bd38      	pop	{r3, r4, r5, pc}
 800d57c:	200040e4 	.word	0x200040e4

0800d580 <_lseek_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d07      	ldr	r5, [pc, #28]	; (800d5a0 <_lseek_r+0x20>)
 800d584:	4604      	mov	r4, r0
 800d586:	4608      	mov	r0, r1
 800d588:	4611      	mov	r1, r2
 800d58a:	2200      	movs	r2, #0
 800d58c:	602a      	str	r2, [r5, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	f7f5 ff60 	bl	8003454 <_lseek>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_lseek_r+0x1e>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_lseek_r+0x1e>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	200040e4 	.word	0x200040e4

0800d5a4 <_malloc_usable_size_r>:
 800d5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5a8:	1f18      	subs	r0, r3, #4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfbc      	itt	lt
 800d5ae:	580b      	ldrlt	r3, [r1, r0]
 800d5b0:	18c0      	addlt	r0, r0, r3
 800d5b2:	4770      	bx	lr

0800d5b4 <_read_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d07      	ldr	r5, [pc, #28]	; (800d5d4 <_read_r+0x20>)
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	4608      	mov	r0, r1
 800d5bc:	4611      	mov	r1, r2
 800d5be:	2200      	movs	r2, #0
 800d5c0:	602a      	str	r2, [r5, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	f7f5 fee6 	bl	8003394 <_read>
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d102      	bne.n	800d5d2 <_read_r+0x1e>
 800d5cc:	682b      	ldr	r3, [r5, #0]
 800d5ce:	b103      	cbz	r3, 800d5d2 <_read_r+0x1e>
 800d5d0:	6023      	str	r3, [r4, #0]
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	200040e4 	.word	0x200040e4

0800d5d8 <_init>:
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	bf00      	nop
 800d5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5de:	bc08      	pop	{r3}
 800d5e0:	469e      	mov	lr, r3
 800d5e2:	4770      	bx	lr

0800d5e4 <_fini>:
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	bf00      	nop
 800d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ea:	bc08      	pop	{r3}
 800d5ec:	469e      	mov	lr, r3
 800d5ee:	4770      	bx	lr
